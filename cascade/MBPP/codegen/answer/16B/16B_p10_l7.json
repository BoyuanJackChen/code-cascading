[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return(shared_elements)\n",
        "num_ids": 52
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = [elem for elem in test_tup1 if elem in test_tup2]\n    return shared\n",
        "num_ids": 32
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [item for item in test_tup1 if item in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [elem for elem in test_tup1 if elem in test_tup2]\n",
        "num_ids": 27
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    res1 = []\n    res2 = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                res1.append(elem1)\n    for elem2 in test_tup2:\n        for elem1 in test_tup1:\n            if elem2 == elem1:\n                res2.append(elem2)\n    return res1, res2\n",
        "num_ids": 118
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # print(set(test_tup1).intersection(set(test_tup2)))\n    return set(test_tup1).intersection(set(test_tup2))\n",
        "num_ids": 48
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # print(set(test_tup1).intersection(set(test_tup2)))\n    print(list(set(test_tup1).intersection(set(test_tup2))))\n",
        "num_ids": 51
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 62
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i = i + 6\n    return False\n",
        "num_ids": 91
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False\n",
        "num_ids": 73
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not is_prime(n)\n",
        "num_ids": 12
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return True\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i = i + 2\n    return False\n",
        "num_ids": 65
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    is_prime = True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            is_prime = False\n            break\n    return is_prime\n",
        "num_ids": 55
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]>heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]<heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]<heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]>heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n",
        "num_ids": 104
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap,num)\n        else:\n            hq.heappushpop(heap,num)\n",
        "num_ids": 60
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap=[]\n    for i in range(n):\n        hq.heappush(maxheap,(-nums[i],nums[i]))\n    print(maxheap)\n    return [hq.heappop(maxheap)[1] for i in range(n)]\nnums=[2,3,5,4,6]\nn=3\nprint(heap_queue_largest(nums,n))\n",
        "num_ids": 108
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    lst = []\n    for i in range(n):\n        lst.append(hq.heappop(nums))\n    return lst[::-1]\n",
        "num_ids": 56
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    if n>len(nums):\n        return nums\n    else:\n        return sorted(nums, reverse=True)\n    \ndef heap_queue_least(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    if n>len(nums):\n        return nums\n    else:\n        return sorted(nums)\n",
        "num_ids": 41
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, -nums[i])\n    while len(heap) > 0:\n        print(-hq.heappop(heap))\n",
        "num_ids": 60
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,-i)\n    i = 0\n    while i<n:\n        print(hq.heappop(h)*(-1),end=\" \")\n        i+=1\n    return\n",
        "num_ids": 68
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = sorted(nums,reverse=True)\n    q = []\n    for i in range(n):\n        hq.heappush(q,nums[i])\n    return q\n",
        "num_ids": 50
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)==0):\n        return []\n    # make heap of list\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    # pop largest until heap is less than or equal to n\n    largest = []\n    while(len(heap)>n):\n        largest.append(hq.heappop(heap))\n    # append remaining largest list\n    while(len(heap)>0):\n        largest.append(hq.heappop(heap))\n    return largest\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)==0):\n        return []\n    # make heap of list\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    # pop largest until heap is less than or equal to n\n    smallest = []\n    while(len(heap)>n):\n        smallest.append(hq.heappop(heap))\n    # append remaining largest list\n    while(len(heap)>0):\n        smallest.append(hq.heappop(heap))\n    return smallest\ndef min_heap_insert(min_heap,item):\n    hq.heappush(min_heap,item)\ndef min_heap_pop(min_heap):\n    return hq.heappop(min_heap)\ndef min_heap_top(min_heap):\n    return min_heap[0]\ndef max_heap_insert(max_heap,item):\n    hq.heappush(max_heap,-item)\ndef max_heap_pop(max_heap):\n    return -hq.heappop(max_heap)\ndef max_heap_top(max_heap):\n    return -max_heap[0]\ndef heap_decrease_key(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    index = heap.index(item)\n    hq.heapify(heap)\n    heap[index] = new_key\n    hq.heapify(heap)\ndef heap_increase_key(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    index = heap.index(item)\n    hq.heapify(heap)\n    heap[index] = new_key\n    hq.heapify(heap)\ndef min_heap_sort(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into min heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off min element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.heapify(nums)\n    return nums\ndef max_heap_sort(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into max heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off max element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.heapify(nums)\n    return nums\ndef min_heap_insert_multiple(min_heap,item):\n    # O(log(n))\n    # O(1)\n    for item in nums:\n        hq.heappush(min_heap,item)\ndef min_heap_pop_multiple(min_heap):\n    return hq.heappop(min_heap)\ndef min_heap_top_multiple(min_heap):\n    return min_heap[0]\ndef max_heap_insert_multiple(max_heap,item):\n    # O(log(n))\n    # O(1)\n    for item in nums:\n        hq.heappush(max_heap,-item)\ndef max_heap_pop_multiple(max_heap):\n    return -hq.heappop(max_heap)\ndef max_heap_top_multiple(max_heap):\n    return -max_heap[0]\ndef heap_decrease_key_multiple(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    for item in nums:\n        index = heap.index(item)\n        hq.heapify(heap)\n        heap[index] = new_key\n        hq.heapify(heap)\ndef heap_increase_key_multiple(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    for item in nums:\n        index = heap.index(item)\n        hq.heapify(heap)\n        heap[index] = new_key\n        hq.heapify(heap)\ndef min_heap_sort_multiple(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into min heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off min element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.heapify(nums)\n    return nums\ndef max_heap_sort_multiple(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into max heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off max element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.hea",
        "num_ids": 154
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)<n):\n        return []\n    pq = []\n    for num in nums:\n        hq.heappush(pq,-num)\n    return [-i for i in hq.nlargest(n,pq)]\n    \n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if(len(nums)<n):\n        return []\n    pq = []\n    for num in nums:\n        hq.heappush(pq,num)\n    return hq.nsmallest(n,pq)\n    \n    \ndef heap_queue_count(nums,n):\n    '''\n    Write a function to count the number of n elements in a given list with the largest number appearing n times.\n    '''\n    if(len(nums)<n):\n        return 0\n    hq = nums[:n]\n    hq.sort()\n    heapq.heapify(hq)\n    return hq[0]*n\n    \n    \ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the median of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sorted(nums)[n//2]\n    nums.sort()\n    return nums[n-1]\n    \n    \ndef heap_queue_sum_of_median(nums,n):\n    '''\n    Write a function to find the sum of the median of the n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sum(sorted(nums)[n//2:])\n    median = sorted(nums)[n//2]\n    return sum(sorted(nums)[:n//2]) + sum(sorted(nums)[n//2+1:]) + median*n\n    \n    \ndef heap_queue_mean(nums,n):\n    '''\n    Write a function to find the mean of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sum(sorted(nums)[n//2:])/(n//2)\n    nums.sort()\n    return sum(nums[n:2*n])/(2*n)\n    \n    \ndef heap_queue_variance(nums,n):\n    '''\n    Write a function to find the variance of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sum(sorted(nums)[n//2:])*(n//2)/(n//2)\n    return sum(nums[n:2*n])*(n)/(2*n) - (sum(nums[:n])*n)/(n)\n    \n    \ndef heap_queue_standard_deviation(nums,n):\n    '''\n    Write a function to find the standard deviation of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return (sum(sorted(nums)[n//2:])/n - (sum(sorted(nums)[n//2:])**2)/(n))**0.5\n    return (sum(nums[n:2*n]) - sum(nums[:n])*n)/(2*n) - (sum(nums[n:2*n]) - sum(nums[n:2*n])**2/(2*n))**0.5\n    \n    \ndef heap_queue_median_of_medians(nums,n):\n    '''\n    Write a function to find the median of the median of the n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    heap = nums[:n]\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    if(n<=2):\n        return sorted(heap)[n//2]\n    return -heapq.heappushpop(heap,-heapq.heappop(heap))\n    \n    \ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort the n smallest integers from a given list.\n    '''\n    if(len(nums)<=1):\n        return nums\n    heapq.heapify(nums)\n    nums.sort()\n    return sorted(nums)\n    \n    \ndef heap_queue_flip(nums):\n    '''\n    Write a function to do in-place reversal of n smallest integers from a given list.\n    '''\n    if(len(nums)<=1):\n        return nums\n    heapq.heapify(nums)\n    for i in range(len(nums)//2):\n        hq.heappop(nums)\n    for i in range(len(nums)//2):\n        hq.heappush(nums,hq.heappop(nums))\n    return sorted(nums)\n    \n    \ndef heap_queue_find(nums,n,target):\n    '''\n    Write a function to find the n smallest integers in a given list that contain a given integer target.\n    '''\n    if(len(nums)<n):\n        return -1\n    heapq.heapify(nums)\n    i = 0\n    while(nums[0]!=target):\n        hq.heappop(nums)\n        i+=1\n    hq.heappop(nums)\n    return i\n    \n    \ndef heap_queue_get_frequency_of_max(nums):\n    '''\n    Write a function to count the frequency of the largest element in a given list.\n    '''\n    if(len(nums)<=1):\n        return 0\n    heapq.heapify(nums)\n    heapq.heappush(nums,nums[0])\n    heapq.heappop(nums)\n    return len(nums)\n    \n    \ndef heap_queue_get_frequency_of_min(nums):\n    '''\n    Write a function to count the frequency of the smallest element in a given list.\n    '''\n    if(len(nums)<=1):\n        return 0\n    heapq.heapify(nums)\n    return len(nums)\n    \n    \ndef heap_queue_get_frequency_of_element(nums,element):\n    '''\n    Write a function to count the frequency of the given element in a given list.\n    '''\n    if(len(nums)<=1):\n        return 0\n    heapq.heapify(nums)\n    return nums.count(element)\n    \n    \ndef heap_queue_get_element_at(nums,index):\n    '''\n    Write a function to find the element at index of n smallest integers from a given list.\n    '''\n    if(len(nums)<=1):\n        return -1\n    heapq.heapify(nums)\n    i = 0\n    while(nums[0]!=index):\n        hq.heappop(nums)\n        i+=1\n    return hq.heappop(nums)\n    \n    \ndef heap_queue_get_frequency_of_median(nums,n):\n    '''\n    Write a function to find the frequency of the median of the n smallest integers from a given list.\n    '''\n    if(len(nums)<",
        "num_ids": 11
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    powOfTwo = 0\n    while (x): \n        powOfTwo += 1\n        x &= x-1\n    if (powOfTwo == 1): \n        return True\n    else: \n        return False\n",
        "num_ids": 58
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    import math\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def is_power_of_two(n):\n        return (n & (n-1) == 0) and n!= 0\n    return is_power_of_two(x)\n",
        "num_ids": 47
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # extract the rightmost bit of x \n    x = x >> 1\n    # if 2**k is equal to x, then return True \n    return (x == 0)\n",
        "num_ids": 44
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0):\n        if ((x & 1) == 1):\n            return True\n        x = x >> 1\n        if (x == 0):\n            return False\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Count the number of set bits \n    # in the binary representation of the given \n    # number x. \n    x = x ^ (x >> 1) \n    return (x & (x - 1) == 0) \n",
        "num_ids": 57
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Check if x is Power Of 2\n    while (x and not(x & -x)): \n        x = x & (x - 1) \n    return (not x)\n",
        "num_ids": 46
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n",
        "num_ids": 30
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x &(x-1)==0: \n        return True\n    else:\n        return False\n    # else:\n    #     return False\n",
        "num_ids": 39
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regx = r'\\b[a-zA-Z]{4,}\\b'\n    return re.findall(regx, text)\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_words = re.findall(r'\\w{4,}',text)\n    return list_words\n",
        "num_ids": 30
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_word = re.findall(r'\\w{4,}',text)\n    print(long_word)\n",
        "num_ids": 32
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}',text)\n    if result:\n        print(result)\n    else:\n        print(\"No match found\")\n",
        "num_ids": 45
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # match_obj = re.search(r'\\S{4,}', text, re.I)\n    # print(match_obj)\n    match_obj = re.findall(r'\\S{4,}', text, re.I)\n    print(match_obj)\n    return match_obj\n",
        "num_ids": 77
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [s for s in text.split() if len(s) >= 4]\n",
        "num_ids": 22
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = re.findall(r'\\w{4,}',text)\n    print(l)\n",
        "num_ids": 28
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    match = pattern.findall(text)\n    return match\n",
        "num_ids": 35
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words more than 4 characters\n    matches = re.findall(r'\\b\\w{4,}\\b', text)\n    # return all words\n    return matches\n",
        "num_ids": 46
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #new_list = []\n    #for i in nums:\n    #    new_list.append(i**2)\n    #return new_list\n    return [num**2 for num in nums]\n",
        "num_ids": 53
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\nprint(square_nums([1,2,3,4,5,6,7,8,9,10]))\n",
        "num_ids": 62
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n",
        "num_ids": 18
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n ** 2 for n in nums]\n",
        "num_ids": 15
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for i in nums:\n        squared_nums.append(i**2)\n    return squared_nums\n",
        "num_ids": 40
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num ** 2\n",
        "num_ids": 17
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    string=list(str)\n    n=len(string)\n    count=0\n    for i in range(1,n):\n        if(string[i]==string[0]):\n            continue\n        else:\n            j=0\n            while(string[i]!=string[j]):\n                j+=1\n            if(j==i):\n                continue\n            else:\n                count+=1\n    return count\n",
        "num_ids": 104
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def string_rotation(str1,str2):\n        if len(str1)!= len(str2):\n            return False\n        # do a sort and compare the strings\n        return sorted(str1) == sorted(str2)\n    #sort the string\n    sorted_str = sorted(str)\n    # find the minimum number of rotations required\n    rotations = 0\n    for i in range(1,len(sorted_str)):\n        if string_rotation(sorted_str[i],sorted_str[0]):\n            return rotations\n        else:\n            rotations+=1\n    return rotations\n",
        "num_ids": 154
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    length = len(str) \n    while(i < length): \n        if (str[i]!= str[length - i - 1]): \n            if i == 0: \n                return length - i - 1\n            else: \n                return length - i\n        i += 1\n    return 0\n",
        "num_ids": 81
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    \n    first_rot = str[0]\n    first_rot_len = 1\n    for i in range(1, len(str)):\n        if str[i] == first_rot:\n            first_rot_len += 1\n        else:\n            break\n    print(first_rot_len)\n",
        "num_ids": 89
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    list1 = []\n    list1.append(str)\n",
        "num_ids": 17
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if(len(str) == 0): \n        return 0\n    rotations = 0\n    str1 = str[0:1] \n    for i in range(1, len(str)): \n        if (str1 == str[i:i + 1]): \n            return 0\n        str1 = str[i:i + 1] \n    return rotations \n",
        "num_ids": 92
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(0, len(str)):\n        if str[:i+1] == str[i+1:]:\n            return i\n    return -1\n",
        "num_ids": 43
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the rotations.\n    rotations = 0\n    # To store the length of the string.\n    len_str = len(str)\n    # Iterate the string.\n    for i in range(len_str):\n        # Set the first character as the current character and the last character as the first character.\n        first_char = str[i]\n        last_char = str[len_str - 1]\n        # Iterate the string.\n        for j in range(1, len_str):\n            # If the current character is equal to the last character, then set the last character to the second last character and the first character to the second character.\n            if str[j] == last_char:\n                last_char = str[j - 1]\n                first_char = str[j]\n                # Increase the number of rotations.\n                rotations += 1\n            # If the current character is not equal to the last character, then break the loop and return.\n            if str[j]!= last_char:\n                break\n    # Return the number of rotations.\n    return rotations\n",
        "num_ids": 258
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str: \n        return 0\n    n = len(str) \n    ans = 0\n    for i in range(n - 1): \n        if str[i]!= str[i + 1]: \n            ans += 1\n    return ans ",
        "num_ids": 64
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(s, n): \n        return s[n:] + s[:n]\n    n = len(str)\n    result = 0\n    while(True):\n        if rotate(str, n) == str:\n            return result\n        else:\n            result += 1\n            n += 1\n    return result\n        \ndef find_Missing(arr, n): \n    '''\n    Write a Python function to find and return the missing number in a given integer array.\n",
        "num_ids": 21
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    return s\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    s = ''.join(s)\n    return s\n",
        "num_ids": 40
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        s=s.replace(ch, \"\") \n        s=s.replace(ch, \"\") \n    return s\ns = input(\"Enter the string :\")\nch = input(\"Enter the character to remove: \")\nprint(remove_Occ(s, ch)) \n'''\nOutput:\nEnter the string :hello\nEnter the character to remove: e\nhel\n'''\n",
        "num_ids": 2
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',-1)\n",
        "num_ids": 22
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1)[:-1]\n",
        "num_ids": 17
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_ch_Occ = s.find(ch)\n    last_ch_Occ = s.rfind(ch)\n    return s[0:first_ch_Occ]+s[last_ch_Occ+1:len(s)]\nprint(remove_Occ(\"RithvikReddy\",'R'))\n",
        "num_ids": 75
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n    \ndef word_count(s): \n    '''\n    Write a python function to count the occurrences of words in a string.\n    '''\n    return len(s.split())\n",
        "num_ids": 11
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    start = 0\n    end = len(s)-1\n    \n    while start <= end:\n        while s[start]!= ch and start <= end:\n            start += 1\n        while s[end]!= ch and start <= end:\n            end -= 1\n        if start <= end:\n            s = s[:start] + s[end+1:]\n            end = len(s)-1\n    return s\n",
        "num_ids": 101
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Code goes here\n    s = list(s)\n    s.remove(ch)\n    return ''.join(s)\n",
        "num_ids": 33
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch, \"\")\n    s1 = s1.replace(ch, \"\")\n    return s1\n",
        "num_ids": 34
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = {}\n    for row in range(len(M)):\n        sums = 0\n        for col in range(len(M[row])):\n            sums += M[row][col]\n        row_sums[row] = sums\n    row_sums = sorted(row_sums.items(), key=lambda x: x[1])\n    return row_sums\n",
        "num_ids": 96
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(0, len(M)):\n        for j in range(i, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n",
        "num_ids": 66
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    total_sum = []\n    for x in M:\n        total_sum.append(sum(x))\n    \n    M.sort(key=lambda x: sum(x))\n    return M\n    \ndef find_zeros(M):\n    '''\n    Write a function to find the zero elements in a given matrix. An element is considered to be zero if it's value is 0.\n    '''\n    zero_elements = []\n    for x in range(len(M)):\n        for y in range(len(M[0])):\n            if M[x][y] == 0:\n                zero_elements.append([x,y])\n    \n    return zero_elements\n",
        "num_ids": 70
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_matrix = [sum(row) for row in M]\n    sum_matrix.sort()\n    return M[sum_matrix.index(min(sum_matrix))]\n",
        "num_ids": 48
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_row = []\n    for row in M:\n        sum_row.append(sum(row))\n    # sum_row.sort()\n    # print(sum_row)\n    for i in range(0, len(M)):\n        for j in range(0, len(M)):\n            if sum_row[i] < sum_row[j]:\n                # print(M[j], M[i])\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n                # print(M)\n    return M\n",
        "num_ids": 141
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda x: sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i + 1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n    return M\n",
        "num_ids": 78
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = [sum(x) for x in M]\n    return [[M[i][j] for i in range(len(M)) if S[i]==sum(S[:i+1])] for j in range(len(M[0]))]\n",
        "num_ids": 64
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp = []\n    for row in range(len(M)):\n        temp.append(sum(M[row]))\n    \n    for i in range(len(temp)):\n        for j in range(len(temp)-1):\n            if temp[j]>temp[j+1]:\n                temp[j],temp[j+1] = temp[j+1],temp[j]\n                M[j],M[j+1] = M[j+1],M[j]\n                # print(M[j],M[j+1])\n",
        "num_ids": 134
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort(M, start, end):\n        if start < end:\n            pivot_row = end\n            pivot_idx = M[pivot_row].index(min(M[pivot_row]))\n            pivot_element = M[pivot_row][pivot_idx]\n            for j in range(start, pivot_idx):\n                M[j][pivot_idx],M[j][pivot_row] = M[j][pivot_row],M[j][pivot_idx]\n            for j in range(start, end):\n                for i in range(j+1, end):\n                    if M[j][j] + M[i][i] < M[i][j] + M[j][i]:\n                        M[j][i],M[i][j] = M[i][j],M[j][i]\n                        M[j][j],M[i][i] = M[i][i],M[j][j]\n            for j in reversed(range(start, pivot_idx)):\n                M[j][pivot_idx],M[j][pivot_row] = M[j][pivot_row],M[j][pivot_idx]\n            sort(M, start, pivot_idx-1)\n            sort(M, pivot_idx+1, end)\n    sort(M, 0, len(M)-1)\n    return M\n",
        "num_ids": 344
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2)*(b*h) * l\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*h*(l*b)\n",
        "num_ids": 17
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l,b,h are side length of triangular prism\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h\n",
        "num_ids": 16
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*l*b*h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/6)*l*b*h\n",
        "num_ids": 15
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \nl = float(input('Enter the length of the base of the triangular prism: '))\nb = float(input('Enter the length of the height of the triangular prism: '))\nh = float(input('Enter the length of the triangular prism: '))\nprint('The volume of the triangular prism is: ',find_Volume(l,b,h)",
        "num_ids": 90
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round(((1/2) * (l * b * h)),1)\n    pass\n",
        "num_ids": 25
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5*l*b*h\n",
        "num_ids": 14
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('_\\w+_', text))\n",
        "num_ids": 19
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #should return true if at least one sequence of lowercase letters joined with an underscore is found\n    if re.search(r'_[a-z]+_',text):\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #example \n    #check if 'the_cat_is_sitting_on_the_mat' is True\n    #check if 'The_dog_is_sitting_on_the_mat' is False\n    #check if 'The_cat_is_sitting_on_the_mat' is False\n",
        "num_ids": 76
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.findall(r\"^[a-z]+_[a-z]+$\", text)\n    if match:\n        return True\n    else:\n        return False\n",
        "num_ids": 46
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Note: this pattern is not case sensitive.\n    return bool(re.search(\"[a-z]+_[a-z]+\", text, flags=re.IGNORECASE))\n",
        "num_ids": 46
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[_]', text)\n",
        "num_ids": 16
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"_\",text):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"^([a-z]+_){2}[a-z]+$\", text))\n",
        "num_ids": 32
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Check that the string starts with an underscore.\n    if not text.startswith(\"_\"):\n        return False\n",
        "num_ids": 31
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.findall(r'\\w_\\w', text)\n    if match:\n        return True\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4*a\n    return p\n",
        "num_ids": 13
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass # remove this line\n    return a*4\n",
        "num_ids": 15
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*a)\n",
        "num_ids": 10
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n",
        "num_ids": 8
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    key_list = list(string) \n    for key in key_list: \n        if key in string2: \n            string = string.replace(key,'') \n    return string\n",
        "num_ids": 48
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i in List_1:\n            List_3.remove(i)\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef list_to_str(string):\n    '''\n    Write a function to replace all the characters of the first string with the corresponding characters of the second string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i in List_1:\n            List_3[List_1.index(i)] = i\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef sort_string(string):\n    '''\n    Write a function to sort all the characters of the string in descending order.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    List_3.sort()\n    List_3.reverse()\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    List_4.reverse()\n    List_4.sort(reverse = True)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count\n    \ndef swap_case(string):\n    '''\n    Write a function to swap cases. \n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    List_4 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i.isupper():\n            List_3[List_1.index(i.lower())] = i.upper()\n        else:\n            List_3[List_1.index(i.upper())] = i.lower()\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef remove_vowels(string):\n    '''\n    Write a function to remove all the vowels from the string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            List_3[List_1.index(i)] = \"\"\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef check_pangram(string):\n    '''\n    Write a function to check whether a string is PANGRAM or not.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    List_4 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i not in List_3:\n            List_3.append(i)\n            \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    if len(string) == len(List_1):\n        return True\n    else:\n        return False\n    \ndef full_rotation(string):\n    '''\n    Write a function that takes a string as input and returns true if the string is a full rotation of another string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    List_4 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i not in List_3:\n            List_3.append(i)\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    \n    List_1 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i not in List_3:\n            List_3.append(i)\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    if string == List_1:\n        return True\n    else:\n        return False\n",
        "num_ids": 314
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string)\n    for i in l:\n        if i in string:\n            l.remove(i)\n    return ''.join(l)\nprint(str_to_list(\"Oops!!!\"))\n",
        "num_ids": 55
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for i in string:\n        if i not in result:\n            result.append(i)\n    return result\ndef string_to_number(string, base): \n    '''\n    Write a function to convert a string into an integer.\n    '''\n    result = 0\n    for i in range(len(string)):\n        result += ord(string[i]) * base**(len(string)-i-1)\n    return result\ndef number_to_string(number, base): \n    '''\n    Write a function to convert an integer into a string.\n    '''\n    result = []\n    while number:\n        result.append(chr(int(number%base)))\n        number = number//base\n    return ''.join(list(reversed(result)))\ndef list_to_str(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    return ''.join(list)\ndef str_to_list_1(string):\n    '''\n    Write a function to convert a string into a list of characters.\n    '''\n    return list(string)\ndef str_to_list_2(string):\n    '''\n    Write a function to split a string into a list of characters.\n    '''\n    return list(string)\ndef list_to_str_2(list):\n    '''\n    Write a function to split a list of characters into a string.\n    '''\n    return ''.join(list)\ndef main():\n    print(str_to_list('Hello, World!'))\n    print(str_to_list_1('Hello, World!'))\n    print(str_to_list_2('Hello, World!'))\n    print(list_to_str('Hello, World!'))\n    print(list_to_str_2(['H', 'e', 'l', 'l', 'o', ',','', 'W', 'o', 'r', 'l', 'd', '!']))\n    print(list_to_str_2(['H', 'e', 'l', 'l', 'o', ',','', 'W', 'o', 'r', 'l', 'd', '!']))\n    print(string_to_number('1', 2))\n    print(number_to_string(256, 2))\n    print(string_to_number
        "num_ids": 1648
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [character for character in string if character not in string]\n",
        "num_ids": 17
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = [] \n    for x in string:\n        if x in res:\n            string = string.replace(x,\"\",1)\n        else:\n            res.append(x)\n    return res\n",
        "num_ids": 51
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_ = [i for i in string]\n    for i in list_:\n        if i not in string2:\n            string = string.replace(i,\"\")\n    print(string)\n    return string\n",
        "num_ids": 52
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in set(string[:string.find(char)])]\n",
        "num_ids": 28
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string) \n    for i in l: \n        if i in string2: \n            l.remove(i)\n    return (\"\".join(l)) \ndef first_last_index(string):\n    first_index = 0\n    last_index = len(string)-1\n    return [first_index,last_index]\ndef pattern_count(text,pattern):\n    count = 0\n    for i in range(0,len(text)-len(pattern)+1):\n        if str_to_list(text[i:i+len(pattern)]) == str_to_list(pattern):\n            count+=1\n    return count\n",
        "num_ids": 158
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in range(0, NO_OF_CHARS): \n        dict[string[i]] = 0\n    for i in range(0, len(string)): \n        dict[string[i]] += 1\n    return dict\n",
        "num_ids": 63
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # return bool([item for item in arraynums if arraynums.count(item) > 1])\n    return len(set(arraynums)) < len(arraynums)\n",
        "num_ids": 45
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # brute force solution O(n2)\n    # for i in range(len(arraynums)):\n    #     for j in range(i+1, len(arraynums)):\n    #         if arraynums[i] == arraynums[j]:\n    #             return True\n    # return False\n    # sorting solution O(nlogn)\n    # arraynums.sort()\n    # for i in range(1, len(arraynums)):\n    #     if arraynums[i] == arraynums[i-1]:\n    #         return True\n    # return False\n",
        "num_ids": 144
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    count = 0\n    while count < len(arraynums):\n        for element in arraynums:\n            if element == arraynums[count]:\n                return True\n        count = count + 1\n    return False\n",
        "num_ids": 53
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return sorted(arraynums) == list(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    if len(arraynums) == 0:\n        return True\n    elif len(arraynums) == 1:\n        return False\n    else:\n        for i in range(len(arraynums)):\n            for j in range(i+1, len(arraynums)):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n        ",
        "num_ids": 98
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n    \ndef test_duplicate_with_sets(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)\n    \ndef test_single_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n    \ndef test_single_duplicate_with_sets(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            return True\n    return False\n    \n    ",
        "num_ids": 36
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return not len(set(arraynums)) == len(arraynums)\n",
        "num_ids": 21
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) == len(arraynums)\n",
        "num_ids": 20
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j] and i!= j:\n                return True\n    return False\n",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if (x % 5) == 0:\n        return True\n    else:\n        return False\n    \n",
        "num_ids": 27
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 14: \n        return True\n    else: \n        return False\n",
        "num_ids": 23
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    i = 1\n    while (i ** 2) <= x:\n        if x % i == 0:\n            if (i ** 2 == x):\n                return True\n            return False\n        i += 1\n        \ndef prime_factors(x):\n    '''\n    Write a function that returns all prime factors of the number x.\n    '''\n    prime_factors = []\n    i = 2\n    while i <= x:\n        if x % i == 0:\n            prime_factors.append(i)\n            x = x/i\n        else:\n            i += 1\n    return prime_factors\n",
        "num_ids": 65
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    def is_number_woodall(n): \n        '''\n        Write a function to check if the given number is woodball or not.\n        '''\n        if n % 3 == 0 and n % 5 == 0: \n            return True\n        return False\n    return is_number_woodall(x)\n",
        "num_ids": 38
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    if x % 2 == 0:\n        return False\n    for i in range(3,x,2):\n        if x % i == 0:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%4==0:\n        return True\n    else:\n        return False\n    \n    \ndef is_woodall2(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x%4==0)\n",
        "num_ids": 12
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in range(2,x):\n        if x%i==0:\n            return False\n    return True\n",
        "num_ids": 30
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5 == 0:\n        print(x, \"is a woodball\")\n    else:\n        print(x, \"is not a woodball\")\n",
        "num_ids": 40
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0 and x%5==0",
        "num_ids": 15
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    x = int(x) \n    y = x % 10 \n    z = x % 100 \n    if (x>=1000 and x<=9999) or (x>=10000 and x<=99999) or (x>=100000 and x<=999999) or (x>=10000000 and x<=9999999) or (x>=100000000 and x<=99999999) :\n        return False\n    elif ((y == 1 or y == 2 or y == 3 or y == 4 or y == 5 or y == 6 or y == 7 or y == 8 or y == 9) and (z == 0 or z == 1 or z == 2 or z == 3 or z == 4 or z == 5 or z == 6 or z == 7 or z == 8 or z == 9)) or ((z == 0 or z == 1 or z == 2 or z == 3 or z == 4 or z == 5 or z == 6 or z == 7 or z == 8 or z == 9) and (y == 0 or y == 1 or y == 2 or y == 3 or y == 4 or y == 5 or y == 6 or y == 7 or y == 8 or y == 9)): \n        return True\n    else: \n        return False\n",
        "num_ids": 285
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)[::-1]\n    return int(rev) * 2 == num\n",
        "num_ids": 25
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1]) * 2 - 1\n    \ndef trib(num):\n    '''\n    Write a Python program to check whether a given number is a weird number.\n    A number is weird when it ends in 'weird' when removed its digits.\n    '''\n    return 'weird' if str(num)[::-1] == 'weird' else 'not weird'\n",
        "num_ids": 28
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # We will be taking reverse of num.\n    reverse_num = 0\n    # Converting a number into a string.\n    str_num = str(num)\n    # The for loop will iterate over the string and will reverse it.\n    for i in range(len(str_num)-1, -1, -1):\n        reverse_num = reverse_num*10 + int(str_num[i])\n    # Now we will multiply the reverse of num by 2 and \n    # convert it into an int.\n    rev_num = int(str(reverse_num*2))\n    # Now we will compare the num with rev_num\n    if num == rev_num:\n        print(f\"{num} is one less than twice its reverse.\")\n    else:\n        print(f\"{num} is not one less than twice its reverse.\")\n",
        "num_ids": 200
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    numrev = num[::-1]\n    return num == numrev[:-1]\n",
        "num_ids": 32
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num)\n    rev_num = rev_num[::-1]\n    print(\"Number is:\",num)\n    print(\"Rev:\",rev_num)\n    print(\"Checking if:\",rev_num == \"0\"*(len(str(num))-1)+str(num))\n    return rev_num == \"0\"*(len(str(num))-1)+str(num)\n",
        "num_ids": 103
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num%10==num//10%10\n",
        "num_ids": 14
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    str_num = str(num)\n    for i in range(len(str_num)):\n        reversed_num += int(str_num[-(i+1)]) * 10**i\n    return reversed_num\n",
        "num_ids": 65
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = str(num)[::-1]\n    if int(num) - int(rev) == 1:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 49
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num==(num[::-1])*2)\nprint(rev(num))\n",
        "num_ids": 25
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = 0\n    while num>0:\n        revNum = (revNum*10)+(num%10)\n        num = num//10\n    return revNum\n",
        "num_ids": 43
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr = [1,3,6,2,4]\n    arr.sort()\n    largest = 0\n    for i in range(len(arr)): \n        largest = largest*10 + arr[i] \n    return largest \n",
        "num_ids": 60
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return \"Invalid Input\"\n    else :\n        arr.sort()\n        ans = \"\"\n        for i in arr :\n            ans += str(i)\n        return int(ans)\nprint(find_Max_Num(arr))\n",
        "num_ids": 67
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n",
        "num_ids": 16
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # converts a list into an array\n    arr = np.array(arr)\n",
        "num_ids": 21
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    #make sure there are numbers in arr\n    if len(arr) == 0 :\n        return \"Invalid input\"\n",
        "num_ids": 29
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr:\n        return None\n    \n    max_num = 0\n    for i in range(len(arr)):\n        max_num = max_num * 10 + arr[i]\n    return max_num\n    \n",
        "num_ids": 57
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    a = 0\n    for i in range(n) :\n        a = arr[i]\n        for j in range(i+1, n) :\n            a = a * 10 + arr[j]\n            if a > arr[j] :\n                arr[j] = a\n",
        "num_ids": 77
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    sorted_arr = sorted(arr)\n    arr_s = ''\n    for i in sorted_arr:\n        arr_s += str(i)\n",
        "num_ids": 39
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = \"\"\n    max1 = 0\n    for i in range(len(arr)-1,-1,-1):\n        if max1 < int(arr[i]):\n            max1 = int(arr[i])\n            num = arr[i] + num\n    print(\"The largest number that can be formed from the list of digits is \", num)\n    return\n",
        "num_ids": 87
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 33
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n    \ndef opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\n    \ndef print_min_max_nums(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<y:\n        print(x,y)\n    else:\n        print(y,x)\n        \nprint_min_max_nums(3,4)\n",
        "num_ids": 45
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y >=0:\n        return False\n    else:\n        return True\nprint(opposite_Signs(-3,5))\n",
        "num_ids": 36
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0 or x > 0 and y < 0: \n        return True\n    else: \n        return False\nprint(opposite_Signs(-2, 2))\n",
        "num_ids": 48
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0)^(y<0)\n",
        "num_ids": 16
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    elif x>0 and y<0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if (n % 2) == 0: \n        return int((n / 2) ** 2 * (3 * n - 1)) \n    else: \n        return int(((n + 1) / 2) ** 2 * n) \n",
        "num_ids": 58
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # return n * (3*n - 1) / 2\n    return n * (3*n - 1)\n",
        "num_ids": 29
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n",
        "num_ids": 18
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = str(n)\n    oct_num = n + '.' + n + '.' + n + '.' + n + '.' + n + '.' + n + '.' + n + '.' + n + '.' + n\n    return oct_num\n",
        "num_ids": 63
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return(n*(3*n-1))\n",
        "num_ids": 15
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n",
        "num_ids": 16
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 2)\n",
        "num_ids": 14
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    n = n - 1\n    return ((1 + (8 * n)) ** 0.5) / 2",
        "num_ids": 26
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            k = s[i:j+1]\n            l = sum(int(x) for x in k)\n            if l == len(k):\n                count += 1\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total = 0\n    for i in range(0, len(s)):\n        j = i + 1\n        while j <= len(s):\n            sum_s = sum([int(k) for k in s[i:j]])\n            if sum_s == len(s[i:j]):\n                total += 1\n            j += 1\n    return total\n",
        "num_ids": 89
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    n = l + 1\n    ans = defaultdict(int)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n):\n        for left in range(n - length):\n            right = left + length\n            if length == 2:\n                dp[left][right] = 1 if s[left] == s[right] else 0\n            else:\n                dp[left][right] = dp[left+1][right-1] + (1 if s[left] == s[right] else 0)\n    return sum([dp[0][i] for i in range(n)])\n",
        "num_ids": 178
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    length = len(s)\n    count_substring = 0\n    for i in range(0,length):\n        for j in range(i+1,length+1):\n            substring = s[i:j]\n            sum_of_substring = 0\n            for i in substring:\n                sum_of_substring += int(i)\n            if sum_of_substring == len(substring):\n                count_substring += 1\n    return count_substring\n",
        "num_ids": 116
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    size = len(s)\n    count = 0\n    for i in range(size):\n        for j in range(i+1,size+1):\n            subs = s[i:j]\n            #print(\"subs: \",subs)\n            n = len(subs)\n            #print(\"len of sub: \",n)\n            sum1 = 0\n            for k in subs:\n                sum1 = sum1 + int(k)\n            if n == sum1:\n                count += 1\n    return count\n    \ndef isHappyNumber(n):\n    '''\n    Write a python function to find whether a given number is happy or not.\n    '''\n    count = 0\n    while True:\n        n = sumOfDigitsSquare(n)\n        count += 1\n        if n == 1:\n            return True\n        if count > 10:\n            return False\n            \ndef sumOfDigitsSquare(n):\n    sum = 0\n    while n > 0:\n        sum = sum + (n % 10)**2\n        n = n//10\n    return sum\n",
        "num_ids": 99
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if(len(s)==0):\n        return(0)\n    if(len(s)==1):\n        return(1)\n    n = len(s)\n    if(len(s)==2):\n        return(3)\n    count = 2\n    c = 2\n    for i in range(2,n):\n        c = c*(n-i+1)\n        count += c\n    return(count)\n    \n",
        "num_ids": 108
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    subs=0\n    for i in range(len(s)):\n        for j in range(len(s)+1):\n            if i+j==len(s):\n                if sum(map(int,s[i:i+j]))==j:\n                    subs+=1\n    return subs\n",
        "num_ids": 75
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    if n==0:\n        return 0\n    cnt = 0\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        if i==0:\n            dp[0] = 1\n        else:\n            dp[i] = dp[i-1]+1 if int(s[i]) == len(s[:i+1]) else dp[i-1]\n        for j in range(1,i+1):\n            if i==j:\n                dp[j] = 1\n            elif int(s[i]) == int(s[j]):\n                dp[j] = dp[j-1]\n            else:\n                dp[j] = dp[j-1]\n        cnt += dp[i]\n    return cnt\n",
        "num_ids": 201
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    totals = defaultdict(int)\n    total_substrings = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            totals[j-i] += 1\n            total_substrings += 1\n    for key, value in totals.items():\n        if value > 1:\n            total_substrings -= value * (value-1)//2\n    return total_substrings\n",
        "num_ids": 108
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Method 1\n    # print(len(s))\n    # sub_len = 0\n    # for i in range(len(s)):\n    #     for j in range(i, len(s)):\n    #         sub_len = len(s[i:j+1])\n    #         if sum([int(x) for x in s[i:j+1]]) == sub_len:\n    #             print(s[i:j+1], sub_len)\n    # return sub_len\n",
        "num_ids": 124
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    \n    #smallest = min(xs)\n    #return smallest\n",
        "num_ids": 19
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n",
        "num_ids": 16
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    print('Smallest number in the list is: ', min(xs))\n",
        "num_ids": 19
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "num_ids": 9
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # TODO\n    return 0\n    #pass\n",
        "num_ids": 15
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Approach 1\n    # min_num = xs[0]\n    # for num in xs:\n    #     if min_num > num:\n    #         min_num = num\n    # return min_num\n",
        "num_ids": 55
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = test_list[1] - test_list[0]\n    for i in range(len(test_list)-1):\n        if max_diff < test_list[i+1] - test_list[i]:\n            max_diff = test_list[i+1] - test_list[i]\n    return max_diff\n",
        "num_ids": 85
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    \n    # Calculate the difference between each pair in the list\n    diff = [(a - b) for a, b in zip(test_list, test_list[1:])]\n",
        "num_ids": 45
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    tuple_list = sorted(test_list, key=lambda x: x[1])\n    print(tuple_list)\n    maximum = 0\n    for i in range(len(tuple_list)-1):\n        dif = tuple_list[i+1][0] - tuple_list[i][1]\n        if dif >= maximum:\n            maximum = dif\n    return maximum\n",
        "num_ids": 96
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 82
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for x in range(len(test_list)-1):\n        for y in range(x+1,len(test_list)):\n            if (test_list[y] - test_list[x]) > max_diff:\n                max_diff = test_list[y] - test_list[x]\n    return max_diff\n",
        "num_ids": 89
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # if the length of the list is odd, then the length of the pair is same, so the difference is the difference between the first and the last\n    # otherwise, if the list has even length, then the difference between the two pairs will be maximum\n    if len(test_list)%2!=0:\n        max_diff=test_list[0]-test_list[-1]\n    else:\n        max_diff=max(test_list[0]-test_list[1],test_list[-1]-test_list[-2])\n    return max_diff\n",
        "num_ids": 135
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 1:\n        return test_list[0]\n    test_list.sort()\n    return test_list[-1] - test_list[0]\n",
        "num_ids": 48
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    n = len(test_list)\n    lst = []\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if test_list[j] - test_list[i] > 0:\n                lst.append(test_list[j] - test_list[i])\n    return max(lst)\n",
        "num_ids": 89
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    #NOTE: I got help from here: https://github.com/tusin/euler/blob/master/14.py\n    #NOTE: I wrote a new function, max_difference(l), to find the maximum difference between a pair of numbers\n    #NOTE: I wrote a new function, list_pairs(l), which returns the number of pairs of numbers in the list\n    #NOTE: I wrote a new function, check_list(l), which checks for a list that is not equal to 0\n    if not test_list:\n        return 0\n    if len(test_list) == 1:\n        return 0\n    if len(test_list) == 2:\n        return test_list[1] - test_list[0]\n    list_max_diff = []\n    list_pairs = list_pairs(test_list)\n    for n in range(0, list_pairs+1):\n        list_max_diff.append(max_difference(test_list[:list_pairs]))\n    return max(list_max_diff)\n",
        "num_ids": 253
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n",
        "num_ids": 84
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key = lambda x: x[1]))\n",
        "num_ids": 22
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    x = sorted(subjectmarks, key=lambda x: x[1])\n    return x\n",
        "num_ids": 24
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks=sorted(subjectmarks,key=lambda x:x[1])\n    return sorted_marks\n",
        "num_ids": 30
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1], reverse=True)\n    return subjectmarks\n",
        "num_ids": 27
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # for i in range(0,len(subjectmarks)):\n    #     for j in range(i+1,len(subjectmarks)):\n    #         if subjectmarks[i][1]<subjectmarks[j][1]:\n    #             subjectmarks[i],subjectmarks[j]=subjectmarks[j],subjectmarks[i]\n    # return subjectmarks\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 104
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks = sorted(subjectmarks, key = lambda x:x[1])\n    return subjectmarks\n",
        "num_ids": 26
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(len(subjectmarks)-1):\n            if(subjectmarks[j][1]>subjectmarks[j+1][1]):\n                temp = subjectmarks[j]\n                subjectmarks[j] = subjectmarks[j+1]\n                subjectmarks[j+1] = temp\n    return subjectmarks\n",
        "num_ids": 91
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n",
        "num_ids": 19
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n",
        "num_ids": 23
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 89
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    elif type(data_list[0]) == type([]):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 88
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return_val = 0\n    if not isinstance(data_list, list):\n        return_val = data_list\n    else:\n        for sublist in data_list:\n            if isinstance(sublist, list):\n                return_val += recursive_list_sum(sublist)\n            else:\n                return_val += sublist\n    return return_val",
        "num_ids": 88
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n",
        "num_ids": 47
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 41
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n",
        "num_ids": 20
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for element in data_list:\n        if type(element) is list:\n            total = total + recursive_list_sum(element)\n        else:\n            total = total + element\n    return total\n",
        "num_ids": 55
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 84
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)\n",
        "num_ids": 11
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "num_ids": 45
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])\n",
        "num_ids": 17
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for item in list:\n        if item > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count = count + 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n    \nprint(pos_count([1,3,4,6,-2]))\n",
        "num_ids": 50
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n+1):\n        bell.append(0)\n        for j in range(1, i+1):\n            bell[i] = bell[i] + bell[i-j] * bell[j-1]\n    return bell[n]\n",
        "num_ids": 75
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    partition_list = []\n    for i in range(1, n+1):\n        partition_list.append(1)\n        for j in range(1, i):\n            partition_list[i] = partition_list[i] + partition_list[i-j]\n",
        "num_ids": 92
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = {}\n    for i in range(1, n+1):\n        bells[i] = bell(i)\n",
        "num_ids": 33
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    num_partitions = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            num_partitions += bell_number(i-3) * bell_number(i-2)\n        elif i % 3 == 1:\n            num_partitions += bell_number(i-3) * bell_number(i-2) * bell_number(i-1)\n        else:\n            num_partitions += bell_number(i-2) * bell_number(i-1)\n    return num_partitions\n",
        "num_ids": 134
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = {0:1,1:1,2:2}\n",
        "num_ids": 19
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n, m):\n        if m == 0:\n            return 1\n        elif n == m:\n            return 1\n        elif n < m:\n            return 0\n        else:\n            return partition(n, m-1) + partition(n-m, m)\n    print(partition(n, n))\n    return partition(n, n)\n",
        "num_ids": 90
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        return bell(n-1) + bell(n-2) + bell(n-3)\n",
        "num_ids": 54
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # We can partition a set of bell numbers as follows:\n    # if n is odd: 1 way to partition n\n    # if n is even: n ways to partition n\n    # if n is even and k is odd: n ways to partition n into k sub-sets with equal sum\n    # if n is even and k is even: n^2 ways to partition n into k sub-sets with equal sum\n",
        "num_ids": 94
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1]\n    for i in range(1, n + 1):\n        bell.append(bell[i - 1] * i)\n    if n == 0:\n        return 0\n    if n == 1:\n        return bell[n]\n    if n == 2:\n        return bell[n] * bell[n - 1]\n    for i in range(3, n + 1):\n        bell[i] = bell[i] * (i - 1) // i\n    return bell[n]\n",
        "num_ids": 122
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #start writing your code here\n    if len(A) < 2:\n        return True\n    direction = None\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            if direction is None:\n                direction = 'increasing'\n            if direction == 'increasing':\n                return False\n        elif A[i] > A[i+1]:\n            if direction is None:\n                direction = 'decreasing'\n            if direction == 'decreasing':\n                return False\n        else:\n            return True\n    return True\n",
        "num_ids": 139
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1))) \n",
        "num_ids": 62
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A)<2:\n        return True\n    else:\n        if A[0]<A[1]:\n            flag=True\n        else:\n            flag=False\n        for i in range(1,len(A)-1):\n            if flag:\n                if A[i]<A[i+1]:\n                    continue\n                else:\n                    flag=False\n                    break\n            if not flag:\n                if A[i]>A[i+1]:\n                    continue\n                else:\n                    flag=True\n                    break\n        if flag:\n            return True\n        else:\n            return False\nA = [1, 2, 3, 4, 5, 6, 7] \nprint(is_Monotonic(A))\n",
        "num_ids": 177
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n",
        "num_ids": 60
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n",
        "num_ids": 57
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # A = [1,2,3,4,5,6,7,8,9,10]\n    if sorted(A)==A:\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether th",
        "num_ids": 11
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n  \n",
        "num_ids": 63
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_increasing = True\n    is_decreasing = True\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            is_increasing = False\n        if A[i] < A[i+1]:\n            is_decreasing = False\n    return is_increasing or is_decreasing\n",
        "num_ids": 87
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    # return true if s is empty\n    if not s:\n        return True\n",
        "num_ids": 23
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i+len(s)] == s for i in range(len(l)))\n",
        "num_ids": 28
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # O(n) where n is the length of l\n    # O(n)\n    if len(l) < len(s):\n        return False\n    s1 = sorted(s)\n    i = 0\n    j = 0\n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    if j == len(s):\n        return True\n    else:\n        return False\n",
        "num_ids": 126
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(l) < len(s):\n        return False\n    if s[0] in l:\n        return is_sublist(l[l.index(s[0])+1:], s[1:])\n    else:\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    sublist_length = len(s)\n    \n    if sublist_length == 0 and len(l) == 0:\n        return True\n    \n    for i in range(len(l)):\n        if len(l[i])!= sublist_length:\n            continue\n            \n        is_sublist = True\n        for j in range(sublist_length):\n            if l[i][j]!= s[j]:\n                is_sublist = False\n                break\n                \n        if is_sublist == True:\n            return True\n            \n    return False\n",
        "num_ids": 141
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    else:\n        for i in range(len(s)):\n            if s[i] == l[0]:\n                return is_sublist(l[1:], s[i+1:])\n        return False\n",
        "num_ids": 65
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sublist = False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            sublist = True\n            break\n    return sublist\n",
        "num_ids": 50
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(l) < len(s):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        for j in range(len(s)):\n            if l[i+j]!= s[j]:\n                break\n            if j == len(s)-1:\n                return True\n    return False\n",
        "num_ids": 108
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    if l_len < s_len:\n        return False\n    for i in range(l_len-s_len+1):\n        if s == l[i:i+s_len]:\n            return True\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if l == []:\n        return False\n    if len(s) > len(l):\n        return False\n    if s == l[:len(s)]:\n        return True\n    return is_sublist(l[1:], s)\n",
        "num_ids": 72
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    temp = 0\n    for i in Input:\n        if len(i) == temp:\n            continue\n        else:\n            temp = len(i)\n            break\n    return temp\n",
        "num_ids": 46
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(set(Input))!= len(Input):\n        return False\n    else:\n        return True\n",
        "num_ids": 29
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set([len(i) for i in Input])) == 1\n    # return len(set([len(tuple(sorted(i))) for i in Input])) == 1\n    \nprint(find_equal_tuple([(1, 2), (2, 3), (4, 4), (4, 5)]))\nprint(find_equal_tuple([(1, 2), (1, 2, 3), (4, 5), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3), (1, 2), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3), (1, 2, 3), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (1, 2, 3, 4), (4, 5, 6)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (1, 2, 3, 4), (4, 5, 6, 7)]))\nprint(find_equal_tuple([(1, 2, 3, 4), (4, 5, 6, 7)]))\n",
        "num_ids": 280
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(0, len(Input)):\n        for j in range(i+1, len(Input)):\n            if (len(Input[i])!= len(Input[j])):\n                return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup) == 0:\n            raise Exception('tuple cannot be empty.')\n        elif len(tup)!= len(set(tup)):\n            return False\n    return True\n",
        "num_ids": 59
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def check_equal(Input):\n        n = len(Input)\n        temp = []\n        for i in range(n):\n            for j in range(n):\n                temp.append(Input[i][j])\n        return len(set(temp)) == 1\n    \n    n = len(Input)\n    flag = True\n    for i in range(n):\n        if(len(Input[i])!= n):\n            flag = False\n            break\n    return flag and check_equal(Input)\n",
        "num_ids": 122
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input)!= len(set(Input)):\n        print('False')\n    else:\n        print('True')\n",
        "num_ids": 33
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = True\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                Output = False\n                break\n    return Output\n",
        "num_ids": 65
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        return all(len(Input[0]) == len(Input[n]) for n in range(len(Input)))\n",
        "num_ids": 47
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 37
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n        \n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                sorted = False\n            i += 1\n            \n    return nums\n    \n    \nif __name__ == '__main__':\n    import random\n    nums = [random.randint(0,1000) for _ in range(100)]\n    print(nums)\n    print(comb_sort(nums)",
        "num_ids": 209
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n",
        "num_ids": 17
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n",
        "num_ids": 22
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n",
        "num_ids": 117
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # if the list is smaller than the length of 2, return the list\n    if len(nums) < 2:\n        return nums\n    # set the list index to be the index of the first item\n    list_index = 0\n    # set the list length to the length of the list\n    list_length = len(nums) - 1\n    # loop through the list\n    for i in range(list_length):\n        # set the first item in the list to be checked\n        item_to_compare = nums[list_index]\n        # set the counter to -1\n        counter = -1\n        # loop until the counter is less than the list length\n        while counter < list_length:\n            # set the counter to the next index\n            counter += 1\n            # set the next index to be checked\n            next_index = nums[counter]\n            # if the current index is less than the next index, swap the items\n            if item_to_compare > next_index:\n                nums[counter], nums[list_index] = nums[list_index], nums[counter]\n        # increment the list index\n        list_index += 1\n    # return the sorted list\n    return nums\n",
        "num_ids": 287
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    def gt(a, b):\n        return a > b\n    def comb(nums, low, high, key):\n        i = low - 1\n        j = high + 1\n        for j in range(high, low, -1):\n            if gt(key(nums[j], key(nums[j-1])):\n                swap(nums, j, j-1)\n                i += 1\n        return i\n    def comb_sort(nums):\n        def key(a, b):\n            return a + b\n        length = len(nums)\n        if length <= 1:\n            return\n        gap = length\n        while gap > 1:\n            gap = comb(nums, 0, length - 1, key)\n        return\n    comb_sort(nums)\n    return nums\n",
        "num_ids": 239
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n",
        "num_ids": 34
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n",
        "num_ids": 74
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    gap = len(nums)\n    while gap > 1:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n            i += 1\n    return nums\n",
        "num_ids": 128
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    for i in range(0, int(sqrt(n))+1):\n        if (i*i == n):\n            return 'YES'\n        elif (i*i > n):\n            return 'NO'\n    return 'NO'\n    \ndef dif_SumSquares(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three squares or not.\n    '''\n    n = abs(n)\n    for i in range(0, int(sqrt(n))+1):\n        for j in range(i, int(sqrt(n))+1):\n            if (i*i + j*j == n):\n                return 'YES'\n            elif (i*i + j*j > n):\n                return 'NO'\n    return 'NO'\n    \ndef sum_SubSquares(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two squares or not.\n    '''\n    n = abs(n)\n    for i in range(0, int(sqrt(n))+1):\n        for j in range(i, int(sqrt(n))+1):\n            if (i*i + j*j == n):\n                return 'YES'\n            elif (i*i + j*j < n):\n                return 'NO'\n    return 'NO'\n    \ndef sum_Squares(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of three squares or not.\n    '''\n    n = abs(n)\n    for i in range(0, int(sqrt(n))+1):\n        if (i*i == n):\n            return 'YES'\n        elif (i*i < n):\n            if (n-i*i) % 2 == 0:\n                if (n-(n-i*i)//2*2*i) % 4 == 0:\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                return 'NO'\n    return 'NO'\n",
        "num_ids": 127
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if ((x*x+y*y) == n):\n                return True\n    return False\n",
        "num_ids": 43
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    \n    for i in range(1,int(n**0.5)+1):\n        if n % i == 0:\n            j = n / i\n            if j == i**2:\n                return \"YES\"\n            else:\n                return \"NO\"\n    \n    return \"NO\"\n",
        "num_ids": 80
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    for i in range(1,n):\n        if i*i == n:\n            return 'yes'\n            break\n    return 'no'\n    \ndef dif_Sum_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the sum of two squares or not.\n    '''\n    n = int(n)\n    for i in range(1,n):\n        for j in range(i,n):\n            if i*i + j*j == n:\n                return 'yes'\n                break\n    return 'no'\n    \ndef dif_Sum_N_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the sum of three squares or not.\n    '''\n    n = int(n)\n    for i in range(1,n):\n        for j in range(i,n):\n            for k in range(j,n):\n                if i*i + j*j + k*k == n:\n                    return 'yes'\n                    break\n    return 'no'\n    \ndef isPerfect(n): \n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    n = int(n)\n    sum1 = 0\n    for i in range(1,n):\n        if n % i == 0:\n            sum1 += i\n    if sum1 == n:\n        return 'yes'\n    return 'no'\n    \ndef isPrime(n): \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    n = int(n)\n    for i in range(2,n):\n        if n % i == 0:\n            return 'no'\n            break\n    return 'yes'\n",
        "num_ids": 45
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    for i in range(n+1):\n        for j in range(n+1):\n            if (i*i + j*j == n):\n                print (\"The number is {}\".format(n))\n                print(\"{} = {} + {}\".format(n, i, j))\n                return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(0, n): \n        for j in range(i, n): \n            if(i * i + j * j == n): \n                return True\n    return False\n",
        "num_ids": 49
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    a = int(math.sqrt(n))\n    for i in range(0,a):\n        if math.sqrt(i**2 + n) == a:\n            return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(input(\"Enter any Number: \"))\n    s = 0\n    for i in range(1, n):\n        if i * i <= n:\n            s += i * i\n        else:\n            break\n    \n    l = int((n - s) / 2)\n    if l * l == n - s:\n        print(f\"{n} = {l} ^ 2 + {l} ^ 2\")\n    else:\n        print(\"No\")\n    \ndef rev_str(s):\n    '''\n    Write a Python program to reverse a string.\n    '''\n    \n    return s[::-1]\n    \ndef dif_Rotate(s): \n    '''\n    Write a Python program to rotate a string.\n    '''\n    \n    s = input(\"Enter any string: \")\n    print(f\"{s} << rotated by 2 >> {s[2:] + s[:2]}\")\n    \ndef palindrome(s):\n    '''\n    Write a Python function to check whether a string is a palindrome or not.\n    '''\n    \n    return s == rev_str(s)\n    \ndef encrypt(string, shift):\n    '''\n    Write a Python function to encrypt a string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        char = string[i]\n        if char.isupper():\n            result += chr((ord(char) + shift - 65) % 26 + 65)\n        else:\n            result += chr((ord(char) + shift - 97) % 26 + 97)\n            \n    return result\n    \ndef decrypt(string, shift):\n    '''\n    Write a Python function to decrypt a string.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        char = string[i]\n        if char.isupper():\n            result += chr((ord(char) - shift - 65) % 26 + 65)\n        else:\n            result += chr((ord(char) - shift - 97) % 26 + 97)\n            \n    return result\n",
        "num_ids": 87
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=1\n    while i**2 < n:\n        i+=1\n    for j in range(i-1,0,-1):\n        if ((j**2)-(i**2)) == n:\n            print(\"yes\",i,j)\n            return\n    print(\"No\")\n    return\n",
        "num_ids": 74
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i**2+j**2==n:\n                print(i,j)\n                break\n        else:\n            continue\n        break\n    return \n",
        "num_ids": 58
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #print(colors, patterns)\n    \n    #if (len(colors)!= len(patterns)): return False\n",
        "num_ids": 33
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    dict={}\n    for i,c in enumerate(colors):\n        dict[c]=i\n",
        "num_ids": 27
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    assert len(colors) == len(patterns)\n    for i in range(1, len(patterns)):\n        if patterns[i-1] == patterns[i]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 60
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns==[]:\n        return True\n    i = 0\n    while i<len(colors):\n        if i==len(patterns):\n            break\n        if colors[i]==patterns[i]:\n            i+=1\n        else:\n            break\n    if i==len(patterns):\n        return True\n    return False\n",
        "num_ids": 84
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if not colors or not patterns:\n        return False\n",
        "num_ids": 15
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors) == 0:\n        return False\n    else:\n        if patterns[0] == colors[0]:\n            return is_samepatterns(colors[1:], patterns[1:])\n        else:\n            return False\n",
        "num_ids": 61
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    else:\n        for i in range(len(patterns)):\n            if patterns[i] == 1 and colors[i] == 'R':\n                continue\n            elif patterns[i] == 1 and colors[i] == 'G':\n                continue\n            elif patterns[i] == 1 and colors[i] == 'B':\n                continue\n            elif patterns[i] == 2 and colors[i] == 'R':\n                continue\n            elif patterns[i] == 2 and colors[i] == 'G':\n                continue\n            elif patterns[i] == 2 and colors[i] == 'B':\n                continue\n            else:\n                return False\n        return True\n",
        "num_ids": 180
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i,p in enumerate(patterns):\n        if p == 0:\n            continue\n        if colors[i]!= p:\n            return False\n    return True\n",
        "num_ids": 44
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    assert isinstance(K, int)\n    if K==0:\n        return []\n    else:\n        ret_list = []\n        for tup in test_list:\n            if len(tup) == K:\n                count = 0\n                for element in tup:\n                    if element%K == 0:\n                        count +=1\n                if count == len(tup):\n                    ret_list.append(tup)\n        return ret_list\n",
        "num_ids": 109
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for sub_tuple in test_list:\n        if all([element % K == 0 for element in sub_tuple]):\n            tuples.append(sub_tuple)\n    return tuples\n",
        "num_ids": 56
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(elem % K == 0 for elem in x), test_list))\n",
        "num_ids": 30
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(i[0], i[1], i[2]) for i in test_list if ((i[0] % K == 0) and (i[1] % K == 0) and (i[2] % K == 0))]\n",
        "num_ids": 58
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for i in test_list:\n        if sum(1 for j in i if j%K == 0) == len(i):\n            tuples.append(i)\n    return tuples\n",
        "num_ids": 53
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) == K:\n            flag = 0\n            for j in range(K):\n                if test_list[i][j] % K!= 0:\n                    flag = 1\n                    break\n            if flag == 0:\n                res.append(test_list[i])\n    return res\n",
        "num_ids": 97
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if len(test_list) < 2:\n        raise Exception(\"Input list should have atleast two elements\")\n",
        "num_ids": 29
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = list()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (all(j % k == 0 for j in test_list[i]) and all(j % k == 0 for j in test_list[j])):\n                result.append(tuple(test_list[i]))\n                result.append(tuple(test_list[j]))\n",
        "num_ids": 110
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return filter(lambda x : all(elem % K == 0 for elem in x), test_list)\n",
        "num_ids": 28
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuples = []\n    for tup in test_list:\n        for i in range(len(tup)):\n            if tup[i] % K!= 0:\n                break\n        else:\n            tuples.append(tup)\n    return tuples\n",
        "num_ids": 67
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11==0):\n        return True\n    return False\n",
        "num_ids": 20
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n%11\n    if x==0:\n        print(n,\" is divisible by 11\")\n    else:\n        print(n,\" is not divisible by 11\")\n    return\n",
        "num_ids": 48
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 26
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n    \n    \ndef is_Diff(n): \n    '''\n    Write a python function to find whether a number i",
        "num_ids": 13
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n % 11 == 0):\n        print('Number is divisible by 11')\n    else:\n        print('Number is not divisible by 11')\n    return\n",
        "num_ids": 42
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n",
        "num_ids": 28
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef divisible_by_11(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False",
        "num_ids": 22
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0",
        "num_ids": 9
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!= 0:\n        print(\"Given word length is odd\")\n    else:\n        print(\"Given word length is even\")\n",
        "num_ids": 39
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 26
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if (len(s)%2 == 0): \n        print(\"Length of the word is even\")\n    else: \n        print(\"Length of the word is odd\")\n",
        "num_ids": 43
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        print(s + \" is a even length word\")\n    else:\n        print(s + \" is a odd length word\")\n",
        "num_ids": 44
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n        \n",
        "num_ids": 28
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n",
        "num_ids": 13
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    return n\n",
        "num_ids": 14
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # base cases \n    if n < 0: \n        return None \n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1 \n    if n == 2: \n        return 2 \n    if n == 3: \n        return 3 \n    \n    # get the sum of the tetrahedral numbers \n    tetrahedral_sum = 0 \n    for i in range(n): \n        tetrahedral_sum += tetrahedral_number(i) \n    \n    # return the sum \n    return tetrahedral_sum\n",
        "num_ids": 144
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: return 1\n    t = 0\n    for k in range(1, n + 1):\n        t += (-1) ** (k + 1) * (n - k) / k\n    return t\n",
        "num_ids": 54
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n*(n+1)*(n+2))/6\n",
        "num_ids": 20
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(nCk(4,i) for i in range(1,n+1))\n",
        "num_ids": 26
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int((n*(n+1)*(n+2))/6)\n",
        "num_ids": 22
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum(i for i in range(n+1))\n",
        "num_ids": 17
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Formula for tetrahedral numbers\n    return (n * (n + 1) * (n + 2)) // 6\n",
        "num_ids": 30
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n",
        "num_ids": 18
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) / 2\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n",
        "num_ids": 16
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3*math.pi*(r**3)\n    return vol\n    pass\n",
        "num_ids": 26
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if isinstance(r,int) or isinstance(r,float):\n        return (4/3)*math.pi*(r**3)\n    else:\n        raise ValueError('Input must be a integer or a float')\n",
        "num_ids": 56
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3.0 * math.pi * r**3\n",
        "num_ids": 20
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4*math.pi*r**3)/3\n",
        "num_ids": 17
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*r\ndef diameter_sphere(r):\n    '''\n    Write a function to find the diameter of a sphere.\n    '''\n    return r*2\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r*r\ndef is_inside_sphere(r, x, y, z):\n    '''\n    Write a function to determine if a point (x, y, z) is inside a sphere with radius r.\n    '''\n    return math.sqrt(x*x + y*y + z*z) <= r\ndef speed_of_point_after_time(v, t):\n    '''\n    Write a function to calculate the speed of a point (v, t) after a given time.\n    '''\n    return math.sqrt(v*v + 2*v*t)\ndef distance_between_points(x1, y1, z1, x2, y2, z2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    return math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2))\ndef volume_of_cube(a):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return a*a*a\ndef surface_area_cube(a):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    return 6*a*a\ndef is_inside_cube(a, x, y, z):\n    '''\n    Write a function to determine if a point (x, y, z) is inside a cube with side length a.\n    '''\n    return x >= 0 and x <= a and y >= 0 and y <= a and z >= 0 and z <= a\ndef speed_of_point_after_time_in_air(v, t):\n    '''\n    Write a function to calculate the speed of a point (v, t) after a given amount of time in air.\n    '''\n    return math.sqrt(2*9.8*t - (v*v))\ndef distance_between_points_in_air(x1, y1, z1, x2, y2, z2):\n    '''\n    Write a function to calculate the distance between two points (x1, y1, z1) and (x2, y2, z2) in air.\n    '''\n    return math.sqrt((x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2)\ndef area_of_triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to calculate the area of a triangle defined by the points (x1, y1, z1), (x2, y2, z2), and (x3, y3, z3).\n    '''\n    return (x1*y2*z3 + x2*y3*z1 + x3*y1*z2 - x1*y3*z2 - x2*y1*z3 - x3*y2*z1) / 2\ndef is_inside_triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to determine if a point (x, y, z) is inside a triangle with vertices (x1, y1, z1), (x2, y2, z2), and (x3, y3, z3).\n    '''\n    return ((y3*(x1-x2) + y1*(x2-x3) + y2*(x3-x1))*(z1-z2) + (z3*(x1-x2) + z1*(x2-x3) + z2*(x3-x1))*(y1-y2) + (z1*(y3-y2) + z2*(y1-y3) + z3*(y2-y1))*(x1-x2)) <= 0\ndef angle_between_three_points(x1, y1, z1, x2, y2, z2, x3, y3, z3):\n    '''\n    Write a function to calculate the angle between three points.\n    '''\n    return math.acos(distance_between_points(x1, y1, z1, x2, y2, z2)/(math.sqrt((x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2)))\ndef is_inside_triangle_with_sides(x1, y1, z1, x2, y2, z2, x3, y3, z3, a, b, c):\n    '''\n    Write a function to determine if a point (x, y, z) is inside a triangle with sides a, b, c.\n    '''\n    return ((x-x1)*(y2-y1) - (y-y1)*(x2-x1))*(z3-z1) - ((x-x1)*(z2-z1) - (z-z1)*(x2-x1))*(y3-y1) <= 0 and \\\n    ((x-x2)*(y1-y2) - (y-y2)*(x1-x2))*(z3-z2) - ((x-x2)*(z1-z2) - (z-z2)*(x1-x2))*(y3-y2) <= 0 and \\\n    ((x-x3)*(y2-y3) - (y-y3)*(x2-x3))*(z1-z3) - ((x-x3)*(z2-z3) - (z-z3)*(x2-x3))*(y1-y3) <= 0\ndef is_inside_triangle_with_angle(x1, y1, z1, x2, y2, z2, x3, y3, z3, a, b, c):\n    '''\n    Write a function to determine if a point (x, y, z) is inside a triangle with three points (x1, y1, z1), (x2, y2, z2), and (x3, y3, z3) and angles a, b, and c.\n    '''\n    return is_inside_triangle_with_sides(x1, y1, z1, x2, y2, z2, x3, y3, z3, math.cos(a), math.cos(b), math.cos(c)) and \\\n    is_inside_triangle_with_sides(x1, y1, z1, x2, y2, z2, x3, y3, z3, math.cos(a+math.pi/2), math.cos(b+math.pi/2), math.cos(c+math.pi/2))\ndef area_of_triangle_with_two_sides(x1, y1, z1, x2, y2, z2, x3, y3, z3, a, b):\n    '''\n    Write a function to calculate the area of a triangle with two sides a and b.\n    '''\n    return (x2*y1*z3 + x1*y3*z2 + x3*y2*z1 - x2*y3*z1 - x1*y2*z3 - x3*y1*z2) / (a*b)\ndef is_inside_triangle_with_two_sides(x1, y1, z1, x2, y2, z2, x3, y3, z3, a, b):\n    '''\n    Write a function to determine if a point (x, y, z) is inside a triangle with two sides a and b.\n    '''\n    return (x2-x1)*(y3-y1) - (y2-y1)*(x3-x1) >= 0 and (x2-x1)*(z3",
        "num_ids": 46
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=float(r)\n    return (4*math.pi*(r**3))/3\n",
        "num_ids": 27
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(input(\"Enter radius of a sphere: \"))\n    print(f\"The volume of the sphere is {round(((4/3) * (math.pi) * (r**3)),2)}\")\n",
        "num_ids": 53
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n",
        "num_ids": 19
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n",
        "num_ids": 18
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result+=ord(i)\n    result = result%26\n    return chr(result+65)\n",
        "num_ids": 40
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    sum = 0\n    for i in range(0, len(strr)):\n        sum = sum + ord(strr[i])\n        \n    sum = sum % 26\n    \n    return sum\n",
        "num_ids": 52
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\nprint(get_Char(\"hello\"))\n",
        "num_ids": 38
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr)%26\n",
        "num_ids": 12
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum % 26\n",
        "num_ids": 31
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr((sum(ord(c) for c in strr))%26)\n    \ndef main():\n    strr = input()\n    print(get_Char(strr))\n    \nif __name__ == '__main__':\n    main()",
        "num_ids": 63
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    modulo = 0\n    for i in range(0,len(strr)):\n        modulo = (modulo + ord(strr[i]))%26\n    return modulo\n",
        "num_ids": 47
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import string\n    cnt=0\n    for i in strr:\n        cnt+=ord(i)\n    cnt%=26\n    return string.printable[cnt]\n",
        "num_ids": 47
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    char = char % 26\n    return chr(char)\n",
        "num_ids": 46
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i)\n    return sum % 26\n",
        "num_ids": 31
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # First we need to find the first term\n    term = 1\n    while term < n:\n        term *= 2\n        term += 1\n        # print(term)\n    term *= 2\n    term -= 1\n    print(term)\n    # To get the rest we need to find the number of 2s in the first term\n    # This will give us the number of terms we need\n    count = 0\n    while term >= 2:\n        if term % 2 == 0:\n            count += 1\n            term //= 2\n        else:\n            break\n    if term == 1:\n        return (count+1)*2\n    else:\n        return 2**count*(count+1)\n",
        "num_ids": 164
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    for i in range(n-1):\n        a,b = b,a+b\n    return b\n",
        "num_ids": 38
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 69
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # check if the initial list is built\n    # if not, build the initial list\n    if len(newman_conway) == 0:\n        build_list(n)\n    return newman_conway[n]\n",
        "num_ids": 55
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0: \n        return 3\n    elif n == 1: \n        return 2\n    else: \n        return sequence(n-1) + sequence(n-2) \n",
        "num_ids": 49
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 2:\n        return n\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 33
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    print(\"\"\" The following is the Newman Conway Sequence\n    0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 2584159500487268027, 410744006428736019, 629145606408898135, 1134903170483928482, 17711349031704839277, 2865749800353294719, 4636379119479731785, 750251256261575219, 1213932480789303684, 1964181190998754075, 3178114572524169981, 5142290825079229049, 8320407508855596945, 13462694895300546272, 21783091969984658085, 35245769000371533223, 5738079470123836838, 92274651617149179901, 14930351852592264758, 24157819766943330519, 390881693028886382787, 632459891391923954468, 102334155493161937379, 165580171733267219281, 267914296423401369821, 433494437778080725279, 701408733357813417142, 113490317074754049779, 183631192660563380298, 297121507314498275456, 480752697613718418016, 777874204942838195136, 125862690252533904926, 203650109558613388864, 329512800993355401162, 533162911732636622434, 8626757127134172475006, 139583862490784625599, 2258514337171963353914, 36543529615477847838, 591286729879097420587, 956722026041306546246, 1548008759061197353210, 25047307819613084933, 40527395378812054025, 655747031984319514, 10610209857511873155, 171676801775651982671, 277778900352948808628, 44945570212853157739, 727234602481430483089, 117669030460988005924, 190392490709134801398, 308061521170130229248, 498454011879265105842, 806515533049393346265, 130496954492872292384, 2111485077978056089176, 341645462290670732654, 552793970088475744419, 894439432379146498477, 1447233402467625098362, 234167283484676976345, 3788906237314390793982, 613057907216115945997, 9919485309475549363731, 1605006438163670692142, 2584159500487267989773, 410744006428736848129, 6291456064088981362985, 1134903170483928480995, 17711349031704839284768, 2865749800353294728861, 4636379119479731774009, 7502512562615753374141, 1213932480789302917275, 1964181190998755023363, 3178114572524169812229, 514229082507922902751, 8320407508855597620799, 1346269489530055294553, 2178309196998466165909, 3524576900037153548246, 5738079470123836685163, 922746516171491881929, 1493035185259226479795, 24157819766943330524609, 3908816930288863817795, 63245989139192393269085, 1023341554931619380216, 16558017173326721895218, 26791429642340137600788, 4334944377780807249411, 701408733357813449086, 1134903170747540497894, 1836311926605633804831, 2971215073144982774604, 53316291173263663254363, 86267571271341724753874, 139583862490784625599320, 2258514337171963354077, 3654352961547784765298, 59128672987909742059186, 95672202604130654563717, 1548008759061197362345, 2504730781961308470625, 4052739537881205405498, 6557470319843195147057, 10610209857511873155316, 1716768017756519835136, 27777890035294880922784, 4494557021285315780105, 7272346024814304830548, 117669030460988005924480, 19039249070913480152395, 30806152117013022924791, 4984540118792651063664, 80651553304939334625908, 13049695449287229239512, 211148507797805608912833, 34164546229067073262438, 5527939700884757449427, 89443943237914649849081, 14472334024676250982652, 23416728348467697634580, 37889062373143907939772, 61305790721611594599972, 99194853094755493663411, 16050064381636706921428, 25841595004872679897778, 41074400642873684812897, 6291456064088981362994, 11349031704839284809761, 17711349031704839284786, 2865749800353294728863, 46363791194797317740192, 750251256261575337413145, 121393248078930291722275, 19641811909987550235612, 31781145725241698122223, 514229082507922902755132, 832040750885559762079085, 1346269489530055294563, 21783091969984661659025, 352457690003715354826349, 573807947012383668527, 922746516171491881929393, 14930351852592264797932, 241578197669",
        "num_ids": 2014
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert(n > 0)\n    if n < 2:\n        return 1\n    return sequence(n - 1) + sequence(n - 2)\n",
        "num_ids": 37
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n",
        "num_ids": 45
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #r = float(input(\"Enter the radius of a sphere: \"))\n    surfacearea_sphere = 4 * math.pi * math.pow(r,2)\n    return surfacearea_sphere\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #r = float(input(\"Enter the radius of a sphere: \"))\n    #h = float(input(\"Enter the height of a cylinder: \"))\n    surfacearea_cylinder = 2 * math.pi * r * (r + h)\n    return surfacearea_cylinder\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #r = float(input(\"Enter the radius of a sphere: \"))\n    volume_sphere = (4/3) * math.pi * math.pow(r,3)\n    return volume_sphere\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #r = float(input(\"Enter the radius of a sphere: \"))\n    #h = float(input(\"Enter the height of a cylinder: \"))\n    volume_cylinder = math.pi * math.pow(r,2) * h\n    return volume_cylinder\ndef main():\n    '''\n    Ask user for a choice.\n    '''\n    choice = int(input(\"1. Surface area of a sphere\\n2. Surface area of a cylinder\\n3. Volume of a sphere\\n4. Volume of a cylinder\\n\\nEnter the number for the function you want to use: \"))\n    if choice == 1:\n        print(\"Surface area of a sphere\")\n        r = float(input(\"Enter the radius of a sphere: \"))\n        print(\"Surface area of the sphere:\", surfacearea_sphere(r))\n    elif choice == 2:\n        print(\"Surface area of a cylinder\")\n        r = float(input(\"Enter the radius of a sphere: \"))\n        h = float(input(\"Enter the height of a cylinder: \"))\n        print(\"Surface area of the cylinder:\", surfacearea_cylinder(r,h))\n    elif choice == 3:\n        print(\"Volume of a sphere\")\n        r = float(input(\"Enter the radius of a sphere: \"))\n        print(\"Volume of the sphere:\", volume_sphere(r))\n    elif choice == 4:\n        print(\"Volume of a cylinder\")\n        r = float(input(\"Enter the radius of a sphere: \"))\n        h = float(input(\"Enter the height of a cylinder: \"))\n        print(\"Volume of the cylinder:\", volume_cylinder(r,h))\n    else:\n        print(\"Incorrect choice!\")\n        return\n    return\nmain()\n",
        "num_ids": 332
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4*pi*(r**2)\n    return surface_area\n",
        "num_ids": 30
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4*math.pi*r**2\n    return sa\n",
        "num_ids": 19
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    surfacearea=4*pi*(r**2)\n    print(surfacearea)\n    return surfacearea\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * (r**2)\n    return s\n",
        "num_ids": 21
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return 4 * math.pi * r ** 2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return (4 * math.pi / 3) * (r ** 3)\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return 2 * math.pi * r * (r + h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return math.pi * r ** 2 * h\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    if s == 0:\n        return \"Error\"\n    else:\n        return 6 * s ** 2\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    if s == 0:\n        return \"Error\"\n    else:\n        return s ** 3\ndef surfacearea_rectangle(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    if l == 0:\n        return \"Error\"\n    else:\n        return 2 * (l * w)\ndef volume_rectangle(l,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    if l == 0:\n        return \"Error\"\n    else:\n        return l * w\ndef surfacearea_triangle(a,b,c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    if (a == 0) or (b == 0) or (c == 0):\n        return \"Error\"\n    else:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    if (a == 0) or (b == 0) or (c == 0):\n        return \"Error\"\n    else:\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    if (a == 0) or (b == 0):\n        return \"Error\"\n    else:\n        return 2 * (a * b)\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    if (a == 0) or (b == 0):\n        return \"Error\"\n    else:\n        return a * b\ndef surfacearea_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    if (a == 0) or (b == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return ((a + b) / 2) * h\ndef volume_trapezium(a,b,h):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    if (a == 0) or (b == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return ((a + b) / 2) * h\ndef surfacearea_squarepyramid(a,h):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    if (a == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return a * h\ndef volume_squarepyramid(a,h):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    if (a == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return a ** 3 / 3\ndef surfacearea_rectangularprism(a,b,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    if (a == 0) or (b == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return 2 * ((a * b) + (a * h) + (b * h))\ndef volume_rectangularprism(a,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    if (a == 0) or (b == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return a * b * h\ndef surfacearea_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of a ellipsoid.\n    '''\n    if (a == 0) or (b == 0) or (c == 0):\n        return \"Error\"\n    else:\n        return 4 * math.pi * a * b * c\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of a ellipsoid.\n    '''\n    if (a == 0) or (b == 0) or (c == 0):\n        return \"Error\"\n    else:\n        return (4 / 3) * math.pi * a * b * c\ndef surfacearea_kuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a kuboid.\n    '''\n    if (a == 0) or (b == 0) or (c == 0):\n        return \"Error\"\n    else:\n        return 6 * (a * b + b * c + c * a)\ndef volume_kuboid(a,b,c):\n    '''\n    Write a function to find the volume of a kuboid.\n    '''\n    if (a == 0) or (b == 0) or (c == 0):\n        return \"Error\"\n    else:\n        return a * b * c\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    if (r == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return math.pi * (r ** 2 + r * h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if (r == 0) or (h == 0):\n        return \"Error\"\n    else:\n        return 1/3 * math.pi * (r ** 2 + r * h)\ndef surfacearea_sphere_sweep(r):\n    '''\n    Write a function to find the surface area of a sphere using the method of\n    sweeping.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return 4 * math.pi * r ** 2\ndef volume_sphere_sweep(r):\n    '''\n    Write a function to find the volume of a sphere using the method of\n    sweeping.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return 4 * math.pi / 3 * r ** 3\ndef surfacearea_cylinder_sweep(r,h):\n    '''\n    Write a function to find the surface area of a cylinder using the method of\n    sweeping.\n    '''\n    if r == 0:\n        return \"Error\"\n    else:\n        return 2 * math.pi * r * (r + h)\ndef volume_cylinder_sweep(r,h):\n    '''\n    Write a function to find the volume of a cylinder using the method of\n    sweeping.\n    '''\n    if r == 0:\n        return \"Error\"\n",
        "num_ids": 15
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # surface area is 4*pi*r**2\n    # pi*r**2\n    return 4 * math.pi * r ** 2\n",
        "num_ids": 35
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if (type(r) is float) and r>=0:\n        return 4 * math.pi * r**2\n    else:\n        print(\"Error! Wrong input.\")\n",
        "num_ids": 44
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if not isinstance(r, (int, float)):\n        return \"Please enter a valid radius value.\"\n    if r < 0:\n        return \"Please enter a valid radius value.\"\n    s = 4 * math.pi * (r ** 2)\n    return s\n",
        "num_ids": 65
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef area_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * l ** 2\ndef vol_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l ** 3\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef vol_rectangle(a, b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a * b\ndef area_cone(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r ** 2 + math.pi * r * h\ndef vol_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\ndef vol_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef area_prism(a, b, c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2 * a * b + 2 * b * c + 2 * c * a\ndef vol_prism(a, b, c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a * b * c\ndef area_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    return a * b / 2 + b * c / 2 + c * a / 2\ndef vol_triangle(a, b, c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return a * b * c / 3\ndef area_parallelogram(a, b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a * b\ndef vol_parallelogram(a, b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a * b\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return 1/2 * (a + b) * h\ndef vol_trapezoid(a, b, h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (1/3) * (a + b) * h\ndef area_kite(a, b, c, d):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return 2 * (a * b + b * c + c * d + d * a)\ndef vol_kite(a, b, c, d):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return 1/3 * (a * b * c * d)\ndef area_rhombus(a, b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return (a * b) / 2\ndef vol_rhombus(a, b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return (1/3) * a * b\ndef area_kite_2(a, b, c):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return math.sqrt(a ** 2 + b ** 2) + math.sqrt(b ** 2 + c ** 2) + math.sqrt(c ** 2 + a ** 2)\ndef area_rectangle_2(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef area_trapezoid_2(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (a + b) / 2 * h\ndef vol_trapezoid_2(a, b, h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return 1/2 * (a * b * h)\ndef area_kite_3(a, b, c):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return math.sqrt(a ** 2 + b ** 2) + math.sqrt(b ** 2 + c ** 2)\ndef area_rhombus_3(a, b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return math.sqrt(a ** 2 + b ** 2)\ndef area_kite_4(a, b, c):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return (a + b) / 2 * c\ndef area_rectangle_3(a, b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return a * b\ndef area_trapezoid_3(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return (a + b) / 2 * h\ndef vol_trapezoid_3(a, b, h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return 1/2 * (a * b * h)\ndef vol_sphere_2(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3\ndef area_cube_2(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6 * l ** 2\ndef vol_cube_2(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return l ** 3\ndef area_cone_2(r, h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * r ** 2 + math.pi * r * h\ndef vol_cone_2(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef area_cylinder_2(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h + 2 * math.pi * r ** 2\ndef vol_cylinder_2(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 1/3 * math.pi * r ** 2 * h\ndef area_prism_2(a, b, c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2 * a * b + 2 * b * c + 2 * c * a\ndef vol_prism_2(a, b, c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a * b * c\ndef area_trapezoid_4(a, b, h):\n    '''\n    Write a function to find the surface area of a trapezoid",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 1 - 2 * (2 * n - 1) * (sqrt(3) * 0.5)\n",
        "num_ids": 28
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # for the first n number\n    if n < 0:\n        return None\n    if n == 0:\n        return 1\n    # for the first n number\n    if n == 1:\n        return hexagonal(1)\n    else:\n        return hexagonal(n) + hexagonal(n-1) - 1\n",
        "num_ids": 77
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    for i in range(1, n):\n        a = 3*a + 2\n    return a\n",
        "num_ids": 31
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def get_next_term(term):\n        sum_of_digits = sum(map(int, term.strip('0')))\n        return sum_of_digits * 3\n",
        "num_ids": 46
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n - 1)//2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n + 1, (n + 1) // 2)\n",
        "num_ids": 22
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    ans = (n - 1) * (3 * n - 1)\n    ans = ans // 2\n    ans += 1\n    return ans\n",
        "num_ids": 35
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(3*n-1)//2\n",
        "num_ids": 16
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def num_center_slices(n,m):\n        '''\n        To generate nth centered hexagonal number\n        n -> nth hexagonal number\n        m -> number of hexagonal slices along the axis\n        '''\n        return (m*((m+1)*m//2)-1)//2 + n\n",
        "num_ids": 23
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n + 1) * (3 ** 0.5 / 2)\n",
        "num_ids": 22
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict = {**dict1, **dict2, **dict3}\n    return dict\n",
        "num_ids": 23
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict1)\n    dict3.update(dict2)\n    return dict3\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key, value in dict1.items():\n        result[key] = value\n    for key, value in dict2.items():\n        result[key] = value\n    for key, value in dict3.items():\n        result[key] = value\n    return result\n",
        "num_ids": 71
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n    #return {**dict3, **dict1, **dict2}",
        "num_ids": 34
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # dict1.update(dict2)\n    # dict1.update(dict3)\n    dict1 = dict1 | dict2 | dict3\n    return dict1\n",
        "num_ids": 42
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for k,v in dict3.items():\n        if k in dict1:\n            dict1[k] = dict1[k] + v\n        elif k in dict2:\n            dict2[k] = dict2[k] + v\n        elif k not in dict1 and k not in dict2:\n            dict3[k] = v\n    dict1.update(dict2)\n    return dict1\n",
        "num_ids": 101
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2) and dict3.update(dict2)\n",
        "num_ids": 22
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict3.update(dict2)\n    dict3.update(dict1)\n    return dict3\n",
        "num_ids": 27
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1.update(dict2)\n    dict1.update(dict3)\n    return dict1\n",
        "num_ids": 27
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict_1 = collections.Counter(list1)\n    return dict_1\n",
        "num_ids": 21
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count_dict = {}\n    for element in list1:\n        if element in freq_count_dict:\n            freq_count_dict[element] = freq_count_dict[element]+1\n        else:\n            freq_count_dict[element] = 1\n    print(freq_count_dict)\nfreq_count([1,2,3,4,4,4,4,5,5,5])\n",
        "num_ids": 108
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for elem in list1:\n        if elem in dict1:\n            dict1[elem] += 1\n        else:\n            dict1[elem] = 1\n    return dict1\n",
        "num_ids": 55
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_count = {}\n    for elem in list1:\n        if elem not in freq_count:\n            freq_count[elem] = 1\n        else:\n            freq_count[elem] += 1\n    return freq_count\n",
        "num_ids": 66
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for element in list1:\n        if element in frequency:\n            frequency[element] = frequency[element] + 1\n        else:\n            frequency[element] = 1\n    return frequency\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = collections.defaultdict(int)\n    for i in list1:\n        dictionary[i] += 1\n    return dictionary\n",
        "num_ids": 35
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "num_ids": 23
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n",
        "num_ids": 51
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    return dict1\nprint(freq_count([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 6, 6, 7]))\n",
        "num_ids": 60
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for element in list1:\n        if element not in dict1:\n            dict1[element] = 1\n        else:\n            dict1[element] += 1\n    return dict1\n",
        "num_ids": 52
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    def closeness(n):\n        count = 0\n        for i in range(1,n):\n            if (n % i == 0):\n                count += 1\n        return count\n    \n    output = closeness(N)\n    \n    while True:\n        if (closeness(output) == N):\n            return output\n        else:\n            output += 1\n            \nprint(closest_num(11))\n",
        "num_ids": 104
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # get the closest lower integer:\n    closest = N - 1\n    while closest > N/2:\n        closest = closest - 1\n    return closest\n",
        "num_ids": 42
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    N = int(input(\"Enter an integer: \"))\n    list_num = []\n    while N > 0:\n        list_num.append(N)\n        N -= 1\n    list_num.sort()\n    print(list_num)\n    print(min(list_num[0:list_num.index(N)+1]))\n    \ndef unique_list(L):\n    '''\n    Write a function that returns the unique elements of a list.\n    '''\n    L = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    print(set(L))\n    \ndef dup_list(L):\n    '''\n    Write a function that returns the duplicates of a list.\n    '''\n    L = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    L = list(set(L))\n    L.sort()\n    print(L)\n    \ndef min_num(L):\n    '''\n    Write a function that returns the minimum of a list.\n    '''\n    L = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    print(min(L))\n    \ndef min_num(L):\n    '''\n    Write a function that returns the minimum of a list.\n    '''\n    L = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    print(max(L))\n    \ndef swap_list(L):\n    '''\n    Write a function that swaps the first and last elements of a list.\n    '''\n    L = [1, 2, 3, 4, 5]\n    print(L)\n    L[0], L[-1] = L[-1], L[0]\n    print(L)\n    \ndef merge_list(L):\n    '''\n    Write a function that merges two sorted lists into a new list.\n    '''\n    L1 = [1, 2, 3, 4, 5]\n    L2 = [6, 7, 8, 9, 10]\n    print(L1 + L2)\n    \ndef palindrome_list(L):\n    '''\n    Write a function that checks whether a list is a palindrome.\n    '''\n    L = [\"r\", \"a\", \"d\", \"a\", \"r\"]\n    L.reverse()\n    print(L)\n    if L == L[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef palindrome_str(S):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    if S == S[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef unique_str(S):\n    '''\n    Write a function that returns the unique characters of a string.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    print(set(S))\n    \ndef dup_str(S):\n    '''\n    Write a function that returns the duplicates of a string.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    print(list(set(S)))\n    \ndef palindrome_str(S):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    if S == S[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef longest_str(S):\n    '''\n    Write a function that finds the longest palindromic substring of a string.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    L = []\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            if S[i:j+1] == S[i:j+1][::-1]:\n                L.append(S[i:j+1])\n    print(L)\n    print(max(L, key=len))\n    \ndef palindrome_str(S):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    if S == S[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef min_num(L):\n    '''\n    Write a function that returns the minimum of a list.\n    '''\n    L = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    print(min(L))\n    \ndef min_num(L):\n    '''\n    Write a function that returns the minimum of a list.\n    '''\n    L = [1, 2, 2, 3, 3, 3, 4, 5, 5]\n    print(max(L))\n    \ndef swap_list(L):\n    '''\n    Write a function that swaps the first and last elements of a list.\n    '''\n    L = [1, 2, 3, 4, 5]\n    print(L)\n    L[0], L[-1] = L[-1], L[0]\n    print(L)\n    \ndef merge_list(L):\n    '''\n    Write a function that merges two sorted lists into a new list.\n    '''\n    L1 = [1, 2, 3, 4, 5]\n    L2 = [6, 7, 8, 9, 10]\n    print(L1 + L2)\n    \ndef palindrome_list(L):\n    '''\n    Write a function that checks whether a list is a palindrome.\n    '''\n    L = [\"r\", \"a\", \"d\", \"a\", \"r\"]\n    L.reverse()\n    print(L)\n    if L == L[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef palindrome_str(S):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    if S == S[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef unique_str(S):\n    '''\n    Write a function that returns the unique characters of a string.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    print(set(S))\n    \ndef dup_str(S):\n    '''\n    Write a function that returns the duplicates of a string.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    print(list(set(S)))\n    \ndef palindrome_str(S):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    if S == S[::-1]:\n        print(\"It is a palindrome!\")\n    else:\n        print(\"It is not a palindrome!\")\n    \ndef longest_str(S):\n    '''\n    Write a function that finds the longest palindromic substring of a string.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    L = []\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            if S[i:j+1] == S[i:j+1][::-1]:\n                L.append(S[i:j+1])\n    print(L)\n    print(max(L, key=len))\n    \ndef palindrome_str(S):\n    '''\n    Write a function that checks whether a string is a palindrome.\n    '''\n    S = \"Was it a car or a cat I saw?\"\n    if S == S[::-1]",
        "num_ids": 27
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        print(N)\n        return\n",
        "num_ids": 18
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        N = -N\n    N = int(N)\n    x = 0\n    while True:\n        if x*10+1 <= N:\n            x = x*10+1\n        else:\n            break\n    return x\n",
        "num_ids": 64
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    i = N-1\n    while i>=0:\n        if N%i == 0:\n            return i\n        i-=1\n",
        "num_ids": 36
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return min(range(N+1), key=lambda x:abs(x-N))\n",
        "num_ids": 24
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # N = input()\n    N = int(N)\n    s = str(N)\n    if '9' in s:\n        n = 9\n    else:\n        n = N - 1\n    c = 0\n    while int(n) <= N:\n        # print(n)\n        n = int(str(n)[::-1])\n        c += 1\n    return c\n",
        "num_ids": 95
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int((N+1)/2)-1\n",
        "num_ids": 14
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    s = sorted(list(str(N)))\n    #print(s)\n    #print(int(s[0]) - 1)\n    return int(s[0]) - 1\n",
        "num_ids": 46
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for word in list1:\n        len_list.append(len(word))\n    return max(len_list)\n",
        "num_ids": 38
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_list = []\n    for i in list1:\n        len_list.append(len(i))\n    return len_list\n",
        "num_ids": 35
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [input().split() for i in range(int(input()))]\n    list1 = list(filter(lambda x: len(x)>=2, list1))\n    list1 = [x for x in list1 if x[0] not in \"aeiou\"]\n    list1 = sorted(list1, key = len)\n    print(len(list1[-1]))\n    print(list1[-1])\n",
        "num_ids": 107
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        list2.append(len(list1[i]))\n    return list2\ndef max_len_log(list2):\n    '''\n    Write a python function to find the longest word in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        if list2[i]==max(list2):\n            list1.append(list2[i])\n    return list1\ndef avg_len_log(list2):\n    '''\n    Write a python function to find the average length of the words in the list.\n    '''\n    sum=0\n    for i in range(0,len(list2)):\n        sum+=list2[i]\n    return sum/len(list2)\ndef char_count_log(list1):\n    '''\n    Write a python function to count the number of characters in each word of the list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        count=0\n        for j in range(0,len(list1[i])):\n            count+=1\n        list2.append(count)\n    return list2\ndef min_char_count_log(list2):\n    '''\n    Write a python function to find the word with the minimum number of characters in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        if list2[i]==min(list2):\n            list1.append(list1[i])\n    return list1\ndef least_char_log(list1):\n    '''\n    Write a python function to find the word with the maximum number of characters in the list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        list2.append(len(list1[i]))\n    return list2\ndef char_freq_log(list1):\n    '''\n    Write a python function to find the frequency of each character in each word of the list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        freq=[]\n        for j in range(0,len(list1[i])):\n            freq.append(list1[i].count(list1[i][j]))\n        list2.append(freq)\n    return list2\ndef freq_count_log(list1):\n    '''\n    Write a python function to count the frequency of each character in the list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        freq=[]\n        for j in range(0,len(list1[i])):\n            freq.append(list1[i].count(list1[i][j]))\n        list2.append(freq)\n    return list2\ndef char_pos_log(list1):\n    '''\n    Write a python function to find the position of each character in the list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        pos=[]\n        for j in range(0,len(list1[i])):\n            pos.append(list1[i].index(list1[i][j]))\n        list2.append(pos)\n    return list2\ndef count_pos_log(list1):\n    '''\n    Write a python function to count the position of each character in the list.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        pos=[]\n        for j in range(0,len(list1[i])):\n            pos.append(list1[i].count(list1[i][j]))\n        list2.append(pos)\n    return list2\ndef palindrome_log(list1):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        if list1[i]==list1[i][::-1]:\n            list2.append(list1[i])\n    return list2\ndef palindrome_check_log(list1):\n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        if list1[i]==list1[i][::-1]:\n            list2.append(list1[i])\n    return list2\ndef max_freq_log(list2):\n    '''\n    Write a python function to find the maximum frequency of the character in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        for j in range(0,len(list2[i])):\n            if list2[i][j]==max(list2[i]):\n                list1.append(list2[i][j])\n    return list1\ndef max_count_log(list2):\n    '''\n    Write a python function to find the maximum number of occurrences of the character in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        for j in range(0,len(list2[i])):\n            if list2[i][j]==max(list2[i]):\n                list1.append(list2[i][j])\n    return list1\ndef max_pos_log(list1):\n    '''\n    Write a python function to find the character in the list which has the maximum number of occurrences.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j]==max(list1[i]):\n                list2.append(list1[i][j])\n    return list2\ndef min_count_log(list2):\n    '''\n    Write a python function to find the minimum number of occurrences of the character in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        for j in range(0,len(list2[i])):\n            if list2[i][j]==min(list2[i]):\n                list1.append(list2[i][j])\n    return list1\ndef min_pos_log(list1):\n    '''\n    Write a python function to find the character in the list which has the minimum number of occurrences.\n    '''\n    list2=[]\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if list1[i][j]==min(list1[i]):\n                list2.append(list1[i][j])\n    return list2\ndef min_freq_log(list2):\n    '''\n    Write a python function to find the minimum frequency of the character in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        for j in range(0,len(list2[i])):\n            if list2[i][j]==min(list2[i]):\n                list1.append(list2[i][j])\n    return list1\ndef min_max_freq_log(list2):\n    '''\n    Write a python function to find the minimum and maximum frequencies of the character in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        list3=[]\n        for j in range(0,len(list2[i])):\n            list3.append(list2[i][j])\n        list1.append(list3)\n    return list1\ndef min_freq_check_log(list2):\n    '''\n    Write a python function to find the minimum and maximum frequencies of the character in the list.\n    '''\n    list1=[]\n    for i in range(0,len(list2)):\n        list3=[]\n        for j in range(0,len(lis",
        "num_ids": 40
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = list1\n    word_len = []\n    for n in words:\n        word_len.append((len(n), n))\n    word_len.sort()\n    return word_len[-1][0], word_len[-1][1]\n",
        "num_ids": 65
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    #word = \" \".join(list1)\n    word = \"\".join(list1)\n    print(\"Longest word is: {}\".format(word))\n",
        "num_ids": 42
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # word = ['a', 'b', 'c', 'd']\n    word = list1\n    max1 = 0\n    for i in word:\n        if(len(i) >= max1):\n            max1 = len(i)\n    return max1\n    \nprint(len_log(['a', 'bc', 'cd', 'd']))",
        "num_ids": 85
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l=len(list1)\n    max1=0\n    for i in range(l):\n        if len(list1[i])>max1:\n            max1=len(list1[i])\n    print(\"the length of the longest word is \",max1)\n",
        "num_ids": 67
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=len(list1[0])\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n",
        "num_ids": 51
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(sub_str in str1[i:]):\n            return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if(str1[i:i+len(sub_str)] == sub_str):\n            return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n",
        "num_ids": 40
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string.find(sub_str) == 0:\n            return True\n    return False\n",
        "num_ids": 32
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    try:\n        print(str1.find(sub_str))\n    except:\n        print(\"Not found!\")\n",
        "num_ids": 31
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n        ",
        "num_ids": 25
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return i\n    \n    return -1\n",
        "num_ids": 58
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if str1[i: i + len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "num_ids": 46
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # split string into list of words\n    words = str1.split(' ')\n    # return true if sub string is in words\n    if sub_str in words:\n        return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = list(str(n))\n    if n[0] == n[1] or n[0] == n[2]: \n        return False\n    else:\n        return True\n",
        "num_ids": 47
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n    # Write your code here\nn = int(input())\nprint(is_undulating(n))",
        "num_ids": 28
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n    \n    \ndef nth_triangle_number(n):\n    '''\n    Write a function to calculate the nth triangle number.\n    '''\n    pass\n    \n    \ndef kaprekar_routine(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n.\n    '''\n    pass\n    \n    \ndef kaprekar_numbers(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_nth_triangle_number(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_for_nth_triangle_number(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_n_digits(n):\n    '''\n    Write a function to determine the first n Kaprekar numbers for n digits.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_for_n_digits(n):\n    '''\n    Write a function to calculate the Kaprekar routine of a number n for n digits.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number(n):\n    '''\n    Write a function to calculate the nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_n_digits_with_n_terms(n, m):\n    '''\n    Write a function to determine the first n Kaprekar numbers for n digits with n terms.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_for_n_digits_with_n_terms_in_routine(n, m):\n    '''\n    Write a function to calculate the first n Kaprekar numbers for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number_with_n_terms_in_routine(n, m):\n    '''\n    Write a function to calculate the nth triangle number with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine(n, m):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number_with_n_terms_in_routine_for_n_digits(n, m):\n    '''\n    Write a function to calculate the nth triangle number with n terms in routine for n digits.\n    '''\n    pass\n    \n    \ndef get_nth_triangle_number_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine(n, m, n_terms):\n    '''\n    Write a function to calculate the nth triangle number with n terms in routine for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits(n, m):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine(n, m, n_terms):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine(n, m, n_terms):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits with n terms in routine.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number(n, m, n_terms, n_terms_triangle):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number(n, m, n_terms, n_terms_triangle):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine for nth triangle number with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the Kaprekar routine with n terms in routine for n digits with n terms in routine for nth triangle number with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_numbers_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the first n Kaprekar numbers with n terms in routine for n digits with n terms in routine for nth triangle number with n terms in routine for nth triangle number with n terms in routine for nth triangle number.\n    '''\n    pass\n    \n    \ndef get_kaprekar_routine_with_n_terms_in_routine_for_n_digits_with_n_terms_in_routine_for_n_triangle_number_with_n_terms_in_routine_for_nth_triangle_number_with_n_terms_in_routine_for_nth_triangle_number(n, m, n_terms, n_terms_triangle, n_terms_triangle, n_terms_triangle):\n    '''\n    Write a function to calculate the Kapr",
        "num_ids": 11
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1: \n        return False\n    if n == 1 or n == 2 or n == 3: \n        return False\n    if n % 2 == 0: \n        return False\n    sum = 0\n    i = 1\n    while i < n: \n        sum = sum + i\n        i = i + 2\n    if n == sum: \n        return True\n    return False\n",
        "num_ids": 96
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    l = str(n)\n    \n    for i in range(1,len(l)):\n        if (int(l[i-1]) == int(l[i])):\n            return False\n        if (int(l[i-1]) < int(l[i])):\n            return False\n    return True\n",
        "num_ids": 80
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a,b = 0,0\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            a,b = n//i,i\n            break\n    return a-b == n-a*b\n",
        "num_ids": 65
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n == 0): \n        return False\n    flag = 0\n    temp = n\n    while (n!= 0): \n        digit = n % 10\n        n = int(n / 10)\n        if ((flag == 0 and digit < (temp % 10)) or (flag == 1 and digit > (temp % 10))): \n            flag = -1\n            break\n        flag = 1\n    if (flag == -1): \n        return False\n    return True\ndef find_largest_undulating(n): \n    '''\n    Write a function to find the largest undulating number that is less than or equal to the given number.\n    '''\n    flag = 0\n    for i in range(n, 0, -1): \n        if (is_undulating(i)): \n            return i\ndef is_permutation(n1, n2): \n    '''\n    Write a function to check whether the given two numbers are permutation of each other or not.\n    '''\n    num1 = n1 \n    num2 = n2\n    while(num1!= 0): \n        num1 = num1 % 10\n        num2 = num2 % 10\n        if (num1!= num2): \n            return False\n        num1 = int(num1 / 10)\n        num2 = int(num2 / 10)\n    return True\ndef find_largest_permutation(n): \n    '''\n    Write a function to find the largest permutation that is less than or equal to the given number.\n    '''\n    num = n\n    flag = 0\n    for i in range(n, 0, -1): \n        if (is_permutation(num, i)): \n            return i\ndef find_largest_nonduplicate(n): \n    '''\n    Write a function to find the largest non-duplicate number less than or equal to the given number.\n    '''\n    num = n \n    if (num < 2): \n        return 0\n    count = [0] * 10\n    while (num!= 0): \n        digit = num % 10\n        count[digit] += 1\n        num = int(num / 10)\n    for i in range(9, -1, -1): \n        if (count[i] == 1): \n            return i\ndef find_smallest_nonduplicate(n): \n    '''\n    Write a function to find the smallest non-duplicate number less than or equal to the given number.\n    '''\n    num = n \n    if (num < 2): \n        return 0\n    count = [0] * 10\n    while (num!= 0): \n        digit = num % 10\n        count[digit] += 1\n        num = int(num / 10)\n    for i in range(9, -1, -1): \n        if (count[i] == 1): \n            return i * 10 + i\ndef is_palindrome(n): \n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    num = n \n    temp = 0\n    while (num!= 0): \n        temp = temp * 10 + num % 10\n        num = int(num / 10)\n    if (num == temp): \n        return True\n    return False\ndef find_largest_palindrome(n): \n    '''\n    Write a function to find the largest palindrome number less than or equal to the given number.\n    '''\n    num = n \n    if (num < 10): \n        return 0\n    while (num!= 0): \n        num = int(num / 10)\n    temp = num * 10 + num\n    while (temp!= 0): \n        if (is_palindrome(temp)): \n            return temp\n        temp -= 1\ndef find_largest_product(n): \n    '''\n    Write a function to find the largest product of two numbers less than or equal to the given number.\n    '''\n    for i in range(n, 1, -1): \n        for j in range(i, 1, -1): \n            if (i * j > n): \n                break\n            if (i * j == n): \n                return i * j\n            if (i * j < n): \n                continue\ndef sum_of_digits(n): \n    '''\n    Write a function to find the sum of all digits of the given number.\n    '''\n    num = n\n    result = 0\n    while (num!= 0): \n        result = result + num % 10\n        num = int(num / 10)\n    return result\ndef sum_of_digit_squares(n): \n    '''\n    Write a function to find the sum of digits of the square of the given number.\n    '''\n    num = n\n    result = 0\n    while (num!= 0): \n        digit = num % 10\n        result = result + digit * digit\n        num = int(num / 10)\n    return result\ndef is_happy(n): \n    '''\n    Write a function to check whether the given number is happy or not.\n    '''\n    num = n \n    if (num == 1): \n        return True\n    num1 = num\n    num2 = sum_of_digits(sum_of_digit_squares(num1))\n    while (num1!= 1): \n        num1 = sum_of_digits(sum_of_digit_squares(num1))\n        if (num1 == 1): \n            return True\n        elif (num1 == num2): \n            return False\n        else: \n            num2 = num1\ndef find_largest_happy(n): \n    '''\n    Write a function to find the largest happy number less than or equal to the given number.\n    '''\n    num = n \n    flag = 0\n    while (num!= 0): \n        num = int(num / 10)\n    while (num!= 0): \n        num = int(num / 10)\n        if (is_happy(num)): \n            return num\ndef count_palin_substring(s): \n    '''\n    Write a function to count the number of palindromic substrings of the given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n): \n        j = 0\n        while (i + j < n): \n            if (s[i]!= s[j]): \n                break\n            j += 1\n            count += 1\n    return count\ndef is_substring(s1, s2): \n    '''\n    Write a function to check whether the given two strings are substring of each other or not.\n    '''\n    n = len(s1)\n    for i in range(0, n): \n        if (s2.find(s1[i:]) == -1): \n            return False\n    return True\ndef count_substring_in_string(s1, s2): \n    '''\n    Write a function to find the number of substrings of the given string that are present in the other string.\n    '''\n    count = 0\n    n = len(s1)\n    for i in range(0, n): \n        j = 0\n        while (i + j < n): \n            if (is_substring(s2[j:], s1[i:])): \n                count += 1\n                break\n            j += 1\n    return count\ndef count_substring_replacement(s, k): \n    '''\n    Write a function to count the number of substrings of the given string that can be replaced with any one of the string.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n): \n        j = 0\n        while (i + j < n): \n            if (s[i:i + j] in s[i + j + 1:]): \n                count += 1\n                break\n            j += 1\n    return count\ndef count_substring(s, k): \n    '''\n    Write a function to find the number of substrings of the given string that are present in the other string.\n    '''\n    n = len(s)\n    count = 0\n    for i in range(n): \n        for j in range(i, n): \n            if (s[i:j] == ",
        "num_ids": 48
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return is_perfect_square(n) or is_perfect_square(n+1) or is_perfect_square(n+2) or is_perfect_square(n-1) or is_perfect_square(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n<=1):\n        return False\n    sum=0\n    i=0\n    while (n>0):\n        rem=n%10\n        sum=sum+rem*rem\n        n=n//10\n    if (sum%n==0):\n        return False\n    else:\n        return True\n    \ndef sum_of_digits(n):\n    '''\n    Write a function to compute the sum of digits of a given number N.\n    '''\n    if (n<0):\n        return -1\n    else:\n        sum=0\n        while(n>0):\n            rem=n%10\n            sum=sum+rem\n            n=n//10\n        return sum\n        \ndef harmonic_sum(n):\n    '''\n    Write a function to compute the harmonic sum of n.\n    Harmonic sum is defined as 1+1/2+1/3+1/4+...+1/n.\n    '''\n    sum=0\n    while (n>0):\n        sum=sum+1/n\n        n=n-1\n    return sum\n    \ndef prime_factors(n):\n    '''\n    Write a function to compute all the prime factors of a given number N.\n    '''\n    while(n%2==0):\n        print(2)\n        n=n//2\n    for i in range(3,n,2):\n        if(n%i==0):\n            print(i)\n            n=n//i\n            while(n%i==0):\n                n=n//i\n    if(n>2):\n        print(n)\n    \ndef make_change(n,d):\n    '''\n    Write a function to compute minimum number of coins needed to make change for n.\n    '''\n    count=0\n    while(n>0):\n        if(n>=d):\n            n=n-d\n            count=count+1\n        else:\n            count=count+1\n            d=d//2\n    return count\n        \ndef find_all_primes_in_range(start,end):\n    '''\n    Write a function to print all prime numbers between start and end.\n    '''\n    flag=0\n    for i in range(start,end+1):\n        flag=0\n        for j in range(2,i):\n            if(i%j==0):\n                flag=1\n                break\n        if(flag==0):\n            print(i)\n            \ndef fibonacci(n):\n    '''\n    Write a function to compute the nth Fibonacci number.\n    '''\n    n1=0\n    n2=1\n    count=2\n    if(n<0):\n        print(\"Invalid input\")\n    elif(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        while(count<n):\n            n3=n1+n2\n            n1=n2\n            n2=n3\n            count=count+1\n        return n3\n        \ndef find_strong_numbers(n,s):\n    '''\n    Write a function to compute all strong numbers upto n.\n    A number is called strong if the sum of the factorial of its digits is equal to the number itself.\n    For example,145 is a strong number since 1!+4!+5!=145\n    '''\n    count=0\n    for i in range(1,n+1):\n        sum=0\n        if(is_strong(i)):\n            print(i)\n            sum=sum+i\n            count=count+1\n    print(\"Total strong numbers upto \",n,\": \",count)\n    \ndef is_strong(n):\n    '''\n    Write a function to check whether a number is a strong number or not.\n    '''\n    sum=0\n    rem=0\n    i=0\n    while(n>0):\n        rem=n%10\n        i=i+1\n        sum=sum+fact(i)\n        n=n//10\n    if(sum==n):\n        return True\n    else:\n        return False\n    \ndef fact(n):\n    '''\n    Write a function to calculate the factorial of a number.\n    '''\n    fact=1\n    if(n<0):\n        return -1\n    elif(n==0):\n        return 1\n    else:\n        while(n>1):\n            fact=fact*n\n            n=n-1\n        return fact\n        \ndef gcd(a,b):\n    '''\n    Write a function to compute the gcd of two numbers.\n    '''\n    if(b==0):\n        return a\n    else:\n        return gcd(b,a%b)\n        \ndef lcm(a,b):\n    '''\n    Write a function to compute the lcm of two numbers.\n    '''\n    return (a*b)//gcd(a,b)\n    \ndef perfect_number(n):\n    '''\n    Write a function to compute whether a given number is a perfect number or not.\n    A positive integer is called perfect if it is equal to the sum of its proper divisors.\n    For example, 6 is a perfect number since 6=1+2+3.\n    '''\n    sum=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum=sum+i\n    if(sum==n):\n        return True\n    else:\n        return False\n        \ndef generate_abundant_numbers(n):\n    '''\n    Write a function to generate all the abundant numbers upto n.\n    A positive integer is called an abundant number if the sum of its proper divisors is greater than the number itself.\n    For example, 12 is an abundant number since the sum of its proper divisors, 1+2+3+4+6=16, is greater than 12.\n    '''\n    for i in range(12,n+1):\n        sum=0\n        for j in range(1,i):\n            if(i%j==0):\n                sum=sum+j\n        if(sum>i):\n            print(i)\n            \ndef generate_all_abundant_numbers(n):\n    '''\n    Write a function to generate all the abundant numbers upto n.\n    A positive integer is called an abundant number if the sum of its proper divisors is greater than the number itself.\n    For example, 12 is an abundant number since the sum of its proper divisors, 1+2+3+4+6=16, is greater than 12.\n    '''\n    abundant_numbers=[]\n    for i in range(1,n+1):\n        sum=0\n        for j in range(1,i):\n            if(i%j==0):\n                sum=sum+j\n        if(sum>i):\n            abundant_numbers.append(i)\n    return abundant_numbers\n        \ndef generate_prime_factors(n):\n    '''\n    Write a function to compute all the prime factors of a number n.\n    '''\n    count=0\n    for i in range(2,n):\n        if(n%i==0):\n            count=count+1\n            print(i)\n    if(count==0):\n        print(n)\n        \ndef generate_prime_factors_v2(n):\n    '''\n    Write a function to compute all the prime factors of a number n.\n    '''\n    for i in range(2,n):\n        if(n%i==0):\n            print(i)\n            while(n%i==0):\n                n=n//i\n    if(n>2):\n        print(n)\n        \ndef sum_of_digits(n):\n    '''\n    Write a function to compute the sum of digits of a number N.\n    '''\n    sum=0\n    while(n>0):\n        rem=n%10\n        sum=sum+rem\n        n=n//10\n    return sum\n    \ndef generate_all_abundant_numbers(n):\n    '''\n    Write a function to generate all the abundant numbers upto n.\n    A positive integer is called an abundant number if the sum of its proper divisors is greater than the number itself.\n    For example, 12 is an abundant number since the sum of its proper divi",
        "num_ids": 60
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return is_even(n) and is_prime(n)\n",
        "num_ids": 18
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a*power(a, b-1)\n    else:\n        return 1/power(a, -b)\n",
        "num_ids": 50
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b > 0:\n        return a*power(a,b-1)\n    else:\n        return 1/(a*power(a,b+1))\n    \ndef pascal(n):\n    '''\n    Write a function to print the pascal triangle from 1 to n.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [[1]]\n    else:\n        previous = pascal(n-1)\n        new = [1]\n        for i in range(len(previous)):\n            new.append(previous[i] + previous[i][-1])\n        new.append(1)\n        return new\n        \ndef pascal_squares(n):\n    '''\n    Write a function to print the first n rows of the pascal triangle of squares.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [[1]]\n    else:\n        previous = pascal_squares(n-1)\n        new = [1]\n        for i in range(len(previous)):\n            new.append(previous[i] + previous[i][-1])\n        new.append(1)\n        return new\n        \ndef pascal_triangle(n):\n    '''\n    Write a function to print the first n rows of the pascal triangle.\n    '''\n    if n == 0:\n        return []\n    elif n == 1:\n        return [[1]]\n    else:\n        previous = pascal_triangle(n-1)\n        new = [1]\n        for i in range(len(previous)):\n            new.append(previous[i] + previous[i][-1])\n        new.append(1)\n        return new\n    \ndef permutations(n,k):\n    '''\n    Write a function to print all the permutations of a string.\n    '''\n    if k == n:\n        print(n)\n        return\n    else:\n        for i in range(k,n+1):\n            if i in a:\n                a.remove(i)\n            else:\n                a.append(i)\n            permutations(n,k+1)\n",
        "num_ids": 73
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        if b % 2 == 0:\n            return power(a,b//2) ** 2\n        else:\n            return power(a,b//2) ** 2 * a\n",
        "num_ids": 70
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "num_ids": 8
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0:\n        return 0\n    else:\n        return a*power(a,b-1)\n",
        "num_ids": 30
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n",
        "num_ids": 8
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0]\n    for x in test_list:\n        if x[1] < min[1]:\n            min = x\n    return min\n",
        "num_ids": 42
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # simple solution:\n    # return min(test_list, key=itemgetter(1))[0]\n    \n    # using zip() and lambda\n    # return min(zip(test_list, range(len(test_list))), key=lambda x: x[1])[0]\n    \n    # using min()\n    return min(test_list, key=itemgetter(1))[0]\n    \n    # using map() and lambda\n    # return min(map(lambda x: x[0], test_list), key=itemgetter(1))\n    \n    \n    # using lambda function\n    return min(test_list, key=lambda x: x[1])[0]\n",
        "num_ids": 168
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_value = min(test_list, key=itemgetter(1))[1]\n    min_values = [i[0] for i in test_list if i[1] == min_value]\n    return min_values\n",
        "num_ids": 58
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = min(test_list, key=itemgetter(1))\n    return min_tuple[0]\n",
        "num_ids": 33
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # test_list = [(1,1), (2,3), (3,4), (4,2)]\n    # print(index_minimum(test_list))\n",
        "num_ids": 42
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n",
        "num_ids": 22
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key = itemgetter(1))\n    return minimum[0]\n",
        "num_ids": 27
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key=itemgetter(1))[0][0]\n",
        "num_ids": 24
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < smallest_length:\n            smallest_length = len(lst[i])\n    return smallest_length\n",
        "num_ids": 64
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len\n",
        "num_ids": 48
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = []\n    for i in lst:\n        length.append(len(i))\n    return min(length)\n",
        "num_ids": 32
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for ele in lst:\n        if min_length > len(ele):\n            min_length = len(ele)\n    return min_length\n",
        "num_ids": 50
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for l in lst:\n        if min_length > len(l):\n            min_length = len(l)\n",
        "num_ids": 44
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = []\n    for i in range(len(lst)):\n        if len(lst[i]) < len(min_len):\n            min_len = lst[i]\n    return len(min_len)\n    ",
        "num_ids": 60
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if min_len > len(lst[i]):\n            min_len = len(lst[i])\n    return min_len\n",
        "num_ids": 64
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini=len(lst[0])\n    for i in range(1,len(lst)):\n        if mini>len(lst[i]):\n            mini=len(lst[i])\n    return mini\n",
        "num_ids": 56
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        minimum = len(lst[0])\n        for i in range(1, len(lst)):\n            if len(lst[i]) < minimum:\n                minimum = len(lst[i])\n        return minimum\n",
        "num_ids": 75
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=[]\n    for i in lst:\n        min_len.append(len(i))\n    return min(min_len)\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    a=math.floor(math.sqrt(n))\n    count=0\n    for i in range(1,a+1):\n        if n%i==0:\n            count+=1\n    return count*2\n",
        "num_ids": 59
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if(n % i == 0):\n            count += 1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n % 2 == 0:\n        return 2\n    else:\n        count = 1\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                count += 2\n        return count\n",
        "num_ids": 65
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter=0\n    for i in range(1,n+1):\n        if n%i==0:\n            counter+=1\n    return counter\n",
        "num_ids": 38
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    a = []\n    for i in range(1,n):\n        if n%i == 0:\n            a.append(i)\n    return len(a)\n",
        "num_ids": 42
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    d = 1\n    while i <= n:\n        if n % i == 0:\n            d += 1\n        i += 1\n    return d\n    \n    \n    \ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of divisors of a given integer.\n    '''\n    i = 1\n    d = 1\n    sum = 0\n    while i <= n:\n        if n % i == 0:\n            d += 1\n        i += 1\n    sum = d + n\n    return sum\n    \n    \ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a given integer.\n    '''\n    i = 2\n    primes = []\n    while i <= n:\n        if n % i == 0:\n            primes.append(i)\n        i += 1\n    return primes\n    \n    \ndef prime_factors_sum(n):\n    '''\n    Write a python function to find the sum of prime factors of a given integer.\n    '''\n    i = 2\n    d = 1\n    sum = 0\n    while i <= n:\n        if n % i == 0:\n            d += 1\n        i += 1\n    sum = d + n\n    return sum\n    \n    \ndef print_all(list_var):\n    '''\n    Write a python function to print all elements in a list on a single line.\n    '''\n    list_var = list_var\n    i = 0\n    while i < len(list_var):\n        print(list_var[i], end=', ')\n        i += 1\n    print()\n    \n    \ndef print_all_separate(list_var):\n    '''\n    Write a python function to print all elements in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    while i < len(list_var):\n        print(list_var[i])\n        i += 1\n    \n    \ndef print_odd_even_separate(list_var):\n    '''\n    Write a python function to print all odd and even elements in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    while i < len(list_var):\n        if i % 2 == 0:\n            print(list_var[i])\n        else:\n            print(list_var[i])\n        i += 1\n    \n    \ndef print_odd_even_separate_without_separator(list_var):\n    '''\n    Write a python function to print all odd and even elements in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    while i < len(list_var):\n        if i % 2 == 0:\n            print(list_var[i])\n        i += 1\n        \n    \ndef print_sum_of_all_numbers(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on a single line.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        i += 1\n    print(sum)\n    \n    \ndef print_sum_of_all_numbers_separate(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum)\n        i += 1\n    \n    \ndef print_sum_of_all_numbers_without_separator(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on a single line.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        i += 1\n    print(sum)\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', ')\n        i += 1\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', \\n')\n        i += 1\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line_at_end(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', \\n')\n        i += 1\n    print()\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line_at_end_and_end(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', \\n')\n        i += 1\n    print()\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line_at_end_and_end_new_line(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', \\n')\n        i += 1\n    print()\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line_at_end_and_end_new_line_at_end(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', \\n')\n        i += 1\n    print()\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line_at_end_and_end_new_line_at_end_new_line(list_var):\n    '''\n    Write a python function to print the sum of all numbers in a list on separate lines.\n    '''\n    list_var = list_var\n    i = 0\n    sum = 0\n    while i < len(list_var):\n        sum = sum + list_var[i]\n        print(sum, end=', \\n')\n        i += 1\n    print()\n    \n    \ndef print_sum_of_all_numbers_without_separator_by_separator_new_line_at_end_and_end_new_line_at_end_new_line_at_end(list_var):\n    '''\n    Write a python function to print the sum o",
        "num_ids": 12
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] = dict1[i]+1\n        else:\n            dict1[i] = 1\n    return dict1\n",
        "num_ids": 56
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    return dict([(list1.count(x), x) for x in set(list1)])\n",
        "num_ids": 26
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = {}\n    for elem in list1:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    return counts\n",
        "num_ids": 53
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    \n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n",
        "num_ids": 64
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n",
        "num_ids": 36
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    import collections\n    new_dict = dict(collections.Counter(list1))\n    return new_dict\n",
        "num_ids": 28
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    counts = dict()\n    for item in list1:\n        if item not in counts:\n            counts[item] = 1\n        else:\n            counts[item] += 1\n    return counts\n",
        "num_ids": 51
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list_dict = {}\n    for each_list in list1:\n        for elem in each_list:\n            if elem in list_dict:\n                list_dict[elem] += 1\n            else:\n                list_dict[elem] = 1\n    print(list_dict)\n",
        "num_ids": 73
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = list1.count(i)\n    return freq\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    product = 1\n    for num in numbers:\n        product *= num\n    \n    return product / len(numbers)\n",
        "num_ids": 34
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    num = 1\n    for i in numbers:\n        num *= i\n    return int(num/len(numbers))\n",
        "num_ids": 32
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # This solution uses a for loop and a traditional function to multiply and divide.\n    # The purpose is to reduce the code and to be more consistent with other solutions.\n    # The complexity of this solution is O(n) and the space complexity is O(1).\n    length = len(numbers)\n    total = 1\n    for number in numbers:\n        total *= number\n    return total / length\n",
        "num_ids": 94
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for n in numbers:\n        product *= n\n    return product / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_numbers = 1\n    for number in numbers:\n        multiplied_numbers = multiplied_numbers*number\n    return multiplied_numbers/len(numbers)\n",
        "num_ids": 45
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = list(numbers)\n    total = 1\n    for num in numbers:\n        total *= num\n    print(total//len(numbers))\n",
        "num_ids": 41
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for i in numbers:\n        total *= i\n    return total / len(numbers)\n",
        "num_ids": 30
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return total_product/len(numbers)\n",
        "num_ids": 36
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=0:\n        return \"0\"\n    else:\n        res=\"\"\n        while n>0:\n            res=str(n%2)+res\n            n=n//2\n        return res\n",
        "num_ids": 53
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    assert(n>=0 and n<=255)\n    if n == 0: return \"0\"\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n",
        "num_ids": 51
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n > 1: \n        decimal_to_binary(n//2) \n    print(n%2, end = '') \n",
        "num_ids": 37
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #Decimal to binary conversion\n    if n < 0:\n        return '-' + decimal_to_binary(-n)\n    if n == 0:\n        return ''\n    return decimal_to_binary(n // 2) + str(n % 2)\n",
        "num_ids": 62
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize result \n    binary = \"\" \n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).lstrip('0b')\n",
        "num_ids": 15
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n",
        "num_ids": 11
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    return decimal_to_binary(int(n/2)) + str(n%2)\n",
        "num_ids": 50
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base cases\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    \n    # loop to convert decimal to binary\n    result = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        result += str(remainder)\n        \n    # reverse the result string to be in the correct order\n    return result[::-1]\n",
        "num_ids": 106
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Converting decimal to binary\n    binary = bin(n)\n    binary = binary[2:]\n    return binary\n    \ndef decimal_to_hex(n):\n    '''\n    Write a function to convert the given decimal number to its hex equivalent, represented as a string with no leading zeros.\n    '''\n    # Converting decimal to hex\n    hex = hex(n)\n    hex = hex[2:]\n    return hex\n    \ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    # Converting decimal to octal\n    octal = oct(n)\n    octal = octal[2:]\n    return octal\n",
        "num_ids": 35
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def to_string(num):\n        s = str(num)\n        return s\n",
        "num_ids": 23
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    temp = num\n    num = str(num)\n    num = list(num)\n    num.reverse()\n    num = \"\".join(num)\n    num = int(num)\n    temp = str(temp)\n    temp = list(temp)\n    temp.reverse()\n    temp = \"\".join(temp)\n    temp = int(temp)\n    if temp > num:\n        temp -= 1\n    else:\n        temp += 1\n    temp = str(temp)\n    temp = list(temp)\n    temp.reverse()\n    temp = \"\".join(temp)\n    temp = int(temp)\n    return temp\n",
        "num_ids": 152
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    \n    num_str = str(num)\n    for i in range(len(num_str)):\n        if (len(num_str)%2 == 0):\n            # even number of digits\n            # check if the middle digit is the biggest/smallest digit\n            if (num_str[i]!= num_str[(i+len(num_str)//2)%len(num_str)]):\n                # if not, then the middle digit should be the next smallest/largest digit\n                if (num_str[i] > num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:(i+len(num_str)//2)+1] + num_str[i] + num_str[:(i+len(num_str)//2)+1][::-1])\n                elif (num_str[i] < num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:i+1] + num_str[i] + num_str[:i+1][::-1])\n            else:\n                # if the middle digit is the biggest/smallest digit, then the next smallest/largest digit is the digit before or after it\n                if (num_str[i] == num_str[(i+len(num_str)//2)%len(num_str)]):\n                    if (i == 0):\n                        return int(num_str + num_str[i+1:])\n                    elif (i == len(num_str)-1):\n                        return int(num_str[:(i-1)] + num_str[i])\n                    else:\n                        if (num_str[i+1] > num_str[i-1]):\n                            return int(num_str[:i] + num_str[i+1] + num_str[i:])\n                        elif (num_str[i+1] < num_str[i-1]):\n                            return int(num_str[:i] + num_str[i] + num_str[i+1:])\n                else:\n                    if (num_str[i] > num_str[(i+len(num_str)//2)%len(num_str)]):\n                        return int(num_str[:(i+len(num_str)//2)] + num_str[i+1] + num_str[:(i+len(num_str)//2)][::-1])\n                    elif (num_str[i] < num_str[(i+len(num_str)//2)%len(num_str)]):\n                        return int(num_str[:i+1] + num_str[i] + num_str[:i+1][::-1])\n        else:\n            # odd number of digits\n            # if middle digit is not the biggest/smallest digit, then the middle digit should be the next smallest/largest digit\n            if (num_str[i]!= num_str[(i+len(num_str)//2)%len(num_str)]):\n                if (num_str[i] > num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:(i+len(num_str)//2)+1] + num_str[i] + num_str[:(i+len(num_str)//2)+1][::-1])\n                elif (num_str[i] < num_str[(i+len(num_str)//2)%len(num_str)]):\n                    return int(num_str[:i+1] + num_str[i] + num_str[:i+1][::-1])\n            else:\n                if (num_str[i] == num_str[(i+len(num_str)//2)%len(num_str)]):\n                    if (i == 0):\n                        return int(num_str + num_str[i+1:])\n                    elif (i == len(num_str)-1):\n                        return int(num_str[:(i-1)] + num_str[i])\n                    else:\n                        if (num_str[i+1] > num_str[i-1]):\n                            return int(num_str[:i] + num_str[i+1] + num_str[i:])\n                        elif (num_str[i+1] < num_str[i-1]):\n                            return int(num_str[:i] + num_str[i] + num_str[i+1:])\n",
        "num_ids": 1118
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # start at 1, because 1 is a palindrome\n    for i in range(1,num):\n        if palindrome_check(i):\n            return i\n    raise Exception(\"No smaller palindrome found\")\n",
        "num_ids": 54
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    length = len(num)\n    num = int(num)\n    if num < 0:\n        print(\"number is negative\")\n        sys.exit()\n    elif num == 0:\n        return 1\n",
        "num_ids": 59
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    if len(num_string)%2 == 0:\n        return int(num_string[:(len(num_string)/2)]+num_string[:(len(num_string)/2)-1:-1]+num_string[len(num_string)/2:])\n    else:\n        return int(num_string[:(len(num_string)+1)/2] + num_string[:(len(num_string)+1)/2-1:-1] + num_string[len(num_string)+1/2:])\n",
        "num_ids": 135
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_list = list(str(num))\n    for i in range(len(num_list)):\n        if num_list[i]!= '9':\n            num_list[i] = str(int(num_list[i]) + 1)\n            break\n        else:\n            num_list[i] = '0'\n    num_list.reverse()\n    return int(''.join(num_list))\n",
        "num_ids": 103
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return int(str(num) + str(num)[::-1])\n",
        "num_ids": 27
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert number into a string\n    string = str(num)\n    # Find length of the string\n    length = len(string)\n    # If the length is odd, just append the last character to the string twice\n    if length % 2 == 1:\n        # Add the last character to the string twice\n        string += string[-1]\n        # Append the first character of the reversed string to the end of the string\n        string += string[-1][::-1]\n    # Otherwise, append the last character to the string\n    else:\n        string += string[-1]\n        # Reverse the reversed string\n        string += string[-1][::-1]\n    # Return the next smallest palindrome of the number\n    return int(string)\n",
        "num_ids": 177
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not isinstance(num, int):\n        return None\n    else:\n        pass\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num\n        else:\n            pass\n",
        "num_ids": 56
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 17
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        pivot_index = start\n        pivot = arr[pivot_index]\n        \n        while start < end:\n            if arr[start] <= pivot:\n                start += 1\n            elif arr[end] > pivot:\n                end -= 1\n            else:\n                arr[start], arr[end] = arr[end], arr[start]\n        \n        if start == k - 1:\n            return arr[start]\n        elif start < k - 1:\n            start += 1\n        else:\n            end -= 1\n",
        "num_ids": 151
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if k < 1:\n        return None\n    elif k == 1:\n        return min(arr)\n    elif k == len(arr):\n        return max(arr)\n    \n    return kth_element(arr[:len(arr)//2], k)\n",
        "num_ids": 69
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # This function returns the kth element in the array.\n    def get_element(arr, k):\n        # If the array is of size 1, return the first element.\n        if len(arr) == 1:\n            return arr[0]\n        # If the array is of size 2, return the smaller element.\n        if len(arr) == 2:\n            if k == 1:\n                return arr[0]\n            else:\n                return arr[1]\n        # If the array is of size k, return the kth element.\n        if len(arr) == k:\n            return arr[k-1]\n        # If the array is of size k-1, return the first element.\n        if len(arr) == k-1:\n            return arr[0]\n        # Find the middle element of the array.\n        middle = len(arr) // 2\n        # If the kth element is greater than or equal to the middle element, recurse to the right of the middle element.\n        if k >= middle+1:\n            return get_element(arr[middle+1:], k-middle-1)\n        # If the kth element is less than the middle element, recurse to the left of the middle element.\n        if k < middle+1:\n            return get_element(arr[:middle], k)\n    return get_element(arr, k)\n",
        "num_ids": 321
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return sorted(arr)[k-1]\n",
        "num_ids": 13
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 1 or k > n:\n        raise Exception('k should be between 1 and n')\n",
        "num_ids": 34
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    left = 0\n    right = len(arr)-1\n    while True:\n        pivot = partition(arr, left, right)\n        if pivot == k-1:\n            return arr[pivot]\n        elif pivot > k-1:\n            right = pivot - 1\n        else:\n            left = pivot + 1\n",
        "num_ids": 79
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #Sort the array first\n    arr.sort()\n    return arr[k-1]\n",
        "num_ids": 24
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, start, end):\n        pivot = arr[end]\n        p_idx = start\n        for i in range(start, end):\n            if arr[i] < pivot:\n                arr[i], arr[p_idx] = arr[p_idx], arr[i]\n                p_idx += 1\n        arr[p_idx], arr[end] = arr[end], arr[p_idx]\n        return p_idx\n",
        "num_ids": 116
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) > 0:\n        word = list(word)\n        camel = word[0].upper()\n        if word[0].isnumeric():\n            return word[0]\n        for i in word[1:]:\n            if i.isnumeric():\n                camel += i\n            else:\n                camel += i.upper()\n        return camel\n",
        "num_ids": 91
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word_split = word.split(\"_\")\n    for idx, word_split_item in enumerate(word_split):\n        word_split[idx] = word_split_item.capitalize()\n    return ''.join(word_split)\n",
        "num_ids": 63
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join([word.title() for word in word.split('_')])\n",
        "num_ids": 23
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    list_of_word = word.split('_')\n    if len(list_of_word) == 1:\n        return list_of_word[0]\n    else:\n        return list_of_word[0] + ''.join(i.title() for i in list_of_word[1:])\n",
        "num_ids": 77
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(word.title().split(\"_\"))\n",
        "num_ids": 17
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    l = list(word)\n    l[0] = l[0].upper()\n    for i in range(1, len(l)):\n        if l[i] == \"_\":\n            l[i] = l[i].upper()\n    return \"\".join(l)\n",
        "num_ids": 69
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    new = ''\n    for index, char in enumerate(word):\n        if char.isupper() == True:\n            new += word[index:].lower()[0].upper() + word[index:].lower()[1:]\n        else:\n            new += word[index:].lower()\n    return new\n",
        "num_ids": 76
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not isinstance(word, str) or not word:\n        return word\n",
        "num_ids": 21
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([w.capitalize() for w in word.split('_')])\n",
        "num_ids": 24
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))",
        "num_ids": 23
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**m\n",
        "num_ids": 8
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Eulerian number = a(n, m) = 1 + a(n - 1, m) + a(n - 1, m + 1) + a(n - 1, m + 2) + a(n - 1, m + 3) + a(n - 1, m + 4) +...\n    #\n    # How to calculate a(n, m)?  \n    # 1. if n >= m: a(n, m) = 0 \n    # 2. if m < n < (m + 1) * (m + 2) / 2: a(n, m) = 1 + a(n - 1, m) + a(n - 1, m + 1) + a(n - 1, m + 2) + a(n - 1, m + 3) + a(n - 1, m + 4) +...\n    # 3. if n < m < (m + 1) * (m + 2) / 2: a(n, m) = 1 + a(n - 1, m) + a(n - 1, m + 1) + a(n - 1, m + 2) + a(n - 1, m + 3) + a(n - 1, m + 4) +... + a(n - 1, m - 2) + a(n - 1, m - 1) + a(n - 1, m - 3) + a(n - 1, m - 4) +...\n    # 4. if n < m < (m + 1) * (m + 2) / 2: a(n, m) = 1 + a(n - 1, m) + a(n - 1, m + 1) + a(n - 1, m + 2) + a(n - 1, m + 3) + a(n - 1, m + 4) +... + a(n - 1, m - 2) + a(n - 1, m - 1) + a(n - 1, m - 3) + a(n - 1, m - 4) +... + a(n - 1, m - (m + 1)) + a(n - 1, m - (m + 2)) + a(n - 1, m - (m + 3)) +... + a(n - 1, m - (m + n))\n    #\n    #     But this only gives us the value of a(n, m) when m < n.\n    #    So we need to do this to get a(n, m) when m >= n.\n    #    \n    #    1. if m < n: a(n, m) = a(m, n)\n    # 2. if m >= n: a(n, m) = a(m, n) + a(m + 1, n) + a(m + 2, n) + a(m + 3, n) + a(m + 4, n) +... + a(m + m + 1, n) + a(m + m + 2, n) + a(m + m + 3, n) +... + a(m + m + m, n)\n    #\n    #    So we only need to calculate a(m, n) for m >= n.\n    #    So we can use the recursive formula above, and the base case is a(m, m) = 1 for m = 1.\n",
        "num_ids": 758
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0 and n >= 1:\n        if m % 2 == 0 and m >= 1:\n            return (m / 2) * ((n / 2) + (n - 1)) + (m / 2)\n        elif m % 2 == 1 and m >= 1:\n            return m / 2 * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n    elif n % 2 == 1 and n >= 1:\n        if m % 2 == 0 and m >= 1:\n            return m / 2 * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n        elif m % 2 == 1 and m >= 1:\n            return ((m + 1) / 2) * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n    elif n % 2 == 1 and n < 1:\n        if m % 2 == 1 and m < 1:\n            return ((m + 1) / 2) * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n        elif m % 2 == 0 and m < 1:\n            return m / 2 * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n    elif n % 2 == 0 and n < 1:\n        if m % 2 == 1 and m < 1:\n            return ((m + 1) / 2) * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n        elif m % 2 == 0 and m < 1:\n            return m / 2 * ((n / 2) + (n - 1)) + ((m + 1) / 2)\n",
        "num_ids": 395
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return sum([(-1)**(i+1) * (i+1) * n**i for i in range(m)])\n",
        "num_ids": 34
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i*j % (n+m) == 0:\n                a += 1\n    return a\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    elif n == 1 or m == 1:\n        return 0\n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n",
        "num_ids": 57
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % 2 == 0:\n        return (m + 1)**n - m\n    else:\n        return (m + 1)**n - m - 1\n",
        "num_ids": 41
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # If a(n, m) is odd then a(n, m) = 1 + a(n-1, m) + a(n-1, m-1)\n    # If a(n, m) is even then a(n, m) = a(n-1, m) + a(n-1, m-1)\n    # If a(n, m) is odd and a(n, m) is also even then a(n, m) = 1 + a(n-1, m) + a(n-1, m-1)\n    # If a(n, m) is even and a(n, m) is odd then a(n, m) = a(n-1, m) + a(n-1, m-1)\n    # If a(n, m) is even and a(n, m) is also even then a(n, m) = 1 + a(n-1, m) + a(n-1, m-1)\n    # If a(n, m) is even and a(n, m) is odd then a(n, m) = a(n-1, m) + a(n-1, m-1)\n    # If a(n, m) is odd and a(n, m) is also odd then a(n, m) = 1 + a(n-1, m) + a(n-1, m-1)\n    if m == 0:\n        return 1\n    if n == 0:\n        return 0\n    if m == 1:\n        return n\n    if m == 2:\n        return 2*n\n    return eulerian_num(n, m-1) + eulerian_num(n, m-2)\n",
        "num_ids": 405
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < m:\n        n, m = m, n\n    if n % 2 == 0:\n        return (a(n//2, m) % m) * a(n//2, m) % m\n    else:\n        return a(n//2, m) * a(n//2+1, m) % m\n",
        "num_ids": 81
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n + m - 2\n",
        "num_ids": 10
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_sublist in input_list:\n        each_sublist.sort()\n",
        "num_ids": 23
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted([sorted(sublist) for sublist in input_list])\n",
        "num_ids": 21
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n    return input_list\n    ",
        "num_ids": 24
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        \n    return input_list\n",
        "num_ids": 34
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [sorted(x) for x in input_list]\n",
        "num_ids": 18
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n",
        "num_ids": 9
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n",
        "num_ids": 25
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Start with an empty list\n    sorted_list = []\n    # For each sublist in the input list of lists,\n    for i in input_list:\n        # Sort the sublist,\n        sorted_sublist = sorted(i)\n        # Append the sorted sublist to the sorted list.\n        sorted_list.append(sorted_sublist)\n    # Return the sorted list.\n    return sorted_list\n    \ndef sort_lists(input_list):\n    '''\n    Write a function to sort a list of lists of strings.\n    '''\n    # Start with an empty list.\n    sorted_list = []\n    # For each list in the input list of lists,\n    for i in input_list:\n        # Sort the list,\n        sorted_sublist = sorted(i)\n        # Append the sorted list to the sorted list.\n        sorted_list.append(sorted_sublist)\n    # Return the sorted list.\n    return sorted_list\n",
        "num_ids": 102
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i==True])\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return(lst.count(True))\n",
        "num_ids": 13
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i==True])\n",
        "num_ids": 18
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print(sum([1 for i in lst if i == True]))\n",
        "num_ids": 20
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    counter = 0\n    for item in lst:\n        if item:\n            counter += 1\n    return counter\n",
        "num_ids": 29
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n",
        "num_ids": 12
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    return len([boolean for boolean in lst if boolean is True])\n",
        "num_ids": 21
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if ele:\n            count+=1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return [test_list + test_tup[0], test_list + test_tup[1], test_list + test_tup[2]]\n",
        "num_ids": 39
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(f'Given list: {test_list}\\nGiven tuples: {test_tup}')\n    if isinstance(test_list, list) and isinstance(test_tup, tuple):\n        for i in test_list:\n            test_tup = test_tup + (i,)\n        return test_tup\n    else:\n        return 'Input not valid'\n",
        "num_ids": 94
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    return test_list\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = test_tup + test_list\n    return test_tup\n",
        "num_ids": 38
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n",
        "num_ids": 22
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return(test_list)\n",
        "num_ids": 23
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n",
        "num_ids": 29
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result=[]\n    result+=num1\n    result+=num2\n    result+=num3\n    result=sorted(result)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = len(num1)\n    l2 = len(num2)\n    l3 = len(num3)\n    i = 0\n    j = 0\n    k = 0\n",
        "num_ids": 47
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    nums = [num1,num2,num3]\n    for num in nums:\n        for n in num:\n            new_list.append(n)\n    return new_list\n",
        "num_ids": 55
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    lst1 = sorted(num1)\n    lst2 = sorted(num2)\n    lst3 = sorted(num3)\n    new_lst = list()\n    \n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(lst1) and j < len(lst2) and k < len(lst3):\n        \n        if lst1[i] < lst2[j] and lst1[i] < lst3[k]:\n            new_lst.append(lst1[i])\n            i += 1\n        elif lst2[j] < lst1[i] and lst2[j] < lst3[k]:\n            new_lst.append(lst2[j])\n            j += 1\n        elif lst3[k] < lst1[i] and lst3[k] < lst2[j]:\n            new_lst.append(lst3[k])\n            k += 1\n    return new_lst\n",
        "num_ids": 253
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list_number = []\n    i = j = k = 0\n    while (i < len(num1) and j < len(num2) and k < len(num3)):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            list_number.append(num1[i])\n            i+=1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            list_number.append(num2[j])\n            j+=1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            list_number.append(num3[k])\n            k+=1\n    if i == len(num1) and j < len(num2):\n        list_number = list_number + num2[j:]\n    elif i < len(num1) and j == len(num2):\n        list_number = list_number + num1[i:]\n    elif i < len(num1) and j < len(num2):\n        list_number = list_number + num1[i:] + num2[j:]\n    while(i < len(num1)):\n        list_number.append(num1[i])\n        i+=1\n    while(j < len(num2)):\n        list_number.append(num2[j])\n        j+=1\n    while(k < len(num3)):\n        list_number.append(num3[k])\n        k+=1\n    return list_number\n",
        "num_ids": 383
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    list1=[]\n    list2=[]\n    list3=[]\n    while len(num1) and len(num2) and len(num3):\n        if num1[0]<num2[0] and num1[0]<num3[0]:\n            list1.append(heapq.heappop(num1))\n        elif num2[0]<num3[0]:\n            list2.append(heapq.heappop(num2))\n        else:\n            list3.append(heapq.heappop(num3))\n    return list1+list2+list3\n",
        "num_ids": 189
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    heap = []\n    heapq.heappush(heap,(num1,0))\n    heapq.heappush(heap,(num2,1))\n    heapq.heappush(heap,(num3,2))\n    while(len(heap)!= 0):\n        max_num,i = heapq.heappop(heap)\n        sorted_list.append(max_num)\n        if(i == 0):\n            if(len(num1)!= 0):\n                heapq.heappush(heap,(num1[0],0))\n            num1 = num1[1:]\n        if(i == 1):\n            if(len(num2)!= 0):\n                heapq.heappush(heap,(num2[0],1))\n            num2 = num2[1:]\n        if(i == 2):\n            if(len(num3)!= 0):\n                heapq.heappush(heap,(num3[0],2))\n            num3 = num3[1:]\n    return sorted_list\n",
        "num_ids": 275
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list that will hold the merged list of num1, num2, num3\n    merged_list = []\n    # create pointers to iterate through each list\n    p1 = 0\n    p2 = 0\n    p3 = 0\n    # iterate through the lists, while all three pointers are less than the length of their list\n    while p1 < len(num1) and p2 < len(num2) and p3 < len(num3):\n        # if the first item in num1 is less than the first item in num2\n        # it is added to merged_list and both pointers are incremented\n        if num1[p1] < num2[p2]:\n            merged_list.append(num1[p1])\n            p1 += 1\n        # if the first item in num1 is greater than the first item in num2\n        # it is added to merged_list and both pointers are incremented\n        elif num1[p1] > num2[p2]:\n            merged_list.append(num2[p2])\n            p2 += 1\n        # if the first item in num1 is equal to the first item in num2\n        # it is added to merged_list and both pointers are incremented\n        elif num1[p1] == num2[p2]:\n            merged_list.append(num1[p1])\n            p1 += 1\n            merged_list.append(num2[p2])\n            p2 += 1\n        # if the first item in num1 is greater than the first item in num3\n        # it is added to merged_list and both pointers are incremented\n        elif num1[p1] > num3[p3]:\n            merged_list.append(num2[p2])\n            p2 += 1\n        # if the first item in num1 is less than the first item in num3\n        # it is added to merged_list and both pointers are incremented\n        elif num1[p1] < num3[p3]:\n            merged_list.append(num1[p1])\n            p1 += 1\n        # if the first item in num1 is equal to the first item in num3\n        # it is added to merged_list and both pointers are incremented\n        elif num1[p1] == num3[p3]:\n            merged_list.append(num1[p1])\n            p1 += 1\n            merged_list.append(num3[p3])\n            p3 += 1\n        # if none of the if statements are true, it means that num1[p1] is equal to num3[p3]\n        # which means that num1[p1] is the least of the three, so it is added to merged_list\n        # and both pointers are incremented\n        else:\n            merged_list.append(num1[p1])\n            p1 += 1\n            merged_list.append(num3[p3])\n            p3 += 1\n    # once the while loop is over, if num1 has items left\n    # they are added to merged_list\n    if p1 < len(num1):\n        merged_list = merged_list + num1[p1:]\n    # if num2 has items left\n    # they are added to merged_list\n    if p2 < len(num2):\n        merged_list = merged_list + num2[p2:]\n    # if num3 has items left\n    # they are added to merged_list\n    if p3 < len(num3):\n        merged_list = merged_list + num3[p3:]\n    # returns the merged list\n    return merged_list\n",
        "num_ids": 862
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    i = 0\n    j = 0\n    k = 0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j] and num1[i]<num3[k]:\n            res.append(num1[i])\n            i +=1\n        elif num2[j]<num1[i] and num2[j]<num3[k]:\n            res.append(num2[j])\n            j +=1\n        else:\n            res.append(num3[k])\n            k +=1\n    return res\ndef merge_sorted_list_old(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    while len(num1)>0 or len(num2)>0 or len(num3)>0:\n        if len(num1)>0 and len(num2)>0:\n            if num1[0]<num2[0]:\n                res.append(num1[0])\n                num1.pop(0)\n            else:\n                res.append(num2[0])\n                num2.pop(0)\n        elif len(num1)>0:\n            res.append(num1[0])\n            num1.pop(0)\n        elif len(num2)>0:\n            res.append(num2[0])\n            num2.pop(0)\n        else:\n            res.append(num3[0])\n            num3.pop(0)\n    return res\ndef merge_sorted_list_old_recursive(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    def merge(a1,a2,a3):\n        if len(a1)==0 or len(a2)==0 or len(a3)==0:\n            return\n        if len(a1)>0 and len(a2)>0:\n            if a1[0]<a2[0]:\n                merge(a1[1:],a2,a3)\n            else:\n                res.append(a1[0])\n                merge(a1[1:],a2,a3)\n        elif len(a1)>0:\n            res.append(a1[0])\n            merge(a1[1:],a2,a3)\n        elif len(a2)>0:\n            res.append(a2[0])\n            merge(a1,a2[1:],a3)\n        else:\n            res.append(a3[0])\n            merge(a1,a2,a3[1:])\n    merge(num1,num2,num3)\n    return res\ndef merge_sorted_list_old_recursive_v2(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res = []\n    def merge(a1,a2,a3):\n        if len(a1)==0 or len(a2)==0 or len(a3)==0:\n            return\n        if len(a1)>0 and len(a2)>0:\n            if a1[0]<a2[0]:\n                merge(a1[1:],a2,a3)\n            else:\n                res.append(a1[0])\n                merge(a1[1:],a2,a3)\n        elif len(a1)>0:\n            res.append(a1[0])\n            merge(a1[1:],a2,a3)\n        elif len(a2)>0:\n            res.append(a2[0])\n            merge(a1,a2[1:],a3)\n        else:\n            res.append(a3[0])\n            merge(a1,a2,a3[1:])\n    merge(num1,num2,num3)\n    return res\ndef get_n_largest_v1(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        res.append(num[0])\n        num.pop(0)\n    return res\ndef get_n_largest_v2(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        num_pop = heapq.heappop(num)\n        res.append(num_pop)\n    return res\ndef get_n_largest_v3(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        res.append(heapq.heappop(num))\n    return res\ndef get_n_largest_v4(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        heapq.heappushpop(num,num[0])\n        res.append(num[0])\n    return res\ndef get_n_largest_v5(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        num.sort(reverse=True)\n    return num\ndef get_n_largest_v6(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    num.sort()\n    for i in range(n):\n        res.append(num[0])\n        num.pop(0)\n    return res\ndef get_n_largest_v7(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        res.insert(0,num.pop(0))\n    return res\ndef get_n_largest_v8(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    num.sort()\n    for i in range(n):\n        res.append(num[0])\n        num.pop(0)\n    return res\ndef get_n_largest_v9(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    num.sort()\n    for i in range(n):\n        num.pop(0)\n    return num\ndef get_n_largest_v10(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    num.sort()\n    for i in range(n):\n        num.pop(0)\n    return num\ndef get_n_largest_v11(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    for i in range(n):\n        res.append(num.pop(0))\n    return res\ndef get_n_largest_v12(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    num.sort()\n    for i in range(n):\n        res.append(num[0])\n        num.pop(0)\n    return res\ndef get_n_largest_v13(num,n):\n    '''\n    Write a function to get the N largest numbers from a list.\n    '''\n    res = []\n    num.sort()\n    for i in range(n):\n        res.append(num.pop(0))\n    return res\ndef get_n_largest_v14(num,n):\n    '''",
        "num_ids": 1
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            sorted_list.append(num1[i])\n            i += 1\n        elif num2[j] < num3[k]:\n            sorted_list.append(num2[j])\n            j += 1\n        else:\n            sorted_list.append(num3[k])\n            k += 1\n    while i < len(num1):\n        sorted_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        sorted_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        sorted_list.append(num3[k])\n        k += 1\n    return sorted_list\n",
        "num_ids": 248
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    num = 0\n    for i in range(0, n):\n        if (s[i] == '1'):\n            num = num + 1\n    return num\ns = \"101010\"\nn = 3\nprint(odd_Equivalent(s,n))\n",
        "num_ids": 65
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i=0\n    for x in s:\n        if i==0:\n            if x=='1':\n                n=n%2\n            else:\n                n=n%2+1\n        else:\n            if x=='1':\n                n=n%2\n            else:\n                n=n%2+1\n        i=i+1\n    return n\n",
        "num_ids": 92
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binaryToDecimal(binary): \n        \n        binary1 = binary \n        decimal, i, n = 0, 0, 0\n        while(binary!= 0): \n            dec = binary % 10\n            decimal = decimal + dec * pow(2, i) \n            binary = binary//10\n            i += 1\n        return decimal\n    def decimalToBinary(n): \n        \n        decimal = n \n        ans = \"\" \n        while(decimal!= 0): \n            ans = ans + str(decimal%2) \n            decimal = decimal//2\n        return ans[::-1]\n    def rotate(s,n): \n        return s[n:]+s[:n]\n    return binaryToDecimal(int(rotate(binaryToDecimal(s),n),2))\nprint(odd_Equivalent(\"110111101101110111101111111111101\",7))",
        "num_ids": 223
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result=0\n    for i in range(0,n):\n        odd_indices = []\n        for j in range(0,len(s)):\n            if(s[j]=='1'):\n                odd_indices.append(j)\n        if(len(odd_indices)%2==0):\n            result+=1\n        #print(odd_indices)\n        s=s[-1]+s[:-1]\n    return result\n",
        "num_ids": 113
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    r = list(s)\n    rotate = 0\n    for i in range(0,n):\n        temp = r[0]\n        r.pop(0)\n        r.append(temp)\n        rotate += 1\n    count = 0\n    for j in range(0,len(r)):\n        if r[j] == '1':\n            count += 1\n    print('Number of numbers with an odd value when rotating binary string is: ', count)\n    print('Number of rotations performed: ', rotate)\n    return\n",
        "num_ids": 128
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    a = s\n    s = s[::-1]\n    count = 0\n    for i in range(n):\n        if a[i] == \"0\":\n            a = a[:i] + \"1\" + a[i:]\n            count += 1\n        else:\n            a = a[:i] + \"0\" + a[i:]\n            count += 1\n    return count\n",
        "num_ids": 96
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return ''.join(['0' if x=='1' else '1' for x in s])\n",
        "num_ids": 27
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def binaryToNumber(s):\n        number = 0\n        for c in s:\n            number = 2 * number + int(c)\n        return number\n    return binaryToNumber(s)\ndef main():\n    s = '101'\n    n = 2\n    print(odd_Equivalent(s,n))\n",
        "num_ids": 77
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    for i in range(n):\n        if s[0] == '1':\n            s = s[1:]+s[0]\n        elif s[0] == '0':\n            s = s[-1]+s[:-1]\n    return(len(s))\n",
        "num_ids": 69
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_copy = nestedlist.copy()\n    list_copy.append(nestedlist[0])\n    for index, _ in enumerate(nestedlist):\n        common_elements = set()\n        for jndex, _ in enumerate(list_copy):\n            if index!= jndex and nestedlist[index] == list_copy[jndex]:\n                common_elements.add(nestedlist[index])\n        if not common_elements:\n            return None\n        nestedlist[index] = common_elements\n    return list(set.intersection(*nestedlist))\n",
        "num_ids": 145
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common(lst1, lst2):\n        return list(set(lst1) & set(lst2))\n    \n    return [common(lst1, lst2) for lst1 in nestedlist for lst2 in nestedlist if len(lst1)==len(lst2) and lst1!=lst2]\n",
        "num_ids": 87
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    if nestedlist == []:\n        return []\n    elif type(nestedlist) is not list:\n        return []\n",
        "num_ids": 34
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for x in nestedlist:\n        if isinstance(x, list):\n            if len(x) > 0:\n                return common_in_nested_lists(x)\n        elif x == '1':\n            return x\n",
        "num_ids": 57
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # initialize two sets\n    set1 = set()\n    set2 = set()\n    # loop through nested lists to create set1 and set2\n    for nested_list in nestedlist:\n        for item in nested_list:\n            if item not in set1:\n                set1.add(item)\n    for item in set1:\n        set2.add(item)\n    # return the intersection of set1 and set2\n    return set1 & set2\n",
        "num_ids": 110
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_list(list1, list2):\n        result = []\n        for item in list1:\n            if item in list2:\n                result.append(item)\n        return result\n    def common_in_nested_lists(nestedlist):\n        result = []\n        for item in nestedlist:\n            if type(item) == list:\n                result.append(common_in_list(item, nestedlist))\n            else:\n                result.append(item)\n        return result\n    return common_in_list(nestedlist, nestedlist)\n",
        "num_ids": 138
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    unique_values = []\n    \n    for values in nestedlist:\n        if type(values) is list:\n            unique_values = unique_values + common_in_nested_lists(values)\n        else:\n            unique_values.append(values)\n    \n    return list(set(unique_values))\n",
        "num_ids": 77
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    '''\n    Input: [[9,1,5,7],5,7,[1,3],8,[1,6,2],3]\n    Output: [5,7]\n    '''\n    # nestedlist=[[9,1,5,7],5,7,[1,3],8,[1,6,2],3]\n    list1=[]\n    list2=[]\n    list3=[]\n    for i in nestedlist:\n        if type(i) is list:\n            list1.append(i)\n        elif type(i) is int:\n            list2.append(i)\n    for i in list1:\n        for j in i:\n            if j in list2:\n                list3.append(j)\n    return list3\n",
        "num_ids": 137
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    flat_list = []\n    for sublist in nestedlist:\n        for element in sublist:\n            flat_list.append(element)\n    return [x for x in flat_list if flat_list.count(x) > 1]\n",
        "num_ids": 59
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    uniq = []\n    if not nestedlist:\n        return uniq\n    if isinstance(nestedlist[0], list):\n        uniq.extend(common_in_nested_lists(nestedlist[0]))\n    for each in nestedlist[1:]:\n        uniq = list(set(uniq).intersection(set(each)))\n    return uniq\n    \n    \nif __name__ == '__main__':\n    sample = [1, [1, 2], 3, [1, 2], 4, [5, 6, 7]]\n    print common_in_nested_lists(sample)",
        "num_ids": 149
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    # Number will be positive or negative\n    # Can contain leading zeros\n    # Floats will be rejected\n    # Case insensitive\n    \n    try:\n        # Attempt to convert the string into an int\n        int(text)\n        return True\n    except ValueError:\n        return False\n        \ndef palindrome(text):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    \n    # Palindrome\n    # Starts with the last char\n    # Ends with the first char\n    # All other chars must be the same\n    \n    # Remove all non alphanumerics\n    for char in text:\n        if char.isalnum() == False:\n            text = text.replace(char, '')\n            \n    if text == text[::-1]:\n        return True\n    else:\n        return False\n        \ndef check_vowels(text):\n    '''\n    Write a function to check how many vowels are in a string.\n    '''\n    \n    # Count the number of vowels\n    # All the vowels must be in lower case\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for char in text.lower():\n        if char in vowels:\n            count += 1\n            \n    return count\n    \ndef unique(text):\n    '''\n    Write a function to check if all the characters in a string is unique.\n    '''\n    \n    # Unique\n    # No two chars can be the same\n    # Does not allow space\n    \n    chars = {}\n    \n    for char in text:\n        if char not in chars and char!='':\n            chars[char] = 1\n        elif char in chars:\n            return False\n    return True\n    \ndef check_pwd(text):\n    '''\n    Write a function to check if a string is a valid password or not.\n    '''\n    \n    # Password\n    # Must be between 6 and 20 chars\n    # Must contain at least one uppercase\n    # Must contain at least one lowercase\n    # Must contain at least one digit\n    # Must contain at least one special character\n    \n    special_chars = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '~', '`', '|', ';', ':', '\"', \"'\", '[', ']', '{', '}', ',', '<', '.', '>', '?', '/']\n    \n    if len(text) < 6 or len(text) > 20:\n        return False\n        \n    chars = []\n    for char in text:\n        if char.isalnum() == False:\n            return False\n        else:\n            chars.append(char)\n            \n    upper_count = 0\n    lower_count = 0\n    digit_count = 0\n    special_count = 0\n    \n    for char in chars:\n        if char.isupper():\n            upper_count += 1\n        elif char.islower():\n            lower_count += 1\n        elif char.isdigit():\n            digit_count += 1\n            \n    for char in special_chars:\n        if char in chars:\n            special_count += 1\n            \n    if upper_count > 0 and lower_count > 0 and digit_count > 0 and special_count > 0:\n        return True\n    else:\n        return False\n    \ndef check_md5(text):\n    '''\n    Write a function to check if a string is a valid md5 hash or not.\n    '''\n    \n    # Hash\n    # 32 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n    \n    if len(chars)!= 32:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n    \n    return True\n    \ndef check_sha1(text):\n    '''\n    Write a function to check if a string is a valid sha1 hash or not.\n    '''\n    \n    # Hash\n    # 40 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n            \n    if len(chars)!= 40:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n            \n    return True\n    \ndef check_sha256(text):\n    '''\n    Write a function to check if a string is a valid sha256 hash or not.\n    '''\n    \n    # Hash\n    # 64 chars\n    # Must contain only [a-f] and [0-9]\n    \n    chars = []\n    \n    for char in text:\n        if char.isalnum():\n            chars.append(char)\n            \n    if len(chars)!= 64:\n        return False\n        \n    for char in chars:\n        if char not in 'abcdef0123456789':\n            return False\n    \n    return True\n",
        "num_ids": 115
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if not text.isdigit():\n        return False\n    return True\n",
        "num_ids": 20
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int) == True:\n        print('Yes, it is an integer.')\n    elif isinstance(text, str) == True:\n        print('No, it is not an integer.')\n",
        "num_ids": 54
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int):\n        return True\n    if isinstance(text, str):\n        try:\n            if int(text) == float(text):\n                return True\n        except ValueError:\n            return False\n",
        "num_ids": 56
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #write your code here\n    if len(list1) == 0:\n        return True\n    else:\n        for i in list1:\n            if len(i)!= 0:\n                return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(list1) is False:\n        return False\n    return True\n",
        "num_ids": 21
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for i in list1:\n        empty_list.append(all(value == \"\" for value in i.values()))\n    return empty_list\n",
        "num_ids": 44
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    result = False\n    for i in list1:\n        if len(i) == 0:\n            result = True\n        else:\n            result = False\n            break\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if bool(list1[i]) == True:\n            return False\n    return True\n    \n    \ndef common_elements(list1, list2):\n    '''\n    Write a function that returns a list that contains only the elements that are common between the lists (without duplicates).\n    Make sure your program works on two lists of different sizes.\n    '''\n    common = []\n    for i in range(len(list1)):\n        if list1[i] in list2 and list1[i] not in common:\n            common.append(list1[i])\n    return common\n    \n    \ndef unique_elements(list1):\n    '''\n    Write a program that creates a dictionary and populates it with the numbers from 1 to 20, but excludes the numbers that occur more than once.\n    The function should then return the resulting dictionary.\n    '''\n    unique = {}\n    for i in range(1, 21):\n        if list1.count(i) == 1:\n            unique[i] = i\n    return unique\n    \n    \ndef delete_duplicates(list1):\n    '''\n    Write a program that removes duplicates from a list.\n    The list contains the following items:\n    1. cats\n    2. cats\n    3. dogs\n    4. dogs\n    5. cats\n    6. cats\n    7. cats\n    The expected output from the program is:\n    cats\n    dogs\n    Remove the duplicate 'cats' from the list and print the resulting list to the screen.\n    '''\n    list1.sort()\n    for i in range(len(list1) - 1):\n        if list1[i] == list1[i + 1]:\n            list1.remove(list1[i])\n    return list1\n    \n    \ndef intersect(list1, list2):\n    '''\n    Write a program that returns a list that contains only the elements that are common between the lists (without duplicates).\n    Make sure your program works on two lists of different sizes.\n    '''\n    inter = []\n    for i in range(len(list1)):\n        if list1[i] in list2 and list1[i] not in inter:\n            inter.append(list1[i])\n    return inter\n    \n    \ndef unique_elements_2(list1):\n    '''\n    Write a program that creates a dictionary and populates it with the numbers from 1 to 20, but excludes the numbers that occur more than once.\n    The function should then return the resulting dictionary.\n    '''\n    unique = {}\n    for i in range(1, 21):\n        if list1.count(i) == 1:\n            unique[i] = i\n    return unique\n    \n    \ndef intersect_2(list1, list2):\n    '''\n    Write a program that returns a list that contains only the elements that are common between the lists (without duplicates).\n    Make sure your program works on two lists of different sizes.\n    '''\n    inter = []\n    for i in range(len(list1)):\n        if list1[i] in list2 and list1[i] not in inter:\n            inter.append(list1[i])\n    return inter\n    \n    \ndef get_most_frequent_item(list1):\n    '''\n    Write a program that creates a dictionary and populates it with the numbers from 1 to 20. The function should return the key whose value is the largest.\n    '''\n    frequency = {}\n    for i in range(1, 21):\n        if list1.count(i) in frequency:\n            frequency[list1.count(i)] = i\n        else:\n            frequency[list1.count(i)] = i\n    return frequency[max(frequency.keys())]\n    \n    \ndef get_numbers_divisible_by_three(list1):\n    '''\n    Write a program that creates a list of numbers from 1 to 100. Then write another program that creates a second list containing only the numbers from the first list that are divisible by 3.\n    Make sure your program works for all numbers from 1 to 100.\n    '''\n    divisible_by_three = []\n    for i in range(1, 101):\n        if i % 3 == 0:\n            divisible_by_three.append(i)\n    return divisible_by_three\n    \n    \ndef sum_all_numbers(list1):\n    '''\n    Write a program that creates a list and populates it with the numbers from 1 to 100. The function should return the sum of all of the numbers in the list.\n    '''\n    total = 0\n    for i in range(1, 101):\n        total += i\n    return total\n    \n    \ndef swap_elements(list1, list2):\n    '''\n    Write a program that creates two empty lists. The program should then ask the user to enter ten numbers, and the program should add the even numbers to list1 and the odd numbers to list2.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(10):\n        number = int(input(\"Please enter a number: \"))\n        if number % 2 == 0:\n            list1.append(number)\n        else:\n            list2.append(number)\n    return list1, list2\n    \n    \ndef remove_middle(list1):\n    '''\n    Write a program that creates a list of numbers. The program should then display the list, and then ask the user to enter a number. The program should then display the list without the number that the user entered.\n    '''\n    print(list1)\n    num = int(input(\"Which number would you like to remove from the list? \"))\n    for i in range(len(list1)):\n        if list1[i] == num:\n            del list1[i]\n    return list1\n    \n    \ndef get_odd_numbers(list1):\n    '''\n    Write a program that creates a list of numbers from 1 to 100. The program should then display the list. Next, the program should display the list of odd numbers in the list.\n    '''\n    odd_numbers = []\n    for i in range(1, 101):\n        if i % 2 == 1:\n            odd_numbers.append(i)\n    return odd_numbers\n    \n    \ndef get_largest_number(list1):\n    '''\n    Write a program that creates a list of numbers from 1 to 100. The program should then display the list. Next, the program should display the list of odd numbers in the list.\n    '''\n    list1.sort()\n    return list1[len(list1) - 1]\n    \n    \ndef get_smallest_number(list1):\n    '''\n    Write a program that creates a list of numbers from 1 to 100. The program should then display the list. Next, the program should display the list of odd numbers in the list.\n    '''\n    list1.sort()\n    return list1[0]\n    \n    \ndef get_longest_word(list1):\n    '''\n    Write a program that creates a list of strings. The program should then display the list. Next, the program should display the list of strings that are the same length as the longest string in the list.\n    '''\n    longest_word = \"\"\n    for i in range(len(list1)):\n        if len(list1[i]) > len(longest_word):\n            longest_word = list1[i]\n    return longest_word\n    \n    \ndef get_longest_word_2(list1):\n    '''\n    Write a program that creates a list of strings. The program should then display the list. Next, the program should display the list of strings that are the same length as the longest string in the list.\n    '''\n    longest_word = \"\"\n    for i in range(len(list1)):\n        if len(list1[i]) > len(longest_word):\n            longest_word = list1[i]\n    return longest_word\n    \n    \ndef get_shortest_word(list1):\n    '''\n    Write a program that creates a list of strings. The program should then display the list. Next, the program should display the list of strings that are the same length as the shortest string in the list.\n    '''\n    shortest_word = \"\"\n    for i in range(len(list1)):\n        if len(list1[i]) < len(shor",
        "num_ids": 37
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #return all(not dit for dit in list1)\n    return not any(dit for dit in list1)\n",
        "num_ids": 32
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for dicti in list1:\n        if dicti:\n            flag = False\n    return flag\n",
        "num_ids": 31
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if x:\n            return False\n    return True\n",
        "num_ids": 23
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = 0\n    for i in list1:\n        if len(i) > 0:\n            flag = 1\n    if flag == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 49
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 == []:\n        return True\n    else:\n        return False\n",
        "num_ids": 22
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(num) for num in nums]))\n    \n    \ndef tuple_to_int_sol2(nums):\n    return int(''.join([str(num) for num in nums]))\n    \n    ",
        "num_ids": 61
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    x = 0\n    for num in nums:\n        x = x * 10 + num\n    return x\n",
        "num_ids": 28
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in nums]))\n",
        "num_ids": 21
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n",
        "num_ids": 20
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    # Without the use of built-in functions\n    result = ''\n    for num in nums:\n        result += str(num)\n    \n    return int(result)\n",
        "num_ids": 45
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    #nums = (1, 2, 3, 4, 5, 6, 7)\n    return int(''.join([str(i) for i in nums]))\n",
        "num_ids": 42
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = \"\"\n    for num in nums:\n        result += str(num)\n    return int(result)\n",
        "num_ids": 30
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for i in range(len(test_list)):\n        try:\n            float_list.append(float(test_list[i]))\n        except ValueError:\n            continue\n    return float_list\n",
        "num_ids": 59
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_float = []\n    for i in test_list:\n        list_float.append(float(i))\n    return list_float\n",
        "num_ids": 36
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    float_list = []\n    for sub_list in test_list:\n        float_list.append(list(map(float, sub_list)))\n    return float_list\n",
        "num_ids": 44
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [list(map(float, sublist)) for sublist in test_list]\n",
        "num_ids": 23
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except:\n                continue\n    return test_list\n",
        "num_ids": 70
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(float, test_list))\n",
        "num_ids": 15
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, x in enumerate(test_list):\n        try:\n            test_list[i] = float(x)\n        except ValueError:\n            pass\n    return test_list\n",
        "num_ids": 48
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        try:\n            float(sublist)\n            new_list.append(sublist)\n        except ValueError:\n            pass\n    return new_list\n",
        "num_ids": 56
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for j in range(len(i)):\n            i[j] = float(i[j])\n",
        "num_ids": 36
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_split_on_space = string.split()\n    return list_split_on_space\n    \ndef string_to_number(string): \n    '''\n    Write a function to convert a string to a list of strings split on the comma character.\n    '''\n    list_split_on_comma = string.split(',')\n    return list_split_on_comma\n    \ndef string_to_number2(string): \n    '''\n    Write a function to convert a string to a list of strings split on the comma character.\n    '''\n    list_split_on_comma = string.split(',')\n    return list_split_on_comma\n    \ndef string_to_number3(string): \n    '''\n    Write a function to convert a string to a list of strings split on the comma character.\n    '''\n    list_split_on_comma = string.split(',')\n    return list_split_on_comma\n    \ndef list_to_string(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string2(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string3(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string4(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string5(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string6(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string7(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string8(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string9(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string10(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string11(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string12(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string13(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string14(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string15(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string16(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string17(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string18(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string19(list_of_string): \n    '''\n    Write a function to convert a list of strings to a comma separated string.\n    '''\n    comma_separated_string = ''\n    for string in list_of_string:\n        comma_separated_string += string + ','\n    return comma_separated_string[:-1]\n    \ndef list_to_string20(list_of_string): \n    '''\n    Write a function to convert ",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n",
        "num_ids": 11
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    #return re.split(\"[ ]+\", string)\n",
        "num_ids": 23
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "num_ids": 9
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return [a for a in string.split()]\n",
        "num_ids": 15
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    if string == None:\n        return []\n    return string.split(' ')\n",
        "num_ids": 22
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    dict = {}\n    for i in range(len(arr)):\n        if arr[i] not in dict:\n            dict[arr[i]] = 1\n        else:\n            dict[arr[i]] += 1\n    for i in dict:\n        if dict[i] == 1:\n            return i\n    return \"No unique element in the list\"\n",
        "num_ids": 86
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in arr:\n        if arr.count(i)==1:\n            return i\n",
        "num_ids": 25
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left, right = 0, len(arr)-1\n",
        "num_ids": 15
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    start,end = 0,n-1\n    while start < end:\n        mid = (start+end)//2\n        if arr[mid] == arr[mid-1] or arr[mid] == arr[mid+1]:\n            if (mid == 0 or arr[mid-1]!= arr[mid]) and (mid == n-1 or arr[mid+1]!= arr[mid]):\n                return arr[mid]\n            elif mid > 0 and arr[mid-1]!= arr[mid]:\n                end = mid\n            elif mid < n-1 and arr[mid+1]!= arr[mid]:\n                start = mid+1\n            else:\n                start += 1\n        else:\n            start = mid + 1\n    return -1\n",
        "num_ids": 192
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    l=len(arr)\n    if l<2:\n        return arr[0]\n    i,j=0,l-1\n    while i<j:\n        mid = (i+j)//2\n        if arr[mid] == arr[mid+1]:\n            i = mid+1\n        else:\n            j = mid\n    return arr[i]\n",
        "num_ids": 90
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def single(arr):\n        temp=arr[0]\n        for i in range(1,len(arr)):\n            if arr[i]!=temp:\n                return arr[i]\n        return arr[-1]\n    return single(arr)\narr=[1,1,2,2,3,3,3,4,4,4,4,5,5,6,6,6]\nprint(search(arr)",
        "num_ids": 105
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # start, end = 0, len(arr)-1\n    # while start<=end:\n    #     mid = start + (end-start)//2\n    #     if mid<len(arr)-1 and arr[mid]==arr[mid+1]:\n    #         if arr[mid]==arr[mid-1]:\n    #             start = mid+2\n    #         else:\n    #             end = mid-1\n    #     elif mid>0 and arr[mid]==arr[mid-1]:\n    #         if arr[mid]==arr[mid+1]:\n    #             end = mid-2\n    #         else:\n    #             start = mid+1\n    #     else:\n    #         return arr[mid]\n    # return None\n",
        "num_ids": 185
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    res = []\n    for num in arr:\n        if arr.count(num) == 1:\n            res.append(num)\n    return res\n",
        "num_ids": 38
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            return arr[i]\n    return -1\n",
        "num_ids": 40
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 0:\n        return None\n",
        "num_ids": 33
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        if tup[0]*tup[1] > max_product:\n            max_product = tup[0]*tup[1]\n    return max_product\n",
        "num_ids": 60
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #assign the maximum product value to a variable\n    max_product = 0\n",
        "num_ids": 21
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if type(list1) == list and list1!= []:\n        max_prod = list1[0][0]*list1[0][1]\n        for i in range(len(list1)):\n            if list1[i][0] * list1[i][1] > max_prod:\n                max_prod = list1[i][0] * list1[i][1]\n        return max_prod\n    else:\n        return 'Invalid input'\n",
        "num_ids": 118
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    from functools import reduce\n",
        "num_ids": 10
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #function begins here\n    #validation of input\n    if len(list1) < 2:\n        raise ValueError('The list must contain at least two elements.')\n    for item in list1:\n        if not isinstance(item, tuple):\n            raise ValueError('Only tuples are allowed.')\n    #creating empty list\n    tuple1 = []\n    #looping over the list\n    for index in range(len(list1)):\n        #checking if the item is a tuple and appending it to the new list\n        if isinstance(list1[index], tuple):\n            tuple1.append(list1[index])\n    #creating an empty list for result\n    result = []\n    #checking if there are only two tuples in the list\n    if len(tuple1) == 2:\n        #calculating the product of the two tuples\n        product = tuple1[0][0] * tuple1[0][1] * tuple1[1][0] * tuple1[1][1]\n        #appending the result to the list\n        result.append(product)\n    #checking if there are three or more tuples in the list\n    if len(tuple1) > 2:\n        #calculating the product of the first and last tuples\n        product = tuple1[0][0] * tuple1[0][1] * tuple1[len(tuple1) - 1][0] * tuple1[len(tuple1) - 1][1]\n        #appending the result to the list\n        result.append(product)\n        #looping over the tuples\n        for index in range(len(tuple1) - 1):\n            #checking if the index is even or odd\n            if index % 2 == 0:\n                #calculating the product of the pairs\n                product = tuple1[index][0] * tuple1[index + 1][0] * tuple1[index][1] * tuple1[index + 1][1]\n                #appending the result to the list\n                result.append(product)\n    #returning the list\n    return result\n",
        "num_ids": 493
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list1[i][0]*list1[i][1]\n    return max(list1)\n",
        "num_ids": 46
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #cannot use max_product_list because we want to use the product of all pairs of numbers to get the maximum\n    #product of numbers in a tuple.\n    max_product = 1\n    for index, item in enumerate(list1):\n        if index < len(list1)-1:\n            first_num = list1[index]\n            second_num = list1[index+1]\n            product = first_num * second_num\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 128
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 1:\n        return 0\n    else:\n        return max(abs(x[0]*x[1]) for x in zip(list1, list1[1:]))\n",
        "num_ids": 51
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError\n    \n    max_prod = 0\n    for i in range(0, len(list1)-1):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0]*list1[j][0]*list1[i][1]*list1[j][1]\n            if prod > max_prod:\n                max_prod = prod\n    return max_prod\n",
        "num_ids": 122
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][0] > max_prod:\n                max_prod = list1[i][0]*list1[j][0]\n            elif list1[i][0]*list1[j][1] > max_prod:\n                max_prod = list1[i][0]*list1[j][1]\n            elif list1[i][1]*list1[j][1] > max_prod:\n                max_prod = list1[i][1]*list1[j][1]\n            elif list1[i][1]*list1[j][0] > max_prod:\n                max_prod = list1[i][1]*list1[j][0]\n    return max_prod\n",
        "num_ids": 234
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(1, limit):\n        sum_1 = sum_2 = 0\n        if number < amicable_number(number):\n            if amicable_number(number) == sum_of_divisors(number):\n                amicable_numbers.append(number)\n                if amicable_number(amicable_number(number)) == number:\n                    amicable_numbers.append(amicable_number(number))\n    return sum(amicable_numbers)\n",
        "num_ids": 124
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(amicable_numbers(limit))\n",
        "num_ids": 15
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    numbers_list = [n for n in range(1, limit)]\n",
        "num_ids": 22
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # trivial case\n    if limit < 2:\n        return 0\n",
        "num_ids": 18
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = list(range(1, limit))\n    sum_amicable = 0\n    for number in numbers:\n        sum_first = sum_of_factors(number)\n        sum_second = sum_of_factors(sum_first)\n        if sum_second == number and sum_first!= number:\n            sum_amicable += number\n        if sum_first == number and sum_second!= number:\n            sum_amicable += number\n    return sum_amicable\n",
        "num_ids": 117
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    def list_sum(n):\n        lst = list(range(1, n + 1))\n        sum_lst = sum(lst)\n        return sum_lst\n    def divisors(n):\n        div_lst = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                div_lst.append(i)\n        return div_lst\n    def check_amicable(n):\n        if (list_sum(n) == sum(divisors(n))) and (list_sum(list_sum(n)) == n):\n            return True\n        else:\n            return False\n    amicable_nums = []\n    for i in range(1, limit):\n        if check_amicable(i):\n            amicable_nums.append(i)\n    return sum(amicable_nums)\n",
        "num_ids": 268
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable_numbers = 0\n    for i in range(1, limit):\n        if(is_amicable(i)):\n            sum_amicable_numbers += i\n    return sum_amicable_numbers\n",
        "num_ids": 57
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums_set = set()\n    for x in range(1, limit + 1):\n        y = sum_divisors(x)\n        if y!= x and y < limit:\n            if x == sum_divisors(y):\n                amicable_nums_set.add(x)\n                amicable_nums_set.add(y)\n    return sum(amicable_nums_set)\n",
        "num_ids": 105
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1,limit):\n        divisor = sum_of_factors(i)\n        if i == sum_of_factors(divisor) and i!= divisor:\n            amicable_sum += i\n    return amicable_sum\n",
        "num_ids": 75
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\ndef complex_multiply(a,b):\n    '''\n    Write a function to calculate the product of two complex numbers.\n    '''\n    return complex(a.real*b.real-a.imag*b.imag,a.real*b.imag+a.imag*b.real)\ndef complex_conjugate(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return complex(a.real,-a.imag)\ndef complex_divide(a,b):\n    '''\n    Write a function to get the division of two complex numbers.\n    '''\n    return complex(a.real/b.real,a.imag/b.real)\ndef complex_addition(a,b):\n    '''\n    Write a function to add two complex numbers.\n    '''\n    return complex(a.real+b.real,a.imag+b.imag)\ndef complex_subtraction(a,b):\n    '''\n    Write a function to subtract two complex numbers.\n    '''\n    return complex(a.real-b.real,a.imag-b.imag)\ndef complex_power(a,b):\n    '''\n    Write a function to compute the power of a complex number.\n    '''\n    if b%2==0:\n        return complex_multiply(a,complex_power(a,b//2))\n    else:\n        return complex_multiply(a,complex_power(a,b//2))\ndef complex_module(a):\n    '''\n    Write a function to calculate the module of a complex number.\n    '''\n    return (a.real**2+a.imag**2)**0.5\ndef complex_angle(a):\n    '''\n    Write a function to calculate the angle of a complex number.\n    '''\n    return cmath.phase(a)\ndef complex_equal(a,b):\n    '''\n    Write a function to check if two complex numbers are equal.\n    '''\n    return a.real==b.real and a.imag==b.imag\ndef complex_is_unit(a):\n    '''\n    Write a function to check if a complex number is a unit number.\n    '''\n    return complex_module(a)==1\ndef complex_is_zero(a):\n    '''\n    Write a function to check if a complex number is zero.\n    '''\n    return a.real==0 and a.imag==0\ndef complex_is_conjugate(a,b):\n    '''\n    Write a function to check if two complex numbers are conjugates of each other.\n    '''\n    return complex_equal(complex_conjugate(a),b)\ndef complex_is_addition(a,b):\n    '''\n    Write a function to check if two complex numbers are added.\n    '''\n    return complex_equal(complex_addition(a,b),complex_addition(b,a))\ndef complex_is_multiplication(a,b):\n    '''\n    Write a function to check if two complex numbers are multiplied.\n    '''\n    return complex_equal(complex_multiply(a,b),complex_multiply(b,a))\ndef complex_is_multiplication_real(a,b):\n    '''\n    Write a function to check if two complex numbers are multiplied by real number.\n    '''\n    return a.real==b*a.real and a.imag==b*a.imag\ndef complex_is_multiplication_imag(a,b):\n    '''\n    Write a function to check if two complex numbers are multiplied by imaginary number.\n    '''\n    return a.real==b*a.real and a.imag==b*a.imag\ndef complex_is_multiplication_conjugate(a,b):\n    '''\n    Write a function to check if two complex numbers are multiplied by conjugate.\n    '''\n    return complex_equal(complex_multiply(a,b),complex_multiply(complex_conjugate(b),a))\ndef complex_is_multiplication_div(a,b):\n    '''\n    Write a function to check if two complex numbers are multiplied by reciprocal.\n    '''\n    return complex_equal(complex_divide(a,b),complex_divide(b,a))\ndef complex_is_division(a,b):\n    '''\n    Write a function to check if two complex numbers are divided.\n    '''\n    return complex_equal(complex_divide(a,b),complex_divide(b,a))\ndef complex_is_power(a,b):\n    '''\n    Write a function to check if two complex numbers are raised to a power.\n    '''\n    return complex_equal(complex_power(a,b),complex_power(b,a))\ndef complex_is_divided_real(a,b):\n    '''\n    Write a function to check if two complex numbers are divided by real number.\n    '''\n    return a.real==b*a.real\ndef complex_is_divided_imag(a,b):\n    '''\n    Write a function to check if two complex numbers are divided by imaginary number.\n    '''\n    return a.real==b*a.real\ndef complex_is_divided_conjugate(a,b):\n    '''\n    Write a function to check if two complex numbers are divided by conjugate.\n    '''\n    return complex_equal(complex_divide(a,b),complex_divide(complex_conjugate(b),a))\ndef complex_is_divided_power(a,b):\n    '''\n    Write a function to check if two complex numbers are divided by reciprocal.\n    '''\n    return complex_equal(complex_divide(a,b),complex_divide(b,a))\ndef complex_is_module_real(a,b):\n    '''\n    Write a function to check if two complex numbers are module by real number.\n    '''\n    return a.imag==b*a.imag\ndef complex_is_module_imag(a,b):\n    '''\n    Write a function to check if two complex numbers are module by imaginary number.\n    '''\n    return a.real==b*a.real\ndef complex_is_module_conjugate(a,b):\n    '''\n    Write a function to check if two complex numbers are module by conjugate.\n    '''\n    return complex_equal(complex_module(a),complex_module(b))\ndef complex_is_module_power(a,b):\n    '''\n    Write a function to check if two complex numbers are module by reciprocal.\n    '''\n    return complex_equal(complex_module(a),complex_module(b))\ndef complex_is_sum_real(a,b):\n    '''\n    Write a function to check if two complex numbers are added by real number.\n    '''\n    return a.imag==b*a.imag\ndef complex_is_sum_imag(a,b):\n    '''\n    Write a function to check if two complex numbers are added by imaginary number.\n    '''\n    return a.real==b*a.real\ndef complex_is_sum_conjugate(a,b):\n    '''\n    Write a function to check if two complex numbers are added by conjugate.\n    '''\n    return complex_equal(complex_addition(a,b),complex_addition(complex_conjugate(b),a))\ndef complex_is_sum_power(a,b):\n    '''\n    Write a function to check if two complex numbers are added by reciprocal.\n    '''\n    return complex_equal(complex_addition(a,b),complex_addition(b,a))\ndef complex_is_sum_div(a,b):\n    '''\n    Write a function to check if two complex numbers are added by reciprocal.\n    '''\n    return complex_equal(complex_divide(a,b),complex_divide(b,a))\ndef complex_is_sum_module(a,b):\n    '''\n    Write a function to check if two complex numbers are added by reciprocal.\n    '''\n    return complex_equal(complex_module(a),complex_module(b))\ndef complex_is_sum_angle(a,b):\n    '''\n    Write a function to chec",
        "num_ids": 9
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    ang_real=math.atan(a)\n    ang_complex=math.atan(b)\n    print('Angle in degrees: ',math.degrees(ang_real))\n    print('Angle in radians: ',ang_complex)\n",
        "num_ids": 60
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\ndef complex_formatting(a,b):\n    '''\n    Write a function to format a complex number like this:\n    (x,y) ==> x+yi (positive i imaginary)\n    '''\n    return '({},{})'.format(a,b)\n",
        "num_ids": 17
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n",
        "num_ids": 16
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x=complex(a)\n    y=complex(b)\n    angle=cmath.phase(complex(x,y))\n    angle=cmath.phase(complex(x,y))\n    return angle\n",
        "num_ids": 52
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b==0:\n        return \"0\"\n    elif a==0 and b!=0:\n        return \"undefined\"\n    elif b<0:\n        return str(cmath.phase(a/b))\n    else:\n        return str(cmath.phase(a/b))[3:]\n",
        "num_ids": 78
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a = a[1:]\n    b = b[:-1]\n    if a == '+0j':\n        if b == '0j':\n            return 0\n        else:\n            return cmath.phase(complex(float(b),0))\n    else:\n        if b == '0j':\n            return cmath.phase(complex(float(a),0))\n        else:\n            return cmath.phase(complex(float(a),float(b)))\n",
        "num_ids": 113
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a_conj=a.conjugate()\n    c=complex(a,a_conj)\n    return cmath.phase(c)\n",
        "num_ids": 38
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n",
        "num_ids": 14
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0: return 0\n    maxlen = 0\n    count = 0\n    for i in string:\n        if i == '1': count += 1\n        else: count = 0\n        if count > maxlen: maxlen = count\n    return maxlen\n",
        "num_ids": 67
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    counter_0 = 0\n    counter_1 = 0\n",
        "num_ids": 24
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables for the count\n    count_0 = 0\n    count_1 = 0\n",
        "num_ids": 27
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string) == 0:\n        return 0\n    curr_len = 0\n    max_len = 0\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n        curr_len = max(curr_len, zeros - ones)\n        max_len = max(max_len, curr_len)\n    return max_len\n",
        "num_ids": 122
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    import numpy as np\n",
        "num_ids": 9
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    count = 0\n    # Traverse the string\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            count = 0\n        else:\n            count = count + 1\n            if count > max_count:\n                max_count = count\n    return max_count\n",
        "num_ids": 84
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)): \n        count0 = 0\n        count1 = 0\n        for j in range(i, len(string)): \n            if string[j] == '0': \n                count0 += 1\n            else: \n                count1 += 1\n            max_length = max(max_length, count0, count1)\n    return max_length\n",
        "num_ids": 102
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_0s = 0\n    max_1s = 0\n    current_0s = 0\n    current_1s = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            current_0s += 1\n            current_1s = 0\n        else:\n            current_1s += 1\n            current_0s = 0\n        if current_0s > max_0s:\n            max_0s = current_0s\n        if current_1s > max_1s:\n            max_1s = current_1s\n    return max(max_1s, max_0s)\n",
        "num_ids": 158
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_length = max(max_length, count_0, count_1)\n    return max_length\n    \n    \ndef find_length_fast(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    first = True\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if first == True:\n            first_max = max(count_0, count_1)\n            first = False\n        max_length = max(max_length, count_0, count_1)\n    return max_length, first_max\n    \n    \ndef find_length_fast_short(string):\n    count_0 = 0\n    count_1 = 0\n    max_length = 0\n    for i in string:\n        if i == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_length = max(max_length, count_0, count_1)\n    return max_length\n    \n    \ndef find_max_sum_subarray(array):\n    '''\n    Write a function that takes in a non-empty array of integers and returns the maximum sum that can be obtained by summing up all of the numbers in a non-empty subarray of the input array. A subarray must only contain adjacent numbers.\n    '''\n    max_sum = 0\n    max_ending = 0\n    min_ending = 0\n    for i in array:\n        if max_ending < 0:\n            max_ending = i\n        else:\n            max_ending = max_ending + i\n        if max_ending > max_sum:\n            max_sum = max_ending\n        if min_ending > max_ending:\n            min_ending = max_ending\n        if min_ending < 0:\n            min_ending = 0\n    return max_sum\n    \n    \ndef find_max_sum_subarray_fast(array):\n    '''\n    Write a function that takes in a non-empty array of integers and returns the maximum sum that can be obtained by summing up all of the numbers in a non-empty subarray of the input array. A subarray must only contain adjacent numbers.\n    '''\n    max_ending = 0\n    max_sum = 0\n    min_ending = 0\n    max_ending_current = 0\n    max_sum_current = 0\n    for i in array:\n        max_ending_current = max(0, max_ending_current + i)\n        max_sum_current = max(max_ending_current, max_sum_current)\n        max_ending = max(max_ending, max_ending_current)\n        if max_sum_current < 0:\n            max_sum_current = 0\n        if max_ending_current < 0:\n            max_ending_current = 0\n    return max_sum_current\n    \n    \ndef find_max_subarray_sum(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the maximum sum that can be obtained by summing up all of the numbers in a non-empty subarray of the input array. A subarray must only contain adjacent numbers.\n    '''\n    max_sum = 0\n    max_ending = 0\n    min_ending = 0\n    for i in array:\n        if max_ending < 0:\n            max_ending = i\n        else:\n            max_ending = max_ending + i\n        if max_ending > max_sum:\n            max_sum = max_ending\n        if min_ending > max_ending:\n            min_ending = max_ending\n        if min_ending < 0:\n            min_ending = 0\n    return max_sum\n    \n    \ndef find_max_subarray_sum_fast(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the maximum sum that can be obtained by summing up all of the numbers in a non-empty subarray of the input array. A subarray must only contain adjacent numbers.\n    '''\n    max_ending = 0\n    max_sum = 0\n    min_ending = 0\n    max_ending_current = 0\n    max_sum_current = 0\n    for i in array:\n        max_ending_current = max(0, max_ending_current + i)\n        max_sum_current = max(max_ending_current, max_sum_current)\n        max_ending = max(max_ending, max_ending_current)\n        if max_sum_current < 0:\n            max_sum_current = 0\n        if max_ending_current < 0:\n            max_ending_current = 0\n    return max_sum_current\n    \n    \ndef find_product(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the product of the three numbers such that one of the three numbers add up to be equal to the sum of the other two numbers. The product should be as small as possible.\n    '''\n    sorted_array = sorted(array)\n    sum = 0\n    for i in range(len(sorted_array) - 2):\n        if sum == sorted_array[i] + sorted_array[i + 1]:\n            return sorted_array[i] * sorted_array[i + 1] * sorted_array[i + 2]\n        sum += sorted_array[i]\n    return 0\n    \n    \ndef find_product_fast(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the product of the three numbers such that one of the three numbers add up to be equal to the sum of the other two numbers. The product should be as small as possible.\n    '''\n    sorted_array = sorted(array)\n    sum = 0\n    for i in range(len(sorted_array) - 2):\n        if sum == sorted_array[i] + sorted_array[i + 1]:\n            return sorted_array[i] * sorted_array[i + 1] * sorted_array[i + 2]\n        sum += sorted_array[i]\n    return 0\n    \n    \ndef find_triples_smaller_than(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the sum of all the numbers in the array that are strictly smaller than all of the numbers in the array that are greater than or equal to all of the numbers in the array.\n    '''\n    array_len = len(array)\n    sum = 0\n    for i in range(array_len):\n        for j in range(array_len):\n            if array[i] >= array[j]:\n                break\n        else:\n            sum += array[i]\n    return sum\n    \n    \ndef find_triples_smaller_than_fast(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the sum of all the numbers in the array that are strictly smaller than all of the numbers in the array that are greater than or equal to all of the numbers in the array.\n    '''\n    array_len = len(array)\n    sum = 0\n    for i in range(array_len):\n        for j in range(array_len):\n            if array[i] >= array[j]:\n                break\n        else:\n            sum += array[i]\n    return sum\n    \n    \ndef find_triples_smaller_than_fastest(array):\n    '''\n    Write a function that takes in a non-empty array of numbers and returns the sum of all the numbers in the array that are strictly smaller than all of the numbers in the array that are greater than or equal to all of the numbers in the array.\n    '''\n    array_len = len(array)\n    sum = 0\n    for i in range(array_len):\n        for j in range(array_len):\n            if array[i] >= array[j]:\n                break\n        else:\n            sum += array[i]\n    return sum\n    \n",
        "num_ids": 72
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    sum = 1\n    while i < a and i < b:\n        if a % i == 0 and b % i == 0:\n            sum = sum * i\n        i = i + 1\n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def common_divisor(a,b): \n        c=min(a,b)\n        d=max(a,b)\n        r=1\n        for i in range(1,c+1):\n            if a%i==0 and b%i==0:\n                r=i\n        return r\n    def sum(a,b): \n        return a+b\n    return sum(common_divisor(a,b),a*b/common_divisor(a,b))\ndef main():\n    \n    print(sum(3,4))\n",
        "num_ids": 139
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res=0\n    while a>0:\n        a,b=b%a,a\n    return b\ndef add(a,b):\n    '''\n    Write a python function to add two numbers without using the '+' operator.\n    '''\n    return a^b\ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers without using the '*' operator.\n    '''\n    res=0\n    while b>0:\n        res+=a\n        b-=1\n    return res\ndef factorial(n):\n    '''\n    Write a python function to calculate the factorial of a number without using the math.factorial() function.\n    '''\n    res=1\n    for i in range(n,1,-1):\n        res=res*i\n    return res\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the fibonacci sequence to n number without using the 'fibonacci' function of the math module.\n    '''\n    a=0\n    b=1\n    for i in range(n):\n        a,b=b,a+b\n    return a\ndef exp(a,b):\n    '''\n    Write a python function to calculate the exponent without using the 'exp' operator.\n    '''\n    res=1\n    for i in range(b):\n        res*=a\n    return res\ndef gcd(a,b):\n    '''\n    Write a python function to find the greatest common divisor without using the 'gcd' function of the math module.\n    '''\n    while b>0:\n        a,b=b,a%b\n    return a\ndef isPrime(n):\n    '''\n    Write a python function to check if a number is prime without using the 'isPrime' function of the math module.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef getPrimes(n):\n    '''\n    Write a python function to print the prime numbers up to n.\n    '''\n    prime=[True]*(n+1)\n    for i in range(2,int(math.sqrt(n))+1):\n        if prime[i]:\n            for j in range(i*i,n+1,i):\n                prime[j]=False\n    for i in range(2,n+1):\n        if prime[i]:\n            print(i)\ndef decimalToBinary(n):\n    '''\n    Write a python function to convert a decimal number to binary.\n    '''\n    binary=\"\"\n    while n>=1:\n        binary=str(n%2)+binary\n        n=n//2\n    return binary\ndef binaryToDecimal(n):\n    '''\n    Write a python function to convert a binary number to decimal.\n    '''\n    return int(n,2)\ndef decimalToOctal(n):\n    '''\n    Write a python function to convert a decimal number to octal.\n    '''\n    octal=\"\"\n    while n>=1:\n        octal=str(n%8)+octal\n        n=n//8\n    return octal\ndef octalToDecimal(n):\n    '''\n    Write a python function to convert a octal number to decimal.\n    '''\n    return int(n,8)\ndef decimalToHexadecimal(n):\n    '''\n    Write a python function to convert a decimal number to hexadecimal.\n    '''\n    hexa=['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n    res=\"0x\"\n    while n>=16:\n        res+=hexa[n%16]\n        n=n//16\n    return res+hexa[n]\ndef hexadecimalToDecimal(n):\n    '''\n    Write a python function to convert a hexadecimal number to decimal.\n    '''\n    res=0\n    n=n[2:]\n    for i in range(len(n)):\n        res=res*16+hexa.index(n[i])\n    return res\ndef numberToWords(n):\n    '''\n    Write a python function to convert a number into words.\n    '''\n    units=['','one','two','three','four','five','six','seven','eight','nine']\n    tens=['','','twenty','thirty','forty','fifty','sixty','seventy','eighty','ninety']\n    res=\"\"\n    if n//10000000==1:\n        res+='billion'\n        n-=10000000\n    if n//1000000==1:\n        res+='million'\n        n-=1000000\n    if n//1000==1:\n        res+='thousand'\n        n-=1000\n    if n>=100:\n        res+=units[n//100]\n        n-=n//100*100\n    if n>=20:\n        res+=tens[(n//10)-2]\n        n-=n//10*10\n    if n>0 and n<=19:\n        res+=units[n]\n    return res\ndef sumOfSquaresOfDigits(n):\n    '''\n    Write a python function to get the sum of squares of digits of a given number.\n    '''\n    return sum([int(i)**2 for i in str(n)])\ndef isArmstrong(n):\n    '''\n    Write a python function to check if a number is armstrong.\n    '''\n    res=0\n    for i in str(n):\n        res+=int(i)**3\n    return res==n\ndef isPalindrome(n):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return str(n)==str(n)[::-1]\ndef isFibonacci(n):\n    '''\n    Write a python function to check if a number is fibonacci.\n    '''\n    a,b=0,1\n    while b<n:\n        a,b=b,a+b\n    return a==n\ndef printPairs(l,n):\n    '''\n    Write a python function to print all pairs of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            if l[i]+l[j]==n:\n                print(l[i],l[j])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==n:\n                    print(l[i],l[j],l[k])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==n:\n                    print(l[i],l[j],l[k])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(l)):\n            for k in range(j+1,len(l)):\n                if l[i]+l[j]+l[k]==n:\n                    print(l[i],l[j],l[k])\ndef printTriplets(l,n):\n    '''\n    Write a python function to print all triplets of elements whose sum is equal to a given number.\n    '''\n    for i in range(len(l)):\n        for j in range(i+1,len(",
        "num_ids": 26
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n",
        "num_ids": 8
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while(a%b!= 0): \n        c = a%b \n        a = b \n        b = c \n    return b \n",
        "num_ids": 39
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(b==0):\n        return a\n    else:\n        return sum(b,a%b)\ndef sum2(a,b): \n    '''\n    Write a python function to find the sum of divisors of two given numbers.\n    '''\n    total=0\n    for i in range(1,a+1):\n        if(a%i==0):\n            total=total+i\n    for j in range(1,b+1):\n        if(b%j==0):\n            total=total+j\n    return total\ndef div(a,b):\n    '''\n    Write a python function to find the sum of divisors of two given numbers.\n    '''\n    if(b==0):\n        return a\n    else:\n        return div(b,a%b)\n",
        "num_ids": 29
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if b == 0: \n        return a \n    else: \n        return sum(b, a%b) \n",
        "num_ids": 32
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while a:\n        a,b = b%a,a\n    return b\n",
        "num_ids": 22
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    import math\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1,int(math.sqrt(n) + 1)):\n            if (n % i == 0):\n                if (n // i == i):\n                    result += i\n                else:\n                    result += (i + n//i)\n        return result\n    return sum_of_divisors(a) + sum_of_divisors(b)\n",
        "num_ids": 114
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(\"x = \", x, \"y = \", y)\n    return x * y\n",
        "num_ids": 23
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "num_ids": 8
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Fill in this function\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n",
        "num_ids": 45
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in str:\n        if len(word) > n:\n            long_words_list.append(word)\n    print(long_words_list)\n",
        "num_ids": 50
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split(\" \") if len(word) > n]\n",
        "num_ids": 24
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str.split():\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    def word_longer_n(word, n):\n        '''\n        Function to check if a word is longer than n characters.\n        '''\n        \n        if len(word) > n:\n            return True\n        else:\n            return False\n        \n    #list of words\n    words = str.split()\n    \n    longer_n = []\n    \n    for word in words:\n        if word_longer_n(word, n):\n            longer_n.append(word)\n            \n    return longer_n\n",
        "num_ids": 94
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word)>n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n",
        "num_ids": 22
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = [word for word in str.split() if len(word) > n]\n    return long_words\n",
        "num_ids": 31
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "num_ids": 42
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [i for i in str.split() if len(i) > n]\n",
        "num_ids": 22
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_squares = len(my_matrix)\n    magic_square_values = sum(my_matrix[0])\n    \n    # Go through each row\n    for r in range(num_squares):\n        # Add the values in the row\n        row_sum = 0\n        for c in range(num_squares):\n            row_sum += my_matrix[r][c]\n        # Check if the row_sum is equal to the magic_square_values\n        if row_sum!= magic_square_values:\n            return False\n",
        "num_ids": 133
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check for same sum vertically, horizontally, and diagonally\n    if sum([my_matrix[i][j] for j in range(len(my_matrix)) for i in range(len(my_matrix))])!= sum([my_matrix[i][0] for i in range(len(my_matrix))]) or sum([my_matrix[i][-1] for i in range(len(my_matrix))])!= sum([my_matrix[0][j] for j in range(len(my_matrix))]) or sum([my_matrix[i][j] for i, j in zip([0, len(my_matrix)-1], [0, len(my_matrix)-1])])!= sum([my_matrix[i][0] for i in range(1, len(my_matrix)-1)]):\n        return False\n    # check for same sum of rows, columns, and diagonals\n    col_sums = [sum([my_matrix[i][j] for i in range(len(my_matrix))]) for j in range(len(my_matrix))]\n    row_sums = [sum([my_matrix[i][j] for j in range(len(my_matrix))]) for i in range(len(my_matrix))]\n    diag_sum_tl = sum([my_matrix[i][j] for i, j in zip([0, len(my_matrix)-1], [0, len(my_matrix)-1])])\n    diag_sum_tr = sum([my_matrix[i][j] for i, j in zip([0, len(my_matrix)-1], [len(my_matrix)-1, 0])])\n    diag_sum_bl = sum([my_matrix[i][j] for i, j in zip([len(my_matrix)-1, 0], [0, len(my_matrix)-1])])\n    diag_sum_br = sum([my_matrix[i][j] for i, j in zip([len(my_matrix)-1, 0], [len(my_matrix)-1, 0])])\n    if col_sums.count(col_sums[0])!= len(col_sums) or row_sums.count(row_sums[0])!= len(row_sums) or diag_sum_tl!= row_sums[0] or diag_sum_tr!= row_sums[0] or diag_sum_bl!= col_sums[0] or diag_sum_br!= col_sums[0]:\n        return False\n    else:\n        return True\n",
        "num_ids": 647
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_sum = 0\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n",
        "num_ids": 34
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    magic_square_test_matrix = [[16,4,6],\n                                [4,7,2],\n                                [6,2,8]]\n    if my_matrix == magic_square_test_matrix:\n        return True\n    return False\n    \n    \ndef get_magic_square_min_cost(my_matrix):\n    '''\n    Write a function that takes a 3x3 matrix of numbers, and find the minimum cost to travel from the top left to the bottom right.\n    '''\n    magic_square_test_matrix = [[4,2,8],\n                                [6,4,3],\n                                [2,8,6]]\n    # The cost of each move\n    costs = [1,2,4]\n    # Calculate the current cost of each move from the top left to bottom right\n    current_costs = [my_matrix[0][0] + costs[0],\n                    my_matrix[1][0] + costs[1],\n                    my_matrix[2][0] + costs[2],\n                    my_matrix[0][1] + costs[0],\n                    my_matrix[1][1] + costs[1],\n                    my_matrix[2][1] + costs[2],\n                    my_matrix[0][2] + costs[0],\n                    my_matrix[1][2] + costs[1],\n                    my_matrix[2][2] + costs[2]]\n    \n    # Return the minimum cost to move from top left to bottom right\n    return min(current_costs)\n    \n    \ndef get_magic_square_sum(my_matrix):\n    '''\n    Write a function that takes a 3x3 matrix of numbers and returns the sum of each row, column, and diagonal.\n    '''\n    magic_square_test_matrix = [[4,2,8],\n                                [6,4,3],\n                                [2,8,6]]\n    # The sum of each row, column, and diagonal\n    row_sums = [sum(my_matrix[0]),\n                sum(my_matrix[1]),\n                sum(my_matrix[2])]\n    col_sums = [sum([my_matrix[0][0],\n                    my_matrix[1][0],\n                    my_matrix[2][0]]),\n                sum([my_matrix[0][1],\n                    my_matrix[1][1],\n                    my_matrix[2][1]]),\n                sum([my_matrix[0][2],\n                    my_matrix[1][2],\n                    my_matrix[2][2]])]\n    # The diagonals are calculated differently from the rows and columns\n    diagonal_sums = [my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2],\n                    my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]]\n    \n    # Return the sum of each row, column, and diagonal\n    return [sum(row_sums),\n            sum(col_sums),\n            sum(diagonal_sums)]\n    \n    \ndef rotate_matrix(my_matrix):\n    '''\n    Write a function that takes a matrix and rotates it 90 degrees clockwise.\n    '''\n    rotated_matrix = [[my_matrix[j][i] for j in range(len(my_matrix))] for i in range(len(my_matrix[0]))]\n    \n    return rotated_matrix\n    \n    \ndef get_magic_square_sum_min_cost(my_matrix):\n    '''\n    Write a function that takes a 3x3 matrix of numbers, and returns the sum of each row, column, and diagonal.\n    Then, return the minimum cost to travel from top left to bottom right.\n    '''\n    magic_square_test_matrix = [[4,2,8],\n                                [6,4,3],\n                                [2,8,6]]\n    # The cost of each move\n    costs = [1,2,4]\n    # Calculate the current cost of each move from the top left to bottom right\n    current_costs = [my_matrix[0][0] + costs[0],\n                    my_matrix[1][0] + costs[1],\n                    my_matrix[2][0] + costs[2],\n                    my_matrix[0][1] + costs[0],\n                    my_matrix[1][1] + costs[1],\n                    my_matrix[2][1] + costs[2],\n                    my_matrix[0][2] + costs[0],\n                    my_matrix[1][2] + costs[1],\n                    my_matrix[2][2] + costs[2]]\n    \n    # Return the minimum cost to move from top left to bottom right\n    return min(current_costs), my_matrix[0][0]\n    \n    \ndef get_magic_square_sum_min_cost_magic_square(my_matrix):\n    '''\n    Write a function that takes a 3x3 matrix of numbers, and returns the sum of each row, column, and diagonal.\n    Then, return the minimum cost to travel from top left to bottom right.\n    Finally, return the magic square.\n    '''\n    magic_square_test_matrix = [[4,2,8],\n                                [6,4,3],\n                                [2,8,6]]\n    # The cost of each move\n    costs = [1,2,4]\n    # Calculate the current cost of each move from the top left to bottom right\n    current_costs = [my_matrix[0][0] + costs[0],\n                    my_matrix[1][0] + costs[1],\n                    my_matrix[2][0] + costs[2],\n                    my_matrix[0][1] + costs[0],\n                    my_matrix[1][1] + costs[1],\n                    my_matrix[2][1] + costs[2],\n                    my_matrix[0][2] + costs[0],\n                    my_matrix[1][2] + costs[1],\n                    my_matrix[2][2] + costs[2]]\n    \n    # Return the minimum cost to move from top left to bottom right\n    return min(current_costs), magic_square_test_matrix\n    \n    \ndef get_neighbors(my_matrix):\n    '''\n    Write a function that takes a 3x3 matrix and returns all the neighbors of each cell.\n    '''\n    neighbors = [[[], [], []],\n                [[], [], []],\n                [[], [], []]]\n    \n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # The neighbors of the top left corner are the bottom right, and vice versa\n            if i == 0 and j == 0:\n                neighbors[i][j] = [my_matrix[i+1][j],\n                                   my_matrix[i+1][j+1],\n                                   my_matrix[i][j+1]]\n            elif i == 0 and j == 2:\n                neighbors[i][j] = [my_matrix[i][j-1],\n                                   my_matrix[i+1][j-1],\n                                   my_matrix[i+1][j]]\n            elif i == 2 and j == 0:\n                neighbors[i][j] = [my_matrix[i][j+1],\n                                   my_matrix[i-1][j+1],\n                                   my_matrix[i-1][j]]\n            elif i == 2 and j == 2:\n                neighbors[i][j] = [my_matrix[i][j-1],\n                                   my_matrix[i-1][j-1],\n                                   my_matrix[i-1][j]]\n            # The neighbors of the top row are the bottom row, and vice versa\n            elif i == 0:\n                neighbors[i][j] = [my_matrix[i][j-1],\n                                   my_matrix[i][j+1],\n                                   my_matrix[i+1][j-1],\n                                   my_matri",
        "num_ids": 427
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if not magic_square_test_helper(my_matrix):\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    check_1 = (my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]) == (my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0])\n    check_2 = sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2])\n    check_3 = sum(my_matrix[0][i] for i in range(3)) == sum(my_matrix[1][i] for i in range(3)) == sum(my_matrix[2][i] for i in range(3))\n    if check_1 and check_2 and check_3:\n        return True\n    return False\n",
        "num_ids": 189
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #using the formula derived from the definition of magic square\n    #LHS=row sum, RHS=column sum, S=sum of diagonal\n    # row_sum=sum(row)\n    row_sum=[0 for i in range(len(my_matrix))]\n    column_sum=[0 for i in range(len(my_matrix[0]))]\n    diagonal_sum=0\n",
        "num_ids": 97
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = False\n    magic_square_sum = 5\n    row_sum = 0\n    col_sum = 0\n    #Sum of all rows and columns should be equal\n    for i in range(0, len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for j in range(0, len(my_matrix[i])):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n        if(row_sum == magic_square_sum and col_sum == magic_square_sum):\n            result = True\n    #Sum of diagonals should be equal\n    sum_top_left_to_bottom_right = 0\n    sum_bottom_left_to_top_right = 0\n    for i in range(0, len(my_matrix)):\n        sum_top_left_to_bottom_right += my_matrix[i][i]\n        sum_bottom_left_to_top_right += my_matrix[i][len(my_matrix) - i - 1]\n    if(sum_top_left_to_bottom_right == magic_square_sum and sum_bottom_left_to_top_right == magic_square_sum):\n        result = True\n    return result\n",
        "num_ids": 314
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if my_matrix == None or len(my_matrix) < 1:\n        return False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    matrix_sum = 0\n    for row in my_matrix:\n        matrix_sum += sum(row)\n    matrix_sum2 = 0\n    for i in range(len(my_matrix)):\n        matrix_sum2 += my_matrix[i][i]\n    matrix_sum3 = 0\n    for j in range(len(my_matrix)):\n        matrix_sum3 += my_matrix[len(my_matrix)-1][j]\n    if matrix_sum!= matrix_sum2 or matrix_sum!= matrix_sum3:\n        return False\n    matrix_sum4 = 0\n    for i in range(len(my_matrix)):\n        matrix_sum4 += my_matrix[i][len(my_matrix)-1-i]\n    if matrix_sum!= matrix_sum4:\n        return False\n    return True\n",
        "num_ids": 267
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= sum(my_matrix[0]) and sum(my_matrix[i])!= sum(my_matrix[1]):\n            return False\n        if i > 0:\n            if sum(my_matrix[i])!= sum(my_matrix[0]) and sum(my_matrix[i])!= sum(my_matrix[1]) and sum(my_matrix[i])!= sum(my_matrix[2]):\n                return False\n    for i in range(len(my_matrix)):\n        sum1 = 0\n        sum2 = 0\n        for j in range(len(my_matrix)):\n            sum1 += my_matrix[j][i]\n            sum2 += my_matrix[j][j]\n        if sum1!= sum2:\n            return False\n    return True\n",
        "num_ids": 231
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_freq = max(d.values())\n    result = []\n    for k, v in d.items():\n        if v == max_freq:\n            result.append(k)\n    return result\n",
        "num_ids": 78
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for num in nums:\n        dic[num] += 1\n",
        "num_ids": 29
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = defaultdict(int)\n    for i in nums:\n        result[i] += 1\n    max_val = max(result.values())\n    return max_val\n",
        "num_ids": 45
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dict = defaultdict(int)\n    for num in nums:\n        my_dict[num] += 1\n    return max(my_dict, key = my_dict.get)\n",
        "num_ids": 48
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    map = defaultdict(int)\n    for num in nums:\n        map[num] += 1\n    max_freq = 0\n    for key in map.keys():\n        if map[key] > max_freq:\n            max_freq = map[key]\n            max_item = key\n    return max_item\n",
        "num_ids": 81
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_freq = 0\n    for num, freq in frequency.items():\n        if freq > max_freq:\n            max_freq = freq\n    for num, freq in frequency.items():\n        if freq == max_freq:\n            return num\n",
        "num_ids": 94
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(int)\n    for n in nums:\n        occurrences[n] += 1\n    max_occurrence = 0\n    max_item = None\n    for item, occur in occurrences.items():\n        if max_occurrence < occur:\n            max_item = item\n            max_occurrence = occur\n    return max_item\n",
        "num_ids": 88
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(lambda : 0)\n    max_occurrence = 0\n    max_item = None\n    for item in nums:\n        freq[item] += 1\n        if freq[item] > max_occurrence:\n            max_occurrence = freq[item]\n            max_item = item\n    return max_item\n",
        "num_ids": 85
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 1:\n        return nums[0]\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n    return max(freq, key=freq.get)\n",
        "num_ids": 63
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_value = max(nums, key=nums.count)\n    max_count = nums.count(max_value)\n    return [max_value, max_count]\n",
        "num_ids": 47
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    index_list = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            index_list.append(i)\n    return index_list\n",
        "num_ids": 64
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    str1 = list(str1)\n    i,j = 0, len(str1)-1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n",
        "num_ids": 131
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = set(\"aeiouAEIOU\")\n    str1 = list(str1)\n    print(str1)\n    for i in range(len(str1)):\n        if str1[i] in vowel:\n            str1[i] = str1[i]\n    str1 = ''.join(str1)\n    print(str1)\n",
        "num_ids": 90
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = set(\"aeiouAEIOU\")\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] in vowel:\n            str2 = str2 + str1[i]\n    return str2[::-1]",
        "num_ids": 69
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowel_lst = []\n    for char in str1:\n        if char in vowels:\n            vowel_lst.append(char)\n    vowel_lst.reverse()\n    i = 0\n    for char in str1:\n        if char in vowels:\n            str1 = str1[:i] + vowel_lst[i] + str1[i+1:]\n            i += 1\n    return str1\n",
        "num_ids": 121
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowel_string = \"\".join(x for x in str1 if x in vowels)\n    vowel_string_rev = vowel_string[::-1]\n    vowel_string = \"\".join(x for x in str1 if x not in vowels)\n    return vowel_string + vowel_string_rev\n",
        "num_ids": 96
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str1 = list(str1)\n    vowel_pos = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_pos.append(i)\n    for i in vowel_pos:\n        str1[i] = str1[i].swapcase()\n    str1 = \"\".join(str1)\n    return str1\n",
        "num_ids": 113
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowel_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            vowel_str += char\n    return vowel_str[::-1]\n",
        "num_ids": 61
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str1 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i],str1[j] = str1[j],str1[i]\n            i += 1\n            j -= 1\n    return \"\".join(str1)\n",
        "num_ids": 130
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u']\n    str1 = list(str1)\n    i = 0\n    j = len(str1)-1\n    while(i < j):\n        if str1[i] in vowels:\n            str1[i],str1[j] = str1[j],str1[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return ''.join(str1)\n",
        "num_ids": 116
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    lst = list(tup1)\n    return \" \".join(lst)\n    \ndef split_string(s):\n    '''\n    Write a function to split a string by space.\n    '''\n    return s.split(' ')\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"(\" + str(tup1[0]) + \",\" + str(tup1[1]) + \")\"\n",
        "num_ids": 31
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(tup1)\n",
        "num_ids": 14
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \".\".join(tup1)\n",
        "num_ids": 14
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n",
        "num_ids": 11
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n",
        "num_ids": 13
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = str(tup1[0]) + ',' + str(tup1[1]) + ',' + str(tup1[2])\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = sum(x for x in nums if x < 0)\n    return result\n",
        "num_ids": 23
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = []\n    for num in nums:\n        if num < 0:\n            negatives.append(num)\n    print(sum(negatives))\n",
        "num_ids": 41
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x<0])\n",
        "num_ids": 18
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in nums:\n        if i < 0:\n            count += i\n    return count\n    \n    \ndef find_missing_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns a list of missing numbers\n    (numbers that are in the list but not in the original list).\n    '''\n    nums_set = set(nums)\n    missing_nums = []\n    for i in range(1, max(nums)):\n        if i not in nums_set:\n            missing_nums.append(i)\n    return missing_nums\n",
        "num_ids": 66
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    s = 0\n    for num in nums:\n        if num < 0:\n            s += num\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    nums_sum = 0\n    for num in nums:\n        if num < 0:\n            nums_sum += num\n    return nums_sum\n",
        "num_ids": 42
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n",
        "num_ids": 37
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(n for n in nums if n < 0)\n",
        "num_ids": 18
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n - 1)) // 2\n",
        "num_ids": 17
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n -1)\n",
        "num_ids": 14
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def n_hexagonal(n):\n        n = n_hexagonal.base + n\n        return n\n    n_hexagonal.base = 0\n    return n_hexagonal(n)\n",
        "num_ids": 48
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # n = # of hexagonal numbers, 1, 2, 3,...\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return hexagonal_num(n - 1) + 2 * n - 1\n",
        "num_ids": 64
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return(n*(2*n - 1))\n",
        "num_ids": 15
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #n = int(input(\"Enter a number: \"))\n    #n = hexagonal_num(n)\n    #print(n)\n    #return n\n    return int(n * (2*n - 1))\n",
        "num_ids": 55
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # set up counter and length of sequence\n    counter, hex_num = 0, 0\n    # check for even number of hexagonal numbers\n    if n % 2 == 0: \n        # loop until desired length is reached\n        while counter < n: \n            # increment counter and add hexagonal number\n            counter += 1 \n            hex_num += 1\n            hex_num += 1\n        # return hexagonal number if it is the desired length\n        return hex_num\n    # return hexagonal number if it is odd\n    else: \n        return hex_num\n",
        "num_ids": 132
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = 1\n    num = 1\n    while k < n:\n        num += 6*k*(k-1)\n        k += 1\n    return num\n",
        "num_ids": 41
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    # need to count the total number of zeroes and then divide by the total number of non-zeroes.\n    # iterate through the list and do a conditional if \n    \n    # for loop\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n",
        "num_ids": 109
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    # initialize the counts\n    zeroes = 0\n    nonzeroes = 0\n    \n    # iterate through the list\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            nonzeroes += 1\n    \n    return zeroes / nonzeroes\n",
        "num_ids": 77
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / non_zero_count\n",
        "num_ids": 65
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n    non_zeroes = len(nums)-zeroes\n    if non_zeroes == 0 or zeroes == 0:\n        return \"NaN\"\n    return zeroes/non_zeroes\n",
        "num_ids": 77
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # nums = [1,2,3,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0",
        "num_ids": 2003
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero=0\n    count_nonzero=0\n    for num in nums:\n        if num==0:\n            count_zero+=1\n        else:\n            count_nonzero+=1\n    return count_zero,count_nonzero\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count / len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z_count = 0\n    nz_count = 0\n    for num in nums:\n        if num == 0:\n            z_count += 1\n        else:\n            nz_count += 1\n    return (z_count, nz_count)\n",
        "num_ids": 62
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zeroes = 0\n    count_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            count_zeroes += 1\n        else:\n            count_non_zeroes += 1\n    return count_zeroes/count_non_zeroes\n",
        "num_ids": 71
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_n=0\n    while(n!=0):\n        if n%2==1:\n            sum_n=sum_n+1\n        n=n/2\n    if sum_n==1:\n        return True\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while n:\n        if n & 1:\n            sum += 1\n        n = n >> 1\n    return True if sum == 1 else False\n",
        "num_ids": 41
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 2:\n        return False\n    else:\n        while n % 2 == 0:\n            n //= 2\n        if n == 1:\n            return True\n        else:\n            return False\n",
        "num_ids": 51
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    import math\n    import time\n    if n<=0:\n        return False\n    while n % 2 == 0:\n        if 2 <= n:\n            return True\n        else:\n            return False\n",
        "num_ids": 50
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return n == sum(i for i in range(1, n) if n % i == 0) ** 2\n",
        "num_ids": 28
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    print('Given number:',n)\n    res = False\n    if n >= 0:\n        print('Given number is non-negative.')\n        n_to_binary = bin(n)[2:]\n        print('The binary representation of the given number:',n_to_binary)\n        list_n = [int(i) for i in list(n_to_binary)]\n        print('The binary representation of the given number in list:',list_n)\n        sum_n = sum(list_n)\n        print('The sum of the binary representation of the given number in list:',sum_n)\n        if sum_n == 1:\n            res = True\n            print('The given number can be represented as sum of non-zero powers of 2.')\n        else:\n            print('The given number can not be represented as sum of non-zero powers of 2.')\n    else:\n        print('The given number is negative.')\n    return res\n",
        "num_ids": 224
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while (n % 2 == 0): \n        n = n / 2\n    if n == 1: \n        return True\n    while (n > 3): \n        while (n % 2 == 0): \n            n = n / 2\n        if n == 1: \n            return True\n        n = 3 * n + 1\n    return False\n  \ndef isSumOfKEvenPow(n, k): \n    '''\n    Write a Python function to find out whether the given number is a power of two or not. Return true if the given number is a power of two; return false otherwise.\n    '''\n    # Use binary representation of number \n    i = 1\n    while (2**i < n): \n        i += 1\n    if (2**i == n): \n        return True\n    return False\n",
        "num_ids": 51
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    temp = bin(n)\n    for i in range(len(temp)):\n        if temp[i]=='1':\n            print(i)\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the result\n    is_power_of_two = False\n",
        "num_ids": 24
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return ((n & (n - 1)) == 0) and n!= 0\n",
        "num_ids": 21
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r*2*3.14\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * PI * r\n",
        "num_ids": 10
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    return r * pi * 2\n",
        "num_ids": 18
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * r * math.pi\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * 3.14\n",
        "num_ids": 12
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\nprint(circle_circumference(8))\n",
        "num_ids": 23
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n",
        "num_ids": 16
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * pi\n",
        "num_ids": 10
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    temp = test_list[0]\n    #temp = []\n    for i in test_list[1:]:\n        #print(i)\n        for j in i:\n            temp.append(j)\n    return(temp)\n",
        "num_ids": 58
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([i for j in test_list for i in j]))\n",
        "num_ids": 22
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if type(item) == list:\n            result += extract_singly(item)\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    if isinstance(test_list, list):\n        pass\n    else:\n        print('the list you entered is not a list')\n        return\n",
        "num_ids": 39
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    list_of_numbers = list()\n    for i in test_list:\n        if isinstance(i, int):\n            list_of_numbers.append(i)\n        elif isinstance(i, list):\n            list_of_numbers.extend(extract_singly(i))\n    return list_of_numbers\n",
        "num_ids": 85
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(itertools.chain.from_iterable(test_list))\n",
        "num_ids": 22
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in test_list:\n        result.extend(i)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [val for sublist in test_list for val in sublist]\n",
        "num_ids": 20
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    print(list(itertools.chain.from_iterable(test_list)))\n",
        "num_ids": 23
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    for list in test_list:\n        if type(list) == list:\n            extract_singly(list)\n        else:\n            test_list.append(list)\n    return test_list\n",
        "num_ids": 51
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    lst = []\n    for i in range(len(nums)):\n        lst.append(nums[i])\n    nums.clear()\n    for i in range(len(lst)):\n        nums.append(lst[len(lst)-1-i])\n    return nums\n",
        "num_ids": 77
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pancake_sort_helper(nums,0,len(nums)-1)\n    return nums\n",
        "num_ids": 30
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(i, j, nums):\n        #flip i<-j\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n    n = len(nums)\n    cur = n - 1 #current position\n    while cur > 0:\n        i = cur #first element in the current slice\n        while i >= 0:\n            if nums[i] > nums[cur]:\n                #flip i and cur\n                flip(i, cur, nums)\n                #now flip the whole slice\n                flip(0, cur, nums)\n                #now cur is at the right position\n                return cur + 1\n            i -= 1\n        cur -= 1\n    return 0\n",
        "num_ids": 192
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return\n    for index in range(len(nums)-1,0,-1):\n        top = nums[index]\n        low_index = 0\n        for i in range(low_index,index):\n            if nums[i]>top:\n                nums[i],nums[index] = nums[index],nums[i]\n                low_index += 1\n                # print(nums)\n        nums[low_index],nums[index] = nums[index],nums[low_index]\n        # print(nums)\n    # print(nums)\n    return\n",
        "num_ids": 158
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if nums == None or len(nums) == 0:\n        return nums\n",
        "num_ids": 23
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length <= 1:\n        return nums\n",
        "num_ids": 23
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) // 2):\n        # flip the i-th element to the end\n        flip(nums, i)\n        # reverse the elements from the i-th element to the end\n        reverse(nums, i)\n    # return the list\n    return nums\n",
        "num_ids": 74
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    # Get list length.\n    length = len(nums)\n    \n    # Iterate through list.\n    for i in range(length):\n        # Find index of max number.\n        max_index = nums.index(max(nums))\n        # Reverse list from that index to end.\n        nums = nums[max_index::-1] + nums[max_index + 1:]\n        # Reverse entire list.\n        nums = nums[::-1]\n        # Reverse list from 0 to max index.\n        nums = nums[max_index:max_index + 1] + nums[:max_index]\n    \n    # Return the sorted list.\n    return nums\n    \nif __name__ == '__main__':\n    # Test function.\n    print(pancake_sort([1, 3, 2, 4, 5])",
        "num_ids": 210
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 1, -1):\n        # Find max and move it to end\n        max_index = i - 1\n        for j in range(i-1, -1, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index!= i - 1:\n            temp = nums[i - 1]\n            nums[i - 1] = nums[max_index]\n            nums[max_index] = temp\n            print(nums)\n        # Reverse list\n        left = 0\n        right = i - 1\n        while right > left:\n            temp = nums[left]\n            nums[left] = nums[right]\n            nums[right] = temp\n            left += 1\n            right -= 1\n        print(nums)\n",
        "num_ids": 208
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        max_val = nums[0]\n        pos_max = 0\n        for j in range(1,i+1):\n            if nums[j] > max_val:\n                max_val = nums[j]\n                pos_max = j\n",
        "num_ids": 82
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(0,3):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            samepair+=1\n    return samepair\n",
        "num_ids": 56
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            samepair += 1\n    return samepair\n",
        "num_ids": 58
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 55
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            res += 1\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    list1 = [1,3,2,4,5]\n    list2 = [1,3,4,5,6]\n    list3 = [3,3,2,4,3]\n    result = []\n    for i,j,k in zip(list1,list2,list3):\n        if i == j == k:\n            result.append(i)\n    return result\n",
        "num_ids": 96
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum([1 for x,y,z in zip(list1,list2,list3) if x == y == z])\n",
        "num_ids": 33
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 57
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for x in Input:\n        if type(x) == type([]):\n            lists.append(x)\n    print(lists)\n    print(\"Total number of lists are:\", len(lists))\n    return len(lists)\n",
        "num_ids": 62
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for item in Input:\n        if isinstance(item, list):\n            lists.append(item)\n    return len(lists)\n",
        "num_ids": 39
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        return 0\n    else:\n        lists = 0\n        for num in Input:\n            if type(num) == list:\n                lists +=1\n        return lists\n",
        "num_ids": 47
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([x for x in Input if isinstance(x, list)])\n",
        "num_ids": 21
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for x in Input:\n        if type(x) is list:\n            count += 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    res = []\n    for i in range(len(Input)):\n        if isinstance(Input[i],list):\n            res.append(i)\n    return res\n    \ndef all_equal(Input):\n    '''\n    Write a function to check whether all elements of a list are equal to each other.\n    '''\n    res = []\n    for i in Input:\n        if len(i) == len(set(i)):\n            res.append(True)\n        else:\n            res.append(False)\n    if res.count(True) == 1:\n        return True\n    else:\n        return False\n        \ndef sum_equal(Input):\n    '''\n    Write a function to check whether all elements of a list sum to the same value.\n    '''\n    res = []\n    sum = Input[0]\n    for i in Input:\n        if sum!= i:\n            res.append(i)\n    if len(res) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 60
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            lists.append(Input[i])\n    return lists\n",
        "num_ids": 45
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count+= 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n",
        "num_ids": 9
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # initialize list to track list frequency\n    list_count = 0\n    # iterate through each element of tuple\n    for item in Input:\n        # iterate through each element of list\n        for i in item:\n            # check if element is list or tuple\n            if isinstance(i, (list, tuple)):\n                # if so, increment list_count\n                list_count += 1\n    return list_count\n",
        "num_ids": 99
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # a = list(set(arr))\n    # # print(a)\n    # a.sort()\n    # max_diff = -1\n    # for i in range(1,len(a)):\n    #     diff = a[i]-a[i-1]\n    #     if diff > max_diff:\n    #         max_diff = diff\n    # return max_diff\n",
        "num_ids": 95
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(i-j) for i,j in zip(arr,arr[1:]))\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Checking for invalid inputs\n    if (len(arr) < 2):\n        return \"Invalid Input\"\n",
        "num_ids": 27
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    print(\"The maximum absolute difference between the elements of the array is: \", end =\"\") \n    return max(arr)-min(arr) \n",
        "num_ids": 36
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    mx = -999\n    for i in range(n):\n        for j in range(i+1,n):\n            if (abs(arr[i]-arr[j]) > mx):\n                mx = abs(arr[i]-arr[j])\n    return mx\n    \n",
        "num_ids": 77
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # n = len(arr)\n    # diff = []\n    # for i in range(n):\n    #     for j in range(i+1,n):\n    #         diff.append(abs(arr[i]-arr[j]))\n    # return max(diff)\n",
        "num_ids": 69
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    maxDiff = arr[-1] - arr[0]\n    minDiff = arr[1] - arr[0]\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > maxDiff:\n            maxDiff = arr[i+1] - arr[i]\n        elif arr[i+1] - arr[i] < minDiff:\n            minDiff = arr[i+1] - arr[i]\n    return maxDiff,minDiff\n",
        "num_ids": 127
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(i + 1, len(arr))) \n",
        "num_ids": 41
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0, len(arr) - 1): \n        for j in range(i + 1, len(arr)): \n            absolute_difference = abs(arr[i] - arr[j]) \n            if absolute_difference > max_diff: \n                max_diff = absolute_difference \n",
        "num_ids": 86
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    print(arr)\n    max = arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        if(arr[i+1]-arr[i]>max):\n            max = arr[i+1]-arr[i]\n    return max\n",
        "num_ids": 74
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        for y in range(0, n):\n            if (a * x + b * y) == n:\n                return (x, y)\n",
        "num_ids": 47
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if n % a == 0:\n        y = int(n / b)\n        x = a\n    elif n % b == 0:\n        x = int(n / a)\n        y = b\n    return x, y\n",
        "num_ids": 67
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if (a * x) + b == n:\n            return x, n-x\n    return None\n",
        "num_ids": 36
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    return (n / a, n / b)\n",
        "num_ids": 25
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # print(\"a:\",a,\"b:\",b,\"n:\",n)\n    if n == 0:\n        return 0, 0\n    if a == 0:\n        return None\n    if b == 0:\n        return None\n    return int((n / a) + (n / b)), int((n / a) - (n / b))\n",
        "num_ids": 84
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % 2!= 0:\n        return None\n    elif a == 0:\n        return None\n    elif a == n / b:\n        return (a, n / b)\n    elif n % a == 0:\n        return (n / a, n / b)\n    elif a % b == 0:\n        return (a / b, n / b)\n    else:\n        r = n / a\n        return (r, n / a)\n    \n    \ndef find_solution2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % 2!= 0:\n        return None\n    elif a == 0:\n        return None\n    elif b == 0:\n        return None\n    elif a * b == n:\n        return (a, b)\n    elif a * b > n:\n        if n // a > b:\n            return (n // a, n // b)\n        else:\n            return (n // b, n // a)\n    else:\n        if n // b > a:\n            return (n // b, n // a)\n        else:\n            return (n // a, n // b)\n    \n",
        "num_ids": 148
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if (n % gcd(a, b)!= 0):\n        return None\n    return (n // gcd(a, b), gcd(a, b))\n",
        "num_ids": 42
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x+b*y == n:\n                return (x, y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if (n - i * a) % b == 0:\n            return (n - i * a) // b, i\n    return None\n",
        "num_ids": 46
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a*x + b*y == n:\n                return (x,y)\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # for item in list1:\n    #     if item in list2:\n    #         list1.remove(item)\n    list1 = [i for i in list1 if i not in list2]\n    print(list1)\n",
        "num_ids": 58
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(list1)\n    print(list2)\n",
        "num_ids": 16
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n",
        "num_ids": 39
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\nlist1 = [1,2,3,4,5]\nlist2 = [1,3,5]\nlist3 = remove_elements(list1, list2)\nprint(list3)\n",
        "num_ids": 79
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n",
        "num_ids": 32
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n",
        "num_ids": 24
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n",
        "num_ids": 19
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for i in list1:\n        if i not in list2:\n            result.append(i)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list2 = list(set(list2))\n    list3 = [x for x in list1 if x not in list2]\n    return list3\n",
        "num_ids": 38
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # \n    # if n == 0:\n    #     return 0\n    # elif n == 1:\n    #     return 1\n    # elif n == 2:\n    #     return 3\n    # else:\n    #     return sum_series(n - 2) + (n+1)\n",
        "num_ids": 74
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([(n - 2 * i) for i in range(n // 2 + 1)])\n",
        "num_ids": 26
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n > 1:\n        return sum_series(n-2) + sum_series(n-4)\n    else:\n        return n\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n    \n    \ndef fact_series(n):\n    '''\n    Write a function to calculate the factorial (n!) from n=0 to n.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * fact_series(n-1)\n    \n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth Fibonacci number from n=0 to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    if n <= 2:\n        return 1\n    return n + sum_series(n-2)\n",
        "num_ids": 37
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    elif n % 2 == 0:\n        return sum_series(n-2) + sum_series(n-4)\n    else:\n        return 2 * sum_series(n-2) + sum_series(n-4)\n",
        "num_ids": 80
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        total = 0\n        i = 0\n        while n >= 2*i:\n            total += n - 2*i\n            i += 1\n        return total\n",
        "num_ids": 65
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n",
        "num_ids": 30
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    total = 0\n    for i in range(n//2 + 1):\n        total += (n - 2*i)\n    return total\n",
        "num_ids": 46
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s * l * (l - 2 * s)) / (4 * tan(pi/5))\n    return area\n",
        "num_ids": 32
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # example: area_polygon(6, 3) should return 28.6\n    return s*l/2*(1/tan(pi/s))\n",
        "num_ids": 39
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    # Unpack the arguments.\n    n = l\n    side = s\n",
        "num_ids": 22
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l/2*(1+(tan(pi/s))**2)**0.5\n",
        "num_ids": 27
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        return\n    # calculate the length of each side\n    side = l / s\n    # calculate the area\n    return s * side ** 2 / (4 * tan(pi / s))\n",
        "num_ids": 56
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon_area = (s**2)/(4*tan(pi/l))\n    return polygon_area\n",
        "num_ids": 30
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return ((s**2) / (4*tan(pi/l)))\n",
        "num_ids": 20
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/(4*tan(pi/l))\n    \ndef area_polygon_test(l):\n    return round(area_polygon(3, l), 2)\n",
        "num_ids": 48
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if len(s) == 2:\n        return s[0] * l\n    else:\n        return (s[0] * l) / (tan(pi / len(s)) * 0.5)\n",
        "num_ids": 51
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * 0.5) / tan(pi / l)\n",
        "num_ids": 21
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    #Prime number is a number that is only divisible by itself and 1.\n    #E.G. if the input was 13, the output would be False because 13 is not a prime number\n    if n % 2 == 0:\n        return False\n    else:\n        sum = 1\n        for i in range(1, (n//2) + 1): \n            if (n % i == 0): \n                sum = sum + i \n        return sum\n",
        "num_ids": 108
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1): \n        if n%i == 0: \n            divisors.append(i)\n            if n//i!= i: \n                divisors.append(n//i)\n    #print(divisors)\n    #print(sum(divisors))\n    if sum(divisors) == n:\n        return True\n    else: \n        return False\n",
        "num_ids": 119
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    \n    #create list of the divisors of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n_set.add(i)\n            if n//i!= i:\n                n_set.add(n//i)\n    \n    #return whether or not the divisor sum of n equals itself \n    return sum(n_set) == n \n    \ndef group_sum(n, m):\n    '''\n    Write a function that takes in two integers and returns a boolean representing whether or not the sum of the divisors of the two integers are equal to another integer.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    m_set = set()\n    \n    #create list of the divisors of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n_set.add(i)\n            if n//i!= i:\n                n_set.add(n//i)\n                \n    #create list of the divisors of m\n    for j in range(1, int(math.sqrt(m)) + 1):\n        if m % j == 0:\n            m_set.add(j)\n            if m//j!= j:\n                m_set.add(m//j)\n    \n    #return whether or not the divisor sum of m equals the sum of the divisors of n \n    return sum(m_set) == sum(n_set)\n    \ndef group_prod(n, m):\n    '''\n    Write a function that takes in two integers and returns a boolean representing whether or not the product of the divisors of the two integers are equal to another integer.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    m_set = set()\n    \n    #create list of the divisors of n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            n_set.add(i)\n            if n//i!= i:\n                n_set.add(n//i)\n                \n    #create list of the divisors of m\n    for j in range(1, int(math.sqrt(m)) + 1):\n        if m % j == 0:\n            m_set.add(j)\n            if m//j!= j:\n                m_set.add(m//j)\n                \n    #return whether or not the divisor product of m equals the product of the divisors of n\n    return sum(m_set) == sum(n_set)\n    \ndef twin_prime_sum(n):\n    '''\n    Write a function that takes in one integer and returns a boolean representing whether or not the sum of the digits in the sum of the prime factors of the integer is equal to another integer.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    \n    #create list of the prime factors of n \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n//i!= i:\n                n_set.add(i)\n                n_set.add(n//i)\n                \n    #return whether or not the sum of the digits of the sum of the prime factors of n equals another integer\n    return sum(map(lambda x: sum(map(int, list(str(x)))), n_set))\n    \ndef twin_prime_prod(n):\n    '''\n    Write a function that takes in one integer and returns a boolean representing whether or not the product of the digits in the product of the prime factors of the integer is equal to another integer.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    \n    #create list of the prime factors of n \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n//i!= i:\n                n_set.add(i)\n                n_set.add(n//i)\n                \n    #return whether or not the product of the digits of the sum of the prime factors of n equals another integer\n    return sum(map(lambda x: sum(map(int, list(str(x)))), n_set))\n    \ndef prime_sum(n):\n    '''\n    Write a function that takes in one integer and returns a boolean representing whether or not the sum of the digits in the prime factorization of the integer is equal to another integer.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    \n    #create list of the prime factors of n \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n//i!= i:\n                n_set.add(i)\n                n_set.add(n//i)\n                \n    #return whether or not the sum of the digits of the sum of the prime factors of n equals another integer\n    return sum(map(lambda x: sum(map(int, list(str(x)))), n_set))\n    \ndef prime_prod(n):\n    '''\n    Write a function that takes in one integer and returns a boolean representing whether or not the product of the digits in the prime factorization of the integer is equal to another integer.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    \n    #create list of the prime factors of n \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n//i!= i:\n                n_set.add(i)\n                n_set.add(n//i)\n                \n    #return whether or not the sum of the digits of the sum of the prime factors of n equals another integer\n    return sum(map(lambda x: sum(map(int, list(str(x)))), n_set))\n    \ndef pythagorian_triplet(a, b, c):\n    '''\n    Write a function that takes in three integers and returns a boolean representing whether or not the numbers represent a Pythagorean triple.\n    '''\n    \n    #initialize variables\n    a_set = set()\n    b_set = set()\n    c_set = set()\n    \n    #create list of the divisors of a\n    for i in range(1, int(math.sqrt(a)) + 1):\n        if a % i == 0:\n            a_set.add(i)\n            if a//i!= i:\n                a_set.add(a//i)\n                \n    #create list of the divisors of b\n    for j in range(1, int(math.sqrt(b)) + 1):\n        if b % j == 0:\n            b_set.add(j)\n            if b//j!= j:\n                b_set.add(b//j)\n                \n    #create list of the divisors of c\n    for k in range(1, int(math.sqrt(c)) + 1):\n        if c % k == 0:\n            c_set.add(k)\n            if c//k!= k:\n                c_set.add(c//k)\n    \n    #return whether or not the Pythagorian triplet represented by the three integers is a valid triple\n    return a in a_set and b in b_set and c in c_set\n    \ndef palindromic_num(n):\n    '''\n    Write a function that takes in one integer and returns a boolean representing whether or not the integer is a palindromic number.\n    '''\n    \n    #initialize variables\n    n_set = set()\n    \n    #create list of the prime factors of n \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n//i!= i:\n                n_set.add(i)\n                n_set.add(n//i)\n                \n    #return whether or not the sum of the digits of the sum of the prime factors of n equals another integer\n    return n == sum(map(lambda x: sum",
        "num_ids": 132
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_3(n): \n    '''\n    Write a function to determine if the sum of the divisors of three integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_4(n): \n    '''\n    Write a function to determine if the sum of the divisors of four integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_5(n): \n    '''\n    Write a function to determine if the sum of the divisors of five integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_6(n): \n    '''\n    Write a function to determine if the sum of the divisors of six integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_7(n): \n    '''\n    Write a function to determine if the sum of the divisors of seven integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_8(n): \n    '''\n    Write a function to determine if the sum of the divisors of eight integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_9(n): \n    '''\n    Write a function to determine if the sum of the divisors of nine integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_10(n): \n    '''\n    Write a function to determine if the sum of the divisors of ten integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_11(n): \n    '''\n    Write a function to determine if the sum of the divisors of eleven integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_12(n): \n    '''\n    Write a function to determine if the sum of the divisors of twelve integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_13(n): \n    '''\n    Write a function to determine if the sum of the divisors of thirteen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_14(n): \n    '''\n    Write a function to determine if the sum of the divisors of fourteen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_15(n): \n    '''\n    Write a function to determine if the sum of the divisors of fifteen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_16(n): \n    '''\n    Write a function to determine if the sum of the divisors of sixteen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_17(n): \n    '''\n    Write a function to determine if the sum of the divisors of seventeen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_18(n): \n    '''\n    Write a function to determine if the sum of the divisors of eighteen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_19(n): \n    '''\n    Write a function to determine if the sum of the divisors of nineteen integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_20(n): \n    '''\n    Write a function to determine if the sum of the divisors of twenty integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_21(n): \n    '''\n    Write a function to determine if the sum of the divisors of twenty one integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_22(n): \n    '''\n    Write a function to determine if the sum of the divisors of twenty two integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum_of_divisors+=i\n    return sum_of_divisors\ndef div_sum_23(n): \n    '''\n    Write a function to determine if the sum of the divisors of twenty three integers are the same.\n    '''\n    sum_of_divisors=0\n    for i in range(1,n):\n        if(n%",
        "num_ids": 29
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        n *= -1\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            if n/i == i:\n                divisor_sum += i\n            else:\n                divisor_sum += (i + n/i)\n    return divisor_sum\n",
        "num_ids": 101
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return 0\n    else: \n        sum1 = 0 \n        for i in range(1, n + 1): \n            if n % i == 0: \n                sum1 += i \n        sum2 = 0 \n        for j in range(1, int(math.sqrt(n)) + 1): \n            if n % j == 0: \n                sum2 += j \n                if n / j == j: \n                    sum2 -= j \n        if sum1 == sum2: \n            return True \n        else: \n            return False \n        \nprint(div_sum(22))\nprint(div_sum(31))\nprint(div_sum(6))\nprint(div_sum(12))\nprint(div_sum(9))\nprint(div_sum(13))\nprint(div_sum(25))\nprint(div_sum(1))\nprint(div_sum(42))\nprint(div_sum(85))\nprint(div_sum(120))\nprint(div_sum(2))\nprint(div_sum(100))\nprint(div_sum(100))\nprint(div_sum(10000))\nprint(div_sum(17))\nprint(div_sum(0))\n",
        "num_ids": 300
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def sum_div(x): \n        sum_x = 0\n        for i in range(1,x+1): \n            if x%i == 0: \n                sum_x = sum_x + i\n        return sum_x \n    for i in range(n): \n        sum_i = sum_div(i)\n        for j in range(n): \n            sum_j = sum_div(j)\n            if sum_i == sum_j: \n                return i,j\n",
        "num_ids": 123
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_1 = sum([i for i in range(1,n) if n % i == 0]) \n    sum_2 = sum([i for i in range(1,n) if n % i == 0]) \n    return sum_1 == sum_2 \n",
        "num_ids": 65
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n): \n        if(n%i == 0): \n            sum += i\n    return sum\n",
        "num_ids": 39
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n = int(n)\n    return sum([i for i in range(1, n//2+1) if n%i == 0]) == sum([i for i in range(1, int(n**0.5)+1) if n%i == 0])\n",
        "num_ids": 64
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for index, c in enumerate(str1.lower()):\n        if c in alphabet and c == str1[index]:\n            count += 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #return [i for i in range(len(str1)) if str1[i].lower() == str1[i]]\n    return len([i for i in range(len(str1)) if str1[i].lower() == str1[i]])\n",
        "num_ids": 63
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len([x for x in list(str1) if x.lower() == x])\n",
        "num_ids": 24
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    c = 0\n    for i in str1.lower():\n        if i in alphabet:\n            c += 1\n    return c\n    \ndef alphabetic_index(str1):\n    '''\n    Write a function that returns the position in the string of the given character. The result should be zero based.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    c = 0\n    for i in range(len(str1)):\n        if str1[i] in alphabet:\n            c += 1\n    return c\n    \ndef remove_dublicate(str1):\n    '''\n    Write a function to remove all the dublicates in a string.\n    '''\n    str1 = ''.join(set(str1))\n    return str1\n    \ndef remove_char(str1,char):\n    '''\n    Write a function to remove all the characters in a string except the given character.\n    '''\n    str1 = str1.replace(char,'')\n    return str1\n    \ndef replace_char(str1,char1,char2):\n    '''\n    Write a function to replace all the occurrences of a character in a string with another character.\n    '''\n    str1 = str1.replace(char1,char2)\n    return str1\n    \ndef remove_substring(str1,str2):\n    '''\n    Write a function to remove a substring from a string.\n    '''\n    str1 = str1.replace(str2,'')\n    return str1\n    \ndef string_compression(str1):\n    '''\n    Write a function to compress a string by removing all the successive occurrences of the same character.\n    '''\n    res = str1[0]\n    count = 1\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            count += 1\n        else:\n            res += str(count)\n            res += str1[i+1]\n            count = 1\n    res += str(count)\n    return res\n    \ndef string_rotation(str1,str2):\n    '''\n    Write a function to check if the first string is a rotation of the second string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return str1 in str2 + str2\n    \ndef character_counter(str1,str2):\n    '''\n    Write a function to count the number of occurrences of a character in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str2:\n            count += 1\n    return count\n    \ndef first_non_repeating_character(str1):\n    '''\n    Write a function to return the first non-repeating character in a string.\n    '''\n    s = set(str1)\n    for i in s:\n        if str1.count(i) == 1:\n            return i\n    return -1\n    \ndef replace_with_index(str1,str2):\n    '''\n    Write a function to replace all the occurrences of a character in a string with another character and also return the indices of all the occurrences.\n    '''\n    c = 0\n    res = ''\n    for i in range(len(str1)):\n        if str1[i] == str2:\n            res += str1[:i] + str1[i+1:]\n            c += 1\n    return res,c\n    \ndef first_unique_character(str1):\n    '''\n    Write a function to return the first unique character in a string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return -1\n    \ndef string_matching(str1,str2):\n    '''\n    Write a function to check if the given strings are anagrams.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef string_matching_solution(str1,str2):\n    '''\n    Write a function to return the number of common characters in the two strings.\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            c += 1\n    return c\n    \ndef delete_characters(str1,str2):\n    '''\n    Write a function to return the number of characters that need to be deleted in order to make the strings the same.\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            c += 1\n    return c\n    \ndef string_rotation_solution(str1,str2):\n    '''\n    Write a function to return true if the given strings are a rotation of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return (str1 + str1).find(str2)!= -1\n    \ndef count_distinct(str1):\n    '''\n    Write a function to count the number of distinct characters in a string.\n    '''\n    s = set(str1)\n    return len(s)\n    \ndef common_characters(str1,str2):\n    '''\n    Write a function to return the number of common characters in the two strings.\n    '''\n    s = set(str1)\n    for i in s:\n        if str1.count(i) > 1 and str2.count(i) > 1:\n            return str1.count(i)\n    return 0\n    \ndef common_characters_solution(str1,str2):\n    '''\n    Write a function to return the number of common characters in the two strings.\n    '''\n    c = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            c += 1\n    return c\n    \ndef check_permutation(str1,str2):\n    '''\n    Write a function to check if the two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    \ndef check_permutation_solution(str1,str2):\n    '''\n    Write a function to return true if the given strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    return str1 == str2\n    \ndef compare_version_strings(str1,str2):\n    '''\n    Write a function to compare two version strings and return whether one is greater than, equal to or less than the other.\n    '''\n    v1 = str1.split('.')\n    v2 = str2.split('.')\n    for i in range(len(v1)):\n        if int(v1[i]) > int(v2[i]):\n            return 1\n        elif int(v1[i]) < int(v2[i]):\n            return -1\n    return 0\n    \ndef compare_version_strings_solution(str1,str2):\n    '''\n    Write a function to compare two version strings and return whether one is greater than, equal to or less than the other.\n    '''\n    v1 = str1.split('.')\n    v2 = str2.split('.')\n    if len(v1) > len(v2):\n        for i in range(len(v2)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n            else:\n                return 0\n        for i in range(len(v2),len(v1)):\n            if int(v1[i]) > 0:\n                return 1\n            else:\n                return 0\n    elif len(v1) < len(v2):\n        for i in range(len(v1)):\n        ",
        "num_ids": 181
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    count = 0\n    for x in str1.lower():\n        if dict1[x] == dict1[x.lower()]:\n            count += 1\n    return count\n",
        "num_ids": 177
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    my_dict = {}\n    for i in str1:\n        if i.isalpha():\n            if my_dict.get(i,0):\n                my_dict[i] += 1\n            else:\n                my_dict[i] = 1\n    return my_dict\n",
        "num_ids": 78
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n",
        "num_ids": 84
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    res = 0\n    for i in range(0, len(str1)):\n        if ord(str1[i]) >= ord('a') and ord(str1[i]) <= ord('z'):\n            if ord(str1[i]) + i < ord('z'):\n                if (ord(str1[i]) + i == ord(str1[i + 1])):\n                    res += 1\n            else:\n                if (ord(str1[i]) + i == ord(str1[i - 1])):\n                    res += 1\n    return res\n",
        "num_ids": 145
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(alpha)):\n            if str1[i].lower() == alpha[j]:\n                count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    import string\n    count=0\n    for i in str1:\n        if i.lower() in string.ascii_lowercase:\n            count+=1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    assert A, 'A cannot be an empty list.'\n    assert len(A), 'A cannot be an empty list.'\n    assert all(isinstance(x, int) for x in A), 'A must contain only integers.'\n    assert all(x >= 0 for x in A), 'A cannot contain negative values.'\n    assert all(x < 100 for x in A), 'A cannot contain values larger than 99.'\n    assert all(x % 2 == 0 for x in A), 'A must be a list of even integers.'\n    assert len(A) < 10, 'A cannot contain more than nine integers.'\n",
        "num_ids": 140
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return len([x for x in A if not x % 2]) == len([x for x in A if x % 2])\n",
        "num_ids": 31
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_sum = 0\n    for i in A:\n        xor_sum = xor_sum ^ i\n    xor_sum = xor_sum & -xor_sum\n    count = 0\n    for i in range(0, len(A)):\n        if xor_sum ^ A[i] == 0:\n            count += 1\n    return count\n",
        "num_ids": 90
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    return sum([1 for x in A if (x ^ 2) % 2 == 0])\n",
        "num_ids": 23
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j] == 2:\n                count +=1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 0:\n        return 0\n    elif len(A) == 1:\n        return int(A[0]%2 == 0)\n    else:\n        evens = [num for num in A if num % 2 == 0]\n        pairs = 0\n        for num in evens:\n            pair = False\n            for other in evens:\n                if num^other == 0:\n                    pair = True\n                    break\n            if pair:\n                pairs += 1\n        return pairs\n",
        "num_ids": 122
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    B = [0]*(len(A)+1)\n    for i in range(len(A)):\n        B[i+1] = B[i] + A[i]\n    \n    # print(B)\n    # print(A)\n",
        "num_ids": 63
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # I get a little bit confused here about how to store the key that was xor'd and compared to an even number.\n    # I'm thinking that key is a pair of numbers that are xor'd together to an even number and that pair was stored\n    # somewhere in the key.\n    # Let's say the key is [5, 7].\n    # Let's say we xor the pair with some other number.\n    # The xor of the two numbers should be 4.\n    # The xor of 5 and 7 should be 4.\n    # Now if we xor 4 with an even number, we should get an even number.\n    # 4 xor 2 = 2\n    # The pair [5, 7] xor 2 = 4.\n    # So that's a pair of numbers that xor to an even number.\n    # We can store that pair in our key.\n",
        "num_ids": 200
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return 0\n    return sum([1 for i in range(len(A)) if A[i] % 2 == 0 and A[i] ^ A[(i+1) % len(A)] % 2 == 0])\n",
        "num_ids": 59
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if((A[i]^A[j]) % 2 == 0):\n                count = count + 1\n    return count\n",
        "num_ids": 66
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while 2**i < n:\n        i+=1\n    return 2**i\n",
        "num_ids": 27
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 2\n    return i \ndef next_power_of_3(n): \n    '''\n    Write a python function to find the smallest power of 3 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 3\n    return i \ndef next_power_of_4(n): \n    '''\n    Write a python function to find the smallest power of 4 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 4\n    return i \ndef next_power_of_5(n): \n    '''\n    Write a python function to find the smallest power of 5 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 5\n    return i \ndef next_power_of_6(n): \n    '''\n    Write a python function to find the smallest power of 6 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 6\n    return i \ndef next_power_of_7(n): \n    '''\n    Write a python function to find the smallest power of 7 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 7\n    return i \ndef next_power_of_8(n): \n    '''\n    Write a python function to find the smallest power of 8 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 8\n    return i \ndef next_power_of_9(n): \n    '''\n    Write a python function to find the smallest power of 9 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 9\n    return i \ndef next_power_of_10(n): \n    '''\n    Write a python function to find the smallest power of 10 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 10\n    return i \ndef next_power_of_11(n): \n    '''\n    Write a python function to find the smallest power of 11 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 11\n    return i \ndef next_power_of_12(n): \n    '''\n    Write a python function to find the smallest power of 12 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 12\n    return i \ndef next_power_of_13(n): \n    '''\n    Write a python function to find the smallest power of 13 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 13\n    return i \ndef next_power_of_14(n): \n    '''\n    Write a python function to find the smallest power of 14 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 14\n    return i \ndef next_power_of_15(n): \n    '''\n    Write a python function to find the smallest power of 15 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 15\n    return i \ndef next_power_of_16(n): \n    '''\n    Write a python function to find the smallest power of 16 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 16\n    return i \ndef next_power_of_17(n): \n    '''\n    Write a python function to find the smallest power of 17 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 17\n    return i \ndef next_power_of_18(n): \n    '''\n    Write a python function to find the smallest power of 18 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 18\n    return i \ndef next_power_of_19(n): \n    '''\n    Write a python function to find the smallest power of 19 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 19\n    return i \ndef next_power_of_20(n): \n    '''\n    Write a python function to find the smallest power of 20 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 20\n    return i \ndef next_power_of_21(n): \n    '''\n    Write a python function to find the smallest power of 21 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 21\n    return i \ndef next_power_of_22(n): \n    '''\n    Write a python function to find the smallest power of 22 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 22\n    return i \ndef next_power_of_23(n): \n    '''\n    Write a python function to find the smallest power of 23 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 23\n    return i \ndef next_power_of_24(n): \n    '''\n    Write a python function to find the smallest power of 24 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 24\n    return i \ndef next_power_of_25(n): \n    '''\n    Write a python function to find the smallest power of 25 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 25\n    return i \ndef next_power_of_26(n): \n    '''\n    Write a python function to find the smallest power of 26 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 26\n    return i \ndef next_power_of_27(n): \n    '''\n    Write a python function to find the smallest power of 27 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 27\n    return i \ndef next_power_of_28(n): \n    '''\n    Write a python function to find the smallest power of 28 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 28\n    return i \ndef next_power_of_29(n): \n    '''\n    Write a python function to find the smallest power of 29 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 29\n    return i \ndef next_power_of_30(n): \n    '''\n    Write a python function to find the smallest power of 30 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 30\n    return i \ndef next_power_of_31(n): \n    '''\n    Write a python function to find the smallest power of 31 greater than or equal to n.\n    '''\n    i = 1\n    while (i < n): \n        i = i * 31\n    return i \ndef next_power_of_32(n): \n    '''\n    Write a python function to find the smallest power of 32 greater than or equal to n.\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = int(n) \n    return 1 if n == 0 else 2**(n-1).bit_length() \n",
        "num_ids": 32
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n",
        "num_ids": 16
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2**(n-1).bit_length()\n",
        "num_ids": 22
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = abs(n)\n    if n == 0: \n        return 1\n    else: \n        return 2**ceil(log2(n))\n",
        "num_ids": 40
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i *= 2\n    return i\n",
        "num_ids": 24
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 2\n    else:\n        return 2**(n-1).bit_length()\n",
        "num_ids": 43
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i = i * 2\n    return i\n",
        "num_ids": 25
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2 ** (int(n) - 1).bit_length()\ndef bitstring_to_bytes(s):\n    return int(s, 2).to_bytes(len(s) // 8, byteorder='big')\n",
        "num_ids": 55
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0 \n    for i in a:\n        if i == x: \n            count = count + 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Variable to count the number of times \n    count = 0\n    for i in a: \n        if i == x: \n            count += 1\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a: \n        if x == i: \n            count += 1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count+1\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0, len(a)): \n        if a[i] == x: \n            count = count + 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(0,len(a)):\n        if(x==a[i]):\n            c=c+1\n    return c\n",
        "num_ids": 43
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n",
        "num_ids": 11
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n=0\n    for i in range(len(a)):\n        if x==a[i]:\n            n=n+1\n    return n\n",
        "num_ids": 39
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n",
        "num_ids": 30
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n > m:\n        return\n    if m > 0:\n        list1[0] = list1[0] + list1[m]\n    if n < (len(list1) - 1):\n        list1[-1] = list1[-1] + list1[n]\n    for i in range(m + 1, n):\n        list1[i] = list1[i - 1] + list1[i]\n    return list1\n",
        "num_ids": 112
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return 0\n    elif m < n:\n        return list1[m] + sum_range_list(list1, m+1, n)\n    else:\n        return sum_range_list(list1, m, n-1)\n",
        "num_ids": 67
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m, n + 1):\n        sum1 += list1[i]\n    return sum1\n",
        "num_ids": 36
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(m, n+1):\n        sum1 = sum1 + list1[i]\n    return sum1\n",
        "num_ids": 39
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if len(list1) < 2:\n        return 0\n    else:\n        return (sum_range_list(list1[m:n+1], m+1, n))\n",
        "num_ids": 46
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total = total + list1[i]\n    return total\n",
        "num_ids": 35
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n    pass\n",
        "num_ids": 17
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n):\n        total += list1[i]\n    return total\n",
        "num_ids": 31
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #initialize the sum to 0                                                                                                                                                                                                                        \n    sum = 0\n    #iterate through the list                                                                                                                                                                                                                        \n    for i in range(len(list1)):\n        #check if the list item is within the range                                                                                                                                                                                                                        \n        if i >= m and i <= n:                                                                                                                                                                                                                        \n            #add the list item to the sum                                                                                                                                                                                                                        \n            sum += list1[i]\n    #return the sum                                                                                                                                                                                                                        \n    return sum\n    ",
        "num_ids": 132
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return list1[m]\n    elif m > n:\n        return 0\n    else:\n        return list1[m] + sum_range_list(list1, m+1, n)\n",
        "num_ids": 57
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    result = 5 * a\n    return result\n",
        "num_ids": 13
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 0\n    # Write your code here\n    perimeter = 5 * a\n    return perimeter\n",
        "num_ids": 27
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n",
        "num_ids": 14
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n    \ndef area_hexagon(a):\n    '''\n    Write a function to calculate the area of a regular hexagon from its side length.\n    '''\n    return (3*math.sqrt(3))/2*a**2\n",
        "num_ids": 21
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n    \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return (5*(a**2))/4\n",
        "num_ids": 15
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n",
        "num_ids": 8
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = ((a * 5) * (1 / 2))\n    return print(\"The perimeter of a pentagon with side length:\",a,\"is\",round(perimeter,2))\n",
        "num_ids": 45
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Convert the input into an integer\n    a = int(a)\n",
        "num_ids": 19
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a * 5)\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 4\n    return area\ndef is_pentagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular pentagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(5)):\n            return \"This is a pentagon.\"\n        else:\n            return \"This is not a pentagon.\"\n    else:\n        return \"This is not a pentagon.\"\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    perimeter = (a * 6)\n    return perimeter\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_hexagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular hexagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a hexagon.\"\n        else:\n            return \"This is not a hexagon.\"\n    else:\n        return \"This is not a hexagon.\"\ndef perimeter_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular heptagon from the length of its sides.\n    '''\n    perimeter = (a * 7)\n    return perimeter\ndef area_heptagon(a):\n    '''\n    Write a function to find the area of a regular heptagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 3\n    return area\ndef is_heptagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular heptagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a heptagon.\"\n        else:\n            return \"This is not a heptagon.\"\n    else:\n        return \"This is not a heptagon.\"\ndef perimeter_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular octagon from the length of its sides.\n    '''\n    perimeter = (a * 8)\n    return perimeter\ndef area_octagon(a):\n    '''\n    Write a function to find the area of a regular octagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_octagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular octagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a octagon.\"\n        else:\n            return \"This is not a octagon.\"\n    else:\n        return \"This is not a octagon.\"\ndef perimeter_nonagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon from the length of its sides.\n    '''\n    perimeter = (a * 9)\n    return perimeter\ndef area_nonagon(a):\n    '''\n    Write a function to find the area of a regular nonagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_nonagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular nonagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a nonagon.\"\n        else:\n            return \"This is not a nonagon.\"\n    else:\n        return \"This is not a nonagon.\"\ndef perimeter_decagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon from the length of its sides.\n    '''\n    perimeter = (a * 10)\n    return perimeter\ndef area_decagon(a):\n    '''\n    Write a function to find the area of a regular decagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_decagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular decagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a decagon.\"\n        else:\n            return \"This is not a decagon.\"\n    else:\n        return \"This is not a decagon.\"\ndef perimeter_decagon_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular decagon hexagon from the length of its sides.\n    '''\n    perimeter = (a * 11)\n    return perimeter\ndef area_decagon_hexagon(a):\n    '''\n    Write a function to find the area of a regular decagon hexagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_decagon_hexagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular decagon hexagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a decagon hexagon.\"\n        else:\n            return \"This is not a decagon hexagon.\"\n    else:\n        return \"This is not a decagon hexagon.\"\ndef perimeter_nonagon_heptagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon heptagon from the length of its sides.\n    '''\n    perimeter = (a * 12)\n    return perimeter\ndef area_nonagon_heptagon(a):\n    '''\n    Write a function to find the area of a regular nonagon heptagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_nonagon_heptagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular nonagon heptagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a nonagon heptagon.\"\n        else:\n            return \"This is not a nonagon heptagon.\"\n    else:\n        return \"This is not a nonagon heptagon.\"\ndef perimeter_nonagon_octagon(a):\n    '''\n    Write a function to find the perimeter of a regular nonagon octagon from the length of its sides.\n    '''\n    perimeter = (a * 13)\n    return perimeter\ndef area_nonagon_octagon(a):\n    '''\n    Write a function to find the area of a regular nonagon octagon from the length of its sides.\n    '''\n    area = (a ** 2 * math.sqrt(3)) / 2\n    return area\ndef is_nonagon_octagon(a):\n    '''\n    Write a function to find whether or not a given number is a regular nonagon octagon.\n    '''\n    if (a % 1 == 0) and (a > 0):\n        if a**2 < (25 * math.sqrt(3)):\n            return \"This is a nonagon octagon.\"",
        "num_ids": 47
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in range(len(s)-3):\n        if s[i]=='d' and s[i+1]=='e' and s[i+3]=='c':\n            count+=1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s1 ='std'\n    count = 0\n    for i in range(len(s) - len(s1) + 1):\n        if s[i:i+len(s1)] == s1:\n            count += 1\n    print(count)\n",
        "num_ids": 64
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "num_ids": 45
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "num_ids": 11
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    #return s.count('std')\n    return s.count('std')\nprint(count_occurance('stdstdstd'))\nprint(count_occurance('stdstdstdstd'))\n",
        "num_ids": 48
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    flag = test_tuple[0]\n    for x in test_tuple:\n        if flag!= type(x):\n            print(\"All elements in tuple should have same data type.\")\n            return\n    print(\"All elements in tuple have same data type.\")\n",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            lst.append(str(i))\n    if len(lst) == 0:\n        return True\n    return False\n    \ndef check_length(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same length or not.\n    '''\n    lst = []\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            lst.append(str(i))\n    if len(lst) == 0:\n        return True\n    return False\n",
        "num_ids": 59
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = []\n    if(all(isinstance(x, (int, float, complex)) for x in test_tuple)):\n        return True\n    else:\n        return False\n    ",
        "num_ids": 49
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    assert len(test_tuple) >= 1\n    first_type = type(test_tuple[0])\n    assert len(test_tuple) == len(set(test_tuple))\n    for t in test_tuple:\n        if type(t)!= first_type:\n            return False\n    return True\n",
        "num_ids": 79
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_set = set()\n",
        "num_ids": 10
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return None\n    else:\n        return all(isinstance(e, type(test_tuple[0])) for e in test_tuple)\n        ",
        "num_ids": 48
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if test_tuple:\n        if type(test_tuple[0])!= type(test_tuple[1]):\n            print(\"All the elements in tuple have different data types.\")\n        else:\n            print(\"All the elements in tuple have same data type.\")\n    else:\n        print(\"Tuple is empty.\")\n",
        "num_ids": 79
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    flag = True\n    for i in test_tuple:\n        if test_tuple.count(i) == 1:\n            continue\n        elif test_tuple.count(i) > 1:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 63
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list=[]\n    for i in test_tuple:\n        if type(i)==list:\n            for j in i:\n                test_list.append(type(j))\n        else:\n            test_list.append(type(i))\n    print(test_list)\n    if len(set(test_list))>1:\n        return False\n    else:\n        return True\n",
        "num_ids": 98
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Define a list of items for each data type.\n    list_of_types = []\n    for x in test_tuple:\n        list_of_types.append(type(x))\n    # Check if there is a difference between the items in the list.\n    if len(set(list_of_types)) == 1:\n        # If there is a difference, then print that there is a mixed data types.\n        print('Mixed data types.')\n    # Otherwise, there is no difference, so print that there is a single data type.\n    else:\n        print('All data types the same.')\n",
        "num_ids": 145
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n % 2 == 0:\n        return arr[n//2] == x\n    else:\n        return arr[n//2 + 1] == x\n",
        "num_ids": 39
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x > arr[n//2]:\n        return False\n    elif x < arr[n//2]:\n        return False\n    else:\n        return True\n",
        "num_ids": 41
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0 or x < arr[0] or x > arr[n - 1]:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n%2!= 0:\n        return False\n    if n == 1:\n        return arr[0] == x\n    \n    return is_majority(arr, n//2, x) or is_majority(arr, n//2, x)\n",
        "num_ids": 62
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return False\n    middle = n/2\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > middle:\n        return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n % 2 == 0:\n        return False\n    if n == 1:\n        return False\n    if x < arr[0] or arr[n-1] < x:\n        return False\n    else:\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        return True if count > n/2 else False\n",
        "num_ids": 94
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    c = 0\n    for i in range(n):\n        if arr[i] == x:\n            c += 1\n    return c > n/2\n",
        "num_ids": 39
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #this was my method, but doesn't work when the majority element is at the beginning of the array\n    #for i in range(0, n-1):\n    #    if arr[i] == arr[i+1]:\n    #        return True\n    #return False\n",
        "num_ids": 66
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n % 2 == 0:\n        if arr[n//2] == x and arr[(n//2) + 1] == x:\n            return True\n        return False\n",
        "num_ids": 44
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    i = 0\n    while i < n:\n        if arr[i] == x:\n            count += 1\n            i += 1\n        else:\n            count -= 1\n            i += 1\n    return count > n/2\n",
        "num_ids": 61
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
        "num_ids": 29
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 31
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Function to count set bits \n    # in the binary representation of n \n    def countSetBits(n): \n        count = 0\n        while(n): \n            count += n & 1\n            n >>= 1\n        return count \n    \n    # Driver code \n    n = 11\n    print(countSetBits(n)) \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "num_ids": 2004
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    setBits = 0\n    while (n): \n        setBits += n & 1\n        n >>= 1\n    return setBits\n",
        "num_ids": 37
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n",
        "num_ids": 13
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            str = str[0:i] + str[i+1:]\n    return str\n",
        "num_ids": 45
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_string = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_string = new_string + str[i]\n    return new_string\n",
        "num_ids": 50
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    lst = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            lst.append(str[i])\n    return \"\".join(lst)\n",
        "num_ids": 51
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join(str[i] for i in range(len(str)) if i%2==0)\n",
        "num_ids": 29
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # print(str[0])\n    # for i in range(len(str)):\n    #     if i%2 == 0:\n    #         print(str[i])\n",
        "num_ids": 45
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result_str += str[i]\n    return result_str\n",
        "num_ids": 46
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # try:\n    #     str = input()\n    #     print(odd_values_string(str))\n    # except EOFError as e:\n    #     print(e)\n    # return\n    res = ''\n    for i in range(len(str)):\n        if i%2 == 0:\n            res += str[i]\n    return res\n",
        "num_ids": 89
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n",
        "num_ids": 46
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(\"Output is:\")\n    new = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new += str[i]\n    print(new)\nodd_values_string('helloworld')\n",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return(a)\n        else:\n            return(c)\n    else:\n        if a < c:\n            return(b)\n        else:\n            return(c)\n",
        "num_ids": 59
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b: \n        if a < c: \n            return a \n        else: \n            return c \n    else: \n        if b < c: \n            return b \n        else: \n            return c \n",
        "num_ids": 61
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            min = a\n        else:\n            min = c\n    else:\n        if b<c:\n            min = b\n        else:\n            min = c\n    return min\n    \ndef main():\n    print(\"Min of three numbers is: \",min_of_three(8,9,10))\n    print(\"Min of three numbers is: \",min_of_three(4,8,10))\n    print(\"Min of three numbers is: \",min_of_three(3,5,10))\n    \nif __name__ == '__main__':\n    main()\n    ",
        "num_ids": 152
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_value = a\n    if b < min_value:\n        min_value = b\n    if c < min_value:\n        min_value = c\n    return min_value\n    \n    ",
        "num_ids": 50
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    #Write your code here\n    min_val = min(a,b,c)\n    return min_val\n",
        "num_ids": 29
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c\n",
        "num_ids": 41
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return c\n        elif a < c:\n            return b\n        else:\n            return a\n    elif a > b:\n        if a < c:\n            return b\n        elif b < c:\n            return a\n        else:\n            return c\n    else:\n        return a\n",
        "num_ids": 87
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n    \nprint(min_of_three(3,6,9))\nprint(min_of_three(3,6,9))\n",
        "num_ids": 45
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if b < a:\n        minimum = b\n    if c < a:\n        minimum = c\n    return minimum\n",
        "num_ids": 35
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n",
        "num_ids": 47
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # code here\n    count = 0\n    for i in range(2**n):\n        for j in range(n):\n            if (i & (2**j)) == (2**j):\n                count = count + 1\n    \n    if l <= count and count <= r:\n        return True\n    else:\n        return False\n",
        "num_ids": 81
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l = bin(l)\n    l = l[2:]\n    r = bin(r)\n    r = r[2:]\n    l = list(l)\n    r = list(r)\n    l = [int(i) for i in l]\n    r = [int(i) for i in r]\n    s = 0\n    for i in range(0,len(l)):\n        if l[i] == 0 and r[i] == 0:\n            s+=1\n    if s == n:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 138
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if n & (1<<i) == 1:\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # if n & 1 == 1:\n    #     return False\n    # else:\n    #     return True\n",
        "num_ids": 29
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (n<=0) or (n>32):\n        print \"n should be between 1 to 32\"\n        return 0\n    if (l<0) or (r>32):\n        print \"L and R should be between 1 to 32\"\n        return 0\n    if (l>r):\n        print \"L should be less than R\"\n        return 0\n    \n    return ((((2**n)-1)-(2**(l-1))+1)-(2**(r-1)))\n",
        "num_ids": 120
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while n>0:\n        if n & 1 == 1:\n            count+=1\n        n = n >> 1\n    return (count >= l and count<=r)\n",
        "num_ids": 48
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def check(num):\n        '''\n        The inner function is used to check the bits in the given range.\n        '''\n        while num:\n            num = num & (num-1)\n        return num\n",
        "num_ids": 22
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    temp = n\n    for i in range(l,r+1):\n        if (temp & (1<<i))!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    while r>0:\n        if r & 1 == 1:\n            return False\n        r = r // 2\n        n = n // 2\n    while l <= n:\n        if l % 2 == 0:\n            l += 1\n        else:\n            return False\n    return True\n",
        "num_ids": 69
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if not check_Bits_Set(n,i):\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print(arr)\n    arr_1 = [i for i in arr if i < 0]\n    arr_2 = [i for i in arr if i >= 0]\n    \n    arr_3 = arr_1 + arr_2\n    print(arr_3)\n",
        "num_ids": 65
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = 0\n    while i < n:\n        if arr[i] < 0:\n            while j < n:\n                if arr[j] > 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n                j += 1\n            i += 1\n        else:\n            i += 1\n    return arr\n",
        "num_ids": 91
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize indexes of the beginning and end of the partition\n    start = 0\n    end = len(arr) - 1\n    # loop through the entire array\n    while start <= end:\n        # if the current element is negative\n        if arr[start] < 0:\n            # swap it with the first positive element\n            arr[start], arr[end] = arr[end], arr[start]\n            # move the start index to the next element\n            start += 1\n            # swap the current element with the end index element\n        end -= 1\n    return arr\n",
        "num_ids": 130
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    p = -1\n    for i in range(0, n):\n        if arr[i] < 0:\n            p += 1\n            arr[i], arr[p] = arr[p], arr[i]\n    return arr\n",
        "num_ids": 57
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # code here\n",
        "num_ids": 7
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # input validation\n    if n > len(arr):\n        return arr\n    # initialize positive and negative indices\n    neg_ind = 0\n    pos_ind = len(arr) - 1\n    # loop through the array\n    while neg_ind < pos_ind:\n        # if the current index is less than n, then it's a negative\n        if arr[neg_ind] < 0:\n            neg_ind += 1\n        # otherwise, it's a positive\n        else:\n            arr[neg_ind], arr[pos_ind] = arr[pos_ind], arr[neg_ind]\n            pos_ind -= 1\n    return arr\n",
        "num_ids": 152
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        while arr[i] < 0 and i < j:\n            i += 1\n        while arr[j] >= 0 and i < j:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n    return arr\n",
        "num_ids": 89
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # for i in range(0, n):\n    #     for j in range(i, n):\n    #         if arr[j] < 0 and arr[i] >= 0:\n    #             temp = arr[j]\n    #             arr[j] = arr[i]\n    #             arr[i] = temp\n    #             print(arr)\n    #         elif arr[j] >= 0 and arr[i] < 0:\n    #             temp = arr[j]\n    #             arr[j] = arr[i]\n    #             arr[i] = temp\n    #             print(arr)\n    # return arr\n    for i in range(0, n):\n        for j in range(i, n):\n            if arr[j] < 0 and arr[i] >= 0:\n                temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                print(arr)\n            elif arr[j] >= 0 and arr[i] < 0:\n                temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                print(arr)\n    return arr\n",
        "num_ids": 280
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # loop through arr and check if it is negative and put it in neg, do the same for positive\n    neg = []\n    pos = []\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    # if neg is empty or pos is empty, return arr\n    if not neg or not pos:\n        return arr\n    # if neg is shorter than pos, then the first n elements are neg, so loop through arr and place neg at the end\n    if len(neg) < len(pos):\n        # loop through arr and place neg at the end\n        for num in arr:\n            if num < 0:\n                neg.append(num)\n            else:\n                pos.append(num)\n    # return the combined array\n    return neg + pos\n",
        "num_ids": 195
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            for j in range(i, n):\n                if arr[j] < 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return arr\n",
        "num_ids": 68
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",\"%\")\n    return str1\n",
        "num_ids": 21
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\")\n",
        "num_ids": 15
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return(str1.replace(\" \",\"%s\"))\n",
        "num_ids": 16
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i] == \" \":\n            lst[i] = char\n    str1 = \"\".join(lst)\n    return str1\n",
        "num_ids": 63
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") %char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1_list = []\n    for x in str1:\n        if x == \" \":\n            str1_list.append(char)\n        else:\n            str1_list.append(x)\n    str1_new = \"\".join(str1_list)\n    return str1_new\n",
        "num_ids": 75
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in str1.split():\n        str1 = str1.replace(\" \",char)\n    return str1\n",
        "num_ids": 30
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2=str1.replace(\" \",\"%s\")\n    return str2\n    #pass\n",
        "num_ids": 26
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") %char\n",
        "num_ids": 17
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s') %char\n",
        "num_ids": 17
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n==len(list1):\n        return list1\n    else:\n        nlargest=[list1[0]]\n        list1.pop(0)\n        nlargest=larg_nnum(list1,n)\n        heapq.heappush(nlargest,list1[0])\n        return nlargest\n",
        "num_ids": 78
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    result = []\n    for i in range(n):\n        result.append(max(list1))\n        list1.remove(max(list1))\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    temp=[]\n    for i in list1:\n        heapq.heappush(temp,i)\n        if len(temp)>n:\n            heapq.heappop(temp)\n    return list(temp)\n",
        "num_ids": 58
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(0,n):\n        list1.sort()\n        new_list.append(list1[-1])\n        list1.pop(-1)\n    return new_list\nprint(larg_nnum([5,1,4,3,8,6],3))\n",
        "num_ids": 78
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n>=0:\n        if len(list1)>0:\n            list2=[]\n            heapq._heapify_max(list2)\n            for i in range(n):\n                list2.append(list1.pop(0))\n            return list2\n        else:\n            return []\n    else:\n        print(\"Invalid Input\")\n        return []\nlist1=[1,2,3,4,5,6,7,8,9]\nprint(larg_nnum(list1,3))\nprint(larg_nnum([],-1))\n",
        "num_ids": 140
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[0:n]\n    heapq.heapify(heap)\n    for i in range(n,len(list1)):\n        if heap[0] < list1[i]:\n            heapq.heapreplace(heap,list1[i])\n    return heap\n",
        "num_ids": 77
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return [list1[i] for i in range(n)]\n",
        "num_ids": 18
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #return list1[-n:]\n    l=[]\n    for i in range(n):\n        heapq.heappush(l,list1[i])\n    return(l)\n",
        "num_ids": 49
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n    # return sorted(list1,reverse=True)[:n]\n",
        "num_ids": 32
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1[0:n]\n    heapq.heapify(heap)\n    for i in range(n,len(list1)):\n        if list1[i]>heap[0]:\n            heapq.heapreplace(heap,list1[i])\n    return heap\n",
        "num_ids": 78
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n",
        "num_ids": 20
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(\"The lateral surface area of the cylinder is: \"+str(round((2*3.14*(r**2)+2*3.14*r*h),3))+\"m^2\")\n    return None\nlateralsuface_cylinder(10,10)\n",
        "num_ids": 66
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    side_area = 2*math.pi*r*h\n    return side_area\n",
        "num_ids": 23
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(f\"The lateral surface area of a cylinder with radius {r} and height {h} is {2*math.pi*r*h + 2*math.pi*r*(r**2)}\")\nlateralsuface_cylinder(3,4)\n",
        "num_ids": 64
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #r = radius, h = height\n",
        "num_ids": 12
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print('\\n' + '-'*110)\n    print('-'*110 + '\\n')\n    print('The lateral surface area of a cylinder with radius = {}, and height = {} is {}'.format(r,h,2*pi*r*(h+r)))\n    return 0",
        "num_ids": 70
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n",
        "num_ids": 14
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print('surface area:'+ str(2*math.pi*r*h))\n",
        "num_ids": 22
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * (r + h)\n    return surface_area\n",
        "num_ids": 27
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area=2*math.pi*r*h\n    return area\n",
        "num_ids": 19
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return round(l**3, 2)\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return float(l * l * l)\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume\n",
        "num_ids": 13
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n",
        "num_ids": 8
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l ** 3)\n    return(l ** 3)\n",
        "num_ids": 18
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(l**3)\n",
        "num_ids": 10
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n ^ (n >> 1)\n    return n\n",
        "num_ids": 17
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # OR first set all the even bits to 1 and \n    # then do xor with input number \n    # to set all the even bits to 0. \n    return n ^ (1<<31) \n",
        "num_ids": 51
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return ((n & ~(1 << 0)) | (1 << 0))\n",
        "num_ids": 20
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n & 0xffffffff\n    return n & 0xaaaaaaaa\n",
        "num_ids": 28
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n",
        "num_ids": 13
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # return n & (1 << (1 + (n & 2)))\n    return n&(n>>1)\n",
        "num_ids": 29
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = (n & 0x5555555555555555) + ((n >> 1) & 0x5555555555555555) \n    n = (n & 0x3333333333333333) + ((n >> 2) & 0x3333333333333333) \n    n = (n & 0x0f0f0f0f0f0f0f0f) + ((n >> 4) & 0x0f0f0f0f0f0f0f0f) \n    n = (n & 0x00ff00ff00ff00ff) + ((n >> 8) & 0x00ff00ff00ff00ff) \n    n = (n & 0x0000ffff0000ffff) + ((n >> 16) & 0x0000ffff0000ffff) \n    n = (n & 0x00000000ffffffff) + ((n >> 32) & 0x00000000ffffffff) \n    return n \n",
        "num_ids": 219
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n &= 0x55555555 # Set all even bits to 0 and all odd bits to 1.\n    return n\n",
        "num_ids": 31
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0x55555555\n    return n & mask\n",
        "num_ids": 18
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n>>1) \n",
        "num_ids": 13
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n    return test_dict\n",
        "num_ids": 57
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    tup_dict = {}\n    for i in test_list:\n        if i not in tup_dict:\n            tup_dict[i] = 1\n        else:\n            tup_dict[i] += 1\n    return tup_dict\n",
        "num_ids": 63
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i])\n    return Counter(test_list)\n",
        "num_ids": 42
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = test_list.copy()\n    test_list.sort()\n    return dict(Counter(test_list))\n",
        "num_ids": 33
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # get length of list to be iterable\n    count = len(test_list)\n    # make dictionary \n    dict_for_counter = {}\n    # iterate through list and add to dictionary\n    for item in test_list:\n        if item not in dict_for_counter:\n            dict_for_counter[item] = 1\n        else:\n            dict_for_counter[item] += 1\n    print(dict_for_counter)\n    return dict_for_counter\n",
        "num_ids": 116
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence = dict()\n    for i in test_list:\n        if i not in occurence:\n            occurence[i] = 1\n        else:\n            occurence[i] += 1\n    return occurence\n",
        "num_ids": 59
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    cnt = Counter(test_list)\n    return {k:v for k, v in cnt.items() if v > 1}\n",
        "num_ids": 35
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences = Counter(test_list)\n    return occurences\n",
        "num_ids": 20
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurence_count = {}\n    for tuple_key in test_list:\n        if tuple_key in occurence_count:\n            occurence_count[tuple_key] += 1\n        else:\n            occurence_count[tuple_key] = 1\n    print(occurence_count)\n    \ndef convert_to_tuples(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list of the unique tuples.\n    '''\n    return list(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('math', 'chemistry'), ('math', 'physics'), ('math', 'history'), ('math', 'physics'), ('history', 'physics')]\n    dict_occurences = {}\n    for item in test_list:\n        if item[0] in dict_occurences:\n            dict_occurences[item[0]].append(item[1])\n        else:\n            dict_occurences[item[0]] = [item[1]]\n    return dict_occurences\n",
        "num_ids": 125
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    i = 0\n    for j in range(len(str)):\n        for k in range(j, len(str)):\n            if(str[j:k+1]!= '' and str[j:k+1].isspace() == False):\n                count += 1\n    return count\n",
        "num_ids": 77
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            print(str[i:j])\n    return 0\n",
        "num_ids": 45
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substrings(str, n): \n        import re\n        len_str = len(str) \n        count = 0\n        for i in range(len_str): \n            for j in range(i, len_str): \n                if re.match(r'[a-zA-Z0-9]*$', str[i:j + 1]): \n                    count += 1\n        return count\n",
        "num_ids": 103
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Code here\n    \n    print(f\"{number_of_substrings = }\")\n",
        "num_ids": 25
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(None, [str[i: j] for i in range(len(str)) for j in range(i + 1, len(str) + 1)])))\n",
        "num_ids": 46
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(len(str)):\n            if i == 0:\n                for j in range(len(str)):\n                    if str[j:j+1]!= '':\n                        result += 1\n            else:\n                for j in range(i+1, len(str)):\n                    if str[i:j+1]!= '':\n                        result += 1\n        return result\n",
        "num_ids": 120
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    sub_str = str\n    index = 0\n    count = 0\n    while index < len(sub_str):\n        if sub_str[index] == '0':\n            start = index\n            index += 1\n            while index < length and sub_str[index] == '0':\n                index += 1\n            if index < length and sub_str[index] == '1':\n                while index < length and sub_str[index] == '1':\n                    index += 1\n                if index < length and sub_str[index] == '0':\n                    count += 1\n                elif index < length:\n                    count += 1\n            elif index < length:\n                count += 1\n        else:\n            start = index\n            while index < length and sub_str[index] == '1':\n                index += 1\n            if index < length:\n                while index < length and sub_str[index] == '0':\n                    index += 1\n                count += 1\n        index += 1\n    return count\n",
        "num_ids": 244
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)+1):\n            if str[i:j] == str[i:j][::-1]:\n                result += 1\n    return result\n",
        "num_ids": 63
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    list_str=list(str)\n    count=0\n    for i in range(len(list_str)):\n        for j in range(i+1,len(list_str)+1):\n            #print(list_str[i:j])\n            if list_str[i:j]!='':\n                count+=1\n    print(count)\n",
        "num_ids": 89
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            sub = str[i:j] \n            if sub:\n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m+1) / 2\n    else:\n        return m * (m+1) / 2 - get_total_number_of_sequences(m,n-1)\n",
        "num_ids": 67
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (m == 1):\n        return 1\n    else:\n        return get_total_number_of_sequences(m-1, n) + get_total_number_of_sequences(m, n-1)\n",
        "num_ids": 56
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m < n:\n        return 0\n    if m == n:\n        return 1\n    if n == 1:\n        return m\n    if n > 1:\n        return sum([get_total_number_of_sequences(m,i) for i in range(1,n)])\n",
        "num_ids": 72
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m-1,n-1)\n",
        "num_ids": 69
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    elif n == 2:\n        return m * (m - 1)\n    elif n == 3:\n        return m * (m - 1) * (m - 2)\n    else:\n        return m * (m - 1) * (m - 2) * (m - 3)\n",
        "num_ids": 81
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (n == 0):\n        return 1\n    else:\n        return get_total_number_of_sequences(m, n-1) + get_total_number_of_sequences(m, n-2)\n",
        "num_ids": 56
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return m\n    return get_total_number_of_sequences(m,n-1)+get_total_number_of_sequences(m,n-2)\n",
        "num_ids": 61
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # define a dp matrix\n    dp = [[0 for i in range(n)] for j in range(m+1)]\n",
        "num_ids": 32
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n==0:\n        return 1\n    if m<0 or n<0:\n        return 0\n    if n==1:\n        return m\n    return get_total_number_of_sequences(m-1,n) + get_total_number_of_sequences(m-1,n-1)\n",
        "num_ids": 79
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if(m<n):\n        return 0\n    else:\n        return (m-2)**n\n    \n    \ndef get_difference_of_max_and_min_in_sequence(sequence):\n    '''\n    Write a function that takes in a sequence of integers and returns the absolute difference between the largest and smallest elements in that sequence. Note that there is no restriction on the type of sequence passed in or on the values stored in the sequence.\n    '''\n    return max(sequence) - min(sequence)\n    \n    \ndef get_longest_word(words):\n    '''\n    Write a function that takes in a string of one or more words, and returns the longest word in the string. If the input string is empty, the function should return an empty string.\n    '''\n    if(words == \"\"):\n        return \"\"\n    else:\n        return max(words.split(\" \"), key=len)\n    \n    \ndef get_matrix_in_spiral_order(matrix):\n    '''\n    Write a function that takes in a matrix (a list of lists) and returns a new matrix that is the same as the input matrix, but with the values in spiral order.\n    '''\n    matrix = [row[:] for row in matrix]\n    left, top, right, bottom, n, m = 0, 0, len(matrix[0]) - 1, len(matrix) - 1, len(matrix), len(matrix[0])\n    for i in range(n * m):\n        if(left > right):\n            break\n        if(top > bottom):\n            break\n        if(matrix[top][left] == \" \"):\n            top += 1\n        elif(matrix[bottom][right] == \" \"):\n            bottom -= 1\n        elif(matrix[top][left]!= \" \"):\n            matrix[top][left] = \" \"\n            left += 1\n        elif(matrix[bottom][right]!= \" \"):\n            matrix[bottom][right] = \" \"\n            right -= 1\n    return matrix\n    \n    \ndef get_sum_of_two_matrices(matrix1, matrix2):\n    '''\n    Write a function that takes in two matrices and returns the sum of the two matrices.\n    '''\n    matrix = [row[:] for row in matrix1]\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            matrix[i][j] += matrix2[i][j]\n    return matrix\n    \n    \ndef get_closest_number_to_zero(number):\n    '''\n    Write a function that takes in a floating point number and returns the closest integer to that number.\n    '''\n    if(round(number,0) == 0):\n        return 0\n    else:\n        return int(round(number,0))\n    \n    \ndef get_unique_characters(string):\n    '''\n    Write a function that takes in a string and returns the number of unique characters in that string.\n    '''\n    string = string.replace(\" \",\"\")\n    characters = {}\n    for character in string:\n        if(character in characters):\n            characters[character] += 1\n        else:\n            characters[character] = 1\n    return len(characters)\n    \n    \ndef get_unique_words(words):\n    '''\n    Write a function that takes in a string and returns the number of unique words in that string. Note that punctuation and digits should not be counted as part of a unique word.\n    '''\n    return len(set(words.split()))\n    \n    \ndef get_longest_word_in_dictionary(dictionary):\n    '''\n    Write a function that takes in a dictionary and returns the longest word in the dictionary. If the dictionary is empty, the function should return an empty string.\n    '''\n    if(len(dictionary) == 0):\n        return \"\"\n    else:\n        return max(dictionary, key=len)\n    \n    \ndef get_number_of_even_integers(even_integers):\n    '''\n    Write a function that takes in a list of integers and returns the number of even integers in that list.\n    '''\n    return len([i for i in even_integers if i % 2 == 0])\n    \n    \ndef get_number_of_odd_integers(even_integers):\n    '''\n    Write a function that takes in a list of integers and returns the number of odd integers in that list.\n    '''\n    return len([i for i in even_integers if i % 2!= 0])\n    \n    \ndef get_sum_of_all_numbers_in_list(numbers):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all numbers in that list.\n    '''\n    return sum(numbers)\n    \n    \ndef get_total_number_of_even_numbers_in_list(numbers):\n    '''\n    Write a function that takes in a list of integers and returns the total number of even integers in that list.\n    '''\n    return len([i for i in numbers if i % 2 == 0])\n    \n    \ndef get_total_number_of_odd_numbers_in_list(numbers):\n    '''\n    Write a function that takes in a list of integers and returns the total number of odd integers in that list.\n    '''\n    return len([i for i in numbers if i % 2!= 0])\n    \n    \ndef get_count_of_unique_characters(string):\n    '''\n    Write a function that takes in a string and returns the count of unique characters in that string.\n    '''\n    return len(set(string))\n    \n    \ndef get_count_of_characters_greater_than_equal_to_given_number(string, number):\n    '''\n    Write a function that takes in a string and an integer and returns the number of characters in the string that are greater than or equal to the given number.\n    '''\n    return sum([1 for i in string if ord(i) >= number])\n    \n    \ndef get_number_of_integers_greater_than_or_equal_to_given_number(numbers, number):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the number of integers in the list that are greater than or equal to the given number.\n    '''\n    return sum([1 for i in numbers if i >= number])\n    \n    \ndef get_number_of_integers_greater_than_or_equal_to_given_number_in_list(numbers, number):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the number of integers in the list that are greater than or equal to the given number.\n    '''\n    return len([i for i in numbers if i >= number])\n    \n    \ndef get_odd_integers_greater_than_or_equal_to_given_number_in_list(numbers, number):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the number of odd integers in the list that are greater than or equal to the given number.\n    '''\n    return len([i for i in numbers if i >= number and i % 2!= 0])\n    \n    \ndef get_even_integers_greater_than_or_equal_to_given_number_in_list(numbers, number):\n    '''\n    Write a function that takes in a list of integers and an integer and returns the number of even integers in the list that are greater than or equal to the given number.\n    '''\n    return len([i for i in numbers if i >= number and i % 2 == 0])\n    \n    \ndef get_number_of_strings_with_the_first_character_matching_a_given_character(strings, character):\n    '''\n    Write a function that takes in a list of strings and a character and returns the number of strings in the list that begin with the given character.\n    '''\n    return len([string for string in strings if string[0] == character])\n    \n    \ndef get_count_of_unique_characters_in_strings_lis",
        "num_ids": 41
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n",
        "num_ids": 13
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0:\n        return list2\n    elif len(list2) == 0:\n        return list1\n    else:\n        new_list = list1[:len(list1) - 1] + list2\n        return new_list\n",
        "num_ids": 66
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in list2:\n        list1.append(i)\n    return list1\n",
        "num_ids": 31
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    print(list1)\n",
        "num_ids": 20
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n",
        "num_ids": 18
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n    \ndef replace_last_value(list1,value):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = value\n    return list1\n",
        "num_ids": 17
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Use append\n    # new_list = []\n    # new_list.append(list2)\n    # new_list.append(list1[1:-1])\n    # new_list.append(list2[-1])\n    # return new_list\n",
        "num_ids": 65
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n",
        "num_ids": 26
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    charac_count=0\n    for i in str1:\n        charac_count+=1\n    return charac_count\n",
        "num_ids": 33
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n",
        "num_ids": 10
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    pass\ndef count_charac_in_list(list1):\n    '''\n    Write a function to count the total number of characters in a list of strings.\n    '''\n    return len(list1)\n    pass\ndef repeat_charac(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    pass\ndef repeat_charac_in_list(list1):\n    '''\n    Write a function to check if a list of strings is a palindrome.\n    '''\n    return list1 == list1[::-1]\n    pass\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    pass\ndef is_palindrome_in_list(list1):\n    '''\n    Write a function to check if a list of strings is a palindrome.\n    '''\n    return list1 == list1[::-1]\n    pass\ndef is_prime(num):\n    '''\n    Write a function to check if a number is a prime number.\n    '''\n    return num > 1 and all(num % i!= 0 for i in range(2, num))\n    pass\ndef is_prime_in_list(list1):\n    '''\n    Write a function to check if a list of numbers is a prime number.\n    '''\n    return False not in [is_prime(num) for num in list1]\n    pass\ndef is_unique(str1):\n    '''\n    Write a function to check if a string contains all unique characters.\n    '''\n    return len(str1) == len(set(str1))\n    pass\ndef is_unique_in_list(list1):\n    '''\n    Write a function to check if a list of strings contains all unique characters.\n    '''\n    return len(list1) == len(set(list1))\n    pass\ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    return sorted(str1) == sorted(str2)\n    pass\ndef is_permutation_in_list(list1, list2):\n    '''\n    Write a function to check if two list of strings are permutations of each other.\n    '''\n    return sorted(list1) == sorted(list2)\n    pass\ndef is_anagram(str1, str2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    return sorted(str1) == sorted(str2)\n    pass\ndef is_anagram_in_list(list1, list2):\n    '''\n    Write a function to check if two list of strings are anagrams.\n    '''\n    return sorted(list1) == sorted(list2)\n    pass\ndef longest_substring_with_k_distinct(str1, k):\n    '''\n    Write a function to get the length of the longest substring in a given string containing only 2 unique characters.\n    '''\n    if len(str1) < k:\n        return 0\n    dict1 = {}\n    max_len = 0\n    start = 0\n    for i, char1 in enumerate(str1):\n        if char1 not in dict1:\n            dict1[char1] = 1\n        else:\n            dict1[char1] += 1\n        while len(dict1) > k:\n            dict1[str1[start]] -= 1\n            if dict1[str1[start]] == 0:\n                del dict1[str1[start]]\n            start += 1\n        max_len = max(max_len, i-start+1)\n    return max_len\n    pass\ndef longest_substring_with_k_distinct_in_list(list1, k):\n    '''\n    Write a function to get the length of the longest substring in a given list of strings containing only 2 unique characters.\n    '''\n    if len(list1) < k:\n        return 0\n    dict1 = {}\n    max_len = 0\n    start = 0\n    for i, char1 in enumerate(list1):\n        if char1 not in dict1:\n            dict1[char1] = 1\n        else:\n            dict1[char1] += 1\n        while len(dict1) > k:\n            dict1[list1[start]] -= 1\n            if dict1[list1[start]] == 0:\n                del dict1[list1[start]]\n            start += 1\n        max_len = max(max_len, i-start+1)\n    return max_len\n    pass\ndef shortest_window_sort(list1):\n    '''\n    Write a function to find the shortest subarray in a given array, sorted in ascending order, that needs to be sorted in order for the entire array to be sorted.\n    '''\n    for i, char1 in enumerate(list1):\n        if i == 0:\n            max1 = char1\n            continue\n        if char1 < max1:\n            continue\n        else:\n            max1 = char1\n            start = i\n        for j, char2 in enumerate(list1[i:]):\n            if char2 < max1:\n                continue\n            else:\n                max1 = char2\n                end = i+j\n    return list1[start:end+1]\n    pass\ndef shortest_window_sort_in_list(list1):\n    '''\n    Write a function to find the shortest subarray in a given array, sorted in ascending order, that needs to be sorted in order for the entire array to be sorted.\n    '''\n    for i, char1 in enumerate(list1):\n        if i == 0:\n            max1 = char1\n            continue\n        if char1 < max1:\n            continue\n        else:\n            max1 = char1\n            start = i\n        for j, char2 in enumerate(list1[i:]):\n            if char2 < max1:\n                continue\n            else:\n                max1 = char2\n                end = i+j\n    return list1[start:end+1]\n    pass\ndef longest_substring_with_k_distinct_characters(str1, k):\n    '''\n    Write a function to return the length of the longest substring in a given string, such that no two characters in this substring occur more than k times.\n    '''\n    dict1 = {}\n    max_len = 0\n    start = 0\n    for i, char1 in enumerate(str1):\n        if char1 not in dict1:\n            dict1[char1] = 1\n        else:\n            dict1[char1] += 1\n        while len(dict1) > k:\n            dict1[str1[start]] -= 1\n            if dict1[str1[start]] == 0:\n                del dict1[str1[start]]\n            start += 1\n        max_len = max(max_len, i-start+1)\n    return max_len\n    pass\ndef longest_substring_with_k_distinct_characters_in_list(list1, k):\n    '''\n    Write a function to return the length of the longest substring in a given string, such that no two characters in this substring occur more than k times.\n    '''\n    dict1 = {}\n    max_len = 0\n    start = 0\n    for i, char1 in enumerate(list1):\n        if char1 not in dict1:\n            dict1[char1] = 1\n        else:\n            dict1[char1] += 1\n        while len(dict1) > k:\n            dict1[list1[start]] -= 1\n            if dict1[list1[start]] == 0:\n                del dict1[list1[start]]\n            start += 1\n        max_len = max(max_len, i-start+1)\n    return max_len\n    pass\ndef longest_substring_with_k_distinct_characters_in_list_v2(list1, k):\n    '''\n    Write a function to return the length of the longest substring in a given string, such that no two characters in this substring occur more than k times.\n    '''\n    dict1 ",
        "num_ids": 6
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    #return len(str1.replace(\" \",\"\"))\n",
        "num_ids": 24
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    result = {}\n    for c in str1:\n        if c in result:\n            result[c] += 1\n        else:\n            result[c] = 1\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    #str1 = \"ABC\"\n    char = {}\n    for i in str1:\n        if i in char:\n            char[i] += 1\n        else:\n            char[i] = 1\n    print(char)\ncount_charac('python')\n",
        "num_ids": 65
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    i=0\n    while(True):\n        i=i+1\n        x=i*i\n        if(x>N):\n            return x\n    \ndef nth_Perfect_Square(N): \n    '''\n    Write a python function to find the Nth perfect square greater than a given number.\n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    i=0\n    while(True):\n        i=i+1\n        x=i*i\n        if(x>N):\n            return i\n        \ndef is_Perfect_Square(N): \n    '''\n    Write a python function to check if a given number is a perfect square. \n    '''\n    ##Your code here\n    ##You can check the input is a positive integer.\n    if(isinstance(N,int)==False or N<1):\n        return -1\n    x=math.sqrt(N)\n    if x-int(x) == 0:\n        return True\n    return False\n",
        "num_ids": 75
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if int(root + 1) ** 2 == N: \n        return int((root + 1) ** 2) \n    else: \n        return -1\n    \ndef compare_Version_Numbers(version1,version2):\n    '''\n    Write a function to compare the version numbers in terms of alphabets.\n    '''\n    v1 = version1.split('.')\n    v2 = version2.split('.')\n    if len(v1) < len(v2):\n        for i in range(len(v2)-len(v1)):\n            v1.append(0)\n    if len(v1) > len(v2):\n        for i in range(len(v1)-len(v2)):\n            v2.append(0)\n    i=0\n    for i in range(len(v1)):\n        if int(v1[i])<int(v2[i]):\n            return -1\n        elif int(v1[i])>int(v2[i]):\n            return 1\n        else:\n            i+=1\n    return 0\n    \ndef reverse_String(s):\n    '''\n    Write a Python function that accepts a string and returns a new string \n    where the first and last characters have been exchanged.\n    '''\n    rev_s = s[::-1]\n    return rev_s\n    \ndef reverse_Sentence(s):\n    '''\n    Write a Python function that accepts a string and returns a new string \n    where the first and last characters have been exchanged.\n    '''\n    # Reverse a string\n    # Using built-in function\n    # s[::-1]\n    # s = s[::-1]\n    # return s\n    # Using Slicing \n    s = s[::-1]\n    return s[0] + s[1:-1] + s[-1]\n    \ndef print_String_Character_Frequency(s):\n    '''\n    Write a Python function that accepts a string and calculates the frequency of each character in the string. \n    The result should be a dictionary where the key is the character \n    and the value is the frequency.\n    '''\n    dict_freq = {}\n    for i in range(len(s)):\n        if s[i] not in dict_freq:\n            dict_freq[s[i]] = 1\n        else:\n            dict_freq[s[i]] += 1\n    return dict_freq\n    \ndef check_Perfect_Square(n):\n    '''\n    Write a Python function to check whether a number is a perfect square or not.\n    '''\n    root = math.sqrt(n)\n    if int(root + 1) ** 2 == n: \n        return True\n    else: \n        return False\n    \ndef check_Power_of_2(n):\n    '''\n    Write a Python function to check whether a number is a power of 2 or not.\n    '''\n    if n > 0:\n        return (n & (n-1)) == 0\n    else:\n        return False\n    \ndef find_Minimum_Sequence_Of_Operations(n):\n    '''\n    Write a Python function that takes an integer n and returns the minimum number of operations needed to obtain the value n.\n    Operations can be:\n    - Subtract 1 from the number\n    - If the number is even, divide it by 2\n    - If the number is odd, multiply it by 3 and add 1\n    '''\n    if n == 1:\n        return 0\n    elif n%2 == 0:\n        return 1 + find_Minimum_Sequence_Of_Operations(n/2)\n    elif n%2 == 1:\n        return 1 + find_Minimum_Sequence_Of_Operations(n*3+1)\n    \ndef greatest_Common_Divisor(n1,n2):\n    '''\n    Write a Python function to find the greatest common divisor (GCD) of two integers a and b.\n    '''\n    if n1 < n2:\n        temp = n2\n        n2 = n1\n        n1 = temp\n    if n2%n1 == 0:\n        return n1\n    else:\n        return greatest_Common_Divisor(n1,n2%n1)\n    \ndef find_GCD_of_Array(lst):\n    '''\n    Write a Python function to find the GCD of all elements in an array. \n    '''\n    return greatest_Common_Divisor(lst[0],lst[1])\n    \ndef find_LCM_of_Array(lst):\n    '''\n    Write a Python function to find the LCM of all elements in an array.\n    '''\n    lcm = 1\n    for i in lst:\n        lcm = lcm * i//greatest_Common_Divisor(lcm,i)\n    return lcm\n    \ndef remove_Empty_Slices(lst):\n    '''\n    Write a Python function to remove all empty slices from a given list of strings.\n    '''\n    lst = [i for i in lst if i!= '']\n    return lst\n    \ndef remove_Nth_Occurrence_Of_Char_In_String(s,c,n):\n    '''\n    Write a Python function to remove nth occurrence of a character from a string.\n    '''\n    s = list(s)\n    s.remove(c)\n    return \"\".join(s)\n    \ndef remove_Vowels(s):\n    '''\n    Write a Python function to remove all vowels from a string.\n    '''\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    for i in s:\n        if i in vowels:\n            s.remove(i)\n    return \"\".join(s)\n    \ndef get_ASCII_Value(c):\n    '''\n    Write a Python function to find ASCII value of a character.\n    '''\n    return ord(c)\n    \ndef find_Maximum_Value_In_Array(lst):\n    '''\n    Write a Python function to find the maximum value in an array. \n    '''\n    return max(lst)\n    \ndef is_Palindrome(s):\n    '''\n    Write a Python function to check whether a string is a palindrome or not.\n    '''\n    s = s[::-1]\n    return s == s\n    \ndef search_Word_In_Sentence(s,word):\n    '''\n    Write a Python function to check whether a given word is present in a sentence or not.\n    '''\n    if word in s:\n        return True\n    return False\n    \ndef print_ASCII_Table():\n    '''\n    Write a Python function to print the ASCII values of all the characters in the English alphabet.\n    '''\n    for i in range(97,123):\n        print(chr(i))\n        \ndef get_LCM(lst):\n    '''\n    Write a Python function to find the LCM of a list of integers.\n    '''\n    return lcm(lst[0],lst[1])\n    \ndef get_GCD(lst):\n    '''\n    Write a Python function to find the GCD of a list of integers.\n    '''\n    return gcd(lst[0],lst[1])\n    \ndef convert_Decimal_to_Binary(n):\n    '''\n    Write a Python function to convert a decimal number to binary.\n    '''\n    return bin(n)\n    \ndef convert_Binary_to_Decimal(n):\n    '''\n    Write a Python function to convert a binary number to decimal.\n    '''\n    return int(n,2)\n    \ndef find_Maximum_Sum_Subarray(arr):\n    '''\n    Write a Python function to find the maximum sum of a contiguous subarray in a given array.\n    '''\n    max_sum = float(\"-inf\")\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = ",
        "num_ids": 83
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt = int(math.sqrt(N))\n    if sqrt == math.sqrt(N):\n        return (sqrt + 1) ** 2\n    else:\n        return (sqrt + 1) ** 2 - 1\n  \ndef next_Perfect_Square_with_property(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    Note: Given number should be prime.\n    '''\n    if N < 4:\n        return 4\n    elif (N % 2 == 0 or N % 3 == 0):\n        return 4\n    sqrt = int(math.sqrt(N))\n    if sqrt == math.sqrt(N):\n        return (sqrt + 1) ** 2\n    else:\n        return (sqrt + 1) ** 2 - 1\n",
        "num_ids": 89
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    nextPerfectSquare = math.sqrt(N) + 1\n    return nextPerfectSquare * nextPerfectSquare\n",
        "num_ids": 27
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"Given number should be greater than 0. Please provide a valid positive number.\")\n    elif N >= 0 and N == 0:\n        print(\"The next perfect square greater than 0 is 1.\")\n    else:\n        N = int(N)\n        if math.sqrt(N) % 1 == 0:\n            return (int(math.sqrt(N)))\n        else:\n            return (int(math.sqrt(N))+1)\n        \n        \ndef next_Perfect_Square_v2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"Given number should be greater than 0. Please provide a valid positive number.\")\n    elif N >= 0 and N == 0:\n        print(\"The next perfect square greater than 0 is 1.\")\n    else:\n        N = int(N)\n        sqrt = int(math.sqrt(N))\n        while sqrt * sqrt!= N:\n            sqrt = sqrt + 1\n        return (sqrt + 1) * (sqrt + 1)\n        \ndef next_Perfect_Square_v3(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"Given number should be greater than 0. Please provide a valid positive number.\")\n    elif N >= 0 and N == 0:\n        print(\"The next perfect square greater than 0 is 1.\")\n    else:\n        N = int(N)\n        sqrt = int(math.sqrt(N))\n        while sqrt * sqrt!= N:\n            sqrt = sqrt + 1\n        return (sqrt + 1) * (sqrt + 1)\n        \ndef next_Perfect_Square_v4(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        print(\"Given number should be greater than 0. Please provide a valid positive number.\")\n    elif N >= 0 and N == 0:\n        print(\"The next perfect square greater than 0 is 1.\")\n    else:\n        N = int(N)\n        sqrt = int(math.sqrt(N))\n        while sqrt * sqrt!= N:\n            sqrt = sqrt + 1\n        return (sqrt + 1) * (sqrt + 1)\n        \n        \ndef count_Vowels(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str:\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v2(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v3(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str.lower():\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v4(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str.lower():\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v5(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str:\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v6(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v7(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count = count + 1\n    return count\n        \ndef count_Vowels_v8(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v9(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(str)):\n        if str[i] in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v10(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str.lower():\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v11(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str.lower():\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v12(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in str.lower():\n        if i in vowels:\n            count = count + 1\n    return count\n        \n        \ndef count_Vowels_v13(str):\n    '''\n    Write a python function to find the number of vowels in a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', '",
        "num_ids": 20
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    start = 0\n    end = N\n    ans = 0\n    while (start <= end): \n        mid = int((start + end) / 2) \n        \n        # Check if x is greater than  \n        # or equal to N, and also  \n        # perfect square \n        if (mid * mid <= N and\n            (mid + 1) * (mid + 1) > N): \n            return mid \n        \n        # Since our number is not  \n        # a perfect square, we  \n        # can't find any perfect  \n        # square greater than it,  \n        # so we will take the  \n        # smaller half. \n        if (mid * mid > N): \n            end = mid - 1\n            ans = mid \n        else: \n            start = mid + 1\n    return ans \n",
        "num_ids": 198
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # A perfect square is an integer with a factor 1, 2, 4.\n    # So we can check if N is a perfect square by \n    # verifying if there is a number 1 < i <= sqrt(N) such that i * i = N.\n    # This can be done by using a for loop to iterate i from 1 to sqrt(N)\n    \n    # If there is a number 1 < i <= sqrt(N) such that i * i = N,\n    # then i will be returned.\n    # If no such number exists, then -1 will be returned.\n    # So, for example, if N = 14, then return 16, since 16 is the next\n    # perfect square greater than 14.\n    if N < 1:\n        return -1\n    i = 1\n    while i * i <= N:\n        if i * i == N:\n            return i\n        i += 1\n    return -1\n",
        "num_ids": 217
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=math.sqrt(N)\n    if x-math.floor(x)>0:\n        return int(math.pow(math.ceil(x),2))\n    else:\n        return -1\ndef is_Pallindrome(s):\n    '''\n    Write a Python function to check whether a string is a pallindrome or not.\n    '''\n    s=s.lower()\n    s_len=len(s)\n    for i in range(s_len):\n        if s[i]!=s[s_len-i-1]:\n            return False\n    return True\ndef is_Substring(s1,s2):\n    '''\n    Write a Python function to check whether one string is a substring of another string.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    return s1 in s2\ndef first_10_Multiples_of_a_number(n):\n    '''\n    Write a Python function to return the first 10 multiples of a number.\n    '''\n    for i in range(1,11):\n        print(n*i,end=' ')\ndef first_and_last_3_Multiples_of_a_number(n):\n    '''\n    Write a Python function to return the first and last 3 multiples of a number.\n    '''\n    for i in range(1,4):\n        print(n*i,end=' ')\n    for i in range(5,8):\n        print(n*i,end=' ')\n    print()\ndef first_and_last_5_Multiples_of_a_number(n):\n    '''\n    Write a Python function to return the first and last 5 multiples of a number.\n    '''\n    for i in range(1,6):\n        print(n*i,end=' ')\n    for i in range(7,11):\n        print(n*i,end=' ')\n    print()\ndef first_and_last_7_Multiples_of_a_number(n):\n    '''\n    Write a Python function to return the first and last 7 multiples of a number.\n    '''\n    for i in range(1,8):\n        print(n*i,end=' ')\n    for i in range(9,13):\n        print(n*i,end=' ')\n    print()\ndef count_of_vowels_and_consonants_in_a_string(s):\n    '''\n    Write a Python function to count the number of vowels and consonants in a string.\n    '''\n    vowels=['a','e','i','o','u']\n    s=s.lower()\n    n_vowels=0\n    n_consonants=0\n    for i in range(len(s)):\n        if s[i] in vowels:\n            n_vowels+=1\n        else:\n            n_consonants+=1\n    print('Number of vowels are {} and number of consonants are {}.'.format(n_vowels,n_consonants))\ndef print_vowels_of_a_given_string(s):\n    '''\n    Write a Python function to print all the vowels of a given string.\n    '''\n    vowels=['a','e','i','o','u']\n    s=s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            print(s[i],end=' ')\ndef print_first_2_vowels_of_a_given_string(s):\n    '''\n    Write a Python function to print first 2 vowels of a given string.\n    '''\n    vowels=['a','e','i','o','u']\n    s=s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            print(s[i],end=' ')\n            break\ndef print_first_2_consonants_of_a_given_string(s):\n    '''\n    Write a Python function to print first 2 consonants of a given string.\n    '''\n    vowels=['a','e','i','o','u']\n    s=s.lower()\n    for i in range(len(s)):\n        if s[i] not in vowels:\n            print(s[i],end=' ')\n            break\ndef print_numbers_in_a_range(a,b):\n    '''\n    Write a Python function to print all the numbers between two given numbers.\n    '''\n    for i in range(a,b+1):\n        print(i,end=' ')\ndef print_even_numbers_in_a_range(a,b):\n    '''\n    Write a Python function to print all the even numbers between two given numbers.\n    '''\n    for i in range(a,b+1):\n        if i%2==0:\n            print(i,end=' ')\ndef print_odd_numbers_in_a_range(a,b):\n    '''\n    Write a Python function to print all the odd numbers between two given numbers.\n    '''\n    for i in range(a,b+1):\n        if i%2!=0:\n            print(i,end=' ')\ndef print_numbers_divisible_by_3_between_0_and_100():\n    '''\n    Write a Python function to print all the numbers between 0 to 100 divisible by 3.\n    '''\n    for i in range(0,101):\n        if i%3==0:\n            print(i,end=' ')\ndef print_numbers_divisible_by_5_between_0_and_100():\n    '''\n    Write a Python function to print all the numbers between 0 to 100 divisible by 5.\n    '''\n    for i in range(0,101):\n        if i%5==0:\n            print(i,end=' ')\ndef print_numbers_divisible_by_3_or_5_between_0_and_100():\n    '''\n    Write a Python function to print all the numbers between 0 to 100 divisible by 3 or 5.\n    '''\n    for i in range(0,101):\n        if i%3==0 or i%5==0:\n            print(i,end=' ')\ndef reverse_a_string(s):\n    '''\n    Write a Python function to reverse a string.\n    '''\n    s=s[::-1]\n    print(s)\ndef list_of_words_with_5_letters_in_a_string(s):\n    '''\n    Write a Python function to print all the words with 5 letters in a string.\n    '''\n    s=s.split()\n    for word in s:\n        if len(word)==5:\n            print(word)\ndef create_a_list_of_numbers_from_1_to_100():\n    '''\n    Write a Python function to create a list of numbers from 1 to 100.\n    '''\n    l=list(range(1,101))\n    print(l)\ndef create_a_list_of_numbers_from_1_to_100_divisible_by_5():\n    '''\n    Write a Python function to create a list of numbers from 1 to 100 divisible by 5.\n    '''\n    l=list(range(1,101))\n    print(l)\n    l2=[]\n    for i in range(len(l)):\n        if l[i]%5==0:\n            l2.append(l[i])\n    print(l2)\ndef create_a_list_of_numbers_from_1_to_100_not_divisible_by_5():\n    '''\n    Write a Python function to create a list of numbers from 1 to 100 not divisible by 5.\n    '''\n    l=list(range(1,101))\n    print(l)\n    l2=[]\n    for i in range(len(l)):\n        if l[i]%5!=0:\n            l2.append(l[i])\n    print(l2)\ndef remove_a_given_word(s,word):\n    '''\n    Write a Python function to remove a given word fro",
        "num_ids": 13
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Make a dictionary that stores the results of the perfect squares for a given value of N.\n    perfect_Square = {}\n    perfect_Square[1] = 1\n    perfect_Square[2] = 4\n    for i in range(3, N+1):\n        perfect_Square[i] = i*i\n",
        "num_ids": 75
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if int(root + 1) ** 2 == N:\n        return N\n    else:\n        for i in range(1, N):\n            if i ** 2 == N:\n                return N\n            elif i ** 2 > N:\n                return i ** 2\n",
        "num_ids": 75
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    size = len(arr)\n    \n    #base case\n    if size == 1:\n        return arr[0]\n    \n    #call on the recursion for the first half of the array\n    first_half_sum = max_sum(arr[:size//2])\n    \n    #call on the recursion for the second half of the array\n    second_half_sum = max_sum(arr[size//2:])\n    \n    #store the max sum of bitonic subsequence\n    max_sum = max(first_half_sum+second_half_sum, max_sum)\n    \n    #return the max sum of bitonic subsequence\n    return max(first_half_sum, second_half_sum)\n",
        "num_ids": 174
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr)-1)\n    \ndef max_sum_helper(arr, start, end):\n    if start >= end:\n        return 0\n    max_sum_until_here = float('-inf')\n    max_sum_ending_here = 0\n    for i in range(start, end+1):\n        max_sum_ending_here = max_sum_ending_here + arr[i]\n        if max_sum_ending_here < 0:\n            max_sum_ending_here = 0\n        else:\n            max_sum_until_here = max(max_sum_ending_here, max_sum_ending_here)\n    return max(max_sum_ending_here + max_sum_helper(arr, start, i-1), max_sum_until_here + max_sum_helper(arr, i+1, end))\n",
        "num_ids": 218
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = sorted(arr)\n    i = 0\n    max_sum = arr[0] + arr[1]\n    while i <= (len(arr) - 1):\n        if i == len(arr) - 1:\n            max_sum = max(max_sum, arr[i])\n        else:\n            if arr[i] + arr[i + 1] > arr[i] + arr[i + 1]:\n                max_sum = max(max_sum, arr[i] + arr[i + 1])\n            else:\n                max_sum = max(max_sum, arr[i] + arr[i + 1] + arr[i + 2])\n        i += 1\n    return max_sum\n",
        "num_ids": 169
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # n = len(arr)\n    # dp = [[0]*n for _ in range(n)]\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         if i == 0:\n    #             dp[i][j] = arr[i] + arr[j]\n    #         elif i == n-1:\n    #             dp[i][j] = arr[i] + arr[j]\n    #         else:\n    #             dp[i][j] = max(arr[i] + arr[j] + dp[i+1][j], arr[i] + arr[j] + dp[i][j-1])\n    # return dp[0][n-1]\n    n = len(arr)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = arr[i]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(arr[i] + arr[j] + dp[i+1][j], arr[i] + arr[j] + dp[i][j-1])\n    return dp[0][n-1]\n",
        "num_ids": 320
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sums = []\n    for i in range(len(arr)):\n        #sums.append(sum(arr[:i+1]))\n        sums.append(sum(arr[:i+1]))\n",
        "num_ids": 55
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max([sum(arr[:x])+sum(arr[x:]) for x in range(len(arr))])\n",
        "num_ids": 32
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize the variables\n    inc_sum = dec_sum = 0\n    inc_max = dec_max = 0\n    \n    # Iterate through the array to get the max sum of bitonic subsequences\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            inc_sum = inc_sum + arr[i]\n        else:\n            dec_sum = dec_sum + arr[i]\n            \n        if inc_sum < inc_max or dec_sum < dec_max:\n            inc_sum = dec_sum = 0\n            \n        if inc_sum > inc_max:\n            inc_max = inc_sum\n        elif dec_sum > dec_max:\n            dec_max = dec_sum\n    \n    return dec_max + inc_max\n",
        "num_ids": 196
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_subarray_sum(arr, 0, len(arr)-1)\n",
        "num_ids": 22
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # to find maximum increasing subsequence\n    def maxSumInc(arr,n):\n        inc_subseq=[arr[0]]\n        inc_subseq_len=1\n",
        "num_ids": 43
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr) \n    max_ending_here = [0]*n \n    max_so_far = [0]*n \n    max_ending_here[0] = arr[0] \n    max_ending_here[1] = max(arr[0], arr[1]) \n    for i in range(2, n): \n        max_ending_here[i] = max(max_ending_here[i-1], arr[i] + max_ending_here[i-2]) \n",
        "num_ids": 128
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Constraints:\n    # 0. The number to find the square root of must be a positive whole number.\n    # 1. The method should terminate after approximating the square root to within 1e-15.\n    # 2. The method should run in logarithmic time in the worst case scenario.\n    \n    # The Babylonian Square Root Method:\n    # The Babylonian Square Root Method (also known as the Babylonian method for finding square roots)\n    # is a method of approximating the square root of a positive number using a positive approximation value.\n    # The method is based on the observation that when you double a square root, the answer is the square of\n    # the original square root. This is true only when you can obtain an accurate approximation of the square\n    # root by using an accurate approximation of the square root of the original number.\n    # The approximation used for this method is the arithmetic mean of the approximation and the original value.\n    # The first approximation is simply the original number.\n    \n    # (1) The square root of a number may be expressed in terms of the arithmetic mean of the square of the\n    # root and the original number. The square of the root is also called the second guess. The above\n    # approximation is called the first guess.\n    \n    # (2) By the Babylonian Square Root Method, the second guess is the arithmetic mean of the first guess\n    # and the original value, or the first guess and the first guess multiplied by the first guess.\n    \n    # (3) Each iteration of the above process produces a better approximation of the square root, until\n    # the number of iterations exceeds a defined limit.\n    \n    # (4) The number of iterations is a function of the original number. This is because to get a\n    # better approximation, you must take the average of the first guess and the original value.\n    # The number of iterations is therefore a function of the original number.\n    \n    # (5) When the number of iterations is too small, the first guess becomes an approximation,\n    # but it may be very different from the square root. When the number of iterations is too large,\n    # the first guess becomes an approximation, but it may be very different from the square root.\n    # The number of iterations is dependent on the original number.\n    # The square root of a very large number can become very large, too.\n    # In this case, the first guess may become very large, too. This causes the square root of a\n    # large number to become much larger than the original value.\n    \n    # (6) As the number of iterations increases, the relative error gets smaller and smaller.\n    # If we are able to obtain an approximation within the specified limit of accuracy, we have\n    # obtained an accurate approximation of the square root of the original number.\n    # If we do not, then we have not achieved the accuracy that we want.\n    \n    # (7) When we can not achieve the desired accuracy in the number of iterations, the method returns\n    # the number of iterations and the first guess.\n    # The number of iterations for the Babylonian Square Root Method is the largest power of 2 less than or\n    # equal to the square root of the original number.\n    # The number of iterations for the Babylonian Square Root Method is a positive integer.\n    \n    # (8) The Babylonian Square Root Method uses a first guess value to produce an approximation\n    # of the square root. If the first guess value is not an accurate approximation of the square\n    # root, the algorithm may not converge.\n    # The first guess value for the square root of 2 is 1.\n    # The first guess value for the square root of 7 is 3.\n    \n    # (9) The first guess value for the square root of a large number must be positive.\n    # The first guess value for the square root of a very large number must be greater than 2.\n    # The first guess value for the square root of a very very large number must be greater than 5.\n    # The first guess value for the square root of a very very very large number must be greater\n    # than 10.\n    \n    # (10) The first guess value for the square root of a positive number must be positive.\n    # The first guess value for the square root of a negative number must be less than or equal to -2.\n    # The first guess value for the square root of a negative very large number must be less than or\n    # equal to -5.\n    # The first guess value for the square root of a negative very very large number must be less than\n    # or equal to -10.\n    \n    # The Babylonian Square Root Method - Pseudocode:\n    '''\n    initialize counter, guess, original_number, accuracy\n    while guess!= accuracy\n        new_guess = (guess + original_number/guess)/2\n        guess = new_guess\n        counter += 1\n    return (guess, counter)\n    '''\n    \n    # Consider the following program.\n    \n    import sys\n    \n    def babylonian_squareroot(number):\n        '''\n        Write a function for computing square roots using the babylonian method.\n        '''\n        # Constraints:\n        # 0. The number to find the square root of must be a positive whole number.\n        # 1. The method should terminate after approximating the square root to within 1e-15.\n        # 2. The method should run in logarithmic time in the worst case scenario.\n        \n        # The Babylonian Square Root Method:\n        # The Babylonian Square Root Method (also known as the Babylonian method for finding square roots)\n        # is a method of approximating the square root of a positive number using a positive approximation value.\n        # The method is based on the observation that when you double a square root, the answer is the square of\n        # the original square root. This is true only when you can obtain an accurate approximation of the square\n        # root by using an accurate approximation of the square root of the original number.\n        # The approximation used for this method is the arithmetic mean of the approximation and the original value.\n        # The first approximation is simply the original number.\n        \n        # (1) The square root of a number may be expressed in terms of the arithmetic mean of the square of the\n        # root and the original number. The square of the root is also called the second guess. The above\n        # approximation is called the first guess.\n        \n        # (2) By the Babylonian Square Root Method, the second guess is the arithmetic mean of the first guess\n        # and the original value, or the first guess and the first guess multiplied by the first guess.\n        \n        # (3) Each iteration of the above process produces a better approximation of the square root, until\n        # the number of iterations exceeds a defined limit.\n        \n        # (4) The number of iterations is a function of the original number. This is because to get a\n        # better approximation, you must take the average of the first guess and the original value.\n        # The number of iterations is therefore a function of the original number.\n        \n        # (5) When the number of iterations is too small, the first guess becomes an approximation,\n        # but it may be very different from the square root. When the number of iterations is too large,\n        # the first guess becomes an approximation, but it may be very different from the square root.\n        # The number of iterations is dependent on the original number.\n        # The square root of a very large number can become very large, too.\n        # In this case, the first guess may become very large, too. This causes the square root of a\n        # large number to become very large, too.\n        \n        # (6) When the number of iterations is greater than the number of iterations necessary for\n        # accuracy, the method returns the number of iterations and the first guess.\n        # The number of iterations for the Babylonian Square Root Method is the largest power of 2 less than or\n        # equal to the square root of the original number.\n        # The number of iterations for the Babylonian Square Root Method is a positive integer.\n        \n        # (7) The Babylonian Square Root Method uses a first guess value to produce an approximation\n        # of the square root. If the first guess value is not an accurate approximation of the square\n        # root, the algorithm may not converge.\n        # The first guess value for the square root of 2 is 1.\n        # The first guess value for the square root of 7 is 3.\n        \n        # (8) The first guess value for the square root of a large number must be positive.\n        # The first guess value for the square root of a very large number must be greater than 2.\n        # The first guess value for the square root of a very very large number must be greater than 5.\n        # The first guess value for the square root of a very very very large number must be greater\n        # tha",
        "num_ids": 843
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + 1) / 2\n    while abs(y * y - number) > 0.01:\n        x = y\n        y = (x + number/x) / 2\n    return y\n",
        "num_ids": 56
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximation = number\n    while True:\n        better = (approximation + number / approximation) / 2\n        if better == approximation:\n            return better\n        approximation = better\n",
        "num_ids": 47
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    while True:\n        y = (x + (number/x))/2\n        if y == x:\n            break\n        x = y\n    return y\n",
        "num_ids": 45
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('Only positive numbers are allowed')\n    if number == 0:\n        return 0\n    x = number\n    y = 1\n    while x * y!= number:\n        y = (y + x / y) / 2\n        x = number / y\n    return y",
        "num_ids": 75
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return 'That number is negative.'\n",
        "num_ids": 18
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        return \"No real roots\"\n",
        "num_ids": 17
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number/x) / 2\n    while abs(y-x) > 0.00001:\n        x = y\n        y = (x + number/x) / 2\n    return y\n    \ndef my_sqrt(number):\n    '''\n    Write a function for computing square roots using the Newton method.\n    '''\n    x = number\n    while abs(x - my_sqrt(my_sqrt(x))) > 0.00001:\n        x = my_sqrt(my_sqrt(x))\n    return x\n    \ndef my_sqrt_with_guess(number, guess):\n    '''\n    Write a function for computing square roots using the Newton method with a guess\n    '''\n    x = number\n    while abs(x - my_sqrt(my_sqrt(x))) > 0.00001:\n        x = my_sqrt(my_sqrt(x))\n        guess = x\n    return guess\n",
        "num_ids": 58
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approximate_estimate = 1.0\n    while True:\n        better_approximation = (approximate_estimate + number / approximate_estimate) / 2\n        if abs(approximate_estimate - better_approximation) < 0.001:\n            return better_approximation\n        approximate_estimate = better_approximation\n",
        "num_ids": 89
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    estimate = 1.0\n    while abs(estimate ** 2 - number) >= 0.01:\n        estimate = (estimate + number/estimate)/2\n    return estimate\n",
        "num_ids": 51
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n    length = 1\n    for i in range(n): \n        table[i][i] = 1\n    for startIndex in range(n-1, -1, -1): \n        for endIndex in range(startIndex + 1, n): \n            if str[startIndex] == str[endIndex]: \n                if endIndex - startIndex == 1 or table[startIndex + 1][endIndex - 1] == 1: \n                    table[startIndex][endIndex] = 1\n                    if length < endIndex - startIndex + 1: \n                        length = endIndex - startIndex + 1\n            else: \n                table[startIndex][endIndex] = 0\n    return length \n",
        "num_ids": 193
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n",
        "num_ids": 32
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    T = [[0 for x in range(n)]for y in range(n)]\n",
        "num_ids": 30
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n + 1)] for y in range(n + 1)] \n",
        "num_ids": 36
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n",
        "num_ids": 11
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    if n <= 1: \n        return n \n    if str[0] == str[n - 1]: \n        return 2 + lps(str[1:n - 1]) \n    else: \n        return max(lps(str[1:n]), lps(str[0:n - 1])) \n  \ndef lps_dp(str):\n    n = len(str)\n    dp = [[0 for x in range(n + 1)] for y in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1] and i!= j:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]\n",
        "num_ids": 243
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n    # Fill the table in bottom up manner \n    for i in range(n): \n        table[i][i] = 1 # Single character is always a palindrome \n        if i == n-1 and str[i] == str[i-1]: \n            table[i][i-1] = 2 # Only when the last two characters match it is a palindrome \n    for start in range(n-2, -1, -1): \n        for end in range(start+1, n): \n            if str[start] == str[end]: \n                table[start][end] = table[start+1][end-1] + 2\n            else: \n                table[start][end] = max(table[start+1][end], table[start][end-1]) \n    return table[0][n-1] \n",
        "num_ids": 232
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        dp[i][i] = 1\n    for i in range(n-1, -1, -1): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                dp[i][j] = 2 + dp[i+1][j-1]\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    return dp[0][n-1] \n",
        "num_ids": 165
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1,n):\n        l[i][i] = 1\n    for i in range(n-2,-1,-1):\n        for j in range(i+1,n):\n            if str[i] == str[j]:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i+1][j],l[i][j-1])\n",
        "num_ids": 143
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    \n    dp = [[0 for _ in range(n)] for _ in range(n)] \n",
        "num_ids": 33
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return round((1/n) + (1/((n - 1)*(n - 2)*(n - 3))))\n    \ndef harmonic_sum_lst(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return round((1/n) + (1/((n - 1)*(n - 2)*(n - 3))))\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 1/n + harmonic_sum(n-1)\n    return sum\n",
        "num_ids": 53
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Test cases\n    assert harmonic_sum(1) == 1\n    assert harmonic_sum(2) == 2\n    assert harmonic_sum(3) == 3\n",
        "num_ids": 40
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if i % 2 == 0:\n            sum += 1/i\n        else:\n            sum -= 1/i\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Check for the base case\n    if n == 1:\n        return 1\n    \n    # Otherwise, we must do the math\n    else:\n        return 1 + (1 / n) + (harmonic_sum(n - 1))\n    \ndef count_binary_substrings(s):\n    '''\n    Write a function that returns the number of substrings that start and end with the same letter in a string.\n    '''\n    # Create a variable that will keep track of our substrings\n    substring_count = 0\n    \n    # For each letter in the string\n    for i in range(len(s)):\n        # We want to add every letter to the beginning of the string to the end of the string and add one to our count\n        substring_count += 2\n        \n        # If the current letter is equal to the letter at the end of the string\n        if s[i] == s[len(s) - 1]:\n            # We don't add one to our count because we've already accounted for one\n            continue\n        \n        # Otherwise, we want to check the letter at the end of the string\n        for j in range(i + 1, len(s)):\n            # If the letters are the same, we add one to our count and reset the substring_count\n            if s[i] == s[j]:\n                substring_count += 1\n                break\n            \n    # When we're done with the loop, return our count\n    return substring_count\n    \ndef next_greatest_letter(letters, target):\n    '''\n    Write a function that takes in two strings and determines the minimum number of letter insertions needed to convert the first string into the second.\n    '''\n    # We'll make a variable to keep track of our changes\n    change_count = 0\n    \n    # The first element of our target is always going to be the smallest\n    smallest = target[0]\n    \n    # Iterate through the target\n    for i in range(len(target)):\n        # If the current letter in the target is greater than the current smallest, we know that we're making progress.\n        # We can break out of the loop because we know we won't be able to make progress any further.\n        if target[i] > smallest:\n            break\n        \n        # Otherwise, we have to do the math to figure out what the smallest letter is.\n        else:\n            # If the current letter in the target is greater than or equal to the current smallest, we know the smallest letter is going to be the current letter.\n            if target[i] >= smallest:\n                smallest = target[i]\n            \n            # If the current letter in the target is less than the current smallest, we need to figure out what the smallest letter is.\n            # If we change every letter in the string to the current smallest letter, we'll be able to get the minimum number of changes.\n            else:\n                # We'll iterate through the letters, and keep track of the changes we need to make.\n                changes = []\n                \n                # For every letter in the current string\n                for k in range(len(letters)):\n                    # If the current letter is greater than or equal to the smallest\n                    if letters[k] >= smallest:\n                        # We don't need to change anything\n                        changes.append(0)\n                    \n                    # If the current letter is less than the smallest\n                    else:\n                        # We need to change everything to the smallest letter\n                        changes.append(smallest - letters[k])\n                \n                # We want to keep track of the minimum number of changes we need to make.\n                # We'll start our counter at the maximum value possible\n                min_changes = 99999999\n                \n                # We want to iterate through the changes list, and keep track of the minimum number of changes we need to make.\n                # We'll break out of the loop once we find the minimum number of changes we need to make.\n                for l in range(len(changes)):\n                    # If this change is less than the current minimum, we want to set the current minimum to this change\n                    if changes[l] < min_changes:\n                        min_changes = changes[l]\n                        \n                    # Otherwise, we just want to keep iterating through the list of changes\n                \n                # Once we're done iterating through the changes, we want to add the minimum number of changes to our total\n                change_count += min_changes\n    \n    # Once we're done, we want to return our total change_count\n    return change_count\n    \ndef reverse_words(message):\n    '''\n    Write a function that takes in a string and returns the string in reversed order.\n    '''\n    # First, we create an empty list to hold all the words in our string\n    words = []\n    \n    # We want to iterate through the string\n    for i in range(len(message)):\n        # If we find a space, we know we've hit a word.\n        # We need to add the word to our list of words.\n        if message[i] =='':\n            words.append(message[i])\n            \n    # Once we're done with the loop, we want to reverse the list of words\n    words.reverse()\n    \n    # Once we're done with the loop, we want to join all of the words together into one string.\n    # We'll make use of the join function, and the split function.\n    result =''.join(words)\n    \n    # Once we're done, we can return the result\n    return result\n    \ndef check_permutation(str1, str2):\n    '''\n    Write a function that takes in two strings and checks if they're permutations of each other.\n    '''\n    # We'll use the fact that a permutation is just rearrangement of the letters in a string.\n    # We can use this fact to check for permutations.\n    # To check if two strings are permutations of each other, we can sort the strings and compare them to see if they're the same.\n    # We'll do this by sorting each string\n    str1 = sorted(str1)\n    str2 = sorted(str2)\n    \n    # Once we've sorted our two strings, we can compare them\n    if str1 == str2:\n        # If the strings are equal, they're a permutation.\n        # Return True\n        return True\n    \n    # If they're not equal, they're not a permutation.\n    # Return False\n    return False\n    \ndef are_anagrams(word1, word2):\n    '''\n    Write a function that takes in two strings and checks if they're anagrams of each other.\n    '''\n    # We'll make use of the check_permutation function we wrote to check if two strings are permutations of each other.\n    # We can check this by using the check_permutation function to sort the strings and then compare them\n    if check_permutation(word1, word2) == True:\n        # If they're permutations, then we return True\n        return True\n    \n    # Otherwise, we return False\n    return False\n    \ndef largest_odd_times_table(n):\n    '''\n    Write a function that takes in a positive integer n and returns the largest odd times table less than or equal to n.\n    '''\n    # The only way we can get an odd times table less than or equal to n is if n is prime, so we check for this first.\n    # If n is prime, we'll return n - 1.\n    if is_prime(n):\n        return n - 1\n        \n    # Otherwise, we'll iterate through every number less than or equal to n.\n    # We want to keep track of the largest odd times table we find.\n    # We'll start our counter at 1, since 1 is always less than or equal to n.\n    largest_odd_times_table = 1\n    \n    # We'll use a for loop to iterate through every number\n    for i in range(1, n):\n        # We want to check if i is odd\n        if i % 2 == 1:\n            # If i is odd, we want to see if it's greater than our current largest odd times table\n            if i > largest_odd_times_table:\n                # If it is, we want to update our current largest odd times table\n                largest_odd_times_table = i\n                \n    # Once we're done iterating through all of the numbers, we want to return the largest_odd_times_table\n    return largest_odd_times_table\n    \ndef is_prime(n):\n    '''\n    Write a function that takes in a positive integer n and returns whether or not n is prime.\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 + harmonic_sum(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Create base case\n    if n == 1:\n        return 1\n    # Create recursive case\n    else:\n        return n + harmonic_sum(n-1)\n",
        "num_ids": 42
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + sum([1/i for i in range(1, n)])\n",
        "num_ids": 24
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for x in array_nums1:\n        if x in array_nums2 and x not in intersection:\n            intersection.append(x)\n    return intersection\n",
        "num_ids": 48
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in result:\n            result.append(i)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # Approach 1: Brute Force: O(n^2)\n    # Approach 2: Sorting: O(nlogn + nlogm)\n    \n    # Approach 3: Hash Table: O(n + m)\n    \n    # Approach 4: Set: O(n + m)\n    \n    # Approach 5: Two Pointer: O(m + n)\n    \n    \n    # Approach 6: Merge Sort: O(nlogn + mlogm)\n    \n    # Approach 7: Intersection of Two Arrays II: O(m + n)\n    \n    # Approach 8: Binary Search: O(mlogn)\n    \n    # Approach 9: Hash Set: O(n + m)\n    \n    # Approach 10: Two Pointer: O(m + n)\n    \n    # Approach 11: Two Pointer: O(m + n)\n    \n    # Approach 12: Two Pointer: O(m + n)\n    \n    \n    # Approach 13: Two Pointer: O(m + n)\n    \n    # Approach 14: Two Pointer: O(m + n)\n    \n    # Approach 15: Two Pointer: O(m + n)\n    \n    # Approach 16: Two Pointer: O(m + n)\n    \n    \n    # Approach 17: Two Pointer: O(m + n)\n    \n    \n    # Approach 18: Two Pointer: O(m + n)\n    \n    \n    # Approach 19: Two Pointer: O(m + n)\n    \n    \n    # Approach 20: Two Pointer: O(m + n)\n    \n    \n    # Approach 21: Two Pointer: O(m + n)\n    \n    \n    # Approach 22: Two Pointer: O(m + n)\n    \n    \n    # Approach 23: Two Pointer: O(m + n)\n    \n    \n    # Approach 24: Two Pointer: O(m + n)\n    \n    \n    # Approach 25: Two Pointer: O(m + n)\n    \n    \n    # Approach 26: Two Pointer: O(m + n)\n    \n    \n    # Approach 27: Two Pointer: O(m + n)\n    \n    \n    # Approach 28: Two Pointer: O(m + n)\n    \n    \n    # Approach 29: Two Pointer: O(m + n)\n    \n    \n    # Approach 30: Two Pointer: O(m + n)\n    \n    \n    # Approach 31: Two Pointer: O(m + n)\n    \n    \n    # Approach 32: Two Pointer: O(m + n)\n    \n    \n    # Approach 33: Two Pointer: O(m + n)\n    \n    \n    # Approach 34: Two Pointer: O(m + n)\n    \n    \n    # Approach 35: Two Pointer: O(m + n)\n    \n    \n    # Approach 36: Two Pointer: O(m + n)\n    \n    \n    # Approach 37: Two Pointer: O(m + n)\n    \n    \n    # Approach 38: Two Pointer: O(m + n)\n    \n    \n    # Approach 39: Two Pointer: O(m + n)\n    \n    \n    # Approach 40: Two Pointer: O(m + n)\n    \n    \n    # Approach 41: Two Pointer: O(m + n)\n    \n    \n    # Approach 42: Two Pointer: O(m + n)\n    \n    \n    # Approach 43: Two Pointer: O(m + n)\n    \n    \n    # Approach 44: Two Pointer: O(m + n)\n    \n    \n    # Approach 45: Two Pointer: O(m + n)\n    \n    \n    # Approach 46: Two Pointer: O(m + n)\n    \n    \n    # Approach 47: Two Pointer: O(m + n)\n    \n    \n    # Approach 48: Two Pointer: O(m + n)\n    \n    \n    # Approach 49: Two Pointer: O(m + n)\n    \n    \n    # Approach 50: Two Pointer: O(m + n)\n    \n    \n    # Approach 51: Two Pointer: O(m + n)\n    \n    \n    # Approach 52: Two Pointer: O(m + n)\n    \n    \n    # Approach 53: Two Pointer: O(m + n)\n    \n    \n    # Approach 54: Two Pointer: O(m + n)\n    \n    \n    # Approach 55: Two Pointer: O(m + n)\n    \n    \n    # Approach 56: Two Pointer: O(m + n)\n    \n    \n    # Approach 57: Two Pointer: O(m + n)\n    \n    \n    # Approach 58: Two Pointer: O(m + n)\n    \n    \n    # Approach 59: Two Pointer: O(m + n)\n    \n    \n    # Approach 60: Two Pointer: O(m + n)\n    \n    \n    # Approach 61: Two Pointer: O(m + n)\n    \n    \n    # Approach 62: Two Pointer: O(m + n)\n    \n    \n    # Approach 63: Two Pointer: O(m + n)\n    \n    \n    # Approach 64: Two Pointer: O(m + n)\n    \n    \n    # Approach 65: Two Pointer: O(m + n)\n    \n    \n    # Approach 66: Two Pointer: O(m + n)\n    \n    \n    # Approach 67: Two Pointer: O(m + n)\n    \n    \n    # Approach 68: Two Pointer: O(m + n)\n    \n    \n    # Approach 69: Two Pointer: O(m + n)\n    \n    \n    # Approach 70: Two Pointer: O(m + n)\n    \n    \n    # Approach 71: Two Pointer: O(m + n)\n    \n    \n    # Approach 72: Two Pointer: O(m + n)\n    \n    \n    # Approach 73: Two Pointer: O(m + n)\n    \n    \n    # Approach 74: Two Pointer: O(m + n)\n    \n    \n    # Approach 75: Two Pointer: O(m + n)\n    \n    \n    # Approach 76: Two Pointer: O(m + n)\n    \n    \n    # Approach 77: Two Pointer: O(m + n)\n    \n    \n    # Approach 78: Two Pointer: O(m + n)\n    \n    \n    # Approach 79: Two Pointer: O(m + n)\n    \n    \n    # Approach 80: Two Pointer: O(m + n)\n    \n    \n    # Approach 81: Two Pointer: O(m + n)\n    \n    \n    # Approach 82: Two Pointer: O(m + n)\n    \n    \n    # Approach 83: Two Pointer: O(m + n)\n    \n    \n    # Approach 84: Two Pointer: O(m + n)\n    \n    \n    # Approach 85: Two Pointer: O(m + n)\n    \n    \n    # Approach 86: Two Pointer: O(m + n)\n    \n    \n    # Approach 87: Two Pointer: O(m + n)\n    \n    \n    # Approach 88: Two Pointer: O(m + n)\n    \n    \n    # Approach 89: Two Pointer: O(m + n)\n    \n    \n    # Approach 90: Two Pointer: O(m + n)\n    \n    \n    # Approach 91: Two Pointer: O(m + n)\n    \n    \n    # Approach 92: Two Pointer: O(m + n)\n    \n    \n    # Approach 93: Two Pointer: O(m + n)\n    \n    \n    # Approach 94: Two Pointer: O(m + n)\n    \n    \n    # Approach 95: Two Pointer: O(m + n)\n    \n    \n    # Approach 96: Two Pointer: O(m + n)\n    \n    \n    # Approach 97: Two Pointer: O(m + n)\n    \n    \n    # Approach 98: Two Pointer: O(m + n)\n    \n    \n    # Approach 99: Two Pointer: O(m + n)\n    \n    \n    # Approach 100: Two Pointer: O(m + n)\n    \n    \n    # Approach 101: Two Pointer: O(m + n)\n    \n    \n    # Approach 102: Two Pointer: O(m ",
        "num_ids": 2011
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #we can do this in O(n) time with two pointers where n is the length of the array\n    #our pointer should be moving towards each other until we find a number in both arrays\n    #then we can return that intersection array, or else we can increment/decrement the pointer\n    #if we encounter a number in the array that we have already encountered then we know the array is not\n    #intersecting\n",
        "num_ids": 96
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return [x for x in array_nums1 if x in array_nums2]\n    \ndef intersection_hashtable(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        dict1[num] = dict1.get(num, 0) + 1\n    for num in array_nums2:\n        dict2[num] = dict2.get(num, 0) + 1\n    return [key for key in dict1.keys() if key in dict2.keys()]\n    \ndef intersection_hashmap(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict1 = {}\n    dict2 = {}\n    for num in array_nums1:\n        dict1[num] = dict1.get(num, 0) + 1\n    for num in array_nums2:\n        dict2[num] = dict2.get(num, 0) + 1\n    return [key for key in dict1.keys() if key in dict2.keys()]\n    \n    \ndef intersection_array_sort(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    idx1 = 0\n    idx2 = 0\n    intersection_nums = []\n    while idx1 < len(array_nums1) and idx2 < len(array_nums2):\n        if array_nums1[idx1] == array_nums2[idx2]:\n            intersection_nums.append(array_nums1[idx1])\n            idx1 += 1\n            idx2 += 1\n        elif array_nums1[idx1] < array_nums2[idx2]:\n            idx1 += 1\n        else:\n            idx2 += 1\n    return intersection_nums\n    \nif __name__ == \"__main__\":\n    array_nums1 = [1,2,2,1]\n    array_nums2 = [2,2]\n    print(intersection_array(array_nums1,array_nums2))\n    print(intersection_hashtable(array_nums1,array_nums2))\n    print(intersection_hashmap(array_nums1,array_nums2))\n    print(intersection_array_sort(array_nums1,array_nums2))\n    ",
        "num_ids": 313
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1)&set(array_nums2))\n",
        "num_ids": 24
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n    return list(intersection_set)\n",
        "num_ids": 54
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    list1=[]\n    list2=[]\n    set1=[]\n    set2=[]\n",
        "num_ids": 26
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create empty set to store intersection\n    intersection = set()\n    # loop over the first array\n    for num in array_nums1:\n        # if the num is in the second array\n        if num in array_nums2:\n            # add it to the intersection set\n            intersection.add(num)\n    # return the intersection set\n    return intersection\n",
        "num_ids": 88
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i = 0\n    j = 0\n    intersection = []\n    \n    if array_nums1 and array_nums2:\n        while i < len(array_nums1) and j < len(array_nums2):\n            if array_nums1[i] == array_nums2[j]:\n                intersection.append(array_nums1[i])\n                i += 1\n                j += 1\n            elif array_nums1[i] < array_nums2[j]:\n                i += 1\n            else:\n                j += 1\n",
        "num_ids": 139
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = 0\n    for elem in tup:\n        if elem == x:\n            x += 1\n    return x\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occur_count = 0\n    for i in tup:\n        if i == x:\n            occur_count += 1\n    return occur_count\n",
        "num_ids": 39
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x_count = 0\n    for i in tup:\n        if i == x:\n            x_count = x_count+1\n    print(x_count)\n",
        "num_ids": 43
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for item in tup:\n        if item == x:\n            cnt += 1\n    return cnt\n",
        "num_ids": 34
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count \n",
        "num_ids": 32
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for x in tup: \n        if x == x: \n            count += 1 \n    return count \n",
        "num_ids": 35
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n",
        "num_ids": 12
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for num in list:\n        new_list.append(num)\n        new_list.append(element)\n    return new_list\n",
        "num_ids": 42
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for index, item in enumerate(list):\n        result.append(element)\n        result.append(item)\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n",
        "num_ids": 10
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result=[]\n    for e in list:\n        result.append(element)\n        result.append(e)\n    return result\n",
        "num_ids": 34
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # list = [5,8,7,6,3,4,9]\n    # element = 10\n    # def insert_element(list,element):\n    #     list.insert(0,element)\n    #     for i in range(len(list)-1):\n    #         list.insert(i,list[i])\n    #     return list\n    # list.insert(0,element)\n    # for i in range(len(list)-1):\n    #     list.insert(i,list[i])\n    # return list\n    # def insert_element(list,element):\n    #     return [element] + list\n    list.insert(0,element)\n    for i in range(len(list)-1):\n        list.insert(i+1,list[i])\n    return list\n",
        "num_ids": 194
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element in list:\n        return list\n    elif list == []:\n        list.insert(0,element)\n        return list\n    else:\n        new_list = []\n        for i in range(len(list)):\n            if list[i] == list[-1]:\n                new_list.insert(0,element)\n            new_list.append(list[i])\n        return new_list\nprint(insert_element([],5))\nprint(insert_element(['cat','dog','rabbit'],0))\nprint(insert_element(['cat','dog','rabbit'],1))\nprint(insert_element(['cat','dog','rabbit'],4))\n",
        "num_ids": 165
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n",
        "num_ids": 16
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #base case\n    if list == []:\n        return [element]\n    else:\n        return [element] + list",
        "num_ids": 31
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    l = []\n    for i in list:\n        l.append(i)\n        l.append(element)\n    return l\n",
        "num_ids": 34
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    res = []\n    for i in numbers:\n        complex_number = i\n        r = cmath.polar(complex_number)\n        res.append(r[0])\n        res.append(r[1])\n    return res\n",
        "num_ids": 59
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = []\n    for num in numbers:\n        r = num.real\n        i = num.imag\n        x = cmath.polar(num)\n        x = x[0]\n        y = cmath.phase(num)\n        y = y*360/(2*cmath.pi)\n        print(x,y)\n        polar.append(x)\n        polar.append(y)\n    return polar\n    \ndef sort_and_print(numbers, ascend):    \n    '''\n    Write a python function to sort complex numbers and print them in ascending order.\n    '''\n    numbers.sort()\n    print(numbers)\n    if(ascend):\n        numbers.reverse()\n        print(numbers)\n    \ndef sort_by_real(numbers):\n    '''\n    Write a python function to sort complex numbers by their real part and print them in ascending order.\n    '''\n    numbers.sort()\n    print(numbers)\n    \ndef sort_by_imag(numbers):\n    '''\n    Write a python function to sort complex numbers by their imaginary part and print them in ascending order.\n    '''\n    numbers.sort()\n    numbers.reverse()\n    print(numbers)\n",
        "num_ids": 23
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def complex_to_polar(complex_number):\n        '''\n        Return the polar coordinates of the complex number.\n        '''\n        r = float(complex_number.real)\n        i = complex_number.imag\n        if r >= 0:\n            if i >= 0:\n                return (r, i)\n            else:\n                return (r, cmath.pi * 2 - i)\n        else:\n            if i >= 0:\n                return (r, -i)\n            else:\n                return (r, cmath.pi * 2 - i)\n",
        "num_ids": 103
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def toPolar(z):\n        r = (z.real**2 + z.imag**2)**0.5\n        t = cmath.phase(z)\n        return (r,t)\n    result = list(map(toPolar, numbers))\n    return result\n",
        "num_ids": 69
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return cmath.polar(numbers)\n",
        "num_ids": 14
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar = {}\n    for i in numbers:\n        r = cmath.polar(i)[0]\n        t = cmath.polar(i)[1]\n        polar[i] = (r, t)\n    return polar\nprint(convert([(4 + 3j), (3 + 5j), (1 + 3j)]))\n'''\nWrite a python program to find the area of triangle using Heron's formula\n'''\ndef herons_formula(a, b, c):\n    '''\n    Write a python function to find the area of triangle using herons formula\n    '''\n    s = (a + b + c) / 2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5\n    return area\nprint(herons_formula(4, 4, 4))\n",
        "num_ids": 60
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for x in numbers:\n        polar_numbers.append(complex(x).polar())\n    return polar_numbers\n",
        "num_ids": 42
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    import cmath\n    \n    num = cmath.polar(numbers)\n    \n    return num\n",
        "num_ids": 30
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('\\n')\n    #print('numbers in complex number: ',numbers)\n    #print('complex numbers converted to polar coordinates: \\n',numbers.conjugate())\n    polar=[]\n    for i in numbers:\n        #print(i,': ',cmath.polar(i))\n        polar.append(cmath.polar(i))\n    print('\\n')\n    print('polar coordinates: ',polar)\n    print('\\n')\n    \n",
        "num_ids": 119
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    import cmath  \n    numbers = list(numbers)\n    numbers[0] = complex(numbers[0])\n    numbers[1] = complex(numbers[1])\n    polar = [None, None]\n    polar[0] = cmath.polar(numbers[0])\n    polar[1] = cmath.polar(numbers[1])\n    #print('Polar Coordinates:',polar)\n    return polar",
        "num_ids": 113
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([e for e in list1 if isinstance(e, int)])\n",
        "num_ids": 22
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_int = 0\n    for x in list1:\n        if type(x) == int:\n            num_int = num_int + 1\n    return num_int\n",
        "num_ids": 44
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for x in list1:\n        if isinstance(x,int):\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x,int)])\n    # return sum(isinstance(i, int) for i in list1)\n",
        "num_ids": 41
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count = count + 1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) == int:\n            count = count + 1\n    return count\n",
        "num_ids": 44
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i,int):\n            count+=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i, int):\n            count=count+1\n    return count\n",
        "num_ids": 36
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count +=1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_com = list(combinations_with_replacement(l, n))\n    return list_com\n",
        "num_ids": 28
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos = []\n    for i in range(1,len(l)+1):\n        combos += combinations_with_replacement(l,i)\n    return combos\n",
        "num_ids": 43
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = ['a', 'b', 'c']\n    # n = 2\n    # return list(map(''.join, combinations_with_replacement(l, n)))\n",
        "num_ids": 44
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    for c in combinations_with_replacement(l,n):\n        print(c)\n",
        "num_ids": 24
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = []\n    l.append(n)\n    return list(combinations_with_replacement(l, n))\n    #pass\n",
        "num_ids": 36
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    output = []\n    for item in combinations_with_replacement(l, n):\n        output.append(item)\n    return output\nprint(combinations_colors([\"red\", \"blue\", \"green\"], 2))",
        "num_ids": 54
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combination_list = []\n    for i in range(len(l)):\n        temp_list = [l[i]]\n        temp_list.extend(list(combinations_with_replacement(l, i + 1)))\n        combination_list.append(tuple(temp_list))\n    return combination_list\n",
        "num_ids": 80
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n",
        "num_ids": 19
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return list(comb)\n",
        "num_ids": 24
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n",
        "num_ids": 6
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    elif n==2:\n        return 1\n    else:\n        return count_Primes_nums(n-1)-count_Primes_nums(n-2)\n",
        "num_ids": 56
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 2:\n        return 1\n    elif n == 1:\n        return 0\n    else:\n        return count_Primes_nums(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    count=0\n    for i in range(2,n):\n        is_prime = True\n        for j in range(2,i):\n            if i%j==0:\n                is_prime=False\n        if is_prime==True:\n            count+=1\n    return count\n",
        "num_ids": 81
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = [2]\n    x = 3\n    while x <= n:\n        for y in range(3,x,2):\n            if x % y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n",
        "num_ids": 89
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    res = [0]*(n+1)\n    res[0] = res[1] = -1\n    for i in range(2, n+1):\n        if res[i] == 0:\n            res[i] = i\n            j = 2\n            while j*i <= n:\n                res[i*j] = -1\n                j += 1\n    return sum(res)\n",
        "num_ids": 108
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if (n < 2):\n        return 0\n",
        "num_ids": 14
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n==1:\n        return 0\n    count=0\n    for i in range(2,n):\n        if isPrime(i):\n            count+=1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    primes = [2]\n    x = 3\n    while x < n:\n        for y in range(3,x,2):\n            if x%y == 0:\n                x += 2\n                break\n        else:\n            primes.append(x)\n            x += 2\n    return len(primes)\n",
        "num_ids": 89
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    max_divisor = int(n ** 0.5)\n    for i in range(3, max_divisor + 1, 2):\n        if n % i == 0:\n            primes.append(i)\n            n /= i\n    if n > 2:\n        primes.append(n)\n    return len(primes)\n",
        "num_ids": 104
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n",
        "num_ids": 10
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    swap = b,a\n    return swap\n",
        "num_ids": 14
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n",
        "num_ids": 8
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n",
        "num_ids": 8
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def get_values(tup):\n        return tup[0]\n    \n    return tuple(sorted(tup1, key=get_values)[::-1] + tup2[::-1])\n",
        "num_ids": 53
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n    else:\n        print('Tuples don\\'t have the same length!')\n    return test_tup1, test_tup2\n",
        "num_ids": 106
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    \n    result = ()\n    \n    if test_tup1[0] > test_tup2[0]:\n        result = test_tup1\n    else:\n        result = test_tup2\n    \n    return result\n    \ndef test_maximize_elements():\n    assert maximize_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\n    assert maximize_elements((6, 5, 4), (1, 2, 3)) == (6, 5, 4)\n    assert maximize_elements((4, 5, 6), (1, 2, 3)) == (4, 5, 6)\n    \ntest_maximize_elements()\n",
        "num_ids": 169
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_elements = ()\n    # get max values\n    for tup1, tup2 in zip(test_tup1, test_tup2):\n        if tup1 > tup2:\n            max_elements += (tup1,)\n        elif tup2 > tup1:\n            max_elements += (tup2,)\n        else:\n            max_elements += (tup1,)\n    return max_elements\n",
        "num_ids": 111
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        elif test_tup1[1] == test_tup2[1]:\n            return max(test_tup1, test_tup2)\n",
        "num_ids": 175
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 + test_tup2\n",
        "num_ids": 16
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    res = []\n    if len(test_tup1) > len(test_tup2):\n        res = test_tup1[0:len(test_tup1)-len(test_tup2)] + test_tup2\n    else:\n        res = test_tup1 + test_tup2[0:len(test_tup2)-len(test_tup1)]\n    return tuple(res)\n",
        "num_ids": 106
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n",
        "num_ids": 28
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            new_tup += (test_tup1[i],)\n        else:\n            new_tup += (test_tup2[i],)\n    return new_tup\n",
        "num_ids": 91
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    maximum = []\n    \n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] >= test_tup2[i]:\n                maximum.append(test_tup1[i])\n            else:\n                maximum.append(test_tup2[i])\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup1[i] >= test_tup2[i]:\n                maximum.append(test_tup1[i])\n            else:\n                maximum.append(test_tup2[i])\n    return maximum\n",
        "num_ids": 173
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n == 1):\n        return 2\n    elif (n == 2):\n        return 3\n    elif (n == 3):\n        return 5\n    elif (n == 4):\n        return 7\n    elif (n == 5):\n        return 11\n    elif (n == 6):\n        return 13\n    else:\n        return next_prime(newman_prime(n-1))\n",
        "num_ids": 99
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import time\n    start = time.time()\n    nums = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499]\n    primes = []\n    for i in range(len(nums)):\n        num = nums[i]\n        if num >= n:\n            primes.append(num)\n    print(primes)\n    for prime in primes:\n        # print(prime)\n        if len(str(prime)) > 7:\n            break\n        else:\n            new_num = int(str(prime)*4)\n            print(new_num)\n            primes.append(new_num)\n    # print(primes)\n    return(primes[n-1])\n    end = time.time()\n    print(end - start)\n    return(primes[n-1])\n",
        "num_ids": 374
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    #initialize the sieve to all numbers which are true\n    sieve = [True for i in range(n+1)]\n",
        "num_ids": 32
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2: \n        return False\n    x = 2\n    while True:\n        x += 1\n        if isprime(x):\n            for i in range(1,n):\n                x += 1\n                if isprime(x):\n                    pass\n                else:\n                    return x\n",
        "num_ids": 72
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return None\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n % 2 == 0:\n        return None\n    if n % 3 == 0:\n        return None\n    if n % 5 == 0:\n        return None\n    prime = n\n    i = 6\n    while i <= n:\n        prime = next_prime(prime)\n        if i % prime == 0:\n            return None\n        i += 1\n    return prime\n",
        "num_ids": 123
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        is_prime = [True for i in range(n + 1)]\n        is_prime[0] = False\n        is_prime[1] = False\n        for i in range(4, n + 1, 2):\n            is_prime[i] = False\n        primes = []\n        for i in range(3, n + 1, 2):\n            if is_prime[i]:\n                primes.append(i)\n                for j in range(i * i, n + 1, i):\n                    is_prime[j] = False\n        return primes[-1]\n",
        "num_ids": 166
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n):\n        if n==2 or n==3:\n            return True\n        if n%2==0 or n<2:\n            return False\n        for i in range(3, int(n**0.5)+1, 2):   # only odd numbers\n            if n%i==0:\n                return False    \n        return True\n    def factors(n):\n        facts = []\n        for i in range(2, int(n**0.5)+1):\n            if n%i==0:\n                facts.append(i)\n        return facts\n    def is_newman_shanks_williams(n, i):\n        def lcm(a,b):\n            greater = max(a,b)\n            while greater%a!=0 or greater%b!=0:\n                greater += 1\n            return greater\n        def gen_prime_factors(n, i):\n            facts = factors(n)\n            prime_factors = []\n            for i in range(0, len(facts)):\n                if isprime(facts[i]):\n                    prime_factors.append(facts[i])\n            return prime_factors\n        def xgcd(a, b):\n            if a == 0:\n                return (b, 0, 1)\n            else:\n                g, y, x = xgcd(b % a, a)\n                return (g, x - (b // a) * y, y)\n        def modinv(a, m):\n            g, x, y = xgcd(a, m)\n            if g!= 1:\n                raise Exception('modular inverse does not exist')\n            else:\n                return x % m\n        def lll(p, a, l, m):\n            if a == 0:\n                return 0\n            u, v, g = xgcd(p, m)\n            return ((u * a + v * l) % m)\n        def newman_shanks_williams_iter(n, i):\n            p = gen_prime_factors(n, i)\n            p.sort()\n            p.reverse()\n            #print(p)\n            if len(p)<1:\n                return None\n            else:\n                j = len(p)\n                q = p[j - 2]\n                while q == 2:\n                    j -= 1\n                    q = p[j - 2]\n                if len(p)%2==0:\n                    q = p[j - 1]\n                    while q == 2:\n                        j -= 1\n                        q = p[j - 1]\n                else:\n                    q = p[j - 1]\n                #print(q)\n                l = 1\n                a = modinv(q, n)\n                m = int(n/q)\n                #print(a, m)\n                for i in range(0, j):\n                    l = lll(q, a, l, m)\n                    a = modinv(q, m)\n                return l\n        def test(n, i):\n            for j in range(1, i + 1):\n                l = newman_shanks_williams_iter(n, j)\n                if l!= None:\n                    return True\n            return False\n        if test(n, i)==False:\n            return \"The number is not a newman\u2013shanks\u2013williams prime.\"\n        else:\n            return newman_shanks_williams_iter(n, i)\n    prime = is_newman_shanks_williams(n, i)\n    return prime\n",
        "num_ids": 849
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def isprime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0: return False\n        return True\n    \n    def primefac(n):\n        factors=[]\n        while n%2==0: factors.append(2) ; n//=2\n        i=3\n        while i*i<=n:\n            while n%i==0:\n                factors.append(i); n//=i\n            i+=2\n        if n!=1: factors.append(n)\n        return factors\n    \n    def factorise(n):\n        return primefac(n)\n    \n    def pm(p):\n        return p[0], p[1], p[2]\n    \n    def prime_power_factorise(n):\n        '''\n        Return the prime power factorisation of n as a list\n        of tuples, (prime,exponent).\n        '''\n        x=factorise(n)\n        res=[]\n        for i in range(len(x)):\n            if x[i]!=1:\n                res.append(pm(x[i]))\n        return res\n    \n    def low_level_factorise(n):\n        factors=[]\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                factors.append(i)\n                if n//i!=i: factors.append(n//i)\n        return factors\n    \n    def nsf(n):\n        return len(low_level_factorise(n))\n    \n    def e(n):\n        return nsf(n)\n    \n    def factorise_until(n,m):\n        '''\n        Return the prime factorisation of n, the factorise up to m.\n        '''\n        x=factorise(n)\n        res=[]\n        for i in range(len(x)):\n            if x[i]<m: res.append(x[i])\n        return res\n    \n    def factorise_factorise_until(n,m):\n        '''\n        Return the prime factorisation of n, the factorise up to m.\n        '''\n        x=factorise(n)\n        res=[]\n        for i in range(len(x)):\n            if x[i]<m: res.append(x[i])\n        return res\n    \n    def n_sf_factorise(n,m):\n        x=factorise_until(n,m)\n        res=[]\n        for i in range(len(x)):\n            res.append(x[i])\n        return res\n    \n    def nsf_factorise(n,m):\n        return len(n_sf_factorise(n,m))\n    \n    def factorise_primefac(n):\n        return prime_power_factorise(n)\n    \n    def nsf_factorise_primefac(n):\n        return len(factorise_primefac(n))\n    \n    def n_sf_factorise_primefac(n):\n        return len(factorise_primefac(n))\n    \n    def is_square_residue(a,p):\n        '''\n        Return whether a is a square residue modulo p.\n        '''\n        return pow(a,(p-1)//2,p)==1\n    \n    def is_square_nonresidue(a,p):\n        '''\n        Return whether a is a square nonresidue modulo p.\n        '''\n        return not is_square_residue(a,p)\n    \n    def is_quad_residue(a,n):\n        '''\n        Return whether a is a quad residue modulo n.\n        '''\n        return is_square_residue(a,n)\n    \n    def is_quad_nonresidue(a,n):\n        '''\n        Return whether a is a quad nonresidue modulo n.\n        '''\n        return not is_square_residue(a,n)\n    \n    def sqrt_mod_p(a,p):\n        '''\n        Return the largest integer b such that b^2 is a square modulo p.\n        '''\n        return pow(a,(p+1)//4,p)\n    \n    def quadratic_nonresidue(p):\n        '''\n        Return the smallest quadratic nonresidue modulo p.\n        '''\n        return -1\n    \n    def factor_with_power(n,a):\n        '''\n        Return a factor of n with exponent a, if such a factor exists.\n        Otherwise, return None.\n        '''\n        return None\n    \n    def legendre(a,p):\n        '''\n        Return the Legendre symbol of a modulo p, using the\n        extended Euler criterion.\n        '''\n        return pow(a,(p-1)//2,p)\n    \n    def quadratic_nonresidue(p):\n        '''\n        Return the smallest quadratic nonresidue modulo p.\n        '''\n        return -1\n    \n    def legendre(a,p):\n        '''\n        Return the Legendre symbol of a modulo p, using the\n        extended Euler criterion.\n        '''\n        return pow(a,(p-1)//2,p)\n    \n    def jacobi(a,n):\n        '''\n        Return the Jacobi symbol of a modulo n.\n        '''\n        if n%2==0:\n            return 0\n        if a%n==0:\n            return 0\n        if a%n==1:\n            return 1\n        a=a%n\n        if a==0:\n            return 0\n        if a==1:\n            return 1\n        if a==2:\n            if n%8==1 or n%8==7:\n                return 1\n            else:\n                return -1\n        x=1\n        while a!=0:\n            while a%2==0:\n                a/=2\n                r=n%8\n                if r==3 or r==5:\n                    x=(-x)%n\n            a,n=n,a\n            if a%4==3 and n%4==3:\n                x=(-x)%n\n        if n==1:\n            return x\n        else:\n            return 0\n    \n    def find_next_prime(n):\n        '''\n        Return the smallest prime >n.\n        '''\n        return None\n    \n    def miller_rabin(n,b):\n        '''\n        Return True if n passes the Miller Rabin test for the\n        bth base where b is the number of bases to test it with.\n        '''\n        return False\n    \n    def common_factor(n,m):\n        '''\n        Return the largest common factor of n and m.\n        '''\n        return None\n    \n    def extended_gcd(a,b):\n        '''\n        Return three values d,u,v such that d=gcd(a,b) and\n        a*u+b*v=d.\n        '''\n        return None\n    \n    def sqrt_mod_p(a,p):\n        '''\n        Return the largest integer b such that b^2 is a square modulo p.\n        '''\n        return pow(a,(p+1)//4,p)\n    \n    def sqrt_mod_p(a,p):\n        '''\n        Return the largest integer b such that b^2 is a square modulo p.\n        '''\n        return pow(a,(p+1)//4,p)\n    \n    def totient(n):\n        '''\n        Return the Euler totient function of n.\n        '''\n        return None\n    \n    def euler_totient(n):\n        '''\n        Return the Euler totient function of n.\n        '''\n        return None\n    \n    def prime_factors(n):\n        '''\n        Return a list of the prime factors of n.\n        '''\n        return None\n    \n    def sqrt_mod_p(a,p):\n        '''\n        Return the largest integer b such that b^2 is a square modulo p.\n        '''\n        return pow",
        "num_ids": 5
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Create a list of primes\n    primes = primes_list(n)\n    if n > len(primes):\n        print('n exceeds prime list length')\n    else:\n        # Take the nth prime from the list\n        p = primes[n - 1]\n        # Compute nth root of p\n        nth_root_p = int(n ** 0.5)\n        nth_root_p_floor = math.floor(nth_root_p)\n        nth_root = nth_root_p_floor\n        # Check if the root is prime\n        if nth_root_p % 2 == 0:\n            nth_root += 1\n        while not is_prime(nth_root):\n            nth_root += 2\n        # Compute the number of digits\n        digits = len(str(p))\n        # Compute the a in a*(n^2) + b*n + c = 0\n        a = 10 ** (digits - 1)\n        b = p - (nth_root ** 2)\n        c = (nth_root * p) + nth_root\n        # Compute the nth newman\u2013shanks\u2013williams prime\n        newman_prime = a * n ** 2 + b * n + c\n        return newman_prime\n",
        "num_ids": 314
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if (len(test_tup1) == len(test_tup2)) and (len(test_tup1) > 0):\n        tup_prod = ()\n        for i in range(len(test_tup1)):\n            tup_prod += (test_tup1[i] / test_tup2[i],)\n        return tup_prod\n    else:\n        return None\n",
        "num_ids": 104
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # TO-DO: Complete the division function\n",
        "num_ids": 13
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        new_tup = ()\n        for i in range(len(test_tup1)):\n            new_tup += (test_tup1[i] / test_tup2[i],)\n        print(f'The division of the tuples is: {new_tup}')\n    except IndexError:\n        print('The given tuples are not of the same length.')\n    except TypeError:\n        print('The given tuples cannot be converted to integers.')\n    except ZeroDivisionError:\n        print('The second tuple cannot be zero.')\n    finally:\n        print('\\nDone.')\n",
        "num_ids": 154
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(tuple_a/tuple_b for tuple_a, tuple_b in zip(test_tup1, test_tup2))\n    \n    \ndef main():\n    '''\n    Test function.\n    '''\n    test_tup1 = (1,2,3,4,5,6,7,8,9,10)\n    test_tup2 = (1,1,1,1,1,1,1,1,1,1)\n    \n    result = division_elements(test_tup1, test_tup2)\n    print('Result :'+ str(result))\n    \n    \nif __name__ == '__main__':\n    main(",
        "num_ids": 113
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        result_tup = ()\n        for x in range(len(test_tup1)):\n            result_tup += (test_tup1[x]/test_tup2[x],)\n        return result_tup\n",
        "num_ids": 87
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(i // j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #check if len of first tuple is equal to the len of the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"The given tuples do not have the same length\")\n    else:\n        len_tup1 = len(test_tup1)\n    \n    #create an empty tuple to store the results\n    new_tup = ()\n    #iterate through each element in the tuple\n    for i in range(len_tup1):\n        #add the result to the new tuple\n        new_tup += (test_tup1[i] / test_tup2[i])\n    return new_tup\n",
        "num_ids": 163
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n",
        "num_ids": 18
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    lenlist = len(list1)\n    list2 = list1[0:L]\n    list3 = list1[L:]\n    return (list2, list3)\n",
        "num_ids": 44
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    split_index = len(list1)//2\n    first_part = list1[0:split_index]\n    second_part = list1[split_index:]\n    return first_part, second_part\n",
        "num_ids": 53
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if L == 0 or len(list1) <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])\n",
        "num_ids": 46
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    new_list1 = list1[:L]\n    new_list2 = list1[L:]\n    return (new_list1, new_list2)\n",
        "num_ids": 41
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l = len(list1)\n    if l % 2 == 0:\n        return list1[:l//2], list1[l//2:]\n    elif l % 2!= 0:\n        return list1[:l//2+1], list1[l//2+1:]\n",
        "num_ids": 71
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #print(list1[0:L])\n    #print(list1[L:])\n    return (list1[0:L], list1[L:])\n",
        "num_ids": 42
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Your code here\n",
        "num_ids": 8
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # i have no idea how to do this one.\n    return list1[:L], list1[L:]\n",
        "num_ids": 29
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return [list1[:L], list1[L:]]\n",
        "num_ids": 18
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return (h_age - 2) * 4 + 21\n",
        "num_ids": 39
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = h_age*10.5\n    return age\n",
        "num_ids": 17
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    #dog age = dog years * 7, human age = human years * 10\n    age_in_dog_years = h_age * 7\n    return age_in_dog_years\n    #return h_age * 10\nprint(\"\\nHello and welcome to the dog age calculator. Please enter in the following...\\n\")\n",
        "num_ids": 77
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    if h_age <= 2:\n        print(\"The dog's age in dog's years is\", h_age * 10.5)\n    elif h_age <= 6:\n        print(\"The dog's age in dog's years is\", h_age * 4)\n    elif h_age <= 10:\n        print(\"The dog's age in dog's years is\", h_age * 2)\n    elif h_age <= 15:\n        print(\"The dog's age in dog's years is\", h_age * 1.5)\n    elif h_age <= 20:\n        print(\"The dog's age in dog's years is\", h_age * 1.2)\n    elif h_age <= 22:\n        print(\"The dog's age in dog's years is\", h_age * 0.9)\n    else:\n        print(\"The dog's age in dog's years is\", h_age * 0.8)\n        \n",
        "num_ids": 219
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int((h_age * 7) + (10 * 6))\n",
        "num_ids": 19
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n",
        "num_ids": 10
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + (h_age - 2) * 4\n    return dog_age\n",
        "num_ids": 51
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + h_age * 4\n    return dog_age\n",
        "num_ids": 47
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 10.5\n",
        "num_ids": 12
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 1999
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split = list_split(S, step)\n    # if step == len(S):\n    #     return [S]\n    # if step == 1:\n    #     return [S]\n    # return list_split(S[step:], step) + [split[step:]]\n",
        "num_ids": 71
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) < step:\n        return []\n    if step <= 1:\n        return [S]\n    return [S[i::step] for i in range(step)]\n",
        "num_ids": 46
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "num_ids": 27
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    for i in range(0, len(S), step):\n        yield S[i:i + step]\n",
        "num_ids": 29
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Your code here\n    # Use a list comprehension to create a new list\n    # new_list = [new_list, new_list, new_list]\n    pass\n",
        "num_ids": 43
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    i = 0\n    while i < len(S):\n        split_list.append(S[i:i+step])\n        i += step\n    return split_list\n",
        "num_ids": 50
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # S = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    # n = 3\n    # S = [1,2,3,4,5,6,7,8,9]\n    # step = 3\n    # S = [1,2,3,4,5,6,7,8,9]\n    # n = 1\n    # step = 1\n    result = []\n    for i in range(0,len(S),step):\n        if S[i:i+step]:\n            result.append(S[i:i+step])\n    return result\nprint(list_split(S, step))\n",
        "num_ids": 172
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface_area(l):\n        return 6*l*l\n    return lateral_surface_area(l)\n",
        "num_ids": 32
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*6\n",
        "num_ids": 8
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surfacearea = 6*l**2\n    return surfacearea\n    \nprint(lateralsurface_cube(10))\n",
        "num_ids": 31
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(l ** 2)\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6*(l**2)\n    return(surface_area)\n",
        "num_ids": 23
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n",
        "num_ids": 10
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Your code here\n    return sum([i*i for i in range(1, n+1, 2)])\n",
        "num_ids": 30
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(1, n+1, 2)])\n",
        "num_ids": 24
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum",
        "num_ids": 30
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n + 1):\n        if x % 2!= 0:\n            sum += x**2\n    return sum\n",
        "num_ids": 41
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n%2 == 0:\n        return None\n    return ((n+1)*n)/2\n",
        "num_ids": 26
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n < 1:\n        return -1\n",
        "num_ids": 14
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    def sum_Squares(n):\n        '''\n        Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n        '''\n        \n        sum_of_squares = 0\n        i = 1\n        while i <= n:\n            sum_of_squares = sum_of_squares + (i*i)\n            i += 1\n        return sum_of_squares\n    print(sum_Squares(n))\n",
        "num_ids": 72
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n % 2 == 0:\n        return n * (n+1)**2\n    else:\n        return n * (n+1)**2 + n + 1\n",
        "num_ids": 43
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #Initialize the sum of the squares of the first n odd natural numbers to 0\n    sum_Of_Squares = 0\n    #Loop through n\n    for i in range(n+1):\n        #Calculate the sum of squares\n        sum_Of_Squares += i**2\n    #Return the sum of the squares of the first n odd natural numbers\n    return sum_Of_Squares\n    \ndef main():\n    #Print the result of calling square_Sum(5)\n    print(square_Sum(5))\n    #Print the result of calling square_Sum(10)\n    print(square_Sum(10))\n    ",
        "num_ids": 150
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = ''\n    while n > 0:\n        n, r = divmod(n - 1, 3)\n        star_num += '*' * r\n    return star_num\n",
        "num_ids": 48
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def number(num):\n        num = list(map(int, list(num)))\n        for i in range(len(num)-1):\n            if num[i] > num[i+1]:\n                return False\n        return True\n    n = int(n)\n    count = 1\n    cur = 1\n    while count < n:\n        cur += 2*(count+1)\n        count += 1\n    if number(cur):\n        return cur\n    else:\n        cur += 2\n        while count < n:\n            cur += 2*(count+1)\n            count += 1\n        if number(cur):\n            return cur\n        else:\n            return -1\nprint(find_star_num(n)",
        "num_ids": 172
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star = [0]*n\n    star[0] = 1\n    for i in range(1, n):\n        temp = [1]\n        for j in range(1, i):\n            temp.append(star[j-1]+star[j])\n        temp.append(1)\n        star = temp\n    return star[n-1]\n",
        "num_ids": 86
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * find_star_num(n - 1) + 1\n",
        "num_ids": 34
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        return None\n",
        "num_ids": 22
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n",
        "num_ids": 29
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # n = 2\n    # star_num = 2 * (n - 1) + 1\n    star_num = n * 2 - 1\n    return star_num\n",
        "num_ids": 41
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # star_num = 0\n    # for i in range(n):\n    #     star_num += 5**i\n",
        "num_ids": 31
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # using a binary search:\n    # find the mid point:\n    mid = int((n - 1) / 2)\n    # if mid is even, the star number is to the right of the mid:\n    if mid % 2 == 0:\n        star_num = 2 * mid + 1\n    # else if the mid is odd, the star number is to the left of the mid:\n    else:\n        star_num = 2 * (mid + 1) - 1\n    \n    # if the star number is equal to the input number, return the star number\n    if star_num == n:\n        return star_num\n    \n    # if the star number is larger than the input number, move to the left side\n    elif star_num > n:\n        return find_star_num(n)\n    # if the star number is smaller than the input number, move to the right side\n    else:\n        return find_star_num(n - star_num)\n",
        "num_ids": 225
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # Recursive function to calculate the star number.\n    def find_star_num_recursive(n, start): \n        # Base cases\n        if (n == 0): \n            return start\n        else:\n            # Divide the star number by 2\n            return find_star_num_recursive(n - 1, start * 2)\n",
        "num_ids": 82
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef to_string(k):\n    '''\n    Write a function to convert the ascii value to a character.\n    '''\n    return chr(k)\n    \ndef encrypt(s,k):\n    '''\n    Encrypt the string using Caesar cipher.\n    '''\n    result = ''\n    for c in s:\n        result += to_string((ascii_value(c) + k) % 122)\n    return result\n    \ndef decrypt(s,k):\n    '''\n    Decrypt the string using Caesar cipher.\n    '''\n    result = ''\n    for c in s:\n        result += to_string((ascii_value(c) - k) % 122)\n    return result\n    \ns = input('Enter a string: ')\nk = int(input('Enter a key: '))\nencrypted = encrypt(s,k)\nprint(f'Encrypted: {encrypted}')\ndecrypted = decrypt(encrypted,k)\nprint(f'Decrypted: {decrypted}')",
        "num_ids": 109
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # TODO\n    return ord(k)\n",
        "num_ids": 14
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return k.encode('ascii')\n",
        "num_ids": 14
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return ord(k)\n",
        "num_ids": 11
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if ord(k) == 32:\n        return 32\n    elif ord(k) == 33:\n        return 33\n    elif ord(k) == 34:\n        return 34\n    elif ord(k) == 35:\n        return 35\n    elif ord(k) == 36:\n        return 36\n    elif ord(k) == 37:\n        return 37\n    elif ord(k) == 38:\n        return 38\n    elif ord(k) == 39:\n        return 39\n    elif ord(k) == 40:\n        return 40\n    elif ord(k) == 41:\n        return 41\n    elif ord(k) == 42:\n        return 42\n    elif ord(k) == 43:\n        return 43\n    elif ord(k) == 44:\n        return 44\n    elif ord(k) == 45:\n        return 45\n    elif ord(k) == 46:\n        return 46\n    elif ord(k) == 47:\n        return 47\n    elif ord(k) == 48:\n        return 48\n    elif ord(k) == 49:\n        return 49\n    elif ord(k) == 50:\n        return 50\n    elif ord(k) == 51:\n        return 51\n    elif ord(k) == 52:\n        return 52\n    elif ord(k) == 53:\n        return 53\n    elif ord(k) == 54:\n        return 54\n    elif ord(k) == 55:\n        return 55\n    elif ord(k) == 56:\n        return 56\n    elif ord(k) == 57:\n        return 57\n    elif ord(k) == 58:\n        return 58\n    elif ord(k) == 59:\n        return 59\n    elif ord(k) == 60:\n        return 60\n    elif ord(k) == 61:\n        return 61\n    elif ord(k) == 62:\n        return 62\n    elif ord(k) == 63:\n        return 63\n    elif ord(k) == 64:\n        return 64\n    elif ord(k) == 65:\n        return 65\n    elif ord(k) == 66:\n        return 66\n    elif ord(k) == 67:\n        return 67\n    elif ord(k) == 68:\n        return 68\n    elif ord(k) == 69:\n        return 69\n    elif ord(k) == 70:\n        return 70\n    elif ord(k) == 71:\n        return 71\n    elif ord(k) == 72:\n        return 72\n    elif ord(k) == 73:\n        return 73\n    elif ord(k) == 74:\n        return 74\n    elif ord(k) == 75:\n        return 75\n    elif ord(k) == 76:\n        return 76\n    elif ord(k) == 77:\n        return 77\n    elif ord(k) == 78:\n        return 78\n    elif ord(k) == 79:\n        return 79\n    elif ord(k) == 80:\n        return 80\n    elif ord(k) == 81:\n        return 81\n    elif ord(k) == 82:\n        return 82\n    elif ord(k) == 83:\n        return 83\n    elif ord(k) == 84:\n        return 84\n    elif ord(k) == 85:\n        return 85\n    elif ord(k) == 86:\n        return 86\n    elif ord(k) == 87:\n        return 87\n    elif ord(k) == 88:\n        return 88\n    elif ord(k) == 89:\n        return 89\n    elif ord(k) == 90:\n        return 90\n    elif ord(k) == 91:\n        return 91\n    elif ord(k) == 92:\n        return 92\n    elif ord(k) == 93:\n        return 93\n    elif ord(k) == 94:\n        return 94\n    elif ord(k) == 95:\n        return 95\n    elif ord(k) == 96:\n        return 96\n    elif ord(k) == 97:\n        return 97\n    elif ord(k) == 98:\n        return 98\n    elif ord(k) == 99:\n        return 99\n    elif ord(k) == 100:\n        return 100\n    elif ord(k) == 101:\n        return 101\n    elif ord(k) == 102:\n        return 102\n    elif ord(k) == 103:\n        return 103\n    elif ord(k) == 104:\n        return 104\n    elif ord(k) == 105:\n        return 105\n    elif ord(k) == 106:\n        return 106\n    elif ord(k) == 107:\n        return 107\n    elif ord(k) == 108:\n        return 108\n    elif ord(k) == 109:\n        return 109\n    elif ord(k) == 110:\n        return 110\n    elif ord(k) == 111:\n        return 111\n    elif ord(k) == 112:\n        return 112\n    elif ord(k) == 113:\n        return 113\n    elif ord(k) == 114:\n        return 114\n    elif ord(k) == 115:\n        return 115\n    elif ord(k) == 116:\n        return 116\n    elif ord(k) == 117:\n        return 117\n    elif ord(k) == 118:\n        return 118\n    elif ord(k) == 119:\n        return 119\n    elif ord(k) == 120:\n        return 120\n    elif ord(k) == 121:\n        return 121\n    elif ord(k) == 122:\n        return 122\n    elif ord(k) == 123:\n        return 123\n    elif ord(k) == 124:\n        return 124\n    elif ord(k) == 125:\n        return 125\n    elif ord(k) == 126:\n        return 126\n    elif ord(k) == 127:\n        return 127\n    elif ord(k) == 160:\n        return 160\n    elif ord(k) == 161:\n        return 161\n    elif ord(k) == 162:\n        return 162\n    elif ord(k) == 163:\n        return 163\n    elif ord(k) == 164:\n        return 164\n    elif ord(k) == 165:\n        return 165\n    elif ord(k) == 166:\n        return 166\n    elif ord(k) == 167:\n        return 167\n    elif ord(k) == 168:\n        return 168\n    elif ord(k) == 169:\n        return 169\n    elif ord(k) == 170:\n        return 170\n    elif ord(k) == 171:\n        return 171\n    elif ord(k) == 172:\n        return 172\n    elif ord(k) == 173:\n        return 173\n    elif ord(k) == 174:\n        return 174\n    elif ord(k) == 175:\n        return 175\n    elif ord(k) == 176:\n        return 176\n    elif ord(k) == 177:\n        return 177\n    elif ord(k) == 178:\n        return 178\n    elif ord(k) == 179:\n        return 179\n    elif ord(k) == 180:\n        return 180\n    elif ord(k) == 181:\n        return 181\n    elif ord(k) == 182:\n        return 182\n    elif ord(k) == 183:\n        return 183\n    elif ord(k) == 184:\n        return 184\n    elif ord(k) == 185:\n        return 185\n    elif ord(k) == 186:\n        return 186\n    elif ord(k) == 187:\n        return 187\n    elif ord(k) == 188:\n        return 188\n    elif ord(k) == 189:\n        return 189\n    elif ord(k) == 190:\n        return 190\n    elif ord(k) == 191:\n        return 191\n    elif ord(k) == 192:\n        return 192\n    elif ord(k) == 193:\n        return 193\n    elif ord(k) == 194:\n        return 194\n    elif ord(k) == 195:\n        return 195\n    elif ord(k) == 196:\n        return 196\n    elif ord(k) == 197:\n        return 197\n    elif ord",
        "num_ids": 2015
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "num_ids": 9
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            res += arr[i]\n    return res\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 51
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    if len(arr) == 0:\n        return 0\n    else:\n        for i in arr:\n            if arr.index(i) % 2 == 0:\n                if i % 2 == 0:\n                    sum_even = sum_even + i\n                else:\n                    pass\n            else:\n                pass\n        return sum_even\n",
        "num_ids": 88
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if not arr:\n        return 0\n    \n    sum_even_even = 0\n    \n    for i in range(len(arr)):\n        if i%2==0 and arr[i]%2==0:\n            sum_even_even += arr[i]\n            \n    return sum_even_even\n    \n    ",
        "num_ids": 80
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    sum_even = 0\n    \n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even\n    \ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_even_odd = 0\n    \n    for i in range(0,len(arr)):\n        if i % 2 == 1:\n            sum_even_odd += arr[i]\n    return sum_even_odd\n    \ndef sum_all_odd_and_even(arr):\n    '''\n    Write a python function to find the sum of all odd numbers and all even numbers in a list.\n    '''\n    \n    sum_all_even_odd = 0\n    \n    for i in range(0,len(arr)):\n        if i % 2 == 0:\n            sum_all_even_odd += arr[i]\n        else:\n            sum_all_even_odd += arr[i]\n    return sum_all_even_odd\n    \ndef max_even_and_odd(arr):\n    '''\n    Write a python function to find the largest even and odd numbers in a list.\n    '''\n    \n    max_even = 0\n    max_odd = 0\n    \n    for i in range(0,len(arr)):\n        if i % 2 == 0 and arr[i] > max_even:\n            max_even = arr[i]\n        elif i % 2 == 1 and arr[i] > max_odd:\n            max_odd = arr[i]\n    \n    if max_even == 0:\n        return max_odd\n    elif max_odd == 0:\n        return max_even\n    else:\n        return max_even, max_odd\n    \ndef max_number(arr):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    \n    max_num = 0\n    \n    for i in range(0,len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\n    \ndef min_number(arr):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    \n    min_num = arr[0]\n    \n    for i in range(0,len(arr)):\n        if arr[i] < min_num:\n            min_num = arr[i]\n    return min_num\n    \ndef sum_pos_and_neg(arr):\n    '''\n    Write a python function to find the sum of positive and negative numbers in a list.\n    '''\n    \n    sum_pos_neg = 0\n    \n    for i in range(0,len(arr)):\n        if arr[i] < 0:\n            sum_pos_neg += arr[i]\n    return sum_pos_neg\n    \ndef is_all_even(arr):\n    '''\n    Write a python function to check if all numbers in a list are even.\n    '''\n    \n    for i in range(0,len(arr)):\n        if arr[i] % 2!= 0:\n            return False\n    return True\n    \ndef is_all_odd(arr):\n    '''\n    Write a python function to check if all numbers in a list are odd.\n    '''\n    \n    for i in range(0,len(arr)):\n        if arr[i] % 2 == 0:\n            return False\n    return True\n    \ndef is_all_positive(arr):\n    '''\n    Write a python function to check if all numbers in a list are positive.\n    '''\n    \n    for i in range(0,len(arr)):\n        if arr[i] < 0:\n            return False\n    return True\n    \ndef is_all_negative(arr):\n    '''\n    Write a python function to check if all numbers in a list are negative.\n    '''\n    \n    for i in range(0,len(arr)):\n        if arr[i] > 0:\n            return False\n    return True\n    \ndef is_greater_than_middle(arr):\n    '''\n    Write a python function to check if all numbers in a list are greater than the middle number.\n    '''\n    \n    middle = len(arr) // 2\n    for i in range(0,len(arr)):\n        if i < middle:\n            if arr[i] <= arr[middle]:\n                return False\n        else:\n            if arr[i] <= arr[middle]:\n                return True\n    return True\n    \ndef even_and_odd_index(arr):\n    '''\n    Write a python function to check if all even numbers and all odd numbers exist in a list.\n    '''\n    \n    for i in range(0,len(arr)):\n        if i % 2 == 0 and arr[i] % 2!= 0:\n            return False\n        elif i % 2 == 1 and arr[i] % 2 == 0:\n            return False\n    return True\n    \ndef reverse(arr):\n    '''\n    Write a python function to reverse all numbers in a list.\n    '''\n    \n    new_arr = []\n    for i in range(len(arr) - 1, -1, -1):\n        new_arr.append(arr[i])\n    return new_arr\n    \ndef last_occurrence(arr,num):\n    '''\n    Write a python function to find the last occurrence of a number in a list.\n    '''\n    \n    count = 0\n    for i in range(0,len(arr)):\n        if arr[i] == num:\n            count += 1\n    return count\n    \ndef min_max_sublist(arr):\n    '''\n    Write a python function to find the minimum and maximum numbers in a list of sublists.\n    '''\n    \n    min_max = []\n    for i in range(0,len(arr)):\n        if len(arr[i]) == 0:\n            min_max.append(0)\n            min_max.append(0)\n        else:\n            min_max.append(min(arr[i]))\n            min_max.append(max(arr[i]))\n    return min_max\n    \ndef find_sublist(arr,target):\n    '''\n    Write a python function to find if a target number exists in a list of sublists.\n    '''\n    \n    for i in range(0,len(arr)):\n        if target in arr[i]:\n            return True\n    return False\n    \ndef find_sublist_position(arr,target):\n    '''\n    Write a python function to find the position of a target number in a list of sublists.\n    '''\n    \n    for i in range(0,len(arr)):\n        if target in arr[i]:\n            return i\n    return -1\n    \ndef find_all_occurrence(arr,num):\n    '''\n    Write a python function to find all occurrences of a number in a list.\n    '''\n    \n    index = []\n    for i in range(0,len(arr)):\n        if num == arr[i]:\n            index.append(i)\n    return index\n    \ndef find_all_occurrence_sort(arr,num):\n    '''\n    Write a python function to find all occurrences of a number in a list in sorted order.\n    '''\n    \n    index = []\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == num:\n            index.append(mid)\n            left += 1\n        elif arr[mid] < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if arr[left] == num:\n        index.append(left)\n    return index\n    \ndef find_all_occurrence_range(arr,num):\n    '''\n    Write a python function to find all occurrences of a number in a list within a range.\n    '''\n    \n    index = []\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // ",
        "num_ids": 41
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n",
        "num_ids": 49
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(list(filter(lambda x: x%2==0, arr)))\n",
        "num_ids": 22
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            total += arr[i]\n    return total\n",
        "num_ids": 40
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    #Write the function here\n    total = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total += arr[i]\n    return total\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n",
        "num_ids": 90
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(x for i, x in enumerate(arr) if i%2 == 0 and x%2 == 0)\n",
        "num_ids": 31
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i ** 5)\n    return total\n",
        "num_ids": 29
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans = 0\n    for i in range(1,n+1):\n        ans += i**5\n    return ans\n",
        "num_ids": 31
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    ans=0\n    for i in range(n):\n        if i%2==0:\n            ans+=i**5\n    return ans\ndef check_Trees(trees):\n    '''\n    Write a function that takes in an array of integers and returns a boolean indicating whether the array can be made up of consecutive trees of 1s.\n    '''\n    ans=0\n    for i in range(len(trees)):\n        if trees[i]==0:\n            ans+=1\n        else:\n            ans=0\n        if ans>=3:\n            return False\n    return True\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef is_Double_Subarray(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns a boolean indicating whether the array contains a double subarray of size 2.\n    '''\n    flag=0\n    for i in range(n):\n        if arr[i]==0:\n            flag+=1\n    if flag==0:\n        return True\n    else:\n        flag=0\n        for i in range(n):\n            if arr[i]==2:\n                flag+=1\n        if flag==0:\n            return True\n        else:\n            return False\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays(arr, n):\n    '''\n    Write a function that takes in an array of integers and returns an array of size 2 where the ith element of the array contains the sum of the subarray of arr from index i to index j.\n    '''\n    ans=[]\n    for i in range(n):\n        curr_sum=0\n        for j in range(i,n):\n            curr_sum+=arr[j]\n            ans.append(curr_sum)\n    return ans\ndef check_Subarrays",
        "num_ids": 67
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i**5)\n    return sum\n",
        "num_ids": 33
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([i**5 for i in range(1,n+1) if i % 2 == 0])\n    \nif __name__ == '__main__':\n    print(even_Power_Sum(10))\n    # >>> 479001600\n    print(even_Power_Sum(100))\n    # >>> 5040\n    print(even_Power_Sum(1000))\n    # >>> 6796600",
        "num_ids": 98
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # base case\n    if n == 0:\n        return 0\n    # all divisors of n that are not a factor of n are odd\n    elif n % 2 == 1:\n        return even_Power_Sum(n-1)\n    # a power of 2 will have a divisor of 2 and thus be even\n    elif n % 2 == 0:\n        return (n**5) + even_Power_Sum(n-2)\n",
        "num_ids": 107
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum([(i**5) for i in range(n) if i%2==0])\n",
        "num_ids": 26
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sum_of_powers(n):\n        total = 0\n        for i in range(n):\n            if i % 2 == 0:\n                total += i**5\n        return total\n    return sum_of_powers(n)\n",
        "num_ids": 58
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)*(n+3)*(n+4)//24\n",
        "num_ids": 44
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def sumOfSquares(n):\n        sum = 0\n        for i in range(1, n + 1):\n            sum += i ** 2\n        return sum\n",
        "num_ids": 41
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for x in test_list:\n        rear_list.append(x[1])\n    return rear_list\n    ",
        "num_ids": 39
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # take out the front element and store it in a variable\n    new_list = [item[1] for item in test_list]\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[1])\n    return new_list\n",
        "num_ids": 38
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Add code here\n",
        "num_ids": 8
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(item[1])\n    return new_list\n",
        "num_ids": 36
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_rear_elements = []\n    for tuple in test_list:\n        list_of_rear_elements.append(tuple[1])\n    return list_of_rear_elements\n",
        "num_ids": 55
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1, test_tup2 = tuple(test_tup1), tuple(test_tup2)\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 67
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res = tuple(map(lambda x: x[0]-x[1], zip(test_tup1, test_tup2)))\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 37
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n",
        "num_ids": 22
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Implement\n    return [test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))]\n    # Explain your code\n    '''\n    '''\n",
        "num_ids": 2
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # test_tup1 = (1, 2, 3, 4, 5, 6)\n    # test_tup2 = (2, 3, 4, 6, 3, 7)\n    # result = (1, 1, 1, 1, 0, -2)\n    # result2 = (1, 0, -1, -2, 0, -2)\n    # test_tup1 = (2, 2, 2, 2)\n    # test_tup2 = (2, 2, 2, 2)\n    # result = (0, 0, 0, 0)\n    # result2 = (0, 0, 0, 0)\n    # test_tup1 = (4, 5, 3, 2, 6, 3)\n    # test_tup2 = (2, 3, 4, 2, 2, 3)\n    # result = (4, 5, 1, 2, 0, 3)\n    # result2 = (2, 5, 1, 0, 0, 1)\n    return tuple(test_tup1[i] - test_tup2[i] for i in range(0, len(test_tup1)))\n",
        "num_ids": 270
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return [x - y for x, y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    result = tuple(a - b for a, b in zip(tup1, tup2))\n    print(result)\n",
        "num_ids": 60
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Method 1:\n",
        "num_ids": 8
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    for i in range(len(list1)):\n        list1[i] = list1[i] - list2[i]\n    return tuple(list1)\n",
        "num_ids": 68
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    result = 0\n    for i in range(0,n+1):\n        result += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return result\n    \ndef binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients.\n    '''\n    result = 0\n    for i in range(0,n+1):\n        result += math.factorial(n)/(math.factorial(i)*math.factorial(n-i))\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([math.factorial(n)/(math.factorial(i)*math.factorial(n-i)) for i in range(0, n, 2)])\n",
        "num_ids": 43
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return 0\n    ans = [0]*(n+1)\n    ans[0] = 0\n    ans[1] = 1\n    for i in range(2, n+1):\n        ans[i] = ans[i-1] + ans[i-2]\n    return sum([ans[i] for i in range(0, n, 2)])\n",
        "num_ids": 96
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    if(n < 0):\n        return 0\n    else:\n        return(sum([math.factorial(i)/(math.factorial(n)*math.factorial(i-n)) for i in range(n,0,-2)]))\n",
        "num_ids": 62
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    for k in range(0, n+1):\n        if(k%2 == 0):\n            ans += (math.factorial(n)/(math.factorial(k) * math.factorial(n - k))) \n    return ans\n",
        "num_ids": 65
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # base case\n    if(n == 1):\n        return 0\n    \n    # The sum of even index terms is 2 + 4 + 6 + 8 +... + 2n\n    # The sum of odd index terms is 1 + 3 + 5 + 7 +... + (2n-1)\n    \n    # To get the even index terms, sum all the odd index terms, and subtract 1 from the sum.\n    # The result is equal to the sum of even index terms.\n    return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2) - 1\n    \ndef even_binomial_Coeff_Sum_Aprox(n, aprox):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    This function will use an approximation to the aprox value.\n    '''\n    \n    if(n == 1):\n        return 0\n    \n    # The sum of even index terms is 2 + 4 + 6 + 8 +... + 2n\n    # The sum of odd index terms is 1 + 3 + 5 + 7 +... + (2n-1)\n    \n    # To get the even index terms, sum all the odd index terms, and subtract 1 from the sum.\n    # The result is equal to the sum of even index terms.\n    return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2) - 1\n    \ndef even_binomial_Coeff_Sum_Aprox_diff(n, aprox):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    This function will use an approximation to the aprox value.\n    \n    The difference between the sum of even index terms and the sum of even index terms.\n    '''\n    return even_binomial_Coeff_Sum_Aprox(n, aprox) - even_binomial_Coeff_Sum(n, aprox)\n    \ndef is_even_binomial_coefficient(n, k):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    \n    # base case\n    if(n == 1):\n        return True\n        \n    # if n is a multiple of k\n    if n%k == 0:\n        # Then we have that k is a factor of n\n        return True\n        \n    # If k is greater than n/2, then k cannot be a factor of n\n    if k > n/2:\n        return False\n        \n    # Otherwise we have that k is a factor of n if and only if\n    # 2k is a factor of n and n-k is a multiple of k\n    return is_even_binomial_coefficient(n, k*2) and is_even_binomial_coefficient(n-k, k)\n    \ndef is_even_binomial_coefficient_Aprox(n, aprox):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    This function will use an approximation to the aprox value.\n    '''\n    \n    # base case\n    if(n == 1):\n        return True\n        \n    # if n is a multiple of k\n    if n%2 == 0:\n        # Then we have that k is a factor of n\n        return True\n        \n    # If k is greater than n/2, then k cannot be a factor of n\n    if aprox > (n/2):\n        return False\n        \n    # Otherwise we have that k is a factor of n if and only if\n    # 2k is a factor of n and n-k is a multiple of k\n    return is_even_binomial_coefficient_Aprox(n, aprox) and is_even_binomial_coefficient(n, aprox)\n    \ndef is_even_binomial_coefficient_Aprox_diff(n, aprox):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    This function will use an approximation to the aprox value.\n    \n    The difference between the sum of even index terms and the sum of even index terms.\n    '''\n    return is_even_binomial_coefficient_Aprox(n, aprox) - is_even_binomial_coefficient(n, aprox)\n",
        "num_ids": 42
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    ans = 0\n    # We can implement this using the formula for binomial coefficients, B(n, k) = nCk = n(n-1)(n-2)...(n-k+1)/(k!(n-k)!).\n    # nCk = n!/(k! * (n - k)!)\n    for i in range(0, n + 1):\n        # B(n, k) = n!/(k! * (n - k)!)\n        k = i\n        n_factorial = 1\n        for j in range(2, k + 1):\n            n_factorial = n_factorial * j\n        k_factorial = 1\n        for j in range(1, k):\n            k_factorial = k_factorial * j\n        binomial_coefficient = n_factorial / (k_factorial * (n - k + 1))\n        if i % 2 == 0:\n            ans = ans + binomial_coefficient\n    return ans\n",
        "num_ids": 234
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        if (i%2)==0:\n            sum+=binomial_Coeff(i, n)\n    return sum\ndef binomial_Coeff( n, k): \n    '''\n    Write a python function that takes in two positive integers n and k and finds the binomial coefficient (n k)\n    '''\n    if (k==0 or k == n): \n        return 1\n    if (k>n): \n        return 0\n    else:\n        return int((math.factorial(n))/(math.factorial(k) * math.factorial(n - k)))\ndef even_sum_of_digits_in_factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all the even-index digits in the factorial of n.\n    '''\n    sum = 0\n    i = n\n    while i>0:\n        if i%2==0:\n            sum+=i%10\n        i//=10\n    return sum\ndef digits_of_factorial(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the number of even-index digits in the factorial of n.\n    '''\n    sum = 0\n    i = n\n    while i>0:\n        if i%2==0:\n            sum+=1\n        i//=10\n    return sum\ndef count_consecutive_ones(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of times that n has a sequence of three or more consecutive 1's.\n    '''\n    count = 0\n    i = n\n    while i>0:\n        if i%10 == 1:\n            count += 1\n            if count >= 3:\n                return count\n        i//=10\n    return 0\ndef triangle_number_consonant_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth row of the triangle of consecutive consonants.\n    '''\n    sum = 0\n    i = 1\n    while i<=n:\n        temp = 0\n        j = 1\n        while j<=i:\n            if j%2!= 0:\n                temp+=j\n            j+=1\n        sum+=temp\n        i+=1\n    return sum\ndef count_consecutive_ones_helper(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of times that n has a sequence of three or more consecutive 1's.\n    '''\n    count = 0\n    i = n\n    while i>0:\n        if i%10 == 1:\n            count += 1\n            if count >= 3:\n                return count\n        i//=10\n    return count\ndef largest_power_of_two_less_than_n(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the largest power of 2 less than n.\n    '''\n    i = 0\n    while i<n:\n        i+=1\n        if 2**i<n:\n            return 2**i\n    return 0\ndef sum_of_digits_helper(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth row of the triangle of consecutive consonants.\n    '''\n    sum = 0\n    i = 1\n    while i<=n:\n        temp = 0\n        j = 1\n        while j<=i:\n            if j%2!= 0:\n                temp+=j\n            j+=1\n        sum+=temp\n        i+=1\n    return sum\ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth row of the triangle of consecutive consonants.\n    '''\n    i = 0\n    while i<n:\n        i+=1\n        if i%2!= 0:\n            temp = 0\n            j = 1\n            while j<=i:\n                if j%2!= 0:\n                    temp+=j\n                j+=1\n            return temp\n        i+=1\ndef fibonacci_sum(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth fibonacci number.\n    '''\n    i = 0\n    sum = 0\n    while i<n:\n        i+=1\n        if i<=1:\n            sum+=i\n            continue\n        if i%2!= 0:\n            sum+=i\n        else:\n            sum+=i+2*(i-1)\n    return sum\ndef count_chars_helper(char_list, n):\n    '''\n    Write a python function that takes in a list of characters and a positive integer n and returns the number of times that n appears in the list.\n    '''\n    count = 0\n    for i in char_list:\n        if i==n:\n            count+=1\n    return count\ndef count_chars(char_list, n):\n    '''\n    Write a python function that takes in a list of characters and a positive integer n and returns the number of times that n appears in the list.\n    '''\n    i = 0\n    count = 0\n    while i<len(char_list):\n        if char_list[i]==n:\n            count+=1\n        i+=1\n    return count\ndef number_of_divisors(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of divisors of n.\n    '''\n    if n<=1:\n        return 1\n    i = 1\n    sum = 1\n    while i<n:\n        if n%i==0:\n            sum+=1\n        i+=1\n    return sum\ndef factorial_digits(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of times that n has a sequence of three or more consecutive 1's.\n    '''\n    i = 1\n    sum = 0\n    while i<n:\n        if i%10 == 1:\n            sum += count_consecutive_ones_helper(i)\n        i+=1\n    return sum\ndef count_consecutive_ones_helper2(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the number of times that n has a sequence of three or more consecutive 1's.\n    '''\n    count = 0\n    i = n\n    while i>0:\n        if i%10 == 1:\n            count += 1\n            if count >= 3:\n                return count\n        i//=10\n    return 0\ndef largest_power_of_two_less_than_n2(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the largest power of 2 less than n.\n    '''\n    i = 0\n    while i<n:\n        i+=1\n        if 2**i<n:\n            return 2**i\n    return 0\ndef sum_of_digits_helper2(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth row of the triangle of consecutive consonants.\n    '''\n    sum = 0\n    i = 1\n    while i<=n:\n        temp = 0\n        j = 1\n        while j<=i:\n            if j%2!= 0:\n                temp+=j\n            j+=1\n        sum+=temp\n        i+=1\n    return sum\ndef sum_of_digits2(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth row of the triangle of consecutive consonants.\n    '''\n    i = 0\n    while i<n:\n        i+=1\n        if i%2!= 0:\n            temp = 0\n            j = 1\n            while j<=i:\n                if j%2!= 0:\n                    temp+=j\n                j+=1\n            return temp\n        i+=1\ndef sum_of_digits_with_while(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the nth row of the triangle of consecutive consonants.\n",
        "num_ids": 32
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # n=int(input())\n    if(n==1):\n        return 1\n    if(n==2):\n        return 6\n    elif(n%2==0):\n        return (n//2)*(even_binomial_Coeff_Sum(n//2)+even_binomial_Coeff_Sum(n//2-1))\n    else:\n        return (n//2+1)*(even_binomial_Coeff_Sum(n//2+1)+even_binomial_Coeff_Sum(n//2))\n",
        "num_ids": 134
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n        '''\n        def binomialCoefficient(n,k):\n            '''\n            Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n            '''\n            return int((math.factorial(n) / (math.factorial(k) * math.factorial(n - k))) % (10**9 + 7))\n        return sum([binomialCoefficient(n,k) for k in range(0,n+1,2)])\n    return EvenBinomialCoefficient(n)\ndef even_binomial_Coeff( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def EvenBinomialCoefficient(n):\n        '''\n        Write a python function that takes in a positive integer n and finds the sum of eve",
        "num_ids": 20
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265\n    v = (pi * r**2 * h)\n    return v\n    \nprint(volume_cylinder(4,5))\n",
        "num_ids": 42
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume=pi*r**2*h\n    return volume\n",
        "num_ids": 23
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    def cylinder_volume(r, h):\n        pi = 3.14\n        volume = pi * r**2 * h\n        return volume\n",
        "num_ids": 35
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r**2*h\n",
        "num_ids": 15
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    v = pi*(r**2)*h\n    return v\n",
        "num_ids": 26
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi*r**2*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.1415926535\n    volume = pi*(r**2)*h\n    return volume\n",
        "num_ids": 28
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * r**2 * h\n    return volume\n",
        "num_ids": 19
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi * r**2 * h\n    return volume\n",
        "num_ids": 25
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi*(r**2)*h\n",
        "num_ids": 19
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d = {k:v for k,v in dict.items() if v >= n}\n    return d\n",
        "num_ids": 28
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {}\n    for key in dict:\n        if dict[key] >= n:\n            res[key] = dict[key]\n    return res\n",
        "num_ids": 39
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict.keys():\n        if dict[i] >= n:\n            new_dict[i] = dict[i]\n    return new_dict\n",
        "num_ids": 47
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key,val in dict.items() if val >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n",
        "num_ids": 23
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n",
        "num_ids": 24
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k:v for k,v in dict.items() if v>=n}\n    return new_dict\n",
        "num_ids": 33
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            filter_dict[k] = v\n    return filter_dict\n",
        "num_ids": 43
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key,value in dict.items() if value >= n}\n",
        "num_ids": 23
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == ('first',):\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    print(\"Test Case 1: For the given tuple:\")\n    print(\"Expected: 3\")\n    print(\"Actual:   \", count_first_elements(('cat', 'dog','mouse', 'rat', 'cat')))\n",
        "num_ids": 56
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(1)\n",
        "num_ids": 14
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i == ('b'):\n            break\n        count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum([1 for t in test_tup if t == test_tup[0]])\n",
        "num_ids": 26
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    l = list(test_tup)\n    # l1 = []\n    # for ele in l:\n    #     if ele not in l1:\n    #         l1.append(ele)\n    # print(l1)\n    # l = set(l)\n    l1 = []\n    for ele in l:\n        if ele not in l1:\n            l1.append(ele)\n    l2 = []\n    for ele in l1:\n        l2.append(l.count(ele))\n    # print(l2)\n    l2 = list(zip(l1, l2))\n    # print(l2)\n    print(l2)\n    # print(l1)\n    # print(l)\n    # l1 = []\n    # for ele in l:\n    #     if ele not in l1:\n    #         l1.append(ele)\n    # print(l1)\n    # l2 = []\n    # for ele in l:\n    #     l2.append(l.count(ele))\n    # print(l2)\n    # l2 = list(zip(l1, l2))\n    # print(l2)\n    # print(l1)\n    # print(l)\n    # print(l[0:1])\n    # print(l[:2])\n    # print(l[:])\n    # print(l[0:])\n    # print(l[0:4])\n    # print(l[:4])\n    # print(l[1:4])\n    # print(l[2:4])\n    # print(l[3:4])\n    # print(l[4:4])\n    # print(l[0:5])\n    # print(l[0:6])\n    # print(l[0:7])\n    # print(l[0:8])\n    # print(l[0:9])\n    # print(l[0:10])\n    # print(l[0:11])\n    # print(l[0:12])\n    # print(l[0:13])\n    # print(l[0:14])\n    # print(l[0:15])\n    # print(l[0:16])\n    # print(l[0:17])\n    # print(l[0:18])\n    # print(l[0:19])\n    # print(l[0:20])\n    # print(l[0:21])\n    # print(l[0:22])\n    # print(l[0:23])\n    # print(l[0:24])\n    # print(l[0:25])\n    # print(l[0:26])\n    # print(l[0:27])\n    # print(l[0:28])\n    # print(l[0:29])\n    # print(l[0:30])\n    # print(l[0:31])\n    # print(l[0:32])\n    # print(l[0:33])\n    # print(l[0:34])\n    # print(l[0:35])\n    # print(l[0:36])\n    # print(l[0:37])\n    # print(l[0:38])\n    # print(l[0:39])\n    # print(l[0:40])\n    # print(l[0:41])\n    # print(l[0:42])\n    # print(l[0:43])\n    # print(l[0:44])\n    # print(l[0:45])\n    # print(l[0:46])\n    # print(l[0:47])\n    # print(l[0:48])\n    # print(l[0:49])\n    # print(l[0:50])\n    # print(l[0:51])\n    # print(l[0:52])\n    # print(l[0:53])\n    # print(l[0:54])\n    # print(l[0:55])\n    # print(l[0:56])\n    # print(l[0:57])\n    # print(l[0:58])\n    # print(l[0:59])\n    # print(l[0:60])\n    # print(l[0:61])\n    # print(l[0:62])\n    # print(l[0:63])\n    # print(l[0:64])\n    # print(l[0:65])\n    # print(l[0:66])\n    # print(l[0:67])\n    # print(l[0:68])\n    # print(l[0:69])\n    # print(l[0:70])\n    # print(l[0:71])\n    # print(l[0:72])\n    # print(l[0:73])\n    # print(l[0:74])\n    # print(l[0:75])\n    # print(l[0:76])\n    # print(l[0:77])\n    # print(l[0:78])\n    # print(l[0:79])\n    # print(l[0:80])\n    # print(l[0:81])\n    # print(l[0:82])\n    # print(l[0:83])\n    # print(l[0:84])\n    # print(l[0:85])\n    # print(l[0:86])\n    # print(l[0:87])\n    # print(l[0:88])\n    # print(l[0:89])\n    # print(l[0:90])\n    # print(l[0:91])\n    # print(l[0:92])\n    # print(l[0:93])\n    # print(l[0:94])\n    # print(l[0:95])\n    # print(l[0:96])\n    # print(l[0:97])\n    # print(l[0:98])\n    # print(l[0:99])\n    # print(l[0:100])\n    # print(l[0:101])\n    # print(l[0:102])\n    # print(l[0:103])\n    # print(l[0:104])\n    # print(l[0:105])\n    # print(l[0:106])\n    # print(l[0:107])\n    # print(l[0:108])\n    # print(l[0:109])\n    # print(l[0:110])\n    # print(l[0:111])\n    # print(l[0:112])\n    # print(l[0:113])\n    # print(l[0:114])\n    # print(l[0:115])\n    # print(l[0:116])\n    # print(l[0:117])\n    # print(l[0:118])\n    # print(l[0:119])\n    # print(l[0:120])\n    # print(l[0:121])\n    # print(l[0:122])\n    # print(l[0:123])\n    # print(l[0:124])\n    # print(l[0:125])\n    # print(l[0:126])\n    # print(l[0:127])\n    # print(l[0:128])\n    # print(l[0:129])\n    # print(l[0:130])\n    # print(l[0:131])\n    # print(l[0:132])\n    # print(l[0:133])\n    # print(l[0:134])\n    # print(l[0:135])\n    # print(l[0:136])\n    # print(l[0:137])\n    # print(l[0:138])\n    # print(l[0:139])\n    # print(l[0:140])\n    # print(l[0:141])\n    # print(l[0:142])\n    # print(l[0:143])\n    # print(l[0:144])\n    # print(l[0:145])\n    # print(l[0:146])\n    # print(l[0:147])\n    # print(l[0:148])\n    # print(l[0:149])\n",
        "num_ids": 2000
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    def count_first_elements1(test_tup):\n        elements = list(test_tup)\n        return len(elements[:elements.index(None)])\n    \n    def count_first_elements2(test_tup):\n        elements = list(test_tup)\n        return sum(1 for x in elements if x == None)\n    \n    def count_first_elements3(test_tup):\n        elements = list(test_tup)\n        return len([x for x in elements if x == None])\n    \n    def count_first_elements4(test_tup):\n        elements = list(test_tup)\n        return len([1 for x in elements if x == None])\n    \n    print(f\"Test: {test_tup}\\n\")\n    print(f\"Output: {count_first_elements1(test_tup)}\\n\")\n    print(f\"Expected: {count_first_elements2(test_tup)}\\n\")\n    print(f\"Expected: {count_first_elements3(test_tup)}\\n\")\n    print(f\"Expected: {count_first_elements4(test_tup)}\\n\")\n",
        "num_ids": 303
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if test_tup[0] in test_tup[1:]:\n        return test_tup[:test_tup.index(test_tup[0])]\n    else:\n        return test_tup[:len(test_tup) - 1]\n",
        "num_ids": 68
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (1,2,1,3,1,2,3,4)\n    for x in range(1, len(test_tup)):\n        if test_tup[x] == test_tup[x - 1]:\n            count = count + 1\n    print(count)\n",
        "num_ids": 76
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # test_tup = ('a', 'b', 'a', 'c', 'c')\n    \n    test_list = list(test_tup)\n    final_list = []\n    \n    for x in range(0, len(test_list)):\n        if test_list[x] not in final_list:\n            final_list.append(test_list[x])\n        else:\n            continue\n    \n    count = 0\n    for element in final_list:\n        count += test_list.count(element)\n    \n    return count\n",
        "num_ids": 135
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    from math import sqrt, floor, ceil\n    #start_point = 10 ** (floor(sqrt(2 * n + 1))) # finds first start_point\n    #print(start_point)\n    \n    #ans = start_point + (n - start_point) * (3 * start_point - 2 * n) / 2 #finds the nth decagonal number\n    #print(ans)\n    #return ans\n",
        "num_ids": 103
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    import math\n    return n == int(sum([math.factorial(9)//(math.factorial(i)*math.factorial(9-i)) for i in range(10)]))-1\n",
        "num_ids": 50
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n+1) * n // 2\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(0.5 * n * (3*n - 1))\n",
        "num_ids": 20
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+8)\n",
        "num_ids": 12
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+9)\ndef is_num_sos(n):\n    '''\n    Write a function to find the nth sum of squares number.\n    '''\n    return (1+n)*n/2\ndef is_num_pentagonal(n):\n    '''\n    Write a function to find the nth pentagonal number.\n    '''\n    return n*(3*n-1)/2\ndef is_num_hexagonal(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\ndef is_num_heptagonal(n):\n    '''\n    Write a function to find the nth heptagonal number.\n    '''\n    return n*(5*n-3)/2\ndef is_num_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-2)\ndef is_num_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(2*n-1)\n",
        "num_ids": 14
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int((n * (10*n - 9))/2)\n",
        "num_ids": 19
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+8)\n",
        "num_ids": 12
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)//2\n",
        "num_ids": 14
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    found = False\n    for i in range(0, len(dlist)):\n        if dlist[i] == item:\n            found = True\n            pos = i\n            break\n    if found:\n        return (found, pos)\n    else:\n        return (found, pos)\n",
        "num_ids": 77
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n    \n",
        "num_ids": 45
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    length = len(dlist) - 1\n    for i in range(length):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 50
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n",
        "num_ids": 35
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)\n",
        "num_ids": 58
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "num_ids": 43
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            pos = index\n            break\n    return (pos!= -1, pos)\n",
        "num_ids": 52
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for index, element in enumerate(dlist):\n        if element == item:\n            found = True\n            break\n    if found == True:\n        return True, index\n    else:\n        return False, -1\n",
        "num_ids": 59
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n",
        "num_ids": 39
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, position\n        else:\n            position += 1\n    return False, -1\n",
        "num_ids": 53
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n",
        "num_ids": 20
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(\"Input: \", test_list)\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i] == test_list[j]):\n                print(test_list[i], \" is not unique.\")\n                return False\n    print(test_list, \" is unique.\")\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #create a set of the list, if it has duplicates, then return false, else return true\n    return len(set(test_list)) == len(test_list)\n",
        "num_ids": 43
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    temp = []\n    for elem in test_list:\n        if elem not in temp:\n            temp.append(elem)\n    if len(temp) == len(test_list):\n        return False\n    else:\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n",
        "num_ids": 58
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list.sort()\n    for i in range(len(test_list)):\n        if i < (len(test_list) - 1):\n            if test_list[i] == test_list[i+1]:\n                return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n    \ndef check_pangram(text):\n    '''\n    Write a python function to check if a given string is a pangram or not. A pangram is a sentence containing all \n    the alphabets of the English alphabet.\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in alphabet:\n        if char not in text.lower():\n            return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y, nums1,nums2))\nprint(sub_list([1,2,3],[4,5,6]))\n",
        "num_ids": 46
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"cannot subtract lists of different lengths\")\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 60
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    sum_list=[]\n    for i in range(len(nums1)):\n        sum_list.append(nums1[i]-nums2[i])\n    return sum_list\n",
        "num_ids": 49
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]-=nums2[i]\n    return nums1\n",
        "num_ids": 37
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    print(f'Subtracting {nums1} and {nums2}')\n    result = []\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #create a new list\n    #while iterating through nums1 and nums2, if the val in nums1 is greater than val in nums2, add val to new list\n    #if val in nums1 is less than val in nums2, subtract val from new list\n    #return new list\n    new_list = []\n    for i in range(len(nums1)):\n        if nums1[i] > nums2[i]:\n            new_list.append(nums1[i] - nums2[i])\n        elif nums1[i] < nums2[i]:\n            new_list.append(nums1[i] + nums2[i])\n        else:\n            new_list.append(0)\n    return new_list\n",
        "num_ids": 190
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y:x-y,nums1,nums2))\n",
        "num_ids": 26
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    assert len(nums1)==len(nums2)\n    n = len(nums1)\n    list3 = []\n    for i in range(n):\n        list3.append(nums1[i]-nums2[i])\n    return list3\n",
        "num_ids": 67
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return False\n    else:\n        return [i-j for i,j in zip(nums1,nums2)]\n",
        "num_ids": 48
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    lst = [i-j for i,j in zip(nums1,nums2)]\n    return lst\n",
        "num_ids": 31
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1:\n        return True\n    freq = {}\n    for i in str(n):\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        if freq[i] > int(i):\n            return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = str(n)\n    count = {}\n    for char in num:\n        if char in count:\n            count[char] += 1\n        else:\n            count[char] = 1\n    for c in count:\n        if count[c] > int(c):\n            return False\n    return True\n    \ndef superDigit(n, k):\n    '''\n    Write a python function takes in a positive integer n and a positive integer k and returns the super digit of n after applying each of the digits k times.\n    '''\n    res = 0\n    while n > 0:\n        res += n % 10\n        n //= 10\n    return res * k % 9\n",
        "num_ids": 35
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10\n    while n:\n        rem = n % 10\n        freq[rem] += 1\n        n = n // 10\n    for i in range(10):\n        if freq[i] > i:\n            return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = {}\n    while n: \n        d[n%10] = d.get(n%10, 0) + 1\n        n //= 10\n    return all(digit <= count for digit, count in d.items())\n",
        "num_ids": 57
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) < 1:\n        return False\n    \n    return sum([int(i) for i in str(n)]) <= len(str(n))\n",
        "num_ids": 44
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def numDupDigitsAtMostN(n):\n        if n < 0: return 0\n        if n < 10: return n\n        from collections import defaultdict\n        from itertools import combinations\n        memo = defaultdict(int)\n        for i in range(1, n + 1):\n            num_str = str(i)\n            if i <= 9:\n                memo[i] = i\n            else:\n                tmp = combinations(num_str, 2)\n                for combo in tmp:\n                    num_dup = int(combo[0]) * 10 + int(combo[1])\n                    if num_dup > 9:\n                        num_dup = num_dup % 10 + num_dup // 10\n                    if num_dup in memo:\n                        memo[i] = i\n                        break\n        return len(memo)\n    return numDupDigitsAtMostN(n)\n",
        "num_ids": 219
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_dict = {}\n    for digit in str(n):\n        if digit_dict.get(digit):\n            digit_dict[digit] += 1\n        else:\n            digit_dict[digit] = 1\n    for key, value in digit_dict.items():\n        if value > int(key):\n            return False\n    return True\n",
        "num_ids": 83
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    try:\n        return len(set([int(i) for i in str(n)])) == len([int(i) for i in str(n)])\n    except:\n        return False\n    \ndef staircase(n):\n    '''\n    Write a python function that accepts an integer n and returns true if n is the length of a staircase, otherwise, return false.\n    '''\n    return n>=0\n",
        "num_ids": 9
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_dict = dict() \n    for i in n: \n        if i in digit_dict: \n            digit_dict[i] += 1\n        else: \n            digit_dict[i] = 1\n    for digit in digit_dict:\n        if digit_dict[digit] > digit: \n            return False\n    return True\n",
        "num_ids": 84
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    for item in list:\n        if item!=element:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    check = False\n    for x in list:\n        if x == element:\n            check = True\n    return check\n",
        "num_ids": 30
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n",
        "num_ids": 21
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return(all(x == element for x in list))\n",
        "num_ids": 16
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return (True if all([element == l for l in list]) else False)\n",
        "num_ids": 21
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list.count(element) == len(list):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    new_list = []\n    for element in list:\n        if element == element:\n            new_list.append(element)\n    if len(new_list) == len(list):\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 63
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n",
        "num_ids": 25
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # aba, abb, abc, abbb\n    # abb, abc, abbb\n    # abb, abbb\n    # abbb, abb\n    # abb, abb\n    # abb, abbbbbb\n    # abbbbbb, abbbbb\n    # abbbbb, abbbbbbb\n    # abbbbbbbb, abbbbbbb\n    # abbbbbb, abbbbbbbb\n    # abbbbbb, abbbbbbbbbb\n    # aa, abb, aab, abbbb\n    # abb, abaa, abbbb\n    # aaaa, abab, aabab, aabbbbb\n    # aabb, aabaa\n    # abbbb, abaaaabbbbb\n    # aab, abb, aaabbb\n    # aaaab, ab, aaaaabbb\n    # aaabb, aba\n    # abab, abb, abaaa\n    # abba, abba\n    # abbb, ababb\n    # ababb, abb\n    # aaba, aabbb\n    # aaabb, aaab\n    # abaab, abaab\n    # abbbbb, abaaa\n    # abaab, abb\n    # aaab, aababb\n    # aab, aabbb, aaabbb\n    # aaabb, aaaab\n    # aaaab, aaab\n    # aaaab, aaaabbb\n    # aaaab, aaaaabbb\n    # aaabbb, aaab\n    # aaabbb, aaabbb, aaaabbb\n    # aaabbb, aaab\n    # aaabbb, aaabbb, aaaabbb\n    # aaabbb, aaab\n    # aaabbb, aaabbb, aaabbb\n    # abbbbb, abaaa, aabbb\n    # aaabbb, abaab\n    # aaabb, aaaab, aaaba\n    # abb, aab, aaba\n    # aabb, aaba\n    # aaab, aab\n    # aaab, aaaaabbb\n    # aaaaabbb, aaaaabbb\n    # aaaaabbb, aaaaab\n    # aaaaabbb, aaaaabbbb\n    # aaaaab, aaaaab\n    # aaaaab, aaaaabbb\n    # aaaaab, aaaaabbb, aaaaabbb\n    # aaaaab, aaaaabbb\n    # aaaaab, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb, aaaaabbb, aaaaab\n    # aaaaab, aaaaabbb, aaaaabbb, aaaaabbb",
        "num_ids": 2000
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    string = re.compile(r'\\b[ab]{2,3}a\\b')\n    matches = string.findall(text)\n    if len(matches)>0:\n        return(True)\n    else:\n        return(False)\n",
        "num_ids": 66
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    r = re.findall('ab{2,3}', text)\n    return r\n    \ndef text_match_end(text):\n    '''\n    Write a function that returns the number of times the string 'a' is at the end of a string.\n    '''\n    r = re.findall('a\\Z', text)\n    return r\n    \ndef text_replace(text):\n    '''\n    Write a function that replaces all the 'a' characters in the text with the letter 'b' and returns the resulting string.\n    '''\n    r = re.sub('a', 'b', text)\n    return r\n    \ndef text_split(text):\n    '''\n    Write a function that takes in a string and returns a list of strings that have been broken at every space.\n    '''\n    r = re.split('\\s+', text)\n    return r\n    \ndef text_split_iter(text):\n    '''\n    Write a function that takes in a string and returns a list of strings that have been broken at every space.\n    '''\n    r = re.split('\\s+', text)\n    return r\n    \ndef text_split_with_pattern(text):\n    '''\n    Write a function that takes in a string and returns a list of strings that have been broken at every whitespace\n    '''\n    r = re.split('(\\s+)', text)\n    return r\n    \ndef text_split_with_pattern_iter(text):\n    '''\n    Write a function that takes in a string and returns a list of strings that have been broken at every whitespace\n    '''\n    r = re.split('(\\s+)', text)\n    return r\n    \ndef text_findall(text):\n    '''\n    Write a function that takes in a string and returns a list of tuples that have each pair of characters as an item.\n    '''\n    r = re.findall('(\\w)(\\w)', text)\n    return r\n    \ndef text_findall_iter(text):\n    '''\n    Write a function that takes in a string and returns a list of tuples that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\w)(\\w)', text)\n    return r\n    \ndef text_findall_groups(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.search('(\\w)(\\w)', text)\n    return r.groups()\n    \ndef text_findall_groups_iter(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.search('(\\w)(\\w)', text)\n    return r.groups()\n    \ndef text_findall_groups_with_index(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.search('(\\w)(\\w)', text)\n    return r.groups()\n    \ndef text_findall_groups_with_index_iter(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\w)(\\w)', text)\n    return r.groups()\n    \ndef text_findall_groups_with_index_iter_groups(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\w)(\\w)', text)\n    return r.groups()\n    \ndef text_findall_groups_with_index_iter_groups_num(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\w)(\\w)', text)\n    return [item.groups() for item in r]\n    \ndef text_findall_groups_with_index_iter_groups_num_numeric(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\w)(\\w)', text)\n    return [item.groups() for item in r]\n    \ndef text_findall_groups_with_index_iter_groups_num_numeric_str(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\w)(\\w)', text)\n    return [item.groups() for item in r]\n    \ndef text_sub(text):\n    '''\n    Write a function that takes in a string and returns the string with 'apple' replaced with 'banana'\n    '''\n    r = re.sub('apple', 'banana', text)\n    return r\n    \ndef text_sub_with_replace(text):\n    '''\n    Write a function that takes in a string and returns the string with 'apple' replaced with 'banana'\n    '''\n    r = re.sub('apple', 'banana', text, count=1)\n    return r\n    \ndef text_sub_with_replace_all(text):\n    '''\n    Write a function that takes in a string and returns the string with 'apple' replaced with 'banana'\n    '''\n    r = re.sub('apple', 'banana', text, count=0)\n    return r\n    \ndef text_sub_with_replace_examples(text):\n    '''\n    Write a function that takes in a string and returns the string with 'apple' replaced with 'banana'\n    '''\n    r = re.sub('apple', 'banana', text, count=2)\n    return r\n    \ndef text_sub_with_replace_examples_all(text):\n    '''\n    Write a function that takes in a string and returns the string with 'apple' replaced with 'banana'\n    '''\n    r = re.sub('apple', 'banana', text, count=0)\n    return r\n    \ndef text_split_with_pattern_groups(text):\n    '''\n    Write a function that takes in a string and returns a list of tuples that have each pair of characters as an item.\n    '''\n    r = re.split('(\\W+)', text)\n    return r\n    \ndef text_split_with_pattern_groups_iter(text):\n    '''\n    Write a function that takes in a string and returns a list of tuples that have each pair of characters as an item.\n    '''\n    r = re.split('(\\W+)', text)\n    return r\n    \ndef text_split_with_pattern_groups_examples(text):\n    '''\n    Write a function that takes in a string and returns a list of tuples that have each pair of characters as an item.\n    '''\n    r = re.split('(\\W+)', text)\n    return r\n    \ndef text_split_with_pattern_groups_examples_iter(text):\n    '''\n    Write a function that takes in a string and returns a list of tuples that have each pair of characters as an item.\n    '''\n    r = re.split('(\\W+)', text)\n    return r\n    \ndef text_findall_groups_with_index_examples(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.findall('(\\W+)(\\w)', text)\n    return r\n    \ndef text_findall_groups_with_index_examples_iter(text):\n    '''\n    Write a function that takes in a string and returns a tuple of the 2 groups that have each pair of characters as an item.\n    '''\n    r = re.finditer('(\\W+)(\\w)', text)",
        "num_ids": 20
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return False\n",
        "num_ids": 51
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    m = re.search(r'a.{2,3}b', text)\n    if m:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    # Write a function that takes a string as a parameter and returns True if the string contains any character between a and z, and False otherwise.\n    # Write a function that takes a string as a parameter and returns True if the string contains any lowercase character, and False otherwise.\n    # Write a function that takes a string as a parameter and returns the number of lowercase characters in the string.\n    # Write a function that takes a string as a parameter and returns True if the string is a palindrome, and False otherwise.\n    # Write a function that takes a string as a parameter and returns the number of digits in the string.\n    # Write a function that takes a string as a parameter and returns True if the string is a pangram, and False otherwise.\n    # Write a function that takes a string as a parameter and returns True if the string contains a valid email address, and False otherwise.\n    # Write a function that takes a string as a parameter and returns a list containing all unique words in the string.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that start with a vowel.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that end with a vowel.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that contain the character 'o'.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that contain the characters 'a', 'e', and 'i'.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the character 'a' in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the character 'c' in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of any lowercase character in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the characters 'a' or 'e' in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of any lowercase character in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of any uppercase character in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the character 'z' in the string.\n    # Write a function that takes a string as a parameter and returns the longest word in the string.\n    # Write a function that takes a string as a parameter and returns the longest word in the string that also occurs more than once.\n    # Write a function that takes a string as a parameter and returns the number of words in the string.\n    # Write a function that takes a string as a parameter and returns the number of words in the string that start with the letter 'a'.\n    # Write a function that takes a string as a parameter and returns the number of words in the string that end with the letter's'.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns the number of vowels in the string.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that start with a vowel.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that end with a vowel.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that contain the character 'o'.\n    # Write a function that takes a string as a parameter and returns a list containing all the words in the string that contain the characters 'a', 'e', and 'i'.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the character 'a' in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the character 'c' in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of any lowercase character in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the characters 'a' or 'e' in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of any lowercase character in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of any uppercase character in the string.\n    # Write a function that takes a string as a parameter and returns the number of occurrences of the character 'z' in the string.\n    # Write a function that takes a string as a parameter and returns the longest word in the string.\n    # Write a function that takes a string as a parameter and returns the longest word in the string that also occurs more than once.\n    # Write a function that takes a string as a parameter and returns the number of words in the string.\n    # Write a function that takes a string as a parameter and returns the number of words in the string that start with the letter 'a'.\n    # Write a function that takes a string as a parameter and returns the number of words in the string that end with the letter's'.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just the ones in the default ASCII table.\n    # Write a function that takes a string as a parameter and returns a list containing the individual characters of the string in the order they appear, but this time the function should be able to handle any character, not just th",
        "num_ids": 1999
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a.{2,3}b'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(\"ab+b\",text):\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.search(r\"ab{2,3}\", text)\n    return result!= None\n",
        "num_ids": 28
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    temp = 0\n    for i in range(k):\n        for j in range(n):\n            temp += a[j]\n        max_sum = max(temp, max_sum)\n        temp = 0\n    for i in range(n):\n        temp += a[i]\n    max_sum = max(temp, max_sum)\n    return max_sum\n",
        "num_ids": 96
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # k <= n\n    # Optimize\n    # Preprocessing\n    maximum = 0\n    max_ending_here = 0\n    for i in range(n): \n        max_ending_here += a[i] \n        if (max_ending_here < 0): \n            max_ending_here = 0\n        if (maximum < max_ending_here): \n            maximum = max_ending_here \n    if(maximum == 0): \n        return maximum\n",
        "num_ids": 113
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        for j in range(k):\n            if(i+j < n):\n                max_sum = max(max_sum, a[i+j])\n    return max_sum\n",
        "num_ids": 61
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # print(k)\n    sum_array = 0\n    max_sum = 0\n    start_point = 0\n    for i in range(0,n):\n        sum_array += a[i]\n        if i >= k-1:\n            sum_array = sum_array - a[start_point]\n            start_point += 1\n        if max_sum < sum_array:\n            max_sum = sum_array\n    return max_sum\n",
        "num_ids": 109
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n    return\n",
        "num_ids": 8
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if (n == 1):\n        return a[0]\n    if (k == 1):\n        return sum(a)\n    else:\n        max_sum = 0\n        for i in range(k,n+1):\n            if (sum(a[0:i]) > max_sum):\n                max_sum = sum(a[0:i])\n        return max_sum\n            \n",
        "num_ids": 95
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += max(a)\n        a.remove(max(a))\n        max_sum += max(a)\n        a.remove(max(a))\n",
        "num_ids": 58
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < k:\n        return -1\n    \n    cur_sum = 0\n    max_sum = 0\n    start_index = 0\n    last_index = 0\n    \n    for i in range(0, n):\n        cur_sum = cur_sum + a[i]\n        if (i - last_index + 1) == k:\n            if cur_sum > max_sum:\n                max_sum = cur_sum\n                start_index = last_index + 1\n            cur_sum = cur_sum - a[last_index]\n            last_index = last_index + 1\n    \n    return a[start_index:start_index + k]\n    ",
        "num_ids": 162
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # code here\n    max_so_far = 0\n    max_ending_here = 0\n    start_index = 0\n    end_index = 0\n    for i in range(0, n):\n        if max_ending_here < 0:\n            max_ending_here = a[i]\n            start_index = i\n            end_index = i\n        else:\n            max_ending_here = max_ending_here + a[i]\n            end_index = i\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n            start_index = start_index\n            end_index = end_index\n    return (start_index, end_index)\n",
        "num_ids": 174
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n<=k:\n        return max(a)\n    else:\n        b=[]\n        c=[]\n        s=0\n        for i in range(n):\n            b.append(a[i])\n        for i in range(k):\n            c=c+b\n        for i in range(n):\n            s+=a[i]\n        for i in range(k):\n            s+=c[i]\n        return s\n        ",
        "num_ids": 110
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n**3\n",
        "num_ids": 8
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for x in range(n):\n        if x % 2 == 0:\n            sum = sum + x * x\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(2,n+1,2):\n        sum+=i*i\n    return sum",
        "num_ids": 32
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i**2\n    return sum\n",
        "num_ids": 27
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # print(n)\n    return int(0.5*n*(n+1)*(2*n+1))\n",
        "num_ids": 32
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            sum = sum + i**2\n    return sum\n",
        "num_ids": 40
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #n = int(input(\"Enter number : \"))\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i * i\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return n*(n+1)**2/4\n",
        "num_ids": 16
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n    return max_len\nprint(max_length([[1,2,3,4], [3,4,5,6,7], [5,6,7,8,9,10]]))\nprint(max_length([[1], [2,3], [4,5,6], [7,8], [9,10]]))\nprint(max_length([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]))\n",
        "num_ids": 172
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_list = i\n            max_len = len(i)\n    print(\"Maximum length is: {}\".format(max_len))\n    return max_list\n",
        "num_ids": 75
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return(max_len)\nlist1=[[1,2],[4,5],[7,8,9],[10,11,12],[13],[14]]\nprint(max_length(list1))\n",
        "num_ids": 86
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        if len(i) >= len(l):\n            l = i\n    print(l)\n",
        "num_ids": 38
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    print(l)\n    return(max(l))\n",
        "num_ids": 39
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "num_ids": 45
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # start writing your code here\n    max_list=0\n    max_list_len=0\n    for i in list1:\n        if len(i)>max_list_len:\n            max_list_len=len(i)\n            max_list=i\n    return max_list\n",
        "num_ids": 73
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    #new_list = list(filter(None, list1))\n    #print(new_list)\n    #maximum = len(max(new_list, key=len))\n    #print(maximum)\n    #return maximum\n    lst = []\n    for i in list1:\n        if len(i) > len(lst):\n            lst = i\n    print(len(lst))\n    return len(lst)\n    \n",
        "num_ids": 108
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        if len(i) > len(new_list):\n            new_list = i\n    return new_list\n",
        "num_ids": 44
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    mod = 10 ** 9 + 7\n    n, k = map(int, input().split())\n    dp = [[0 for _ in range(k)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(k):\n            for z in range(j + 1):\n                dp[i][j] = (dp[i][j] + dp[i - 1][z]) % mod\n    print(dp[-1][-1])\n",
        "num_ids": 130
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    MOD = 10**9 + 7\n    table = [0]*(n+1)\n    table[0] = 1\n    for i in range(1, n+1):\n        table[i] = (table[i-1]*(k-1)) % MOD\n        table[i] = (table[i] + table[i-1]) % MOD\n    return table[n]\n",
        "num_ids": 95
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n==1:\n        return k\n    if n==2:\n        return k**2\n    dp = [[0 for _ in range(k)] for _ in range(n+1)]\n    dp[1][0] = 1\n    dp[2][0] = 1\n    dp[2][1] = 2\n    for i in range(3, n+1):\n        for j in range(k):\n            if j==0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j-1]+dp[i-1][j]\n    return dp[-1][-1]\n",
        "num_ids": 169
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a table to store results of subproblems. One extra\n    # row and column need to be allocated in the table.\n    table = [[0 for i in range(k+1)] for j in range(n+1)]\n    # Fill the first row with 1 for each entry\n    for i in range(0, k+1):\n        table[0][i] = 1\n    # Fill the first column with 1 for each entry\n    for i in range(0, n+1):\n        table[i][0] = 1\n    # Fill the table by calculating values in bottom up manner\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # Sum of ways to paint the left side of i'th post with red\n            # and ways to paint the right side of i'th post with red.\n            # The left and right sides of i'th post are connected so we\n            # add values of left and right sides to get the total\n            # combination\n            table[i][j] = table[i-1][j] + table[i][j-1]\n    # Find the required value in the last row\n    return table[n][k]\n",
        "num_ids": 282
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n",
        "num_ids": 41
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    if n == 2:\n        return k\n    # Create an array to store the number of ways.\n    # dp[i][j] = number of ways to paint the fence with i posts and j colors\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][1] = 1\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            for x in range(1, i):\n                dp[i][j] += dp[x][j - 1]\n    return dp[n][k]\n",
        "num_ids": 175
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, k + 1):\n        dp[0][i] = 0\n",
        "num_ids": 51
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a dp array of size (n+1)x(k+1)\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n",
        "num_ids": 68
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(k < 2):\n        return 0\n    if(n < 3):\n        return 1\n    if(n == 3):\n        if(k == 2):\n            return 3\n        else:\n            return k\n    s = [1 for i in range(k)]\n    for i in range(2, n):\n        s[0] = s[1]\n        for j in range(2, k):\n            s[j] = s[j-1] + s[j]\n        s[k-1] += 1\n    return s[k-1]\n",
        "num_ids": 137
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # initialize the dp array and set it to 0\n    # note that we will have to use 2D array\n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n    # base case\n    # for 0 and 0 ways to paint the fence\n    dp[0][0] = 1\n    # now loop for all the remaining subproblems\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # if the color is different\n            if j!= j[i-1]:\n                # then simply subtract the number of ways of painting the fence with one less post\n                dp[i][j] = dp[i-1][j]\n            # if the color is same\n            else:\n                # then we have to add the number of ways of painting the fence with one less post\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    return dp[n][k]\n",
        "num_ids": 246
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        if (n>m):\n            q=n/m\n            return round(q)\n        else:\n            q=m/n\n            return round(q)\n    except ZeroDivisionError:\n        return \"Error\"\n",
        "num_ids": 60
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        if n%m==0:\n            return m\n        else:\n            return n//m+1\n    else:\n        if m%n==0:\n            return n\n        else:\n            return m//n+1\n",
        "num_ids": 63
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    n_m=n//m\n    return n_m\n",
        "num_ids": 17
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m:\n        print(n//m)\n    elif m>n:\n        print(m//n)\n    else:\n        print(n//m)\n",
        "num_ids": 45
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n",
        "num_ids": 11
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    return n//m\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n",
        "num_ids": 8
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def quotient(n,m):\n        q = n//m\n        return(q)\n    return(quotient(n,m))\n",
        "num_ids": 37
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient\n",
        "num_ids": 16
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n%m==0:\n        return m\n    else:\n        return n%m\n",
        "num_ids": 25
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        return 'The triangle is a rectangle'\n    else:\n        c = h**2 + w**2\n        c = math.sqrt(c)\n        return c\n",
        "num_ids": 49
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #finds the hypotenuse, which is sqrt(w**2 + h**2)\n    hypotenuse = math.sqrt(w**2 + h**2)\n    #finds the other two sides, which is sqrt(hypotenuse**2 - w**2)\n    other_side1 = math.sqrt(hypotenuse**2 - w**2)\n    #finds the other two sides, which is sqrt(hypotenuse**2 - h**2)\n    other_side2 = math.sqrt(hypotenuse**2 - h**2)\n    return [other_side1,other_side2]\n",
        "num_ids": 157
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\ndef right_triangle(side_1,side_2):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(side_1**2 + side_2**2)\ndef right_triangle_formula(side_1,side_2):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return side_1*side_2/2\ndef triangular_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return (a+b+c)*0.16\ndef bmi(w,h):\n    '''\n    Write a function to calculate body mass index.\n    '''\n    bmi = w / (h/100)**2\n    return bmi\ndef bmi_formula(weight,height):\n    '''\n    Write a function to calculate body mass index.\n    '''\n    bmi = weight/(height/100)**2\n    return bmi\ndef height_and_weight(weight,height):\n    '''\n    Write a function to calculate body mass index.\n    '''\n    bmi = weight/((height/100)**2)\n    return bmi\ndef height_and_weight_formula(weight,height):\n    '''\n    Write a function to calculate body mass index.\n    '''\n    bmi = weight/(height/100)**2\n    return bmi\ndef weight_and_height(weight,height):\n    '''\n    Write a function to calculate body mass index.\n    '''\n    bmi = (weight*(height/100)**2)\n    return bmi\ndef weight_and_height_formula(weight,height):\n    '''\n    Write a function to calculate body mass index.\n    '''\n    bmi = (weight/((height/100)**2))\n    return bmi\ndef triangle_area(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef triangle_area_formula(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef triangle_area_formula_improved(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef triangle_area_formula_improved(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef trinagle_area(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef triangle_area_formula(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef triangle_area_formula_improved(base,height):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return base*height/2\ndef trapezium_area(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((a+b)*h)/2\ndef trapezium_area_formula(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((a+b)*h)/2\ndef rectangle_area(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef rectangle_area_formula(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef trapezium_area_formula_improved(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return ((a+b)*h)/2\ndef rectangle_area_formula_improved(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef rectangle_area_formula_improved(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef rectangle_area_formula_improved(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef circle_area_formula(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef circle_area_formula_improved(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef circle_area_formula_improved(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\ndef square_area(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square_area_formula_improved(a):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return a*a\ndef square",
        "num_ids": 10
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p = math.sqrt((w*w)+(h*h))\n    return p\n",
        "num_ids": 24
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w>=0 and h>=0:\n        if w+h>=2*(math.sqrt(w*w+h*h)):\n            return math.sqrt(w*w+h*h)-w-h\n        else:\n            return 'The given values do not make a right angled triangle'\n    else:\n        return 'The given values do not make a right angled triangle'\n",
        "num_ids": 97
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #start writing your code here\n    return w*h/2\n",
        "num_ids": 18
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    return side3\ndef rightangle_sine(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.asin(side2/side3)\n    side4 = math.sin(angle)*side3\n    return side4\ndef rightangle_cosine(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    return side4\ndef rightangle_tangent(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.atan(side2/side3)\n    side4 = math.tan(angle)*side3\n    return side4\ndef rightangle_arc(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    return side4\ndef rightangle_acosine(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.sin(angle)*side3\n    return side4\ndef rightangle_atangent(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.tan(angle)*side3\n    return side4\ndef rightangle_area(w,h):\n    '''\n    Write a function to calculate the area of a right angled triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    side5 = math.sin(angle)*side3\n    area = (1/2)*(side1*side2)\n    return area\ndef rightangle_perimeter(w,h):\n    '''\n    Write a function to calculate the perimeter of a right angled triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    side5 = math.sin(angle)*side3\n    perimeter = side1 + side2 + side3\n    return perimeter\ndef rightangle_triangle_type(w,h):\n    '''\n    Write a function to determine if the triangle is right angled, acute or obtuse.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    if angle == math.pi/2:\n        return 'Right Angled'\n    elif angle > math.pi/2:\n        return 'Obtuse Triangle'\n    elif angle < math.pi/2:\n        return 'Acute Triangle'\ndef rightangle_area_perimeter(w,h):\n    '''\n    Write a function to calculate the area and perimeter of a right angled triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    side5 = math.sin(angle)*side3\n    area = (1/2)*(side1*side2)\n    perimeter = side1 + side2 + side3\n    return area,perimeter\ndef rightangle_sine_cosine_tangent(w,h):\n    '''\n    Write a function to calculate the missing side of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    side5 = math.sin(angle)*side3\n    return side4,side5\ndef rightangle_sine_cosine_tangent_area_perimeter(w,h):\n    '''\n    Write a function to calculate the area and perimeter of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    side5 = math.sin(angle)*side3\n    area = (1/2)*(side1*side2)\n    perimeter = side1 + side2 + side3\n    return area,perimeter\ndef rightangle_sine_cosine_tangent_area_perimeter_triangle_type(w,h):\n    '''\n    Write a function to determine if the triangle is right angled, acute or obtuse.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    if angle == math.pi/2:\n        return 'Right Angled',angle\n    elif angle > math.pi/2:\n        return 'Obtuse Triangle',angle\n    elif angle < math.pi/2:\n        return 'Acute Triangle',angle\ndef rightangle_sine_cosine_tangent_area_perimeter_sides(w,h):\n    '''\n    Write a function to calculate the area and perimeter of a right angled triangle when you know the length of the other two sides and the angle of the triangle.\n    '''\n    #import math\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    angle = math.acos(side2/side3)\n    side4 = math.cos(angle)*side3\n    side5 = math.sin(angle)*side3\n    return side4,side5,side3\ndef rightangle_sine_cosine_tangen",
        "num_ids": 104
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # pi = 3.14\n    # c = (w**2+h**2)/2\n    # a = math.sqrt(c*2)\n    # b = math.sqrt(c*2)\n    # s = a + b + w\n    # return s\n    return w**2+h**2+w*h",
        "num_ids": 81
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max_val = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max_val:\n                max_val = listval[i]\n        return max_val\n",
        "num_ids": 77
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    for item in listval:\n        if type(item) is int:\n            if item > max_val:\n                max_val = item\n        elif type(item) is str:\n            if len(item) > max_val:\n                max_val = len(item)\n    return max_val\n",
        "num_ids": 82
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return max(listval)\n    \n    \ndef remove_values_from_list(listval, val):\n    '''\n    Write a function to remove a particular value from a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.remove(val)\n    \n    \ndef return_head(listval):\n    '''\n    Write a function to return the first element of a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[0]\n    \n    \ndef last_element(listval):\n    '''\n    Write a function to return the last element of a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[-1]\n    \n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return min(listval)\n    \n    \ndef reverse_list(listval):\n    '''\n    Write a function to reverse a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[::-1]\n    \n    \ndef check_anagram(string1, string2):\n    '''\n    Write a function to check if two given strings are anagrams or not.\n    '''\n    print(\"The two strings are : \")\n    print(string1, string2)\n    return sorted(string1) == sorted(string2)\n    \n    \ndef return_count(listval, val):\n    '''\n    Write a function to return the number of occurrences of a particular value in a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.count(val)\n    \n    \ndef check_pallindrome(string1):\n    '''\n    Write a function to check if a given string is a palindrome or not.\n    '''\n    print(\"The string is : \")\n    print(string1)\n    return string1 == string1[::-1]\n    \n    \ndef return_index(listval, val):\n    '''\n    Write a function to return the index of the first occurrence of a particular value in a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.index(val)\n    \n    \ndef return_slice(listval, start, end):\n    '''\n    Write a function to return the sublist of a given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[start:end]\n    \n    \ndef check_membership(listval, val):\n    '''\n    Write a function to check if a given value is a member of a given list or not.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return val in listval\n    \n    \ndef common_elements(listval1, listval2):\n    '''\n    Write a function to return a list that contains only the common elements of two given lists.\n    '''\n    print(\"The first list val is : \")\n    print(listval1)\n    print(\"The second list val is : \")\n    print(listval2)\n    listval1.sort()\n    listval2.sort()\n    for num1, num2 in zip(listval1, listval2):\n        if num1 == num2:\n            print(num1)\n    return listval1\n    \n    \ndef reverse_list_in_place(listval):\n    '''\n    Write a function to reverse the order of the elements in the list in place.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    for i in range(len(listval)//2):\n        listval[i], listval[len(listval) - 1 - i] = listval[len(listval) - 1 - i], listval[i]\n    return listval\n    \n    \ndef return_sorted_list(listval):\n    '''\n    Write a function to return a list that has been sorted in ascending order.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return sorted(listval)\n    \n    \ndef return_copy_of_list(listval):\n    '''\n    Write a function to return a copy of the given list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval[:]\n    \n    \ndef find_common_element_in_list(listval1, listval2):\n    '''\n    Write a function to find a common element in two given lists.\n    '''\n    print(\"The first list val is : \")\n    print(listval1)\n    print(\"The second list val is : \")\n    print(listval2)\n    listval1.sort()\n    listval2.sort()\n    for num1, num2 in zip(listval1, listval2):\n        if num1 == num2:\n            return num1\n            break\n        \n        \ndef move_element_to_end(listval, val):\n    '''\n    Write a function to move the specified element to the end of the list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return listval.append(listval.pop(listval.index(val)))\n    \n    \ndef remove_duplicates(listval):\n    '''\n    Write a function to remove all the duplicate values from a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return sorted(list(set(listval)))\n    \n    \ndef check_alternate_values(listval):\n    '''\n    Write a function to check if a given list contains any duplicates.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return len(listval) == len(set(listval))\n    \n    \ndef flatten_list(listval):\n    '''\n    Write a function to flatten a given multidimensional list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    listval = [element for sublist in listval for element in sublist]\n    return listval\n    \n    \ndef remove_empty_strings(listval):\n    '''\n    Write a function to remove empty strings from a list.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    return [element for element in listval if element]\n    \n    \ndef list_element_swap(listval, index1, index2):\n    '''\n    Write a function to swap the specified element of a list with the element at the specified position.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    listval[index1], listval[index2] = listval[index2], listval[index1]\n    return listval\n    \n    \ndef merge_two_sorted_lists(listval1, listval2):\n    '''\n    Write a function to merge two sorted lists into one sorted list.\n    '''\n    print(\"The two list val are : \")\n    print(listval1)\n    print(listval2)\n    new_list = listval1 + listval2\n    return sorted(new_list)\n    \n    \ndef add_two_values(val1, val2):\n    '''\n    Write a function to add two values.\n    '''\n    return val1 + val2\n    \n    \ndef return_min_max_without_math_functions(listval):\n    '''\n    Write a function to return the minimum and the maximum values of a given list without using the built-in min() and max() functions.\n    '''\n    print(\"The list val is : \")\n    print(listval)\n    minval, maxval = listval[0], listval[",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_list = []\n    max_val = 0\n    for i in listval:\n        if i > max_val:\n            max_val = i\n        max_list.append(max_val)\n    return max_list\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    list_len = len(listval)\n    max_val = listval[0]\n    for i in range(1, list_len):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "num_ids": 67
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n",
        "num_ids": 35
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval)==0:\n        return None\n    maxval=listval[0]\n    for x in listval:\n        if x>maxval:\n            maxval=x\n    return maxval\n",
        "num_ids": 54
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    #check to see if list is empty\n    if listval == []:\n        return None\n    \n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n",
        "num_ids": 59
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n",
        "num_ids": 58
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = -1\n    if not listval:\n        return maxval\n    for item in listval:\n        if type(item) == int or type(item) == float:\n            if item > maxval:\n                maxval = item\n        else:\n            for el in item:\n                if type(el) == int or type(el) == float:\n                    if el > maxval:\n                        maxval = el\n    return maxval\n",
        "num_ids": 107
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number < 0:\n        raise ValueError('Number must be positive integer')\n",
        "num_ids": 21
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    assert isinstance(number, int), \"Input must be an integer\"\n    divisor_list = []\n    for i in range(2, number):\n        if number % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)\n",
        "num_ids": 71
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number + 1):\n        if number % x == 0:\n            sum += x\n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, number):\n        if number % i == 0:\n            sum += i\n    return sum\n",
        "num_ids": 36
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_div += i\n    return sum_div\n",
        "num_ids": 42
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            result += i\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_list.append(i)\n    print(sum(div_list))\n",
        "num_ids": 51
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 1\n    for i in range(2, int(math.sqrt(number) + 1)):\n        if number % i == 0:\n            s += i\n            if number // i!= i:\n                s += number // i\n    return s\n",
        "num_ids": 64
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n",
        "num_ids": 50
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    def divisor(number):\n        sum = 1\n        for i in range(2,number):\n            if number%i == 0:\n                sum += i\n        return sum\n    return divisor(number)\n",
        "num_ids": 54
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)\n",
        "num_ids": 11
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] > arr[j]):\n                inversions += 1\n    return inversions\n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i] > arr[j]): \n                count += 1\n    return count\n",
        "num_ids": 63
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    length = len(arr)\n    arr_inv = 0\n    for i in range(length):\n        for j in range(i+1,length):\n            if arr[i]>arr[j]:\n                arr_inv+=1\n    return arr_inv\n",
        "num_ids": 64
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge_sort(arr, n):\n        count=0\n        if n <= 1:\n            return arr, count\n        else:\n            mid=n//2\n            L,LC=merge_sort(arr[:mid], len(arr[:mid]))\n            R,RC=merge_sort(arr[mid:], len(arr[mid:]))\n            S=[]\n            i=0\n            j=0\n            k=0\n            while i < len(L) and j < len(R):\n                if L[i] < R[j]:\n                    S.append(L[i])\n                    i+=1\n                else:\n                    S.append(R[j])\n                    j+=1\n                    count+=1\n            if i < len(L):\n                S.append(L[i])\n                i+=1\n            else:\n                S.append(R[j])\n                j+=1\n            return S, count+LC+RC\n    S,C=merge_sort(arr, len(arr))\n    return C\n",
        "num_ids": 250
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    merge_sort(arr)\n    # print(arr)\n    return count\n",
        "num_ids": 22
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    N = len(arr)\n    inversion_count = 0\n    for i in range(0, N):\n        for j in range(i+1, N):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n    return inversion_count\n",
        "num_ids": 71
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr)[1]\n",
        "num_ids": 13
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #code here\n    return 0\n",
        "num_ids": 11
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return list1\n    if type(list1[0]) == list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n",
        "num_ids": 74
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [i for sublist in list1 for i in sublist]\n",
        "num_ids": 19
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    res = []\n    for sub_list in list1:\n        res += sub_list\n    return res\n",
        "num_ids": 28
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    \n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    \n    return flattened_list\n",
        "num_ids": 73
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for item in list1:\n        if type(item) == list:\n            output += flatten_list(item)\n        else:\n            output.append(item)\n    return output\n",
        "num_ids": 52
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst2 = []\n    for i in list1:\n        if isinstance(i,list):\n            lst2.extend(flatten_list(i))\n        else:\n            lst2.append(i)\n    return lst2\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output_list = []\n    for item in list1:\n        if isinstance(item, list):\n            output_list.extend(flatten_list(item))\n        else:\n            output_list.append(item)\n    return output_list\n",
        "num_ids": 63
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n",
        "num_ids": 42
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if isinstance(item, list):\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n",
        "num_ids": 63
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for i in stdata:\n        if i[1] > max_agg:\n            max_agg = i[1]\n    return max_agg\n",
        "num_ids": 45
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = {}\n    for k,v in stdata:\n        if k not in result:\n            result[k] = []\n        result[k].append(v)\n    result = [ (key, max(result[key])) for key in result.keys() ]\n    return result\n",
        "num_ids": 70
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #number of attributes\n    n = len(stdata[0][1])\n    #minimum set of attributes for the set of tuples\n    min_attr = set(stdata[0][1])\n    #maximum set of attributes for the set of tuples\n    max_attr = set(stdata[0][1])\n    \n    for tup in stdata:\n        max_attr = max_attr.union(tup[1])\n        min_attr = min_attr.intersection(tup[1])\n    return max_attr,min_attr\n",
        "num_ids": 133
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_value = 0\n    max_key = None\n    for key,value in stdata.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return (max_key,max_value)\n",
        "num_ids": 63
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    res = defaultdict(list)\n    for st in stdata:\n        res[st[0]].append(st[1])\n    for k, v in res.items():\n        res[k] = max(v)\n    return res\n",
        "num_ids": 60
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    my_dict = defaultdict(list)\n    for i in stdata:\n        my_dict[i[0]].append(i[1])\n    return max(my_dict.items(),key=lambda x:sum(x[1]))\n",
        "num_ids": 61
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def agg_helper(start, end, stdata):\n        if start == end:\n            return stdata[start][0]\n        mid = (start + end) // 2\n        left_sub_max = agg_helper(start, mid, stdata)\n        right_sub_max = agg_helper(mid + 1, end, stdata)\n        left_max = max(left_sub_max, stdata[mid][0])\n        right_max = max(right_sub_max, stdata[mid + 1][0])\n        return max(left_max, right_max)\n",
        "num_ids": 144
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    result = [0]\n    for i in range(1,len(stdata)):\n        if stdata[i][1] == stdata[i-1][1]:\n            result.append(result[-1])\n        else:\n            result.append(result[-1] + stdata[i][0])\n    return max(result)\n",
        "num_ids": 85
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = [('Zkus m\u011b chytit', 1), ('Vrah zavol\u00e1 v deset', 2), ('Zlo\u010dinn\u00fd steh', 3)]\n    mydict = defaultdict(int)\n    for tpl in stdata:\n        mydict[tpl[0]] = tpl[1]\n    return mydict\n",
        "num_ids": 85
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for t in stdata:\n        for i in t:\n            d[i] += 1\n    return max(d.values())\n    \nif __name__ == '__main__':\n    stdata = [('A', 3), ('B', 5), ('A', 5), ('C', 2), ('B', 3)]\n    print(max_aggregate(stdata))",
        "num_ids": 98
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # if n == 0:\n    #     return 1\n    \n    # if n == 1:\n    #     return 2\n    \n    # else:\n    #     return 2*count_binary_seq(n-1) + count_binary_seq(n-2)\n    \n    \n    table = [0, 1, 3, 5, 7, 10, 14, 21]\n",
        "num_ids": 94
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)//2\n",
        "num_ids": 14
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0] * (2*n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(2*n+1):\n            if j >= i:\n                dp[i][j] = dp[i-1][j-i] + dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][2*n]\n",
        "num_ids": 133
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    table = [0] * (2 * n + 1) \n    table[0] = 1\n    \n    for i in range(1, 2 * n + 1): \n        table[i] = (table[i - 1] * 2) % 1000000007\n        if i >= 2: \n            table[i] = (table[i] + table[i - 2]) % 1000000007\n",
        "num_ids": 98
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    if n == 1:\n        return 2\n    if n == 2:\n        return 5\n    prev = count_binary_seq(n-1)\n    prev += count_binary_seq(n-2)\n    return prev\n",
        "num_ids": 64
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = [0] * (2 ** n)\n    b = [0] * (2 ** n)\n    for i in range(0, 2 ** n):\n        a[i] = i\n    for i in range(2 ** n - 1, -1, -1):\n        b[i] = i\n    for i in range(0, 2 ** n):\n        a[i] = (a[i] + b[i]) % 2\n    return a\n",
        "num_ids": 112
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    #initializing dp array with 0\n    dp = [0] * (2 * n + 1)\n    #if n = 0, 1 is the only sequence possible\n    dp[0] = 1\n    #if n = 1, there are two sequences possible with a 0 in the second position\n    #and 1 in the second position\n    dp[1] = 2\n",
        "num_ids": 86
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 0\n    return len(list(itertools.product([0, 1], repeat = 2*n)))\n",
        "num_ids": 29
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # first binary number \n    #10 \n    # 2(10) + 2(10) = 10(010) + 10(010) \n    #n = 3\n    # 2(010) + 2(010) + 2(010) = 001100 + 001100 + 001100\n    #final = [001100, 001110, 111110, 111111, 111111]\n    #n = 4\n    # 2(110) + 2(110) + 2(110) + 2(110) = 1101010 + 1101010 + 1101010 + 1101010\n    # final = [1101010, 1101011, 1111110, 1111111, 1111111]\n    #n = 5\n    # 2(101) + 2(101) + 2(101) + 2(101) + 2(101) = 1011100 + 1011100 + 1011100 + 1011100 + 1011100\n    # final = [1011110, 1011111, 11110110, 11110111, 11110111]\n    #n = 6\n    # 2(1010) + 2(1010) + 2(1010) + 2(1010) + 2(1010) + 2(1010) = 1011010 + 1011010 + 1011010 + 1011010 + 1011010 + 1011010\n    # final = [1011010, 1011011, 11110110, 11110111, 11110111, 11110111]\n    #n = 7\n    # 2(10100) + 2(10100) + 2(10100) + 2(10100) + 2(10100) + 2(10100) + 2(10100) = 10110100 + 10110100 + 10110100 + 10110100 + 10110100 + 10110100 + 10110100\n    # final = [10110100, 10110101, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    #n = 8\n    # 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) + 2(101000) = 101101000 + 101101000 + 101101000 + 101101000 + 101101000 + 101101000 + 101101000 + 101101000\n    # final = [101101000, 101101001, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    #n = 9\n    # 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) + 2(1010000) = 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000 + 1011010000\n    # final = [1011010000, 1011010001, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    #n = 10\n    # 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) + 2(10100000) = 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000 + 10110100000\n    # final = [10110100000, 10110100001, 11110110, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111, 11110111]\n    \n    #first binary number \n    #11 \n    # 2(11) + 2(11) = 11(110) + 11(110)\n    #n = 3\n    # 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110\n    #final = [1101110, 1101111, 1111110, 1111111, 1111111]\n    #n = 4\n    # 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111]\n    #n = 5\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111]\n    #n = 6\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111]\n    #n = 7\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111]\n    #n = 8\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111, 1111111]\n    #n = 9\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111, 1111111, 1111111]\n    #n = 10\n    # 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) + 2(110) = 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110 + 1101110\n    # final = [1101110, 1101111, 1111110, 1111111, 1111111, 1111111, 1111111, 1111111, 1111111, 1111111]\n    \n    if n == 1:\n        return 2\n    else:\n        return (2 ** (n - 1)) * count_binary_seq(n - 1) + count_binary_seq(n - 1)\n",
        "num_ids": 1849
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def next_bin_seq(n): \n    \n        if n <= 1: \n            return [0, 1] \n        prev_seq = next_bin_seq(n-1) \n        seq = [] \n        for num in prev_seq: \n            seq.append(num) \n            seq.append(num + 2) \n        return seq \n    \n    seq = next_bin_seq(n) \n    sum_seq = 0\n    for num in seq: \n        sum_seq += num \n    return len(seq)//2 - sum_seq//2\n",
        "num_ids": 144
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d = d.copy()\n    max_depth = 0\n    while d:\n        max_depth += 1\n        new_d = {}\n        for k, v in d.items():\n            if isinstance(v, dict):\n                new_d[k] = v\n        d = new_d\n    return max_depth\n",
        "num_ids": 80
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d)!= dict:\n        return 0\n    depths = []\n    for k, v in d.items():\n        depths.append(dict_depth(v))\n    return 1 + (max(depths) if len(depths) > 0 else 0)\n",
        "num_ids": 68
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n",
        "num_ids": 21
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n",
        "num_ids": 40
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    dep = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            dep = max(dep, 1 + dict_depth(d[key]))\n        else:\n            dep = max(dep, 1)\n    return dep\n",
        "num_ids": 63
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    return max(dict_depth(d[k]) for k in d) + 1\n",
        "num_ids": 37
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        d = dict(d)\n    if d is None or len(d) == 0:\n        return 1\n    elif type(d) == list:\n        return 1 + max([dict_depth(i) for i in d])\n    else:\n        return 1\n",
        "num_ids": 75
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(dict_depth(v) if isinstance(v, dict) else 0 for v in d.values())\n",
        "num_ids": 32
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ans = 0\n    for i in range(0,index) :\n        ans = ( ans + (ranges[i+1] - ranges[i]) + (ranges[i] - ranges[i-1]))\n    return ans + ranges[index] - (rotations[index] * (ranges[index]))\n    \n",
        "num_ids": 80
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index>=len(ranges)):\n        return arr[index]\n    else :\n        rotation_number=ranges[index]\n        print(rotation_number)\n        if(rotations[index]==0):\n            return arr[index]\n        elif(rotations[index]==1):\n            return arr[index]\n        elif(rotations[index]==2):\n            return arr[index]\n        elif(rotations[index]==3):\n            return arr[index]\n        else :\n            return find_Element(arr,ranges,rotations,index+1)\n",
        "num_ids": 149
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = arr[rotations:] + arr[:rotations]\n    if index>=0 :\n        return arr[index]\n    else :\n        index = len(arr) + index\n        return arr[index]\n",
        "num_ids": 54
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(len(arr)<=ranges[index]):\n        rotations[index]=0\n        print(\"Element Not Found\")\n    else:\n        print(\"Element Found\")\n    \n",
        "num_ids": 47
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(rotations>=len(arr)) :\n        return -1\n    if(index<0 or index>len(arr)-1) :\n        return -1\n    temp = arr[0]\n    index-=1\n    arr[0]=arr[index]\n    arr[index]=temp\n    print(\"Index = \",index)\n    print(\"arr = \",arr)\n    \n    if(arr[index]==ranges[index]) :\n        return index\n    else :\n        return find_Element(arr,ranges,rotations+1,index)\n    \n    \ndef find_Element_Binary(arr,ranges,rotations,left,right,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(rotations>=len(arr)) :\n        return -1\n    if(index<0 or index>len(arr)-1) :\n        return -1\n    if(left>right) :\n        return -1\n    mid = int((left+right)/2)\n    \n    if(arr[mid]==ranges[mid]) :\n        return mid\n    \n    if(arr[mid]>ranges[mid]) :\n        left = mid+1\n        return find_Element_Binary(arr,ranges,rotations+1,left,right,index)\n    else :\n        right = mid-1\n        return find_Element_Binary(arr,ranges,rotations+1,left,right,index)\n    \n    \n",
        "num_ids": 180
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    try:\n        rotations = int(rotations)\n        index = int(index)\n        if(rotations > 0) :\n            if(rotations%2 == 0) : # If number of rotations is even\n                element = arr[(index-1)%len(arr)]\n                return element\n            else :  # if number of rotations is odd\n                if(index-1>=0) :\n                    element = arr[index-1]\n                    return element\n                else :\n                    element = arr[(index-1+len(arr))%len(arr)]\n                    return element\n        else :\n            return \"Invalid Input\"\n    except :\n        return \"Invalid Input\"\n",
        "num_ids": 163
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges[index] > 0 :\n        return arr[index]\n    if ranges[index] == 0 :\n        return arr[index]\n    i = index\n    while True :\n        if i + 1 < len(arr) :\n            i = i + 1\n        else :\n            i = i + 1\n        if i >= len(arr) :\n            break\n    i = i - len(arr)\n    arr_new = arr[i::] + arr[0:i]\n    if index + rotations < len(arr_new) :\n        return arr_new[index + rotations]\n    if index + rotations >= len(arr_new) :\n        return arr_new[(index + rotations) % len(arr_new)]\n    return 0\n",
        "num_ids": 183
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for k in range(0,len(arr)) :\n        if(index+rotations+k<len(arr)) :\n            if(arr[index+rotations+k]==ranges[k]) :\n                return True\n        else :\n            return False\n    return False\n",
        "num_ids": 68
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Your Code Here\n    for i in range(rotations) :\n        #print(i)\n        if(index == 0) :\n            #print(\"here\")\n            temp = arr[len(arr)-1]\n            arr.append(temp)\n            arr.pop(0)\n            #print(arr)\n            #print(temp)\n            index = len(arr)-1\n        else :\n            temp = arr[index-1]\n            arr[index-1] = arr[index]\n            arr[index] = temp\n            #print(arr)\n            index = index - 1\n    print(arr[index])\n",
        "num_ids": 150
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,rotations) :\n        new_index=index-i\n        if new_index < 0 :\n            index = new_index + len(arr)\n        else :\n            index = new_index\n    return arr[index]\n",
        "num_ids": 63
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words_p = [word for word in words if word.startswith('p')]\n    print(words_p)\n    return words_p\n    \ndef count_words(words):\n    '''\n    Write a function to return number of words starting with letter 'a' in a given list.\n    '''\n    count = 0\n    for word in words:\n        if word.startswith('a'):\n            count += 1\n    print(count)\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_of_words = []\n    for word in words:\n        if word[0] == 'p' or word[0] == 'P':\n            list_of_words.append(word)\n    return list_of_words\n",
        "num_ids": 58
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list_words = words.split(\" \")\n    for i in list_words:\n        if re.match(\"^p.*\", i):\n            print(i)\n",
        "num_ids": 42
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    output = []\n    for word in words:\n        if word.startswith('p'):\n            output.append(word)\n    if len(output) > 0:\n        return output\n    else:\n        return None\n",
        "num_ids": 56
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result=[]\n    for word in words:\n        if word[0]=='p':\n            result.append(word)\n    return result\ndef start_withp_dict(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' using a dictionary.\n    '''\n    return {word:word for word in words if word[0]=='p'}\ndef match_words(words):\n    '''\n    Write a function to match a string containing only uppercase letters.\n    '''\n    return re.match('[A-Z]+',words).group()\ndef add_dict(words):\n    '''\n    Write a function to add two dictionaries together.\n    '''\n    result={}\n    for word in words[0]:\n        if word in result:\n            result[word]+=words[0][word]\n        else:\n            result[word]=words[0][word]\n    for word in words[1]:\n        if word in result:\n            result[word]+=words[1][word]\n        else:\n            result[word]=words[1][word]\n    return result\ndef dictionary_from_lists(words):\n    '''\n    Write a function to return a dictionary from two lists.\n    '''\n    return {word:word for word in words[0]}\ndef unique_values(words):\n    '''\n    Write a function to return the number of unique values in a list of dictionaries.\n    '''\n    return len(set([value for dic in words for value in dic.values()]))\ndef unique_values_dict(words):\n    '''\n    Write a function to return the number of unique values in a list of dictionaries using a dictionary.\n    '''\n    return len(set(words[0].values())|set(words[1].values()))\ndef count_pairs(words):\n    '''\n    Write a function to count the number of words in a list of dictionaries that have the same exact matching pairs.\n    '''\n    result=0\n    for dic1 in words:\n        for dic2 in words:\n            if sorted(dic1.items())==sorted(dic2.items()):\n                result+=1\n    return result\ndef count_pairs_dict(words):\n    '''\n    Write a function to count the number of words in a list of dictionaries that have the same exact matching pairs using a dictionary.\n    '''\n    return len({key:key for key in words[0] if key in words[1]})\ndef make_word_dict(words):\n    '''\n    Write a function to return a dictionary where each key is a word in a list of words and the value is the length of that word.\n    '''\n    return {word:len(word) for word in words}\ndef sort_dict(words):\n    '''\n    Write a function to return a dictionary that has the keys sorted in alphabetical order.\n    '''\n    return {key:words[key] for key in sorted(words)}\ndef count_words(words):\n    '''\n    Write a function to return the number of words in a list of words.\n    '''\n    return len(words)\ndef count_words_dict(words):\n    '''\n    Write a function to return the number of words in a list of words using a dictionary.\n    '''\n    return len(words)\ndef last_element_index(words):\n    '''\n    Write a function to return the index of the last element in a list of words.\n    '''\n    return len(words)-1\ndef count_words_end_index(words):\n    '''\n    Write a function to return the index of the last element in a list of words.\n    '''\n    return {word:index for index,word in enumerate(words)}\ndef word_by_number(words):\n    '''\n    Write a function to return the element at an index in a list of words.\n    '''\n    return words[4]\ndef word_by_number_dict(words):\n    '''\n    Write a function to return the element at an index in a list of words using a dictionary.\n    '''\n    return {number:words[number] for number in range(len(words))}\ndef count_words_start_index(words):\n    '''\n    Write a function to return the index of the first element in a list of words.\n    '''\n    return {word:index for index,word in enumerate(words)}\ndef index_from_word(words):\n    '''\n    Write a function to return the index of a word in a list of words.\n    '''\n    return [index for index,word in enumerate(words) if word=='hi'][0]\ndef index_from_word_dict(words):\n    '''\n    Write a function to return the index of a word in a list of words using a dictionary.\n    '''\n    return {word:index for index,word in enumerate(words)}\ndef count_words_startswith(words):\n    '''\n    Write a function to return the number of words in a list of words that start with a certain letter.\n    '''\n    return len([word for word in words if word[0]=='s'])\ndef count_words_startswith_dict(words):\n    '''\n    Write a function to return the number of words in a list of words that start with a certain letter using a dictionary.\n    '''\n    return {key:len([word for word in words if word[0]==key]) for key in set([word[0] for word in words])}\ndef word_count(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words.\n    '''\n    return [words.count(word) for word in words]\ndef word_count_dict(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words using a dictionary.\n    '''\n    return {word:words.count(word) for word in words}\ndef word_count_startswith(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words that start with a certain letter.\n    '''\n    return [words.count(word) for word in words if word[0]=='s']\ndef word_count_startswith_dict(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words that start with a certain letter using a dictionary.\n    '''\n    return {word:words.count(word) for word in words if word[0]=='s'}\ndef count_words_dict_method(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words using a dictionary and a count method.\n    '''\n    return {word:words.count(word) for word in words}\ndef count_words_method_startswith(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words that start with a certain letter using a count method.\n    '''\n    return [words.count(word) for word in words if word[0]=='s']\ndef count_words_method_startswith_dict(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words that start with a certain letter using a count method and a dictionary.\n    '''\n    return {word:words.count(word) for word in words if word[0]=='s'}\ndef make_word_dict_method(words):\n    '''\n    Write a function to return a dictionary where each key is a word in a list of words and the value is the length of that word using a dictionary and a count method.\n    '''\n    return {word:len(word) for word in words}\ndef count_words_dict_method_startswith(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words using a dictionary and a count method.\n    '''\n    return {word:words.count(word) for word in words}\ndef count_words_dict_method_startswith_dict(words):\n    '''\n    Write a function to return the number of times each word appears in a list of words using a dictionary and a count method using a dictionary.\n    '''\n    retur",
        "num_ids": 5
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile(r'p\\w*')\n    word_list = p.findall(words)\n    return word_list\n",
        "num_ids": 37
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n",
        "num_ids": 24
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words=['w','o','r','d','q','p','p','o','r','d','s']\n    word=[]\n    for index,word in enumerate(words):\n        if word[0]=='p':\n            word.append(index)\n    return word",
        "num_ids": 69
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words=[]\n    for w in words:\n        if re.findall('^p',w):\n            p_words.append(w)\n    return p_words\n",
        "num_ids": 45
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    \n    list_words = words.split()\n    first_word = ''\n    second_word = ''\n    for word in list_words:\n        if word[0] == 'p':\n            if first_word == '':\n                first_word = word\n            else:\n                second_word = word\n                \n    if first_word!= '' and second_word!= '':\n        return first_word,second_word\n    else:\n        return 'not found'\n    \n",
        "num_ids": 117
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    m = [0] * n\n    m[0] = a[0]\n    for i in range(1, n):\n        m[i] = max(m[i - 1], m[i - 1] + a[i] + 1)\n        if i == k - 1:\n            return m[i]\n    for i in range(k - 1, n):\n        m[i] = max(m[i - 1], m[i - 1] + a[i] + 1)\n    return m[n - 1]\n",
        "num_ids": 129
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    # include the current element\n    include = max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n    \n    # exclude the current element\n    exclude = max_sum_increasing_subseq(a, n, index + 1, k)\n    \n    # return the largest\n    return max(include, exclude)\n",
        "num_ids": 100
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n",
        "num_ids": 54
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k:\n        return 0\n    if index == 0:\n        return a[index]\n    max_sum = float('-inf')\n    for i in range(index, k):\n        max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[i])\n    return max_sum\n",
        "num_ids": 89
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Initialize result.\n    result = 0\n    \n    # Traverse through all prefixes.\n    for i in range(n):\n        \n        # Initialize prefix sum.\n        prefix = 0\n        \n        # Initialize j as length of increasing subsequence ending at i, to be updated while processing all prefixes.\n        j = 1\n        \n        # Compute sum of prefix from 0 to i.\n        prefix += a[i]\n        \n        # Find sum of increasing subsequence including i (but excluding j),\n        # where j is the length of the increasing subsequence ending at i.\n        # This is done by comparing prefix with result and updating result\n        # if prefix is greater.\n        while(j <= i):\n            \n            # Update result if it is lower than prefix.\n            if(result < prefix):\n                result = prefix\n            \n            # Update prefix by adding a[j] to it.\n            prefix += a[j]\n            \n            # Update j as j + 1.\n            j += 1\n    \n    # Return result\n    return result\n",
        "num_ids": 249
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0 or n == 0:\n        return 0\n",
        "num_ids": 17
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    dp = [0 for i in range(n+1)]\n",
        "num_ids": 17
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # Base Case\n    if(n == 0):\n        return 0\n    if(k == 0):\n        return max(a)\n    # If k is greater than the size of subarray return sum of entire array\n    if(k > n):\n        return max_sum_increasing_subseq(a, n-1)\n    # return the max sum if the current element is the last element of the subarray\n    if(k == n):\n        return max_sum_increasing_subseq(a, n-1) + a[n-1]\n    \n    return max(a[n-1] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n-1, index, k))\n",
        "num_ids": 182
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # dp[i][k] stores the sum of maximum subsequence until ith index, that is, dp[i][k]\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n",
        "num_ids": 58
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n",
        "num_ids": 13
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex = list(tuplex)\n    tuplex.insert(m,':')\n    tuplex.insert(n,':')\n    return tuple(tuplex)\n",
        "num_ids": 47
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_colon = tuplex[0:m] + tuple([tuplex[m:n+1]]) + tuplex[n+1:]\n    return(tuplex_colon)\n",
        "num_ids": 53
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a=tuplex[0:m]\n    b=tuplex[m:n]\n    return a+b\n",
        "num_ids": 32
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst_colon = []\n    for i in range(0,len(tuplex)):\n        lst_colon.append(tuplex[i][:m] + tuplex[i][m+1:])\n    tuplex_colon = tuple(lst_colon)\n    return tuplex_colon\n",
        "num_ids": 84
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_r = ()\n    for i in range(0,len(tuplex),2):\n        tuplex_r = tuplex_r + (tuplex[i:i+2])\n    return tuplex_r\n",
        "num_ids": 61
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuple(tuplex[i:i+n] for i in range(0,len(tuplex),n))\n",
        "num_ids": 32
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon_tuplex = ()\n    for i in range(m):\n        colon_tuplex += (tuplex[i*n:(i+1)*n],)\n    return colon_tuplex\n",
        "num_ids": 54
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m],tuplex[n])\n",
        "num_ids": 18
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # colon_tuplex([(1,2,3,4,5),(6,7,8,9,10)],2,3)\n    # result = ()\n    # for tuplex in tuplex:\n    #     result += (tuplex[m-1:n-1],)\n    # return result\n    return [tuplex[i][m-1:n-1] for i in range(len(tuplex))]\n",
        "num_ids": 111
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    lst=[]\n    for i in range(m):\n        lst.append(tuplex[i][n])\n    return tuple(lst)\n",
        "num_ids": 40
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nums1 = [3, 4, 5]\n    # nums2 = [1, 2, 3]\n",
        "num_ids": 30
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #using sorted() function to sort list according to ascending order, \n    #using sorted() function to sort list according to descending order, \n    #using nlargest() function to get the required number of largest product\n    \n    #using sorted() function to sort list according to ascending order,\n    sorted_nums1 = sorted(nums1)\n    sorted_nums2 = sorted(nums2)\n",
        "num_ids": 97
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Runtime: O(n log n)\n    # Space Complexity: O(n)\n",
        "num_ids": 24
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Solution 1: Using Naive Approach\n    # O(N * logN)\n",
        "num_ids": 22
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    assert len(nums1) == N, \"nums1 should contain N elements\"\n    assert len(nums2) == N, \"nums2 should contain N elements\"\n    largest_products = []\n    \n    for i in range(N):\n        largest_products.append(nums1[i]*nums2[i])\n        \n    largest_products = sorted(largest_products)\n    return largest_products[-1]\n    ",
        "num_ids": 108
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n",
        "num_ids": 7
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > min(len(nums1), len(nums2)):\n        print('Too few elements!')\n        return\n    n1 = N//2\n    n2 = N - n1\n    p1 = sorted(nums1, reverse=True)[:n1]\n    p2 = sorted(nums2, reverse=True)[:n2]\n    return reduce(lambda a,b:a*b, p1+p2)\n",
        "num_ids": 109
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0:\n        raise Exception('nums1 is empty')\n    if len(nums2) == 0:\n        raise Exception('nums2 is empty')\n    \n    if N < 0:\n        raise Exception('N is negative')\n    \n    return max(max(nums1[0]*nums2[0], nums1[0]*nums2[N-1], nums1[N-1]*nums2[0]),\n               max(nums1[0]*nums2[N], nums1[N-1]*nums2[N-1], nums1[N-1]*nums2[N]))\n    \n    \ndef smallest_multiple(nums, N):\n    '''\n    Write a function that finds the smallest multiple of the given numbers (not counting zeroes).\n    '''\n    if len(nums) == 0:\n        raise Exception('nums is empty')\n    \n    if N < 0:\n        raise Exception('N is negative')\n    \n    min_val = max(nums)\n    product = min_val\n    \n    # find product of minimums\n    for i in range(N):\n        product *= min_val\n    \n    # find smallest multiple by multiplying with all numbers from the list\n    for i in range(N):\n        product /= nums[i]\n        product *= nums[i]\n    \n    return product\n",
        "num_ids": 139
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) * len(nums2) < N:\n        raise ValueError(\"Not enough elements.\")\n    # factored = {}\n    factored = []\n    for num1 in nums1:\n        for num2 in nums2:\n            factored.append(num1 * num2)\n",
        "num_ids": 77
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    result = []\n    \n    for i in range(N):\n        result.append(nums1[i] * nums2[i])\n    result.sort(reverse=True)\n    return result[:N]\n",
        "num_ids": 55
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n    \ndef min_max_avg(a,b,c,d):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return minimum(a,b)\n    else:\n        return minimum(b,c)\n    \n    \ndef min_max_avg_1(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a < b:\n        return minimum(a,b)\n    else:\n        return minimum(b,c)\n    \n    \ndef min_max_avg_2(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if a < b:\n        return minimum(a,b)\n    elif a < c:\n        return minimum(a,c)\n    else:\n        return minimum(b,c)\n    \n    \ndef min_max_avg_3(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    if a < b:\n        return minimum(a,b)\n    elif a < c:\n        return minimum(a,c)\n    elif a < d:\n        return minimum(a,d)\n    else:\n        return minimum(b,c)\n    \n    \ndef main():\n    '''\n    Write a python program to solve the following.\n    '''\n    a = 4\n    b = 5\n    c = 8\n    d = 9\n    e = 10\n    #print(maximum(a,b))\n    #print(minimum(a,b))\n    #print(min_max_avg(a,b,c,d))\n    #print(min_max_avg_1(a,b,c,d,e))\n    #print(min_max_avg_2(a,b,c,d,e))\n    #print(min_max_avg_3(a,b,c,d,e))\n",
        "num_ids": 141
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\nprint(\"maximum of two numbers is\",maximum(1,5)) \n",
        "num_ids": 28
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    a = int(input('Enter number 1: '))\n    b = int(input('Enter number 2: '))\n    if a>b:\n        print('Max: ',a)\n    else:\n        print('Max: ',b)\n",
        "num_ids": 59
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\n",
        "num_ids": 25
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef main():\n    a=float(input(\"Enter a number: \"))\n    b=float(input(\"Enter another number: \"))\n    print(\"Maximum number is: \",maximum(a,b))\n    print(\"Minimum number is: \",minimum(a,b))\nif __name__ == \"__main__\":\n    main()",
        "num_ids": 97
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\ndef difference(a,b):   \n    '''\n    Write a python function to find the difference between two numbers.\n    '''\n    return abs(a-b)\ndef distance(p1,p2):\n    '''\n    Write a python function to find the distance between two points.\n    '''\n    return (((p2[0]-p1[0])**2)+((p2[1]-p1[1])**2))**(1/2)\ndef circle_area(radius):\n    '''\n    Write a python function to calculate the area of a circle.\n    '''\n    return 3.14*radius**2\ndef triangle_area(base,height):\n    '''\n    Write a python function to calculate the area of a triangle.\n    '''\n    return 1/2*base*height\ndef square_area(side):\n    '''\n    Write a python function to calculate the area of a square.\n    '''\n    return side**2\ndef rectangle_area(length,breadth):\n    '''\n    Write a python function to calculate the area of a rectangle.\n    '''\n    return length*breadth\ndef parallelogram_area(length,breadth):\n    '''\n    Write a python function to calculate the area of a parallelogram.\n    '''\n    return length*breadth\ndef parallelogram_perimeter(length,breadth):\n    '''\n    Write a python function to calculate the perimeter of a parallelogram.\n    '''\n    return 2*(length+breadth)\ndef triangle_perimeter(side1,side2,side3):\n    '''\n    Write a python function to calculate the perimeter of a triangle.\n    '''\n    return side1+side2+side3\ndef square_perimeter(side):\n    '''\n    Write a python function to calculate the perimeter of a square.\n    '''\n    return 4*side\ndef rectangle_perimeter(length,breadth):\n    '''\n    Write a python function to calculate the perimeter of a rectangle.\n    '''\n    return 2*(length+breadth)\ndef triangle_circumference(side1,side2,side3):\n    '''\n    Write a python function to calculate the circumference of a triangle.\n    '''\n    return side1+side2+side3\ndef square_circumference(side):\n    '''\n    Write a python function to calculate the circumference of a square.\n    '''\n    return 4*side\ndef rectangle_circumference(length,breadth):\n    '''\n    Write a python function to calculate the circumference of a rectangle.\n    '''\n    return 2*(length+breadth)\ndef triangle_area_from_circumference(circumference):\n    '''\n    Write a python function to calculate the area of a triangle using the circumference equation.\n    '''\n    return (1/2)*circumference*(circumference-2*(2**(1/2)))\ndef square_area_from_circumference(circumference):\n    '''\n    Write a python function to calculate the area of a square using the circumference equation.\n    '''\n    return circumference**2\ndef rectangle_area_from_circumference(circumference):\n    '''\n    Write a python function to calculate the area of a rectangle using the circumference equation.\n    '''\n    return circumference*2\ndef triangle_area_from_area(length,breadth):\n    '''\n    Write a python function to calculate the circumference of a triangle using the area equation.\n    '''\n    return 1/2*(length+breadth)*(length+breadth)\ndef square_area_from_area(side):\n    '''\n    Write a python function to calculate the circumference of a square using the area equation.\n    '''\n    return side**2\ndef rectangle_area_from_area(length,breadth):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the area equation.\n    '''\n    return length*breadth\ndef area_from_area(length,breadth):\n    '''\n    Write a python function to calculate the area of a rectangle using the area equation.\n    '''\n    return length*breadth\ndef area_from_circumference(circumference):\n    '''\n    Write a python function to calculate the area of a rectangle using the circumference equation.\n    '''\n    return circumference*2\ndef circumference_from_area(area):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the area equation.\n    '''\n    return 2*(area**(1/2))\ndef circumference_from_circumference(circumference):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the circumference equation.\n    '''\n    return circumference*4\ndef circumference_from_area(area):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the area equation.\n    '''\n    return 2*(area**(1/2))\ndef area_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the area of a rectangle using the perimeter equation.\n    '''\n    return perimeter/4\ndef perimeter_from_area(area):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the area equation.\n    '''\n    return 4*(area**(1/2))\ndef perimeter_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the perimeter equation.\n    '''\n    return perimeter*4\ndef perimeter_from_circumference(circumference):\n    '''\n    Write a python function to calculate the perimeter of a rectangle using the circumference equation.\n    '''\n    return circumference*4\ndef circumference_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the circumference of a rectangle using the perimeter equation.\n    '''\n    return perimeter*4\ndef perimeter_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the perimeter of a rectangle using the perimeter equation.\n    '''\n    return perimeter*4\ndef area_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the area of a rectangle using the perimeter equation.\n    '''\n    return perimeter/4\ndef area_from_length_breadth(length,breadth):\n    '''\n    Write a python function to calculate the area of a rectangle using the length and breadth equation.\n    '''\n    return length*breadth\ndef perimeter_from_length_breadth(length,breadth):\n    '''\n    Write a python function to calculate the perimeter of a rectangle using the length and breadth equation.\n    '''\n    return 2*(length+breadth)\ndef perimeter_from_length_height(length,height):\n    '''\n    Write a python function to calculate the perimeter of a rectangle using the length and height equation.\n    '''\n    return 2*(length+height)\ndef length_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the length of a rectangle using the perimeter equation.\n    '''\n    return perimeter/2\ndef height_from_perimeter(perimeter):\n    '''\n    Write a python function to calculate the height of a rectangle using the perimeter equation.\n    '''\n    return (perimeter/2)-(perimeter/2)\ndef perimeter_from_length_height(length,height):\n    '''\n    Write a python function to calculate the perimeter of a rectangle using the length and height equation.\n    '''\n    return 2*(length+height)\ndef perimeter_from_area_height(area,height):\n    '''\n    Write a python function to calculate the perimeter of a rectangle using the area and height equation.\n    '''\n    return 4*area+2*height\ndef height_from_area(area):\n    '''\n    Write a python function to calculate the height of a rectangle using the area equation.\n    '''\n    return (area/4)-(area/4)\ndef area_from_length_height(length,height):\n    '''\n    Write a python function to calculate the area of a rectangle using the length and height equation.\n    '''\n    return length*height\ndef perimeter_from_length_height(length,height):\n    '",
        "num_ids": 24
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\ndef minimum_maximum(a,b):\n    '''\n    Write a python function to find the minimum and maximum of two numbers.\n    '''\n    if a>b:\n        return b,a\n    else:\n        return a,b\ndef minimum_maximum_test():\n    a=input(\"Enter 1st number: \")\n    b=input(\"Enter 2nd number: \")\n    c,d=minimum_maximum(a,b)\n    print('The minimum number is:',c)\n    print('The maximum number is:',d)\n",
        "num_ids": 97
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif b>a:\n        return b\n    else:\n        return a\n",
        "num_ids": 33
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = str1.replace(\" \", \"\")\n    str2 = str2.lower()\n    str3 = tuple(str2)\n    return str3\n",
        "num_ids": 40
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = []\n    str2.append(str1[:1])\n    if len(str1) > 1:\n        str2.append(str1[1:])\n    return tuple(str2)\n",
        "num_ids": 53
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tup = ()\n    for c in str1:\n        tup += (c,)\n    return tup\n",
        "num_ids": 29
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # input: string str1\n    # output: tuple or list of tuples\n    # a. Assume that the string str1 only contains lower case alphabets and ','\n    # b. Assume that the returned list is sorted\n    # c. If str1 is not valid, return None\n    # d. Please do not use built-in functions.\n",
        "num_ids": 85
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "num_ids": 10
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    \n    return tuple(str1)\n",
        "num_ids": 12
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(bin(n))\n    n = n | (n & -n)\n    print(bin(n))\n",
        "num_ids": 30
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    result = n & ~(n+1)\n    return result\n",
        "num_ids": 18
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    res = n&(~(n+1))\n    return res\n    \n",
        "num_ids": 21
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = ~n \n    n = n + 1 \n    return n \n",
        "num_ids": 22
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    result = 0\n    while result <= n:\n        result = result << 1\n        result += 1\n    return result - 1\n",
        "num_ids": 32
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    # 1. Create a mask with n bits set\n    # 2. Set the lowest unset bit in the mask\n    # 3. Return the masked number\n    \n    mask = n - 1\n    masked = n & mask\n    return masked\n    \nif __name__ == '__main__':\n    print(set_left_most_unset_bit(6))\n    print(set_left_most_unset_bit(10))\n    print(set_left_most_unset_bit(20))\n    print(set_left_most_unset_bit(25))\n    ",
        "num_ids": 142
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n ^ (n & -n)\n",
        "num_ids": 13
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ((n & -n) ^ n) \n",
        "num_ids": 15
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n \n    n = n & (n - 1) \n    return n \n",
        "num_ids": 25
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    num_bits = int.bit_length(n)\n    print(num_bits)\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi*r**2*h/3\n    print('Volume of a cone is: ',vol)\n",
        "num_ids": 30
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # r is the radius of the base\n    # h is the height\n    return math.pi*r**2*h/3\n",
        "num_ids": 33
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*(r**2)*(h)\n    return volume\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = (1/3)*math.pi*(r**2)*(h) + math.pi*r**2\n    return surface_area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (1/2)*math.pi*r**2 + 2*math.pi*r*h\n    return surface_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    return volume\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef volume_parallel_prism(l,w,h):\n    '''\n    Write a function to find the volume of a parallel prism.\n    '''\n    volume = (1/2)*l*w*h\n    return volume\ndef surface_area_parallel_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a parallel prism.\n    '''\n    surface_area = 2*l*w + 2*w*h + 2*l*h\n    return surface_area\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = 1/2*a*b*c\n    return volume\ndef surface_area_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    surface_area = a + b + c\n    return surface_area\ndef volume_rectangular_prism(w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = w*h\n    return volume\ndef surface_area_rectangular_prism(w,h):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    surface_area = 2*w*h\n    return surface_area\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = 1/3*a*h**2\n    return volume\ndef surface_area_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    surface_area = 2*(1/2)*a*h + (1/2)*math.sqrt((a**2)+(h**2))\n    return surface_area\ndef volume_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    volume = (4/3)*math.pi*r1*r2*r3\n    return volume\ndef surface_area_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    surface_area = 4*math.pi*(r1*r2 + r1*r3 + r2*r3)\n    return surface_area\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = a**3\n    return volume\ndef surface_area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surface_area = 6*a**2\n    return surface_area\ndef volume_hemisphere(a):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    volume = 1/2*a**2*math.pi\n    return volume\ndef surface_area_hemisphere(a):\n    '''\n    Write a function to find the surface area of a hemisphere.\n    '''\n    surface_area = 2*math.pi*(a**2)\n    return surface_area\ndef volume_cone_section(r,h):\n    '''\n    Write a function to find the volume of a cone section.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef surface_area_cone_section(r,h):\n    '''\n    Write a function to find the surface area of a cone section.\n    '''\n    surface_area = (1/3)*math.pi*(r**2)*(h) + math.pi*r**2\n    return surface_area\ndef volume_cylinder_section(r,h):\n    '''\n    Write a function to find the volume of a cylinder section.\n    '''\n    volume = (1/3)*math.pi*(r**2)*h\n    return volume\ndef surface_area_cylinder_section(r,h):\n    '''\n    Write a function to find the surface area of a cylinder section.\n    '''\n    surface_area = (1/2)*math.pi*r**2 + 2*math.pi*r*h\n    return surface_area\ndef volume_sphere_section(r):\n    '''\n    Write a function to find the volume of a sphere section.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\ndef surface_area_sphere_section(r):\n    '''\n    Write a function to find the surface area of a sphere section.\n    '''\n    surface_area = 4*math.pi*(r**2)\n    return surface_area\ndef volume_parallel_extrusion(w,l,h):\n    '''\n    Write a function to find the volume of a parallel extrusion.\n    '''\n    volume = w*l*h\n    return volume\ndef surface_area_parallel_extrusion(w,l,h):\n    '''\n    Write a function to find the surface area of a parallel extrusion.\n    '''\n    surface_area = 2*w*l + 2*l*h\n    return surface_area\ndef volume_triangular_extrusion(a,b,c):\n    '''\n    Write a function to find the volume of a triangular extrusion.\n    '''\n    volume = 1/2*a*b*c\n    return volume\ndef surface_area_triangular_extrusion(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular extrusion.\n    '''\n    surface_area = 2*a*b + 2*b*c + 2*c*a\n    return surface_area\ndef volume_rectangular_extrusion(w,h):\n    '''\n    Write a function to find the volume of a rectangular extrusion.\n    '''\n    volume = w*h\n    return volume\ndef surface_area_rectangular_extrusion(w,h):\n    '''\n    Write a function to find the surface area of a rectangular extrusion.\n    '''\n    surface_area = 2*w*h\n    return surface_area\ndef volume_pyramid_extrusion(a,h):\n    '''\n    Write a function to find the volume of a pyramid extrusion.\n    '''\n    volume = (1/3)*a**2*h\n    return volume\ndef surface_area_pyramid_extrusion(a,h):\n    '''\n    Write a function to find the surface area of a pyramid extrusion.\n    '''\n    surface_area = 2*(1/2)*a*h + (1/2)*math.sqrt((a**2)+(h**2))\n    return surface_area\ndef volume_ellipsoid_section",
        "num_ids": 53
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * (r**2) * h\n    return volume\n",
        "num_ids": 27
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*r**2*h\n    return v\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r**2*h\n    return v\n    \ndef volume_right_circular_cylinder(r):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    v=math.pi*r**2\n    return v\n    \ndef volume_parallelepiped(l,w,h):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    v=l*w*h\n    return v\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=math.pi*(4/3)*r**3\n    return v\n    \ndef volume_cone_wedge(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=1/3*math.pi*(r**2+h**2)\n    return v\n    \ndef volume_cylinder_wedge(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v=math.pi*r*h\n    return v\n    \ndef volume_right_circular_cylinder_wedge(r):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    v=math.pi*r**2\n    return v\n    \ndef volume_triangular_prism(l,w,h):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    v=l*w*h/2\n    return v\n    \ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=l**3\n    return v\n    \ndef volume_cylinder_with_cap(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a cap.\n    '''\n    v=(math.pi*r**2*h)/2\n    return v\n    \ndef volume_cone_with_cap(r,h):\n    '''\n    Write a function to find the volume of a cone with a cap.\n    '''\n    v=(math.pi*r**2*h)/3\n    return v\n    \ndef volume_cone_with_vertical_cap(r,h):\n    '''\n    Write a function to find the volume of a cone with a vertical cap.\n    '''\n    v=(math.pi*r**2*h)/4\n    return v\n    \ndef volume_cylinder_with_slant_cap(r,h):\n    '''\n    Write a function to find the volume of a cylinder with a slanted cap.\n    '''\n    v=(math.pi*r**2*h)/3\n    return v\n    \ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a=math.pi*r**2+2*math.pi*r*h\n    return a\n    \ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=2*math.pi*r*(r+h)\n    return a\n    \ndef area_right_circular_cylinder(r):\n    '''\n    Write a function to find the surface area of a right circular cylinder.\n    '''\n    a=2*math.pi*r\n    return a\n    \ndef area_parallelepiped(l,w,h):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    a=2*l*w+2*l*h+2*w*h\n    return a\n    \ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    a=4*math.pi*r**2\n    return a\n    \ndef area_cone_wedge(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    a=2*(math.pi*(r**2+h**2))+math.pi*r*h\n    return a\n    \ndef area_cylinder_wedge(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a=2*math.pi*r*h+math.pi*r**2\n    return a\n    \ndef area_right_circular_cylinder_wedge(r):\n    '''\n    Write a function to find the surface area of a right circular cylinder.\n    '''\n    a=2*math.pi*r\n    return a\n    \ndef area_triangular_prism(l,w,h):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    a=2*l*w+2*l*h+2*w*h\n    return a\n    \ndef area_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    a=6*l**2\n    return a\n    \ndef area_cylinder_with_cap(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a cap.\n    '''\n    a=2*(math.pi*r*(r+h))\n    return a\n    \ndef area_cone_with_cap(r,h):\n    '''\n    Write a function to find the surface area of a cone with a cap.\n    '''\n    a=2*(math.pi*r*(r+h))\n    return a\n    \ndef area_cone_with_vertical_cap(r,h):\n    '''\n    Write a function to find the surface area of a cone with a vertical cap.\n    '''\n    a=math.pi*r**2\n    return a\n    \ndef area_cylinder_with_slant_cap(r,h):\n    '''\n    Write a function to find the surface area of a cylinder with a slanted cap.\n    '''\n    a=2*math.pi*r*(r+h)\n    return a\n    \ndef moment_of_inertia_parallelepiped(l,w,h):\n    '''\n    Write a function to find the moment of inertia of a parallelepiped.\n    '''\n    i=l*w**3/12+l*h**3/12+w*h**3/12\n    return i\n    \ndef moment_of_inertia_right_circular_cylinder(r):\n    '''\n    Write a function to find the moment of inertia of a right circular cylinder.\n    '''\n    i=math.pi*r**4/4\n    return i\n    \ndef moment_of_inertia_cone(r,h):\n    '''\n    Write a function to find the moment of inertia of a cone.\n    '''\n    i=math.pi*(r**4+h**4)/4\n    return i\n    \ndef moment_of_inertia_cylinder_with_cap(r,h):\n    '''\n    Write a function to find the moment of inertia of a cylinder with a cap.\n    '''\n    i=math.pi*r**4/4\n    return i\n    \ndef moment_of_inertia_right_circular_cylinder_with_cap(r):\n    '''\n    Write a function to find the moment of inertia of a right circular cylinder with a cap.\n    '''\n    i=math.pi*r**4/4\n    return i\n    \ndef moment_of_inertia_triangular_prism(l,w,h):\n    '''\n    Write a function to find the moment of inertia of a triangular prism.\n    '''\n    i=l*w**3/12+l*h**3/12+w*h**3/12\n    return i\n    ",
        "num_ids": 34
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume=math.pi*r**2*h/3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round((math.pi * r**2 * h)/3,2)\n",
        "num_ids": 21
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*r*h/3\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l*l*l\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r*r*r\n    return volume\n",
        "num_ids": 24
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 2:\n        return 0\n    return math.log2(n)\n",
        "num_ids": 23
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 1:\n        print(\"n must be greater than or equal to 1\")\n    else:\n        max_power = 0\n        while n >= 2:\n            n //= 2\n            max_power += 1\n        return max_power\n",
        "num_ids": 60
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2**(len(bin(n))-3)\n",
        "num_ids": 17
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<1:\n        raise ValueError('n must be greater than 1')\n    i=0\n    p=1\n    while p<=n:\n        p=p<<i\n        i+=1\n    return p>>i-1\n",
        "num_ids": 60
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    ans = -1\n    for i in range(40):\n        pow = 2**i\n        if pow <= n:\n            ans = pow\n    return ans\n",
        "num_ids": 41
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while (True): \n        if (2 ** i <= n): \n            i += 1\n        else: \n            break\n    return 2 ** (i - 1)\n",
        "num_ids": 48
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highestPower = 0\n    while (highestPower <= n):\n        highestPower <<= 1\n    return highestPower >> 1\n",
        "num_ids": 31
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # a=1\n    # for i in range(32):\n    #     a*=2\n    #     if a<=n:\n    #         return i\n    # return 32\n",
        "num_ids": 47
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 \n    highest_power_of_2 = 0\n",
        "num_ids": 24
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0; \n    i = 1; \n    while (highest <= n): \n        highest = 2 ** i; \n        i += 1; \n    return highest; \n    \n    \ndef sum_of_squares(n): \n    '''\n    Write a python function to find the sum of squares from 1 to n.\n    '''\n    s = 0; \n    for i in range(1, n+1): \n        s = s + (i * i); \n    return s; \n    \n    \ndef sum_of_squares_while(n): \n    '''\n    Write a python function to find the sum of squares using while loop.\n    '''\n    s = 0; \n    i = 1; \n    while (i <= n): \n        s += (i * i); \n        i += 1; \n    return s; \n    \n    \ndef sum_of_even_number(n): \n    '''\n    Write a python function to find the sum of all even numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(2, n+1): \n        if (i % 2 == 0): \n            s += i; \n    return s; \n    \n    \ndef sum_of_even_number_while(n): \n    '''\n    Write a python function to find the sum of all even numbers from 1 to n using while loop.\n    '''\n    s = 0; \n    i = 2; \n    while (i <= n): \n        if (i % 2 == 0): \n            s += i; \n        i += 1; \n    return s; \n    \n    \ndef sum_of_odd_number(n): \n    '''\n    Write a python function to find the sum of all odd numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(1, n+1): \n        if (i % 2!= 0): \n            s += i; \n    return s; \n    \n    \ndef sum_of_odd_number_while(n): \n    '''\n    Write a python function to find the sum of all odd numbers from 1 to n using while loop.\n    '''\n    s = 0; \n    i = 1; \n    while (i <= n): \n        if (i % 2!= 0): \n            s += i; \n        i += 1; \n    return s; \n    \n    \ndef sum_of_squares_of_odd_number(n): \n    '''\n    Write a python function to find the sum of squares of odd numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(1, n+1): \n        if (i % 2!= 0): \n            s += (i * i); \n    return s; \n    \n    \ndef sum_of_squares_of_odd_number_while(n): \n    '''\n    Write a python function to find the sum of squares of odd numbers from 1 to n using while loop.\n    '''\n    s = 0; \n    i = 1; \n    while (i <= n): \n        if (i % 2!= 0): \n            s += (i * i); \n        i += 1; \n    return s; \n    \n    \ndef sum_of_even_number_squares(n): \n    '''\n    Write a python function to find the sum of squares of even numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(2, n+1): \n        if (i % 2 == 0): \n            s += (i * i); \n    return s; \n    \n    \ndef sum_of_even_number_squares_while(n): \n    '''\n    Write a python function to find the sum of squares of even numbers from 1 to n using while loop.\n    '''\n    s = 0; \n    i = 2; \n    while (i <= n): \n        if (i % 2 == 0): \n            s += (i * i); \n        i += 1; \n    return s; \n    \n    \ndef sum_of_odd_number_squares(n): \n    '''\n    Write a python function to find the sum of squares of odd numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(1, n+1): \n        if (i % 2!= 0): \n            s += (i * i); \n    return s; \n    \n    \ndef sum_of_odd_number_squares_while(n): \n    '''\n    Write a python function to find the sum of squares of odd numbers from 1 to n using while loop.\n    '''\n    s = 0; \n    i = 1; \n    while (i <= n): \n        if (i % 2!= 0): \n            s += (i * i); \n        i += 1; \n    return s; \n    \n    \ndef sum_of_squares_of_n_digit_number(n): \n    '''\n    Write a python function to find the sum of squares of n digit numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(1, n+1): \n        s += (i * i); \n    return s; \n    \n    \ndef sum_of_squares_of_n_digit_number_while(n): \n    '''\n    Write a python function to find the sum of squares of n digit numbers from 1 to n using while loop.\n    '''\n    s = 0; \n    i = 1; \n    while (i <= n): \n        s += (i * i); \n        i += 1; \n    return s; \n    \n    \ndef sum_of_n_digit_number(n): \n    '''\n    Write a python function to find the sum of n digit numbers from 1 to n.\n    '''\n    s = 0; \n    for i in range(1, n+1): \n        s += i; \n    return s; \n    \n    \ndef sum_of_n_digit_number_while(n): \n    '''\n    Write a python function to find the sum of n digit numbers using while loop.\n    '''\n    s = 0; \n    i = 1; \n    while (i <= n): \n        s += i; \n        i += 1; \n    return s; \n    \n    \ndef sum_of_n_digit_number_without_using_for(n): \n    '''\n    Write a python function to find the sum of n digit numbers without using for loop.\n    '''\n    return sum(range(1, n+1))\n    \n    \ndef sum_of_n_digit_number_without_using_while(n): \n    '''\n    Write a python function to find the sum of n digit numbers without using while loop.\n    '''\n    return n * (n + 1) / 2\n    \n    \ndef sum_of_n_digit_number_without_using_recursion(n): \n    '''\n    Write a python function to find the sum of n digit numbers without using recursion.\n    '''\n    return sum(range(n, n * 10, n + 1))\n    \n    \ndef sum_of_n_digit_number_without_using_recursion2(n): \n    '''\n    Write a python function to find the sum of n digit numbers without using recursion.\n    '''\n    return sum(range(1, n * (n + 1) / 2 + 1, n + 1))\n    \n    \ndef main(): \n    print(\"Sum of squares of 1 to 10 is:\", sum_of_squares(10)) \n    print(\"Sum of squares of 1 to 10 using while loop is:\", sum_of_squares_while(10)) \n    print(\"Sum of even number from 1 to 10 is:\", sum_of_even_number(10)) \n    print(\"Sum of even number from 1 to 10 using while loop is:\", sum_of_even_number_while(10)) \n    print(\"Sum of odd number from 1 to 10 is:\", sum_of_odd_number(10))",
        "num_ids": 170
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Using the formula\n    # 2*n lucas number = n^2 + n + 2\n    return n**2 + n + 2\n",
        "num_ids": 35
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n):\n        if n == 0:\n            return 2\n        if n == 1:\n            return 1\n        return lucas(n-2)+lucas(n-1)\n    return lucas(n)\n    \n    \ndef main():\n    print(find_lucas(5))\n    \nif __name__ == '__main__':\n    main()\n    \n    \n    \n'''\nIn mathematics, the Lucas\u2013Lehmer test (LLT) is a primality test for Mersenne numbers.\n",
        "num_ids": 28
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n",
        "num_ids": 53
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n >= 0\n    a = 2\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(n - 1):\n            a, b = b, a + b\n        return b\n",
        "num_ids": 71
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n        \nprint(find_lucas(5))",
        "num_ids": 65
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: return 2\n    elif n == 1: return 1\n    else: return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 47
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #Base Case:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n",
        "num_ids": 30
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)\n",
        "num_ids": 49
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # write your code here\n    \n    # if n < 0:\n        # return \"Not a valid input!\"\n    \n    # if n == 0:\n        # return 2\n    \n    # elif n == 1:\n        # return 1\n    \n    # else:\n        # return find_lucas(n-1) + find_lucas(n-2)\n",
        "num_ids": 92
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(i) for i in list_]\n    return list_\n",
        "num_ids": 25
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for i in list_:\n        new_list.append(string.format(i))\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for item in list_:\n        print(string % item)\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(el) for el in list_]\n    return list_\n",
        "num_ids": 25
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n",
        "num_ids": 18
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = list(map(str, list_))\n    list_ = [string.format(i) for i in list_]\n    return list_\n",
        "num_ids": 39
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    length = len(list_)\n    for i in range(length):\n        list_[i] = string % list_[i]\n",
        "num_ids": 35
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # Your code here\n    return\n",
        "num_ids": 11
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    string = string.replace('[','')\n    string = string.replace(']','')\n    string = string.replace('\"','')\n    string = string.replace(\"'\",'')\n    \n    list_ = string.split(',')\n    \n    return list_\n    \ndef new_list(list_1, list_2, list_3, list_4):\n    '''\n    Write a function to create a list of lists, each containing a string of four items, where each item is the name of a color. \n    For example: ['red', 'green', 'blue', 'yellow']\n    '''\n    list_ = []\n    for i in range(0, len(list_1)):\n        list_.append([list_1[i], list_2[i], list_3[i], list_4[i]])\n        \n    return list_\n    \ndef list_palindrome(string):\n    '''\n    Write a function to determine if a given string is a palindrome. \n    '''\n    list_ = []\n    \n    if len(string) == 0:\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        for i in range(0, len(string)):\n            list_.append(string[i])\n            \n    for j in range(0, int(len(list_)/2)):\n        if list_[j] == list_[len(list_) - 1 - j]:\n            continue\n        else:\n            return False\n            \n    return True\n    \ndef count_upper(string):\n    '''\n    Write a function to count the number of uppercase letters in a given string. \n    '''\n    count = 0\n    for i in range(0, len(string)):\n        if string[i].isupper():\n            count += 1\n            \n    return count\n    \ndef count_lower(string):\n    '''\n    Write a function to count the number of lowercase letters in a given string. \n    '''\n    count = 0\n    for i in range(0, len(string)):\n        if string[i].islower():\n            count += 1\n            \n    return count\n",
        "num_ids": 42
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:l2[i], l3[i]:l4} for i in range(len(l1))]\n",
        "num_ids": 36
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{l1[i]:l2[i], l3[i]:l1[i]} for i in range(len(l1))]\n",
        "num_ids": 38
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2)!= len(l3):\n        return None\n    res = {}\n    for i in range(len(l1)):\n        res[l1[i]] = {l2[i]: l3[i]}\n    return res\n",
        "num_ids": 69
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_out = {}\n    for i in range(len(l1)):\n        dict_out[l1[i]] = {l2[i]:l3[i]}\n    return dict_out\n",
        "num_ids": 51
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == len(l2) == len(l3):\n        l = list(zip(l1,l2,l3))\n        return dict(l)\n",
        "num_ids": 46
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {l1[i]:{l2[i]:l3[i] for i in range(len(l2))} for i in range(len(l1))}\n    return d\n",
        "num_ids": 49
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n    # print(len(l1))\n    for i in range(len(l1)):\n        dictionary[l1[i]] = {}\n        # print(i)\n        for j in range(len(l2)):\n            # print(l1[i], l2[j])\n            dictionary[l1[i]][l2[j]] = l3[i][j]\n    return dictionary\n",
        "num_ids": 106
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        if l1[i] not in d:\n            d[l1[i]] = {l2[i]:l3[i]}\n        else:\n            d[l1[i]].update({l2[i]:l3[i]})\n    return d\n",
        "num_ids": 84
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    for j in range(len(l3)):\n        dict2[l3[j]] = l2[j]\n    for k in range(len(l1)):\n        dict3[l1[k]] = dict2[dict1[l1[k]]]\n    return dict3\n",
        "num_ids": 119
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {l2[i]: l3[i]}\n    return d\n    \nl1 = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nl2 = ['x', 'y', 'z', 'a', 'b', 'c', 'd', 'e']\nl3 = [1, 2, 3, 4, 5, 6, 7, 8]\nprint(convert_list_dictionary(l1, l2, l3)",
        "num_ids": 143
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if (n == 1):\n        return 1\n",
        "num_ids": 14
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    return max((get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n",
        "num_ids": 63
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    dp = [0]*(n+1)\n    max_sum = 0\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1], dp[i//2] + i, dp[i//3] + i, dp[i//4] + i, dp[i//5] + i)\n        if max_sum < dp[i]:\n            max_sum = dp[i]\n    return max_sum\n",
        "num_ids": 119
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return n ** 2 + (n ** 2) % 2\n",
        "num_ids": 16
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    \n    stack = []\n    stack.append(0)\n    stack.append(1)\n    while len(stack)!= 0:\n        stack_item = stack.pop()\n        if stack_item == n:\n            return 1\n        if stack_item > n:\n            continue\n        if stack_item % 2 == 0:\n            stack.append(stack_item//2)\n        if stack_item % 3 == 0:\n            stack.append(stack_item//3)\n        if stack_item % 4 == 0:\n            stack.append(stack_item//4)\n        if stack_item % 5 == 0:\n            stack.append(stack_item//5)\n",
        "num_ids": 173
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==1:\n        return 1\n    res= [0,1]\n    if n%2==0:\n        res.append(get_max_sum(n//2))\n    else:\n        res.append(get_max_sum((n-1)//2))\n    if n%3==0:\n        res.append(get_max_sum(n//3))\n    else:\n        res.append(get_max_sum((n-1)//3))\n    if n%4==0:\n        res.append(get_max_sum(n//4))\n    else:\n        res.append(get_max_sum((n-1)//4))\n    if n%5==0:\n        res.append(get_max_sum(n//5))\n    else:\n        res.append(get_max_sum((n-1)//5))\n    return max(res)\n",
        "num_ids": 221
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    s = 0\n    for i in range(1, n):\n        s = max(s, (i + get_max_sum(i - 1)) )\n    return s\n",
        "num_ids": 44
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    max_sum = 0\n    for i in range(1, n):\n        max_sum = max(max_sum, get_max_sum(i))\n    return max_sum\n",
        "num_ids": 57
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base Case\n    if (n==0):\n        return 0\n",
        "num_ids": 19
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    \n    max_sum = [0]*(n+1)\n    max_sum[1] = 1\n",
        "num_ids": 40
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n            max_list = i\n    return max_list\n",
        "num_ids": 54
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for l in input_list:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n",
        "num_ids": 46
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = []\n    for i in input_list:\n        len_list.append(len(i))\n    return len_list.index(max(len_list))\n",
        "num_ids": 45
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    len_list = [len(each_item) for each_item in input_list]\n    len_list.sort()\n    return len_list[-1]\n",
        "num_ids": 42
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return input_list[0]\n",
        "num_ids": 11
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return [len(i) for i in input_list]\n",
        "num_ids": 17
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list,key=len)\n",
        "num_ids": 15
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    for i in input_list:\n        length_list.append(len(i))\n    return length_list\n",
        "num_ids": 36
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return [len(item) for item in input_list]\n",
        "num_ids": 17
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for l in input_list:\n        if len(l) > max_len:\n            max_len = len(l)\n",
        "num_ids": 40
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    # use a set and check if length of set is same as length of tuple\n    if len(set(test_tup)) == len(test_tup):\n        return False\n    else:\n        return True\n    \n    \ndef check_odd_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains odd number of distinct elements.\n    '''\n    \n    # use a set and check if length of set is same as length of tuple\n    if len(set(test_tup))!= len(test_tup):\n        return False\n    \n    # check if number of distinct elements are odd\n    if len(set(test_tup)) % 2 == 1:\n        return False\n    \n    return True\n    \n    \ndef check_adjacent(test_tup):\n    '''\n    Write a function to check if given tuple contains adjacent elements (in order).\n    '''\n    \n    # sort the tuple and check if it is consecutive\n    if test_tup == sorted(test_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 43
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    return False\n",
        "num_ids": 31
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    d = {}\n    for i in test_tup:\n        d[i] = d.get(i,0) + 1\n    if len(d)!= len(test_tup):\n        return False\n    else:\n        return True\n",
        "num_ids": 61
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False\n",
        "num_ids": 34
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n",
        "num_ids": 35
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(0, len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n",
        "num_ids": 64
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # your code here\n    test_tup = tuple(sorted(test_tup))\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n    \ndef flatten(test_list):\n    '''\n    Write a Python function to convert a given list of tuples to a given tuple of lists\n    '''\n    return tuple(item for sublist in test_list for item in sublist)\n",
        "num_ids": 21
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n",
        "num_ids": 22
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = input('Please input a string: ')\n    dict1 = {}\n    for char in str1:\n        if char not in dict1:\n            dict1[char] = 1\n        else:\n            dict1[char] += 1\n    for char in str1:\n        if dict1[char] == 1:\n            return char\n    return '_'\n",
        "num_ids": 91
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n    for i, char in enumerate(str1):\n        if char_count[char] == 1:\n            return i, char\n    return -1, None\n",
        "num_ids": 89
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1_dict = {}\n    for char in str1:\n        if char not in str1_dict:\n            str1_dict[char] = 1\n        else:\n            str1_dict[char] += 1\n    for char in str1:\n        if str1_dict[char] == 1:\n            return char\n    return None\n",
        "num_ids": 84
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_index_dict = {}\n    for index, char in enumerate(str1):\n        if char not in char_index_dict:\n            char_index_dict[char] = [index]\n        else:\n            char_index_dict[char].append(index)\n",
        "num_ids": 68
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    #char_dict = [0] * 256\n    #char_dict = dict.fromkeys(range(256), 0)\n",
        "num_ids": 39
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #list1 = list(str1)\n    for i in range(0,len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n            break\n        else:\n            continue\n    return '_'\n",
        "num_ids": 70
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    for key, value in char_freq.items():\n        if value == 1:\n            return key\n    return None\n",
        "num_ids": 70
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    my_dict = {}\n    for i in str1:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            my_dict[i] += 1\n    for key, value in my_dict.items():\n        if value == 1:\n            return key\n    return None\n",
        "num_ids": 79
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str_lowercase = str1.lower()\n    dict_char_count = {}\n",
        "num_ids": 23
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_rep_chars = {}\n    for char in str1:\n        if char not in non_rep_chars:\n            non_rep_chars[char] = 1\n        else:\n            non_rep_chars[char] += 1\n",
        "num_ids": 63
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(re.search(regex,string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 28
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex,string)) \n",
        "num_ids": 17
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex,string):\n        return f'String starts and ends with same character: {string}'\n    return f'String doesnt starts and ends with same character: {string}'\n",
        "num_ids": 49
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)<1:\n        return False\n    if bool(re.search(regex, string)):\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (bool(re.search(regex, string)))\nprint(check_char(\"same\")) # \u2192 True\nprint(check_char(\"rat\")) # \u2192 False\nprint(check_char(\"car\")) # \u2192 False\nprint(check_char(\"carr\")) # \u2192 True\nprint(check_char(\"cccc\")) # \u2192 True\nprint(check_char(\"x\")) # \u2192 True\nprint(check_char(\"xd\")) # \u2192 False\n",
        "num_ids": 103
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) >= 1:\n        return(string[0] == string[len(string) - 1])\n    return False\ndef check_char_any(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) >= 1:\n        return(string[0] == string[len(string) - 1])\n    return False\ndef check_char_beginning(string): \n    '''\n    Write a function to check whether the given string starts with a given character or not.\n    '''\n    if len(string) >= 1:\n        return(string[0] == string[0])\n    return False\ndef check_char_any_beginning(string): \n    '''\n    Write a function to check whether the given string starts with a given character or not.\n    '''\n    if len(string) >= 1:\n        return(string[0] == string[0])\n    return False\ndef check_char_end(string): \n    '''\n    Write a function to check whether the given string ends with a given character or not.\n    '''\n    if len(string) >= 1:\n        return(string[len(string) - 1] == string[len(string) - 1])\n    return False\ndef check_char_any_end(string): \n    '''\n    Write a function to check whether the given string ends with a given character or not.\n    '''\n    if len(string) >= 1:\n        return(string[len(string) - 1] == string[len(string) - 1])\n    return False\ndef check_char_middle(string): \n    '''\n    Write a function to check whether the given string has a character or characters in the middle or not.\n    '''\n    if len(string) >= 2:\n        return(string[1]!= string[0] and string[len(string) - 1]!= string[len(string) - 2])\n    return False\ndef check_char_any_middle(string): \n    '''\n    Write a function to check whether the given string has a character or characters in the middle or not.\n    '''\n    if len(string) >= 2:\n        return(string[1]!= string[0] and string[len(string) - 1]!= string[len(string) - 2])\n    return False\ndef check_char_palindrome(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if len(string) >= 1:\n        return(string == string[::-1])\n    return False\ndef check_char_any_palindrome(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    if len(string) >= 1:\n        return(string == string[::-1])\n    return False\ndef check_char_space(string): \n    '''\n    Write a function to check whether the given string has at least 1 whitespace character or not.\n    '''\n    return(string.isspace())\ndef check_char_any_space(string): \n    '''\n    Write a function to check whether the given string has at least 1 whitespace character or not.\n    '''\n    return(string.isspace())\ndef check_char_capital(string): \n    '''\n    Write a function to check whether the given string has at least 1 capital letter or not.\n    '''\n    return(string.isupper())\ndef check_char_any_capital(string): \n    '''\n    Write a function to check whether the given string has at least 1 capital letter or not.\n    '''\n    return(string.isupper())\ndef check_char_lower(string): \n    '''\n    Write a function to check whether the given string has at least 1 lowercase letter or not.\n    '''\n    return(string.islower())\ndef check_char_any_lower(string): \n    '''\n    Write a function to check whether the given string has at least 1 lowercase letter or not.\n    '''\n    return(string.islower())\ndef check_char_digit(string): \n    '''\n    Write a function to check whether the given string has at least 1 digit or not.\n    '''\n    return(string.isdigit())\ndef check_char_any_digit(string): \n    '''\n    Write a function to check whether the given string has at least 1 digit or not.\n    '''\n    return(string.isdigit())\ndef check_char_no_char(string): \n    '''\n    Write a function to check whether the given string contains no character or not.\n    '''\n    return(not string)\ndef check_char_any_no_char(string): \n    '''\n    Write a function to check whether the given string contains no character or not.\n    '''\n    return(not string)\ndef check_char_no_space(string): \n    '''\n    Write a function to check whether the given string contains no space character or not.\n    '''\n    return(not string.isspace())\ndef check_char_any_no_space(string): \n    '''\n    Write a function to check whether the given string contains no space character or not.\n    '''\n    return(not string.isspace())\ndef check_char_no_capital(string): \n    '''\n    Write a function to check whether the given string contains no capital letter or not.\n    '''\n    return(not string.isupper())\ndef check_char_any_no_capital(string): \n    '''\n    Write a function to check whether the given string contains no capital letter or not.\n    '''\n    return(not string.isupper())\ndef check_char_no_lower(string): \n    '''\n    Write a function to check whether the given string contains no lowercase letter or not.\n    '''\n    return(not string.islower())\ndef check_char_any_no_lower(string): \n    '''\n    Write a function to check whether the given string contains no lowercase letter or not.\n    '''\n    return(not string.islower())\ndef check_char_no_digit(string): \n    '''\n    Write a function to check whether the given string contains no digit or not.\n    '''\n    return(not string.isdigit())\ndef check_char_any_no_digit(string): \n    '''\n    Write a function to check whether the given string contains no digit or not.\n    '''\n    return(not string.isdigit())\ndef check_char_space_only(string): \n    '''\n    Write a function to check whether the given string has only space characters only or not.\n    '''\n    return(string.isspace())\ndef check_char_any_space_only(string): \n    '''\n    Write a function to check whether the given string has only space characters only or not.\n    '''\n    return(string.isspace())\ndef check_char_no_space_only(string): \n    '''\n    Write a function to check whether the given string has only space characters only or not.\n    '''\n    return(not string.isspace())\ndef check_char_equal(string): \n    '''\n    Write a function to check whether the given string equals the given character or not.\n    '''\n    return(string == '=')\ndef check_char_any_equal(string): \n    '''\n    Write a function to check whether the given string equals the given character or not.\n    '''\n    return(string == '=')\ndef check_char_other(string): \n    '''\n    Write a function to check whether the given string is a valid character or not.\n    '''\n    return(True)\ndef check_char_any_other(string): \n    '''\n    Write a function to check whether the given string is a valid character or not.\n    '''\n    return(True)\ndef check_char_none(string): \n    '''\n    Write a function to check whether the given string is none or not.\n    '''\n    return(not string)\ndef check_char_any_none(string): ",
        "num_ids": 21
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if re.match(regex, string):\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 32
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n",
        "num_ids": 16
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex,string)\n",
        "num_ids": 14
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return b\n    elif b < a < c:\n        return a\n    elif b < c < a:\n        return c\n    elif c < b < a:\n        return b\n    elif c < a < b:\n        return a\n    elif a < c < b:\n        return c\n",
        "num_ids": 85
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a >= b and a <= c) or (a >= c and a <= b):\n        return a\n    elif (b >= a and b <= c) or (b >= c and b <= a):\n        return b\n    else:\n        return c\n",
        "num_ids": 63
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        elif a > c:\n            return a\n        else:\n            return c\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    c=int(c)\n    if a<b and b<c:\n        return b\n    elif a<b and b>c:\n        return a\n    elif a>b and b<c:\n        return b\n    else:\n        return a\n",
        "num_ids": 81
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return a if b < a < c or c < a < b else b if a < b < c or c < b < a else c\n",
        "num_ids": 34
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b and b < c:\n        return b\n    if a < c and c < b:\n        return c\n    if b < a and a < c:\n        return a\n    if b < c and c < a:\n        return b\n    if c < a and a < b:\n        return a\n    if c < b and b < a:\n        return b\n    else:\n        return None\n",
        "num_ids": 100
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a>c:\n            return c\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        elif b>c:\n            return c\n        else:\n            return b\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n",
        "num_ids": 75
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # first idea, sorting three numbers and taking the middle one\n    # but this works only if the numbers are distinct\n    numbers = [a,b,c]\n    numbers.sort()\n    print(\"sorted:\",numbers)\n    # return the middle one\n    if len(numbers) % 2 == 1:\n        return numbers[(len(numbers)-1)//2]\n    else:\n        return (numbers[(len(numbers)-1)//2]+numbers[((len(numbers)-1)//2)-1])/2\n",
        "num_ids": 134
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a > b):\n        if (a > c):\n            return a\n        return c\n    if (b > c):\n        if (b > a):\n            return b\n        return a\n    return c\ndef num_of_factors(a,b):\n    '''\n    Write a function to find the number of factors a and b have in common.\n    '''\n    count = 0\n    for i in range(1,a+1):\n        if (a % i == 0):\n            count += 1\n    for j in range(1,b+1):\n        if (b % j == 0):\n            count -= 1\n    return count\n",
        "num_ids": 67
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += sum([int(d) for d in str(num)])\n    return s\n",
        "num_ids": 37
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digit = 0\n    for i in nums:\n        sum_of_digit += sum([int(j) for j in str(i)])\n    return sum_of_digit\n",
        "num_ids": 49
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_list = []\n    for num in nums:\n        sum = 0\n        for digit in str(num):\n            sum += int(digit)\n        sum_list.append(sum)\n    return sum_list\n",
        "num_ids": 55
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in str(nums))\n",
        "num_ids": 19
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    def sum_digit(n):\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum\n",
        "num_ids": 40
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for n in nums:\n        total += sum(int(d) for d in str(n))\n    return total\n",
        "num_ids": 36
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for number in nums:\n        while number > 0:\n            sum_of_digits += number % 10\n            number = number // 10\n",
        "num_ids": 46
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # print(sum([int(i) for i in nums]))\n    # res = 0\n    # for i in nums:\n    #     res += int(i)\n    # return res\n    return sum(map(int, nums))\n",
        "num_ids": 62
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for digit in str(nums)])\n",
        "num_ids": 20
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x,y in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a^b for a,b in zip(test_tup1,test_tup2))\n    \nprint('bitwise_xor')\nprint(bitwise_xor((1,1,0,1),(0,1,1,0)))\n",
        "num_ids": 66
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1_list = list(test_tup1)\n    test_tup2_list = list(test_tup2)\n",
        "num_ids": 38
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "num_ids": 50
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    return tuple(bin(int(a, 2) ^ int(b, 2))[2:] for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 76
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for tup in test_list:\n        if tup in freq:\n            freq[tup] += 1\n        else:\n            freq[tup] = 1\n    return freq\n",
        "num_ids": 56
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(x) for x in test_list))\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        freq[i] = test_list.count(i)\n    return freq\n",
        "num_ids": 38
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(i) for i in test_list))\n",
        "num_ids": 21
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n",
        "num_ids": 16
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # make a set out of the list\n    set_list = set(test_list)\n    # count the number of unique elements in the set\n    unique_ele = len(set_list)\n    # return the number of unique elements\n    return unique_ele\n",
        "num_ids": 63
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create the dictionary\n    dict_freq = {}\n    # Iterate over the list\n    for x in test_list:\n        # If the element is in the dictionary then increment the value\n        if x in dict_freq:\n            dict_freq[x] += 1\n        # Else add the element to the dictionary and set the value to 1\n        else:\n            dict_freq[x] = 1\n    # Iterate over the dictionary\n    for key, val in dict_freq.items():\n        # Print the value and the tuple\n        print(val, key)\n",
        "num_ids": 138
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n",
        "num_ids": 13
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # dict_freq = {}\n    # for tuple_ in test_list:\n    #     if tuple_ not in dict_freq:\n    #         dict_freq[tuple_] = 1\n    #     else:\n    #         dict_freq[tuple_] += 1\n    # return dict_freq\n",
        "num_ids": 80
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    test_list = list(set(test_list))\n    return test_list\n",
        "num_ids": 30
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = ()\n    tup2 = ()\n    tup = ()\n    for i in range(0, len(test_tup1)):\n        tup1 += (test_tup1[i],)\n    for i in range(0, len(test_tup2)):\n        tup2 += (test_tup2[i],)\n    for i in range(0, len(test_tup1)):\n        tup += ((tup1[i] + tup2[i]),)\n    return tup\n",
        "num_ids": 133
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def flatten(test_tup):\n        return [item for sublist in test_tup for item in sublist]\n    res = [list(map(operator.add, flatten(test_tup1)[i], flatten(test_tup2)[i])) for i in range(len(flatten(test_tup1)))]\n    return tuple(res)\n",
        "num_ids": 92
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # add_tup = ()\n    # for i in range(len(test_tup1)):\n    #     add_tup += ((test_tup1[i] + test_tup2[i]),)\n    # return add_tup\n",
        "num_ids": 64
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return ()\n",
        "num_ids": 6
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(tup1, tup2):\n        new_tup = ()\n        for index, item in enumerate(tup1):\n            if type(item) == tuple:\n                new_tup = new_tup + add_nested_tuples(item, tup2[index])\n            else:\n                new_tup = new_tup + (item + tup2[index],)\n        return new_tup\n    return add_nested_tuples(test_tup1, test_tup2)\n",
        "num_ids": 137
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    print(\"Tuple 1 :\", test_tup1)\n    print(\"Tuple 2 :\", test_tup2)\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        print(\"Input error : Only nested tuples are allowed.\")\n        return\n    elif len(test_tup1)!= len(test_tup2):\n        print(\"Input error : Both tuples should be of same length.\")\n        return\n    else:\n        return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 145
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize empty list for returning the result\n    result_list = []\n    # loop over the list\n    for i in range(len(test_tup1)):\n        # if the list is empty, initialize it with the first element in the tuple\n        if len(result_list) == 0:\n            result_list.append(test_tup1[i])\n        # if the list is not empty, add the element at the last index to the first element of the tuple\n        else:\n            result_list[i-1] = tuple([sum(elem) for elem in zip(result_list[i-1], test_tup1[i])])\n    # if the list is not empty, add the second tuple element to the last element of the list\n    if len(result_list)!= 0:\n        result_list[len(result_list)-1] = tuple([sum(elem) for elem in zip(result_list[len(result_list)-1], test_tup2[len(result_list)-1])])\n    # return the list\n    return result_list\n",
        "num_ids": 258
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_tup3 = ()\n    for i in range(len(test_tup1)):\n        test_tup3 += (test_tup1[i] + test_tup2[i],)\n    return test_tup3\n",
        "num_ids": 62
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            res_tup += (add_nested_tuples(test_tup1[i], test_tup2[i]),)\n        else:\n            res_tup += (test_tup1[i] + test_tup2[i],)\n    return res_tup\n",
        "num_ids": 125
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return sum(test_tup1, test_tup2)\n",
        "num_ids": 19
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n",
        "num_ids": 21
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\n",
        "num_ids": 25
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n",
        "num_ids": 11
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a < b else b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b\ndef is_year_leap(year):\n    '''\n    Write a python function to check whether a given year is leap or not.\n    '''\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\ndef square(a):\n    '''\n    Write a python function to return the square of a number a.\n    '''\n    return a**2\ndef first_n_squares(n):\n    '''\n    Write a python function to return the first n square numbers.\n    '''\n    return [square(i) for i in range(n)]\ndef values_greater_than(a,b):\n    '''\n    Write a python function to return all values that are greater than a and b.\n    '''\n    return [i for i in a if i > b]\ndef fibonacci(n):\n    '''\n    Write a python function to return all the values of the fibonacci series.\n    '''\n    return [fibonacci(i) for i in range(n)]\ndef factorial(n):\n    '''\n    Write a python function to return the factorial of a number n.\n    '''\n    return 1 if n==0 else n*factorial(n-1)\ndef reverse(a):\n    '''\n    Write a python function to return the reverse of a string.\n    '''\n    return a[::-1]\ndef palindrome(a):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return True if a == reverse(a) else False\ndef sum_of_numbers(n):\n    '''\n    Write a python function to return the sum of all the numbers from 1 to n.\n    '''\n    return int(n*(n+1)/2)\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    return False if n==1 else [i for i in range(2,int(n**0.5)+1) if n%i == 0] == []\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a given number is armstrong or not.\n    '''\n    return False if n==0 else sum([int(i)**len(str(n)) for i in str(n)]) == n\ndef frequency(a):\n    '''\n    Write a python function to return the frequency of each element of a list a.\n    '''\n    return [(i,a.count(i)) for i in set(a)]\ndef is_pangram(a):\n    '''\n    Write a python function to check whether a given string is pangram or not.\n    '''\n    return False if len(set(a))!= 26 else True\ndef is_anagram(a,b):\n    '''\n    Write a python function to check whether two strings are anagrams or not.\n    '''\n    return False if len(a)!= len(b) else sorted(a) == sorted(b)\ndef rotate(a,n):\n    '''\n    Write a python function to rotate a list a by n elements.\n    '''\n    return a[n:]+a[:n]\ndef bubble_sort(a):\n    '''\n    Write a python function to sort a list a by using bubble sort algorithm.\n    '''\n    return a if len(a)<=1 else [a[i] for i in range(len(a)) if i==0 or a[i-1]<=a[i]]+bubble_sort(a[:i]+a[i+1:])\ndef binary_search(a,b):\n    '''\n    Write a python function to search a given number in a list.\n    '''\n    return -1 if b not in a else [i for i in range(len(a)) if a[i]==b][0]\ndef gcd(a,b):\n    '''\n    Write a python function to find the gcd of two numbers.\n    '''\n    return a if b==0 else gcd(b,a%b)\ndef is_leap(a):\n    '''\n    Write a python function to check whether a year is leap or not.\n    '''\n    return False if a%4!= 0 else True if a%100!= 0 else False if a%400!= 0 else True\ndef is_perfect_square(a):\n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    return a**0.5 == int(a**0.5)\ndef is_pythagorian(a,b,c):\n    '''\n    Write a python function to check whether a,b,c is pythagorian or not.\n    '''\n    return False if a+b>c and a+c>b and b+c>a else True\ndef find_all_subsets(a):\n    '''\n    Write a python function to find all the subsets of a given list a.\n    '''\n    return [i for i in range(len(a)+1)]\ndef reverse_string(a):\n    '''\n    Write a python function to reverse a string.\n    '''\n    return a[::-1]\ndef powerset(a):\n    '''\n    Write a python function to find the powerset of a given list a.\n    '''\n    return [i for i in range(len(a)+1) if i==0 or i==1]\ndef number_of_k_distinct_characters(a,b):\n    '''\n    Write a python function to find the number of k distinct characters in a given string a.\n    '''\n    return len([i for i in set(a) if a.count(i)>=b])\ndef number_of_k_characters(a,b):\n    '''\n    Write a python function to find the number of k characters in a given string a.\n    '''\n    return len([i for i in set(a) if a.count(i)>=b])\ndef number_of_distinct_characters(a):\n    '''\n    Write a python function to find the number of distinct characters in a given string a.\n    '''\n    return len([i for i in set(a)])\ndef number_of_pairs_with_given_difference(a,b):\n    '''\n    Write a python function to find the number of pairs in a given list a whose difference is b.\n    '''\n    return len([i for i in a if i+b in a])\ndef sum_of_subarrays(a,b):\n    '''\n    Write a python function to return the sum of subarrays of a given list a with a given difference b.\n    '''\n    return sum([i for i in a[b:] if i+b in a])\ndef find_second_maximum(a):\n    '''\n    Write a python function to find the second maximum number of a given list a.\n    '''\n    a.sort(reverse=True)\n    return a[0] if len(a)<=1 else [a[i] for i in range(len(a)) if i>0 and a[i]<=a[i-1]][0]\ndef prime_factors(a):\n    '''\n    Write a python function to find the prime factors of a number a.\n    '''\n    return [i for i in range(2,a+1) if a%i == 0 and is_prime(i)]\ndef maximum_product_of_three(a):\n    '''\n    Write a python function to find the maximum product of three numbers from the given list a.\n    '''\n    return [i*j*k for i in a for j in a for k in a if i!=j and i!=k and j!=k][0]\ndef permutations(a,b):\n    '''\n    Write a python function to return all permutations of a given list a.\n    '''\n    return [i for i in itertools.permutations(a,b)]\ndef fizz_buzz(a):\n    '''\n    Write a python function to return all the values of the sequence of the given list a.\n    '",
        "num_ids": 24
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a<b):\n        return a\n    else:\n        return b\n",
        "num_ids": 22
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    a=int(a)\n    b=int(b)\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef greatest(a,b,c):\n    '''\n    Write a Python program to find the range between a given number and 17.\n    '''\n    a=int(a)\n    b=int(b)\n    c=int(c)\n    if b>a and b<17:\n        print(b)\n    elif c>a and c<17:\n        print(c)\n    else:\n        print(17)\n        \ndef lenght(s):\n    '''\n    Write a Python function to compute the length of a given string.\n    '''\n    s=str(s)\n    print(len(s))\n",
        "num_ids": 18
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n        else:\n            pass\n    return False\n",
        "num_ids": 34
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    print('Checking whether an element exists in a tuple')\n    #first check if the tuple is empty\n    if len(tuplex) == 0:\n        return False\n    #if the tuple is not empty then compare the first element in the tuple with the element in question\n    elif tuplex[0] == tuple1:\n        return True\n    #if the first element in the tuple does not equal the element in question then check the second element\n    elif len(tuplex) > 1:\n        #check if the second element in the tuple equals the element in question\n        if tuplex[1] == tuple1:\n            return True\n        #if the second element in the tuple does not equal the element in question then continue to check the remaining elements\n        else:\n            return check_tuplex(tuplex[1:],tuple1)\n    #if the length of the tuple is less than 2 then return false\n    else:\n        return False\n",
        "num_ids": 222
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\nprint(check_tuplex((1,2,3,4),(1,2,3,4,5)))\n",
        "num_ids": 55
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            print(\"yes, it exists\")\n            return\n    print(\"no, it doesn't exist\")\n",
        "num_ids": 42
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) == 0:\n        return False\n    else:\n        return True\n",
        "num_ids": 30
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(0,len(tuple1)):\n        if tuplex == tuple1[i]:\n            return True\n    return False\n    \ndef check_tuplexs(tuplex1,tuplex2):\n    '''\n    Write a function to check whether two tuples have any elements in common.\n    '''\n    for i in tuplex1:\n        if check_tuplex(i,tuplex2) == True:\n            return True\n    return False\n",
        "num_ids": 39
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(\"Element is present in the tuple\")\n    else:\n        print(\"Element is not present in the tuple\")\n",
        "num_ids": 39
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count = 0 \n    for item in tuplex: \n        if item == tuple1: \n            count += 1 \n    if count > 0: \n        return True \n    else: \n        return False \ndef check_tuplex2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 in tuplex \ndef check_tuplex3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex else False \ndef check_tuplex4(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return False if tuple1 not in tuplex else True \ndef check_tuplex5(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex else False \ndef check_tuplex6(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return False if tuple1 not in tuplex else True \ndef check_tuplex7(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(item == tuple1 for item in tuplex)\ndef check_tuplex8(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return all(item == tuple1 for item in tuplex) \ndef check_tuplex9(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuple1 == tuplex \ndef check_tuplex10(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return len([item for item in tuplex if item == tuple1]) == 1\ndef check_tuplex11(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return len([item for item in tuplex if item == tuple1]) == 0 \ndef check_tuplex12(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return len([item for item in tuplex if item == tuple1]) \ndef check_tuplex13(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return sum([item == tuple1 for item in tuplex]) \ndef check_tuplex14(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return len([item for item in tuplex if item == tuple1]) \ndef check_tuplex15(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return sum([item == tuple1 for item in tuplex]) \ndef check_tuplex16(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.count(tuple1) \ndef check_tuplex17(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex.index(tuple1) \ndef check_tuplex18(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return [i for i, item in enumerate(tuplex) if item == tuple1] \ndef check_tuplex19(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex.count(tuple1) == 1 else False \ndef check_tuplex20(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex.count(tuple1) == 0 else False \ndef check_tuplex21(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex.index(tuple1) >= 0 else False \ndef check_tuplex22(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex.index(tuple1) == -1 else False \ndef check_tuplex23(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex else False \ndef check_tuplex24(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 not in tuplex else False \ndef check_tuplex25(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex.index(tuple1) >= 0 else False \ndef check_tuplex26(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuplex.index(tuple1) == -1 else False \ndef check_tuplex27(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex and tuplex.count(tuple1) == 1 else False \ndef check_tuplex28(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 not in tuplex and tuplex.count(tuple1) == 0 else False \ndef check_tuplex29(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex and tuplex.count(tuple1) == 1 else False \ndef check_tuplex30(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 not in tuplex and tuplex.count(tuple1) == 0 else False \ndef check_tuplex31(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex and tuplex.count(tuple1) == 1 else False \ndef check_tuplex32(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 not in tuplex and tuplex.count(tuple1) == 0 else False \ndef check_tuplex33(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex or tuplex.count(tuple1) == 0 else False \ndef check_tuplex34(tuplex,tuple1): \n    '''\n",
        "num_ids": 2
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True in [True for x in tuplex if x in tuple1]\n",
        "num_ids": 21
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return 'even'\n    else:\n        return 'odd'\n",
        "num_ids": 27
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    res = 0\n    while x:\n        res = res ^ x & 1\n        x >>= 1\n    return res \n",
        "num_ids": 32
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x: \n        parity = ~parity \n        x = x & (x-1)\n    return(parity)\n",
        "num_ids": 41
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    s = 0\n    for i in range(len(x)):\n        if x[i] == '1':\n            s += 1\n    if (s%2)==0:\n        return(\"Even\")\n    else:\n        return(\"Odd\")\n",
        "num_ids": 63
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2)\n",
        "num_ids": 10
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # parity - (xor) of all odd digits \n    return (x & 1) ^ ((x >> 2) & 1) \n  \ndef find_Parity_improved(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # parity - (xor) of all odd digits \n    parity = 0\n    while (x): \n        parity = (parity ^ x) & 1\n        x >>= 1\n    return (parity & 1) ^ 1\n",
        "num_ids": 59
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n",
        "num_ids": 8
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Initialize a variable to store the remainder\n    remainder = 0\n",
        "num_ids": 20
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap(num, i, j):\n        if num[i] == num[j]:\n            return num\n        else:\n            return num[:i] + num[j] + num[i+1:j] + num[i] + num[j+1:]\n",
        "num_ids": 67
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    for i in range(len(n)-1, 0, -1):\n        if n[i] > n[i-1]:\n            break\n    if i == 1 and n[0] == '9':\n        return -1\n    if n[i-1] == '9':\n        n[i-1] = '0'\n    else:\n        n[i-1] = str(int(n[i-1])+1)\n    j = len(n)-1\n    while j > i-1:\n        n[j] = n[j-1]\n        j -= 1\n    n[i] = '0'\n    return int(''.join(n))\n",
        "num_ids": 174
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    bigger = []\n    nums = [int(i) for i in str(n)]\n    nums = sorted(nums,reverse=True)\n    for i in nums:\n        bigger.append(i)\n    return int(''.join(str(i) for i in bigger))\n",
        "num_ids": 73
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #Take a number n\n    #split n into a list of its digits\n    #then create an empty string\n    #loop over the list of digits and append each digit to the string\n    #return the string\n    \n    l = []\n    for i in str(n):\n        l.append(i)\n    str_ = ''\n    for i in l:\n        str_ = str_ + i\n    return str_\n",
        "num_ids": 101
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n\n",
        "num_ids": 6
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n)-1\n    while i>0 and n[i]<=n[i-1]:\n        i-=1\n    if i==0:\n        return -1\n    j = len(n)-1\n    while n[j]<=n[i-1]:\n        j-=1\n    n[i-1],n[j]=n[j],n[i-1]\n    n = n[:i]+sorted(n[i:])\n    return int(''.join(n))\n",
        "num_ids": 137
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # assuming the digits of the number are in ascending order\n    def permutation_helper(digits, permutation, index):\n        # base case: we've reached the end of the permutation\n        if index == len(digits):\n            return digits\n",
        "num_ids": 61
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    last_i = len(str_n) - 1\n    while last_i > 0:\n        if str_n[last_i] > str_n[last_i - 1]:\n            break\n        else:\n            last_i -= 1\n    if last_i == 0:\n        return -1\n    swap = str_n[last_i:] + str_n[0:last_i]\n    if int(swap) >= n:\n        return -1\n    return int(swap)\n",
        "num_ids": 133
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s = list(str(n))\n    i = 0\n    while i < len(s) - 1:\n        if s[i] < s[i+1]:\n            s[i], s[i+1] = s[i+1], s[i]\n            return int(''.join(s))\n        i += 1\n    return -1\n",
        "num_ids": 86
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(str(n)[::-1])\n",
        "num_ids": 15
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    for i in range(min(len(nums1), len(nums2))):\n        heapq.heappush(h, (nums1[i] + nums2[i], i, 0))\n",
        "num_ids": 59
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        nums1, nums2 = nums2, nums1\n    min_heap = []\n    for n1 in nums1:\n        for n2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (n1 + n2, (n1, n2)))\n            else:\n                heapq.heappushpop(min_heap, (n1 + n2, (n1, n2)))\n    res = []\n    while min_heap:\n        res.append(heapq.heappop(min_heap)[1])\n    return res\n",
        "num_ids": 177
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs_helper(nums2, nums1, k)\n    elif len(nums2) == 0 or len(nums1) == 0:\n        return []\n    elif len(nums1) == 1 and len(nums2) == 1:\n        return [[nums1[0], nums2[0]]] if nums1[0] < nums2[0] else []\n",
        "num_ids": 123
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k > len(nums1)*len(nums2):\n        return []\n    \n    min_heap = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            heapq.heappush(min_heap, (nums1[i]+nums2[j], i,j))\n    res = []\n    for i in range(k):\n        _, i1, i2 = heapq.heappop(min_heap)\n        res.append([nums1[i1], nums2[i2]])\n    return res\n",
        "num_ids": 154
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    l = heapq.nsmallest(k, zip(nums1, nums2), key=lambda x: x[0] + x[1])\n    return [x[0] for x in l] + [x[1] for x in l]\n",
        "num_ids": 63
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    if k <= 0:\n        return None\n    if len(nums1) == 1 or len(nums2) == 1:\n        return None\n",
        "num_ids": 63
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # O(min(n,m))\n    # O(n + m) for all operations, for each we do n operations\n    # if the input is not sorted, then we can use an O(n*m) solution\n    if len(nums1) * len(nums2) > k:\n        return None\n",
        "num_ids": 77
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    pairs = []\n    i = 0\n    j = 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < k:\n            pairs.append((nums1[i], nums2[j]))\n            if len(pairs) == k:\n                break\n            i += 1\n        elif nums1[i] + nums2[j] > k:\n            j += 1\n        else:\n            pairs.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n    return pairs\n",
        "num_ids": 183
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # if k < len(nums1) * len(nums2):\n    #     raise ValueError\n    # if k == 0:\n    #     return\n    # if len(nums1) == 0 or len(nums2) == 0:\n    #     return\n    # if len(nums1) > len(nums2):\n    #     return k_smallest_pairs(nums2, nums1, k)\n    # if len(nums1) == len(nums2) == 1:\n    #     return [[nums1[0], nums2[0]]] if k == 1 else []\n    # if len(nums1) == 1 or len(nums2) == 1:\n    #     if len(nums1) == 1:\n    #         return [[nums1[0], nums2[0]] for i in range(k)]\n    #     else:\n    #         return [[nums1[0], nums2[0]] for i in range(k)]\n    # # print(nums1, nums2)\n    # # print(heapq.nsmallest(k, [(nums1[0] + nums2[0], 0, 0)]))\n    # res = []\n    # for i in range(k):\n    #     res.append((nums1[0] + nums2[0], 0, 0))\n    # heapq.heapify(res)\n    # # print(res)\n    # # res.sort()\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         # print(i, j)\n    #         heapq.heapreplace(res, (nums1[i] + nums2[j], i, j))\n    #         # heapq.heappop(res)\n    #         # heapq.heappush(res, (nums1[i] + nums2[j], i, j))\n    #         # print(res)\n    # # print(res)\n    # return [[nums1[i], nums2[j]] for (s, i, j) in res]\n    # ans = []\n    # while len(ans) < k:\n    #     min_sum = res.pop()\n    #     ans.append([nums1[min_sum[1]], nums2[min_sum[2]]])\n    # return ans\n    if len(nums1) < len(nums2):\n        temp = nums1\n        nums1 = nums2\n        nums2 = temp\n    if len(nums1) == 0 or len(nums2) == 0:\n        return\n    if k == 0:\n        return\n    if len(nums1) == 1 or len(nums2) == 1:\n        if len(nums1) == 1:\n            return [[nums1[0], nums2[0]] for i in range(k)]\n        else:\n            return [[nums1[0], nums2[0]] for i in range(k)]\n    arr = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            arr.append((nums1[i] + nums2[j], i, j))\n    arr.sort()\n    ans = []\n    while len(ans) < k:\n        min_sum = arr.pop()\n        ans.append([nums1[min_sum[1]], nums2[min_sum[2]]])\n    return ans\n",
        "num_ids": 867
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for i, n1 in enumerate(nums1):\n        for j, n2 in enumerate(nums2):\n            heapq.heappush(heap, (-n1 - n2, i, j))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    res = []\n    for _, i, j in heap:\n        res.append([nums1[i], nums2[j]])\n    return res\n",
        "num_ids": 125
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    product = []\n    for tuple1 in list1:\n        for tuple2 in list1:\n            if tuple1!= tuple2:\n                product.append(tuple1[0]*tuple2[0])\n    return min(product)\nlist1 = [(1, 2), (2, 5), (3, 8), (4, 3), (5, 7), (6, 10), (7, 13), (8, 2)]\nprint(min_product_tuple(list1))\n",
        "num_ids": 118
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = 0\n    for x in list1:\n        a = x[0]\n        b = x[1]\n        min_product = min(min_product, a * b)\n    return min_product\n",
        "num_ids": 55
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    new_list = list()\n    for i in list1:\n        for j in i:\n            new_list.append(j)\n    new_list.sort()\n    a = 0\n    b = 1\n    result = list()\n    for i in range(len(new_list)):\n        if i == 0:\n            result.append(new_list[i] * new_list[i+1])\n            continue\n        elif i == len(new_list) - 1:\n            result.append(new_list[i] * new_list[i-1])\n            continue\n        else:\n            result.append(new_list[i] * new_list[i+1] * new_list[i-1])\n            continue\n    result.sort()\n    return result[0]\n",
        "num_ids": 193
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = list(list1)\n    min_prod = (list2[0][0] * list2[0][1], list2[0][0], list2[0][1])\n    for tup in list2:\n        if min_prod[0] > tup[0] * tup[1]:\n            min_prod = (tup[0] * tup[1], tup[0], tup[1])\n    return min_prod\n",
        "num_ids": 116
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    prod = 1\n    for x in list1:\n        prod *= x\n    return prod\n",
        "num_ids": 27
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0][0] * list1[0][1]\n    else:\n        list1 = sorted(list1, key=lambda tup: tup[1])\n        return list1[0][0] * list1[1][1]\n",
        "num_ids": 90
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    mini = min(list1[0][0]*list1[0][1],list1[1][0]*list1[1][1])\n    if list1[0][0]*list1[0][1] == mini:\n        return list1[0]\n    elif list1[1][0]*list1[1][1] == mini:\n        return list1[1]\n",
        "num_ids": 97
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key = lambda x: x[1])\n    min_prod = 1\n    min_prod_tuple = ()\n    for i in range(len(list1)-1):\n        if list1[i][1] < list1[i+1][1]:\n            if list1[i][1] * list1[i+1][1] < min_prod:\n                min_prod = list1[i][1] * list1[i+1][1]\n                min_prod_tuple = list1[i], list1[i+1]\n    return min_prod_tuple\n",
        "num_ids": 153
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = [('a',3),('b',2),('c',1)]\n    list2 = [('d',4),('e',5),('f',6)]\n    list3 = [('g',7),('h',8),('i',9)]\n    min_prod = 1\n    for i in list1:\n        min_prod = min_prod * i[1]\n    for j in list2:\n        min_prod = min_prod * j[1]\n    for k in list3:\n        min_prod = min_prod * k[1]\n    print('Minimum product is:', min_prod)\n",
        "num_ids": 159
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min([i * j for i, j in list1])\n",
        "num_ids": 18
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    if len(listval) == 0:\n        return None\n    if len(listval) == 2:\n        return min(listval[0],listval[1])\n    if len(listval) == 3:\n        return min(listval[0],listval[1],listval[2])\n    return min_val([min_val(listval[:3]),min_val(listval[1:4])])\n",
        "num_ids": 122
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(len(listval)):\n        if min_val > listval[i]:\n            min_val = listval[i]\n    return min_val\n",
        "num_ids": 55
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for element in listval:\n        if element < min_value:\n            min_value = element\n    return min_value\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for l in listval:\n        if l < val:\n            val = l\n    return val\n",
        "num_ids": 35
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    for i in listval:\n        if i < listval[0]:\n            listval[0] = i\n    return listval[0]\n",
        "num_ids": 37
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for x in listval:\n        if x < min_value:\n            min_value = x\n    return min_value\n",
        "num_ids": 43
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(len(listval)):\n        if min_value > listval[i]:\n            min_value = listval[i]\n    return min_value\n",
        "num_ids": 55
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for item in listval:\n        if min_value > item:\n            min_value = item\n    return min_value\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2015
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val\n",
        "num_ids": 45
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for x in listval:\n        if type(x)==float:\n            if min_val==0 or x < min_val:\n                min_val = x\n        else:\n            for i in x:\n                if min_val==0 or i < min_val:\n                    min_val = i\n    return min_val\n",
        "num_ids": 88
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if isinstance(word, str):\n        new_word = re.sub(r'(_\\w)', lambda m: m.group(1)[1].upper(), word)\n        return new_word[0].lower() + new_word[1:]\n    else:\n        print(\"Invalid Input\")\n        return None\n",
        "num_ids": 77
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'(_\\w)', lambda x: x.group(1)[1].upper(), word)\n",
        "num_ids": 31
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_\\w', lambda x: x.group()[1].upper(), word)\n",
        "num_ids": 29
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #your code here\n    list = word.split('_')\n    list[0] = list[0].capitalize()\n    for i in range(1,len(list)):\n        list[i] = list[i].capitalize()\n    return ''.join(list)\n    \ndef is_balanced(string):\n    '''\n    Write a function that will return true if the given string is balanced else false.\n    '''\n    #your code here\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return False\n            elif close_brackets_dic[s]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef is_balanced_v2(string):\n    '''\n    Write a function that will return true if the given string is balanced else false.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return False\n            elif close_brackets_dic[s]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef my_enumerate(sequence, start=0):\n    '''\n    Write a function that will take a sequence and will return a generator that will return the next item in sequence and the index.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for i, s in enumerate(sequence,start):\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return\n            elif close_brackets_dic[s]!= stack.pop():\n                return\n        yield i,s\n        \ndef my_enumerate(sequence, start=0):\n    '''\n    Write a function that will take a sequence and will return a generator that will return the next item in sequence and the index.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for i, s in enumerate(sequence,start):\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return\n            elif close_brackets_dic[s]!= stack.pop():\n                return\n        yield i,s\n        \ndef is_balanced(string):\n    '''\n    Write a function that will return true if the given string is balanced else false.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return False\n            elif close_brackets_dic[s]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef is_balanced_v2(string):\n    '''\n    Write a function that will return true if the given string is balanced else false.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return False\n            elif close_brackets_dic[s]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef count_substring(string, sub_string):\n    '''\n    Write a function that will return the number of occurences of substring in the given string.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return False\n            elif close_brackets_dic[s]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef super_reduced_string(string):\n    '''\n    Write a function that will return the super reduced string of the given string.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s in open_brackets_dic.keys():\n            stack.append(s)\n        elif s in close_brackets_dic.keys():\n            if len(stack) == 0:\n                return False\n            elif close_brackets_dic[s]!= stack.pop():\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n        \ndef super_reduced_string_v2(string):\n    '''\n    Write a function that will return the super reduced string of the given string.\n    '''\n    #first let's create two dictionaries, one for opening brackets and one for closing brackets\n    open_brackets_dic = {'(':')', '[':']', '{':'}'}\n    close_brackets_dic = {')':'(', ']':'[', '}':'{'}\n    stack = []\n    for s in string:\n        if s i",
        "num_ids": 94
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Make sure first character is upper case.\n    #  If it is first character, just return the word.\n    new_word = word.title()\n",
        "num_ids": 38
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), word)\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), word)\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n",
        "num_ids": 28
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'_([a-zA-Z])',lambda m: m.group(1).upper(),word)\n",
        "num_ids": 34
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if not word:\n        return ''\n    words = re.split('_|-', word)\n    return words[0] + ''.join(i.title() for i in words[1:])\n",
        "num_ids": 50
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    nums = []\n    for i in l:\n        if i % 2 == 0:\n            nums.append(i)\n    return nums\n",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l_new = [x for x in l if x%2 == 0]\n    print(l_new)\nremove_odd([1,2,3,4,5,6,7,8,9])\n",
        "num_ids": 52
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    for i in l:\n        if i%2 == 0:\n            odds.append(i)\n    return odds\nprint(remove_odd([2,3,4,5,6,7,8,9,10,11,12,13,14,15]))",
        "num_ids": 72
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    even_numbers = [number for number in l if number % 2 == 0]\n    return even_numbers\nprint(remove_odd([1,2,3,4,5,6,7]))\n",
        "num_ids": 51
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if len(l) == 0:\n        return None\n    elif len(l) == 1:\n        if l[0] % 2 == 0:\n            return None\n        else:\n            return [l[0]]\n    else:\n        if l[0] % 2 == 0:\n            return remove_odd(l[1:])\n        else:\n            return remove_odd(l[1:]) + [l[0]]\n",
        "num_ids": 105
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    list_ = []\n    for n in l:\n        if n % 2!= 0:\n            list_.append(n)\n    return list_\n",
        "num_ids": 38
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i % 2 == 0]\n",
        "num_ids": 18
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x%2==0]\n    #your code here\n",
        "num_ids": 24
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    \n    # list1 = [('a', 3),('b', 6),('c', 9),('d', 12),('e', 15),('f', 18),('g', 21),('h', 24),('i', 27),('j', 30),('k', 33),('l', 36),('m', 39),('n', 42)]\n    # n = 5\n    return sorted(list1, key=lambda tup: tup[1])[n-1]\n    \ndef extract_nth_element_2(list1, n):\n    return sorted(list1, key=lambda tup: tup[1])[n-1]\n    ",
        "num_ids": 154
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = [list1[n]]\n    return list2\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(map(lambda x: x[n], list1))\n",
        "num_ids": 19
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "num_ids": 10
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    newList = []\n    for i in range(len(list1)):\n        newList.append(list1[i][n])\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(map(lambda x: x[n], list1))\n",
        "num_ids": 19
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n-1] for i in list1]\n",
        "num_ids": 18
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1[n])\n",
        "num_ids": 12
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return len(set(list1).intersection(list2))>0\n    \nprint(overlapping([1,2,3,4,5], [1,2,5,6]))\nprint(overlapping([1,2,3,4,5], [1,2,4,6]))\n",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = [1,2,3,4,5]\n    list2 = [2,3,5,6,7]\n    \n    list3 = [2,3,5,6,7]\n    list4 = [1,2,3,4,5]\n    list5 = [8,9,5,2,3]\n",
        "num_ids": 84
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if set(list1).isdisjoint(set(list2)):\n        return False\n    else:\n        return True\n        \nprint(overlapping([1,2,3,4,5],[3,4,5,6,7]))\nprint(overlapping([1,2,3,4,5],[3,4,5,6,7,8]))\n",
        "num_ids": 93
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = False\n    for i in list1:\n        for j in list2:\n            if i == j:\n                result = True\n    return result\n",
        "num_ids": 39
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1)<len(list2):\n        for x in list1:\n            if x in list2:\n                return True\n            else:\n                return False\n    else:\n        for x in list2:\n            if x in list1:\n                return True\n            else:\n                return False\n",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # list1 = [1,2,3,4,5]\n    # list2 = [3,4,5]\n    if (len(list1)<len(list2)):\n        min = list1\n        max = list2\n    else:\n        min = list2\n        max = list1\n",
        "num_ids": 76
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    #Method 1\n    # if len(set(list1) & set(list2))>0:\n    #     return True\n    # else:\n    #     return False\n",
        "num_ids": 44
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        length = len(list1)\n    else:\n        length = len(list2)\n    for i in range(length):\n        if list1[i] in list2:\n            return True\n    return False\n",
        "num_ids": 67
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # consider first two items in array\n    # and the highest product of two integers\n",
        "num_ids": 21
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max1 = arr[0] \n    max2 = arr[1] \n    min1 = arr[0] \n    min2 = arr[1] \n    for i in range(0,n): \n        if arr[i] > max1: \n            max2 = max1 \n            max1 = arr[i] \n        elif arr[i] > max2: \n            max2 = arr[i] \n        elif arr[i] < min1: \n            min2 = min1 \n            min1 = arr[i] \n        elif arr[i] < min2: \n            min2 = arr[i] \n    print(\"Max1:\",max1)\n    print(\"Min1:\",min1)\n    print(\"Max2:\",max2)\n    print(\"Min2:\",min2)\n    print(\"Product of max1,max2,min1,min2:\",max1*max2*min1*min2)\n",
        "num_ids": 245
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if not arr:\n        return 0\n    min1 = max(arr)\n    max1 = max(arr)\n    for i in arr:\n        if i < min1:\n            min1 = i\n        if i > max1:\n            max1 = i\n    return min1*max1\ndef find_pair(arr, n):\n    '''\n    Write a python function to find a pair with given sum in a given array of integers.\n    '''\n    if not arr:\n        return 0\n    sum = n\n    s = set()\n    for i in arr:\n        if sum - i in s:\n            return (sum - i, i)\n        s.add(i)\n    return (0,0)\n",
        "num_ids": 65
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return False\n",
        "num_ids": 16
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Sort the array \n    arr.sort() \n    # Initialize result \n    result = -1\n",
        "num_ids": 29
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        raise ValueError('Array length must be greater than 1')\n",
        "num_ids": 26
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    print(arr)\n    arr.sort()\n    max_1,max_2 = 0,0\n    for i in range(len(arr)-1):\n        if (arr[i]*arr[i+1]) > (max_1*max_2):\n            max_1,max_2 = arr[i],arr[i+1]\n    print('Max_Pair: {} and {}'.format(max_1,max_2))\n    return\n",
        "num_ids": 111
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    i = 0\n    res = arr[0] * arr[1]\n    for i in range(l):\n        for j in range(i+1, l):\n            if arr[i]*arr[j] > res:\n                res = arr[i]*arr[j]\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    maxP = -sys.maxsize-1\n    max_Pair = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > maxP:\n                maxP = product\n                max_Pair = [arr[i], arr[j]]\n    print('Pair with highest product: {}'.format(max_Pair))\n    return max_Pair\n",
        "num_ids": 119
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product=0\n    max_element1=0\n    max_element2=0\n    \n    for element in arr: \n        for i in range(0,len(arr)): \n            if(element!=arr[i]): \n                prod = arr[i]*element \n                if prod>max_product: \n                    max_product=prod \n                    max_element1=arr[i] \n                    max_element2=element \n    return max_element1,max_element2,max_product \n",
        "num_ids": 132
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for i in range(len(Input)):\n        if Input[0] == Input[i][0]:\n            print(Input[0])\n            break\n",
        "num_ids": 39
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    i=0\n    common=[]\n    for j in Input:\n        for k in Input:\n            if j==k:\n                common.append(j[i])\n        i=i+1\n    return common\n",
        "num_ids": 54
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for a,b in Input:\n        for c,d in Input:\n            if a == c:\n                Output.append((a,b,c,d))\n    return Output\n",
        "num_ids": 50
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    l = []\n    for i in Input:\n        for j in i:\n            if j not in l:\n                l.append(j)\n    return l\n",
        "num_ids": 41
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = []\n    # your code here\n    Result = [item[0] for item in Input]\n    return Result",
        "num_ids": 30
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Uncomment below to take input from the user\n    #Input = int(input(\"Enter the number of tuples you want to enter in the list: \"))\n    #Initialize the list\n    input_list = []\n    #Loop to ask for user inputs and assign each input to the list\n    for x in range(0, Input):\n        data = input(\"Enter data for tuple %d : \" % (x+1))\n        input_list.append(tuple(data.split()))\n    #Sort the list of tuples\n    input_list.sort(key=lambda x: x[0])\n    #print the sorted list\n    print(\"\\nThe sorted list of tuples is:\", input_list)\n    #Print the common element\n    print(\"\\nThe common element is:\", input_list[0])\n",
        "num_ids": 193
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    seen = set()\n    for x in Input:\n        if x[0] not in seen:\n            seen.add(x[0])\n            yield x\n",
        "num_ids": 41
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i][0])\n    return Output\n",
        "num_ids": 35
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = set() \n    for each in Input: \n        result.add(each[0]) \n    return result \n",
        "num_ids": 33
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    length = len(Input)\n    Output = []\n    for i in range(0,length): \n        for j in range(i+1,length): \n            if (Input[i][0] == Input[j][0]) and (Input[i] not in Output): \n                Output.append(Input[i]) \n    print(Output) \n    return Output \nInput = [('Apple','Carrot'),('Apple','Grapes'),('Ball','Glass'),('Ball','Grapes'),('Ball','Water')] \ngroup_tuples(Input) \n",
        "num_ids": 137
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if(len(lst) == 0):\n        return\n    elif(len(lst) == 1):\n        return lst[0]\n    else:\n        lst.sort(reverse=True)\n        return lst[0]\n",
        "num_ids": 61
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n",
        "num_ids": 14
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_item = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_item = i\n    return max_item\n",
        "num_ids": 59
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    print(max(lst, key = len))\n",
        "num_ids": 15
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = [len(i) for i in lst] \n    max_len = max(lst_len)\n    index = lst_len.index(max_len) \n    return lst[index], max_len \n",
        "num_ids": 62
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    return max(lst,key=len)\n",
        "num_ids": 16
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    a = len(lst[0])\n    b = len(lst[1])\n    c = len(lst[2])\n    if(a>b and a>c):\n        return(a,lst[0])\n    elif(b>a and b>c):\n        return(b,lst[1])\n    else:\n        return(c,lst[2])\n    ",
        "num_ids": 98
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst1=lst.split(\" \")\n    lst2=[]\n    for i in range(len(lst1)):\n        if len(lst1[i])>0:\n            lst2.append(len(lst1[i]))\n    return max(lst2)\n    \ndef Find_Min(lst): \n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    lst1=lst.split(\" \")\n    lst2=[]\n    for i in range(len(lst1)):\n        if len(lst1[i])>0:\n            lst2.append(len(lst1[i]))\n    return min(lst2)\n",
        "num_ids": 76
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if max < len(i):\n            max = len(i)\n",
        "num_ids": 32
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst: \n        if len(i)>max:\n            max = len(i)\n    for i in lst:\n        if len(i) == max:\n            return i\n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i])\n        sum += list1[i]\n    print(sum * len(list1))\n",
        "num_ids": 57
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    i=0\n    while i<len(list1):\n        list1[i]=round(list1[i])\n        i=i+1\n    sum=sum(list1)\n    mult=sum*len(list1)\n    return mult\n",
        "num_ids": 62
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s = sum(round(num, 2) for num in list1)\n    print(s * len(list1))\n",
        "num_ids": 31
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(round(elem, 1) for elem in list1) * len(list1)\n",
        "num_ids": 27
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))\n    return total * len(list1)\n",
        "num_ids": 44
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(0, len(list1)):\n        list1[i] = round(list1[i], 2)\n        sum += list1[i]\n    print(sum * len(list1))\n",
        "num_ids": 59
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in list1:\n        i = round(i)\n        total_sum += i\n    print(total_sum*len(list1))\n",
        "num_ids": 45
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    new_list = []\n    sum = 0\n    for i in range(len(list1)):\n        new_list.append(round(list1[i], 2))\n        sum += new_list[i]\n    print(f\"List of numbers rounded: {new_list}\")\n    print(f\"Sum of numbers rounded: {sum}\")\n    print(f\"Multiplied by the length of the list: {sum*len(list1)}\")\n    return sum*len(list1)\n",
        "num_ids": 121
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in list1:\n        i = round(i)\n        sum1 += i\n    print(sum1 * len(list1))\n",
        "num_ids": 42
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_list = 0\n    for i in list1:\n        sum_list = sum_list + round(i)\n    print(f'Sum of list rounded = {sum_list * len(list1)}')\n",
        "num_ids": 53
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(n): \n        s += (i * i * i) \n    return s \n",
        "num_ids": 34
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return int(n*(n+1)*(2*n+1)/6)\n    \n    \ndef cube_Sum_Approx(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx2(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx3(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx4(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx5(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx6(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx7(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx8(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx9(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx10(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx11(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx12(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx13(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx14(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx15(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx16(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2)**2)/2 + (n-2)/6)\n    \n    \ndef cube_Sum_Approx17(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    It should return the cube sum as well as the error between the actual cube sum and the approximate cube sum.\n    '''\n    return int((n**3)/3 + (n**2)/2 + n/6), int(((n-2)**3)/3 + ((n-2",
        "num_ids": 39
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i * i * i)\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i * i * i\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i % 2 == 0):\n            sum += i**3\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(2,n+1,2))\n",
        "num_ids": 23
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])\n",
        "num_ids": 22
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    summ = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            summ+=i**3\n    return summ\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2014
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cub_sum = 0\n    for i in range(1, n+1):\n        if(i%2==0):\n            cub_sum = cub_sum + (i*i*i)\n",
        "num_ids": 51
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(n+1) if i % 2 == 0)\n",
        "num_ids": 26
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \"\".join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '_'\n    str_tup = delimiter.join(test_tup)\n    return str_tup\n",
        "num_ids": 35
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = test_tup[0]\n    for i in test_tup[1:]:\n        new_tup = new_tup + delimiter + i\n    return new_tup\n",
        "num_ids": 52
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + \"_\" + test_tup[1] + \"_\" + test_tup[2]\n",
        "num_ids": 34
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delim.join(test_tup)\n",
        "num_ids": 14
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for tup in test_tup:\n        result += ''.join(tup)\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    print(sum)\n    average=(sum/n)**(1/3)\n    return average\n",
        "num_ids": 51
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n<=0):\n        print(\"Invalid Input\")\n    else:\n        sum = 0\n        for i in range(1,n+1):\n            sum += i**3\n        average = sum/n\n        print(\"The average of cubes of first\",n,\"natural numbers is\",average)\n        \n",
        "num_ids": 75
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes=0\n    for i in range(1,n+1):\n        sum_of_cubes=sum_of_cubes+(i**3)\n    print(\"The sum of cubes of first\", n, \"natural numbers is :\", sum_of_cubes)\n    return sum_of_cubes\n",
        "num_ids": 80
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #return n*n*n\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n\n",
        "num_ids": 42
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    avg = (sum/n)**(1/3)\n    return avg\n",
        "num_ids": 47
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    print(sum)\n    avg = sum/n\n    print(avg)\n    return avg\n",
        "num_ids": 52
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    n=int(input(\"enter the range of natural numbers:\"))\n    num = 0\n    for i in range(1,n+1):\n        num=num+(i**3)\n    num=num/n\n    return num\n",
        "num_ids": 57
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n    \nn = int(input(\"Enter the number of terms: \"))\nprint(\"The average of cube of first\",n,\"natural numbers is\",find_Average_Of_Cube(n))\n",
        "num_ids": 78
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total = total + i*i*i\n",
        "num_ids": 31
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return (n * (n + 1) * (n + 2) * (n + 3)) / 36  #Since there are 36 terms in a cubic series\n",
        "num_ids": 38
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print('\\n'.join(map(lambda x: x[::-1], test_tuple)))\n",
        "num_ids": 27
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "num_ids": 12
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    res = [i[::-1] for i in test_tuple]\n    return(tuple(res))\n",
        "num_ids": 30
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    \n    # variables\n    extracted_strings = ()\n    \n    # user's code\n    extracted_strings = (rear_string for rear_string in test_tuple)\n    \n    return extracted_strings\n",
        "num_ids": 54
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n",
        "num_ids": 13
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = []\n    for t in test_tuple:\n        lst.append(t[-1])\n    return tuple(lst)\n",
        "num_ids": 38
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, list):\n            count += 1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if list1[i] == x:\n            count += 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        sublist = []\n        for j in range(i, len(list1)): \n            sublist.append(list1[j])\n            if x in sublist: \n                count += 1\n    return count\n",
        "num_ids": 73
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n    \n    \ndef count_element_in_list_2(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count+=1\n        else:\n            i.append(x)\n    return count\n",
        "num_ids": 43
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count = count + 1\n    return count\n",
        "num_ids": 41
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count \n",
        "num_ids": 34
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        for j in i:\n            if x == j:\n                count+=1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if type(list1[i]) == list: \n            if x in list1[i]: \n                count += 1\n        else: \n            if x == list1[i]: \n                count += 1\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            yield num\n",
        "num_ids": 25
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n",
        "num_ids": 46
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num%2 == 0:\n            new_nums.append(num)\n    return new_nums\n",
        "num_ids": 45
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n    for num in nums:\n        if num % 2!= 0:\n            odds.append(num)\n    return odds\n",
        "num_ids": 39
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Return list of odd numbers\n    return list(filter(lambda x: x % 2!= 0, nums))\n",
        "num_ids": 30
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2!= 0]\n",
        "num_ids": 20
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #if num % 2!= 0:\n    #    return True\n    #else:\n    #    return False\n    #\n    #return [i for i in nums if i % 2!= 0]\n",
        "num_ids": 52
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    print(list(filter(lambda num : num % 2 == 0, nums)))\n",
        "num_ids": 22
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10] + '-' + dt[5:7] + '-' + dt[:4]\n",
        "num_ids": 33
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    date = list(map(int, date))\n    date.reverse()\n    date = '-'.join(list(map(str, date)))\n    return date\n",
        "num_ids": 52
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split(\"-\")\n    dt[0],dt[1],dt[2] = dt[2],dt[1],dt[0]\n    dt = \"-\".join(dt)\n    return dt\n",
        "num_ids": 56
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt == None:\n        return None\n    dt = dt.split('-')\n    return dt[2]+'-'+dt[1]+'-'+dt[0]\n",
        "num_ids": 47
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match('^(\\d{4})-(\\d{2})-(\\d{2})$',dt)\n    date = m.group(3) + \"-\" + m.group(2) + \"-\" + m.group(1)\n    return date\n",
        "num_ids": 66
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt.strftime('%d-%m-%Y')\n",
        "num_ids": 20
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if type(dt) == str:\n        dt = dt.split('-')\n        dt = [int(x) for x in dt]\n        return '-'.join(map(str,dt[::-1]))\n    return None\n",
        "num_ids": 61
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    x = dt\n    dt = re.sub(r'-', '/', dt)\n    dt = re.sub(r'^\\d{4}-', '', dt)\n    dt = re.sub(r'\\d{2}-\\d{2}-\\d{2}$', '', dt)\n    return dt\n",
        "num_ids": 86
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    date = dt.strip()\n    if date_format.match(date):\n        date = date.replace('-','/')\n        return date\n    else:\n        return date\n",
        "num_ids": 77
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt=dt.split('-')\n    dt.reverse()\n    date_list=[]\n    for date in dt:\n        date_list.append(str(date))\n    date_list.reverse()\n    date_list=['0'+i if len(i)==1 else i for i in date_list]\n    return('-'.join(date_list))\ndef verify_pin(pin):\n    '''\n    Write a function to check if the pin is valid.\n    '''\n    pin=pin.strip()\n    pin=pin[::-1]\n    return(pin.isdigit() and len(pin)==4)\ndef swap_case(s):\n    '''\n    Write a function to swap the cases of all alphabets in a string.\n    '''\n    return(s.swapcase())\ndef multiply_string(s, n):\n    '''\n    Write a function to multiply a string by an integer.\n    '''\n    n=int(n)\n    return(s*n)\ndef text_alignment(s):\n    '''\n    Write a function to align text of various widths.\n    '''\n    s=s.split(' ')\n    lens=[len(i) for i in s]\n    lens.sort()\n    max_len=lens[-1]\n    s=' '.join(s)\n    return(s.ljust(max_len+len(s)+1))\ndef longest_word(s):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    s=s.split(' ')\n    lens=[len(i) for i in s]\n    lens.sort()\n    return(lens[-1])\ndef text_justification(s, max_width):\n    '''\n    Write a function to justify text.\n    '''\n    s=s.split(' ')\n    words=[]\n    s=list(s)\n    i=0\n    while(i<len(s)):\n        words.append(s[i])\n        i+=1\n        if(len(' '.join(words))+1>max_width):\n            words.append(' ')\n            i-=1\n    return((' '.join(words)).ljust(max_width))\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return(s[::-1])\ndef is_leap_year(year):\n    '''\n    Write a function to check if a year is a leap year.\n    '''\n    return(int(year)%4==0)\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return(s.lower()==reverse_string(s.lower()))\ndef reverse_words_order_and_swap_cases(s):\n    '''\n    Write a function to reverse the order of words in a sentence, \n    swap uppercase and lowercase characters, and capitalize the \n    first letter of each word.\n    '''\n    s=s.split(' ')\n    s=[i[::-1].swapcase() for i in s]\n    s=[i.capitalize() for i in s]\n    s=' '.join(s)\n    return(s)\ndef remove_duplicates(lst):\n    '''\n    Write a function to remove all duplicates from a list.\n    '''\n    return([i for n, i in enumerate(lst) if i not in lst[:n]])\ndef palindrome_products(nums):\n    '''\n    Write a function to return the palindrome products in a list of \n    integers.\n    '''\n    products=[]\n    for i in nums:\n        for j in nums:\n            if(i*j) not in products and i*j>999:\n                products.append(i*j)\n    return(products)\ndef odd_count(lst):\n    '''\n    Write a function to return the count of odd numbers in a list.\n    '''\n    return(sum([1 for i in lst if int(i)%2==1]))\ndef multiply_even_numbers(lst):\n    '''\n    Write a function to multiply all the even numbers in a list.\n    '''\n    return(reduce(lambda x,y:x*y, [i for i in lst if int(i)%2==0]))\ndef rotate_list(lst, n):\n    '''\n    Write a function to rotate a list by n.\n    '''\n    return(lst[n:]+lst[:n])\ndef merge_the_tools(string, k):\n    '''\n    Write a function to return the list of merged string.\n    '''\n    s=[]\n    for i in range(0,len(string),k):\n        s.append(string[i:i+k])\n    return(s)\ndef make_readable(s):\n    '''\n    Write a function to convert a given number into a string that is \n    in the readable format (hh:mm:ss).\n    '''\n    hh=s//60**2\n    mm=(s-hh*60**2)//60\n    ss=s-hh*60**2-mm*60\n    if(hh<10):\n        hh='0'+str(hh)\n    if(mm<10):\n        mm='0'+str(mm)\n    if(ss<10):\n        ss='0'+str(ss)\n    return(str(hh)+':'+str(mm)+':'+str(ss))\ndef make_readable_advanced(s):\n    '''\n    Write a function to convert a given number into a string that is \n    in the readable format (hh:mm:ss).\n    '''\n    s=str(s)\n    return(s[:-3]+'hrs '+s[-3:]+'min '+s[-6:-3]+'sec')\ndef find_decimal(s):\n    '''\n    Write a function to return the decimal representation of a given \n    number (Base-2).\n    '''\n    return(int(s,2))\ndef find_decimal_advanced(s):\n    '''\n    Write a function to return the decimal representation of a given \n    number (Base-4).\n    '''\n    return(int(s,4))\ndef counting_valleys(s):\n    '''\n    Write a function to return the number of valleys traversed in a \n    given string.\n    '''\n    valleys=0\n    altitude=0\n    for i in range(len(s)):\n        if(s[i]=='U'):\n            altitude+=1\n        elif(s[i]=='D'):\n            altitude-=1\n        elif(altitude==0 and s[i]=='D'):\n            valleys+=1\n    return(valleys)\ndef add_binary(a,b):\n    '''\n    Write a function to add two binary numbers.\n    '''\n    return(bin(a+b)[2:])\ndef find_missing_number(lst):\n    '''\n    Write a function to return the missing number in a list of \n    integers.\n    '''\n    lst.sort()\n    for i in range(len(lst)):\n        if(lst[i]!=i):\n            return(i)\ndef count_primes(n):\n    '''\n    Write a function to count the number of prime numbers \n    less than a given integer.\n    '''\n    lst=[]\n    for i in range(2,n+1):\n        for j in lst:\n            if(i%j==0):\n                break\n        else:\n            lst.append(i)\n    return(len(lst))\ndef print_big(n):\n    '''\n    Write a function to print the first n lines of the file.\n    '''\n    with open('/etc/passwd') as f:\n        for i in range(n):\n            print(next(f))\ndef rotate(lst,n):\n    '''\n    Write a function to rotate ",
        "num_ids": 9
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert type(my_list) == list\n    assert all(type(i) == int for i in my_list)\n    assert len(my_list)!= 0\n",
        "num_ids": 42
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) == 0:\n        return\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n",
        "num_ids": 130
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n",
        "num_ids": 110
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # start with a big gap, then reduce the gap\n    n = len(my_list)\n    gap = n//2\n",
        "num_ids": 32
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 114
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    my_list_size = len(my_list)\n",
        "num_ids": 16
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j = j - gap\n            my_list[j] = temp\n        gap = gap // 2\n        print(my_list)\n",
        "num_ids": 119
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = int(size / 2)\n",
        "num_ids": 22
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    assert isinstance(my_list, list)\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "num_ids": 126
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(i for i in test_tup1 if i in test_tup2)\n    return result_tup\n",
        "num_ids": 36
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(i & j for i, j in zip(test_tup1, test_tup2))\n",
        "num_ids": 29
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return [x and y for x, y in zip(test_tup1, test_tup2)]\n",
        "num_ids": 28
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(f'The elementwise and of tuples {test_tup1} and {test_tup2} is: {tuple(map(lambda x, y: x and y, test_tup1, test_tup2))}')\n",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            return False\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #return tuple(list(map(lambda x,y: x and y, test_tup1, test_tup2)))\n    return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n",
        "num_ids": 61
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([elm for elm in test_tup1 if elm in test_tup2])\n",
        "num_ids": 28
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # TODO: Write your function here\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if(test_tup1[i]==True and test_tup2[i]==True):\n            result_tup+= (True,)\n        else:\n            result_tup+= (False,)\n    return result_tup\n",
        "num_ids": 93
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n",
        "num_ids": 41
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    def x(n, a, b, c):\n        return n * (a * n + b) + c\n    def y(n, a, b, c):\n        return a * n * n + b * n + c\n    x1 = x(1, a, b, c)\n    x2 = x(2, a, b, c)\n    x3 = x(3, a, b, c)\n    x4 = x(4, a, b, c)\n    y1 = y(1, a, b, c)\n    y2 = y(2, a, b, c)\n    y3 = y(3, a, b, c)\n    y4 = y(4, a, b, c)\n    x1_ = x(1, a, -b, -c)\n    x2_ = x(2, a, -b, -c)\n    x3_ = x(3, a, -b, -c)\n    x4_ = x(4, a, -b, -c)\n    y1_ = y(1, a, -b, -c)\n    y2_ = y(2, a, -b, -c)\n    y3_ = y(3, a, -b, -c)\n    y4_ = y(4, a, -b, -c)\n    return [x1, x2, x3, x4, x1_, x2_, x3_, x4_], [y1, y2, y3, y4, y1_, y2_, y3_, y4_]\n    #return [x1, x2, x3, x4], [y1, y2, y3, y4]\n",
        "num_ids": 415
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return (-b + delta**0.5)/2*a\n    else:\n        x1 = (-b + delta**0.5)/2*a\n        x2 = (-b - delta**0.5)/2*a\n        return (x1, x2)\n",
        "num_ids": 98
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return 2*a*c/(a**2 + b**2)\n",
        "num_ids": 19
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta > 0:\n        x_d = (-b + math.sqrt(delta)) / (2 * a)\n        y_d = a * x_d**2 + b * x_d + c\n        print(f\"The parabola has a directrix at ({x_d}, {y_d})\")\n    elif delta == 0:\n        x_d = -b / (2 * a)\n        y_d = a * x_d**2 + b * x_d + c\n        print(f\"The parabola has a directrix at ({x_d}, {y_d})\")\n    else:\n        print(\"The parabola does not have a directrix\")\n",
        "num_ids": 181
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt, pow\n    \n    def f_check_real(x, y):\n        '''\n        A function to check whether the point (x, y) is real or not.\n        '''\n        if x.imag == 0 and y.imag == 0:\n            return True\n        else:\n            return False\n            \n    def f_check_condition(x, y):\n        '''\n        A function to check whether the point (x, y) satisfies\n        the given conditions or not.\n        '''\n        if x**2 + y**2 == a**2:\n            return True\n        else:\n            return False\n            \n    # Check if the given point is on the parabola\n    if f_check_condition(a, b) and f_check_condition(a, c):\n        # Find the discriminant\n        d = pow(b, 2) - 4*a*c\n        # Find the discriminant\n        d_sqrt = sqrt(d)\n        # Find the two solutions\n        sol1 = (-b + d_sqrt) / (2*a)\n        sol2 = (-b - d_sqrt) / (2*a)\n        if f_check_real(sol1, sol2):\n            return (sol1, sol2)\n        else:\n            return None\n    else:\n        return None\n        \ndef parabola_vertex(a, b):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    from math import sqrt\n    \n    def f_check_real(x):\n        '''\n        A function to check whether the point (x, y) is real or not.\n        '''\n        if x.imag == 0:\n            return True\n        else:\n            return False\n            \n    def f_check_condition(x):\n        '''\n        A function to check whether the point (x, y) satisfies\n        the given conditions or not.\n        '''\n        if x**2 == a:\n            return True\n        else:\n            return False\n        \n    # Check if the given point is on the parabola\n    if f_check_condition(a):\n        # Find the vertex\n        sol1 = (-1*b) / (2*a)\n        if f_check_real(sol1):\n            return sol1\n        else:\n            return None\n    else:\n        return None\n        \ndef parabola_focus(a, b):\n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    from math import sqrt, pow\n    \n    def f_check_real(x, y):\n        '''\n        A function to check whether the point (x, y) is real or not.\n        '''\n        if x.imag == 0 and y.imag == 0:\n            return True\n        else:\n            return False\n            \n    def f_check_condition(x, y):\n        '''\n        A function to check whether the point (x, y) satisfies\n        the given conditions or not.\n        '''\n        if x**2 + y**2 == a**2:\n            return True\n        else:\n            return False\n            \n    # Check if the given point is on the parabola\n    if f_check_condition(a, b):\n        # Find the focus\n        sol1 = (-1*b) / (2*a)\n        sol2 = (sqrt(a) / 2) * (1 - sol1)\n        if f_check_real(sol1, sol2):\n            return (sol1, sol2)\n        else:\n            return None\n    else:\n        return None\n        \ndef parabola_directrix_intersection(a, b, c):\n    '''\n    Write a function to find the intersection of a parabola\n    with the directrix of the parabola.\n    '''\n    from math import sqrt, pow, atan\n    \n    def f_check_real(x, y):\n        '''\n        A function to check whether the point (x, y) is real or not.\n        '''\n        if x.imag == 0 and y.imag == 0:\n            return True\n        else:\n            return False\n            \n    def f_check_condition(x, y):\n        '''\n        A function to check whether the point (x, y) satisfies\n        the given conditions or not.\n        '''\n        if x**2 + y**2 == a**2:\n            return True\n        else:\n            return False\n        \n    # Check if the given point is on the parabola\n    if f_check_condition(a, b):\n        # Find the directrix\n        directrix = parabola_directrix(a, b, c)\n        # Find the intersection of the directrix with the parabola\n        for i in range(len(directrix)):\n            for j in range(len(directrix)):\n                if (directrix[i] - directrix[j]).imag == 0:\n                    sol1 = directrix[i]\n                    sol2 = directrix[j]\n                    # Find the other solution\n                    sol3 = sol1.real + 1j*sol1.imag\n                    sol4 = sol1.real + 1j*sol1.imag\n                    if f_check_real(sol3, sol4):\n                        sol5 = sol3.real + 1j*sol3.imag\n                        sol6 = sol4.real + 1j*sol4.imag\n                        if f_check_real(sol5, sol6):\n                            return (sol5, sol6)\n                        else:\n                            return None\n                    else:\n                        return None\n                else:\n                    continue\n        else:\n            return None\n    else:\n        return None\n        \ndef parabola_vertex_intersection(a, b):\n    '''\n    Write a function to find the intersection of a parabola\n    with the vertex of the parabola.\n    '''\n    from math import sqrt, pow\n    \n    def f_check_real(x):\n        '''\n        A function to check whether the point (x, y) is real or not.\n        '''\n        if x.imag == 0:\n            return True\n        else:\n            return False\n            \n    def f_check_condition(x):\n        '''\n        A function to check whether the point (x, y) satisfies\n        the given conditions or not.\n        '''\n        if x**2 == a:\n            return True\n        else:\n            return False\n        \n    # Check if the given point is on the parabola\n    if f_check_condition(a):\n        # Find the vertex\n        vertex = parabola_vertex(a, b)\n        # Find the intersection of the vertex with the parabola\n        for i in range(len(vertex)):\n            for j in range(len(vertex)):\n                if (vertex[i] - vertex[j]).imag == 0:\n                    sol1 = vertex[i]\n                    sol2 = vertex[j]\n                    # Find the other solution\n                    sol3 = sol1.real + 1j*sol1.imag\n                    sol4 = sol1.real + 1j*sol1.imag\n                    if f_check_real(sol3, sol4):\n                        sol5 = sol3.real + 1j*sol3.imag\n                        sol6 = sol4.real + 1j*sol4.imag\n                        if f_check_real(sol5, sol6):\n                            return (sol5, sol6)\n                        else:\n                            return None\n                    else:\n                        return None\n                else:\n                    continue\n        else:\n            return None\n    else:\n        return None\n        \ndef parabola_focus_intersection(a, b):\n    '''\n    Write a function to find the intersection of a parabola\n    with the focus of the parabola.\n    '''\n    from math import sqrt, pow\n    \n    def f_check_real(x, y):\n        '''\n        A function to check whether the point (x, y) is real or not.\n        '''\n        if x.imag == 0 and y.imag == 0:\n            return True\n        else:\n            return False\n            \n    def f_check_condition(x, y):\n        '''\n        A function to check whether the point (x, y) satisfies\n        the given conditions or not.\n        '''",
        "num_ids": 1
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    print(\"a =\", a, \"b =\", b, \"c =\", c)\n    if a == 0 and b == 0:\n        return \"Error: both values for a and b are 0\"\n    elif b == 0:\n        return \"Error: value for b is 0\"\n    else:\n        if c == 0:\n            return \"Error: value for c is 0\"\n        else:\n            x_directrix = -(b / (2 * a))\n            y_directrix = sqrt(c * c - b * b) / (2 * a)\n            return (x_directrix, y_directrix)\n",
        "num_ids": 157
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    print('Directrix of the parabola:')\n    print(eval(a*(x**2)+b*x+c))\n    \ndef line_intersection(a1, a2, b1, b2):\n    '''\n    Write a function to find the intersection point between two lines.\n    '''\n    x = Symbol('x')\n    y = Symbol('y')\n    print('Intersection between the lines')\n    print(solve([(a1*x+b1)-(a2*y+b2), (x-y)], (x, y)))\n    \ndef intersection_point(a1, a2, b1, b2):\n    '''\n    Write a function to find the intersection point between two lines.\n    '''\n    x = Symbol('x')\n    y = Symbol('y')\n    print('Intersection between the lines')\n    print(solve([(a1*x+b1)-(a2*y+b2), (x-y)], (x, y)))\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c))\n    \ndef parabola_vertex_directrix(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c))\n    \ndef parabola_vertex_focus(a, b):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x))\n    \ndef parabola_vertex_focus_directrix(a, b):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x))\n    \ndef parabola_vertex_focus_diagonal(a):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)))\n    \ndef parabola_vertex_focus_diagonal_directrix(a):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus(a, b):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_directrix(a, b):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_1st_focus(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_1st_focus_directrix(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_1st_focus_2nd_focus(a, b, c, d):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_1st_focus_2nd_focus_directrix(a, b, c, d):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_1st_focus_3rd_focus(a, b, c, d, e):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d*x+e))\n    \ndef parabola_vertex_focus_diagonal_2nd_focus_1st_focus_3rd_focus_directrix(a, b, c, d, e):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d*x+e))\n    \ndef parabola_vertex_focus_diagonal_3rd_focus(a, b, c, d, e):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d*x+e))\n    \ndef parabola_vertex_focus_diagonal_3rd_focus_directrix(a, b, c, d, e):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d*x+e))\n    \ndef parabola_vertex_focus_diagonal_4th_focus(a, b, c, d, e, f):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d*x+e*x+f))\n    \ndef parabola_vertex_focus_diagonal_4th_focus_directrix(a, b, c, d, e, f):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    x = Symbol('x')\n    print('Vertex of the parabola:')\n    print(eval(a*(x**2)+b*x+c*x+d*x+e*x+f))\n    \ndef parabola_vertex_focus_diagonal_5th_focus(a, b, c, d, e, f, g):\n    '''\n    Write a function to find the vertex o",
        "num_ids": 11
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt\n    def discriminant(a, b, c):\n        return (b**2) - (4*a*c)\n",
        "num_ids": 37
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Solve the quadratic equation.\n    x_0 = (-b + math.sqrt(b**2 - 4*a*c)) / (2 * a)\n    x_1 = (-b - math.sqrt(b**2 - 4*a*c)) / (2 * a)\n",
        "num_ids": 73
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    directrix = (-b / (2 * a))\n    return directrix\n",
        "num_ids": 20
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    if len(list1) == 0 or len(list2) == 0:\n        return False\n    else:\n        for i in list1:\n            if i in list2:\n                return True\n        return False\n",
        "num_ids": 55
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        for num in list1:\n            if num in list2:\n                return True\n        return False\n    else:\n        for num in list2:\n            if num in list1:\n                return True\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    if len(list1) == 0 and len(list2)!= 0:\n        return False\n    if len(list1)!= 0 and len(list2) == 0:\n        return False\n    if list1[0] in list2:\n        return True\n    else:\n        return common_element(list1[1:], list2)\n",
        "num_ids": 107
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #list1 = [1,2,3,4]\n    #list2 = [1,2,5,6]\n",
        "num_ids": 32
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "num_ids": 26
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = (base1 + base2)/2\n    print(\"The median length of the trapezium is:\",median_length)\n    return median_length\n",
        "num_ids": 43
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2+height)\n",
        "num_ids": 18
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1+base2/2\n",
        "num_ids": 12
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n",
        "num_ids": 16
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n",
        "num_ids": 17
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return median([base1,base2,height])\n",
        "num_ids": 15
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1+base2)*height/2\n    return area\n",
        "num_ids": 20
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 * height\n",
        "num_ids": 15
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if (len(arr) < 1):\n        return \"Array should not be empty\"\n    elif number > max(arr):\n        return \"Number should not be greater than all array elements\"\n    else:\n        for i in arr:\n            if number < i:\n                return True\n        return False\n    \n",
        "num_ids": 75
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    res = [False if i >= number else True for i in arr]\n    return False not in res\n",
        "num_ids": 26
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    flag = False\n    for i in arr:\n        if number > i:\n            flag = True\n        else:\n            flag = False\n            break\n    return flag\n",
        "num_ids": 42
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr1 = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            arr1.append(arr[i])\n    print(arr1)\n",
        "num_ids": 48
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for ele in arr:\n        if ele < number:\n            return False\n    return True\n",
        "num_ids": 24
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            print(\"{} is greater than {}\".format(number, arr[i]))\n        else:\n            print(\"{} is not greater than {}\".format(number, arr[i]))\n",
        "num_ids": 68
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    \n    # remove pass and write your logic here\n    arr.sort()\n    if arr[0] < number:\n        return False\n    else:\n        return True\n        \ndef check_range(number):\n    '''\n    Write a function to check whether the given number lies in range between 1 and 100 (both inclusive)\n    '''\n    if number in range(1,101):\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return \"Yes\"\n    elif number > arr[1]:\n        return \"Yes\"\n    elif number > arr[2]:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 59
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > max(arr):\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return len([i for i in arr if i < number]) == 0\n",
        "num_ids": 19
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text\n    pattern = re.compile(r'(ab)+\\s')\n    match = pattern.findall(text)\n    if match:\n        for m in match:\n            print(m)\n    else:\n        print('No match!')\n",
        "num_ids": 65
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    string = text\n    p = re.compile(r'(ab)+')\n    if p.search(string):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\nprint(text_match_one('abbbbbbbbbabbbbbbbbbbbbbbbbbbbbbbbabbbbbbbbbab'))\nprint(text_match_one('abababaababababababababababababababababababababab'))\nprint(text_match_one('abbbbbbbbbabbbbbbbbbbbbbbbbbbbbbbbabbbbbbbbab'))\nprint(text_match_one('abababaabababababababababababababababababababab'))\n",
        "num_ids": 186
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r\"a.*b+$\", text):\n        print(\"Matching text:\", text)\n    else:\n        print(\"No Match\")\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def matcher(text):\n        match = re.search(r'ab+$', text)\n        return match\n    return matcher(text)\n",
        "num_ids": 38
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '[ab]+'\n    result = re.findall(pattern, text)\n    print(result)\n",
        "num_ids": 29
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '[ab]+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n",
        "num_ids": 41
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab+',text)\n",
        "num_ids": 16
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # if re.search(\"ab*?$\", text):\n    #     return True\n    # return False\n    result = re.search(\"ab*?\", text)\n    if result:\n        return True\n    return False\n",
        "num_ids": 54
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.search('ab*',text)\n    if result!= None:\n        return result.group()\n    else:\n        return None\n",
        "num_ids": 38
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+', re.IGNORECASE)\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 40
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n    \ndef first_Even_Last_Odd(n) :\n    '''\n    Write a python function to print out the first even and last odd digits of a number.\n    '''\n    return first_Digit(n), last_Digit(n)\n",
        "num_ids": 19
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit\n",
        "num_ids": 17
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    for i in str(n)[::-1] :\n        return int(i)\n        \ndef PatternCount(Text, Pattern) :\n    '''\n    Write a Python function to count the number of occurrences of a substring in a string.\n    '''\n    import re\n    return len(re.findall(Pattern, Text))\n    \ndef InString(Text, Pattern) :\n    '''\n    Write a Python function to find if a given string contains a given substring.\n    '''\n    import re\n    if re.search(Pattern, Text) :\n        return True\n    return False\n    \ndef InString_Advanced(Text, Pattern) :\n    '''\n    Write a Python function to find if a given string contains a given substring.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    import re\n    if re.search(Pattern, Text[Position:]) :\n        return True\n    return False\n    \ndef PatternCount_Advanced(Text, Pattern) :\n    '''\n    Write a Python function to count the number of occurrences of a substring in a string.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    import re\n    return len(re.findall(Pattern, Text[Position:]))\n    \ndef LongestPalindrome(Text) :\n    '''\n    Write a Python function to find the longest palindromic substring in a given string of\n    characters.\n    '''\n    def isPalindrome(s):\n        return s == s[::-1]\n    \n    if isPalindrome(Text):\n        return Text\n    \n    maxLength = 1\n    start = 0\n    \n    for i in range(len(Text)):\n        odd = Text[i-maxLength-1:i+1]\n        even = Text[i-maxLength:i+1]\n        if isPalindrome(odd) or isPalindrome(even):\n            maxLength+=1\n            start = i-maxLength+1\n    \n    return Text[start:start+maxLength]\n    \ndef LongestPalindrome_Advanced(Text) :\n    '''\n    Write a Python function to find the longest palindromic substring in a given string of\n    characters.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    def isPalindrome(s):\n        return s == s[::-1]\n    \n    if isPalindrome(Text) :\n        return Text\n    \n    maxLength = 1\n    start = 0\n    \n    for i in range(len(Text)):\n        odd = Text[i-maxLength-1:i+1]\n        even = Text[i-maxLength:i+1]\n        if isPalindrome(odd) or isPalindrome(even):\n            maxLength+=1\n            start = i-maxLength+1\n    \n    return Text[start:start+maxLength]\n    \ndef Rotation(Text, Pattern) :\n    '''\n    Write a Python function to check if a given string is a rotation of another given string.\n    '''\n    return len(Pattern) == len(Text) and Text in (Text + Text[1:])\n    \ndef StringRotation(Text, Pattern) :\n    '''\n    Write a Python function to check if a given string is a rotation of another given string.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    import re\n    \n    def string_rotation(s1, s2) :\n        if len(s1)!= len(s2) :\n            return False\n        \n        s1 += s1\n        return s2 in s1\n    \n    if string_rotation(Text, Pattern) :\n        return True\n    return False\n    \ndef StringRotation_Advanced(Text, Pattern) :\n    '''\n    Write a Python function to check if a given string is a rotation of another given string.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    import re\n    \n    def string_rotation(s1, s2) :\n        if len(s1)!= len(s2) :\n            return False\n        \n        s1 += s1\n        return re.search(s2, s1)\n    \n    if string_rotation(Text, Pattern) :\n        return True\n    return False\n    \ndef AllSubstrings(Text) :\n    '''\n    Write a Python function to find all substrings of a given string.\n    '''\n    def generateSubstrings(Text):\n        for i in range(len(Text)):\n            yield Text[i:]\n    \n    return list(generateSubstrings(Text))\n    \ndef AllSubstrings_Advanced(Text) :\n    '''\n    Write a Python function to find all substrings of a given string.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    def generateSubstrings(Text):\n        for i in range(len(Text)+1):\n            yield Text[i:]\n    \n    return list(generateSubstrings(Text))\n    \ndef StringCompression(Text) :\n    '''\n    Write a Python function to compress a string.\n    For example, if the input string is 'aabcccccaaa' then the output string should be 'a2b1c5a3'.\n    If the given string is already in their compressed format, return the same.\n    '''\n    compressed = []\n    count = 1\n    \n    for i in range(1, len(Text)) :\n        if Text[i] == Text[i-1] :\n            count+=1\n        else :\n            compressed.append(Text[i-1])\n            compressed.append(str(count))\n            count = 1\n    \n    compressed.append(Text[i])\n    compressed.append(str(count))\n    \n    return \"\".join(compressed)\n    \ndef StringCompression_Advanced(Text) :\n    '''\n    Write a Python function to compress a string.\n    For example, if the input string is 'aabcccccaaa' then the output string should be 'a2b1c5a3'.\n    If the given string is already in their compressed format, return the same.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    compressed = []\n    count = 1\n    \n    for i in range(1, len(Text)) :\n        if Text[i] == Text[i-1] :\n            count+=1\n        else :\n            compressed.append(Text[i-1])\n            compressed.append(str(count))\n            count = 1\n    \n    compressed.append(Text[i])\n    compressed.append(str(count))\n    \n    return \"\".join(compressed)\n    \ndef RemoveString(Text, Pattern) :\n    '''\n    Write a Python function to remove a substring from a string.\n    '''\n    return Text.replace(Pattern, \"\")\n    \ndef RemoveString_Advanced(Text, Pattern) :\n    '''\n    Write a Python function to remove a substring from a string.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    return Text[:Position]+Text[Position+len(Pattern):]\n    \ndef StringReversal(Text) :\n    '''\n    Write a Python function to reverse a string.\n    '''\n    return Text[::-1]\n    \ndef StringReversal_Advanced(Text) :\n    '''\n    Write a Python function to reverse a string.\n    This function takes an extra input - 'Position' which acts as a starting position\n    to check for substring in the text.\n    '''\n    return Text[:Position][::-1]+Text[Position:]\n    \ndef ImplementStringManipulation(Text, Pattern, StringOperation) :\n    '''\n    Write a Python function to perform String Manipulation on a string.\n    String Operation option",
        "num_ids": 21
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n==0:\n        return 0\n    else:\n        return n%10\n",
        "num_ids": 23
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(n == 0) :\n        return 0\n    return n % 10\n",
        "num_ids": 21
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(str(n)[-1])\n",
        "num_ids": 14
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n >= 10 :\n        n = n / 10\n    return n\n",
        "num_ids": 20
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n",
        "num_ids": 8
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for x in list1:\n        if x < 0:\n            list2.append(x)\n    return list2\n",
        "num_ids": 37
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [20, 5, -1, -7, 3]\n    negative_numbers = []\n    for i in list1:\n        if i < 0:\n            negative_numbers.append(i)\n    print(negative_numbers)\n",
        "num_ids": 63
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = list()\n    for i in list1:\n        if i < 0:\n            neg_nos.append(i)\n    print(neg_nos)\n    \n",
        "num_ids": 45
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg_nos = []\n    for i in list1:\n        if i < 0:\n            list_neg_nos.append(i)\n    return list_neg_nos\n",
        "num_ids": 46
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [-5,-6,-1,0,1,2,3]\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    print(list2)\n    print(list1)\n    return list1\n",
        "num_ids": 71
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list=[]\n    for num in list1:\n        if num<0:\n            new_list.append(num)\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            list2.append(list1[i])\n    return list2\n",
        "num_ids": 49
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list=[]\n    for i in list1:\n        if i<0:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 40
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x: (x < 0), list1))\n",
        "num_ids": 20
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = list(filter(lambda x: x<0,list1))\n    return list2\n",
        "num_ids": 26
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    print(str1.replace('o', ''))\n",
        "num_ids": 15
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1[::2]\n",
        "num_ids": 11
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    res = \"\"\n    for ch in str1:\n        if ch not in odd_chars:\n            res += ch\n    return res\n",
        "num_ids": 35
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([i for i in str1 if i%2==0])\n",
        "num_ids": 22
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i+1:]:\n            return remove_odd(str1[:i] + str1[i+1:])\n    return str1\n",
        "num_ids": 59
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([str for str in str1 if str not in string.punctuation])\n    # return \"\".join(filter(lambda x: x not in string.punctuation, str1))\n    # return ''.join(filter(lambda x: x not in string.punctuation, str1))\n",
        "num_ids": 75
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(c for c in str1 if c.isdigit() == True)\n",
        "num_ids": 25
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    string = ''\n    for character in str1:\n        if not character.isdigit():\n            string += character\n    return string\n",
        "num_ids": 34
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in str2:\n            str2 += i\n    return str2\n    \ndef remove_even(str1):\n    '''\n    Write a function to remove even characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in str2:\n            str2 += i\n    return str2\n    \ndef remove_specific_char(str1,ch):\n    '''\n    Write a function to remove all occurrences of a character from a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i not in str2:\n            str2 += i\n    return str2\n    \ndef replace_with_char(str1,ch1,ch2):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(ch1,ch2)\n    \ndef replace_with_index(str1,ch1,idx1,ch2,idx2):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character at specified index.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i == idx1:\n            str2 += ch2\n        else:\n            str2 += str1[i]\n    return str2\n    \ndef generate_list_of_n_chars(str1,ch1,n):\n    '''\n    Write a function to generate a list of n consecutive characters from a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i % n == 0:\n            str2 += ch1\n        else:\n            str2 += str1[i]\n    return str2\n    \ndef replace_with_index_and_char(str1,ch1,idx1,ch2,idx2):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character at specified indices.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if i == idx1:\n            str2 += ch2\n        elif i == idx2:\n            str2 += ch1\n        else:\n            str2 += str1[i]\n    return str2\n    \ndef str_to_list(str1):\n    '''\n    Write a function to convert a string to a list.\n    '''\n    return list(str1)\n    \ndef list_to_str(list1):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    str1 = ''\n    for i in list1:\n        str1 += i\n    return str1\n    \ndef last_occurrence(str1,ch):\n    '''\n    Write a function to find the last occurrence of a character in a string.\n    '''\n    return str1.rfind(ch)\n    \ndef find_first_occurrence(str1,ch):\n    '''\n    Write a function to find the first occurrence of a character in a string.\n    '''\n    return str1.find(ch)\n    \ndef find_nth_occurrence(str1,ch,n):\n    '''\n    Write a function to find the nth occurrence of a character in a string.\n    '''\n    return str1.find(ch,n)\n    \ndef list_to_str_split(list1):\n    '''\n    Write a function to convert a list of strings to a single string using the \"+\" operator.\n    '''\n    return '+'.join(list1)\n    \ndef str_to_list_split(str1):\n    '''\n    Write a function to convert a single string to a list of strings using the \"+\" operator.\n    '''\n    return str1.split('+')\n    \ndef list_to_str_join(list1):\n    '''\n    Write a function to convert a list of strings to a single string using the join method.\n    '''\n    return '+'.join(list1)\n    \ndef str_to_list_join(str1):\n    '''\n    Write a function to convert a single string to a list of strings using the join method.\n    '''\n    return str1.split('+')\n    \ndef array_to_list(array1):\n    '''\n    Write a function to convert an array to a list.\n    '''\n    return list(array1)\n    \ndef list_to_array(list1):\n    '''\n    Write a function to convert a list to an array.\n    '''\n    return array.array('i',list1)\n    \ndef array_to_str(array1):\n    '''\n    Write a function to convert an array to a string.\n    '''\n    str1 = ''\n    for i in array1:\n        str1 += str(i)\n    return str1\n    \ndef str_to_array(str1):\n    '''\n    Write a function to convert a string to an array.\n    '''\n    return array.array('i',str1)\n    \ndef find_nth_occurrence(str1,ch,n):\n    '''\n    Write a function to find the nth occurrence of a character in a string.\n    '''\n    return str1.find(ch,n)\n    \ndef palindrome(str1):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    return str1 == str1[::-1]\n    \ndef palindrome_arr(arr1):\n    '''\n    Write a function to check whether a list is palindrome or not.\n    '''\n    return arr1 == arr1[::-1]\n    \ndef palindrome_array(array1):\n    '''\n    Write a function to check whether an array is palindrome or not.\n    '''\n    return array1 == array1[::-1]\n    \ndef remove_nth_occurrence(str1,ch,n):\n    '''\n    Write a function to remove the nth occurrence of a character from a string.\n    '''\n    return str1.replace(ch,ch,n)\n    \ndef remove_nth_occurrence_arr(arr1,ch,n):\n    '''\n    Write a function to remove the nth occurrence of a character from an array.\n    '''\n    return arr1.replace(ch,ch,n)\n    \ndef remove_nth_occurrence_array(array1,ch,n):\n    '''\n    Write a function to remove the nth occurrence of a character from an array.\n    '''\n    for i in range(len(array1)):\n        if array1[i] == ch:\n            array1.pop(i)\n            break\n    return array1\n    \ndef convert_array_to_string(array1):\n    '''\n    Write a function to convert an array to a string.\n    '''\n    return ''.join(array1)\n    \ndef convert_string_to_array(str1):\n    '''\n    Write a function to convert a string to an array.\n    '''\n    return list(str1)\n    \ndef reverse_str(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef reverse_list(list1):\n    '''\n    Write a function to reverse a list.\n    '''\n    return list1[::-1]\n    \ndef reverse_arr(arr1):\n    '''\n    Write a function to reverse an array.\n    '''\n    return arr1[::-1]\n    \ndef reverse_array(array1):\n    '''\n    Write a function to reverse an array.\n    '''\n    array2 = array.array('i',[])\n    for i in reversed(array1):\n        array2.append(i)\n    return array2\n    \ndef reverse_array_while(array1):\n    '''\n    Write a function to reverse an array using while loop.\n    '''\n    array2 = array.array('i',[])\n    i = 0\n    while i < len(array1):\n        array2.append(array1[i])\n        i += 1\n",
        "num_ids": 47
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([str(elem) for elem in str1 if elem%2 == 0])\n",
        "num_ids": 28
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # to start we need to check if the list has pairs\n    if len(test_list) % 2!= 0:\n        # if not we'll return 0\n        return 0\n    # if it does, we'll need to set up the return value\n    else:\n        return_list = []\n        # we'll need to loop through the list\n        for index in range(len(test_list)):\n            # now, for every index we'll want to check to see if it is a forward and backward index\n            # so first we'll need to set up the variables\n            current_index = index\n            current_item = test_list[index]\n            forward_index = index + 1\n            forward_item = test_list[forward_index]\n            # then we'll check the forward index\n            while current_index >= 0 and current_item == forward_item:\n                # if it's true, we'll append our tuple\n                return_list.append((current_item, forward_item))\n                # and then we'll decrement our index to the next one\n                current_index -= 1\n                # and then we'll check the next forward index\n                forward_index += 1\n                forward_item = test_list[forward_index]\n            # then we'll check the backward index\n            current_index = index - 1\n            current_item = test_list[current_index]\n            backward_index = index - 1\n            backward_item = test_list[backward_index]\n            while backward_index >= 0 and current_item == backward_item:\n                return_list.append((current_item, backward_item))\n                current_index -= 1\n                backward_index -= 1\n                backward_item = test_list[backward_index]\n        # if we get here then we should have all the pairs\n        return return_list\n",
        "num_ids": 428
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] == test_list[i + 1][1] and test_list[i][1] == test_list[i + 1][0]:\n            count += 1\n    return count\n",
        "num_ids": 74
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    print(test_list)\n",
        "num_ids": 10
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i][0], test_list[j][1]) == (test_list[j][0], test_list[i][1]):\n                count += 1\n    return count\n",
        "num_ids": 83
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    length = len(test_list)\n    counter = 0\n",
        "num_ids": 17
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = sorted(test_list)\n    start_list, end_list = [], []\n    for i in range(len(test_list)):\n        if test_list[i][0] in start_list and test_list[i][1] in end_list:\n            return (start_list.count(test_list[i][0]), end_list.count(test_list[i][1]))\n        else:\n            if test_list[i][0] not in start_list:\n                start_list.append(test_list[i][0])\n            if test_list[i][1] not in end_list:\n                end_list.append(test_list[i][1])\n    return (0, 0)\n    \ndef count_bidirectional_2(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = sorted(test_list)\n    start_list, end_list = set(), set()\n    for i in range(len(test_list)):\n        if test_list[i][0] in start_list and test_list[i][1] in end_list:\n            return (start_list.count(test_list[i][0]), end_list.count(test_list[i][1]))\n        else:\n            if test_list[i][0] not in start_list:\n                start_list.add(test_list[i][0])\n            if test_list[i][1] not in end_list:\n                end_list.add(test_list[i][1])\n    return (0, 0)\n",
        "num_ids": 182
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for x in range(len(test_list) - 1):\n        if test_list[x][0] == test_list[x + 1][0]:\n            count += 1\n        elif test_list[x][1] == test_list[x + 1][1]:\n            count += 1\n        else:\n            pass\n    return count\n",
        "num_ids": 89
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    test_list = [ (1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (1,13), (14,15) ]\n    test_list.sort()\n    print('test_list:', test_list)\n    print('Number of bidirectional tuple pairs:', len(test_list))\n",
        "num_ids": 90
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n",
        "num_ids": 82
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] == test_list[i-1]:\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # for i in L:\n    #     if i > 9:\n    #         L.append(str(i))\n    #     else:\n    #         pass\n    # return ''.join(L)\n    return int(\"\".join([str(i) for i in L]))\n",
        "num_ids": 70
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 0:\n        return 0\n    else:\n        return (L[0] << len(L)) + multiple_to_single(L[1:])\n",
        "num_ids": 45
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    n = 0\n    for i in L:\n        n = n*10 + i\n    return n\n",
        "num_ids": 27
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(map(str,L)))\n    ",
        "num_ids": 17
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    a = 0\n    for i in L:\n        a = a * 10 + i\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    return int(''.join([str(i) for i in L]))\n",
        "num_ids": 31
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #if it's empty, return 0\n    if len(L) == 0:\n        return 0\n",
        "num_ids": 26
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    if len(L) == 1:\n        return L[0]\n    else:\n        return (10 * L[0]) + multiple_to_single(L[1:])\n",
        "num_ids": 56
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    return int(\"\".join([str(x) for x in L]))\n",
        "num_ids": 22
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(x) for x in L))\n",
        "num_ids": 19
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regex Pattern to check for adverb\n    pattern = r'[A-Z]{2,}(ing)'\n    if re.search(pattern, text):\n        print('\\n' + text + '\\n')\n        print('POSITION:'+ str(re.search(pattern, text).start()))\n        print('NUMBER OF POSITION:'+ str(len(re.findall(pattern, text))))\n",
        "num_ids": 101
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #text = 'The flight from JFK to LAX was delayed by weather'\n    #print(text)\n    adverb_position = []\n    for i in text.split():\n        if re.search('\\Wadverbs\\W', i):\n            adverb_position.append(text.index(i))\n    return adverb_position\n",
        "num_ids": 82
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # text = input(\"Enter your text here: \")\n    # find adverb in the text\n    # r'(?<![A-Z])(?=[A-Z])'\n    # r'[A-Z]+(?=[A-Z])'\n    # r'[A-Z]{2,}'\n    # r'[A-Z]+[a-z]+[A-Z]+(?=[A-Z])'\n    # r'(?<![A-Z])[A-Z]+(?=[A-Z])'\n    # r'[A-Z]+[A-Z]+(?=[A-Z])'\n    # r'[A-Z]{2,}(?=[A-Z])'\n    # r'(?<=\\s)a(?=\\s)'\n    # r'(?<=\\s)the(?=\\s)'\n    # r'(?<=\\s)an(?=\\s)'\n    # r'(?<=\\s)[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)the[A-Z]+(?=\\s)'\n    # r'(?<=\\s)the[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)the[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[A-Z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]+(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]+[a-z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A-Z]{2,}(?=\\s)'\n    # r'(?<=\\s)[a-z]{2,}[A",
        "num_ids": 2008
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    \n    # ####\n    # YOUR CODE HERE\n    # ####\n",
        "num_ids": 25
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = re.compile('[-]{2}[0-9]+(\\s{1})')\n    result = re.findall(pattern, text)\n    #print(result)\n    return result\n",
        "num_ids": 53
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # We can use the re module to match substrings using the \"in\" keyword,\n    # but it's often easier to define a function that does the job for us.\n    # We use the findall function to get all the adverb matches.\n    matches = re.findall(r'\\b[a-zA-Z]+ly', text)\n    #matches = re.findall(r'[a-zA-Z]+ly', text)\n    #print(matches)\n    # Now we loop through the matches, and print the first instance of each.\n    # We'll need to keep track of the index we're at, so we can retrieve the\n    # position later.\n    index = 0\n    for match in matches:\n        print(\"The adverb '{}' appears at position {}\".format(match, index))\n        index += match.__len__()\n    # Or:\n    # for i in range(0, len(matches)):\n    #     print(\"The adverb '{}' appears at position {}\".format(matches[i], i))\n    # Matches must be a list!\n",
        "num_ids": 264
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # regex_str = \"((by|with|and|between|of|from|into|as|for|to|up|down|in|out|on|under|above|over|behind|forward|until|against|over|prior|without|by|inside|at|from|near|on|with|off|underneath|on|infront|behind|downstream|down|across|within|into|apart|along|downstream|across|towards|alongside|throughout|across|within|along|down|downstream|outside|upstream|onto|opposite|opposite|along|across|over|alongside|through|on|up|in|towards|along|at|from|opposite|between|against|over|alongside|to|against|upstream|out|towards|alongside|at|over|opposite|out of|with) (\\w*?\\s?\\w+?\\s?)\"\n    # regex_str = \"((by|with|and|between|of|from|into|as|for|to|up|down|in|out|on|under|above|over|behind|forward|until|against|over|prior|without|by|inside|at|from|near|on|with|off|underneath|on|infront|behind|downstream|down|across|within|into|apart|along|downstream|across|towards|alongside|throughout|across|within|along|down|downstream|outside|upstream|onto|opposite|opposite|along|across|over|alongside|through|on|up|in|towards|along|at|from|opposite|between|against|over|alongside|to|against|upstream|out|towards|alongside|at|over|opposite|out of|with) (\\w+?\\s?\\w+)+\"\n    regex_str = \"((by|with|and|between|of|from|into|as|for|to|up|down|in|out|on|under|above|over|behind|forward|until|against|over|prior|without|by|inside|at|from|near|on|with|off|underneath|on|infront|behind|downstream|down|across|within|into|apart|along|downstream|across|towards|alongside|throughout|across|within|along|down|downstream|outside|upstream|onto|opposite|opposite|along|across|over|alongside|to|against|upstream|out|towards|alongside|at|over|opposite|out of|with) (\\w+\\s\\w+)\"\n    regex_ = re.compile(regex_str)\n    # print(regex_)\n    match = regex_.findall(text)\n    print(match)\n    if match:\n        for m in match:\n            # print(m[1])\n            return m\n    else:\n        print('No match')\n",
        "num_ids": 725
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # print(text)\n    adverb_pattern = r\"\\s(?P<adverb>\\b[A-Z]+\\b)\\s\"\n    text_after_regex = re.search(adverb_pattern, text, flags = re.IGNORECASE)\n    if text_after_regex:\n        print(text_after_regex)\n        print(text_after_regex.group(\"adverb\"))\n        return text_after_regex.group(\"adverb\")\n    else:\n        return None\n",
        "num_ids": 128
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Adverb = \"AM\"\n    # Check if the text have the adverb\n    result = re.search(r\"\\bAM\\b\", text)\n    print(result)\n    if result:\n        return \"Adverb is found at index: \" + str(result.start())\n",
        "num_ids": 70
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # search for adverb from text\n",
        "num_ids": 11
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l*l)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # import math\n    #\n    # def area(x):\n    #     a = (x*x*x)\n    #     return a\n    #\n    # print(area(l))\n",
        "num_ids": 49
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l\n    return 6 * a\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    sa = 6 * l ** 2\n    return sa\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n",
        "num_ids": 12
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = l * l * l\n    return a\n",
        "num_ids": 15
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n",
        "num_ids": 10
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n",
        "num_ids": 10
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length = len(nums)\n    pos_count = 0\n    for i in range(length):\n        if nums[i] > 0:\n            pos_count += 1\n    return pos_count / length\n",
        "num_ids": 53
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in range(n):\n        if nums[i] > 0:\n            count += 1\n    return count/n\n",
        "num_ids": 47
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x >= 0:\n            count += 1\n    return count/len(nums)\n    \ndef odd_even(nums):\n    '''\n    Write a function to determine if the sum of the digits of a number is even or odd.\n    '''\n    sum_ = 0\n    for x in str(nums):\n        sum_ += int(x)\n    return sum_ % 2 == 0\n    \ndef odd_even_dict(nums):\n    '''\n    Write a function to determine if the sum of the digits of a number is even or odd.\n    '''\n    dic = {'even':0,'odd':0}\n    for x in str(nums):\n        if int(x) % 2 == 0:\n            dic['even'] += int(x)\n        else:\n            dic['odd'] += int(x)\n    return dic\n    \ndef max_min_sum(nums):\n    '''\n    Write a function to find the maximum and minimum of an array of integers.\n    '''\n    return {'max':max(nums),'min':min(nums)}\n    \ndef count_even_odd(nums):\n    '''\n    Write a function to count the number of even and odd numbers in an array of integers.\n    '''\n    dic = {'even':0,'odd':0}\n    for x in nums:\n        if x % 2 == 0:\n            dic['even'] += 1\n        else:\n            dic['odd'] += 1\n    return dic\n    \ndef unique_list(nums):\n    '''\n    Write a function to return the unique numbers in an array of integers.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count+=1\n    return count/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positives = 0\n    for i in nums:\n        if i > 0:\n            num_positives += 1\n    return num_positives / len(nums)\n",
        "num_ids": 46
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/n\n",
        "num_ids": 42
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    neg_count = 0\n    pos_count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n",
        "num_ids": 58
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for i in nums:\n        if i > 0:\n            positive += 1\n    return positive/len(nums)\n",
        "num_ids": 37
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    for i in nums:\n        if i>0:\n            positive_count += 1\n        else:\n            negative_count +=1\n    ratio = positive_count/negative_count\n    return ratio\n",
        "num_ids": 65
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    length=len(nums)\n    count=0\n    for x in nums:\n        if x>0:\n            count+=1\n    return count/length\ndef first_last_positive_count(nums):\n    '''\n    Write a function that returns the number of positive and negative values in a list\n    '''\n    positive_count=0\n    negative_count=0\n    for x in nums:\n        if x>0:\n            positive_count+=1\n        else:\n            negative_count+=1\n    return positive_count,negative_count\ndef make_centered_array(nums):\n    '''\n    Write a function that will take an array of integers and shift all of the values\n    of the array to the right 1 spot and fill the first value with 0. Return the new\n    array\n    '''\n    length=len(nums)\n    for i in range(length-1):\n        nums[i]=nums[i+1]\n    nums[length-1]=0\n    return nums\ndef has_duplicates(nums):\n    '''\n    Write a function that returns True if a list contains duplicates and False if it\n    does not.\n    '''\n    for i in range(len(nums)):\n        for x in range(i+1,len(nums)):\n            if nums[i]==nums[x]:\n                return True\n    return False\ndef has_duplicates2(nums):\n    '''\n    Write a function that returns True if a list contains duplicates and False if it\n    does not.\n    '''\n    nums=sorted(nums)\n    for i in range(1,len(nums)):\n        if nums[i]==nums[i-1]:\n            return True\n    return False\ndef is_unique(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if there is not\n    any duplicates.\n    '''\n    for i in range(len(nums)):\n        for x in range(i+1,len(nums)):\n            if nums[i]==nums[x]:\n                return False\n    return True\ndef get_unique(nums):\n    '''\n    Write a function that takes a list of numbers and returns a new list of the unique\n    numbers in the list\n    '''\n    unique=[]\n    for x in nums:\n        if x not in unique:\n            unique.append(x)\n    return unique\ndef sort_array(nums):\n    '''\n    Write a function that will return a sorted array. You can choose to use the built in\n    sort function or bubble sort\n    '''\n    for x in range(len(nums)-1):\n        for i in range(len(nums)-1):\n            if nums[i]>nums[i+1]:\n                temp=nums[i+1]\n                nums[i+1]=nums[i]\n                nums[i]=temp\n    return nums\ndef count_evens(nums):\n    '''\n    Write a function that will return the number of even integers in a list\n    '''\n    count=0\n    for x in nums:\n        if x%2==0:\n            count+=1\n    return count\ndef max_num(nums):\n    '''\n    Write a function that will return the maximum number in a list\n    '''\n    return max(nums)\ndef sum_even_numbers(nums):\n    '''\n    Write a function that will return the sum of the even numbers in a list\n    '''\n    sum=0\n    for x in nums:\n        if x%2==0:\n            sum+=x\n    return sum\ndef sum_odd_numbers(nums):\n    '''\n    Write a function that will return the sum of the odd numbers in a list\n    '''\n    sum=0\n    for x in nums:\n        if x%2!=0:\n            sum+=x\n    return sum\ndef sum_all_numbers(nums):\n    '''\n    Write a function that will return the sum of all numbers in a list\n    '''\n    sum=0\n    for x in nums:\n        sum+=x\n    return sum\ndef sum_all_but_first(nums):\n    '''\n    Write a function that will return the sum of the numbers in a list except the\n    first one\n    '''\n    sum=0\n    for i in range(1,len(nums)):\n        sum+=nums[i]\n    return sum\ndef reverse_list(nums):\n    '''\n    Write a function that will return a list in reverse order\n    '''\n    length=len(nums)\n    for x in range(int(length/2)):\n        temp=nums[x]\n        nums[x]=nums[length-x-1]\n        nums[length-x-1]=temp\n    return nums\ndef sum_all_but_last(nums):\n    '''\n    Write a function that will return the sum of all the numbers in the list except\n    the last one\n    '''\n    sum=0\n    for i in range(len(nums)-1):\n        sum+=nums[i]\n    return sum\ndef rotate_array(nums):\n    '''\n    Write a function that will take a list of numbers and rotate them to the left\n    by one position\n    '''\n    length=len(nums)\n    temp=nums[0]\n    for i in range(length-1):\n        nums[i]=nums[i+1]\n    nums[length-1]=temp\n    return nums\ndef min_num(nums):\n    '''\n    Write a function that will return the minimum number in a list\n    '''\n    min=nums[0]\n    for x in nums:\n        if x<min:\n            min=x\n    return min\ndef count_first_duplicate(nums):\n    '''\n    Write a function that will return the number of the first duplicate in a list\n    '''\n    for i in range(len(nums)):\n        for x in range(i+1,len(nums)):\n            if nums[i]==nums[x]:\n                return nums[i]\n    return None\ndef has_odds(nums):\n    '''\n    Write a function that will return True if the list contains any odd numbers and\n    False if it does not\n    '''\n    for x in nums:\n        if x%2!=0:\n            return True\n    return False\ndef max_duplicate(nums):\n    '''\n    Write a function that will return the maximum number of duplicates in a list\n    '''\n    max=0\n    count=0\n    for x in nums:\n        if nums.count(x)>max:\n            max=nums.count(x)\n    return max\ndef sum_duplicates(nums):\n    '''\n    Write a function that will return the sum of all duplicate numbers in a list\n    '''\n    sum=0\n    for x in nums:\n        if nums.count(x)>1:\n            sum+=x\n    return sum\ndef rotate_matrix(matrix):\n    '''\n    Write a function that will rotate a matrix 90 degrees\n    '''\n    n=len(matrix)\n    for x in range(int(n/2)):\n        first=matrix[x][n-x-1]\n        matrix[x][n-x-1]=matrix[n-x-1][x]\n        matrix[n-x-1][x]=matrix[n-x-1-1][x]\n        matrix[n-x-1-1][x]=matrix[x][n-x-1-1]\n        matrix[x][n-x-1-1]=first\n    return matrix\ndef find_uniq(nums):\n    '''\n    Write a function that will return the first unique number in a list\n    '''\n    for x in range(len(nums)):\n        for y in range(len(nums)):\n            if nums[x]==nums[y] and x!=y:\n                return nums[x]\n    return None\nde",
        "num_ids": 61
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_number = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] > largest_number:\n                largest_number = list1[i]\n    return largest_number\n",
        "num_ids": 63
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = list1[0]\n    for x in range(len(list1)):\n        if max_num < 0:\n            max_num = max(list1)\n    return max_num\n",
        "num_ids": 52
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        list2 = list1[:]\n        list2.sort()\n        if list2[0] < 0:\n            return list2[0]\n        else:\n            return -1\n    return list1\n    ",
        "num_ids": 72
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[-1]\n",
        "num_ids": 18
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1 = [1, -5, -9, -11, -15, -9, -8, -6]\n    max_negative = -sys.maxsize - 1\n    for i in list1:\n        if i<0:\n            if i>max_negative:\n                max_negative=i\n    return max_negative\nprint(largest_neg(list1)) \nprint(largest_neg([-1,-2,-3,-4,-5,-5,-4,-3,-2,-1]))\nprint(largest_neg([0,-1,-2,-3,-4,-5,-5,-4,-3,-2,-1]))\nprint(largest_neg([1,-2,-3,-4,-5,-5,-4,-3,-2,-1]))\n",
        "num_ids": 179
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #start writing your code here\n    result = 0\n    for i in list1:\n        if i<0 and i>result:\n            result = i\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = []\n    for num in list1:\n        if num < 0:\n            neg_num.append(num)\n    return max(neg_num)\n",
        "num_ids": 43
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    #list1=[-12, -90, -1, -100, -99, -110]\n    neg_list = [i for i in list1 if i < 0]\n    if len(neg_list) == 0:\n        print (\"List is empty\")\n    else:\n        return max(neg_list)\n",
        "num_ids": 77
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in list1:\n        if i < 0:\n            list2.append(i)\n    return max(list2)\n",
        "num_ids": 40
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    biggest = 0\n    for item in list1:\n        if item < 0:\n            if biggest == 0:\n                biggest = item\n            if item > biggest:\n                biggest = item\n    return biggest\n",
        "num_ids": 53
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple([x for x in test_list if x not in K])\n",
        "num_ids": 20
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return test_list\n    elif K <= 0:\n        return test_list\n    else:\n        for i in range(0, len(test_list)):\n            if len(test_list[i]) <= K:\n                test_list[i] = tuple(test_list[i])\n        return test_list\n",
        "num_ids": 91
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(a,b) for a, b in test_list if len(a) > K]\n",
        "num_ids": 26
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # trim_tuple = [trim_tuple(list,K) for list in test_list]\n",
        "num_ids": 28
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(test_list[i][:K]) for i in range(len(test_list))]\n",
        "num_ids": 30
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return map(lambda test_tuple: tuple(test_tuple[:K]), test_list)\n",
        "num_ids": 27
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # list1 = list(test_list)\n    return [i[:K] for i in test_list]\n",
        "num_ids": 30
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        if len(i) == K:\n            trimmed_list.append(i)\n    return trimmed_list\n",
        "num_ids": 48
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in test_list:\n        if len(i) > K:\n            i = i[:K]\n        elif len(i) < K:\n            i = i + tuple([0]*(K-len(i)))\n        yield i\n",
        "num_ids": 64
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) < K:\n            test_list[i] = tuple(test_list[i] + [None] * (K - len(test_list[i])))\n        else:\n            test_list[i] = tuple(test_list[i][0:K])\n    return test_list\n",
        "num_ids": 95
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple([test_tup1[i]*test_tup2[i] for i in range(len(test_tup1))])\n",
        "num_ids": 38
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    product = []\n    for i,j in zip(test_tup1, test_tup2):\n        product.append(i*j)\n    return product\n",
        "num_ids": 42
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result_tup = ()\n        for i in range(0, len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i]),\n        return result_tup\n    else:\n        return 'Tuples are of different lengths'\n",
        "num_ids": 95
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    index_mult_tup = tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n    return index_mult_tup\n",
        "num_ids": 47
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Approach 1:\n    # tuples_multiplication = []\n    # for i in range(len(test_tup1)):\n    #     tuples_multiplication.append(test_tup1[i]*test_tup2[i])\n    # return tuple(tuples_multiplication)\n",
        "num_ids": 76
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n",
        "num_ids": 46
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication_list = []\n    for index in range(len(test_tup1)):\n        value = test_tup1[index] * test_tup2[index]\n        index_multiplication_list.append(value)\n",
        "num_ids": 62
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return test_tup1[0] * test_tup2[0] + test_tup1[1] * test_tup2[1]\n",
        "num_ids": 40
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(el1*el2 for el1, el2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        list_output = []\n        for i in range(len(test_tup1)):\n            list_output.append(test_tup1[i]*test_tup2[i])\n        print(list_output)\n        tup_output = tuple(list_output)\n        print(tup_output)\n    else:\n        print('Length of tuples are not equal.')\n",
        "num_ids": 117
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    # Print the element and its count \n    for key, value in count.items(): \n        print(key, value) \n",
        "num_ids": 43
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst)\n    for x in tup: \n        print(x +'occurs'+ str(counts[x]) +'times') \ntup = ('a', 'a', 'a', 'b', 'b', 'c') \nlst = ['a', 'b', 'c']\ncount_Occurrence(tup, lst) \n",
        "num_ids": 93
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return [tup.count(x) for x in lst]\n",
        "num_ids": 19
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = [] \n    for tup in lst: \n        for t in tup: \n            if t not in res: \n                res.append(t)\n    count = Counter(res) \n    for k, v in count.items(): \n        print(\"Occurrence of {} is {}\".format(k, v))\n",
        "num_ids": 82
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst) \n    for i in tup: \n        print(res[i], end=\" \")\n    \ndef count_occurence_recursive(tup, lst):\n    if not tup:\n        return\n    if tup[0] in lst:\n        print(lst.count(tup[0]), end=\" \")\n    count_occurence_recursive(tup[1:], lst)\n",
        "num_ids": 112
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # to store the count of each element \n    res = Counter(tup) \n    # count the occurrence of each element \n    # in the given list \n    for i in lst: \n        res[i] += 1\n    # printing the data \n    # in the tuple \n    return res \ntup = (1, 2, 3, 4, 5, 6, 6, 6, 6) \nlst = [1, 2, 3, 4, 5] \nprint(count_Occurrence(tup, lst)) \n",
        "num_ids": 132
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    l = list() \n    for t in lst: \n        l.append(tuple(t)) \n    tup2 = tuple(l) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v3(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v4(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v5(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v6(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v7(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v8(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v9(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v10(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v11(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v12(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v13(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v14(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        \ndef count_Occurrence_v15(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    from collections import Counter \n    tup2 = tuple(lst) \n    count = Counter(tup2) \n    print('\\nCount of Occurrence of all elements of list in tuple:')\n    for i in tup: \n        print('Occurrence of '+str(i)+' is '+str(count[i])) \n        \n        \n        ",
        "num_ids": 90
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = lst\n    for i in range(0, len(lst)): \n        tup = tup + (lst[i],)\n    for i in range(0, len(tup)): \n        print (tup[i], tup.count(tup[i])) \n",
        "num_ids": 77
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # return a dictionary with element of tuple as key and count as value\n    occurence_dict = Counter(tup) \n    # print occurence_dict\n    # return list of tuples containing key and value\n    # sorted(occurence_dict.items())\n    sorted_occurence_dict = occurence_dict.items()\n    # print sorted_occurence_dict\n    # count number of elements in the tuple\n    # print occurence_dict.values()\n    # for key in occurence_dict.keys():\n    #     print \"Key: %s and Value: %d\" %(key, occurence_dict[key])\n    # count number of occurence of each element of the list in the tuple\n    # print occurence_dict.values()\n    for i in range(len(lst)):\n        print \"Occurence of\", lst[i], \"is\", occurence_dict[lst[i]]\n",
        "num_ids": 231
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = 0\n    for ele in lst:\n        if ele in tup:\n            res += 1\n    return res \n",
        "num_ids": 33
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\nprint(cube_nums([1,2,3,4,5,6]))\n",
        "num_ids": 36
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for n in nums:\n        cube_list.append(n**3)\n    return cube_list\n",
        "num_ids": 35
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [number ** 3 for number in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n",
        "num_ids": 18
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in nums:\n        cubes.append(i**3)\n    return cubes\nprint(cube_nums([1,2,3,4,5,6]))\n",
        "num_ids": 52
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n",
        "num_ids": 38
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x ** 3 for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n",
        "num_ids": 49
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        print('Enter a positive number')\n    elif n == 1:\n        return 0\n    else:\n        return ((n * 2 * n) + 1)\n    return cal_sum(n - 1)\n",
        "num_ids": 58
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1): \n        if (i % 2 == 0): \n            sum = sum + i \n        else: \n            sum = sum - i \n    return sum\n",
        "num_ids": 57
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 1\n    for i in range(n):\n        sum += 2*i + 1\n    return sum\n",
        "num_ids": 29
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    return n + cal_sum(n-2)\n",
        "num_ids": 38
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 8\n    else:\n        return 2*(n-2) + 4*(n-1)\n",
        "num_ids": 47
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(cal_perrin(n))\n",
        "num_ids": 14
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n+1): \n        s += i * i\n    return s\n",
        "num_ids": 32
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # To store the sum of the result\n    sum = 0\n    # Iterate from 1 to n\n    for i in range(n + 1):\n        # Calculate the sum of perrin number\n        sum += (i**2 + i)**2 / (i * (2 * i + 1))\n    return sum\n",
        "num_ids": 76
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def perrin_num(n):\n        '''\n        Write a function to calculate the perrin numbers.\n        '''\n        if n == 1:\n            return 1\n        else:\n            return n + perrin_num(n-1)\n    return sum([perrin_num(i) for i in range(1, n+1)])\n",
        "num_ids": 55
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [elem[l:] for elem in str]\n",
        "num_ids": 17
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n",
        "num_ids": 27
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    lst = []\n    for i in range(l):\n        start = i*(len(str)//l)\n        end = (i+1)*(len(str)//l)\n        lst.append(str[start:end])\n    return lst\n",
        "num_ids": 66
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [string[l:] for string in str]\n",
        "num_ids": 15
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[0:l] for i in str]\n",
        "num_ids": 17
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    temp = []\n    for i in str:\n        temp.append(i[l])\n    return temp\n",
        "num_ids": 28
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    ret = \"\"\n    for i in range(l):\n        ret += str[i]\n    return ret\n",
        "num_ids": 28
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return []\n    else:\n        return [l[0][:l[1]], extract_string(l[1:], l[1:])]\n",
        "num_ids": 46
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = [str[i:i+l] for i in range(0,len(str),l)]\n    return a\n",
        "num_ids": 32
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[l:len(str)] for str in strs]\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if type(text1) == str:\n        return \"\".join(text1.split())\n    else:\n        return \"wrong input\"\n",
        "num_ids": 36
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(\" \", \"\")\n    return text2\n",
        "num_ids": 20
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    if text1 is not str:\n        raise TypeError('Invalid input. Must be a string type.')\n    \n    text = text1\n    while'' in text:\n        text = text.replace(' ', '')\n    return text\n",
        "num_ids": 57
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = re.sub(r'\\s+', '', text1)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    text1 = text1.replace(\"\\n\",\"\")\n    return text1\n    \ndef reverse_string(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    text1 = text1[::-1]\n    return text1\n    \ndef is_palindrome(text1):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    Note: A palindrome is a word, phrase, or sequence that reads the same \n    backwards as forwards, e.g. madam or nurses run.\n    '''\n    text1 = text1.lower()\n    text1 = remove_whitespaces(text1)\n    text1 = reverse_string(text1)\n    if text1 == text1[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_pangram(text1):\n    '''\n    Write a function to check whether the given string is pangram or not.\n    Note: Pangrams are words or sentences containing every letter of the \n    alphabet at least once.\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    text1 = text1.lower()\n    text1 = remove_whitespaces(text1)\n    for i in alphabet:\n        if i in text1:\n            continue\n        else:\n            return False\n    return True\n    \ndef is_pangram2(text1):\n    '''\n    Write a function to check whether the given string is pangram or not.\n    Note: Pangrams are words or sentences containing every letter of the \n    alphabet at least once.\n    '''\n    alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    text1 = text1.lower()\n    text1 = remove_whitespaces(text1)\n    text1 = text1.replace(\" \",\"\")\n    for i in alphabet:\n        if i in text1:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 127
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\ndef replace_char(text2,char1,char2):\n    '''\n    Write a function to replace all occurrences of the character in the given string with another character.\n    '''\n    return text2.replace(char1,char2)\ndef count_vowels(text3):\n    '''\n    Write a function to count the number of vowels (a, e, i, o, u) in the given string.\n    '''\n    return text3.count('a')+text3.count('e')+text3.count('i')+text3.count('o')+text3.count('u')\ndef count_consonants(text4):\n    '''\n    Write a function to count the number of consonants (anything other than a, e, i, o, and u) in the given string.\n    '''\n    return len(text4) - count_vowels(text4)\ndef count_occurrences(text5,text6):\n    '''\n    Write a function to count the number of times a given character occurs in the given string.\n    '''\n    return text5.count(text6)\ndef replace_all(text7,text8,text9):\n    '''\n    Write a function to replace all occurrences of a given character in the given string with another character.\n    '''\n    return text7.replace(text8,text9)\ndef convert_uppercase(text10):\n    '''\n    Write a function to convert a given string into uppercase.\n    '''\n    return text10.upper()\ndef convert_lowercase(text11):\n    '''\n    Write a function to convert a given string into lowercase.\n    '''\n    return text11.lower()\ndef is_palindrome(text12):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    if text12[::1]==text12[::-1]:\n        return True\n    else:\n        return False\ndef remove_special_chars(text13):\n    '''\n    Write a function to remove all occurrences of a given character in the given string.\n    '''\n    return re.sub(\"[^\\w\\s]\", \"\", text13)\ndef is_number(text14):\n    '''\n    Write a function to check if the given string is a number.\n    '''\n    return text14.isnumeric()\ndef reverse_words(text15):\n    '''\n    Write a function to reverse words in a given string.\n    '''\n    return''.join(text15.split()[::-1])\ndef last_occurrence(text16,text17):\n    '''\n    Write a function to find the index of the last occurrence of a given character in a given string.\n    '''\n    return text16.rfind(text17)\ndef is_leap_year(text18):\n    '''\n    Write a function to check if a given year is a leap year.\n    '''\n    return text18 % 4 == 0\ndef capitalize(text19):\n    '''\n    Write a function to capitalize the first letter of the first word in a given string.\n    '''\n    return text19.capitalize()\ndef capitalize_each_word(text20):\n    '''\n    Write a function to capitalize the first letter of each word in a given string.\n    '''\n    return \" \".join(map(lambda x: x.capitalize(), text20.split()))\ndef remove_characters(text21,text22):\n    '''\n    Write a function to remove all occurrences of the given character in the given string.\n    '''\n    return text21.replace(text22, \"\")\ndef is_matching(text23,text24):\n    '''\n    Write a function to check if two given strings are matching.\n    '''\n    return re.match(text24, text23)\ndef is_matching2(text25,text26):\n    '''\n    Write a function to check if two given strings are matching.\n    '''\n    return re.fullmatch(text26, text25)\ndef is_matching3(text27,text28):\n    '''\n    Write a function to check if two given strings are matching.\n    '''\n    return re.search(text27, text28)\ndef is_matching4(text29,text30):\n    '''\n    Write a function to check if two given strings are matching.\n    '''\n    return re.findall(text30, text29)\ndef insert_newline(text31):\n    '''\n    Write a function to insert a newline character after every two words in a given string.\n    '''\n    return re.sub(\"(.{2})(?=\\s)\",r\"\\1\\n\",text31)\ndef romanize_to_decimal(text32):\n    '''\n    Write a function to convert the Roman representation of a number to its decimal representation.\n    '''\n    return {\n    'M': 1000,\n    'D': 500,\n    'C': 100,\n    'L': 50,\n    'X': 10,\n    'V': 5,\n    'I': 1\n    }[text32]\ndef decimal_to_roman(text33):\n    '''\n    Write a function to convert the decimal representation of a number to its Roman representation.\n    '''\n    return {\n    1000: 'M',\n    900: 'CM',\n    500: 'D',\n    400: 'CD',\n    100: 'C',\n    90: 'XC',\n    50: 'L',\n    40: 'XL',\n    10: 'X',\n    9: 'IX',\n    5: 'V',\n    4: 'IV',\n    1: 'I'\n    }[text33]\ndef decimal_to_roman2(text34):\n    '''\n    Write a function to convert the decimal representation of a number to its Roman representation.\n    '''\n    romans = [\n    (1000, 'M'),\n    (900, 'CM'),\n    (500, 'D'),\n    (400, 'CD'),\n    (100, 'C'),\n    (90, 'XC'),\n    (50, 'L'),\n    (40, 'XL'),\n    (10, 'X'),\n    (9, 'IX'),\n    (5, 'V'),\n    (4, 'IV'),\n    (1, 'I')\n    ]\n    result = ''\n    for (arabic, roman) in romans:\n        (factor, text34) = divmod(text34, arabic)\n        result += roman * factor\n    return result\ndef decimal_to_roman3(text35):\n    '''\n    Write a function to convert the decimal representation of a number to its Roman representation.\n    '''\n    roman = {\n    1000: 'M',\n    900: 'CM',\n    500: 'D',\n    400: 'CD',\n    100: 'C',\n    90: 'XC',\n    50: 'L',\n    40: 'XL',\n    10: 'X',\n    9: 'IX',\n    5: 'V',\n    4: 'IV',\n    1: 'I'\n    }\n    result = \"\"\n    for (arabic, roman_numeral) in roman.items():\n        (factor, text35) = divmod(text35, arabic)\n        result += roman_numeral * factor\n    return result\ndef decimal_to_roman4(text36):\n    '''\n    Write a function to convert the decimal representation of a number to its Roman representation.\n    '''\n    roman = {\n    1000: 'M',\n    900: 'CM',\n    500: 'D',\n    400: 'CD',\n    100: 'C',\n    90: 'XC',\n    50: 'L',\n    40: 'XL',\n    10: 'X',\n    9: 'IX',\n    5: 'V',\n    4: 'IV',\n    1: 'I'\n    }\n    result = \"\"\n    for (arabic, roman_numeral) in roman.items():\n        (factor, text36) = divmod(text36, arabic)\n        result += roman_numeral * factor\n    return result\ndef decimal_to_roman5(text37):\n    '''\n    Write a function to convert the decimal representation o",
        "num_ids": 12
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # split the text based on whitespaces\n    # then join the text with no whitespaces\n    return \"\".join(text1.split())\n",
        "num_ids": 35
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ', '')\n",
        "num_ids": 13
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    return text1\n",
        "num_ids": 20
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss=0\n    if actual_cost<sale_amount:\n        loss=sale_amount-actual_cost\n    return loss\n",
        "num_ids": 33
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = sale_amount - actual_cost\n    if loss < 0:\n        loss = 0\n    return loss\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount<=actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0\n",
        "num_ids": 36
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost-sale_amount\n    return loss_amount if loss_amount>0 else 0\n",
        "num_ids": 29
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost < sale_amount):\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 32
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n",
        "num_ids": 31
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        print(f\"You have lost {loss} \")\n    else:\n        print(\"You have not lost money\")\n",
        "num_ids": 52
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    actual_cost=int(actual_cost)\n    sale_amount=int(sale_amount)\n    if sale_amount>actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "num_ids": 55
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # sum = 0\n    # for i in range(1,n) :\n    #     if n%i == 0 :\n    #         if i%2 == 0 :\n    #             sum+=i\n    # print(sum)\n",
        "num_ids": 57
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    if (n == 0 or n == 1):\n        result = 0\n    else:\n        for i in range(1, n):\n            if (n % i == 0):\n                if (i % 2 == 0):\n                    result += i \n                else:\n                    result += 0 \n    return result \n",
        "num_ids": 80
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    while n % 2 == 0: \n        sum = sum + 2\n        n = n / 2\n    return sum\n",
        "num_ids": 35
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) : \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                sum = sum + i \n    return sum\n",
        "num_ids": 56
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 2\n    sum = 0\n    while i < n : \n        if n % i == 0 :\n            sum = sum + i \n        i = i + 1\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 0\n    # sum = 1\n    # for i in range(2, n // 2 + 1):\n    #     if n % i == 0:\n    #         sum += i\n    # return sum\n    count = 0\n    for i in range(1, n):\n        if n % i == 0:\n            count = count + i\n    return count\n    # return sum\ndef isPrime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\ndef isPerfect(n):\n    if n < 1:\n        return False\n    sum = 1\n    i = 2\n    while i * i < n:\n        if n % i == 0:\n            sum = sum + i + n / i\n        i = i + 1\n    if n == sum:\n        return True\n    return False\n",
        "num_ids": 291
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2,int(math.sqrt(n))+1):\n        if(n%i==0):\n            sum += i\n            if(i**2!= n):\n                sum += n/i\n    return sum\n    \ndef sqrt(n):\n    '''\n    Write a python function to find the square root of a number.\n    '''\n    return n**(1/2)\n    \ndef reverse(s):\n    '''\n    Write a python function to find the reverse of a string.\n    '''\n    rev = ''\n    i = len(s)-1\n    while(i >= 0):\n        rev += s[i]\n        i -= 1\n    return rev\n",
        "num_ids": 41
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n%i == 0 : \n            sum += i\n    return sum \n",
        "num_ids": 42
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using while loop.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    return sum\n    \ndef sumofFactors3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using for loop.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef sumofFactors4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using while loop and list comprehension.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef sumofFactors5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using while loop and set comprehension.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    return sum\n    \ndef sumofFactors6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using for loop and list comprehension.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef sumofFactors7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using for loop and set comprehension.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef sumofFactors8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using for loop and dict comprehension.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef sumofFactors9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number using for loop and dict comprehension.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n    return sum\n    \ndef isprime(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime2(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime3(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < n :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime4(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime5(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime6(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    sum = 0\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime7(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime8(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime9(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime10(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime11(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime12(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime13(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime14(n) : \n    '''\n    Write a python function to check if a number is a prime number or not.\n    '''\n    i = 1\n    while i < math.sqrt(n) :\n        if n % i == 0:\n            if i % 2 == 0:\n                return False\n        i += 1\n    return True\n    \ndef isprime15(n) : \n    '''\n    Write a python function to check if a numbe",
        "num_ids": 13
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i=1\n    sum=0\n    while i<n :\n        if n%i==0 :\n            if i%2==0 :\n                sum=sum+i\n            i=i+1\n    return sum\ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    i=1\n    sum=0\n    while i<n :\n        if n%i==0 :\n            if i%2==1 :\n                sum=sum+i\n            i=i+1\n    return sum\ndef gcd(a,b): \n    '''\n    Write a python function to find the gcd of a and b.\n    '''\n    if b==0 :\n        return a\n    else :\n        return gcd(b,a%b)\ndef lcm(a,b): \n    '''\n    Write a python function to find the lcm of a and b.\n    '''\n    return int((a*b)/gcd(a,b))\ndef isPrime(n): \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<=1 :\n        return False\n    i=2\n    while i*i<=n :\n        if n%i==0 :\n            return False\n        i=i+1\n    return True\ndef isPerfect(n): \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    i=1\n    while i<n :\n        if n%i==0 :\n            sum=sum+i\n        i=i+1\n    if sum==n :\n        return True\n    return False\ndef fact(n): \n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if n==0 :\n        return 1\n    return n*fact(n-1)\ndef isArmstrong(n): \n    '''\n    Write a python function to check whether a number is an armstrong number or not.\n    '''\n    sum=0\n    temp=n\n    while temp>0 :\n        digit=temp%10\n        sum=sum+digit**3\n        temp=temp//10\n    if sum==n :\n        return True\n    return False\ndef isAbundant(n): \n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    if n<12 :\n        return False\n    sum=0\n    i=1\n    while i<=n :\n        if n%i==0 :\n            sum=sum+i\n        i=i+1\n    if sum>n :\n        return True\n    return False\ndef isDeficient(n): \n    '''\n    Write a python function to check whether a number is deficient or not.\n    '''\n    if n<1 :\n        return False\n    sum=0\n    i=1\n    while i<=n :\n        if n%i==0 :\n            sum=sum+i\n        i=i+1\n    if sum<n :\n        return True\n    return False\ndef isSquare(n) : \n    '''\n    Write a python function to check whether a number is a square or not.\n    '''\n    sq=int(math.sqrt(n))\n    if sq*sq==n :\n        return True\n    return False\ndef isFibonacci(n): \n    '''\n    Write a python function to check whether a number is a fibonacci number or not.\n    '''\n    prev=0\n    curr=1\n    i=2\n    while i<n :\n        prev=curr\n        curr=curr+prev\n        i=i+1\n    if curr==n :\n        return True\n    return False\ndef isPythagorean(a,b,c): \n    '''\n    Write a python function to check whether a, b, c are pythagorean numbers.\n    '''\n    if a*a+b*b==c*c or b*b+c*c==a*a or a*a+c*c==b*b :\n        return True\n    return False\ndef isPalindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while n>0 :\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev :\n        return True\n    return False\ndef isCircular(n): \n    '''\n    Write a python function to check whether a number is circular or not.\n    '''\n    temp=n\n    sum=0\n    while n>0 :\n        digit=n%10\n        sum=sum+digit\n        n=n//10\n    if temp==sum :\n        return True\n    return False\ndef isQuadratic(n): \n    '''\n    Write a python function to check whether a number is quadratic or not.\n    '''\n    if n<0 :\n        return False\n    i=1\n    while i*i<=n :\n        if n%i==0 :\n            return True\n        i=i+1\n    return False\ndef isHarshad(n) : \n    '''\n    Write a python function to check whether a number is harshad or not.\n    '''\n    sum=0\n    temp=n\n    while temp>0 :\n        digit=temp%10\n        sum=sum+digit\n        temp=temp//10\n    if n%sum==0 :\n        return True\n    return False\ndef isPerfectSquare(n): \n    '''\n    Write a python function to check whether a number is a perfect square or not.\n    '''\n    sq=int(math.sqrt(n))\n    if sq*sq==n :\n        return True\n    return False\ndef isCube(n): \n    '''\n    Write a python function to check whether a number is a cube or not.\n    '''\n    cube=n**(1/3)\n    if cube**3==n :\n        return True\n    return False\ndef isLinear(n): \n    '''\n    Write a python function to check whether a number is linear or not.\n    '''\n    if n<0 :\n        return False\n    i=2\n    while i*i<=n :\n        if n%i==0 :\n            return False\n        i=i+1\n    return True\ndef isPower(n,p) : \n    '''\n    Write a python function to check whether a number is a power of a given number or not.\n    '''\n    if n%p==0 :\n        return True\n    return False\ndef isPrimePower(n,p): \n    '''\n    Write a python function to check whether a number is a prime power or not.\n    '''\n    if n%p==0 :\n        if isPrime(p) or isPower(n,p) :\n            return True\n    return False\ndef isPallindrome(n): \n    '''\n    Write a python function to check whether a number is pallindrome or not.\n    '''\n    temp=n\n    rev=0\n    while n>0 :\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev :\n        return True\n    return False\ndef isReverse(n): \n    '''\n    Write a python function to check whether a number is reverse of a given number or not.\n    '''\n    temp=n\n    rev=0\n    while n>0 :\n        dig=n%10\n        rev=rev*10+dig\n        n=n//10\n    if temp==rev :\n        return True\n    return False\ndef isPrimePalindrome(n): \n    '''\n    Write a python function to check whether a number is prime palindrome or not.\n    '''\n    if isPrime(n) or isPallindrome(n) :\n        return True\n    return False\ndef isPanDigital(n): \n    '''\n    Write a python function to check whether a number is pan digital or not.\n    '''\n    sum=0\n    i=1",
        "num_ids": 11
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search('z', text):\n        print(\"found\")\n    else:\n        print(\"not found\")\n",
        "num_ids": 30
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # if 'z' in text:\n    #     return True\n    # else:\n    #     return False\n    return 'z' in text\n",
        "num_ids": 37
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if text is None:\n        return False\n    pattern = '.*z.+'\n    if re.match(pattern,text):\n        return True\n    return False\n",
        "num_ids": 42
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    result = re.findall(regex, text)\n    return result\n",
        "num_ids": 51
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('\\S*z\\S*')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n    # for match in re.finditer('\\S*z\\S*', text):\n    #     print(match)\n    # print(re.findall('\\S*z\\S*', text))\n",
        "num_ids": 93
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w*z\\w*')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n",
        "num_ids": 46
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    list_1 = []\n    list_2 = []\n    list_3 = []\n    text = str(text)\n    list_1 = re.findall(r'[\\w]+z[\\w]*', text)\n    list_1 = [x.lower() for x in list_1]\n    list_2 = re.findall(r'[\\w]+z[\\w]*', text)\n    for word in list_2:\n        if word.count(\"z\") > 1:\n            list_3.append(word)\n    return list_3\n",
        "num_ids": 138
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_regex = r'\\b[A-Za-z]+\\b'\n    if re.search(word_regex, text):\n        print(\"string contains word with z\")\n    else:\n        print(\"string doesn't contain word with z\")\n",
        "num_ids": 64
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if \"z\" in text:\n        return True\n    else:\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.search('\\w*z\\w*', text)\n    print(result)\n",
        "num_ids": 26
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 28\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb = int(monthnum2)\n    if monthnumb == 1 or monthnumb == 3 or monthnumb == 5 or monthnumb == 7 or monthnumb == 8 or monthnumb == 10 or monthnumb == 12:\n        if monthnumb == 12:\n            return 31\n        return 31\n    elif monthnumb == 4 or monthnumb == 6 or monthnumb == 9 or monthnumb == 11:\n        if monthnumb == 11:\n            return 30\n        return 30\n    elif monthnumb == 2:\n        if year%4 == 0 and (year%100!= 0 or year%400 == 0):\n            return 29\n        elif year%4!= 0:\n            return 28\n    else:\n        return \"Wrong month number\"\n",
        "num_ids": 186
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_list = [1, 3, 5, 7, 8, 10, 12]\n    if monthnum2 in monthnumb_list:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False\n",
        "num_ids": 64
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        print(\"31 days\")\n    elif monthnum2==2:\n        print(\"28 days\")\n    elif monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11:\n        print(\"30 days\")\n    else:\n        print(\"Wrong input\")\n",
        "num_ids": 130
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        return 31\n    elif monthnum2 in (4, 6, 9, 11):\n        return 30\n    else:\n        return 28\n",
        "num_ids": 57
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    assert type(monthnum2)==int, 'Input must be a number'\n    if monthnum2<=0:\n        return False\n    elif monthnum2==2:\n        return True\n    elif monthnum2%2==0:\n        if monthnum2>=5 and monthnum2<=7:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2>=5 and monthnum2<=7:\n            return True\n        else:\n            return False\n",
        "num_ids": 123
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        raise Exception('Incorrect input')\n",
        "num_ids": 96
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        return True\n    elif monthnum2 == 4 or 6 or 9 or 11:\n        return False\n    else:\n        print(\"Incorrect Month Number\")\n        return False\n    \ndef month_number(month):\n    '''\n    Write a function to return the corresponding month number for a given month name.\n    '''\n    if month == \"January\":\n        monthnum = 1\n    elif month == \"February\":\n        monthnum = 2\n    elif month == \"March\":\n        monthnum = 3\n    elif month == \"April\":\n        monthnum = 4\n    elif month == \"May\":\n        monthnum = 5\n    elif month == \"June\":\n        monthnum = 6\n    elif month == \"July\":\n        monthnum = 7\n    elif month == \"August\":\n        monthnum = 8\n    elif month == \"September\":\n        monthnum = 9\n    elif month == \"October\":\n        monthnum = 10\n    elif month == \"November\":\n        monthnum = 11\n    elif month == \"December\":\n        monthnum = 12\n    else:\n        print(\"Incorrect Month Name\")\n        return None\n    return monthnum\n",
        "num_ids": 203
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return 29\n    if monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31\n",
        "num_ids": 43
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #to do - iterate over the string list and reverse the string\n    #to do - return the resulting list\n    pass\n",
        "num_ids": 31
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for string in stringlist:\n        new_list.append(string[::-1])\n    return new_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 39
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for word in stringlist:\n        reverse_list.append(word[::-1])\n    return reverse_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_list = []\n    for word in stringlist:\n        reverse_list.append(word[::-1])\n    return reverse_list\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [reverse_string(string) for string in stringlist]\n",
        "num_ids": 18
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n",
        "num_ids": 37
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(0, len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return(stringlist)\n",
        "num_ids": 41
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if lst is None or len(lst) == 0:\n        return None\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < len(min_sublist):\n            min_sublist = sublist\n    return min_sublist\n",
        "num_ids": 75
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "num_ids": 43
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sub_lst = i\n    return min_sub_lst\n",
        "num_ids": 64
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # return []\n    min = len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            sublist = lst[i]\n    return sublist\n",
        "num_ids": 72
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    min_len = len(lst[0])\n    for sublist in lst:\n        if min_len > len(sublist):\n            min_len = len(sublist)\n",
        "num_ids": 49
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[0]\n    for sub_lst in lst:\n        if len(sub_lst) < len(min_lst):\n            min_lst = sub_lst\n    return min_lst\n",
        "num_ids": 61
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[:len(lst)]\n",
        "num_ids": 21
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    def minimum_length(lst):\n        length = len(lst)\n        lst_min = [lst[0]]\n        for i in lst[1:]:\n            if length > len(lst_min):\n                lst_min = [i]\n            elif length == len(lst_min):\n                lst_min.append(i)\n        return lst_min\n    \n    return minimum_length(lst)\n",
        "num_ids": 110
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    #returns the first sublist having minimum length in the given list\n    min_len=len(lst[0])\n    for sub_lst in lst:\n        if(len(sub_lst)<min_len):\n            min_len=len(sub_lst)\n            res=sub_lst\n    return res\n",
        "num_ids": 83
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst2=lst\n    min=len(lst)\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            lst3=lst[i:j]\n            if len(lst3)<min:\n                min=len(lst3)\n                lst2=lst3\n    return lst2\n",
        "num_ids": 95
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n",
        "num_ids": 13
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"The area of the rectangle is: \" + str(l*b))\n",
        "num_ids": 21
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n    ",
        "num_ids": 9
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(\"The area of a rectangle is\", l*b)\n",
        "num_ids": 17
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n",
        "num_ids": 8
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n",
        "num_ids": 10
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if not str1:\n        return \"\"\n    str2 = str1[0]\n    for i in range(1, len(str1)):\n        if not str1[i].isupper():\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 65
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if type(str1)==str:\n        return re.sub('[A-Z]','',str1).strip()\n    else:\n        raise TypeError('input parameter is not of type string')\n",
        "num_ids": 50
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n",
        "num_ids": 10
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    for index, i in enumerate(str1):\n        if i.isupper():\n            str1 = str1[:index] + str1[index+1:]\n    return str1\n",
        "num_ids": 49
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    string = str1.upper()\n    match = re.search(\"[A-Z]+\", string)\n    if match == None:\n        return \"No uppercase character\"\n    else:\n        result = match.group()\n        print(result)\n        return string.replace(result, \"\")\n    \nremove_uppercase(\"abABcd123\")\nremove_uppercase(\"eEaqq21\")\nremove_uppercase(\"12345xyzABCDE\")\n",
        "num_ids": 114
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(\"[A-Z]+\", \"\", str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n",
        "num_ids": 20
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i]!= str1[i].upper():\n            str2 += str1[i]\n    return str2\n",
        "num_ids": 53
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = \"\".join([i for i in str1 if not i.isupper()])\n    return str1\n",
        "num_ids": 30
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1 = str1[:i] + str1[i+1:]\n    return str1\n",
        "num_ids": 50
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [[i[0] for i in lst]]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [[sublist[0]] for sublist in lst]\nprint(Extract([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]))\n",
        "num_ids": 50
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n    \ndef FirstOccurence(lst):\n    '''\n    Write a python function to get the first occurence of an element in a list.\n    '''\n    return [idx[0] for idx in lst if len(idx)>0][0]\n    \ndef RemoveLast(lst):\n    '''\n    Write a python function to remove the last element of a list.\n    '''\n    return lst[:-1]\n    \ndef RemoveLastElement(lst):\n    '''\n    Write a python function to remove the last element of a list.\n    '''\n    lst.pop()\n    return lst\n    \ndef RemoveFirstOccurence(lst, elem):\n    '''\n    Write a python function to remove the first occurence of an element in a list.\n    '''\n    return lst[elem:]\n    \ndef RemoveFirstElement(lst, elem):\n    '''\n    Write a python function to remove the first occurence of an element in a list.\n    '''\n    return lst[:elem]\n",
        "num_ids": 12
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n",
        "num_ids": 16
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n",
        "num_ids": 17
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\ndef main():\n    '''\n    Call the function Extract.\n    '''\n    print(Extract([[1,2,3],[4,5,6],[7,8,9],[10,11,12]]))\nif __name__ == \"__main__\":\n    main(",
        "num_ids": 49
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n",
        "num_ids": 16
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count = count + 1\n    return count\n",
        "num_ids": 33
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count += 1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if ord(i) in range(65, 91):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for char in str:\n        if char.isupper():\n            count+=1\n    return count\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([x for x in str if x.isupper()])\n",
        "num_ids": 19
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n",
        "num_ids": 38
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n",
        "num_ids": 18
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter=0\n    for i in str:\n        if i.isupper():\n            counter+=1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for char in str:\n        if char.isupper():\n            counter += 1\n    return counter\n",
        "num_ids": 31
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==1:\n        return list1\n    list_of_combinations=[]\n    for i in range(len(list1)):\n        for j in combinations_list(list1[:i]+list1[i+1:]):\n            list_of_combinations.append([list1[i]]+j)\n    return list_of_combinations\n",
        "num_ids": 92
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    comb_list = []\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i < j:\n                comb_list.append([list1[i], list1[j]])\n    return comb_list\n",
        "num_ids": 67
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    #base case\n    if len(list1)==1:\n        return [list1]\n    \n    #recursive case\n    first=list1[0]\n    rem=list1[1:]\n    rem_comb=combinations_list(rem)\n    res=[]\n    for comb in rem_comb:\n        res.append([first]+comb)\n    return res\n    \ndef permutations_list(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    \n    #base case\n    if len(list1)==1:\n        return [list1]\n    \n    #recursive case\n    first=list1[0]\n    rem=list1[1:]\n    rem_perm=permutations_list(rem)\n    res=[]\n    for perm in rem_perm:\n        for i in range(len(perm)+1):\n            res.append(perm[:i]+[first]+perm[i:])\n    return res\n    \ndef permutations_list_with_duplicates(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list that\n    does not contain duplicate values.\n    '''\n    \n    #base case\n    if len(list1)==1:\n        return [list1]\n    \n    #recursive case\n    first=list1[0]\n    rem=list1[1:]\n    rem_perm=permutations_list_with_duplicates(rem)\n    res=[]\n    for perm in rem_perm:\n        res.append([first]+perm)\n    for perm in rem_perm:\n        res.append(perm+[first])\n    return res\n    \ndef test_combinations_list():\n    list1=['a', 'b', 'c', 'd']\n    assert(combinations_list(list1)==[['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'c'], ['a', 'c', 'b', 'd'], ['a', 'c', 'd', 'b'], ['a', 'd', 'b', 'c'], ['a', 'd', 'c', 'b'], ['b', 'a', 'c', 'd'], ['b', 'a', 'd', 'c'], ['b', 'c', 'a', 'd'], ['b', 'c', 'd', 'a'], ['b', 'd', 'a', 'c'], ['b', 'd', 'c', 'a'], ['c', 'a', 'b', 'd'], ['c', 'a', 'd', 'b'], ['c', 'b', 'a', 'd'], ['c', 'b', 'd', 'a'], ['c', 'd', 'a', 'b'], ['c', 'd', 'b', 'a'], ['d', 'a', 'b', 'c'], ['d', 'a', 'c', 'b'], ['d', 'b', 'a', 'c'], ['d', 'b', 'c', 'a'], ['d', 'c', 'a', 'b'], ['d', 'c', 'b', 'a']])\n    \ndef test_permutations_list():\n    list1=['a', 'b', 'c', 'd']\n    assert(permutations_list(list1)==[['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'c'], ['a', 'c', 'b', 'd'], ['a', 'c', 'd', 'b'], ['a', 'd', 'b', 'c'], ['a', 'd', 'c', 'b'], ['b', 'a', 'c', 'd'], ['b', 'a', 'd', 'c'], ['b', 'c', 'a', 'd'], ['b', 'c', 'd', 'a'], ['b', 'd', 'a', 'c'], ['b', 'd', 'c', 'a'], ['c', 'a', 'b', 'd'], ['c', 'a', 'd', 'b'], ['c', 'b', 'a', 'd'], ['c', 'b', 'd', 'a'], ['c', 'd', 'a', 'b'], ['c', 'd', 'b', 'a'], ['d', 'a', 'b', 'c'], ['d', 'a', 'c', 'b'], ['d', 'b', 'a', 'c'], ['d', 'b', 'c', 'a'], ['d', 'c', 'a', 'b'], ['d', 'c', 'b', 'a']])\n    \ndef test_permutations_list_with_duplicates():\n    list1=['a', 'b', 'c', 'd']\n    assert(permutations_list_with_duplicates(list1)==[['a', 'b', 'c', 'd'], ['a', 'b', 'd', 'c'], ['a', 'c', 'b', 'd'], ['a', 'c', 'd', 'b'], ['a', 'd', 'b', 'c'], ['a', 'd', 'c', 'b'], ['b', 'a', 'c', 'd'], ['b', 'a', 'd', 'c'], ['b', 'c', 'a', 'd'], ['b', 'c', 'd', 'a'], ['b', 'd', 'a', 'c'], ['b', 'd', 'c', 'a'], ['c', 'a', 'b', 'd'], ['c', 'a', 'd', 'b'], ['c', 'b', 'a', 'd'], ['c', 'b', 'd', 'a'], ['c', 'd', 'a', 'b'], ['c', 'd', 'b', 'a'], ['d', 'a', 'b', 'c'], ['d', 'a', 'c', 'b'], ['d', 'b', 'a', 'c'], ['d', 'b', 'c', 'a'], ['d', 'c', 'a', 'b'], ['d', 'c', 'b', 'a']])\n    \n    \ndef test_all():\n    test_combinations_list()\n    test_permutations_list()\n    test_permutations_list_with_duplicates()\n    print(\"All tests passed\")\n",
        "num_ids": 1248
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                print(list1[i], list1[j])\n",
        "num_ids": 50
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [list(combination) for i in range(1, len(list1) + 1) for combination in combinations(list1, i)]\n",
        "num_ids": 36
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            result.append([list1[i],list1[j]])\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(i+1, len(list1)):\n            print(list1[i], list1[j])\n",
        "num_ids": 48
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination_list = []\n    for i in range(1, len(list1)+1):\n        combination_list.extend(list(itertools.combinations(list1, i)))\n    return combination_list\n",
        "num_ids": 56
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    #1.6.1\n    result = []\n    if len(list1) == 0:\n        return result\n",
        "num_ids": 30
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def combine_list(list1, start, end, list_of_combinations):\n        if start == end:\n            list_of_combinations.append(list1[:])\n        else:\n            for i in range(start, end+1):\n                list1[start], list1[i] = list1[i], list1[start]\n                combine_list(list1, start+1, end, list_of_combinations)\n                list1[start], list1[i] = list1[i], list1[start]\n    \n    list_of_combinations = []\n    combine_list(list1, 0, len(list1)-1, list_of_combinations)\n    return list_of_combinations\n",
        "num_ids": 179
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = 1\n    curr_prod = 1\n    start, end = 0, 0\n    for i in range(len(arr)):\n        curr_prod *= arr[i]\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n            start = i - 1\n            end = i\n        if curr_prod < 1:\n            curr_prod = 1\n            start = i\n            end = i + 1\n",
        "num_ids": 123
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n < 1:\n        return 0\n    max_so_far = 1\n    max_ending_here = 1\n    min_ending_here = 1\n    start = 0\n    end = 0\n    s = 0\n    for i in range(n):\n        if arr[i] > 0:\n            max_ending_here *= arr[i]\n            min_ending_here = min(min_ending_here*arr[i], 1)\n        elif arr[i] < 0:\n            temp = max_ending_here\n            max_ending_here = max(min_ending_here*arr[i], 1)\n            min_ending_here = temp*arr[i]\n        else:\n            max_ending_here = 1\n            min_ending_here = 1\n        if (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        s = i + 1\n    print('Maximum product subarray is {}'.format(max_so_far))\n    print('Staring index is {} and ending index is {}'.format(start, end))\n    return max_so_far\n",
        "num_ids": 289
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far, max_ending_here = 1, 1\n    min_so_far, min_ending_here = 1, 1\n    start_index, end_index = 0, 0\n    for i in range(0, len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        min_ending_here = min(min_ending_here * arr[i], 1)\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n        if max_ending_here < 0:\n            max_ending_here = 1\n            min_ending_here = 1\n            start_index = i + 1\n        elif min_ending_here == 1:\n            start_index = i + 1\n    return max_so_far\n",
        "num_ids": 214
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Naive approach - Time: O(n^2), Space: O(1)\n    # n = len(arr)\n    # max_prod = -sys.maxsize\n    # for i in range(n):\n    #     curr_max = arr[i]\n    #     curr_prod = arr[i]\n    #     for j in range(i+1, n):\n    #         curr_max *= arr[j]\n    #         curr_prod *= arr[j]\n    #         max_prod = max(max_prod, curr_prod)\n    #         if curr_max < 0:\n    #             break\n    #     if curr_max < 0:\n    #         break\n    # return max_prod\n",
        "num_ids": 190
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n",
        "num_ids": 30
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = 1\n    current_min = 1\n    global_max = 1\n    for x in arr:\n        current_max = max(x, x*current_max)\n        current_min = min(x, x*current_min)\n        global_max = max(global_max, current_max)\n    return global_max\n",
        "num_ids": 84
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # length of array is 0 or 1\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n",
        "num_ids": 43
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = arr[0]\n    start = 0\n    end = 0\n",
        "num_ids": 20
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr or len(arr) == 0:\n        return None\n    result = [arr[0]]\n    for i in range(1, len(arr)):\n        result.append(max(arr[i], arr[i]*result[-1]))\n    return max(result)\n",
        "num_ids": 72
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values()) == n\n",
        "num_ids": 13
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    check = dict.values()[0]\n    for i in dict.values():\n        if i!= check:\n            return False\n    return True\n",
        "num_ids": 38
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(True)\n    else:\n        print(False)\n",
        "num_ids": 33
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1 and dict.values()[0] == n:\n        return True\n    else:\n        return False\n",
        "num_ids": 39
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return dict[0] == dict[1]\n    return check_value(dict[1:], n-1) and dict[0] == dict[1]\n",
        "num_ids": 58
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Write your code here\n    n = len(dict.values())\n    check = 0\n    for i in dict.values():\n        if i == n:\n            check += 1\n        else:\n            break\n    if check == len(dict):\n        print(\"All values are equal\")\n    else:\n        print(\"Not all values are equal\")\n    return\n",
        "num_ids": 87
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Write your code here\n",
        "num_ids": 9
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for k,v in dict.items():\n        if n!= v:\n            return False\n    return True\n",
        "num_ids": 29
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n in dict:\n        if dict.values() == dict[n]:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: val for key, val in dict1.items() if val!= {}}\n    \ndef new_line(dict1):\n    '''\n    Write a function to create a new line from a given dictionary.\n    '''\n    return dict1['first'] + '\\n' + dict1['last'] + '\\n' + dict1['email']\n    \ndef get_fields(dict1):\n    '''\n    Write a function to extract fields from a given dictionary.\n    '''\n    return dict1['first'], dict1['last'], dict1['email']\n    \ndef get_values(dict1):\n    '''\n    Write a function to extract values from a given dictionary.\n    '''\n    return dict1['first'], dict1['last'], dict1['email']\n    \ndef get_items(dict1):\n    '''\n    Write a function to extract items from a given dictionary.\n    '''\n    return dict1['first'], dict1['last'], dict1['email']\n    \ndef print_table(dict1):\n    '''\n    Write a function to print a table from a given dictionary.\n    '''\n    for i,j,k in dict1:\n        print(f'{i}\\t{j}\\t{k}')\n    return\n    \ndef print_key(dict1):\n    '''\n    Write a function to print only the keys from a given dictionary.\n    '''\n    for i,j,k in dict1:\n        print(i)\n    return\n    \ndef print_values(dict1):\n    '''\n    Write a function to print only the values from a given dictionary.\n    '''\n    for i,j,k in dict1:\n        print(j)\n    return\n    \ndef print_items(dict1):\n    '''\n    Write a function to print only the items from a given dictionary.\n    '''\n    for i,j,k in dict1:\n        print(k)\n    return\n    \ndef min_value(dict1):\n    '''\n    Write a function to print the minimum value from a given dictionary.\n    '''\n    return min(dict1.values())\n    \ndef max_value(dict1):\n    '''\n    Write a function to print the maximum value from a given dictionary.\n    '''\n    return max(dict1.values())\n    \ndef sum_value(dict1):\n    '''\n    Write a function to print the sum of values from a given dictionary.\n    '''\n    return sum(dict1.values())\n    \ndef main():\n    '''\n    Write a function to perform all the above functions in order.\n    '''\n    #1\n    # Create a dictionary\n    dict1 = {'first':'Vandana', 'last':'Krishna', 'email':'vandana@gmail.com'}\n    # Print original dictionary\n    print(dict1)\n    # Drop empty items\n    print(drop_empty(dict1))\n    # Create a new line\n    print(new_line(dict1))\n    # Extract fields\n    print(get_fields(dict1))\n    # Extract values\n    print(get_values(dict1))\n    # Extract items\n    print(get_items(dict1))\n    # Print table\n    print_table(dict1)\n    # Print only keys\n    print_key(dict1)\n    # Print only values\n    print_values(dict1)\n    # Print only items\n    print_items(dict1)\n    # Print minimum value\n    print(min_value(dict1))\n    # Print maximum value\n    print(max_value(dict1))\n    # Print sum of values\n    print(sum_value(dict1))\n    \nif __name__ == \"__main__\":\n    main(",
        "num_ids": 270
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n",
        "num_ids": 22
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1.pop('')\n",
        "num_ids": 11
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v!= ''}\n",
        "num_ids": 25
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2={}\n    for i in dict1:\n        if dict1[i]!=None:\n            dict2[i]=dict1[i]\n    return dict2\n",
        "num_ids": 45
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for key in dict1.keys():\n        if dict1[key]!= '':\n            dict2[key] = dict1[key]\n    return dict2\n",
        "num_ids": 48
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = []\n    for key,value in dict1.items():\n        if len(value)>0:\n            res.append(key)\n    return dict(res)\n",
        "num_ids": 44
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in list(dict1.keys()):\n        if not dict1[key]:\n            del dict1[key]\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    newdict = {key:val for key, val in dict1.items() if val is not None}\n    return newdict\n",
        "num_ids": 32
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {k:v for k,v in dict1.items() if v}\n    return new_dict\n",
        "num_ids": 31
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n",
        "num_ids": 36
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) < 2:\n        return 0\n    max_product_so_far = 1\n    max_product_ending_here = 1\n    for i in range(len(arr)):\n        max_product_ending_here *= arr[i]\n        if arr[i] == 0:\n            max_product_ending_here = 0\n        if max_product_ending_here == 0:\n            max_product_ending_here = 1\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    return max_product_so_far\n",
        "num_ids": 151
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    result = 1\n    max_endhere = 1\n    for i in range(n):\n        result = result * arr[i]\n        max_endhere = max(max_endhere * arr[i], arr[i])\n        result = max(result, max_endhere)\n    return result\n",
        "num_ids": 81
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    d = [arr[i] for i in range(n)]\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[j] < arr[i] and d[i] < d[j] * arr[i]:\n                d[i] = d[j] * arr[i]\n    return d[0] if d[0] > 1 else 1\n",
        "num_ids": 107
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            product = arr[i]*arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product\n",
        "num_ids": 73
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)\n",
        "num_ids": 79
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    len_arr = len(arr)\n    if len_arr < 2:\n        return 0\n    max_prod = 1\n    for i in range(len_arr):\n        min_prod = 1\n        for j in range(i+1, len_arr):\n            min_prod = min(min_prod, arr[j])\n            max_prod = max(max_prod, arr[j] * min_prod)\n    return max_prod\n",
        "num_ids": 116
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 1\n    for i in range(len(arr)):\n        prod = arr[i]\n        for j in range(i+1, len(arr)):\n            prod *= arr[j]\n            max_prod = max(max_prod, prod)\n    return max_prod\n",
        "num_ids": 80
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # first we define a function that finds the maximum product of an increasing subsequence\n    def max_product_helper(arr):\n        # this if statement checks if we have a single element\n        if len(arr) == 1:\n            return arr[0]\n        # this if statement checks if we have a decreasing subsequence\n        if arr[0] < arr[1]:\n            return max_product_helper(arr[1:])\n        # this else statement finds the maximum product of a non-decreasing subsequence\n        else:\n            return max(arr[0]*max_product_helper(arr[1:]), max_product_helper(arr[1:]))\n    # we then return the maximum product of a non-decreasing subsequence\n    return max_product_helper(arr)\n",
        "num_ids": 190
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(arr[j] >= arr[i]):\n                max_product = max(max_product,arr[j]*arr[i])\n    return max_product\n",
        "num_ids": 76
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    my_list = list(test_tup)\n    for i in range(0, len(my_list)-1):\n        addition = my_list[i] + my_list[i+1]\n        print(addition)\n",
        "num_ids": 59
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    assert isinstance(test_tup,tuple), \"This function takes in a tuple only.\"\n    assert len(test_tup) >= 2, \"This function needs at least 2 elements in the tuple.\"\n    sum_list = []\n    for i in range(len(test_tup)):\n        if i == 0:\n            first_ele = test_tup[i]\n            second_ele = test_tup[i + 1]\n            sum_list.append(first_ele + second_ele)\n        elif i == len(test_tup) - 1:\n            first_ele = test_tup[i]\n            second_ele = test_tup[i - 1]\n            sum_list.append(first_ele + second_ele)\n        else:\n            first_ele = test_tup[i]\n            second_ele = test_tup[i + 1]\n            third_ele = test_tup[i - 1]\n            sum_list.append(first_ele + second_ele + third_ele)\n    return tuple(sum_list)\n",
        "num_ids": 259
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    i = 0\n    new_tup = []\n    while(i < len(test_tup)-1):\n        new_tup.append(test_tup[i] + test_tup[i+1])\n        i += 1\n    return tuple(new_tup)\n",
        "num_ids": 71
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup[0] + test_tup[1])\n    ",
        "num_ids": 22
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_tup = ()\n    for i in range(0,len(test_tup)):\n        if i+1 < len(test_tup):\n            sum_tup = sum_tup + (test_tup[i]+test_tup[i+1],)\n    return sum_tup\n",
        "num_ids": 78
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(\"pairwise addition:\", end=\" \")\n    for i in range(len(test_tup)-1):\n        print(test_tup[i]+test_tup[i+1], end=\" \")\n    print()\n",
        "num_ids": 59
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(tuple(zip((a[i] + a[i + 1]) for i in range(len(a) - 1))))\n",
        "num_ids": 34
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_list = [x + y for x, y in zip(test_tup, test_tup[1:])]\n    new_tuple = tuple(new_list)\n    return new_tuple\n",
        "num_ids": 53
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup) - 1):\n        sum = test_tup[i] + test_tup[i + 1]\n        new_tup = new_tup + (sum,)\n",
        "num_ids": 63
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n1, n2 = test_tup\n    return n1 + n2\n",
        "num_ids": 22
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n        prod %= n\n    return prod\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in range(n): \n        result = result * arr[i] % n\n    return result\n",
        "num_ids": 33
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr:\n        product = product * ele % n\n    return product % n\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n",
        "num_ids": 22
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n        prod %= n \n    return prod\n",
        "num_ids": 34
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    temp_product = 1\n    for i in range(n): \n        temp_product = (temp_product * arr[i]) % n \n    return temp_product \n",
        "num_ids": 44
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    a = 1\n    for i in arr:\n        a = a * i % n\n    return a\n",
        "num_ids": 27
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    sum_of_numbers = 0\n    for i in arr:\n        sum_of_numbers += i\n",
        "num_ids": 29
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    x = 0\n    for i in arr:\n        x = x * i % n\n    return x\n",
        "num_ids": 27
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import functools as ft\n    return ft.reduce(lambda x,y: (x*y)%n, arr, 1)\n",
        "num_ids": 35
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return max(l)-min(l)==len(l)-1\nl1=[1,3,5,7,9]\nl2=[1,3,5,7,11]\nl3=[1,2,3,4,5]\nl4=[1,2,3,4,7,8]\nl5=[1,2,3,4,5,6,7]\nprint(check_Consecutive(l1))\nprint(check_Consecutive(l2))\nprint(check_Consecutive(l3))\nprint(check_Consecutive(l4))\nprint(check_Consecutive(l5))\n",
        "num_ids": 155
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l) + 1))\n    \ndef check_Monotonic(l): \n    '''\n    Write a python function to check whether the given list contains monotonic numbers or not.\n    '''\n    return (all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or\n        all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n",
        "num_ids": 59
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i]-l[i+1] == 1 for i in range(len(l)-1)))\n",
        "num_ids": 31
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            continue\n        else:\n            return False\n    return True\n",
        "num_ids": 46
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(1, len(l)):\n        if l[i]!= l[i-1]+1:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return all(l[i] + 1 == l[i + 1] for i in range(len(l)-1))\n",
        "num_ids": 31
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l), max(l)+1))\n",
        "num_ids": 24
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    lst = list(set(l)) \n    for i in range(len(lst)-1): \n        if(lst[i+1]-lst[i]==1): \n            pass\n        else: \n            return False\n    return True\n",
        "num_ids": 65
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        print(\"List contains less than 2 elements.\")\n    else:\n        print(all(l[i]-l[i-1] == 1 for i in range(1,len(l))))\n",
        "num_ids": 56
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    l1=sorted(l)\n    for i in range(len(l)-1):\n        if l1[i]+1!=l1[i+1]:\n            return False\n    return True\n",
        "num_ids": 51
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        if i in test_list2:\n            new_list.append(i)\n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) > len(test_list2):\n        small = test_list2\n        big = test_list1\n    else:\n        small = test_list1\n        big = test_list2\n    intersection = []\n    for element in small:\n        if element in big and element not in intersection:\n            intersection.append(element)\n    return intersection\n",
        "num_ids": 94
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for elem in test_list1:\n        if elem in test_list2:\n            result.append(elem)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n",
        "num_ids": 20
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # return list(set(test_list1) & set(test_list2))\n    return set(test_list1) & set(test_list2)\n",
        "num_ids": 41
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if(test_list1 and test_list2):\n        return set(test_list1).intersection(set(test_list2))\n    return []\n",
        "num_ids": 40
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = [(1,2), (3,4), (5,6)]\n    test_list2 = [(3,4), (5,6), (1,2)]\n    result = []\n    for tup1 in test_list1:\n        for tup2 in test_list2:\n            if tup1[0] == tup2[0] and tup1[1] == tup2[1]:\n                result.append(tup1)\n    print(result)\n",
        "num_ids": 121
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = [i for i in test_list1 if i in test_list2]\n    return result\n",
        "num_ids": 27
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list3 = []\n    for i in test_list1:\n        if i in test_list2:\n            test_list3.append(i)\n    return test_list3\nprint('Intersection of tuples:', tuple_intersection(test_list1, test_list2))",
        "num_ids": 72
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return \"\".join([chr(ord(newch)) if ch==chr(ord(newch)) else ch for ch in str1])\n",
        "num_ids": 36
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i,c in enumerate(str1):\n        if c == ch:\n            str1[i] = newch\n    return ''.join(str1)\n",
        "num_ids": 52
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    str1[ch] = newch\n    return ''.join(str1)\n    \ndef replace_chars(str1,chars,newchars):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = list(str1)\n    for i,ch in enumerate(chars):\n        str1[ch] = newchars[i]\n    return ''.join(str1)\n    \ndef zero_pad(number,length):\n    '''\n    Write a function to zero-pad a number.\n    '''\n    number = str(number)\n    while len(number) < length:\n        number = '0' + number\n    return number\n    \ndef char_count(str1,ch):\n    '''\n    Write a function to count the number of characters in a string.\n    '''\n    return str1.count(ch)\n    \ndef reverse(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    str1 = list(str1)\n    str1 = str1[::-1]\n    return ''.join(str1)\n    \ndef encode(str1):\n    '''\n    Write a function to encode a string.\n    '''\n    str1 = list(str1)\n    str1 = str1[::-1]\n    for i,ch in enumerate(str1):\n        if ch.isdigit():\n            str1[i] = char_count(str1[i+1:],str1[i])\n    str1 = str1[::-1]\n    return ''.join(str1)\n    \ndef decode(str1):\n    '''\n    Write a function to decode a string.\n    '''\n    str1 = list(str1)\n    for i,ch in enumerate(str1):\n        if ch.isdigit():\n            str1[i] = reverse(str1[i+1:])[::-1]\n    return ''.join(str1)\n    \ndef ascii_sum(str1):\n    '''\n    Write a function to return the ascii sum of a string.\n    '''\n    return sum([ord(ch) for ch in str1])\n    \ndef count_chars(str1):\n    '''\n    Write a function to return a dictionary of character count.\n    '''\n    str1 = list(str1)\n    chars = {}\n    for ch in str1:\n        if ch not in chars:\n            chars[ch] = 1\n        else:\n            chars[ch] += 1\n    return chars\n    \ndef sort_chars(str1):\n    '''\n    Write a function to sort a string of characters alphabetically.\n    '''\n    str1 = list(str1)\n    str1.sort()\n    return ''.join(str1)\n    \ndef check_pangram(str1):\n    '''\n    Write a function to check if a string is a pangram.\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    str1 = list(str1)\n    str1.sort()\n    return str1 == list(alphabet)\n    \ndef find_substring(str1,chars):\n    '''\n    Write a function to return all the substrings of a string.\n    '''\n    str1 = list(str1)\n    substrings = []\n    for i,ch in enumerate(str1):\n        if ch in chars:\n            substr = str1[i:i+chars[ch]]\n            substr = ''.join(substr)\n            substrings.append(substr)\n    return substrings\n    \ndef get_product_of_all_other_numbers(numbers):\n    '''\n    Write a function to return the product of all other numbers in the list.\n    '''\n    products = []\n    for i,n in enumerate(numbers):\n        prod = 1\n        for j,num in enumerate(numbers):\n            if i == j:\n                continue\n            prod *= num\n        products.append(prod)\n    return products\n    \ndef remove_duplicate(str1):\n    '''\n    Write a function to remove duplicate letters in a string.\n    '''\n    str1 = list(str1)\n    for i,ch in enumerate(str1):\n        if ch in str1[i+1:]:\n            str1[i] = ''\n    return ''.join([ch for ch in str1 if ch!= ''])\n    \ndef unique_chars(str1):\n    '''\n    Write a function to return the unique characters of a string.\n    '''\n    str1 = list(str1)\n    return list(set(str1))\n    \ndef sort_string_by_character(str1):\n    '''\n    Write a function to sort a string based on the character.\n    '''\n    str1 = list(str1)\n    chars = []\n    for ch in str1:\n        if ch not in chars:\n            chars.append(ch)\n    chars = [char for char in str1 if char not in chars]\n    chars = [sorted(chars)[i] for i in range(len(chars))]\n    chars.sort()\n    return ''.join(chars)\n    \ndef string_difference(str1,str2):\n    '''\n    Write a function to return the difference of two strings.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    for i,ch in enumerate(str1):\n        if ch not in str2:\n            str1[i] = ''\n    return ''.join(str1)\n    \ndef palindrome_permutation(str1):\n    '''\n    Write a function to check if a string is a permutation of a palindrome.\n    '''\n    str1 = list(str1)\n    str1.sort()\n    str1 = ''.join(str1)\n    return str1 == str1[::-1]\n    \ndef get_missing_letter(str1):\n    '''\n    Write a function to return the missing letter in the string.\n    '''\n    str1 = list(str1)\n    str1 = [ch.lower() for ch in str1]\n    str1.sort()\n    l = len(str1)\n    for i,ch in enumerate(str1):\n        if ch!= chr(i+ord('a')):\n            return chr(i+ord('a'))\n    return 'a'\n    \ndef get_rotation(str1,str2):\n    '''\n    Write a function to check if one string is a rotation of the other string.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    return str1 in str2*2\n    \ndef find_sum_of_digit(num):\n    '''\n    Write a function to return the sum of all digits in a number.\n    '''\n    return sum([int(ch) for ch in str(num)])\n    \ndef common_prefix(str1,str2):\n    '''\n    Write a function to return the longest common prefix of two strings.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    while str1[0] == str2[0]:\n        str1 = str1[1:]\n        str2 = str2[1:]\n    return str1[0] if len(str1) > 0 else None\n    \ndef common_suffix(str1,str2):\n    '''\n    Write a function to return the longest common suffix of two strings.\n    '''\n    str1 = list(str1)\n    str2 = list(str2)\n    while str1[-1] == str2[-1]:\n        str1 = str1[:-1]\n        str2 = str2[:-1]\n    return str1[-1] if len(str1) > 0 else None\n    \ndef unique_chars_2(str1):\n    '''\n    Write a function to return the number of unique characters in a string.\n    '''\n    str1 = list(str1)\n    unique_chars = []\n    fo",
        "num_ids": 22
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = str1.replace(ch,newch)\n    return newstr\n    \nprint(replace_char('hello','l','X'))\n",
        "num_ids": 38
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "num_ids": 15
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(0,len(str1)):\n        if str1[i]==ch:\n            str1 = str1[:i]+newch+str1[i+1:]\n    return str1\n    \nstr1 = 'Redacted'\nch = 'R'\nnewch = 'A'\nprint(replace_char(str1,ch,newch))\n",
        "num_ids": 92
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    result = str1.replace(ch,newch)\n    return result\n",
        "num_ids": 20
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\ndef dict_sum(dict1):\n    '''\n    Write a function to sum all the values in a dictionary.\n    '''\n    sum = 0\n    for i in dict1.values():\n        sum += i\n    return sum\ndef unique_list(lst):\n    '''\n    Write a function that takes a list and returns the number of unique elements.\n    '''\n    return len(set(lst))\ndef display_table(dict1):\n    '''\n    Write a function to display a dictionary as a table.\n    '''\n    return tabulate(dict1.items(), headers=('Keys', 'Values'), tablefmt='psql')\ndef dict_values_sum(dict1):\n    '''\n    Write a function to return a dictionary with the sum of the values.\n    '''\n    return {k:sum(v) for k,v in dict1.items()}\ndef dict_values_average(dict1):\n    '''\n    Write a function to return a dictionary with the average of the values.\n    '''\n    return {k:sum(v)/len(v) for k,v in dict1.items()}\ndef dict_max_value(dict1):\n    '''\n    Write a function to return the key with the max value.\n    '''\n    return max(dict1, key=dict1.get)\ndef dict_min_value(dict1):\n    '''\n    Write a function to return the key with the max value.\n    '''\n    return min(dict1, key=dict1.get)\ndef dict_keys(dict1):\n    '''\n    Write a function to return the keys of a dictionary.\n    '''\n    return dict1.keys()\ndef dict_values(dict1):\n    '''\n    Write a function to return the values of a dictionary.\n    '''\n    return dict1.values()\ndef set_intersection(s1, s2):\n    '''\n    Write a function to return the intersection of two sets.\n    '''\n    return set(s1).intersection(set(s2))\ndef set_union(s1, s2):\n    '''\n    Write a function to return the union of two sets.\n    '''\n    return set(s1).union(set(s2))\ndef dict_combine(dict1, dict2):\n    '''\n    Write a function to combine two dictionaries.\n    '''\n    return {**dict1, **dict2}\ndef set_complement(s1, s2):\n    '''\n    Write a function to return the complement of a set.\n    '''\n    return set(s1) - set(s2)\ndef list_flatten(lst):\n    '''\n    Write a function to flatten a list.\n    '''\n    return [item for sublist in lst for item in sublist]\ndef dict_values_flatten(dict1):\n    '''\n    Write a function to flatten the values of a dictionary.\n    '''\n    return [i for j in dict1.values() for i in j]\ndef dict_keys_flatten(dict1):\n    '''\n    Write a function to flatten the keys of a dictionary.\n    '''\n    return [i for j in dict1.keys() for i in j]\ndef dict_to_list(dict1):\n    '''\n    Write a function to convert a dictionary to a list.\n    '''\n    return [list(i) for i in dict1.items()]\ndef list_from_dict(dict1):\n    '''\n    Write a function to convert a list to a dictionary.\n    '''\n    return {i:dict1.count(i) for i in set(dict1)}\ndef dict_to_set(dict1):\n    '''\n    Write a function to convert a dictionary to a set.\n    '''\n    return set(dict1.keys())\ndef set_from_dict(dict1):\n    '''\n    Write a function to convert a set to a dictionary.\n    '''\n    return {i:dict1.count(i) for i in set(dict1)}\ndef set_to_dict(s1):\n    '''\n    Write a function to convert a set to a dictionary.\n    '''\n    return {i:0 for i in s1}\ndef list_to_set(lst):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(lst)\ndef set_to_list(s1):\n    '''\n    Write a function to convert a set to a list.\n    '''\n    return list(s1)\ndef get_n_largest_values(dict1, n):\n    '''\n    Write a function to return the n largest values of a dictionary.\n    '''\n    return Counter(dict1).most_common(n)\ndef get_n_smallest_values(dict1, n):\n    '''\n    Write a function to return the n smallest values of a dictionary.\n    '''\n    return Counter(dict1).most_common()[:-n-1:-1]\ndef set_to_list_of_pairs(s1):\n    '''\n    Write a function to convert a set to a list of pairs.\n    '''\n    return list(map(list, Counter(s1).items()))\ndef list_of_pairs_to_set(lst):\n    '''\n    Write a function to convert a list of pairs to a set.\n    '''\n    return set([i for j in lst for i in j])\ndef set_difference_of_sets(s1, s2):\n    '''\n    Write a function to return the difference between two sets.\n    '''\n    return set(s1) - set(s2)\ndef set_symmetric_difference_of_sets(s1, s2):\n    '''\n    Write a function to return the symmetric difference between two sets.\n    '''\n    return set(s1) ^ set(s2)\ndef set_intersection_of_sets(s1, s2):\n    '''\n    Write a function to return the intersection between two sets.\n    '''\n    return set(s1) & set(s2)\ndef list_intersection_of_sets(lst1, lst2):\n    '''\n    Write a function to return the intersection between two sets.\n    '''\n    return list(set(lst1) & set(lst2))\ndef dict_combine_all(dict1):\n    '''\n    Write a function to combine all dictionary keys into a single list.\n    '''\n    return [i for j in dict1.keys() for i in j]\ndef list_combine_all(lst1):\n    '''\n    Write a function to combine all values of a list into a single list.\n    '''\n    return [i for j in lst1 for i in j]\ndef set_combine_all(s1):\n    '''\n    Write a function to combine all values of a set into a single set.\n    '''\n    return set([i for j in s1 for i in j])\ndef list_combine_first(lst1):\n    '''\n    Write a function to combine the first value of each list into a single list.\n    '''\n    return [i[0] for j in lst1 for i in j]\ndef set_combine_first(s1):\n    '''\n    Write a function to combine the first value of each set into a single set.\n    '''\n    return set([i[0] for j in s1 for i in j])\ndef set_difference_all(s1):\n    '''\n    Write a function to return the difference between all sets.\n    '''\n    return set([i for j in s1 for i in j])\ndef set_symmetric_difference_all(s1):\n    '''\n    Write a function to return the symmetric difference between all sets.\n    '''\n    return set([i for j in s1 for i in j])\ndef set_intersection_all(s1):\n    '''\n    Write a function to return the intersection between all sets.\n    '''\n    return set([i for j in s1 for i in j])\ndef list_difference_all(lst1):\n    ''",
        "num_ids": 33
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict1 = Counter(dict1)\n    return sorted(dict1, key=dict1.get, reverse=True)\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    def key(x):\n        return x[1]\n",
        "num_ids": 16
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n",
        "num_ids": 21
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sort_value = []\n    for key, val in dict1.items():\n        sort_value.append((val, key))\n    sort_value.sort(reverse = True)\n    return sort_value\n",
        "num_ids": 51
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n",
        "num_ids": 25
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return {key:value for key,value in sorted(dict1.items(),key=lambda item:item[1])}\n",
        "num_ids": 31
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1,key = lambda x:dict1[x])\n",
        "num_ids": 20
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    for key, value in dict(Counter(dict1)):\n        print(\"{} {}\".format(key, value))\n    return None\n",
        "num_ids": 35
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n",
        "num_ids": 28
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = 0\n    min = 0\n    for x in nums:\n        if x > max:\n            max = x\n        if x < min:\n            min = x\n    return max, min\n",
        "num_ids": 50
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num\n",
        "num_ids": 34
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    def sum_of_largest_and_smallest(nums):\n        return sum(sorted(nums)[:2])\n    return sum_of_largest_and_smallest(nums)\n",
        "num_ids": 50
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        elif nums[i] < min:\n            min = nums[i]\n",
        "num_ids": 74
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[:2])\n    # return sum([sorted(nums)[0], sorted(nums)[-1]])\n    # return sum(sorted(nums)[:2])\n    # return sum([nums[0], nums[-1]])\n",
        "num_ids": 72
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[::2])\n",
        "num_ids": 16
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = smallest = nums[0]\n    for i in nums:\n        if i > largest:\n            largest = i\n        if i < smallest:\n            smallest = i\n    return(largest+smallest)\n    \n    \ndef big_sum2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return(sum(sorted(nums)[:2]))\n    \n    \ndef even_or_odd(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return(\"Even\")\n    else:\n        return(\"Odd\")\n        \n        \ndef even_or_odd2(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return('Even' if num % 2 == 0 else 'Odd')\n    \n    \ndef greet(name):\n    '''\n    Write a Python function to greet a person.\n    '''\n    print(\"Hello, \" + name + \". Good morning!\")\n    \n    \ndef greet_return(name):\n    '''\n    Write a Python function to greet a person and return the greeting.\n    '''\n    return(\"Hello, \" + name + \". Good morning!\")\n    \n    \ndef remainder(num1,num2):\n    '''\n    Write a Python function to return the remainder of two numbers.\n    '''\n    return(num1%num2)\n    \n    \ndef remainder_return(num1,num2):\n    '''\n    Write a Python function to return the remainder of two numbers and print it out.\n    '''\n    remainder = num1%num2\n    print(remainder)\n    return(remainder)\n    \n    \ndef is_even(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \n        \ndef is_even2(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num % 2 == 0)\n    \n    \ndef is_even3(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(True if num % 2 == 0 else False)\n    \n    \ndef is_even4(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num % 2 == 0, num)\n    \n    \ndef is_even5(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num % 2 == 0)\n    \n    \ndef is_even6(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num%2==0)\n    \n    \ndef is_greater_even(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2)\n    \n    \ndef is_greater_even2(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef is_greater_even3(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return((num1%2,num2%2)>(num1%2,num2%2))\n    \n    \ndef is_greater_even4(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return((num1%2,num2%2)>(num1%2,num2%2))\n    \n    \ndef is_greater_even5(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef is_greater_even6(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef is_greater_even7(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef is_greater_even8(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef is_greater_even9(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef is_greater_even10(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '''\n    return(num1%2>num2%2, num1%2, num2%2)\n    \n    \ndef even_or_odd(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n        \n        \ndef even_or_odd2(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num % 2 == 0)\n    \n    \ndef even_or_odd3(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(True if num % 2 == 0 else False)\n    \n    \ndef even_or_odd4(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num % 2 == 0, num)\n    \n    \ndef even_or_odd5(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num % 2 == 0)\n    \n    \ndef even_or_odd6(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(num%2==0)\n    \n    \ndef even_or_odd7(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(True if num % 2 == 0 else False)\n    \n    \ndef even_or_odd8(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(True if num % 2 == 0 else False)\n    \n    \ndef even_or_odd9(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(True if num % 2 == 0 else False, num)\n    \n    \ndef even_or_odd10(num):\n    '''\n    Write a Python function to check whether a number is even or odd.\n    '''\n    return(True if num % 2 == 0 else False, num)\n    \n    \ndef is_greater_even(num1, num2):\n    '''\n    Write a Python function to check whether the first number is greater than the second number.\n    '",
        "num_ids": 23
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums = sorted(nums)\n    return (nums[-1] + nums[0])\n",
        "num_ids": 28
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #Initialize variables\n    \n    #Create empty list for numbers\n    nums_list = []\n    \n    #Get input from user\n    nums = input(\"Enter a comma separated list of numbers: \")\n    \n    #Split input into list\n    nums_list = nums.split(\",\")\n    \n    #Get the length of the list\n    length_list = len(nums_list)\n    \n    #Create a variable for the largest number\n    large = nums_list[0]\n    \n    #Create a variable for the smallest number\n    small = nums_list[0]\n    \n    #Loop through list and find largest number\n    for i in range(0, length_list):\n        if large < nums_list[i]:\n            large = nums_list[i]\n    \n    #Loop through list and find smallest number\n    for i in range(0, length_list):\n        if small > nums_list[i]:\n            small = nums_list[i]\n            \n    #Return variables\n    return \"The largest number is: \" + str(large) + \" and the smallest number is: \" + str(small)\n    ",
        "num_ids": 278
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n",
        "num_ids": 17
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = input(\"Input String: \")\n    print(string.lower())\n",
        "num_ids": 21
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    return lower_case\n",
        "num_ids": 18
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "num_ids": 9
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    if type(string) is not str:\n        return False\n    return string.islower()\n",
        "num_ids": 25
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #without re module\n    # str1 = 'ZaAaAaA'\n    # result = []\n    # for i in range(len(str1)):\n    #     if str1[i].isupper():\n    #         result.append(str1[i])\n    # str1 = ''.join(result)\n    # print(str1)\n",
        "num_ids": 89
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(\"[a-z]\", \"\", str1)\n",
        "num_ids": 20
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result=re.sub('[a-z]','',str1,re.I)\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        if str1.islower():\n            return re.sub(r\"[a-z]\", \"\", str1)\n        else:\n            return str1\n    else:\n        return str1\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        if str1.isupper():\n            return re.sub(r\"[A-Z]\", \"\", str1)\n        else:\n            return str1\n    else:\n        return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits substrings from a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r\"\\d\", \"\", str1)\n    else:\n        return str1\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove whitespace substrings from a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r\"\\s\", \"\", str1)\n    else:\n        return str1\ndef remove_chars(str1, chars):\n    '''\n    Write a function to remove all the characters in the given list from a given string.\n    '''\n    if type(str1) == str:\n        return re.sub(r\"|\".join(chars), \"\", str1)\n    else:\n        return str1\ndef remove_duplicate_chars(str1):\n    '''\n    Write a function to remove duplicate characters from a given string.\n    '''\n    if type(str1) == str:\n        return \"\".join(sorted(set(str1), key=str1.index))\n    else:\n        return str1\ndef swap_case(str1):\n    '''\n    Write a function to swap lowercase and uppercase substrings from a given string.\n    '''\n    if type(str1) == str:\n        return str1.swapcase()\n    else:\n        return str1\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    if type(str1) == str:\n        return str1[::-1]\n    else:\n        return str1\ndef reverse_words(str1):\n    '''\n    Write a function to reverse words of a given string.\n    '''\n    if type(str1) == str:\n        return \" \".join(reversed(str1.split()))\n    else:\n        return str1\ndef reverse_words_keep_reverse(str1):\n    '''\n    Write a function to reverse words of a given string keeping the order of the words.\n    '''\n    if type(str1) == str:\n        return \" \".join(reversed(str1.split()))\n    else:\n        return str1\ndef get_substring(str1, start, end):\n    '''\n    Write a function to get a substring of a given string starting from the first char and ending with the last char.\n    '''\n    if type(str1) == str:\n        return str1[start:end+1]\n    else:\n        return str1\ndef get_substring_after_first(str1, sep):\n    '''\n    Write a function to get a substring from a given string after the first occurrence of a given substring.\n    '''\n    if type(str1) == str:\n        return str1.split(sep, 1)[1]\n    else:\n        return str1\ndef get_substring_before_last(str1, sep):\n    '''\n    Write a function to get a substring from a given string before the last occurrence of a given substring.\n    '''\n    if type(str1) == str:\n        return str1.split(sep, -1)[0]\n    else:\n        return str1\ndef get_word_count(str1):\n    '''\n    Write a function to get the count of all the words in a given string.\n    '''\n    if type(str1) == str:\n        return len(str1.split())\n    else:\n        return str1\ndef get_word_count_with_case(str1):\n    '''\n    Write a function to get the count of all the words in a given string with the same case.\n    '''\n    if type(str1) == str:\n        return len(set([i.lower() for i in str1.split()]))\n    else:\n        return str1\ndef get_line_count(str1):\n    '''\n    Write a function to get the count of all the lines in a given string.\n    '''\n    if type(str1) == str:\n        return str1.count(\"\\n\")+1\n    else:\n        return str1\ndef get_line_count_with_case(str1):\n    '''\n    Write a function to get the count of all the lines in a given string with the same case.\n    '''\n    if type(str1) == str:\n        return len(set([i.lower() for i in str1.split(\"\\n\")]))\n    else:\n        return str1\ndef get_char_count(str1):\n    '''\n    Write a function to get the count of all the characters in a given string.\n    '''\n    if type(str1) == str:\n        return len(str1)\n    else:\n        return str1\ndef get_char_count_with_case(str1):\n    '''\n    Write a function to get the count of all the characters in a given string with the same case.\n    '''\n    if type(str1) == str:\n        return len(set([i for i in str1]))\n    else:\n        return str1\ndef find_common(str1, str2):\n    '''\n    Write a function to find the common substrings of two given strings.\n    '''\n    if type(str1) == str and type(str2) == str:\n        return \"\".join(list(set(str1.split()).intersection(str2.split())))\n    else:\n        return str1\ndef find_common_with_case(str1, str2):\n    '''\n    Write a function to find the common substrings of two given strings keeping the case of the characters.\n    '''\n    if type(str1) == str and type(str2) == str:\n        return \"\".join(list(set(str1.lower()).intersection(str2.lower())))\n    else:\n        return str1\ndef get_repeated_count(str1):\n    '''\n    Write a function to get the count of all the repeated characters in a given string.\n    '''\n    if type(str1) == str:\n        str1=str1.lower()\n        return len(re.findall(\"(.)\\\\1{1,}\", str1))\n    else:\n        return str1\ndef get_repeated_count_with_case(str1):\n    '''\n    Write a function to get the count of all the repeated characters in a given string keeping the case.\n    '''\n    if type(str1) == str:\n        return len(set([i.lower() for i in str1]))\n    else:\n        return str1\ndef get_shortest_string(str1, str2):\n    '''\n    Write a function to get the shortest of two given strings.\n    '''\n    if type(str1) == str and type(str2) == str:\n        if len(str1) < len(str2):\n            return str1\n        elif len(str1) > len(str2):\n            return str2\n        else:\n            return str1\n    else:\n        return str1\ndef get_longest_string(str1, str2):\n    '''\n    Write a function to get the longest of two given strings.\n    '''\n    if type(str1) == str and type(str2) == str:\n        if len(str1) < len(str2):\n            return str2\n        elif len(str1) > len(str2):\n            return str1\n        else:\n            return str1\n    else:\n        return st",
        "num_ids": 76
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str3 = ''\n    for i in range(len(str2)):\n        if str2[i] in str2[i+1:]:\n            str3 += str2[i]\n    return str3\n",
        "num_ids": 63
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    pattern = re.compile('[a-z]*')\n    res = re.findall(pattern,str2)\n    print(\" \".join(res))\n",
        "num_ids": 51
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]','',str1)\n    return str1\n",
        "num_ids": 26
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # new_string=str1.replace(\"f\",\"F\")\n    # print(new_string)\n    # str1=re.sub(\"f\",\"F\",str1)\n    # str1=str1.replace(\"t\",\"T\")\n    # print(str1)\n    # str1=re.sub(\"t\",\"T\",str1)\n    # print(str1)\n    # str1=re.sub(\"l\",\"L\",str1)\n    # print(str1)\n    # str1=re.sub(\"e\",\"E\",str1)\n    # print(str1)\n    return str1\n    # print(str1)\n    # str1=str1.replace(\"f\",\"F\")\n    # print(str1)\n    # str1=str1.replace(\"t\",\"T\")\n    # print(str1)\n    # str1=str1.replace(\"l\",\"L\")\n    # print(str1)\n    # str1=str1.replace(\"e\",\"E\")\n    # print(str1)\n",
        "num_ids": 247
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]', '', str1)\n",
        "num_ids": 22
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1, flags = re.IGNORECASE)\n",
        "num_ids": 29
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if(n<0) : \n        n=-n \n    if(n < 10) : \n        return(n)\n    else : \n        return(first_Digit(n//10))\n    \n    \ndef palindrome(n) :\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if(n<0) : \n        return(False)\n    else : \n        return(first_Digit(n)==n%10)\n    \n    \ndef gcd(a,b) :\n    '''\n    Write a python function to find the greatest common divisor (GCD) of two numbers.\n    '''\n    if(b==0) : \n        return(a)\n    else : \n        return(gcd(b,a%b))\n",
        "num_ids": 36
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 10 :\n        n = n // 10\n    print(n)\n",
        "num_ids": 22
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # code here\n    n = str(n)\n    return int(n[0])\n    \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # code here\n    n = str(n)\n    return int(n[-1])\n",
        "num_ids": 25
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while(n!= 0) :\n        return n % 10\n        n = n // 10\n        if (n == 0) :\n            return 0\n",
        "num_ids": 38
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return int(n/10**(len(str(n))-1))\n",
        "num_ids": 21
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = 0\n    while n > 0 :\n        first_digit = n % 10\n        n = n // 10\n    return first_digit\n",
        "num_ids": 38
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    print(\"The first digit of the number is :\", n%10)\n",
        "num_ids": 21
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\nprint(first_Digit(25))\n",
        "num_ids": 18
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Code here\n    return n % 10 \n",
        "num_ids": 14
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n",
        "num_ids": 8
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2!=0] \n",
        "num_ids": 20
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i%2==1]\n",
        "num_ids": 18
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [item for item in list if item%2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [i for i in list if i % 2!= 0]\n",
        "num_ids": 19
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    res = []\n    for i in list:\n        if i % 2!= 0:\n            res.append(i)\n    return res\n",
        "num_ids": 36
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_2 = []\n    for i in list:\n        if i % 2 == 0:\n            list_2.append(i)\n    return list_2\n",
        "num_ids": 41
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2!= 0:\n            odds.append(i)\n    return odds\n",
        "num_ids": 38
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    \n    x = []\n    for num in list:\n        if num % 2 == 1:\n            x.append(num)\n    return x\n",
        "num_ids": 37
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list = [1,2,3,4,5,6,7,8,9,10]\n    list1 = []\n    for i in list:\n        if i%2!= 0:\n            list1.append(i)\n    return list1\nprint(Split(list))",
        "num_ids": 70
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return odd_list\n",
        "num_ids": 62
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0 \n    sum_of_numbers = 0\n    for i in range(1,n+1):\n        sum_of_numbers = sum_of_numbers + i\n        sum_of_cubes = sum_of_cubes + (i*i*i)\n    difference = (sum_of_numbers**3) - sum_of_cubes\n    return difference\n",
        "num_ids": 102
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    sum_natural = 0\n    for j in range(1,n+1):\n        sum_natural += j\n    return abs(cube_sum-sum_natural)",
        "num_ids": 70
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n + 1) :\n        sum_of_numbers += i\n        sum_of_cubes += i ** 3\n",
        "num_ids": 58
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        num += i**3\n    print(abs(sum(range(1,n+1))**3 - num))\n    \ndef divisible(n) :\n    '''\n    Write a Python function that checks whether a number is divisible by 2 using the remainder operator.\n    '''\n    if n % 2 == 0 :\n        print(n,\"is divisible by 2\")\n    else :\n        print(n,\"is not divisible by 2\")\n        \ndef hollowTriangle(height) :\n    '''\n    Write a Python function to draw a hollow triangle of height n.\n    '''\n    for i in range(0, height) :\n        for j in range(0, (height-1)-i) :\n            print(\" \", end='')\n        for k in range(0, 2*i+1) :\n            print(\"*\", end='')\n        print()\n    for i in range(height, 0, -1) :\n        for j in range(0, (height-1)-i) :\n            print(\" \", end='')\n        for k in range(0, 2*i-1) :\n            print(\"*\", end='')\n        print()\n    \ndef counting(a,b) :\n    '''\n    Write a Python function to add the digits of a multiple of 10 in the range a to b.\n    '''\n    c = 0\n    for i in range(a,b+1) :\n        if i % 10 == 0 :\n            c += i\n    print(c)\n    \ndef fibonacci(n) :\n    '''\n    Write a Python function to calculate the value of the nth Fibonacci number.\n    '''\n    if n == 0 :\n        print(0)\n    elif n == 1 :\n        print(1)\n    else :\n        n1 = 0\n        n2 = 1\n        c = 0\n        for i in range(n-1) :\n            c = n1 + n2\n            n1 = n2\n            n2 = c\n        print(c)\n    \ndef triangles(n) :\n    '''\n    Write a Python function to print a pattern of numbers.\n    '''\n    for i in range(0, n) :\n        for j in range(0, i+1) :\n            print(j+1, end=' ')\n        print()\n    for i in range(n-1, 0, -1) :\n        for j in range(0, i) :\n            print(j+1, end=' ')\n        print()\n    \ndef pyramids(height, base) :\n    '''\n    Write a Python function to print a pattern of numbers.\n    '''\n    if base == 1 :\n        for i in range(0, height) :\n            print(\" \"*(height-i-1) + \"*\"*(2*i+1))\n    else :\n        for i in range(0, height) :\n            print(\" \"*(height-i-1) + \"*\"*(2*i+1) + \" \"*(base-2) + \"*\"*(2*i+1))\n        \ndef is_prime(n) :\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    c = 0\n    for i in range(2, n) :\n        if n%i == 0 :\n            c += 1\n    if c == 0 :\n        print(\"Prime\")\n    else :\n        print(\"Not prime\")\n        \ndef is_superprime(n) :\n    '''\n    Write a Python function to check whether a number is prime or not.\n    '''\n    if n < 2 :\n        print(\"Not prime\")\n    else :\n        c = 0\n        for i in range(2, n) :\n            if n%i == 0 :\n                c += 1\n        if c == 0 :\n            print(\"Super prime\")\n        else :\n            print(\"Not super prime\")\n            \ndef armstrong(n) :\n    '''\n    Write a Python function to check whether a number is armstrong or not.\n    '''\n    d = 0\n    c = 0\n    n1 = n\n    while n1 > 0 :\n        d = n1%10\n        n1 = n1//10\n        c += d**3\n    if n == c :\n        print(\"Armstrong\")\n    else :\n        print(\"Not Armstrong\")\n        \ndef prime_factors(n) :\n    '''\n    Write a Python function to print all the prime factors of a given number n.\n    '''\n    i = 2\n    while i*i <= n :\n        if n % i == 0 :\n            print(i)\n            n = n/i\n        else :\n            i += 1\n    if n > 1 :\n        print(int(n))\n        \ndef palindrome(n) :\n    '''\n    Write a Python function to check whether a number is palindrome or not.\n    '''\n    n = str(n)\n    if n == n[::-1] :\n        print(\"Palindrome\")\n    else :\n        print(\"Not palindrome\")\n        \ndef is_pandigital(n) :\n    '''\n    Write a Python function to check whether a number is pandigital or not.\n    '''\n    n = str(n)\n    if len(n) == 9 :\n        if set(n) == set('123456789') :\n            print(\"Pandigital\")\n        else :\n            print(\"Not pandigital\")\n    else :\n        print(\"Not pandigital\")\n        \ndef factorial(n) :\n    '''\n    Write a Python function to print the factorial of a number.\n    '''\n    c = 1\n    for i in range(1, n+1) :\n        c *= i\n    print(c)\n    \ndef armstrong(n) :\n    '''\n    Write a Python function to check whether a number is armstrong or not.\n    '''\n    d = 0\n    c = 0\n    n1 = n\n    while n1 > 0 :\n        d = n1%10\n        n1 = n1//10\n        c += d**3\n    if n == c :\n        print(\"Armstrong\")\n    else :\n        print(\"Not Armstrong\")\n        \ndef narcissistic(n) :\n    '''\n    Write a Python function to check whether a number is narcissistic or not.\n    '''\n    d = 0\n    c = 0\n    n1 = n\n    while n1 > 0 :\n        d = n1%10\n        n1 = n1//10\n        c += d**4\n    if n == c :\n        print(\"Narcissistic\")\n    else :\n        print(\"Not narcissistic\")\n        \ndef armstrong_narcissistic(n) :\n    '''\n    Write a Python function to check whether a number is armstrong or narcissistic or both.\n    '''\n    d = 0\n    c = 0\n    n1 = n\n    while n1 > 0 :\n        d = n1%10\n        n1 = n1//10\n        c += d**4\n    if n == c :\n        print(\"Narcissistic\")\n    elif n == c :\n        print(\"Armstrong\")\n    else :\n        print(\"Not narcissistic\")\n        print(\"Not armstrong\")\n        \ndef armstrong_narcissistic(n) :\n    '''\n    Write a Python function to check whether a number is armstrong or narcissistic or both.\n    '''\n    d = 0\n    c = 0\n    n1 = n\n    while n1 > 0 :\n        d = n1%10\n        n1 = n1//10\n        c += d**4\n    if n == c :\n        print(\"Narcissistic\")\n    elif n == c :\n        print(\"Armstrong\")\n    else :\n        print(\"Not narcissistic\")\n        print(\"Not armstrong\")\n        \ndef armstrong_narcissistic(n) :\n    '''\n    Write a Python function to check whether a number is armstrong or narcissistic or both.\n    '''\n    d = 0\n    c = 0\n    n1 = n\n    while n1 > 0 :\n        d = n1%10\n        n1 = n1//10\n        c += d**4",
        "num_ids": 49
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_nums = 0\n    for i in range(n+1) :\n        sum_of_cubes = sum_of_cubes + i**3\n    for i in range(n+1) :\n        sum_of_nums = sum_of_nums + i\n    return sum_of_cubes - sum_of_nums\n",
        "num_ids": 98
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    first_sum = 0\n    second_sum = 0\n    for i in range(1,n+1):\n        first_sum += i**3\n        second_sum += i\n    return (second_sum**3 - first_sum)\n",
        "num_ids": 59
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = (n * (n+1)) * (3*n + 1) / 6\n    sum_of_n = (n * (n+1) * (2*n + 1)) / 6\n    diff = sum_of_cubes - sum_of_n\n    return diff\nprint(difference(5))\n",
        "num_ids": 83
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    \n    for i in range(1, n + 1):\n        sum_cubes = sum_cubes + i ** 3\n        sum_natural = sum_natural + i\n        \n    return abs(sum_natural ** 3 - sum_cubes)\n",
        "num_ids": 76
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    nth = n*(n+1)/2\n    sum1 = 0\n    for i in range(1,n+1) :\n        sum1 += i*i*i\n    \n    print(nth,sum1)\n    diff = nth - sum1\n    print(\"Difference =\",diff)\n    return diff\n",
        "num_ids": 80
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_cubes(n) :\n        return sum([x**3 for x in range(1,n+1)])\n    return (sum_of_cubes(n) - sum_of_cubes(n+1))\nprint(difference(10))\n",
        "num_ids": 68
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    A.sort()\n    pairs = 0\n    for i in range(0, N, 2):\n        if i!= N - 1:\n            if A[i] ^ A[i + 1] & 1:\n                pairs += 1\n        else:\n            if A[i] ^ A[0] & 1:\n                pairs += 1\n    return pairs\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "num_ids": 2007
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A.sort() \n    #print(A)\n    for i in range(0,N-1,2) : \n        x = A[i]\n        y = A[i+1] \n        print(x,y)\n        if (x ^ y) % 2 == 1 : \n            print(x,y)\n            count += 1\n    return count\n",
        "num_ids": 91
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(0, N-1) : \n        for j in range(i+1, N) : \n            if((A[i] ^ A[j]) & 1) : \n                print(\"(\", A[i],\",\", A[j], \")\") \n",
        "num_ids": 70
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # A = [1,3,5,9,7,2]\n    # N = len(A)\n",
        "num_ids": 29
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Counter to store the number of odd values \n    ans = 0\n    # iterating the array \n    for i in range(N) : \n        # iterating the array again \n        for j in range(i + 1, N) : \n            # checking if the xor value is odd \n            if (A[i] ^ A[j]) & 1 : \n                # incrementing the answer \n                ans += 1\n    return ans \n",
        "num_ids": 109
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i]^A[j]) & 1 == 1:\n                count += 1\n    return count \n",
        "num_ids": 59
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_cnt = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j] ) % 2!= 0:\n                odd_cnt += 1\n    return odd_cnt\n",
        "num_ids": 71
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    cnt = 0\n    for i in range(0, N) : \n        for j in range(i+1, N) : \n            xor = (A[i]^A[j])\n            if (xor & 0x1) : \n                cnt+=1\n    return cnt \n",
        "num_ids": 76
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) : \n                count += 1\n    return count\n",
        "num_ids": 60
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    l = []\n    for i in string:\n        l.append(i.swapcase())\n",
        "num_ids": 26
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    alphabet = {\n    'A':'a', 'a':'A', 'B':'b', 'b':'B', 'C':'c', 'c':'C', 'D':'d', 'd':'D', 'E':'e', 'e':'E', 'F':'f', 'f':'F',\n    'G':'g', 'g':'G', 'H':'h', 'h':'H', 'I':'i', 'i':'I', 'J':'j', 'j':'J', 'K':'k', 'k':'K', 'L':'l', 'l':'L',\n    'M':'m','m':'M', 'N':'n', 'n':'N', 'O':'o', 'o':'O', 'P':'p', 'p':'P', 'Q':'q', 'q':'Q', 'R':'r', 'r':'R',\n    'S':'s','s':'S', 'T':'t', 't':'T', 'U':'u', 'u':'U', 'V':'v', 'v':'V', 'W':'w', 'w':'W', 'X':'x', 'x':'X',\n    'Y':'y', 'y':'Y', 'Z':'z', 'z':'Z'}\n    newstring = ''\n    for char in string:\n        newstring = newstring + alphabet.get(char)\n    return newstring\n",
        "num_ids": 361
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)\n",
        "num_ids": 29
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n",
        "num_ids": 54
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return \"\".join(str(i).upper() if i.islower() else str(i).lower() for i in string)\n",
        "num_ids": 33
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n",
        "num_ids": 11
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # change case of string\n    #.swapcase() converts uppercase to lowercase and vice versa\n    return string.swapcase()\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))])\n",
        "num_ids": 36
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # digit_distance_nums(n1, n2)\n    # Input: 1234, 2345\n    # Output:\n    # 1, 2, 3, 4, 2, 1, 4, 3\n    # Note: Each number has 10 digits, hence, it is sufficient to consider each digit of the number.\n",
        "num_ids": 75
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    l1 = list(str(n1))\n    l2 = list(str(n2))\n    diff = 0\n    for n1, n2 in zip(l1, l2):\n        diff += abs(int(n1) - int(n2))\n    return diff\n",
        "num_ids": 69
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    total = 0\n    for i in range(len(n1)):\n        total += abs(int(n1[i]) - int(n2[i]))\n    return total\n",
        "num_ids": 66
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # You can use math.floor() to find the floor value of a decimal number. For example, math.floor(8.9) returns 8.\n    return sum(math.floor(abs(num1 - num2)) for num1, num2 in zip(str(n1), str(n2)))\n",
        "num_ids": 72
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    assert isinstance(n1, int) and isinstance(n2, int) and n1 >= 0 and n2 >= 0\n    if n1 > n2:\n        n1, n2 = n2, n1\n    d1, d2 = 0, 0\n    while n1!= 0:\n        d1 += n1 % 10\n        n1 //= 10\n    while n2!= 0:\n        d2 += n2 % 10\n        n2 //= 10\n    return d1 - d2\n",
        "num_ids": 123
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_split = list(str(n1))\n    n2_split = list(str(n2))\n",
        "num_ids": 30
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s1 = str(n1)\n    s2 = str(n2)\n    return sum([abs(int(s1[i]) - int(s2[i])) for i in range(len(s1))])\n",
        "num_ids": 56
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if isinstance(n1, int) and isinstance(n2, int):\n        return digit_distance(n1) + digit_distance(n2)\n    else:\n        return \"Error. Inputs must be integers.\"\n",
        "num_ids": 56
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    return sum([int(i) for i in str(diff)])\n",
        "num_ids": 31
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize maximum and starting index\n    max_so_far = 0\n    max_ending_here = 0\n",
        "num_ids": 29
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
        "num_ids": 79
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if(max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n",
        "num_ids": 110
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    start = 0\n    end = 0\n    current_sum = 0\n    for i in range(0, size):\n        current_sum = current_sum + a[i]\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n        elif current_sum > max_sum:\n            max_sum = current_sum\n            max_start = start\n            max_end = i + 1\n    return max_sum\n",
        "num_ids": 131
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    current_sum = 0\n    for i in range(size):\n        current_sum = current_sum + a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
        "num_ids": 81
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_sum_so_far = a[0]\n",
        "num_ids": 26
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    cur_sum = a[0]\n    for i in range(1, size):\n        cur_sum = max(cur_sum + a[i], a[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n",
        "num_ids": 75
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n",
        "num_ids": 91
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n",
        "num_ids": 20
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = a[0]\n    for i in range(1, size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        if max_sum < curr_sum:\n            max_sum = curr_sum\n    return max_sum\n",
        "num_ids": 84
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n    union_set.update(test_tup1, test_tup2)\n    return sorted(union_set)\n",
        "num_ids": 39
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    sorted_union = sorted(list(set(test_tup1 + test_tup2)))\n    return sorted_union\n",
        "num_ids": 33
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if test_tup1 == () or test_tup2 == ():\n        return ()\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))\n",
        "num_ids": 51
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1).union(set(test_tup2)))\n",
        "num_ids": 25
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1).union(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1).union(test_tup2))\n",
        "num_ids": 23
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(set(test_tup1) | set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #Fill the function here\n    return tuple(sorted(list(set(test_tup1 + test_tup2))))\n",
        "num_ids": 33
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1).union(set(test_tup2))))\n",
        "num_ids": 27
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set_1 = set(test_tup1)\n    set_2 = set(test_tup2)\n    return sorted(set_1 | set_2)\n",
        "num_ids": 43
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = len(lst[0])\n    for i in lst:\n        max_length = max(max_length, len(i))\n    return max_length\n",
        "num_ids": 45
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    m = max(len(l) for l in lst)\n    return m\n",
        "num_ids": 22
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # your code here\n    dic = {}\n    max_length = 0\n    for i in range(len(lst)):\n        if lst[i] in dic:\n            dic[lst[i]].append(i)\n            if len(dic[lst[i]])>max_length:\n                max_length = len(dic[lst[i]])\n        else:\n            dic[lst[i]] = [i]\n    return max_length\n",
        "num_ids": 121
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_max = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > length_max:\n            length_max = length\n    return length_max\n",
        "num_ids": 49
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(0, len(lst)):\n        for j in range(0, len(lst)):\n            if (len(lst[i]) > len(lst[j]) and len(lst[j]) > max_len):\n                max_len = len(lst[j])\n    return max_len\n",
        "num_ids": 90
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    count=0\n    maxi=0\n    for i in lst:\n        if type(i)==list:\n            count=count+1\n    for i in range(count):\n        count1=0\n        for j in lst:\n            if type(j)==list:\n                count1=count1+1\n            if count1==i:\n                lst[i]=len(j)\n    for i in lst:\n        if type(i)==list:\n            maxi=max(maxi,len(i))\n    return maxi\n",
        "num_ids": 136
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    lengths=[]\n    for i in lst:\n        lengths.append(len(i))\n    return lengths\n",
        "num_ids": 31
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = 0\n    for sublist in lst:\n        maxlen = max(maxlen, len(sublist))\n    return maxlen\n",
        "num_ids": 37
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    s = []\n    for i in range(len(lst)):\n        s.append(1)\n        for j in range(i):\n            if lst[i] == lst[j] and s[j]+1 >= s[i]:\n                s[i] = s[j]+1\n    return max(s)\n",
        "num_ids": 92
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    #TODO: complete this function\n    max_length = 0\n    for l in lst:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n",
        "num_ids": 55
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall('\"(.*?)\"', text)\n",
        "num_ids": 17
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Separate function to extract values using regex\n    return re.findall('\".*\"',text)\n",
        "num_ids": 27
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'\\\"(.*?)\\\"')\n    value = pattern.findall(text)\n    return value\n",
        "num_ids": 34
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Write your code here.\n    # Find all the groups of quotation marks\n    return re.findall(r\"\\\"(.+)\\\"\", text)\n",
        "num_ids": 38
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\"\\w+\"', text)\n    return values\n",
        "num_ids": 23
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"[^\"]*\"', text)\n",
        "num_ids": 20
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall('\\\"(.+?)\\\"', text)\n    return values\n",
        "num_ids": 24
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'[^\\s\\w]*\\\"[^\\s\\w]*\\\"[^\\s\\w]*'\n    match = re.findall(pattern, text)\n    return match\n",
        "num_ids": 52
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # text = \"Time flies like an arrow. Fruit flies like a banana.\"\n    # extract_values(text) -> [\"Time\", \"flies\", \"like\", \"an\", \"arrow.\", \"Fruit\", \"flies\", \"like\", \"a\", \"banana.\"]\n    # extract_values(text) -> [\"Time flies like an arrow.\", \"Fruit flies like a banana.\"]\n    # extract_values('') -> []\n    # extract_values('a single quote') -> ['a single quote']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quotes\" and \\'single quotes\\'') -> ['double quotes', 'and','single quotes']\n    # extract_values('\"double quote",
        "num_ids": 1953
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    temp = []\n    for i in range(0,n): \n        for j in range(i+1,n):\n            if arr[i]!= arr[j] and (arr[i],arr[j]) not in temp:\n                temp.append((arr[i],arr[j]))\n    print(len(temp))\n    return\n",
        "num_ids": 85
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # s = set()\n    # ans = 0\n    # for i in arr:\n    #     if i in s:\n    #         ans += 1\n    #     else:\n    #         s.add(i)\n    # return ans//2\n",
        "num_ids": 62
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Initializing result \n    result = 0\n    # Initializing sum for sum of\n    # square of all array elements \n    sum = 0\n    # Calculating sum of squares \n    for i in range(n): \n        sum += arr[i] * arr[i] \n    # Using formula to calculate result \n    result = ((n * (n - 1)) / 2) - (((n - 1) * (n - 1)) / 2) - sum\n    print(result) \n",
        "num_ids": 119
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # function to count the number of pairs\n    def count(arr, n):\n        unique = {}\n        for x in arr:\n            if x not in unique:\n                unique[x] = 0\n        # unique[arr[i]] = 0\n        count = 0\n        for i in range(n):\n            if arr[i]!= arr[i+1]:\n                unique[arr[i]] = unique[arr[i]] + 1\n        for x in unique:\n            if unique[x] > 1:\n                count += (unique[x] * (unique[x] - 1) // 2)\n        return count\n",
        "num_ids": 148
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n-1): \n        for j in range(i+1,n):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n",
        "num_ids": 54
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # Insert all elements in Hash.\n    hash_map = {}\n    for i in range(n):\n        if arr[i] in hash_map:\n            hash_map[arr[i]] += 1\n        else:\n            hash_map[arr[i]] = 1\n",
        "num_ids": 67
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n): \n        for j in range(i+1,n): \n            if (arr[i]!= arr[j]): \n                count+=1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unique = []\n    for item in arr:\n        if(item in unique):\n            continue\n        else:\n            unique.append(item)\n    for i in range(len(unique)):\n        for j in range(i+1,len(unique)):\n            if(unique[i]!=unique[j]):\n                print(unique[i],unique[j])\n    return len(unique)\n",
        "num_ids": 99
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    print(arr)\n    for i in range(len(arr)-1):\n        j = i+1\n        while j < len(arr):\n            if arr[i]!= arr[j]:\n                count += 1\n            j += 1\n    return count\n",
        "num_ids": 75
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    d = dict()\n    for i in range(n):\n        if arr[i] not in d:\n            d[arr[i]] = 1\n        else:\n            d[arr[i]] += 1\n    total = 0\n    for key in d:\n        if key+1 in d:\n            total += (d[key] * d[key+1])\n    return total\n",
        "num_ids": 99
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "num_ids": 12
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n",
        "num_ids": 13
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\ndef palindrome(str):\n    '''\n    Write a Python function to check whether a string is palindrome or not.\n    '''\n    rev = split(str)[::-1]\n    rev = \"\".join(rev)\n    if str == rev:\n        return \"The string is a palindrome.\"\n    else:\n        return \"The string is not a palindrome.\"\n",
        "num_ids": 60
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \ndef find_palingrams():\n    '''\n    Write a Python function to find and print palingrams (e.g. words or phrases that are a palindrome). \n    \n    HINT: You can use split and join functions to make your code more readable.\n    '''\n    pass\n    \ndef find_palingrams():\n    '''\n    Write a Python function to find and print palingrams (e.g. words or phrases that are a palindrome). \n    \n    HINT: You can use split and join functions to make your code more readable.\n    '''\n    pali_list = []\n    words = load_dictionary('dictionary.txt')\n    for word in words:\n        if len(word) > 1 and word == word[::-1]:\n            pali_list.append(word)\n    return pali_list\n    \nif __name__ == \"__main__\":\n    palingrams = find_palingrams()\n    palingrams.sort()\n    print(f\"\\nNumber of palingrams = {len(palingrams)}\")\n    for word in palingrams:\n        print(f\"{word}\")\n    \n",
        "num_ids": 143
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # isinstance(object, type) returns True if the object is of the specified type, otherwise False\n    # isinstance(object, tuple)\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"The input must be a non-negative integer!\")\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 85
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(map(int, str(n)))\n",
        "num_ids": 15
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #num = input(\"Enter the number: \")\n    #num = int(num)\n    #while num!= 0:\n    #    digits = num % 10\n    #    num = num // 10\n    #    print(digits)\n    #    digits_sum = digits + digits_sum\n    #return digits_sum\n",
        "num_ids": 82
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n",
        "num_ids": 33
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n % 10\n        n //= 10\n    return s\n",
        "num_ids": 31
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert (n >= 0), \"Input must be positive number\"\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n",
        "num_ids": 47
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n",
        "num_ids": 19
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Initializing a variable to false\n    sorted=False\n    #If the list is sorted\n    if list1==sorted(list1):\n        #Return true\n        return True\n    #Otherwise\n    else:\n        #Return false\n        return False\n",
        "num_ids": 63
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return all(list1[i]<list1[i+1] for i in range(len(list1)-1))\n",
        "num_ids": 32
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list_len = len(list1)\n    for i in range(list_len-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\nprint(issort_list([1,2,3,4,5]))\n",
        "num_ids": 59
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return sorted(list1) == list1\n",
        "num_ids": 13
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    a = len(list1)\n    for i in range(0,a):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n    \ndef is_sublist(list1,list2):\n    '''\n    Write a function to check whether one list is the sublist of another list.\n    '''\n    if len(list1) == 0 and len(list2) == 0:\n        return True\n    if len(list2) == 0:\n        return True\n    if len(list1)!= len(list2):\n        return False\n    for i in range(0,len(list2)):\n        if list2[i] == list1[0]:\n            flag = True\n            for j in range(0,len(list1)):\n                if list2[i+j]!= list1[j]:\n                    flag = False\n                    break\n            if flag:\n                return True\n    return False\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    a = len(list1)\n    i = 0\n    j = 1\n    while i < a:\n        while j < a:\n            if list1[j] == list1[i]:\n                del list1[j]\n                a -= 1\n                break\n            j += 1\n        j = j - 1\n        i += 1\n",
        "num_ids": 82
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1)<2:\n        return True\n    else:\n        return list1[0]<list1[1]\n",
        "num_ids": 35
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #start your code here\n    return sorted(list1) == list1\n",
        "num_ids": 20
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n",
        "num_ids": 11
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        d = {}\n        l.append(d)\n    return l\n",
        "num_ids": 33
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if length > 0:\n        return [{} for i in range(length)]\n    else:\n        print(\"Please enter a valid length!\")\n        return []\n",
        "num_ids": 41
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n",
        "num_ids": 15
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    list2 = []\n    while list1!= []:\n        list2.append(list1[0])\n        list1.pop(0)\n        list1.sort()\n    return list2\n    \ndef sort_by_order(list1):\n    '''\n    Write a function to sort each sublist by order of importance.\n    '''\n    for i in range(0,len(list1)):\n        list1[i].sort()\n        list1[i].reverse()\n    return list1\n",
        "num_ids": 40
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist = []\n    \n    # Initialize a new list for each element in list1\n    for lst in list1:\n        sublist = []\n        \n        # Append each element in list1 to new list, \"sublist\"\n        for elem in lst:\n            sublist.append(elem)\n        \n        # Sort each sublist and append to list1\n        list1.append(sublist.sort())\n    \n    return list1\n",
        "num_ids": 111
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"\\nSorting the sublists in the list:\",list1)\n    for i in range(len(list1)):\n        list1[i]=sorted(list1[i])\n    return list1\n",
        "num_ids": 54
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort(key=lambda x: x[0])\n    return list1\n",
        "num_ids": 23
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n",
        "num_ids": 16
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n",
        "num_ids": 10
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n    ",
        "num_ids": 30
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # for sublist in list1:\n    #     sublist.sort()\n    # return list1\n    list1.sort(key=lambda x: sorted(x))\n    return list1\n",
        "num_ids": 48
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    print(\"Original list :\", nums)\n    unique_nums = []\n",
        "num_ids": 21
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = [set(i) for i in nums]\n    return [list(i) for i in set(tuple(i) for i in nums)]\n",
        "num_ids": 42
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = []\n    unique = []\n    for n in nums:\n        if n not in seen:\n            unique.append(n)\n            seen.append(n)\n    return unique\n",
        "num_ids": 48
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # should return a list of 2 unique numbers\n    # nums is a list of lists\n    # return a list of 2 unique numbers\n    # eg: two_unique_nums([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) -> [1, 2, 3]\n    # using sets should be easier to implement here\n    # but we'll be using the list here as well.\n    # nums should be an array of arrays, that is a list of lists\n    unique_nums = set()\n    for num in nums:\n        unique_nums.update(num)\n",
        "num_ids": 158
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # nums = [1, 2, 3, 1, 2, 3, 4, 5, 5, 6, 7, 7]\n    # nums2 = [8, 9, 10, 8, 9, 10, 11, 12, 12, 13, 14, 14]\n",
        "num_ids": 65
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    #  Write your code here\n    nums = [x for n, x in enumerate(nums) if x not in nums[:n]]\n    return nums\n",
        "num_ids": 43
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    return set(nums)\n",
        "num_ids": 12
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # convert list into set to remove duplicates\n    nums_set = set(nums)\n    # convert set back into list\n    nums_no_dupes = list(nums_set)\n    return nums_no_dupes\n",
        "num_ids": 60
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return(1)\n",
        "num_ids": 8
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    numbers = list(set(list_data))\n    product = 1\n    for i in numbers:\n        product = product*i\n    return product\n",
        "num_ids": 38
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # get unique values in the list\n    unique_values = set(list_data)\n    # iterate through unique values in the list\n    product = 1\n    for each_value in unique_values:\n        product *= each_value\n    return product\n",
        "num_ids": 62
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if list_data.count(i) == 1:\n            unique_list.append(i)\n    return unique_list\n",
        "num_ids": 48
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    uniq_list = set(list_data)\n    prod = 1\n    for n in uniq_list:\n        prod *= n\n    return prod\n",
        "num_ids": 42
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for item in unique_numbers:\n        product = product * item\n    return product\n",
        "num_ids": 41
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    #list_data = [1, 2, 2, 3, 4, 4, 5]\n    #Output: 120\n    product = 1\n    for i in list_data:\n        product = product * i\n    print(product)\n",
        "num_ids": 57
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = set(list_data)\n    print(unique_list)\n    product = 1\n    for num in unique_list:\n        product = product * num\n    return product\n",
        "num_ids": 47
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    unique_list = []\n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n            product *= item\n    return product\n",
        "num_ids": 53
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = list(set(list_data))\n    prod = 1\n    for i in list_data:\n        prod = prod * i\n    return prod\n",
        "num_ids": 43
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14*r*(r + h)\n    return surfacearea\ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    surfacearea = 3.14*r*r\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3 * 3.14*r*r*r\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 3.14*r*r*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3 * 3.14*r*r*h\n    return volume\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l*l*l\n    return volume\ndef volume_rectangular_prism(w,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    volume = w*h*h\n    return volume\ndef volume_triangular_prism(w,h,t):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = 1/2 * w*h*t\n    return volume\ndef volume_pyramid(w,h,t):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    volume = w*h*t/3\n    return volume\n",
        "num_ids": 17
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*(r+h)\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea=2*3.14*r*h+2*3.14*r*r\n    return surfacearea\n",
        "num_ids": 31
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 3.14*r**2+2*3.14*r*h\n",
        "num_ids": 22
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*(r+h)\n",
        "num_ids": 18
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return math.pi*(r**2) + 2*math.pi*r*h\n",
        "num_ids": 28
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    # Define a function to find surface area of a cylinder\n    def surfacearea_cylinder(r,h):\n        # Finding the area of a cylinder\n        r=float(input(\"Enter the radius of the cylinder: \"))\n        h=float(input(\"Enter the height of the cylinder: \"))\n        surfacearea=2*math.pi*r*(r+h)\n        print(\"The surface area of the cylinder is: \",surfacearea)\n        print()\n    # Call the function to find the surface area of a cylinder\n    surfacearea_cylinder(r,h)\n",
        "num_ids": 140
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #pi = 3.14\n    surfacearea = 2*3.14*r*(r+h)\n    return surfacearea\n",
        "num_ids": 33
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return math.pi*r*r + 2*math.pi*r*h\n",
        "num_ids": 26
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.141592653589793\n    surface_area = (2*pi*r**2) + (2*pi*r*h)\n    return surface_area\n",
        "num_ids": 45
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n    for i in range(0,len(B)):\n        if A[i] == B[i]:\n            if len(A) == len(B):\n                return True\n            else:\n                return is_Sub_Array(A[i+1:],B[i+1:])\n        else:\n            return False\n",
        "num_ids": 95
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # A = [1, 3, 4, 5]\n    # B = [5, 1, 3, 4, 2]\n    \n    A_set = set(A)\n    B_set = set(B)\n    \n    if (A_set.issubset(B_set)):\n        return True\n    else:\n        return False\n    \n    \ndef is_Sub_Array_OR(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    \n    A_set = set(A)\n    B_set = set(B)\n    \n    if (A_set.issubset(B_set)):\n        return True\n    elif (B_set.issubset(A_set)):\n        return True\n    else:\n        return False\n    \n    \ndef Check_Sub_Array(A,B):\n    # A = [1, 3, 4, 5]\n    # B = [5, 1, 3, 4, 2]\n    A_set = set(A)\n    B_set = set(B)\n    if (A_set.issubset(B_set)):\n        return True\n    return False\n    \n    \ndef Check_Sub_Array_OR(A,B):\n    # A = [1, 3, 4, 5]\n    # B = [5, 1, 3, 4, 2]\n    A_set = set(A)\n    B_set = set(B)\n    if (A_set.issubset(B_set) or B_set.issubset(A_set)):\n        return True\n    return False\n    \n    \ndef Get_Intersection(A,B):\n    # A = [1, 3, 4, 5]\n    # B = [5, 1, 3, 4, 2]\n    A_set = set(A)\n    B_set = set(B)\n    \n    # intersection\n    # A \u2229 B\n    \n    if (len(A_set.intersection(B_set)) == 0):\n        return None\n    \n    A_set_inter = A_set.intersection(B_set)\n    \n    \n    # A \u222a B\n    \n    A_set_union = A_set.union(B_set)\n    \n    # A U B\n    \n    A_set_union_B_set = A_set.union(B_set)\n    \n    # A - B\n    # A \u2212 B\n    \n    A_set_difference = A_set.difference(B_set)\n    \n    \n    # (A U B) \\ (A \\ B)\n    \n    A_set_union_B_set_difference = A_set_union.difference(A_set_difference)\n    \n    # Symmetric Difference\n    # (A \u222a B) - (A \u2229 B)\n    \n    A_set_union_B_set_difference_2 = A_set_union_B_set.difference(A_set_inter)\n    \n    print('\\nA = ', A, '\\nB = ', B, '\\nA \u2229 B = ', A_set_inter, '\\nA \u222a B = ', A_set_union, '\\nA U B = ', A_set_union_B_set, '\\nA - B = ', A_set_difference, '\\nA U B - A \\ B = ', A_set_union_B_set_difference, '\\nA U B - (A \\ B) = ', A_set_union_B_set_difference_2)\n    \n    # is_Sub_Array\n    \n    if (Check_Sub_Array_OR(A,B)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n    \n    # symmetric_difference\n    \n    A_set_union_B_set_difference_3 = A_set_union_B_set.symmetric_difference(A_set_inter)\n    \n    print('A U B - (A \u2229 B) = ', A_set_union_B_set_difference_3)\n    \n    \n    # is_Sub_Array_OR\n    \n    if (Check_Sub_Array_OR(A,B)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n    \n    # issubset\n    \n    if (A_set.issubset(B_set)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n    \n    # issuperset\n    \n    if (A_set_union_B_set.issuperset(A_set)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n    \n    # issuperset_OR\n    \n    if (A_set_union_B_set.issuperset(A_set_union_B_set)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n    \n    # isdisjoint\n    \n    if (A_set_inter.isdisjoint(B_set)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n    # isdisjoint_OR\n    \n    if (A_set_inter.isdisjoint(B_set) or B_set.isdisjoint(A_set)):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n    \n    # intersection_update\n    \n    A_set_inter_update = A_set_inter.intersection_update(B_set)\n    \n    print('A \u2229 B = ', A_set_inter_update, '\\n')\n    \n    # intersection_update_OR\n    \n    if (A_set_inter.intersection_update(B_set) == A_set_inter or B_set.intersection_update(A_set) == B_set):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n        \n    # intersection_update_OR\n    \n    if (A_set_inter.intersection_update(B_set) == A_set_inter or B_set.intersection_update(A_set) == B_set):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n    \n    # union\n    \n    A_set_union_2 = A_set.union(B_set)\n    \n    \n    # union_update\n    \n    A_set_union_2_update = A_set_union_2.union_update(B_set)\n    \n    print('A \u222a B = ', A_set_union_2_update, '\\n')\n    \n    # union_update_OR\n    \n    if (A_set_union.union_update(B_set) == A_set_union_2 or B_set.union_update(A_set) == B_set):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n    # union_update_OR\n    \n    if (A_set_union.union_update(B_set) == A_set_union_2 or B_set.union_update(A_set) == B_set):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n    \n    \n    # update\n    \n    A_set_union_2_update_2 = A_set_union_2.update(B_set)\n    \n    print('A \u222a B = ', A_set_union_2_update_2, '\\n')\n    \n    # update_OR\n    \n    if (A_set_union.update(B_set) == A_set_union_2 or B_set.update(A_set) == B_set):\n        print('\\nYes')\n    else:\n        print('\\nNo')\n        \n    # update_OR\n    \n    if (A_set_union.update(B_set) == A_set_union_2 or B_set.update(A_set) == B_set):\n        print('\\nYes')\n    els",
        "num_ids": 1881
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m=len(A)\n    n=len(B)\n    i=0\n    j=0\n    count=0\n    while i<m and j<n:\n        if A[i]==B[j]:\n            count+=1\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if count==n:\n        return True\n    else:\n        return False\n",
        "num_ids": 99
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)<=len(B)):\n        for i in range(0,len(A)):\n            if A[i]==B[i]:\n                if i<=len(B)-1:\n                    pass\n                else:\n                    return True\n            else:\n                return False\n    else:\n        return False\n",
        "num_ids": 82
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # we are using the list comprehension to convert it to a list \n    # after applying the set function on it. \n    # (convert every element in the list to a set and then compare it)\n    \n    A = set(A) \n    B = set(B) \n    if len(A) < len(B):\n        return False\n",
        "num_ids": 85
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    if(len(A)>=len(B)):\n        for i in range(len(A)-len(B)+1):\n            j=0\n            for j in range(len(B)):\n                if(A[i+j]==B[j]):\n                    pass\n                else:\n                    break\n            if(j==len(B)-1):\n                flag=1\n                break\n    else:\n        flag=0\n    if(flag==1):\n        return True\n    else:\n        return False\n",
        "num_ids": 131
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    count = 0 \n    i = 0\n    while i < len(B) and count < len(A):\n        if A[count] == B[i]:\n            count += 1\n        i += 1\n    return count == len(A)\n",
        "num_ids": 60
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if(len(A)>=len(B)):\n        return False\n    # Create a hash table to store the counts of the occurrences of the elements of B[] in A[]\n    temp = {}\n    for ele in A:\n        if ele not in temp:\n            temp[ele] = 1\n        else:\n            temp[ele] += 1\n    # If B[] is a subsequence of A[] then the count of the occurrences of the elements of B[] should be \n    # same as the elements of B[]\n    for ele in B:\n        if ele not in temp:\n            return False\n        if temp[ele] == 0:\n            return False\n        temp[ele] -= 1\n    return True\n",
        "num_ids": 167
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # if B is Sublist of A then return True else False.\n    if B in A:\n        return True\n    else:\n        return False\n",
        "num_ids": 37
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m = len(A) \n    n = len(B) \n    for i in range(n-m+1): \n        flag = 1\n        for j in range(m): \n            if A[j]!= B[i+j]: \n                flag = 0\n                break\n        if flag == 1: \n            return 1\n    return 0\n",
        "num_ids": 89
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def fact(n):\n        if n <= 1:\n            return 1\n        return n * fact(n-1)\n",
        "num_ids": 31
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # The function will take one argument,\n    # n, which is an integer.\n    # the function will find the last digit in n!\n    # the last digit will be returned.\n",
        "num_ids": 45
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # base case \n    if n == 0: \n        return 1\n    # recursive case \n    else: \n        return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 48
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    if (n < 0): \n        print(\"Invalid input\")\n    elif (n == 0): \n        return 1\n    else: \n        for i in range(1, n + 1): \n            fact = fact * i \n        return fact % 10\n",
        "num_ids": 70
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n-1)\n",
        "num_ids": 34
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Factorial not defined for negative numbers\")\n    elif n == 0:\n        return 1\n    else:\n        return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 54
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n*last_Digit_Factorial(n-1)\n",
        "num_ids": 30
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def last_Digit_Factorial(n):\n    #write the code here.\n        factorial = 1\n        if n == 0 or n == 1:\n            return n\n        else:\n            for i in range(1, n + 1):\n                factorial = factorial * i\n            return factorial % 10\n",
        "num_ids": 77
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #start writing your code here\n    factorial = 1\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        for i in range(1, n+1):\n            factorial = factorial*i\n        return factorial%10\n",
        "num_ids": 72
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0: \n        print(\"Invalid Number! Number should be greater than 0\")\n    else: \n        factorial = 1\n        while(n!= 0): \n            factorial = factorial * n \n            n = n - 1\n        return int(factorial % 10) \n",
        "num_ids": 73
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [*list1, *list2, *list3]\n",
        "num_ids": 17
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list1,list2,list3 = list1[::-1],list2[::-1],list3[::-1]\n    return [val for pair in zip(list1,list2,list3) for val in pair]\n",
        "num_ids": 58
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    print('\\n')\n    print('Interleaving the 3 lists of the same length into a flat list')\n    print('\\n')\n    list3 = list(zip(list1, list2, list3))\n    list3.sort()\n    print(list3)\n",
        "num_ids": 67
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = [0 for _ in range(len(list1))]\n    counter = 0\n    for i in range(len(list1)):\n        flat_list[i] = list1[counter]\n        flat_list[i+len(list1)] = list2[counter]\n        flat_list[i+(2*len(list1))] = list3[counter]\n        counter += 1\n    return flat_list\n",
        "num_ids": 105
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n",
        "num_ids": 58
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_z = []\n    for i in range(len(list1)):\n        list_z.append(list1[i])\n        list_z.append(list2[i])\n        list_z.append(list3[i])\n",
        "num_ids": 61
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [e1 for (e1,e2,e3) in zip(list1,list2,list3)]\n",
        "num_ids": 31
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] + list2[i] + list3[i] for i in range(len(list1))]\n",
        "num_ids": 34
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(chain.from_iterable(zip(list1, list2, list3)))\n",
        "num_ids": 25
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [item for t in zip(list1,list2,list3) for item in t]\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n",
        "num_ids": 24
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for i in test_tup1:\n        if i not in test_tup2:\n            dissimilar_elems.append(i)\n    for j in test_tup2:\n        if j not in test_tup1:\n            dissimilar_elems.append(j)\n    return dissimilar_elems\n",
        "num_ids": 92
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (1,2,3)\n    test_tup2 = (3,2,1)\n    list1 = []\n    list2 = []\n    for i in test_tup1:\n        list1.append(i)\n    for j in test_tup2:\n        list2.append(j)\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n            list2.remove(i)\n    return list1, list2\n",
        "num_ids": 126
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    dissimilar_tuple = ()\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_tuple = dissimilar_tuple + (test_tup1[i],)\n            \n    return dissimilar_tuple\n    \n    \n    \n    \nif __name__ == '__main__':\n    \n    tuples = (\n    ('a', 'a', 'b'),\n    ('b', 'b', 'c'),\n    ('c', 'd', 'e'),\n    ('f', 'f', 'g'),\n    ('h', 'i', 'j'),\n    )\n    \n    test_tup1 = ('a', 'b', 'c')\n    test_tup2 = ('d', 'e', 'f')\n    \n    print('The dissimilar elements in the tuples are:')\n    print(find_dissimilar(tuples, test_tup1, test_tup2)",
        "num_ids": 250
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for item1 in test_tup1:\n        if item1 not in test_tup2:\n            dissimilar.append(item1)\n    for item2 in test_tup2:\n        if item2 not in test_tup1:\n            dissimilar.append(item2)\n    return dissimilar\n",
        "num_ids": 86
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #return set(test_tup1).difference(set(test_tup2))\n    test_tup3 = set(test_tup1).symmetric_difference(test_tup2)\n    return tuple(test_tup3)\n",
        "num_ids": 65
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # for tup1 in test_tup1:\n    #     for tup2 in test_tup2:\n    #         if tup1!= tup2:\n    #             print(tup1, tup2)\n    pass\n    \nif __name__ == '__main__':\n    test_tup1 = (1, 2, 3, 4, 5, 6)\n    test_tup2 = (5, 8, 9, 10, 13, 16)\n    find_dissimilar(test_tup1, test_tup2",
        "num_ids": 135
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    else:\n        return tuple([tup for tup in test_tup1 if tup not in test_tup2])\n",
        "num_ids": 57
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1).difference(set(test_tup2)))\n",
        "num_ids": 26
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissim_list = list(set(test_tup1).difference(set(test_tup2)))\n    return dissim_list\n",
        "num_ids": 38
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Write your code here\n    return even_fnc(test_tuple)\n",
        "num_ids": 22
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return even_fnc(test_tuple)\n",
        "num_ids": 15
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(element for index, element in enumerate(test_tuple) if even_fnc(index))\n",
        "num_ids": 29
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = ()\n    for item in test_tuple:\n        if even_fnc(item):\n            result += (item,)\n    return result\n",
        "num_ids": 38
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # replace the code below\n    return tuple(map(even_fnc, test_tuple))\n",
        "num_ids": 26
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(map(even_fnc, test_tuple))\n",
        "num_ids": 19
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    pass # Remove this line\n",
        "num_ids": 9
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def is_even(x):\n        return x % 2 == 0\n    result = list(filter(lambda x: is_even(x) == True, test_tuple))\n    return tuple(result)\n    \nprint(even_ele((1,2,3,4,5,6,7,8), lambda x: x % 2 == 0))\n",
        "num_ids": 85
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return (even_fnc(ele) for ele in test_tuple)\n",
        "num_ids": 21
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple) and all(isinstance(el, tuple) for el in test_tuple):\n        return tuple(tuple(el for el in tup if even_fnc(el)) for tup in test_tuple)\n    else:\n        raise TypeError(\"Invalid tuple\")\n",
        "num_ids": 77
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = (b * s)/2\n    return s\n",
        "num_ids": 16
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # function body\n    surface_area = b*s*s + 2*b*s*s\n    return surface_area\n",
        "num_ids": 32
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = b * s * 0.5\n    print(surfaceArea)\n",
        "num_ids": 21
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    SA = b*s*(0.5)\n    return SA\n    \n    \ndef vol_cylinder(r,h):\n    '''\n    Write a python function to find the volume of a cylinder. \n    '''\n    vol_cylinder = 3.1415926535*(r*r)*h\n    return vol_cylinder\n",
        "num_ids": 29
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area= b*b*3.14+s*s*3.14\n    return area\ndef surface_Area_of_cone(r,h):\n    '''\n    Write a python function to find the surface area of a cone with a given radius and height.\n    '''\n    area=3.14*(r*r+r*h+0.5*h*h)\n    return area\ndef volume_of_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    volume=4.0/3.0*3.14*(r*r*r)\n    return volume\ndef volume_of_cylinder(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    volume=3.14*(r*r)*h\n    return volume\ndef volume_of_cube(a):\n    '''\n    Write a python function to find the volume of a cube with a given edge length.\n    '''\n    volume=a*a*a\n    return volume\ndef volume_of_cone(r,h):\n    '''\n    Write a python function to find the volume of a cone with a given radius and height.\n    '''\n    volume=1.0/3.0*3.14*(r*r*h)\n    return volume\ndef volume_of_prism(a,b,c):\n    '''\n    Write a python function to find the volume of a prism with a given edge lengths.\n    '''\n    volume=a*b*c\n    return volume\ndef surface_area_of_cube(a):\n    '''\n    Write a python function to find the surface area of a cube with a given edge length.\n    '''\n    area=6*a*a\n    return area\ndef volume_of_prism(a,b,c):\n    '''\n    Write a python function to find the volume of a prism with a given edge lengths.\n    '''\n    volume=a*b*c\n    return volume\ndef volume_of_cuboid(a,b,c):\n    '''\n    Write a python function to find the volume of a cuboid with a given edge lengths.\n    '''\n    volume=a*b*c\n    return volume\ndef cylinder_volume(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    volume=3.14*(r*r)*h\n    return volume\ndef cube_volume(a):\n    '''\n    Write a python function to find the volume of a cube with a given edge length.\n    '''\n    volume=a*a*a\n    return volume\ndef cone_volume(r,h):\n    '''\n    Write a python function to find the volume of a cone with a given radius and height.\n    '''\n    volume=1.0/3.0*3.14*(r*r*h)\n    return volume\ndef pyramid_volume(b,h):\n    '''\n    Write a python function to find the volume of a pyramid with a given base and height.\n    '''\n    volume=1.0/3.0*3.14*(b*b*h)\n    return volume\ndef cone_surface_area(r,h):\n    '''\n    Write a python function to find the surface area of a cone with a given radius and height.\n    '''\n    area=3.14*(r*r+r*h+0.5*h*h)\n    return area\ndef cylinder_surface_area(r,h):\n    '''\n    Write a python function to find the surface area of a cylinder with a given radius and height.\n    '''\n    area=2*3.14*(r*r)+3.14*r*h\n    return area\ndef surface_area_of_cube(a):\n    '''\n    Write a python function to find the surface area of a cube with a given edge length.\n    '''\n    area=6*a*a\n    return area\ndef surface_area_of_cylinder(r,h):\n    '''\n    Write a python function to find the surface area of a cylinder with a given radius and height.\n    '''\n    area=2*3.14*(r*r)+3.14*r*h\n    return area\ndef surface_area_of_pyramid(a,b,h):\n    '''\n    Write a python function to find the surface area of a pyramid with a given base and height.\n    '''\n    area=2*3.14*(a*b+a*h+0.5*b*h)\n    return area\ndef pyramid_surface_area(b,h):\n    '''\n    Write a python function to find the surface area of a pyramid with a given base and height.\n    '''\n    area=2*3.14*(b*b+b*h+0.5*h*h)\n    return area\ndef prism_surface_area(a,b,c):\n    '''\n    Write a python function to find the surface area of a prism with a given edge lengths.\n    '''\n    area=6*(a*b+a*c+b*c)\n    return area\ndef surface_area_of_cuboid(a,b,c):\n    '''\n    Write a python function to find the surface area of a cuboid with a given edge lengths.\n    '''\n    area=6*(a*b+a*c+b*c)\n    return area\ndef surface_area_of_cylinder(r,h):\n    '''\n    Write a python function to find the surface area of a cylinder with a given radius and height.\n    '''\n    area=2*3.14*(r*r)+3.14*r*h\n    return area\ndef surface_area_of_sphere(r):\n    '''\n    Write a python function to find the surface area of a sphere with a given radius.\n    '''\n    area=4*3.14*(r*r)\n    return area\ndef surface_area_of_cone(r,h):\n    '''\n    Write a python function to find the surface area of a cone with a given radius and height.\n    '''\n    area=3.14*(r*r+r*h+0.5*h*h)\n    return area\ndef surface_area_of_cube(a):\n    '''\n    Write a python function to find the surface area of a cube with a given edge length.\n    '''\n    area=6*a*a\n    return area\ndef volume_of_cylinder(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    volume=3.14*(r*r)*h\n    return volume\ndef volume_of_sphere(r):\n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    volume=4.0/3.0*3.14*(r*r*r)\n    return volume\ndef volume_of_cone(r,h):\n    '''\n    Write a python function to find the volume of a cone with a given radius and height.\n    '''\n    volume=1.0/3.0*3.14*(r*r*h)\n    return volume\ndef volume_of_prism(a,b,c):\n    '''\n    Write a python function to find the volume of a prism with a given edge lengths.\n    '''\n    volume=a*b*c\n    return volume\ndef volume_of_cuboid(a,b,c):\n    '''\n    Write a python function to find the volume of a cuboid with a given edge lengths.\n    '''\n    volume=a*b*c\n    return volume\ndef volume_of_pyramid(b,h):\n    '''\n    Write a python function to find the volume of a pyramid with a given base and height.\n    '''\n    volume=1.0/3.0*3.14*(b*b*h)\n    return volume\ndef volume_of_cylinder(r,h):\n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    volume=3.14*",
        "num_ids": 9
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s*1.5)\n",
        "num_ids": 14
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    A=(b*s) + (b*s/2) + (b*s*s/2)\n    return A\n    \ndef volume_Cube(l): \n    '''\n    Write a python function to find the volume of a cube with a given edge length.\n    '''\n    V=l**3\n    return V\n    \ndef volume_Cone(r,h): \n    '''\n    Write a python function to find the volume of a cone with a given radius and height.\n    '''\n    V=1/3*(r**2)*h\n    return V\n    \ndef volume_Sphere(r): \n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    V=(4/3)*(r**3)*(22/7)\n    return V\n    \ndef volume_Tetrahedron(l): \n    '''\n    Write a python function to find the volume of a tetrahedron with a given edge length.\n    '''\n    V=1/3*(l**3)\n    return V\n    \ndef volume_Prism(l,h): \n    '''\n    Write a python function to find the volume of a prism with a given base edge length and height.\n    '''\n    V=l*h\n    return V\n    \ndef volume_Cylinder(r,h): \n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    V=(2*3.14*r*r*h)+(2*3.14*r*r)\n    return V\n    \ndef area_Triangle(a,b,c): \n    '''\n    Write a python function to find the area of a triangle with three given sides.\n    '''\n    s=(a+b+c)/2\n    A=(s*(s-a)*(s-b)*(s-c))**(1/2)\n    return A\n    \ndef area_Trapezium(a,b,h): \n    '''\n    Write a python function to find the area of a trapezium with four given sides and a height.\n    '''\n    A=(a+b)*h/2\n    return A\n    \ndef area_Square(a): \n    '''\n    Write a python function to find the area of a square with a given side length.\n    '''\n    A=a**2\n    return A\n    \ndef area_Rectangle(a,b): \n    '''\n    Write a python function to find the area of a rectangle with two given side lengths.\n    '''\n    A=a*b\n    return A\n    \ndef area_Rhombus(a,b): \n    '''\n    Write a python function to find the area of a rhombus with two given side lengths.\n    '''\n    A=1/2*(a*b)\n    return A\n    \ndef area_Parallelogram(a,b): \n    '''\n    Write a python function to find the area of a parallelogram with two given side lengths.\n    '''\n    A=a*b\n    return A\n    \ndef area_Trapezium(a,b,h): \n    '''\n    Write a python function to find the area of a trapezium with four given sides and a height.\n    '''\n    A=(a+b)*h/2\n    return A\n    \ndef area_Triangle_Heron(a,b,c): \n    '''\n    Write a python function to find the area of a triangle with three given side lengths using the Heron's Formula.\n    '''\n    s=(a+b+c)/2\n    A=(s*(s-a)*(s-b)*(s-c))**(1/2)\n    return A\n    \ndef area_Triangle_Right_Angle(a,b,c): \n    '''\n    Write a python function to find the area of a triangle with three given side lengths using the right angle triangle formula.\n    '''\n    s=(a+b+c)/2\n    A=s*(s-a)*(s-b)*(s-c)**(1/2)\n    return A\n    \ndef area_Trapezium_Heron(a,b,h): \n    '''\n    Write a python function to find the area of a trapezium with four given sides and a height using the Heron's Formula.\n    '''\n    s=(a+b)*h/2\n    A=(s*(s-a)*(s-b)*(s-h))**(1/2)\n    return A\n    \ndef area_Trapezium_Right_Angle(a,b,h): \n    '''\n    Write a python function to find the area of a trapezium with four given sides and a height using the right angle triangle formula.\n    '''\n    A=(a*b+b*h+h*a)/2\n    return A\n",
        "num_ids": 23
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s*1.5 + b*s*b + b*(s**2)/2\n",
        "num_ids": 27
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*b)+(b*s)\n",
        "num_ids": 15
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(b*s)\n",
        "num_ids": 10
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        print('Empty')\n    else:\n        print('Not Empty')\n    return\n",
        "num_ids": 33
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not dict1\n",
        "num_ids": 8
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return not dict1\n",
        "num_ids": 8
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")\n",
        "num_ids": 36
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return 'The dictionary is empty'\n    return 'The dictionary is not empty'\n",
        "num_ids": 28
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n",
        "num_ids": 20
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('Empty')\n        return True\n    else:\n        print('Not empty')\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return False\n    else:\n        return True\n",
        "num_ids": 21
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Base Cases\n    if num <= 1:\n        return 1\n",
        "num_ids": 18
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    import math\n    def binomial_coefficient(n, r):\n        '''\n        Returns binomial coefficient.\n        '''\n        return math.factorial(n) // (math.factorial(r) * math.factorial(n - r))\n    return binomial_coefficient(2*num, num)//(num+1)\n",
        "num_ids": 52
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num==0:\n        return 1\n    res=0\n    for i in range(num):\n        res+=catalan_number(i)*catalan_number(num-i-1)\n    return res",
        "num_ids": 52
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 1\n    return num*(2*catalan_number(num-1) - catalan_number(num-2))\n",
        "num_ids": 51
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    return factorial(num) // (factorial(num-2) * factorial(2))\n",
        "num_ids": 25
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0:\n        return \"Invalid input\"\n",
        "num_ids": 16
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        prev = 1\n        curr = 1\n        for i in range(2, num+1):\n            sum_of_prev_curr = prev + curr\n            prev = curr\n            curr = sum_of_prev_curr\n        return curr\n",
        "num_ids": 92
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    result = [1]\n    for i in range(1, n+1):\n        result.append(sum([result[j] * result[i-j] for j in range(i)]))\n    return result[n]\n",
        "num_ids": 61
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num > 1:\n        previous = 1\n        current = 1\n        for i in range(1, num):\n            current = current * (2*(2*i+1)-1)/(i+1)\n            previous, current = current, previous + current\n        return current\n",
        "num_ids": 94
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    \n    result = 0\n    for i in range(num):\n        result += catalan_number(i) * catalan_number(num-i-1)\n",
        "num_ids": 56
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # initialize a list for adverbs\n    adverbs = []\n    # define patterns for adverbs\n    pattern = r\"([a-z]*)ly$\"\n    for m in re.finditer(pattern, text.lower()):\n        adverbs.append((m.start(), m.end(), m.group(1)))\n    return adverbs\n",
        "num_ids": 83
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # We split the text by words and keep track of the position of each word\n    words = text.split()\n    positions = [i for i in range(len(words))]\n",
        "num_ids": 45
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Split the text into words\n    words = text.split()\n    \n    # Extract the adverbs\n    adverbs = [word for word in words if re.search(r\"ly$\", word)]\n    \n    # For each adverb, find the first match and return the position\n    for adverb in adverbs:\n        first_match = re.search(r\"ly$\", adverb)\n        if first_match:\n            return(text.index(adverb, first_match.start()))\n",
        "num_ids": 120
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    text = text.replace('.','')\n    lst = list(text)\n    for i in range(len(lst)):\n        if lst[i] in ['ly']:\n            lst[i] ='re'\n            lst.insert(i,'ly')\n            break\n    return ''.join(lst)\n    ",
        "num_ids": 84
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb = ''\n    start = 0\n    end = 0\n    pos = []\n    for i in range(len(text)):\n        for word in text:\n            if word[-2:] == \"ly\" and word[0:3] == \"anti\":\n                adverb = word\n                start = text.find(word)\n                end = start + len(word)\n                pos.append(start)\n                pos.append(end)\n    return adverb, pos\n",
        "num_ids": 114
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.search(r'ly+', text)\n",
        "num_ids": 16
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # check if text is string\n    if not isinstance(text, str):\n        return None\n    # look for the adverbs ending with ly and their positions\n    result = re.finditer(r'(?<![A-Za-z])ly(?![A-Za-z])', text)\n    # return the first adverb ending with ly\n    return next(result, None).group()\n",
        "num_ids": 98
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\w+ly', text)\n    if adverbs:\n        print(f'First adverb is: {adverbs[0]}')\n        print(f'The adverb is found at the following indexes: {adverbs[0]}')\n    else:\n        print('No adverbs ending with ly found.')\n",
        "num_ids": 85
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #pattern = r'(ly+|ly\\-?)[a-z]*'\n    pattern = r'ly+'\n    match = re.finditer(pattern, text)\n    #print(match)\n    return match\n",
        "num_ids": 56
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = re.findall(r'(\\w+)ly$',text)\n    return result\n",
        "num_ids": 25
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pq=[]\n    heapq.heapify(pq)\n    for i in items:\n        heapq.heappush(pq,(-items[i],i))\n        if len(pq)>n:\n            heapq.heappop(pq)\n    print(pq)\n    return [heapq.heappop(pq)[1] for _ in range(len(pq))]\n",
        "num_ids": 107
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Get the top n items in an array\n    # O(nlog(n))\n    heap = []\n    for item in items:\n        heapq.heappush(heap,(-item[1],item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    # Get the n largest items in a list\n    # O(nlog(n))\n    # heap = heapq.nlargest(n,items,key=lambda x:x[1])\n    return [item[1] for item in heap]\n",
        "num_ids": 138
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    return sorted(items,key=lambda x:x[1],reverse=True)[:n]\n",
        "num_ids": 25
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # print(items)\n    # items.sort(key=lambda x: x[1], reverse=True)\n    # return [items[i][0] for i in range(n)]\n    maxHeap = []\n    # initialise heap with first n items\n    for item in items[:n]:\n        heapq.heappush(maxHeap, (-item[1], item[0]))\n",
        "num_ids": 98
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i,item in enumerate(items):\n        heapq.heappush(heap,(item[1],i,item))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [items[i][2] for i in heapq.nlargest(n, range(len(items)), key=lambda x: heap[x][0])]\n",
        "num_ids": 105
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x:x[1],reverse=True)\n    print(items[:n])\n    # return items[:n]\n",
        "num_ids": 39
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)>n:\n        heapq.nlargest(n,items)\n    else:\n        return heapq.nlargest(len(items),items)\n",
        "num_ids": 44
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for i,item in enumerate(items):\n        price, name = item\n        heapq.heappush(heap,(-price,i,name))\n    return [heapq.heappop(heap)[-1] for i in range(n)]\n",
        "num_ids": 72
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, (-item[1],item))\n        else:\n            heapq.heappushpop(heap, (-item[1],item))\n    return [item[1] for item in heap]\n",
        "num_ids": 84
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    a = l[0:n]\n    b = l[n:]\n    return a + b\n",
        "num_ids": 26
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[0:n] + l[n:len(l)]\n",
        "num_ids": 20
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n",
        "num_ids": 17
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first = l[:n]\n    last = l[n:]\n    return first + last\n",
        "num_ids": 25
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n",
        "num_ids": 15
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n    \n    \ndef join_Arr(l, n):\n    '''\n    Write a python function to take the nth element from the end of a list and add it to the end of the first part of the list.\n    '''\n    return l[:n] + [l[n]] + l[n:]\n    \n    \ndef shuffle_Arr(l):\n    '''\n    Write a python function to shuffle a list\n    '''\n    \n    n = len(l)\n    \n    for i in range(n):\n        r = random.randrange(0,n)\n        (l[i], l[r]) = (l[r], l[i])\n        \n        \ndef remove_duplicates(l):\n    '''\n    Write a python function to remove duplicate elements from a list\n    '''\n    \n    return list(set(l))\n    \n    \ndef binary_search(l, value):\n    '''\n    Write a python function to find the position of value in the list\n    '''\n    \n    n = len(l)\n    \n    l = remove_duplicates(l)\n    \n    low = 0\n    high = n-1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if l[mid] < value:\n            low = mid + 1\n        elif l[mid] > value:\n            high = mid - 1\n        else:\n            return mid\n            \n    return -1\n    \n    \ndef count_recursively(l, value):\n    '''\n    Write a python function to count the number of times the value appears in a list using recursion\n    '''\n    \n    n = len(l)\n    \n    if n == 0:\n        return 0\n    else:\n        if l[0] == value:\n            return 1 + count_recursively(l[1:], value)\n        else:\n            return count_recursively(l[1:], value)\n            \n            \ndef copy_list(l):\n    '''\n    Write a python function to copy a list\n    '''\n    \n    l_copy = []\n    \n    for i in l:\n        l_copy.append(i)\n        \n    return l_copy\n        \n    \ndef is_sorted(l):\n    '''\n    Write a python function to check if a list is sorted.\n    '''\n    \n    n = len(l)\n    \n    for i in range(n-1):\n        if l[i] > l[i+1]:\n            return False\n            \n    return True\n    \n    \ndef is_anagram(str1, str2):\n    '''\n    Write a python function to check if two words are anagrams.\n    '''\n    \n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    str1 = ''.join(sorted(str1))\n    str2 = ''.join(sorted(str2))\n    \n    return str1 == str2\n    \n    \ndef has_duplicates(l):\n    '''\n    Write a python function to check if a list contains duplicates.\n    '''\n    \n    l = remove_duplicates(l)\n    \n    n = len(l)\n    \n    if n == 1:\n        return False\n    \n    for i in range(n-1):\n        if l[i] == l[i+1]:\n            return True\n            \n    return False\n    \n    \ndef is_rotation(l1, l2):\n    '''\n    Write a python function to check if a list is a rotation of another list.\n    '''\n    \n    n1 = len(l1)\n    n2 = len(l2)\n    \n    if n1!= n2:\n        return False\n    \n    n = n1\n    \n    for i in range(n):\n        if l1[i]!= l2[i]:\n            return False\n            \n    for j in range(n):\n        if l1[j]!= l2[n-j-1]:\n            return False\n            \n    return True\n    \n    \ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth element in the fibonacci sequence.\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \n        \ndef reverse_arr(l):\n    '''\n    Write a python function to reverse a list.\n    '''\n    \n    n = len(l)\n    \n    for i in range(n//2):\n        (l[i], l[n-i-1]) = (l[n-i-1], l[i])\n    \n    \ndef reverse_words(str):\n    '''\n    Write a python function to reverse the words in a string.\n    '''\n    \n    s = str.split()\n    s = reverse_arr(s)\n    \n    return''.join(s)\n    \n    \ndef string_compression(str):\n    '''\n    Write a python function to compress a string.\n    '''\n    \n    result = ''\n    count = 1\n    \n    for i in range(len(str)):\n        if i!= 0 and str[i]!= str[i-1]:\n            result += str[i-1] + str(count)\n            count = 1\n        else:\n            count += 1\n    \n    if count > 1:\n        result += str[len(str)-1] + str(count)\n    \n    if len(result) >= len(str):\n        return str\n    else:\n        return result\n        \n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a matrix 90 degrees.\n    '''\n    \n    n = len(matrix)\n    \n    for i in range(n//2):\n        for j in range(i, n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[j][n-i-1]\n            matrix[j][n-i-1] = matrix[n-i-1][n-j-1]\n            matrix[n-i-1][n-j-1] = matrix[n-j-1][i]\n            matrix[n-j-1][i] = temp\n            \n            \ndef can_construct(word, arr):\n    '''\n    Write a python function to check if a string can be made by concatenating elements in an array.\n    '''\n    \n    if len(word) == 0:\n        return True\n        \n    if len(arr) == 0:\n        return False\n        \n    for i in arr:\n        if word.startswith(i):\n            if can_construct(word[len(i):], arr):\n                return True\n    \n    return False\n            \n            \ndef create_array(n):\n    '''\n    Write a python function to create an array of length n.\n    '''\n    \n    return [0 for i in range(n)]\n    \n    \ndef find_missing_numbers(arr1, arr2):\n    '''\n    Write a python function to find the missing numbers in two arrays.\n    '''\n    \n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if n1!= n2:\n        return 'Invalid'\n    \n    arr1 = remove_duplicates(arr1)\n    arr2 = remove_duplicates(arr2)\n    \n    arr1.sort()\n    arr2.sort()\n    \n    for i in range(n1):\n        if arr1[i]!= arr2[i]:\n            return arr1[i]\n        \n        \ndef find_missing_numbers_v2(arr1, arr2):\n    '''\n    Write a python function to find the missing numbers in two arrays.\n    '''\n    \n    return sorted(set(arr1) - set(arr2))\n    \n    \ndef find_missing_numbers_v3(arr1, arr2):\n    '''\n    Write a python function to find the missing number",
        "num_ids": 12
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    split_arr = []\n    for i in range(0, len(l), n):\n        split_arr.append(l[i:i + n])\n    return split_arr\n",
        "num_ids": 46
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    if type(listx) == list:\n        return tuple(listx)\n    else:\n        return listx\n",
        "num_ids": 30
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    try:\n        return tuple(listx)\n    except ValueError:\n        return tuple()\n",
        "num_ids": 25
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n",
        "num_ids": 19
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "num_ids": 10
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return (nums[-1]-nums[0])\n    \ndef avg(nums):\n    '''\n    Write a Python function to find the average value in a list.\n    '''\n    nums = sum(nums)/len(nums)\n    return nums\n",
        "num_ids": 22
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    \n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 26
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = min(nums)\n    max_val = max(nums)\n    diff = max_val - min_val\n    return diff\n",
        "num_ids": 39
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    n = nums[0]\n    for i in nums:\n        if i > n:\n            n = i\n    nums.remove(n)\n",
        "num_ids": 40
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return 0\n    return max(nums) - min(nums)\n",
        "num_ids": 27
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return nums[-1] - nums[0]\n",
        "num_ids": 24
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    minval = nums[0]\n    maxval = nums[0]\n    for num in nums:\n        if num < minval:\n            minval = num\n        elif num > maxval:\n            maxval = num\n    return maxval - minval\n",
        "num_ids": 67
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "num_ids": 16
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares_list = []\n    for x in range(a, b+1):\n        if math.sqrt(x) == int(math.sqrt(x)):\n            squares_list.append(x)\n",
        "num_ids": 55
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    a, b = int(a), int(b)\n    for i in range(a, b+1):\n        if int(i**0.5)**2 == i:\n            print(i)\nperfect_squares(1, 250)\n",
        "num_ids": 61
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if math.sqrt(i) == int(math.sqrt(i)):\n            perfect_squares.append(i)\n    return perfect_squares\n",
        "num_ids": 62
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    possible_squares = []\n    for i in range(a,b+1):\n        if i*i < b:\n            if i*i == a:\n                possible_squares.append(i)\n            elif i*i < a:\n                possible_squares.append(i*i)\n            elif i*i > b:\n                break\n    return possible_squares\n",
        "num_ids": 98
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    #return [i**2 for i in range(a, b+1) if i**2 < b]\n    \n    #return [i**2 for i in range(a, b+1) if (i**2) % 2 == 0]\n    \n    return [i**2 for i in range(a, b+1) if all(j in [0, i**2] for j in divisors(i))]\n    \n    # return [i**2 for i in range(a, b+1) if all(j in [0, i**2] for j in divisors(i))]\n",
        "num_ids": 145
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # a = 3\n    # b = 7\n    # ans = [4, 5, 6, 8, 9]\n    res = []\n    for i in range(a,b+1):\n        r = int(i**(1/2))\n        if r**2 == i:\n            res.append(i)\n    return res\n",
        "num_ids": 82
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a <= 0 or b <= 0:\n        return None\n    else:\n        return b**2 - a**2 + perfect_squares(a+1, b)\n",
        "num_ids": 43
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Your code here\n    pass\n",
        "num_ids": 11
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a==b:\n        return 0\n    if a>b:\n        a, b = b, a\n    n = int(math.sqrt(b))\n    count = 0\n    while n**2<=b:\n        count+=1\n        n+=1\n    return count-1\n",
        "num_ids": 73
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a % 2 == 1:\n        a += 1\n    if b % 2 == 1:\n        b += 1\n",
        "num_ids": 46
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.rect(x,y)\n    return r\ndef main():\n    '''\n    test function\n    '''\n    x=float(input(\"Enter value of x: \"))\n    y=float(input(\"Enter value of y: \"))\n    r=polar_rect(x,y)\n    print(f\"Rectangular coordinates: {r}\")\nif __name__=='__main__':\n    main(",
        "num_ids": 73
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\n",
        "num_ids": 47
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x\n    theta=y\n    x1=r*cmath.cos(theta)\n    y1=r*cmath.sin(theta)\n    return (x1,y1)\n",
        "num_ids": 53
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    p = cmath.polar(complex(x,y))\n    print(p)\n    return p[0]*(p[1]**-1)\n",
        "num_ids": 41
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    #z = math.sqrt(x**2+y**2)\n    z = (x**2+y**2)**(1/2)\n    a = (z/x)\n    b = (z/y)\n    return [z, a, b]\n",
        "num_ids": 67
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    \n    r = x\n    theta = y\n    # if theta >=0 and theta <=360 and r >=0:\n    if theta >360 or theta <0 or r<0:\n        return None\n    else:\n        x = r*cos(theta)\n        y = r*sin(theta)\n        return (x,y)\n    \n    \ndef test_polar_rect():\n    '''\n    Test the polar_rect function.\n    '''\n    x,y = polar_rect(2,90)\n    print(x,y)\n    ",
        "num_ids": 25
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    radius = x\n    theta = y\n    return radius*cmath.rect(1,theta)\n",
        "num_ids": 28
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y\n",
        "num_ids": 47
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.rect(x,y)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x,y)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef cartesian_polar(x,y):\n    '''\n    Write a function to convert cartesian coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_cartesian(x,y):\n    '''\n    Write a function to convert polar coordinates to cartesian coordinates.\n    '''\n    return cmath.polar(x,y)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return cmath.polar(x)\ndef cartesian_rect(x,y):\n    '''\n    Write a function to convert cartesian coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x)\ndef rect_cartesian(x,y):\n    '''\n    Write a function to convert rectangular coordinates to cartesian coordinates.\n    '''",
        "num_ids": 1
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = int(x[0])\n    angle = int(x[2])\n    return [int(r*math.cos(math.radians(angle))+y[0]),int(r*math.sin(math.radians(angle))+y[1])]\ndef get_dist(x,y):\n    return math.sqrt((x[0]-y[0])**2+(x[1]-y[1])**2)\ndef check_cond(x,y):\n    if x[0]>y[0]:\n        temp = x\n        x = y\n        y = temp\n    if x[1]>y[1]:\n        temp = x\n        x = y\n        y = temp\n    return [x,y]\ndef find_last(x,y,k):\n    if x==y:\n        return y\n    if get_dist(x,y)>=k:\n        return y\n    while True:\n        if x[0]==y[0]:\n            if x[1]>y[1]:\n                y = [x[0],x[1]-1]\n            else:\n                y = [x[0],x[1]+1]\n        elif x[1]==y[1]:\n            if x[0]>y[0]:\n                y = [x[0]-1,x[1]]\n            else:\n                y = [x[0]+1,x[1]]\n        else:\n            m = (y[1]-x[1])/(y[0]-x[0])\n            c = y[1]-m*y[0]\n            if x[0]<y[0]:\n                if m>0:\n                    if x[1]>c:\n                        y = [x[0],x[1]-1]\n                    else:\n                        y = [x[0],x[1]+1]\n                else:\n                    if x[1]<c:\n                        y = [x[0],x[1]+1]\n                    else:\n                        y = [x[0],x[1]-1]\n            else:\n                if m>0:\n                    if x[1]<c:\n                        y = [x[0],x[1]+1]\n                    else:\n                        y = [x[0],x[1]-1]\n                else:\n                    if x[1]>c:\n                        y = [x[0],x[1]-1]\n                    else:\n                        y = [x[0],x[1]+1]\n        if y==x:\n            break\n        x = y\n        y = [x[0]+k,x[1]]\n        y = check_cond(x,y)\n    return y\ndef check_point(x,y):\n    if x[0]>=y[0] and x[1]>=y[1] and x[0]<=y[0]+k and x[1]<=y[1]+k:\n        return True\n    return False\ndef rect_to_polar(x,y):\n    r = int(math.sqrt((x[0]-y[0])**2+(x[1]-y[1])**2))\n    if x[0]==y[0]:\n        if x[1]>y[1]:\n            angle = 270\n        else:\n            angle = 90\n    elif x[1]==y[1]:\n        if x[0]>y[0]:\n            angle = 0\n        else:\n            angle = 180\n    else:\n        m = (y[1]-x[1])/(y[0]-x[0])\n        c = y[1]-m*y[0]\n        if x[0]>y[0]:\n            if m>0:\n                angle = math.degrees(math.atan(m))+90\n            else:\n                angle = math.degrees(math.atan(m))+270\n        else:\n            if m>0:\n                angle = math.degrees(math.atan(m))\n            else:\n                angle = math.degrees(math.atan(m))+180\n    return [r,angle]\ndef polar_to_rect(r,angle):\n    if angle>180:\n        angle = angle-360\n    angle = math.radians(angle)\n    x = int(r*math.cos(angle)+k/2)\n    y = int(r*math.sin(angle)+k/2)\n    return [x,y]\ndef solution(dimensions, your_position, guard_position, distance):\n    '''\n    Write a function to return the shortest distance from the point (0,0) to the closest point in a rectangle.\n    '''\n    l = int(dimensions[0])\n    b = int(dimensions[1])\n    your_pos = [your_position[0],your_position[1]]\n    guard_pos = [guard_position[0],guard_position[1]]\n    k = int(distance)\n    your_pos = [your_pos[0]-k,your_pos[1]-k]\n    guard_pos = [guard_pos[0]-k,guard_pos[1]-k]\n    min_dist = k+1\n    for i in range(0,b+1):\n        for j in range(0,l+1):\n            your_pos = check_cond(your_pos,[i,j])\n            if check_point(your_pos,guard_pos):\n                return [i,j]\n            p = rect_to_polar(your_pos,guard_pos)\n            p = find_last(p,guard_pos,k)\n            if p[0]<min_dist:\n                min_dist = p[0]\n    return [min_dist,int(min_dist/k)]\n",
        "num_ids": 265
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n    \ndef list_Swap(newList): \n    '''\n    Write a python function to convert a list of characters into a string.\n    '''\n    string = \"\"\n    for item in newList:\n        string += item\n    return string\n",
        "num_ids": 24
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList",
        "num_ids": 47
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n    \ndef main():\n    '''\n    Write a python function to reverse a string.\n    '''\n    myString=\"Hello\"\n    print(reverseString(myString))\n    \nif __name__ == '__main__':\n    main()\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(reverseList(myList))\n    \ndef reverseList(myList):\n    myList.reverse()\n    return myList\n    \ndef main():\n    '''\n    Write a python function to swap first and last elements of a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(swapList(myList))\n    \ndef swapList(myList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    myList[0],myList[-1]=myList[-1],myList[0]\n    return myList\n    \ndef main():\n    '''\n    Write a python function to reverse a string.\n    '''\n    myString=\"Hello\"\n    print(reverseString(myString))\n    \nif __name__ == '__main__':\n    main()\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(reverseList(myList))\n    \ndef reverseList(myList):\n    myList.reverse()\n    return myList\n    \ndef main():\n    '''\n    Write a python function to swap first and last elements of a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(swapList(myList))\n    \ndef swapList(myList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    myList[0],myList[-1]=myList[-1],myList[0]\n    return myList\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a string.\n    '''\n    myString=\"Hello\"\n    print(reverseString(myString))\n    \nif __name__ == '__main__':\n    main()\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(reverseList(myList))\n    \ndef reverseList(myList):\n    myList.reverse()\n    return myList\n    \ndef main():\n    '''\n    Write a python function to swap first and last elements of a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(swapList(myList))\n    \ndef swapList(myList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    myList[0],myList[-1]=myList[-1],myList[0]\n    return myList\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a string.\n    '''\n    myString=\"Hello\"\n    print(reverseString(myString))\n    \nif __name__ == '__main__':\n    main()\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(reverseList(myList))\n    \ndef reverseList(myList):\n    myList.reverse()\n    return myList\n    \ndef main():\n    '''\n    Write a python function to swap first and last elements of a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(swapList(myList))\n    \ndef swapList(myList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    myList[0],myList[-1]=myList[-1],myList[0]\n    return myList\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a string.\n    '''\n    myString=\"Hello\"\n    print(reverseString(myString))\n    \nif __name__ == '__main__':\n    main()\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(reverseList(myList))\n    \ndef reverseList(myList):\n    myList.reverse()\n    return myList\n    \ndef main():\n    '''\n    Write a python function to swap first and last elements of a list.\n    '''\n    myList=[1,2,3,4,5]\n    print(swapList(myList))\n    \ndef swapList(myList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    myList[0],myList[-1]=myList[-1],myList[0]\n    return myList\n    \ndef reverseString(str):\n    return str[::-1]\n    \ndef swap_String(str): \n    '''\n    Write a python function to interchange the first and last elements in a string.\n    '''\n    str[0],str[-1]=str[-1],str[0]\n    return str\n    \ndef main():\n    '''\n    Write a python function to reverse a string.\n    '''\n    m",
        "num_ids": 4
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n",
        "num_ids": 55
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    newList[0], newList[size-1] = newList[size-1], newList[0]\n    return newList\n",
        "num_ids": 43
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    last = len(newList)-1\n    newList[0],newList[last] = newList[last], newList[0]\n    return newList\n",
        "num_ids": 40
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n",
        "num_ids": 32
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    l = len(newList)\n    \n    newList[0], newList[l-1] = newList[l-1], newList[0] \n    \n    return newList\n    \nprint(swap_List([1,2,3,4,5])",
        "num_ids": 67
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    last = newList[-1] \n    newList[-1] = newList[0] \n    newList[0] = last \n    return newList \n",
        "num_ids": 44
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0: \n        return 1\n    elif k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 64
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return 1 if k == 0 or k == n else binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k) \n",
        "num_ids": 45
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for x in range(k+1)] for x in range(n+1)]\n    for i in range(n+1):\n        C[i][0] = 1\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            C[i][j] = C[i-1][j-1] + C[i-1][j]\n    return C[n][k]\n",
        "num_ids": 110
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [1]\n    for i in range(1, n+1):\n        C.append(C[i-1] * i)\n    return C[n]/C[k]\n",
        "num_ids": 49
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==k:\n        return 1\n    elif k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n",
        "num_ids": 61
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math\n    n = int(input())\n    k = int(input())\n    print(math.factorial(n)//(math.factorial(k) * math.factorial(n - k)))\n",
        "num_ids": 52
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    C = [[0 for i in range(k+1)] for j in range(n+1)] \n    for i in range(n+1): \n        for j in range(min(i,k)+1): \n            if (j == 0 or j == i): \n                C[i][j] = 1\n            else: \n                C[i][j] = C[i-1][j-1] + C[i-1][j] \n    return C[n][k] \n",
        "num_ids": 122
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    b = 1\n    s = 0\n    for i in range(k+1,n+1):\n        b *= i\n        s += b\n    return s\n",
        "num_ids": 42
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return int((factorial(n) / (factorial(k)*factorial(n - k))) * 100) \n",
        "num_ids": 30
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def binomial(n,k):\n        if k == 0 or k == n:\n            return 1\n        return (n*binomial(n-1,k-1))//(k*(n-k))\n    \n    return binomial(n,k)\n",
        "num_ids": 65
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"0+\", \"\", ip)\n",
        "num_ids": 18
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'0+([.0-9]+)', r'\\1', ip)\n",
        "num_ids": 28
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    if ip[0] == \"0\":\n        ip = ip[1:]\n        return removezero_ip(ip)\n    else:\n        return ip\n",
        "num_ids": 47
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    lst = ip.split('.')\n    for i in range(len(lst)):\n        while lst[i][0] == '0':\n            lst[i] = lst[i][1:]\n    return '.'.join(lst)\n",
        "num_ids": 66
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(map(int,ip.split('.')))\n    return str(ip[0]) + '.' + str(ip[1]) + '.' + str(ip[2]) + '.' + str(ip[3])\n",
        "num_ids": 57
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \".\".join(map(str, ip))\n",
        "num_ids": 16
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list=ip.split('.')\n    for i in range(len(ip_list)):\n        if len(ip_list[i])>3:\n            ip_list[i]=ip_list[i][0:3]\n        else:\n            ip_list[i]=ip_list[i].zfill(3)\n    return '.'.join(ip_list)\n",
        "num_ids": 95
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.replace(\"0\", \"\")\n    return ip\n",
        "num_ids": 18
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = \"\"\n    for i in range(0, len(ip)):\n        if(ip[i]!= \"0\"):\n            new_ip += ip[i]\n    return new_ip\n",
        "num_ids": 53
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    nip=ip\n    while len(ip)>0 and ip[0]=='0':\n        ip=ip[1:]\n    return ip\n",
        "num_ids": 38
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return abs(even[0] - odd[0])\n",
        "num_ids": 63
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    result = 0\n    for index in range(0, len(list1)):\n        if index % 2 == 0:\n            result = abs(list1[index] - list1[index - 1])\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    try:\n        if list1[0] % 2 == 0:\n            return list1[1]-list1[0]\n        elif list1[0] % 2!= 0:\n            return list1[0]-list1[1]\n    except:\n        pass\n",
        "num_ids": 67
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    diff = 0\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if (list1[i] % 2 == 0):\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n",
        "num_ids": 70
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # list1 = [2,3,5,8,9,6]\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    if len(even_list) == len(odd_list):\n        print(even_list[0] - odd_list[0])\n    else:\n        print(even_list[0] - odd_list[1])\n",
        "num_ids": 130
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_odd = []\n    first_even = []\n    for n in list1:\n        if n%2 == 0:\n            first_even.append(n)\n        else:\n            first_odd.append(n)\n    return first_even[0]-first_odd[0]\n",
        "num_ids": 72
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd=0\n    even=0\n    for i in list1:\n        if list1.index(i)%2==0:\n            even=i\n        else:\n            odd=i\n    difference=abs(even-odd)\n    print(\"First Odd: {} and First Even: {}. Difference: {} \".format(odd,even,difference))\n",
        "num_ids": 87
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    e = 0\n    o = 0\n    for i in list1:\n        if (i%2 == 0):\n            e = i\n        else:\n            o = i\n    return e - o\n",
        "num_ids": 50
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            even_sum += i\n        else:\n            odd_sum += i\n    print(even_sum-odd_sum)\n",
        "num_ids": 63
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_num = list1[i]\n        else:\n            odd_num = list1[i]\n    print(abs(even_num - odd_num))\n",
        "num_ids": 64
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    table = [[0 for i in range(m+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1] == str2[j-1] :\n                table[i][j] = table[i-1][j-1]\n            else:\n                table[i][j] = 1 + min(table[i-1][j-1], table[i-1][j],table[i][j-1])\n    return table[n][m]\n",
        "num_ids": 160
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    m = len(str1)\n    n = len(str2)\n    if m!= n:\n        return -1\n    # comparing the numbers one by one and swapping them\n    count = 0\n    for i in range(0,m):\n        if str1[i]!= str2[i]:\n            count = count+1\n    return count\n",
        "num_ids": 87
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n",
        "num_ids": 70
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1)==len(str2):\n        return sum([str1[i]!=str2[i] for i in range(len(str1))])\n    else:\n        return -1\n",
        "num_ids": 53
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n",
        "num_ids": 22
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = \"11101\"\n    str2 = \"10101\"\n    n = len(str1) \n    m = len(str2) \n    ans = [[0 for i in range(m+1)] for i in range(n+1)] \n    for i in range(n+1) : \n        for j in range(m+1) : \n            if i == 0 and j == 0 : \n                ans[i][j] = 0\n            elif i == 0 and j!= 0 : \n                ans[i][j] = j \n            elif i!= 0 and j == 0 : \n                ans[i][j] = i \n            elif str1[i-1] == str2[j-1] : \n                ans[i][j] = ans[i-1][j-1] \n            else : \n                ans[i][j] = 1 + min(ans[i][j-1],ans[i-1][j-1],ans[i-1][j]) \n    return ans[n][m]\n",
        "num_ids": 258
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    \n    if n!= m :\n        return -1\n    \n    i = 0\n    j = 0\n    cnt = 0\n    while i < n and j < m :\n        if str1[i]!= str2[j] :\n            if str1[i] == '1' :\n                cnt += 1\n            if str2[j] == '0' :\n                cnt += 1\n            i += 1\n            j += 1\n        else :\n            i += 1\n            j += 1\n    \n    if j < m :\n        cnt += m - j\n    \n    return cnt\n    \nif __name__ == '__main__':\n    str1 = '111011100'\n    str2 = '111011110'\n    print(min_Swaps(str1,str2))",
        "num_ids": 214
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            if str2[i] == '0' :\n                count += 1\n                str2 = str2[:i]+str(1)+str2[i+1:]\n            else :\n                count += 1\n                str2 = str2[:i]+str(0)+str2[i+1:]\n    return count\n",
        "num_ids": 111
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if(str1[i]!= str2[i]):\n            count += 1\n    return count\n",
        "num_ids": 47
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.split()\n    str2 = str2.split()\n    return min_Swaps_helper(str1, str2)\n",
        "num_ids": 39
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return(sys.getsizeof(tuple_list))\n",
        "num_ids": 17
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n    \ndef num_list_size(num_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return sys.getsizeof(num_list)\n    \ndef tuple_concat(tuple_1, tuple_2):\n    '''\n    Write a function that takes two tuples and returns their concatenation.\n    '''\n    return tuple_1 + tuple_2\n    \ndef tuple_element_add(tuple_1, element):\n    '''\n    Write a function that takes a tuple and an element as an input and adds the element to the tuple.\n    '''\n    return tuple_1 + (element,)\n    \ndef tuple_slice(tuple_1, start_index, stop_index):\n    '''\n    Write a function that takes a tuple as an input and returns a tuple that results from slicing the original tuple\n    from start_index to stop_index (both are inclusive).\n    '''\n    return tuple_1[start_index:stop_index+1]\n    \ndef tuple_repeat(tuple_1, number_of_repeats):\n    '''\n    Write a function that takes a tuple and a number as input and returns a tuple that results from \n    repeating the tuple that many times.\n    '''\n    return tuple_1 * number_of_repeats\n    \ndef tuple_contains(tuple_1, element):\n    '''\n    Write a function that takes a tuple as an input and returns a boolean indicating whether the tuple contains\n    the given element.\n    '''\n    return element in tuple_1\n    \ndef tuple_count(tuple_1, element):\n    '''\n    Write a function that takes a tuple and an element as an input and returns an integer indicating the number\n    of times the element appears in the tuple.\n    '''\n    return tuple_1.count(element)\n    \ndef tuple_get_index(tuple_1, element):\n    '''\n    Write a function that takes a tuple and an element as an input and returns the index of the first occurrence\n    of the element in the tuple.\n    '''\n    return tuple_1.index(element)\n    \ndef tuple_index(tuple_1, element):\n    '''\n    Write a function that takes a tuple and an element as an input and raises an exception if the element is not\n    in the tuple.\n    '''\n    try:\n        return tuple_1.index(element)\n    except ValueError:\n        raise ValueError\n        \ndef list_contains(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns a boolean indicating whether the list\n    contains the given element.\n    '''\n    return element in num_list\n    \ndef list_index(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns the index of the first occurrence\n    of the element in the list.\n    '''\n    try:\n        return num_list.index(element)\n    except ValueError:\n        raise ValueError\n        \ndef list_count(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns an integer indicating the number\n    of times the element appears in the list.\n    '''\n    return num_list.count(element)\n    \ndef list_get_index(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns the index of the first occurrence\n    of the element in the list.\n    '''\n    try:\n        return num_list.index(element)\n    except ValueError:\n        raise ValueError\n        \ndef list_element_add(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and adds the element to the list.\n    '''\n    return num_list + [element]\n    \ndef list_element_remove(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and removes the element from the list.\n    '''\n    num_list.remove(element)\n    return num_list\n    \ndef list_slice(num_list, start_index, stop_index):\n    '''\n    Write a function that takes a list as an input and returns a list that results from slicing the original list\n    from start_index to stop_index (both are inclusive).\n    '''\n    return num_list[start_index:stop_index+1]\n    \ndef list_repeat(num_list, number_of_repeats):\n    '''\n    Write a function that takes a list and a number as input and returns a list that results from \n    repeating the list that many times.\n    '''\n    return num_list * number_of_repeats\n    \ndef list_contains(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns a boolean indicating whether the list\n    contains the given element.\n    '''\n    return element in num_list\n    \ndef list_index(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns the index of the first occurrence\n    of the element in the list.\n    '''\n    try:\n        return num_list.index(element)\n    except ValueError:\n        raise ValueError\n        \ndef list_count(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns an integer indicating the number\n    of times the element appears in the list.\n    '''\n    return num_list.count(element)\n    \ndef list_get_index(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns the index of the first occurrence\n    of the element in the list.\n    '''\n    try:\n        return num_list.index(element)\n    except ValueError:\n        raise ValueError\n        \ndef list_element_add(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and adds the element to the list.\n    '''\n    return num_list + [element]\n    \ndef list_element_remove(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and removes the element from the list.\n    '''\n    num_list.remove(element)\n    return num_list\n    \ndef list_slice(num_list, start_index, stop_index):\n    '''\n    Write a function that takes a list as an input and returns a list that results from slicing the original list\n    from start_index to stop_index (both are inclusive).\n    '''\n    return num_list[start_index:stop_index+1]\n    \ndef list_repeat(num_list, number_of_repeats):\n    '''\n    Write a function that takes a list and a number as input and returns a list that results from \n    repeating the list that many times.\n    '''\n    return num_list * number_of_repeats\n    \ndef list_contains(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns a boolean indicating whether the list\n    contains the given element.\n    '''\n    return element in num_list\n    \ndef list_index(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns the index of the first occurrence\n    of the element in the list.\n    '''\n    try:\n        return num_list.index(element)\n    except ValueError:\n        raise ValueError\n        \ndef list_count(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns an integer indicating the number\n    of times the element appears in the list.\n    '''\n    return num_list.count(element)\n    \ndef list_get_index(num_list, element):\n    '''\n    Write a function that takes a list and an element as an input and returns the index of the first occurrence\n    of the element in the list.\n    '''\n    try:\n        return num_lis",
        "num_ids": 11
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef list_size(list_list):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    return sys.getsizeof(list_list)\ndef string_size(string_list):\n    '''\n    Write a function to find the size in bytes of the given string.\n    '''\n    return sys.getsizeof(string_list)\ndef set_size(set_list):\n    '''\n    Write a function to find the size in bytes of the given set.\n    '''\n    return sys.getsizeof(set_list)\ndef deque_size(deque_list):\n    '''\n    Write a function to find the size in bytes of the given deque.\n    '''\n    return sys.getsizeof(deque_list)\n",
        "num_ids": 16
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Check if the input tuple_list is of the type tuple\n    if not isinstance(tuple_list, tuple):\n        print('Input must be of type tuple!')\n        return\n    # Get the size of the given tuple\n    size = sys.getsizeof(tuple_list)\n    return size\n",
        "num_ids": 75
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    count = 0\n    for i in tuple_list:\n        count += sys.getsizeof(i)\n    return count\n",
        "num_ids": 32
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # get the size of tuple in bytes\n    return sys.getsizeof(tuple_list)\n",
        "num_ids": 26
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    return find_kth_helper(arr1, arr2, 0, 0, k)\n",
        "num_ids": 25
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    index1 = 0\n    index2 = 0\n",
        "num_ids": 14
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < n2:\n        return find_kth(arr2, arr1, k)\n    if n1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(k // 2, n1)\n    j = min(k // 2, n2)\n    if arr1[i - 1] < arr2[j - 1]:\n        return find_kth(arr1[i:], arr2, k - i)\n    else:\n        return find_kth(arr1, arr2[j:], k - j)\n",
        "num_ids": 177
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    def find_kth_helper(arr1, arr2, k):\n        if not arr1:\n            return arr2[k - 1]\n        if not arr2:\n            return arr1[k - 1]\n        \n        # pick the first element of both arrays\n        a1 = arr1[k//2 - 1] if len(arr1) >= k//2 else None\n        a2 = arr2[k//2 - 1] if len(arr2) >= k//2 else None\n",
        "num_ids": 119
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    count = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n        else:\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    if i == len(arr1):\n        while j < len(arr2):\n            count += 1\n            if count == k:\n                return arr2[j]\n            j += 1\n    if j == len(arr2):\n        while i < len(arr1):\n            count += 1\n            if count == k:\n                return arr1[i]\n            i += 1\n    return None\n",
        "num_ids": 194
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Approach:\n    # Merge the two arrays and sort the merged array.\n    # O(m+n) - Sorting\n    # Complexity Analysis:\n    # Time Complexity: O(m+n)O(m+n).\n    # Space Complexity: O(m+n)O(m+n).\n    def merge_and_sort(arr1, arr2):\n        arr3 = []\n        i = j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                arr3.append(arr1[i])\n                i += 1\n            else:\n                arr3.append(arr2[j])\n                j += 1\n        while i < len(arr1):\n            arr3.append(arr1[i])\n            i += 1\n        while j < len(arr2):\n            arr3.append(arr2[j])\n            j += 1\n        return arr3\n",
        "num_ids": 234
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Time: O(log(min(m,n)))\n    # Space: O(1)\n    def binary_search(arr, target, start, end):\n        while start <= end:\n            mid = start + (end - start) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return start\n    if not arr1 or not arr2:\n        return None\n    # print(arr1)\n    # print(arr2)\n    len1, len2 = len(arr1), len(arr2)\n    start = 0\n    end = len1\n    # while start <= end:\n    #     mid = start + (end - start) // 2\n    #     if arr1[mid] == arr2[mid]:\n    #         start = mid + 1\n    #     elif arr1[mid] > arr2[mid]:\n    #         end = mid - 1\n    #     else:\n    #         start = mid + 1\n",
        "num_ids": 257
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1 == [] or arr2 == []:\n        return None\n",
        "num_ids": 19
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    n1, n2 = len(arr1), len(arr2)\n    low, high = 0, min(n1, n2)\n    while low <= high:\n        # Find mid\n        mid = (low + high) // 2\n        # compare the kth element\n        if arr1[mid] < arr2[k-1]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr1[low] if n1 < n2 else arr2[k-1]\n",
        "num_ids": 125
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return arr1[k-1] if i < len(arr1) else arr2[k-1-len(arr1)]\n",
        "num_ids": 113
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_value = 0\n    for digit in str(number):\n        digit_value += int(digit) ** len(str(number))\n    return digit_value == number\n",
        "num_ids": 43
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #converting the given number to a list\n    list_of_number = list(str(number))\n    \n    #compute the sum of the cubes of the number digits\n    sum_of_cubes = 0\n    for i in list_of_number:\n        sum_of_cubes += int(i)**3\n",
        "num_ids": 79
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number\n",
        "num_ids": 45
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number_string = str(number)\n    digits = len(number_string)\n    sum = 0\n    for digit in number_string:\n        sum += pow(int(digit), digits)\n    if sum == number:\n        return True\n    return False\n",
        "num_ids": 64
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # if number < 1:\n    #     raise ValueError(\"Input number can not be less than 1\")\n    # sum_of_digits = 0\n    # number_of_digits = len(str(number))\n    # while number_of_digits:\n    #     number_of_digits -= 1\n    #     sum_of_digits += (number % 10) ** number_of_digits\n    # return sum_of_digits == number\n    return number == sum([int(i)**len(str(number)) for i in str(number)])\n",
        "num_ids": 138
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = len(str(number))\n    arm = 0\n    for i in str(number):\n        arm += int(i) ** n\n    if arm == number:\n        return True\n    else:\n        return False\n    \n    \ndef multiplication_table(number):\n    '''\n    Write a function to print multiplication table of any number.\n    '''\n    for i in range(1,11):\n        print(number,'*',i,'=',number*i)\n    \n    \ndef fibonacci_series(number):\n    '''\n    Write a function to print the fibonacci series of any number.\n    '''\n    n1,n2 = 0,1\n    print(n1,n2,end=' ')\n    for i in range(3,number+1):\n        n3 = n1 + n2\n        n1 = n2\n        n2 = n3\n        print(n3,end=' ')\n    \n    \ndef reverse(string):\n    '''\n    Write a function to print the reverse of a string.\n    '''\n    print(string[::-1])\n    \n    \ndef palindrome(string):\n    '''\n    Write a function to print whether the given string is palindrome or not.\n    '''\n    print('Palindrome:',string[::-1] == string)\n    \n    \ndef print_integers(number):\n    '''\n    Write a function to print all the integers between 0 and entered number.\n    '''\n    for i in range(0,number+1):\n        print(i)\n    \n    \ndef list_of_prime_numbers(number):\n    '''\n    Write a function to print all the prime numbers between 0 and entered number.\n    '''\n    l = []\n    for i in range(0,number+1):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            l.append(i)\n    print(l)\n    \n    \ndef print_numbers(number):\n    '''\n    Write a function to print the specified range of numbers.\n    '''\n    print(list(range(number)))\n    \n    \ndef print_number_upto_n(number):\n    '''\n    Write a function to print the numbers of 1 to n.\n    '''\n    for i in range(1,number+1):\n        print(i)\n        \n        \ndef print_number_upto_n_recursive(number):\n    '''\n    Write a function to print the numbers of 1 to n.\n    '''\n    if number >= 1:\n        print(number)\n        print_number_upto_n_recursive(number-1)\n        \n        \ndef print_number_upto_n_without_recursion(number):\n    '''\n    Write a function to print the numbers of 1 to n.\n    '''\n    l = []\n    for i in range(1,number+1):\n        l.append(i)\n    print(l)\n    \n    \ndef print_number_upto_n_without_recursion_2(number):\n    '''\n    Write a function to print the numbers of 1 to n.\n    '''\n    l = []\n    for i in range(1,number+1):\n        l = l + [i]\n    print(l)\n    \n    \ndef print_number_of_odds_and_evens(number):\n    '''\n    Write a function to print the number of evens and odds between 1 to entered number.\n    '''\n    count_even = 0\n    count_odd = 0\n    for i in range(1,number+1):\n        if i%2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    print('Number of evens are:',count_even)\n    print('Number of odds are:',count_odd)\n    \n    \ndef print_numbers_of_2(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        print(i)\n        \n        \ndef print_numbers_of_2_recursive(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    if number >= 2:\n        print(number)\n        print_numbers_of_2_recursive(number-1)\n        \n        \ndef print_numbers_of_2_without_recursion(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        print(i, end=' ')\n        \n        \ndef print_numbers_of_2_without_recursion_2(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    print(list(range(2,number+1)))\n    \n    \ndef print_numbers_of_2_without_recursion_3(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    l = []\n    for i in range(2,number+1):\n        l = l + [i]\n    print(l)\n    \n    \ndef print_numbers_of_2_without_recursion_4(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    l = [i for i in range(2,number+1)]\n    print(l)\n    \n    \ndef print_numbers_of_2_without_recursion_5(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        print(i, end=' ')\n        \n        \ndef print_numbers_of_2_without_recursion_6(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        print(i, end=' ')\n        \n        \ndef print_numbers_of_2_without_recursion_7(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        print(i, end=' ')\n        if i%2!= 0:\n            continue\n        else:\n            print(i)\n            \n            \ndef print_numbers_of_2_without_recursion_8(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        if i%2 == 0:\n            print(i, end=' ')\n    \n    \ndef print_numbers_of_2_without_recursion_9(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        if i%2 == 0:\n            print(i, end=' ')\n        elif i%2!= 0:\n            continue\n        else:\n            print(i, end=' ')\n            \n            \ndef print_numbers_of_2_without_recursion_10(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        if i%2 == 0:\n            print(i, end=' ')\n        elif i%2!= 0:\n            continue\n        else:\n            print(i, end=' ')\n            \n            \ndef print_numbers_of_2_without_recursion_11(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    '''\n    for i in range(2,number+1):\n        if i%2 == 0:\n            print(i, end=' ')\n        elif i%2!= 0:\n            continue\n        else:\n            print(i, end=' ')\n            \n            \ndef print_numbers_of_2_without_recursion_12(number):\n    '''\n    Write a function to print the numbers of 2 to n.\n    ''",
        "num_ids": 18
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    length = len(str(number))\n    list_of_digits = list(str(number))\n    result = 0\n    for i in list_of_digits:\n        result += int(i) ** length\n    if result == number:\n        return 'Number is an armstrong number'\n    return 'Number is not an armstrong number'\n",
        "num_ids": 84
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    temp=number\n    while temp>0:\n        rem=temp%10\n        sum+=rem**3\n        temp//=10\n    if sum==number:\n        return \"is armstrong\"\n    else:\n        return \"not armstrong\"\n    return\n",
        "num_ids": 69
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    num = n\n    sum1 = 0\n    while n!= 0:\n        k = n % 10\n        sum1 = sum1 + pow(k, 3)\n        n = int(n / 10)\n    if num == sum1:\n        print(num,\"is an armstrong number\")\n    else:\n        print(num,\"is not an armstrong number\")\n",
        "num_ids": 94
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_sum = 0\n    num = number\n    while num!= 0:\n        num_sum += (num % 10) ** 3\n        num //= 10\n    if num_sum == number:\n        return True\n    return False\n",
        "num_ids": 58
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while number!= 0:\n        sum += number\n        count += 1\n        number -= 1\n    average = sum / count\n    return (sum, average)\n",
        "num_ids": 50
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum=0\n    average=0\n    for i in range(1,number+1):\n        sum+=i\n    average=sum/number\n    print('sum of {} numbers is {} and average is {}'.format(number,sum,average))\ndef square_root(number):\n    '''\n    Write a function to compute the nth root of a number.\n    '''\n    sqr_root=0\n    number=float(number)\n    for i in range(number):\n        sqr_root+=number\n    print('sqr_root is {}'.format(sqr_root))\ndef fibonacci(number):\n    '''\n    Write a function to compute the nth fibonacci number.\n    '''\n    first=0\n    second=1\n    if number<=1:\n        return number\n    else:\n        for i in range(number):\n            third=first+second\n            first=second\n            second=third\n        return third\ndef factorial(number):\n    '''\n    Write a function to compute the nth factorial.\n    '''\n    fact=1\n    if number<=1:\n        return 1\n    else:\n        for i in range(1,number+1):\n            fact*=i\n        return fact\ndef reverse(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    string=string[::-1]\n    print(string)\ndef palindrome(string):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    reverse_string=string[::-1]\n    if string==reverse_string:\n        print('yes')\n    else:\n        print('no')\ndef is_pangram(string):\n    '''\n    Write a function to check if a sentence is a pangram.\n    '''\n    alphabet=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    for i in alphabet:\n        if i not in string.lower():\n            print('Not pangram')\n            return\n    print('Pangram')\ndef find_primitive(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                print('Not prime')\n                return False\n    print('Prime')\ndef sum_of_digits(number):\n    '''\n    Write a function to compute the sum of digits of a number.\n    '''\n    sum=0\n    while number>0:\n        rem=number%10\n        sum+=rem\n        number//=10\n    print('sum of digits of {} is {}'.format(number,sum))\ndef sum_of_digits2(number):\n    '''\n    Write a function to compute the sum of digits of a number.\n    '''\n    sum=0\n    while number>0:\n        rem=number%10\n        sum+=rem\n        number=number//10\n    return sum\ndef is_prime(number):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if number<=1:\n        return False\n    else:\n        for i in range(2,number):\n            if number%i==0:\n                return False\n        return True\ndef sum_of_digits3(number):\n    '''\n    Write a function to compute the sum of digits of a number.\n    '''\n    sum=0\n    while number>0:\n        sum+=number%10\n        number//=10\n    return sum\ndef find_prime_factors(number):\n    '''\n    Write a function to find prime factors of a number.\n    '''\n    for i in range(1,number+1):\n        if number%i==0:\n            if is_prime(i):\n                print(i)\ndef sum_of_digits4(number):\n    '''\n    Write a function to compute the sum of digits of a number.\n    '''\n    sum=0\n    while number>0:\n        sum+=number%10\n        number//=10\n    return sum\ndef print_series(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i)\ndef sum_of_series(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series2(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\"\")\ndef sum_of_series2(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series3(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\" \")\ndef sum_of_series3(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series4(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\" \")\n    for j in range(n-1,-1,-1):\n        print(j,end=\" \")\ndef sum_of_series4(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series5(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\" \")\n    for j in range(n,0,-1):\n        print(j,end=\" \")\ndef sum_of_series5(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series6(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\" \")\n    for j in range(1,n+1):\n        print(j,end=\" \")\ndef sum_of_series6(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series7(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\" \")\n    for j in range(2,n+1):\n        print(j,end=\" \")\ndef sum_of_series7(n):\n    '''\n    Write a function to print sum of series upto n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i\n    return sum\ndef print_series8(n):\n    '''\n    Write a function to print series upto n.\n    '''\n    for i in range(1,n+1):\n        print(i,end=\" \")\n    for j in range(n-1,0,-1):\n        print(j,end=\" \")\ndef sum_of_series8(n):\n    '''\n    Write a function to print sum o",
        "num_ids": 10
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    #number = int(input(\"Please enter a number\"))\n    sum = 0\n    for i in range(1,number+1):\n        sum = sum + i\n    return sum,sum/number\ndef main():\n    '''\n    Main function to call other functions\n    '''\n    print(\"Sum and average of first n natural numbers is:\",sum_average(10))\nif __name__ == '__main__':\n    main()",
        "num_ids": 37
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 0:\n        raise Exception(\"Numbers must be positive.\")\n    sum = 0\n    count = 0\n    while count < number:\n        sum += count\n        count += 1\n    return sum, sum/number\n",
        "num_ids": 54
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(number):\n        sum += i\n        average = sum / number\n    return (sum, average)\n",
        "num_ids": 41
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_n = (number * (number + 1)) / 2\n    average_n = number / 2\n    return sum_n, average_n\n",
        "num_ids": 37
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    s=0\n    for x in range(1,number+1):\n        s+=x\n    return(s,s/number)\n",
        "num_ids": 35
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total = total + i\n        average = total/number\n    print(\"sum of first\", number,\"natural numbers is\", total)\n    print(\"average of first\", number,\"natural numbers is\", average)\n",
        "num_ids": 62
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Insert your code here\n    total, count = 0, 0\n    while number:\n        total += number\n        count += 1\n        number -= 1\n    return total, total/count\n",
        "num_ids": 46
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    if number == 0:\n        return None, None\n    for i in range(1, number+1):\n        sum += i\n    average = sum/number\n    return sum, average\n",
        "num_ids": 56
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n    \ndef is_Odd(n) : \n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    if n%2 == 0 :\n        return False\n    else :\n        return True\n        \ndef is_Even_Odd(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if n%2 == 0 :\n        return \"Even\"\n    else :\n        return \"Odd\"\n        \ndef is_Even_Odd_Many(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n        \ndef is_Even_Odd_Many_v2(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v3(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n        \ndef is_Even_Odd_Many_v4(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v5(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n        \ndef is_Even_Odd_Many_v6(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v7(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v8(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v9(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v10(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v11(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v12(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v13(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v14(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v15(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    elif is_Even(n) :\n        return \"Even\"\n    elif is_Odd(n) :\n        return \"Odd\"\n    else :\n        return \"Even/Odd\"\n        \ndef is_Even_Odd_Many_v16(n) : \n    '''\n    Write a python function to check whether the given number is even or odd or even or odd.\n    '''\n    if is_Eve",
        "num_ids": 8
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #Your code here\n    if n%2==0:\n        return True\n    else:\n        return False\n    \ndef is_odd(n) :\n    '''\n    Write a python function to check whether the given number is odd or not.\n    '''\n    #Your code here\n    if n%2!=0:\n        return True\n    else:\n        return False\n",
        "num_ids": 30
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 :\n        return True\n    else:\n        return False\n",
        "num_ids": 25
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0 :\n        print('Number is Even')\n    else:\n        print('Number is Odd')\n",
        "num_ids": 31
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\n",
        "num_ids": 10
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 23
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) >= 2:\n            return i\n",
        "num_ids": 27
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1) < 1:\n        return \"No Repeated Character\"\n    else:\n        for i in range(len(str1)):\n            if str1[i] in str1[i+1:] and str1[i] not in str1[:i]:\n                return str1[i]\n    return \"No Repeated Character\"\n",
        "num_ids": 86
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0,len(str1)):\n        if str1.count(str1[i])>1:\n            return str1[i]\n    return None\n",
        "num_ids": 45
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for j in str1:\n        if count[j] > 1:\n            return j\n    return None\n",
        "num_ids": 68
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return -1\n",
        "num_ids": 61
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    letters = {}\n",
        "num_ids": 7
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    dict1 = dict()\n    for i in range(0,len(str1)):\n        if str1[i] in dict1.keys():\n            return str1[i]\n        else:\n            dict1[str1[i]]=i\n",
        "num_ids": 62
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j]:\n                return str1[i]\n    return None\n",
        "num_ids": 58
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str_dict = {}\n    for char in str1:\n        if char in str_dict:\n            str_dict[char] += 1\n        else:\n            str_dict[char] = 1\n",
        "num_ids": 50
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    import collections\n    return collections.Counter(str1).most_common(1)[0][0]\n",
        "num_ids": 26
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n + 1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n",
        "num_ids": 45
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    list = []\n    for i in range(1, n+1):\n        a = i\n        s = 0\n        while a > 0:\n            s += a % 10\n            a //= 10\n        if i + s <= n:\n            list.append(i + s)\n    return list\n",
        "num_ids": 73
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 10:\n        return [n]\n    return [i for i in range(1, n)] + [int(''.join(j)) for j in itertools.product(['1', '2', '3', '4', '5', '6', '7', '8', '9'], repeat=len(str(n))-1)]\n",
        "num_ids": 86
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if i % 1 == 0:\n            ludic.append(i)\n        if i % 2 == 0:\n            ludic.append(i)\n        if i % 3 == 0:\n            ludic.append(i)\n        if i % 5 == 0:\n            ludic.append(i)\n        if i % 6 == 0:\n            ludic.append(i)\n        if i % 7 == 0:\n            ludic.append(i)\n        if i % 8 == 0:\n            ludic.append(i)\n        if i % 9 == 0:\n            ludic.append(i)\n        if i % 10 == 0:\n            ludic.append(i)\n        if i % 11 == 0:\n            ludic.append(i)\n        if i % 12 == 0:\n            ludic.append(i)\n        if i % 13 == 0:\n            ludic.append(i)\n        if i % 14 == 0:\n            ludic.append(i)\n        if i % 15 == 0:\n            ludic.append(i)\n        if i % 16 == 0:\n            ludic.append(i)\n        if i % 17 == 0:\n            ludic.append(i)\n        if i % 18 == 0:\n            ludic.append(i)\n        if i % 19 == 0:\n            ludic.append(i)\n        if i % 20 == 0:\n            ludic.append(i)\n        if i % 21 == 0:\n            ludic.append(i)\n        if i % 22 == 0:\n            ludic.append(i)\n        if i % 23 == 0:\n            ludic.append(i)\n        if i % 24 == 0:\n            ludic.append(i)\n        if i % 25 == 0:\n            ludic.append(i)\n        if i % 26 == 0:\n            ludic.append(i)\n        if i % 27 == 0:\n            ludic.append(i)\n        if i % 28 == 0:\n            ludic.append(i)\n        if i % 29 == 0:\n            ludic.append(i)\n        if i % 30 == 0:\n            ludic.append(i)\n        if i % 31 == 0:\n            ludic.append(i)\n        if i % 32 == 0:\n            ludic.append(i)\n        if i % 33 == 0:\n            ludic.append(i)\n        if i % 34 == 0:\n            ludic.append(i)\n        if i % 35 == 0:\n            ludic.append(i)\n        if i % 36 == 0:\n            ludic.append(i)\n        if i % 37 == 0:\n            ludic.append(i)\n        if i % 38 == 0:\n            ludic.append(i)\n        if i % 39 == 0:\n            ludic.append(i)\n        if i % 40 == 0:\n            ludic.append(i)\n        if i % 41 == 0:\n            ludic.append(i)\n        if i % 42 == 0:\n            ludic.append(i)\n        if i % 43 == 0:\n            ludic.append(i)\n        if i % 44 == 0:\n            ludic.append(i)\n        if i % 45 == 0:\n            ludic.append(i)\n        if i % 46 == 0:\n            ludic.append(i)\n        if i % 47 == 0:\n            ludic.append(i)\n        if i % 48 == 0:\n            ludic.append(i)\n        if i % 49 == 0:\n            ludic.append(i)\n        if i % 50 == 0:\n            ludic.append(i)\n        if i % 51 == 0:\n            ludic.append(i)\n        if i % 52 == 0:\n            ludic.append(i)\n        if i % 53 == 0:\n            ludic.append(i)\n        if i % 54 == 0:\n            ludic.append(i)\n        if i % 55 == 0:\n            ludic.append(i)\n        if i % 56 == 0:\n            ludic.append(i)\n        if i % 57 == 0:\n            ludic.append(i)\n        if i % 58 == 0:\n            ludic.append(i)\n        if i % 59 == 0:\n            ludic.append(i)\n        if i % 60 == 0:\n            ludic.append(i)\n        if i % 61 == 0:\n            ludic.append(i)\n        if i % 62 == 0:\n            ludic.append(i)\n        if i % 63 == 0:\n            ludic.append(i)\n        if i % 64 == 0:\n            ludic.append(i)\n        if i % 65 == 0:\n            ludic.append(i)\n        if i % 66 == 0:\n            ludic.append(i)\n        if i % 67 == 0:\n            ludic.append(i)\n        if i % 68 == 0:\n            ludic.append(i)\n        if i % 69 == 0:\n            ludic.append(i)\n        if i % 70 == 0:\n            ludic.append(i)\n        if i % 71 == 0:\n            ludic.append(i)\n        if i % 72 == 0:\n            ludic.append(i)\n        if i % 73 == 0:\n            ludic.append(i)\n        if i % 74 == 0:\n            ludic.append(i)\n        if i % 75 == 0:\n            ludic.append(i)\n        if i % 76 == 0:\n            ludic.append(i)\n        if i % 77 == 0:\n            ludic.append(i)\n        if i % 78 == 0:\n            ludic.append(i)\n        if i % 79 == 0:\n            ludic.append(i)\n        if i % 80 == 0:\n            ludic.append(i)\n        if i % 81 == 0:\n            ludic.append(i)\n        if i % 82 == 0:\n            ludic.append(i)\n        if i % 83 == 0:\n            ludic.append(i)\n        if i % 84 == 0:\n            ludic.append(i)\n        if i % 85 == 0:\n            ludic.append(i)\n        if i % 86 == 0:\n            ludic.append(i)\n        if i % 87 == 0:\n            ludic.append(i)\n        if i % 88 == 0:\n            ludic.append(i)\n        if i % 89 == 0:\n            ludic.append(i)\n        if i % 90 == 0:\n            ludic.append(i)\n        if i % 91 == 0:\n            ludic.append(i)\n        if i % 92 == 0:\n            ludic.append(i)\n        if i % 93 == 0:\n            ludic.append(i)\n        if i % 94 == 0:\n            ludic.append(i)\n        if i % 95 == 0:\n            ludic.append(i)\n        if i % 96 == 0:\n            ludic.append(i)\n        if i % 97 == 0:\n            ludic.append(i)\n        if i % 98 == 0:\n            ludic.append(i)\n        if i % 99 == 0:\n            ludic.append(i)\n        if i % 100 == 0:\n            ludic.append(i)\n        if i % 101 == 0:\n            ludic.append(i)\n        if i % 102 == 0:\n            ludic.append(i)\n        if i % 103 == 0:\n            ludic.append(i)\n        if i % 104 == 0:\n            ludic.append(i)\n        if i % 105 == 0:\n            ludic.append(i)\n        if i % 106 == 0:\n            ludic.append(i)\n        if i % 107 == 0:\n            ludic.append(i)\n        if i % 108 == 0:\n            ludic.append(i)\n        if i % 109 == 0:\n            ludic.append(i)\n        if i % 110 == 0:\n            ludic.append(i)\n        if i % 111 == 0:\n            ludic.append(i)\n        if i % 112 == 0:\n            ludic.append",
        "num_ids": 2013
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    a = [0,1]\n    ludic = [0]\n    if n == 1:\n        return a[1]\n    for i in range(2,n):\n        a.append(a[i-1]+a[i-2])\n        if a[i] not in ludic:\n            ludic.append(a[i])\n    return ludic\n",
        "num_ids": 90
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def dfs(num, digits, path):\n        if num > n: return\n        if num < 1: return\n",
        "num_ids": 30
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def luc(n):\n        ans=[]\n        for i in range(1,n+1):\n            if i==1:\n                ans.append(i)\n            else:\n                if i%2==0:\n                    if i==2:\n                        ans.append(i)\n                    else:\n                        ans.append(i)\n                        for j in range(i+1,n+1):\n                            ans.append(j)\n                            if sum(ans)==n:\n                                ans.sort()\n                                return ans\n                            elif sum(ans)>n:\n                                ans.pop()\n                                break\n                            else:\n                                ans.pop()\n                else:\n                    if i==3:\n                        ans.append(i)\n                    else:\n                        ans.append(i)\n                        for j in range(i+1,n+1):\n                            ans.append(j)\n                            if sum(ans)==n:\n                                ans.sort()\n                                return ans\n                            elif sum(ans)>n:\n                                ans.pop()\n                                break\n                            else:\n                                ans.pop()\n    return luc(n)",
        "num_ids": 265
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        if i**2 > n:\n            break\n        else:\n            ludic.append(i**2)\n    return ludic\n",
        "num_ids": 49
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [0]\n    for i in range(1, n):\n        ludic.append(i**i)\n    return ludic\n",
        "num_ids": 37
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if is_ludic(i)]\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string into a list\n    s = s.split(\" \")\n    # Revert the list\n    s = s[::-1]\n    # Join the list elements into one string\n    return \" \".join(s)\n",
        "num_ids": 57
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    new_s = []\n    for w in s:\n        new_s.append(w[::-1])\n    return \" \".join(new_s)\n",
        "num_ids": 51
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_list = s.split(\" \")\n    i = 0\n    for word in s_list:\n        s_list[i] = s_list[i][::-1]\n        i += 1\n    return \" \".join(s_list)\n",
        "num_ids": 63
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split(' ')\n    return''.join(l[::-1])\n",
        "num_ids": 24
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "num_ids": 17
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split(' ')\n    # for each word in l, reverse it, then put them all into a new list\n    r = [word[::-1] for word in l]\n    # join the list with a space in between\n    return''.join(r)\n",
        "num_ids": 67
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # return s.split()[::-1]\n    return''.join(s.split()[::-1])\n",
        "num_ids": 30
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    def reverse_words_helper(s, start, end):\n        while start < end:\n            s[start], s[end] = s[end], s[start]\n            start += 1\n            end -= 1\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2,num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 45
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 41
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n    return True\n",
        "num_ids": 57
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # if (num == 2):\n    #     return True\n    # if (num < 2):\n    #     return False\n    # for i in range(2, num):\n    #     if (num % i == 0):\n    #         return False\n    # return True\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, num):\n        if (num % i == 0):\n            return False\n    return True\n",
        "num_ids": 120
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 54
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        # Iterate from 2 to n / 2\n        for i in range(2, num//2):\n            # If num is divisible by any number between\n            # 2 and n / 2, it is not prime\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 89
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num/2)+1):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n",
        "num_ids": 57
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (degree*math.pi)/180\n",
        "num_ids": 13
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef meters_to_feet(m):\n    return m*3.28084\ndef feet_to_meters(m):\n    return m/3.28084\ndef feet_to_meters_2(m):\n    return m*0.3048\ndef meters_to_feet_2(m):\n    return m/0.3048\ndef meters_to_inches(m):\n    return m/39.3701\ndef inches_to_meters(m):\n    return m/39.3701\ndef inches_to_meters_2(m):\n    return m*0.0254\ndef inches_to_feet(m):\n    return m*0.0833333\ndef feet_to_inches(m):\n    return m*12\ndef feet_to_inches_2(m):\n    return m*12\ndef inch_to_feet_2(m):\n    return m*3\ndef inch_to_feet(m):\n    return m*0.0833333\ndef feet_to_inch(m):\n    return m*12\ndef feet_to_inch_2(m):\n    return m*3\ndef miles_to_kilometers(miles):\n    return miles*1.609\ndef kilometers_to_miles(km):\n    return km*0.621371\ndef kilometers_to_feet(km):\n    return km*3280.84\ndef feet_to_kilometers(ft):\n    return ft/3280.84\ndef feet_to_kilometers_2(ft):\n    return ft/3.28084\ndef miles_to_kilometers(miles):\n    return miles*1.609\ndef kilometers_to_miles(km):\n    return km*0.621371\ndef km_to_m(km):\n    return km/1000\ndef km_to_m_2(km):\n    return km/1.609\ndef m_to_km(m):\n    return m*1.609\ndef m_to_km_2(m):\n    return m*1.609\ndef yard_to_feet(y):\n    return y*3\ndef feet_to_yard(y):\n    return y/3\ndef yards_to_meters(y):\n    return y*0.914394\ndef meters_to_yards(y):\n    return y/0.914394\ndef yards_to_feet_2(y):\n    return y/3.0\ndef feet_to_yards_2(y):\n    return y/3.0\ndef feet_to_meters(y):\n    return y*0.3048\ndef meters_to_feet_2(y):\n    return y/0.3048\ndef feet_to_meters_2(y):\n    return y*0.3048\ndef yards_to_meters_2(y):\n    return y*0.914394\ndef meters_to_yards_2(y):\n    return y/0.914394\ndef meter_to_inches(m):\n    return m/39.3701\ndef inch_to_meter(m):\n    return m/39.3701\ndef meter_to_foot(m):\n    return m*3\ndef meter_to_foot_2(m):\n    return m/3\ndef meter_to_inch(m):\n    return m*39.3701\ndef inch_to_meter_2(m):\n    return m*39.3701\ndef foot_to_meter_2(m):\n    return m/3\ndef foot_to_meter(m):\n    return m/3\ndef feet_to_inch(m):\n    return m*12\ndef feet_to_inch_2(m):\n    return m*12\ndef mile_to_yard(miles):\n    return miles*1760\ndef yard_to_mile(yards):\n    return yards/1760\ndef yard_to_meter_2(yards):\n    return yards*0.914394\ndef meter_to_yard_2(yards):\n    return yards/0.914394\ndef meter_to_yard(yards):\n    return yards/0.914394\ndef feet_to_yard_2(feet):\n    return feet*0.333333\ndef yard_to_feet_2(yard):\n    return yard/0.333333\ndef yard_to_feet(yard):\n    return yard/0.333333\ndef yards_to_feet_2(yards):\n    return yards/0.914394\ndef yards_to_feet(yards):\n    return yards/0.914394\ndef yards_to_meters(yard):\n    return yard/0.914394\ndef yards_to_meters_2(yard):\n    return yard*0.914394\ndef yards_to_meters_3(yards):\n    return yards/1.09361\ndef yards_to_meters_4(yards):\n    return yards/0.914394\ndef meters_to_yards(meter):\n    return meter/0.914394\ndef meter_to_yard_2(meter):\n    return meter/0.914394\ndef meter_to_yard(meter):\n    return meter/0.914394\ndef meter_to_feet_2(meter):\n    return meter/3\ndef meters_to_feet_2(meter):\n    return meter/3\ndef feet_to_yard(feet):\n    return feet/0.333333\ndef feet_to_yard_2(feet):\n    return feet*0.333333\ndef feet_to_meters(feet):\n    return feet/0.3048\ndef meters_to_feet_2(meter):\n    return meter/0.3048\ndef meters_to_feet(meter):\n    return meter/0.3048\ndef feet_to_meters(feet):\n    return feet/0.3048\ndef meters_to_feet(meter):\n    return meter/0.3048\ndef miles_to_yards(miles):\n    return miles*1760\ndef yards_to_miles(yards):\n    return yards/1760\ndef yards_to_feet(yards):\n    return yards/0.914394\ndef yards_to_meters(yards):\n    return yards/0.914394\ndef yards_to_miles(yards):\n    return yards/1760\ndef feet_to_miles(feet):\n    return feet/5280\ndef feet_to_miles_2(feet):\n    return feet/5280\ndef miles_to_feet(miles):\n    return miles*5280\ndef feet_to_inches(feet):\n    return feet*12\ndef inch_to_feet(inches):\n    return inches/12\ndef yards_to_inches(yards):\n    return yards*36\ndef yards_to_inches_2(yards):\n    return yards*36\ndef feet_to_inches(feet):\n    return feet*12\ndef inch_to_meters(inches):\n    return inches*0.0254\ndef feet_to_meters(feet):\n    return feet*0.3048\ndef meter_to_feet_2(meter):\n    return meter/0.3048\ndef meters_to_feet_2(meter):\n    return meter/0.3048\ndef meter_to_yards_2(meter):\n    return meter/0.914394\ndef meters_to_yards_2(meter):\n    return meter/0.914394\ndef meter_to_inches_2(meter):\n    return meter/0.0254\ndef feet_to_meter_2(feet):\n    return feet/0.3048\ndef feet_to_meter_3(feet):\n    return feet/0.3048\ndef feet_to_meter_4(feet):\n    return feet*0.3048\ndef feet_to_inches_2(feet):\n    return feet*12\ndef feet_to_inches_3(feet):\n    return feet*12\ndef feet_to_inches_4(feet):\n    return feet/0.3048\ndef feet_to_meter(feet):\n    return feet*0.3048\ndef meter_to_feet_3(meter):\n    return meter/0.3048\ndef meter_to_feet_3(mete",
        "num_ids": 1978
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\ndef radian_degree_test():\n    degree = 45\n    print(math.degrees(2*math.pi))\n    print(degree)\n    print(math.radians(degree))\n    assert math.degrees(math.pi) == 90\n    assert math.degrees(math.pi) == 90\n    assert math.degrees(math.pi) == 90\n    print(\"Exercise 1 output: %s\" % radian_degree(degree))\ndef ceiling(num):\n    '''\n    Write a function to calculate the ceiling of a number.\n    '''\n    return math.ceil(num)\ndef ceiling_test():\n    print(ceiling(3.1))\n    print(ceiling(3.9))\n    print(ceiling(4.1))\n    assert(ceiling(3.1)) == 4\n    assert(ceiling(3.9)) == 4\n    assert(ceiling(4.1)) == 5\n    print(\"Exercise 2 output: %s\" % ceiling(3.1))\n    print(\"Exercise 2 output: %s\" % ceiling(3.9))\n    print(\"Exercise 2 output: %s\" % ceiling(4.1))\ndef abs_val(num):\n    '''\n    Write a function to calculate the absolute value of a number.\n    '''\n    return math.fabs(num)\ndef abs_val_test():\n    print(abs_val(-4.1))\n    assert(abs_val(-4.1)) == 4.1\n    assert(abs_val(-4.1)) == 4.1\n    assert(abs_val(3.1)) == 3.1\n    print(\"Exercise 3 output: %s\" % abs_val(-4.1))\n    assert(abs_val(-4.1)) == 4.1\n    assert(abs_val(-4.1)) == 4.1\n    assert(abs_val(3.1)) == 3.1\n    print(\"Exercise 3 output: %s\" % abs_val(-4.1))\ndef abs_val_test():\n    print(abs_val(-4.1))\n    assert(abs_val(-4.1)) == 4.1\n    assert(abs_val(-4.1)) == 4.1\n    assert(abs_val(3.1)) == 3.1\n    print(\"Exercise 3 output: %s\" % abs_val(-4.1))\ndef circle_area(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef circle_area_test():\n    print(circle_area(3))\n    print(circle_area(1.5))\n    print(circle_area(2.5))\n    assert(circle_area(1.5)) == 3.3010299956639813\n    assert(circle_area(2.5)) == 9.40136986301369\n    assert(circle_area(3.5)) == 13.653320390850027\n    print(\"Exercise 4 output: %s\" % circle_area(3))\n    print(\"Exercise 4 output: %s\" % circle_area(1.5))\n    print(\"Exercise 4 output: %s\" % circle_area(2.5))\ndef my_abs(x):\n    '''\n    Write a function to calculate the absolute value of a number without using the abs() function.\n    '''\n    if x>0:\n        return x\n    else:\n        return -x\ndef my_abs_test():\n    print(my_abs(-4.1))\n    assert(my_abs(-4.1)) == 4.1\n    assert(my_abs(-4.1)) == 4.1\n    assert(my_abs(3.1)) == 3.1\n    print(\"Exercise 5 output: %s\" % my_abs(-4.1))\n    assert(my_abs(-4.1)) == 4.1\n    assert(my_abs(-4.1)) == 4.1\n    assert(my_abs(3.1)) == 3.1\n    print(\"Exercise 5 output: %s\" % my_abs(-4.1))\ndef absolute_value(x):\n    '''\n    Write a function to calculate the absolute value of a number without using the abs() function.\n    '''\n    if x>0:\n        return x\n    elif x<0:\n        return -x\n    elif x==0:\n        return 0\ndef absolute_value_test():\n    print(absolute_value(-4.1))\n    assert(absolute_value(-4.1)) == 4.1\n    assert(absolute_value(-4.1)) == 4.1\n    assert(absolute_value(3.1)) == 3.1\n    assert(absolute_value(0)) == 0\n    assert(absolute_value(-0)) == 0\n    print(\"Exercise 6 output: %s\" % absolute_value(-4.1))\n    assert(absolute_value(-4.1)) == 4.1\n    assert(absolute_value(-4.1)) == 4.1\n    assert(absolute_value(3.1)) == 3.1\n    assert(absolute_value(0)) == 0\n    assert(absolute_value(-0)) == 0\n    print(\"Exercise 6 output: %s\" % absolute_value(-4.1))\ndef absolute_value_test():\n    print(absolute_value(-4.1))\n    assert(absolute_value(-4.1)) == 4.1\n    assert(absolute_value(-4.1)) == 4.1\n    assert(absolute_value(3.1)) == 3.1\n    assert(absolute_value(0)) == 0\n    assert(absolute_value(-0)) == 0\n    print(\"Exercise 6 output: %s\" % absolute_value(-4.1))\ndef square_root(x):\n    '''\n    Write a function to compute the square root of a number without using the ** operator or the sqrt() function. \n    '''\n    return x**0.5\ndef square_root_test():\n    print(square_root(9))\n    print(square_root(16))\n    print(square_root(25))\n    print(square_root(1))\n    print(square_root(0))\n    assert(square_root(9)) == 3\n    assert(square_root(16)) == 4\n    assert(square_root(25)) == 5\n    assert(square_root(1)) == 1\n    assert(square_root(0)) == 0\n    print(\"Exercise 7 output: %s\" % square_root(9))\n    print(\"Exercise 7 output: %s\" % square_root(16))\n    print(\"Exercise 7 output: %s\" % square_root(25))\n    print(\"Exercise 7 output: %s\" % square_root(1))\n    print(\"Exercise 7 output: %s\" % square_root(0))\ndef square_root_test():\n    print(square_root(9))\n    print(square_root(16))\n    print(square_root(25))\n    print(square_root(1))\n    print(square_root(0))\n    assert(square_root(9)) == 3\n    assert(square_root(16)) == 4\n    assert(square_root(25)) == 5\n    assert(square_root(1)) == 1\n    assert(square_root(0)) == 0\n    print(\"Exercise 7 output: %s\" % square_root(9))\n    print(\"Exercise 7 output: %s\" % square_root(16))\n    print(\"Exercise 7 output: %s\" % square_root(25))\n    print(\"Exercise 7 output: %s\" % square_root(1))\n    print(\"Exercise 7 output: %s\" % square_root(0))\ndef ceil_of_ratio(dividend, divisor):\n    '''\n    Write a function to calculate the ceil of a ratio without using the math.ceil() function.\n    '''\n    return dividend//divisor + 1\ndef ceil_of_ratio_test():\n    print(ceil_of_ratio(11,5))\n    print(ceil_of_ratio(12,5))\n    print(ceil_of_ratio(13,5))\n    print(ceil_of_ratio(14,5))\n    assert(ceil_of_ratio(11,5)) == ",
        "num_ids": 105
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef cosine(a,b,c):\n    '''\n    Write a function to calculate the cosine of the angle ABC.\n    '''\n    result = (a*a + b*b - c*c)/(2*a*b)\n    return result\ndef sine(a,b,c):\n    '''\n    Write a function to calculate the sine of the angle ABC.\n    '''\n    result = math.sqrt(1-(cosine(a,b,c)*cosine(a,b,c)))\n    return result\ndef angle_deg(a,b,c):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return 180*a/math.pi\ndef angle_rad(a,b,c):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return a*math.pi/180\ndef angle_sin(a,b,c):\n    '''\n    Write a function to calculate the sine of the angle ABC.\n    '''\n    result = (a*a + b*b - c*c)/(2*a*b)\n    return result\ndef angle_cos(a,b,c):\n    '''\n    Write a function to calculate the cosine of the angle ABC.\n    '''\n    result = (a*a + b*b - c*c)/(2*a*b)\n    return result\ndef sine_rad(a,b,c):\n    '''\n    Write a function to calculate the sine of the angle ABC.\n    '''\n    result = math.sqrt(1-(angle_sin(a,b,c)*angle_sin(a,b,c)))\n    return result\ndef cosine_rad(a,b,c):\n    '''\n    Write a function to calculate the cosine of the angle ABC.\n    '''\n    result = math.sqrt(1-(angle_cos(a,b,c)*angle_cos(a,b,c)))\n    return result\ndef angle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle with radius r.\n    '''\n    return 2*math.pi*r\ndef angle_area(r):\n    '''\n    Write a function to calculate the area of a circle with radius r.\n    '''\n    return math.pi*r*r\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between point (x1,y1) and (x2,y2).\n    '''\n    result = math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n    return result\ndef midpoint(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the midpoint between point (x1,y1) and (x2,y2).\n    '''\n    x = (x1+x2)/2\n    y = (y1+y2)/2\n    return (x,y)\ndef angle_deg_between_points(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the angle, in degrees, between point (x1,y1) and point (x2,y2) and point (x3,y3).\n    '''\n    dx1 = x1-x2\n    dy1 = y1-y2\n    dx2 = x3-x2\n    dy2 = y3-y2\n    result = math.degrees(math.atan2(dy1*dx2-dy2*dx1, dx1*dx1+dy1*dy1)*(180/math.pi))\n    return result\ndef circle_area(r):\n    '''\n    Write a function to calculate the area of a circle with radius r.\n    '''\n    return math.pi*(r*r)\ndef circle_circumference(r):\n    '''\n    Write a function to calculate the circumference of a circle with radius r.\n    '''\n    return 2*math.pi*r\ndef distance_between_points(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the distance between point (x1,y1) and point (x2,y2).\n    '''\n    result = math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2))\n    return result\ndef radius_of_circumcircle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the radius of the circumcircle that passes through the points (x1,y1), (x2,y2) and (x3,y3).\n    '''\n    a = distance(x1,y1,x2,y2)\n    b = distance(x1,y1,x3,y3)\n    c = distance(x2,y2,x3,y3)\n    s = (a+b+c)/2\n    result = math.sqrt(s*(s-a)*(s-b)*(s-c))\n    return result\ndef distance_from_point_to_line(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the distance from point (x3,y3) to the line through point (x1,y1) and (x2,y2).\n    '''\n    result = math.sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1))\n    return result\ndef slope_of_line(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the slope of the line that passes through the points (x1,y1) and (x2,y2).\n    '''\n    dx = x2-x1\n    dy = y2-y1\n    if dx!= 0:\n        result = dy/dx\n    else:\n        result = \"undefined\"\n    return result\ndef intercept_of_line(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the y-intercept of the line that passes through the points (x1,y1) and (x2,y2).\n    '''\n    dx = x2-x1\n    dy = y2-y1\n    if dx!= 0:\n        result = y1 - (y1-y2)/(x1-x2)*x1\n    else:\n        result = \"undefined\"\n    return result\ndef distance_between_line_and_point(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the distance between point (x3,y3) and the line that passes through point (x1,y1) and (x2,y2).\n    '''\n    dx = x2 - x1\n    dy = y2 - y1\n    u = ((x3-x1)*dx + (y3-y1)*dy) / (dx*dx + dy*dy)\n    x = x1 + u*dx\n    y = y1 + u*dy\n    result = math.sqrt((x-x3)*(x-x3) + (y-y3)*(y-y3))\n    return result\ndef midpoint_of_line(x1,y1,x2,y2):\n    '''\n    Write a function to calculate the midpoint of the line that passes through the points (x1,y1) and (x2,y2).\n    '''\n    x = (x1+x2)/2\n    y = (y1+y2)/2\n    return (x,y)\ndef angle_between_points(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function to calculate the angle, in degrees, between point (x1,y1) and point (x2,y2) and point (x3,y3).\n    '''\n    dx1 = x1-x2\n    dy1 = y1-y2\n    dx2 = x3-x2\n    dy2 = y3-y",
        "num_ids": 40
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n",
        "num_ids": 12
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    #degree = int(degree)\n    radian = (degree * math.pi)/180\n    return radian\n",
        "num_ids": 29
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n",
        "num_ids": 12
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Make pattern a list\n    pattern = list(pattern)\n",
        "num_ids": 17
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #split string into words\n    words = re.split('\\s|(?<=[0-9])\\.|\\?|\\!|,|(?<=[0-9])\\|(?=[0-9])|\\-|\\(|\\)|\\:|;|\\n|\\r|\\'|\\\"|\\||(?<=[0-9])\\)',text)\n    #find matches for pattern in all words\n    matches = list(filter(None, [pattern.search(word) for word in words]))\n    #check if match in text\n    if not matches:\n        return None\n    #find first match\n    match = matches[0]\n    #return match\n    return match.group()\n",
        "num_ids": 170
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    return [match.group(0) for match in matches]\n",
        "num_ids": 31
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    reg = re.compile(pattern)\n    match = reg.search(text)\n    if match:\n        return match.group(0)\n    return None\n",
        "num_ids": 41
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    list_match = re.finditer(pattern, text)\n    for match in list_match:\n        print(match.group())\n",
        "num_ids": 34
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    result = regex.search(text)\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # matches = re.findall(pattern, text)\n    # return matches[0], matches[1], matches[2]\n    match = re.search(pattern, text)\n    return match.group(0)\n",
        "num_ids": 53
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find the first match\n    match = re.search(pattern, text)\n    if match:\n        start, end = match.span()\n        return text[start:end]\n    return None\n",
        "num_ids": 49
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    return re.search(pattern, text)\n",
        "num_ids": 13
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n",
        "num_ids": 38
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0]*(n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2,n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n",
        "num_ids": 68
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return sum(bell(i) for i in range(n+1))\n",
        "num_ids": 20
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n + 1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n    return bell[n]\n",
        "num_ids": 68
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1) \n    bell[0] = bell[1] = 1\n    for i in range(2, n+1): \n        bell[i] = bell[i-1] + bell[i-2] \n    return bell[n] \ndef find_nth_bell_number(n): \n    ''' \n    Find the nth bell number \n    '''\n    return bell_Number(n) \n",
        "num_ids": 12
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0,1,1] \n    for i in range(3,n+1): \n        bell[i] = bell[i-1]+bell[i-2] \n    return bell[n] \n  \ndef main(): \n    bell_Number(100) \n  \nif __name__=='__main__': \n    main() ",
        "num_ids": 90
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=1\n    for i in range(n):\n        bell=bell*(i+1)\n    return bell\n",
        "num_ids": 31
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] \n    for i in range(1, n+1): \n        bell += [bell[i-1] + bell[i-1]*i]\n    return bell[n]\n",
        "num_ids": 52
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #Bell number is the number of ways for n objects to choose k objects\n    if n == 0 or k == 0:\n        return 1\n",
        "num_ids": 34
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(n-1): \n        bell.append(bell[i]*(n-i))\n    return bell[n-1]\n",
        "num_ids": 46
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = [[1],[1,1]]\n    if(n<=1):\n        return bell_num[n]\n    for i in range(2,n):\n        bell_num.append([bell_num[i-1][0]+bell_num[i-2][0], bell_num[i-1][1]+bell_num[i-2][1]])\n    return bell_num[n]\n    \ndef print_Bell_Num(n):\n    '''\n    Write a python function to print nth bell number.\n    '''\n    bell_num = [[1],[1,1]]\n    if(n<=1):\n        print(bell_num[n])\n    else:\n        for i in range(2,n+1):\n            bell_num.append([bell_num[i-1][0]+bell_num[i-2][0], bell_num[i-1][1]+bell_num[i-2][1]])\n        print(bell_num[n])\n        \ndef count_Lattice_paths(m,n):\n    '''\n    Write a python function to calculate the number of lattice paths\n    from (0,0) to (m,n).\n    '''\n    bell_num = [[1],[1,1]]\n    if(m<=1 or n<=1):\n        return bell_num[m][n]\n    else:\n        for i in range(m+1):\n            bell_num.append([bell_num[i][0]+bell_num[i][1], bell_num[i][1]])\n        for j in range(1,n+1):\n            bell_num[j][0] = bell_num[j-1][0]+bell_num[j][0]\n        return bell_num[m][n]\n    \ndef print_Lattice_paths(m,n):\n    '''\n    Write a python function to print the number of lattice paths\n    from (0,0) to (m,n).\n    '''\n    bell_num = [[1],[1,1]]\n    if(m<=1 or n<=1):\n        print(bell_num[m][n])\n    else:\n        for i in range(m+1):\n            bell_num.append([bell_num[i][0]+bell_num[i][1], bell_num[i][1]])\n        for j in range(1,n+1):\n            bell_num[j][0] = bell_num[j-1][0]+bell_num[j][0]\n        print(bell_num[m][n])\n",
        "num_ids": 143
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for item in list1:\n        if list1.index(item)!= L:\n            list2.append(item)\n    return list2\n",
        "num_ids": 43
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = list1.copy()\n    list2.pop(L)\n    return list2\n",
        "num_ids": 26
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L = len(list1)\n    new_list = []\n    for i in range(L-1):\n        new_list.append(list1[i])\n    return new_list\n",
        "num_ids": 48
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        if i!= L:\n            new_list.append(list1[i])\n",
        "num_ids": 43
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L==0:\n        return []\n    elif L==1:\n        return list1[:1] + list1[2:]\n    else:\n        return list1[:L-1] + list1[L:]\n",
        "num_ids": 57
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < 2:\n        return []\n    else:\n        list1.pop(L)\n        return list1\n",
        "num_ids": 35
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n    pass\n",
        "num_ids": 22
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    a = list1.copy()\n    a.pop(L)\n    return a\n",
        "num_ids": 23
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    for i in range(L):\n        list1.pop(0)\n    return list1\n",
        "num_ids": 25
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[:L] + list1[L+1:]\n",
        "num_ids": 21
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if not test_list:\n        return None\n    elif len(test_list[0]) < N:\n        return None\n    else:\n        return [test_list[i][N-1] for i in range(len(test_list))]\n",
        "num_ids": 63
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([x[N-1] for x in test_list])\n",
        "num_ids": 20
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = int(test_list[i][j])\n    #print(test_list)\n    \n    res = []\n    for i in range(len(test_list)):\n        res.append(max(test_list[i]))\n    print(res[N-1])\n",
        "num_ids": 108
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return [row[N] for row in test_list]\n",
        "num_ids": 17
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Base case: matrix has less than N+1 columns\n    if len(test_list[0]) < N+1:\n        raise ValueError('Too small matrix')\n    \n    #Base case: N is negative\n    if N < 0:\n        raise ValueError('N is negative')\n    \n    #Base case: N is greater than the len of the matrix\n    if N > len(test_list):\n        raise ValueError('N is greater than the len of the matrix')\n    \n    max_list = [max(row) for row in test_list]\n    max_list = max(max_list)\n    \n    return max_list\n    \n    \n    \nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()",
        "num_ids": 184
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #return max([test_list[j][N] for j in range(len(test_list))])\n    return max(test_list[i][N] for i in range(len(test_list)))\n",
        "num_ids": 52
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_nth = test_list[0][N]\n",
        "num_ids": 19
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N > len(test_list) or N < 0:\n        print(\"Invalid input. The number of the column must be greater than 0 and less than the length of the matrix.\")\n    else:\n        result = []\n        for row in test_list:\n            result.append(max(row))\n        print(result)\n",
        "num_ids": 78
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([i[N] for i in test_list])\n",
        "num_ids": 18
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # l = []\n    # for i in range(len(test_list)):\n    #     l.append(max(test_list[i]))\n    # return max(l)\n",
        "num_ids": 48
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lista = []\n    for i in range(len(lst)):\n        lista.append([lst[i][0], lst[i][1]])\n    return lista\n",
        "num_ids": 48
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = [[lst[i][0], lst[i][1]] for i in range(len(lst))]\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n",
        "num_ids": 43
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [x[0] for x in lst],[x[1] for x in lst]\n    \ndef find_maximum(lst):  \n    '''\n    Write a python function which takes a list as an argument and returns the index of the minimum element in the list.\n    '''\n    return lst.index(min(lst))\n    \ndef max_and_index(lst):  \n    '''\n    Write a python function which takes a list as an argument and returns the index of the maximum element in the list.\n    '''\n    return lst.index(max(lst))\n",
        "num_ids": 15
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [l[0] for l in lst], [l[1] for l in lst]\n",
        "num_ids": 27
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0],lst[i][1]])\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    list1 = []\n    for sublist in lst:\n        list1.append(sublist[0])\n    list2 = []\n    for sublist in lst:\n        list2.append(sublist[1])\n    return [list1, list2]\n",
        "num_ids": 66
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new = []\n    for x in range(len(lst)):\n        new.append([lst[x][0],lst[x][1]])\n    return new\n",
        "num_ids": 45
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = [[lst[i][0],lst[i][1]] for i in range(len(lst))]\n    return merged_list\n",
        "num_ids": 41
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [l[0] for l in lst],[l[1] for l in lst]\n",
        "num_ids": 26
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return test_list\n    else:\n        return [sum(test_list[:i]) for i in range(1,len(test_list)+1)]\n",
        "num_ids": 48
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for index, element in enumerate(test_list):\n        total += element\n        test_list[index] = total\n    return test_list\n",
        "num_ids": 42
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    summation = 0\n    for x in range(len(test_list)):\n        summation += test_list[x]\n        new_list.append(summation)\n    return new_list\n",
        "num_ids": 60
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if not test_list:\n        return []\n    elif isinstance(test_list[0], list):\n        return cummulative_sum(cummulative_sum(test_list[0])) + cummulative_sum(test_list[1:])\n    elif isinstance(test_list[0], tuple):\n        return cummulative_sum(test_list[0]) + cummulative_sum(test_list[1:])\n    else:\n        return [test_list[0]] + cummulative_sum(test_list[1:])\n",
        "num_ids": 137
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list.sort()\n    return sum(test_list)\n",
        "num_ids": 19
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    test_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_of_values = 0\n    for i in test_list:\n        sum_of_values = sum_of_values + i\n",
        "num_ids": 89
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = test_list[:]\n    for i in range(1, len(test_list)):\n        test_list[i] = test_list[i] + test_list[i-1]\n    return test_list\n",
        "num_ids": 59
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    final_sum = 0\n    for i in test_list:\n        final_sum += i\n    return final_sum\n",
        "num_ids": 31
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    a = []\n    for i in nums:\n        a.append(sum(i) / len(i))\n    return tuple(a)\n",
        "num_ids": 37
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: sum(x)/len(x), nums))\n",
        "num_ids": 23
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_list = list(nums)\n    new_list = []\n    for tup in tuple_list:\n        for number in tup:\n            new_list.append(number)\n    return sum(new_list) / len(new_list)\n",
        "num_ids": 65
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if not nums:\n        return None\n    total = 0\n    for sub_tuple in nums:\n        total += sum(sub_tuple)\n    return total / len(nums)\n",
        "num_ids": 50
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if len(nums) > 0:\n        return [float(sum(col))/len(col) for col in zip(*nums)]\n    else:\n        return []\n",
        "num_ids": 44
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = list()\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    totals = []\n    for x in range(len(nums)):\n        totals.append(0)\n    for x in range(len(nums)):\n        for y in range(len(nums[x])):\n            totals[x] += nums[x][y]\n    return [x / len(nums) for x in totals]\n",
        "num_ids": 92
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        avg = 0\n        for n in num:\n            avg += n\n        avg /= len(num)\n        averages.append(avg)\n    return averages\n",
        "num_ids": 59
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    lst = []\n    for tup in nums:\n        lst.append(tup[1])\n    return (sum(lst)/len(lst))\n    ",
        "num_ids": 44
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(tup[0:1])+sum(tup[1:2])+sum(tup[2:3])) / 3 for tup in nums]\n    \n    \n    \n",
        "num_ids": 51
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(e1 % e2 for e1, e2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(tup1[i] % tup2[i] for i in range(len(test_tup1)))\n",
        "num_ids": 33
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x: x % y, test_tup1, test_tup2))\n",
        "num_ids": 28
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    return tuple(i % j for i, j in zip(tup1, tup2))\n",
        "num_ids": 47
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a%b for a, b in zip(test_tup1,test_tup2)])\n    \n",
        "num_ids": 32
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n",
        "num_ids": 53
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #your code here\n    res_tup = ()\n    for i in range(0, len(test_tup1)):\n        res_tup += (test_tup1[i] % test_tup2[i],)\n    return res_tup\n",
        "num_ids": 67
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n    else:\n        return None\n",
        "num_ids": 58
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x,y: x%y, test_tup1, test_tup2))\n",
        "num_ids": 30
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < 0 or d <= 0:\n        return -1\n    if steps == 0:\n        return 0\n    if d == steps:\n        return 1\n    if d > steps:\n        return -1\n    return min_Jumps(steps - 1, d) + min_Jumps(steps - 2, d - 1) + min_Jumps(steps - 3, d - 2)\n",
        "num_ids": 94
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # code here\n    if d > steps:\n        return 0\n    elif d == 0 or steps == 0:\n        return 1\n    else:\n        if steps < d:\n            return 0\n        return min_Jumps(steps-1,d) + min_Jumps(steps-d,d)\n",
        "num_ids": 75
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for x in steps:\n        if x[0] == d:\n            break\n        elif x[0] < d:\n            jumps += 1\n        else:\n            jumps += 1\n    return jumps\n",
        "num_ids": 59
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for i in range(steps):\n        if(i > 0):\n            if(abs(d - i) > abs(d - i - 1)):\n                jumps += 1\n        else:\n            jumps += 1\n    return jumps\n",
        "num_ids": 65
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    if d == 0: \n        return 0\n    \n    if steps <= 1: \n        return -1\n        \n    if steps == 2 and d == 1: \n        return 2\n    \n    \n    if d == 1: \n        return min_Jumps(steps-1, d) + 1\n        \n    if d == 2: \n        return min_Jumps(steps-2, d) + 2\n        \n    if d == 3: \n        return min_Jumps(steps-3, d) + 3\n    \n    return min(min_Jumps(steps-1, d-1) + 1, min_Jumps(steps-2, d-2) + 2, min_Jumps(steps-3, d-3) + 3)\n",
        "num_ids": 184
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # For example if the input is {1, 2, 3, 4, 5, 1}\n    # the first step would be to take the first step to go to (1, 0) \n    # and the second step would be to take the second step to go to (2, 0)\n    \n    # Now lets try to add them up to reach the given point (d, 0)\n    # d = 5, so we can only jump 1 or 2\n    # we can use a recursive method to solve this problem,\n    # where we try every step till we reach the point (d, 0)\n    \n    # Base case is if we reach the destination\n    if d == steps[0]:\n        return 1\n    \n    # Base case is if the step number exceeds the number of steps\n    if steps[0] > d:\n        return 0\n    \n    # Recursive Case\n    # We check every step till we reach the point (d, 0)\n    return min_Jumps(steps[1:], d) + min_Jumps(steps, d + steps[0])\n    \nprint(min_Jumps([1, 2, 3, 4, 5, 1], 5))\n",
        "num_ids": 274
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    distance = steps\n    while distance >= d:\n        jumps += 1\n        distance -= d\n    if distance == 0:\n        jumps -= 1\n    return jumps\n",
        "num_ids": 48
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0: \n        return 0\n    if steps < 0: \n        return -1\n    \n    jump = [0] * steps \n    for i in range(steps): \n        jump[i] = i + 1 \n    \n    for i in range(1, steps): \n        jump[i] = min(jump[i - 1] + 1, \n                    jump[i - d] + 1) \n        if i > d: \n            jump[i - d] = min(jump[i - d], jump[i] - 1) \n    return jump[-1] \n    \ndef jump(arr, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0 or arr[0] == 0: \n        return 0\n    \n    jumps = 0\n    curr_max = 0\n    \n    for i in range(len(arr)): \n        curr_max = max(i + arr[i], curr_max) \n        if curr_max >= len(arr) - 1: \n            return jumps + 1\n        if i == d - 1: \n            jumps += 1\n            d = curr_max \n            \n    return -1\n    \ndef is_number_balanced(string): \n    '''\n    Write a function to check if the given string is a number-string, balanced or not. Assume that all the numbers in the given string are separated by commas.\n    '''\n    digit_set = set() \n    count = 0\n    for i in range(len(string)): \n        if string[i]!= ',': \n            count = 0\n        if string[i]!= ',' and string[i] not in digit_set: \n            digit_set.add(string[i]) \n        elif string[i] in digit_set: \n            count += 1\n        \n        if count > 1: \n            return False\n    return len(digit_set) == 1\n    \ndef find_missing_letter(chars): \n    '''\n    Write a function to find the first non repeating character in given string. If not present return '\n    '''\n    c = 'a'\n    for i in range(len(chars)): \n        if chars[i]!= c: \n            return c \n        c = chr(ord(c) + 1)\n    return 'z'\n    \ndef sorted_order(arr): \n    '''\n    Write a function to check if the given string is a number-string, balanced or not. Assume that all the numbers in the given string are separated by commas.\n    '''\n    for i in range(len(arr)): \n        if arr[i] >= arr[i + 1]: \n            return False\n    return True\n    \ndef find_missing_letter2(chars): \n    '''\n    Write a function to find the first non repeating character in given string. If not present return '\n    '''\n    for i in range(len(chars)): \n        j = ord(chars[i]) - 1\n        while ord(chars[j]) == j + 1: \n            j -= 1\n        return chr(j + 1)\n    return 'z'\n    \ndef balanced_string(input_string): \n    '''\n    Write a function to check if the given string is a number-string, balanced or not. Assume that all the numbers in the given string are separated by commas.\n    '''\n    count = 0\n    for i in range(len(input_string)): \n        if input_string[i] == 'R': \n            count += 1\n        elif input_string[i] == 'L': \n            count -= 1\n        if count < 0: \n            return False\n    return count == 0\n    \ndef reverse_words(input_string): \n    '''\n    Write a function to reverse words in a given string.\n    '''\n    words = []\n    curr = ''\n    for i in range(len(input_string)): \n        if input_string[i] =='': \n            words.append(curr) \n            curr = ''\n        else: \n            curr += input_string[i]\n    words.append(curr)\n    \n    for i in range(len(words) // 2): \n        words[i], words[-i - 1] = words[-i - 1], words[i]\n        \n    return''.join(words)\n    \ndef reverse_words2(input_string): \n    '''\n    Write a function to reverse words in a given string.\n    '''\n    words = []\n    curr = ''\n    for i in range(len(input_string)): \n        if input_string[i] =='': \n            words.append(curr) \n            curr = ''\n        else: \n            curr += input_string[i]\n    words.append(curr)\n    \n    words.reverse()\n    return''.join(words)\n    \ndef min_window_substring(string, sub_string): \n    '''\n    Write a function to find the minimum substring from the given string that will contain all the characters from the given sub-string.\n    '''\n    if not string or not sub_string: \n        return ''\n    \n    required = dict()\n    for c in sub_string: \n        if c not in required: \n            required[c] = 0\n        required[c] += 1\n    \n    count = len(required)\n    \n    l, r = 0, 0\n    \n    formed = 0\n    window_counts = dict()\n    min_len = float('inf')\n    \n    ans = None\n    \n    while r < len(string): \n        c = string[r]\n        window_counts[c] = window_counts.get(c, 0) + 1\n        \n        if c in required and window_counts[c] == required[c]:\n            formed += 1\n        \n        while l <= r and formed == count: \n            c = string[l]\n            \n            if r - l + 1 < min_len:\n                ans = string[l:r + 1]\n                min_len = r - l + 1\n            \n            window_counts[c] -= 1\n            if c in required and window_counts[c] < required[c]:\n                formed -= 1\n            \n            l += 1\n        \n        r += 1\n    return ans\n    \ndef palindrome_partitioning_helper(s, idx, slate, result): \n    if idx == len(s): \n        result.append(' '.join(slate[:]))\n    else: \n        for i in range(idx, len(s)): \n            if s[idx:i + 1] == s[idx:i + 1][::-1]: \n                slate.append(s[idx:i + 1])\n                palindrome_partitioning_helper(s, i + 1, slate, result)\n                slate.pop()\n            \ndef palindrome_partitioning(s): \n    result = []\n    palindrome_partitioning_helper(s, 0, [], result)\n    return result\n    \ndef reverse_words_alternate(input_string): \n    '''\n    Write a function to reverse words in a given string.\n    '''\n    words = []\n    curr = ''\n    for i in range(len(input_string)): \n        if input_string[i] =='': \n            words.append(curr) \n            curr = ''\n        else: \n            curr += input_string[i]\n    words.append(curr)\n    \n    words.reverse()\n    return''.join(words)\n    \ndef reverse_words_alternate2(input_string): \n    '''\n    Write a function to reverse words in a given string.\n    '''\n    words = []\n    curr = ''\n    for i in range(len(input_string)): \n        if input_string[i] =='':",
        "num_ids": 39
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    num_jumps = 0\n    if d < 0:\n        return num_jumps\n    if steps <= d:\n        return 1\n    if steps == 0:\n        return 0\n    num_jumps += min_Jumps(steps - 1, d - 1)\n    num_jumps += min_Jumps(steps - 1, d)\n    return num_jumps\n",
        "num_ids": 91
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    return 2*steps//d\n",
        "num_ids": 10
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n = len(nums1)\n    result = []\n    for i in range(n):\n        result.append(nums1[i]/nums2[i])\n    return result\n    ",
        "num_ids": 50
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i]=nums1[i]/nums2[i]\n    return nums1\n",
        "num_ids": 43
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1,num2 in zip(nums1,nums2):\n        result.append(num1/num2)\n    return result\n",
        "num_ids": 42
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 % num2 == 0:\n                result.append(num1 / num2)\n    return result\n",
        "num_ids": 54
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res=[]\n    for i in range(len(nums1)):\n        res.append(nums1[i]/nums2[i])\n    return res\n    \n    ",
        "num_ids": 47
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list=[]\n    for x in nums1:\n        for y in nums2:\n            new_list.append(x/y)\n    return new_list\n",
        "num_ids": 45
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2), \"lenghts of two lists must be equal\"\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 58
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [x/y for x,y in zip(nums1,nums2)]\n",
        "num_ids": 24
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n",
        "num_ids": 56
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + \\\n           ''.join([i for i in test_str if i.isdigit()])\n",
        "num_ids": 47
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    new_str = ''\n    num_str = ''\n    \n    for c in test_str:\n        if c.isdigit():\n            num_str += c\n        else:\n            new_str += c\n            \n    return new_str + num_str\n    \n    \nprint(move_num('abc12d3e45fg67'))",
        "num_ids": 88
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l1 = re.findall('[0-9]+', test_str)\n    new_str = ''.join(l1)\n    return new_str + test_str\n",
        "num_ids": 45
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    for i in test_str:\n        if i.isdigit():\n            new_str += i\n    return new_str + test_str\n",
        "num_ids": 44
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    end_num = re.compile(r'[0-9]')\n    print(end_num.findall(test_str))\n",
        "num_ids": 36
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for char in test_str:\n        if char.isdigit():\n            return int(char)\n            \n    return 0\n",
        "num_ids": 33
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    no_num_list = []\n    for letter in test_str:\n        if letter.isnumeric():\n            num_list.append(letter)\n        else:\n            no_num_list.append(letter)\n    return \"\".join(no_num_list) + \"\".join(num_list)\n",
        "num_ids": 84
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    list_num=[]\n    for i in test_str:\n        if i.isdigit():\n            list_num.append(i)\n    new_str=''\n    for i in test_str:\n        if i.isalpha():\n            new_str+=i\n    for i in list_num:\n        new_str+=i\n    return new_str\n    \n",
        "num_ids": 92
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    output = ''\n    num = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num += test_str[i]\n        else:\n            output += test_str[i]\n    output += num\n    return output\n",
        "num_ids": 72
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = \"\"\n    for i in range(0,len(test_str)):\n        if test_str[i] in '1234567890':\n            s += test_str[i]\n    return s+test_str\n",
        "num_ids": 57
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return len(largest_subset_helper(a, {}))\n",
        "num_ids": 19
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # TODO: Write your code here\n    # if not a:\n    #     return None\n    # a.sort()\n    # a.append(0)\n    # dp = [1]*len(a)\n    # for i in range(len(a)):\n    #     for j in range(i):\n    #         if a[i] % a[j] == 0:\n    #             if dp[i] < dp[j]+1:\n    #                 dp[i] = dp[j]+1\n    # res = 0\n    # for i in range(len(a)):\n    #     if dp[i] > res:\n    #         res = dp[i]\n    # return res\n    dp = [1]*len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\n    \na = [1,2,3,4]\nprint(largest_subset(a)",
        "num_ids": 275
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def lst_check(lst):\n        '''\n        Returns a list of divisors of all pairs of numbers in the given list.\n        '''\n        lst_of_pairs = []\n        for i in lst:\n            for j in lst:\n                if i % j == 0:\n                    lst_of_pairs.append(j)\n        return lst_of_pairs\n",
        "num_ids": 62
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    sorted_a = sorted(a)\n    i = 0\n    #print(sorted_a)\n    while i < len(sorted_a) - 1:\n        if sorted_a[i] % sorted_a[i + 1]!= 0:\n            print(\"false\")\n            return\n        i += 1\n    print(\"true\")\n    return\n",
        "num_ids": 88
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return longest_subsequence(a, True)\n",
        "num_ids": 14
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return find_sizes_of_divisible_pairs(a, 0)\n",
        "num_ids": 22
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets = []\n    start_idx = 0\n    while start_idx < len(a):\n        subsets.append([a[start_idx]])\n        start_idx += 1\n    \n    start_idx = 2\n    while start_idx < len(a):\n        for i in range(len(subsets)):\n            subsets[i].append(a[start_idx])\n            subsets[i] = sorted(subsets[i], reverse=True)\n            if subsets[i][0] % subsets[i][1] == 0 and subsets[i][0]!= subsets[i][1]:\n                subsets.append(subsets[i][1:])\n                subsets[i][0] = -1\n        start_idx += 1\n    \n    subsets = [subset for subset in subsets if subset[0]!= -1]\n    return max([len(subset) for subset in subsets])\n",
        "num_ids": 234
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1,n):\n        for j in range(i,n):\n            if a[j] % a[i] == 0:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1])\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i-1][j-1],dp[i][j-1])\n    return dp[-1][-1]\n",
        "num_ids": 161
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False]*(n+1) for _ in range(n)]\n    for i in range(n+1):\n        dp[0][i] = False\n    for i in range(n):\n        dp[i][0] = True\n    for i in range(1, n):\n        for j in range(1, n+1):\n            if a[i-1]%j == 0:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j//2]\n            else:\n                dp[i][j] = dp[i-1][j]\n    print(dp[n-1][n])\n    print(dp)\n    for i in range(n+1):\n        for j in range(n+1):\n            print(dp[i][j], end=\"\\t\")\n        print()\n    print()\n    print()\n    return dp[n-1][n]\n",
        "num_ids": 239
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid = n // 2\n    if n % 2:\n        return arr2[mid]\n    else:\n        return (arr2[mid - 1] + arr2[mid]) / 2\n",
        "num_ids": 61
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Initialize variables to store middle elements of arr1 and arr2\n    m1 = 0\n    m2 = 0\n    # Initialize a variable to store the final median\n    median = 0\n",
        "num_ids": 48
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # if n == 0:\n    #     return None\n    # elif n == 1:\n    #     return min(arr1[0], arr2[0])\n    # elif n == 2:\n    #     return (min(arr1[0], arr2[0]) + max(arr1[1], arr2[1])) / 2\n    # elif n == 3:\n    #     return max(arr1[0], arr2[0], arr1[1], arr2[1], arr1[2], arr2[2])\n    # elif n == 4:\n    #     return (max(arr1[0], arr2[0], arr1[1], arr2[1], arr1[2], arr2[2]) + min(arr1[3], arr2[3])) / 2\n    # elif n == 5:\n    #     return (max(arr1[0], arr2[0], arr1[1], arr2[1], arr1[2], arr2[2], arr1[3], arr2[3], arr1[4], arr2[4])) / 2\n",
        "num_ids": 264
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return max(arr1[0], arr2[0])\n    else:\n        if arr1[n//2] < arr2[n//2]:\n            return get_median(arr1[n//2:], arr2, n//2)\n        else:\n            return get_median(arr1, arr2[n//2:], n//2)\n",
        "num_ids": 96
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return n/2.0\n",
        "num_ids": 10
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    else:\n        mid_idx = n // 2\n        \n        if arr1[mid_idx] < arr2[mid_idx]:\n            arr1, arr2 = arr2, arr1\n        \n        if n % 2 == 0:\n            return (arr1[mid_idx] + arr2[mid_idx]) / 2\n        else:\n            return arr2[mid_idx]\n            \nif __name__ == \"__main__\":\n    test_cases = [\n        (([1, 3, 4, 6, 7, 9, 11], [2, 4, 5, 7, 8, 10, 12]), 5),\n        (([1, 3, 4, 6, 7, 9, 11], [2, 4, 5, 7, 8, 10, 12]), 4.5),\n        (([1, 3, 4, 6, 7, 9, 11], [2, 4, 5, 7, 8, 10, 12]), 5)\n    ]\n    \n    for arr1, arr2, expected in test_cases:\n        result = get_median(arr1, arr2, len(arr1))\n        assert result == expected, result\n        \n        result = get_median(arr1, arr2, len(arr2))\n        assert result == expected, result",
        "num_ids": 326
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    total = n\n    i = 0\n    j = 0\n    while i < n and j < n:\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n    if i == n:\n        return arr2[j - 1]\n    elif j == n:\n        return arr1[i - 1]\n    else:\n        return max(arr1[i - 1], arr2[j - 1])\n",
        "num_ids": 114
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if(n==1):\n        return arr1[0]\n    if(n==0):\n        return arr2[0]\n    i=0\n    j=0\n    newarr=[]\n    while(i<n and j<n):\n        if(arr1[i]<arr2[j]):\n            newarr.append(arr1[i])\n            i+=1\n        else:\n            newarr.append(arr2[j])\n            j+=1\n    while(i<n):\n        newarr.append(arr1[i])\n        i+=1\n    while(j<n):\n        newarr.append(arr2[j])\n        j+=1\n    if(n%2!=0):\n        return newarr[n//2]\n    else:\n        med=(newarr[n//2]+newarr[n//2-1])/2\n        return med\n",
        "num_ids": 217
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Start with a variable to keep track of the total comparisons.\n    # There are n+n\u22121/2 comparisons.\n    comparisons = n + n - 1/2\n    \n    # We can initialize the pointers at the two ends of the arrays.\n    left_pointer = 0\n    right_pointer = n - 1\n    \n    # This variable keeps track of the pointer to the final median.\n    median_pointer = 0\n    \n    # Start with the two pointers at the start of each list.\n    left_pointer = 0\n    right_pointer = n - 1\n    \n    # If both lists are empty, then we cannot find the median, so we return None.\n    if n == 0:\n        return None\n    \n    # This variable keeps track of the current median.\n    current_median = 0\n    \n    # This variable keeps track of the number of comparisons we do.\n    comparison_count = 0\n    \n    # While the pointers do not cross, we will continue to search.\n    while left_pointer < n and right_pointer >= 0:\n        \n        # We compare the values at the current pointers for each array.\n        comparison_count += 1\n        \n        # If the first array's current value is greater, we move the right pointer to the left.\n        # We update the median pointer if necessary.\n        if arr1[left_pointer] > arr2[right_pointer]:\n            current_median = arr2[right_pointer]\n            median_pointer = right_pointer\n            right_pointer -= 1\n        else:\n            current_median = arr1[left_pointer]\n            median_pointer = left_pointer\n            left_pointer += 1\n    \n    # If we get to here, then the median is the last element in the first array.\n    if left_pointer == n:\n        current_median = arr2[right_pointer]\n        median_pointer = right_pointer\n    \n    # If we get to here, then the median is the last element in the second array.\n    if right_pointer == -1:\n        current_median = arr1[left_pointer]\n        median_pointer = left_pointer\n    \n    # We know the total number of comparisons, so we can return it.\n    return (comparisons, comparison_count, current_median, median_pointer)\n",
        "num_ids": 551
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        print('length is 0')\n        return\n    mid = n//2\n    if n%2 == 0:\n        return (arr1[mid]+arr2[mid])/2\n    else:\n        if arr1[mid] > arr2[mid]:\n            return arr2[mid+1]\n        else:\n            return arr1[mid+1]\n",
        "num_ids": 94
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    # Use lambda to create the function, so we don't have to pass in the original list nums to the funciton\n    return list(map(lambda x:x**n,nums))\n",
        "num_ids": 46
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\nprint(nth_nums([1, 2, 3, 4], 2))\n",
        "num_ids": 34
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x:x**n,nums))\n",
        "num_ids": 19
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n",
        "num_ids": 15
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num**n)\n    return results\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #create empty list to store values\n    ans = []\n    for num in nums:\n        ans.append(num**n)\n    return ans\n",
        "num_ids": 38
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result\n",
        "num_ids": 29
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    lst=[]\n    for i in nums:\n        lst.append(i**n)\n    return lst\nprint(nth_nums([1,2,3,4],2)",
        "num_ids": 50
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    \ndef concatenate(str1, str2):\n    '''\n    Write a python function to concatenate two strings.\n    '''\n    return str1+str2\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n    #pass\n",
        "num_ids": 13
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "num_ids": 9
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    #pass\n    return string.upper()\n",
        "num_ids": 13
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "num_ids": 10
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string\n",
        "num_ids": 14
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    print('Original List: ', newList)\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print('List after swapping: ', newList)\n",
        "num_ids": 58
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    n = len(newList)\n    newList[0], newList[n-1] = newList[n-1], newList[0] \n    return newList\n",
        "num_ids": 44
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n",
        "num_ids": 33
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n",
        "num_ids": 31
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp=newList[0]\n    newList[0]=newList[-1]\n    newList[-1]=temp\n    print(newList)\n",
        "num_ids": 40
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList\n",
        "num_ids": 45
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listSize = len(newList)\n    if listSize < 2:\n        print(\"The list is smaller than 2. Exiting\")\n        return\n    print(\"The list before the swap: \", newList)\n    temp = newList[0]\n    newList[0] = newList[listSize - 1]\n    newList[listSize - 1] = temp\n    print(\"The list after the swap: \", newList)\n",
        "num_ids": 102
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #newList = [1,2,3,4]\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    print(newList)\n",
        "num_ids": 57
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #V = (pi*r^2)/(2*r) - (pi*r^2)/(4*r^2)\n    V = (math.pi*r**2)/(2*r) - (math.pi*r**2)/(4*r**2)\n    return V\n",
        "num_ids": 73
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #The area of the triangle is found by using the general formula for area of a triangle,\n    #where the height and the base is used to find the area.\n    #The radius of the semicircle is also used to find the area of the triangle.\n    #r = radius of the semicircle\n    #Area = Sqrt(r^2 x (r^2 + (h/2)^2))\n    #Area = r^2 x (r^2 + (h/2)^2)^0.5\n    #r^2 + (h/2)^2) = h^2\n    #r^2 = h^2 - (h/2)^2\n    #Sqrt(r^2 x (r^2 + (h/2)^2)) = r^2 * (1 + (h/2)^2)^0.5\n    h = r * 2\n    return r**2 * (1 + (h/2)**2)**0.5\n",
        "num_ids": 233
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # import math\n    # return math.pi*r**2/2\n",
        "num_ids": 20
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r <= 0 : \n        raise ValueError(\"Please enter a positive radius.\")\n    return pi * r * r\n    #A triangle can be inscribed in a semi circle iff R^2 = (a^2 + b^2) / 4.\n    #a = R / sqrt(2)\n    #b = sqrt(R^2 - a^2)\n    #return 0.25 * a * b\n",
        "num_ids": 99
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    #r = int(input(\"Enter the radius of the semicircle : \"))\n    \n    r_sqrd = r*r\n    area_triangle = (r_sqrd*3)/2\n    \n    print(\"The area of the triangle is {}\".format(area_triangle))\n    \ndef rectangle_area(a,b) : \n    '''\n    Write a python function to find the area of the rectangle with given length and breadth.\n    '''\n    \n    #a = int(input(\"Enter the length of the rectangle : \"))\n    #b = int(input(\"Enter the breadth of the rectangle : \"))\n    \n    area_rectangle = a*b\n    print(\"The area of the rectangle is {}\".format(area_rectangle))\n    \ndef parallelogram_area(a,b) : \n    '''\n    Write a python function to find the area of the parallelogram with given base and height.\n    '''\n    \n    #a = int(input(\"Enter the base of the parallelogram : \"))\n    #b = int(input(\"Enter the height of the parallelogram : \"))\n    \n    area_parallelogram = a*b\n    print(\"The area of the parallelogram is {}\".format(area_parallelogram))\n    \ndef trapezoid_area(a,b,h) :\n    '''\n    Write a python function to find the area of the trapezoid with given base, height and slant height.\n    '''\n    \n    #a = int(input(\"Enter the base of the trapezoid : \"))\n    #b = int(input(\"Enter the height of the trapezoid : \"))\n    #h = int(input(\"Enter the slant height of the trapezoid : \"))\n    \n    area_trapezoid = (a+b)*h/2\n    print(\"The area of the trapezoid is {}\".format(area_trapezoid))\n    \ndef circle_area(r) : \n    '''\n    Write a python function to find the area of the circle with given radius.\n    '''\n    \n    #r = int(input(\"Enter the radius of the circle : \"))\n    \n    pi = 3.14\n    \n    area_circle = pi*r*r\n    print(\"The area of the circle is {}\".format(area_circle))\n    \ndef sphere_area(r) :\n    '''\n    Write a python function to find the area of the sphere with given radius.\n    '''\n    \n    #r = int(input(\"Enter the radius of the sphere : \"))\n    \n    pi = 3.14\n    \n    area_sphere = 4*pi*r*r\n    print(\"The area of the sphere is {}\".format(area_sphere))\n    \ndef sector_area(r,alpha) : \n    '''\n    Write a python function to find the area of the sector with given radius and angular extent.\n    '''\n    \n    #r = int(input(\"Enter the radius of the sector : \"))\n    #alpha = int(input(\"Enter the angular extent of the sector : \"))\n    \n    pi = 3.14\n    alpha = (alpha/360)*2*pi\n    \n    area_sector = (alpha/2)*(r**2)\n    print(\"The area of the sector is {}\".format(area_sector))\n    \ndef ellipse_area(a,b) : \n    '''\n    Write a python function to find the area of the ellipse with given major and minor axes.\n    '''\n    \n    #a = int(input(\"Enter the major axis of the ellipse : \"))\n    #b = int(input(\"Enter the minor axis of the ellipse : \"))\n    \n    pi = 3.14\n    \n    area_ellipse = pi*a*b\n    print(\"The area of the ellipse is {}\".format(area_ellipse))\n    \ndef circle_area_area(r) : \n    '''\n    Write a python function to find the area of the circle by using another function for area.\n    '''\n    \n    #r = int(input(\"Enter the radius of the circle : \"))\n    \n    pi = 3.14\n    \n    area_circle = pi*r*r\n    \n    circle_area_area(r)\n    \n    print(\"The area of the circle is {}\".format(area_circle))\n    \ndef cube_area(r) : \n    '''\n    Write a python function to find the surface area of the cube with given radius.\n    '''\n    \n    #r = int(input(\"Enter the radius of the cube : \"))\n    \n    surface_area = 6*(r**2)\n    print(\"The surface area of the cube is {}\".format(surface_area))\n    \ndef pyramid_area(a,h) :\n    '''\n    Write a python function to find the surface area of the pyramid with given base and height.\n    '''\n    \n    #a = int(input(\"Enter the base of the pyramid : \"))\n    #h = int(input(\"Enter the height of the pyramid : \"))\n    \n    surface_area = (a*h)/2\n    print(\"The surface area of the pyramid is {}\".format(surface_area))\n    \ndef rectangle_area_area(a,b) : \n    '''\n    Write a python function to find the surface area of the rectangle with given length and breadth.\n    '''\n    \n    #a = int(input(\"Enter the length of the rectangle : \"))\n    #b = int(input(\"Enter the breadth of the rectangle : \"))\n    \n    surface_area = a*b\n    print(\"The surface area of the rectangle is {}\".format(surface_area))\n    \ndef cone_area_area(r,h) :\n    '''\n    Write a python function to find the surface area of the cone with given radius and height.\n    '''\n    \n    #r = int(input(\"Enter the radius of the cone : \"))\n    #h = int(input(\"Enter the height of the cone : \"))\n    \n    surface_area = pi*r*r + pi*r*h\n    print(\"The surface area of the cone is {}\".format(surface_area))\n    \ndef cylinder_area_area(r,h) :\n    '''\n    Write a python function to find the surface area of the cylinder with given radius and height.\n    '''\n    \n    #r = int(input(\"Enter the radius of the cylinder : \"))\n    #h = int(input(\"Enter the height of the cylinder : \"))\n    \n    surface_area = 2*pi*r*(r+h)\n    print(\"The surface area of the cylinder is {}\".format(surface_area))\n    \ndef sphere_area_area(r) :\n    '''\n    Write a python function to find the surface area of the sphere with given radius.\n    '''\n    \n    #r = int(input(\"Enter the radius of the sphere : \"))\n    \n    surface_area = 4*pi*r*r\n    print(\"The surface area of the sphere is {}\".format(surface_area))\n    \ndef cylinder_volume(r,h) :\n    '''\n    Write a python function to find the volume of the cylinder with given radius and height.\n    '''\n    \n    #r = int(input(\"Enter the radius of the cylinder : \"))\n    #h = int(input(\"Enter the height of the cylinder : \"))\n    \n    pi = 3.14\n    \n    volume_cylinder = pi*r*r*h\n    print(\"The volume of the cylinder is {}\".format(volume_cylinder))\n    \ndef cone_volume(r,h) :\n    '''\n    Write a python function to find the volume of the cone with given radius and height.\n    '''\n    \n    #r = int(input(\"Enter the radius of the cone : \"))\n    #h = int(input(\"Enter the height of the cone : \"))\n    \n    pi = 3.14\n    \n    volume_cone = pi*r*r*h/3\n    print(\"The volume of the cone is {}\".format(volume_cone))\n    \ndef pyramid_volume(a,h) :\n    '''\n    Write a python function to find the volume of the pyramid with given base and height.\n    '''\n    \n    #a = int(input(\"Enter the base of the pyramid : \"))\n    #h = int(inpu",
        "num_ids": 30
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return math.pi*(r**2)*(3*r/2)\n",
        "num_ids": 21
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #  \n    #\n    # print(r)\n    # r = int(input(\"Please enter a radius of a semicircle: \"))\n    #\n    # from math import pi\n    # print(pi * r ** 2)\n    # print(r ** 2 * 3.14)\n    # print((r ** 2) * 3.14 / 2)\n    # print((r ** 2) * 3.14 / 2 - r ** 2)\n    # print((r ** 2) * 3.14 / 2 - r ** 2)\n    # print(3.14 * (r ** 2))\n    # print(3.14 * (r ** 2 - r ** 2))\n    # print(3.14 * (r ** 2 - r ** 2))\n    # # print(3.14 * (r ** 2 - r ** 2))\n    # print(r ** 2 * 3.14 / 2)\n    # print((r ** 2) * 3.14 / 2 - r ** 2)\n    # print(r ** 2 * 3.14 / 2 - r ** 2)\n    # print((r ** 2) * 3.14 / 2 - r ** 2)\n    # print(r ** 2 * 3.14 / 2)\n    # # print(r ** 2 * 3.14 / 2)\n    # # print(r ** 2 * 3.14 / 2)\n    # print(3.14 * r ** 2)\n    # print(3.14 * (r ** 2 - r ** 2))\n    # print(3.14 * (r ** 2 - r ** 2))\n    # print(3.14 * r ** 2)\n    # print(3.14 * (r ** 2 - r ** 2))\n    # print(3.14 * (r ** 2 - r ** 2))\n    # print(3.14 * r ** 2)\n",
        "num_ids": 428
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pass\n    area = 2 * 3.14 * r ** 2\n    return area\n",
        "num_ids": 22
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if type(r)!= int :\n        return None\n",
        "num_ids": 16
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # area of triangle = 1/2 * b * h\n    \n    # b = (2 * r * cos(60)) / sin(60)\n    # h = (2 * r * cos(60)) / cos(60)\n    \n    # h = 2 * r / cos(60)\n    # b = 2 * r * cos(60) / sin(60)\n    \n    b = 2 * r * math.cos(math.radians(60)) / math.sin(math.radians(60))\n    h = 2 * r * math.cos(math.radians(60)) / math.cos(math.radians(60))\n    \n    area = 0.5 * b * h\n    \n    return area\n    ",
        "num_ids": 173
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    if start > end:\n        return \"No missing number in this list.\"\n    elif start == end:\n        if array[start]!= start + 1:\n            return start + 1\n        else:\n            return array[start]\n    mid = (start + end) // 2\n    if array[mid] == mid + 1:\n        return find_First_Missing(array,mid + 1,end)\n    elif array[mid] == mid + 2:\n        return find_First_Missing(array,start,mid - 1)\n    elif array[mid] == array[mid - 1]:\n        return find_First_Missing(array,mid + 1,end)\n    else:\n        return array[mid]\n",
        "num_ids": 188
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start < end:\n        mid = int((start+end)/2)\n        if array[mid] == mid+1:\n            return find_First_Missing(array,start,mid-1)\n        else:\n            return find_First_Missing(array,mid+1,end)\n    return start\n",
        "num_ids": 91
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for number in range(start,end):\n        if array[number]!= number + start:\n            return number + start\n    return -1\n",
        "num_ids": 52
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n    return end\n",
        "num_ids": 47
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start>=len(array):\n        return\n    if end is None:\n        end = len(array)\n    if array[start]!= start:\n        return start\n    if array[end-1]!=end:\n        return end\n    return find_First_Missing(array,start+1,end-1)\n",
        "num_ids": 81
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if start>=len(array):\n        return None\n    if end is None:\n        end=len(array)-1\n    if array[start]!=start:\n        return start\n    if array[end]!=end+1:\n        return end+1\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid)\n",
        "num_ids": 122
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n",
        "num_ids": 17
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if(end == None):\n        end = len(array)\n    while(start < end):\n        mid = start + (end-start)//2\n        if(array[mid] == mid+1):\n            start = mid + 1\n        else:\n            end = mid\n    return start\n",
        "num_ids": 72
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not array:\n        return 1\n",
        "num_ids": 12
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # if start>end:\n    #     raise ValueError(\"Cannot find the smallest missing number from the list!\")\n    if end==None:\n        end=len(array)\n    # We will start from the last element of the array.\n    # And the end index will be one before the length of the array.\n    for i in range(end-1,start-1,-1):\n        if array[i]!=i+1:\n            return i+1\n    return 0\n",
        "num_ids": 116
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "num_ids": 14
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    for i in range(len(string)):\n        if string[i] =='':\n            string = string[:i] + '%20' + string[i+1:]\n    return string\n",
        "num_ids": 49
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return '%20'.join(string.split(' '))\n",
        "num_ids": 17
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # result = string.replace(' ', '%20')\n    result = re.sub(' ', '%20', string)\n    return result\n",
        "num_ids": 35
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \",\"%20\")\n    return string\n",
        "num_ids": 19
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] =='':\n            string_list[i] = '%20'\n    return ''.join(string_list)\n",
        "num_ids": 62
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n",
        "num_ids": 13
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n",
        "num_ids": 14
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for x in list:\n        if x % 2 == 0:\n            even_list.append(x)\n    return even_list\n    \n",
        "num_ids": 43
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list:\n        if (i % 2 == 0):\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return even_list, odd_list\n",
        "num_ids": 67
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i%2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n",
        "num_ids": 44
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for num in list:\n        if num % 2 == 0:\n            even_num.append(num)\n    return even_num\n",
        "num_ids": 41
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    list_even=[]\n    while i < len(list):\n        if list[i] % 2 == 0:\n            list_even.append(list[i])\n        i += 1\n    return list_even\n",
        "num_ids": 58
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evn_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            evn_numbers.append(i)\n    return evn_numbers\n",
        "num_ids": 47
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for x in list:\n        if (x%2==0):\n            even_num.append(x)\n    return even_num\n",
        "num_ids": 42
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    ev_numbers = []\n    ev_numbers = [num for num in list if num%2==0]\n    return ev_numbers\n",
        "num_ids": 37
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if (i % 2 == 0):\n            even_numbers.append(i)\n    return even_numbers\n",
        "num_ids": 45
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    #define variables\n    #ele: current position of the tuple\n    #sub: sublist to save the all the adjacent coordinates\n    #coordinate tuple: x,y\n    #define function\n    #if there is no adjacent coordinates, return sub\n    if ele[0] == 0 or ele[0] == len(matrix) - 1 or ele[1] == 0 or ele[1] == len(matrix) - 1:\n        return sub\n    else:\n        #save the all the adjacent coordinates in sub\n        sub.append((ele[0]-1, ele[1]))\n        sub.append((ele[0]+1, ele[1]))\n        sub.append((ele[0], ele[1]-1))\n        sub.append((ele[0], ele[1]+1))\n        return adjac(sub.pop())\n",
        "num_ids": 196
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(ele) == 0:\n        return []\n    elif len(ele) == 1:\n        return [tuple(sub + [ele[0], ele[0]])]\n    else:\n        list = adjac([ele[0], ele[1]]) + adjac([ele[0], ele[1], ele[2]])\n        return list + adjac(ele[1:])\n    \ndef in_range(coord, range):\n    '''\n    Write a function to check whether the given coordinate tuple is in the range.\n    '''\n    if range == []:\n        return True\n    else:\n        if coord[0] in range or coord[1] in range:\n            return True\n        else:\n            return False\n        \ndef check_neighbours(coord, board):\n    '''\n    Write a function to check whether the given coordinate tuple has any neighbours.\n    '''\n    if coord[0] in range(0, len(board)) and coord[1] in range(0, len(board[0])):\n        return adjac([coord[0], coord[1]])\n    else:\n        return None\n        \ndef get_first_player_in_range(state, player, range):\n    '''\n    Write a function to get the first player in the given range of given state.\n    '''\n    for y in range:\n        for x in range:\n            if state[y][x] == player:\n                return (y, x)\n    return None\n",
        "num_ids": 40
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global path\n    if ele not in sub:\n        sub.append(ele)\n        \n        #for each element in sub, find its neighbours\n        for neighbour in [(ele[0]-1,ele[1]), (ele[0]+1,ele[1]), (ele[0],ele[1]-1), (ele[0],ele[1]+1)]:\n            adjac(neighbour, sub)\n    return sub\n        \n",
        "num_ids": 103
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return ele + tuple(map(lambda x: x + 1, ele) + map(lambda x: x - 1, ele) + map(lambda x: x + 1j, ele) + map(lambda x: x - 1j, ele))\n",
        "num_ids": 58
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not sub:\n        sub.append(ele)\n    else:\n        for i in range(len(sub)):\n            if ele[0] in range(sub[i][0] - 1, sub[i][0] + 2) and ele[1] in range(sub[i][1] - 1, sub[i][1] + 2):\n                sub[i] = ele\n    return sub\n",
        "num_ids": 98
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if not(i == j == 0):\n                sub.append( (ele[0] + i, ele[1] + j) )\n    return sub\n",
        "num_ids": 61
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    '''\n    In [3]: adjac((1, 2))\n    Out[3]: [(1, 3), (1, 4), (2, 3), (2, 4)]\n    '''\n    return [(ele[0] + x, ele[1] + y) for x, y in [(0, 1), (0, -1), (1, 0), (-1, 0)]]\n",
        "num_ids": 47
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == []:\n        return sub\n    else:\n        sub.append(ele)\n        return adjac(ele[1:], sub)\n",
        "num_ids": 38
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele[0], ele[1]\n    adjacent_coordinates = [(x + i, y + j) for i in [-1, 0, 1] for j in [-1, 0, 1] if not (i == j == 0)]\n    #return adjacent_coordinates\n    #print(adjacent_coordinates)\n    if sub!= []:\n        for i in sub:\n            for j in adjacent_coordinates:\n                if j not in sub:\n                    return adjac(j, sub + [j])\n    return adjacent_coordinates\n",
        "num_ids": 134
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    add = [i for i in [abs(ele[0]-1), abs(ele[0]+1), abs(ele[1]-1), abs(ele[1]+1), abs(ele[2]-1), abs(ele[2]+1)] if i not in sub]\n    return add\n",
        "num_ids": 70
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return '_'.join(text.split(' '))\n",
        "num_ids": 16
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text.find('_') >= 0:\n        return text.replace('_','').strip()\n    else:\n        return text.replace(' ', '_').strip()",
        "num_ids": 43
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n",
        "num_ids": 19
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace('_',' ')\n    text = text.replace(' ','_')\n    return text\n",
        "num_ids": 30
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = text.replace(\" \", \"_\")\n    return result\n",
        "num_ids": 17
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # for i in text:\n    #     if i == '_':\n    #         text = text.replace('_','')\n    #     elif i =='':\n    #         text = text.replace(' ', '_')\n    return text.replace('_','').replace(' ', '_')\n    \ndef find_longest_word(text):\n    '''\n    Write a function that returns the longest word in a given text. If two or more words are found, return the first longest word found.\n    '''\n    words = text.split()\n    longest = words[0]\n    for i in words:\n        if len(i) > len(longest):\n            longest = i\n    return longest\n",
        "num_ids": 49
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return ''.join(text.replace(' ', '_').replace('_',''))\n",
        "num_ids": 23
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    for j in num_list:\n        if j == 0:\n            num_list.pop(i)\n            num_list.append(0)\n        else:\n            i+=1\n    return num_list\n",
        "num_ids": 58
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list.sort(reverse=True)\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\nprint(move_zero([0,1,0,3,12]))\nprint(move_zero([1,7,0,0,8,0,10]))\nprint(move_zero([0,0,0,2,0,1,3,0,0,0,0,0]))\n",
        "num_ids": 128
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for i in num_list:\n        if i!= 0:\n            new_list.append(i)\n    for i in new_list:\n        num_list.remove(i)\n    for i in range(num_list.count(0)):\n        num_list.append(0)\n    return num_list\n",
        "num_ids": 87
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    new_list.extend([0]*num_list.count(0))\n    return new_list\n",
        "num_ids": 62
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = num_list[:]\n    index_list = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            index_list.append(i)\n    if index_list:\n        for i in range(len(index_list)):\n            num_list.pop(index_list[0])\n            num_list.append(0)\n    return num_list\n    \ndef move_zeros(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    num_list = num_list[:]\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            count += 1\n    while count:\n        num_list.append(0)\n        count -= 1\n    return num_list\n",
        "num_ids": 85
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for j in range(len(num_list)):\n        if num_list[j] == 0:\n            num_list.pop(j)\n            num_list.append(0)\n            break\n    return num_list\n",
        "num_ids": 57
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # return num_list[:]\n    index = 0\n    for x in num_list:\n        if x == 0:\n            num_list.pop(index)\n            num_list.append(0)\n        else:\n            index += 1\n    return num_list\n",
        "num_ids": 67
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    no_zero = [i for i in num_list if i!= 0]\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            no_zero.append(0)\n    return no_zero\n",
        "num_ids": 64
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    length = len(num_list)\n    j = length - 1\n    i = length - 2\n    while i >= 0:\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            j -= 1\n        i -= 1\n    return num_list\n",
        "num_ids": 88
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    for i in range(n):\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(num_list.index(num_list[i])))\n    return num_list\n",
        "num_ids": 66
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    '''\n    Code :\n    '''\n    def sum_xor(arr,n) : \n        x = 0\n        for i in range(n) : \n            for j in range(i+1, n) : \n                x = x^arr[i]^arr[j]\n        return x\n    return sum_xor(arr,n)\n",
        "num_ids": 78
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    sum_xor = 0\n    for i in range(n-1) : \n        for j in range(i+1,n) : \n            sum_xor = sum_xor ^ (arr[i] ^ arr[j])\n    return sum_xor\n",
        "num_ids": 73
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    # iterate over the list \n    for i in range(n): \n        for j in range(i + 1, n): \n            result = result ^ (arr[i] ^ arr[j])\n    return result \n",
        "num_ids": 61
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ arr[i] ^ arr[j]\n    return sum\n",
        "num_ids": 48
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum\n",
        "num_ids": 58
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(0, n):\n        for j in range(i + 1, n):\n            sum_xor ^= arr[i] ^ arr[j]\n    return sum_xor\n",
        "num_ids": 58
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    s = 0\n    for i in range(len(arr)-1) : \n        s = s ^ arr[i] ^ arr[i+1]\n    return s \n",
        "num_ids": 50
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n-1) : \n        for j in range(i+1,n) : \n            xor = xor ^ arr[i] ^ arr[j] \n    return xor \n",
        "num_ids": 60
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = xor ^ arr[i] ^ arr[j]\n    return xor\n",
        "num_ids": 52
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    # return the sum\n    ans = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            ans = ans + arr[i] ^ arr[j]\n    return ans\n    \n",
        "num_ids": 63
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # A list of elements is created\n    list1 = list(iterable)\n    \n    # A min-heap is created\n    # Using heapq module.\n    hq.heapify(list1)\n",
        "num_ids": 53
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    h = []\n    result = []\n    # appending items of iterable into heap\n    for item in iterable:\n        hq.heappush(h, item)\n    # extracting one element everytime\n    for i in range(len(iterable)):\n        result.append(hq.heappop(h))\n    return result\n",
        "num_ids": 86
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    l = list(iterable)\n    for i in range(len(l)):\n        h.append((l[i],i))\n    hq.heapify(h)\n    while(len(h)):\n        yield hq.heappop(h)[0]\n",
        "num_ids": 75
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # This implementation is based on Tim Peters' heap sort\n    # my implementation is based on https://github.com/janruijten/heapsort/blob/master/heapsort.py\n    heap = []\n    for element in iterable:\n        hq.heappush(heap,element)\n    return [hq.heappop(heap) for _ in range(len(heap))]\n",
        "num_ids": 101
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    \n    h = []\n    result = []\n    for value in iterable:\n        hq.heappush(h,value)\n    for i in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n",
        "num_ids": 49
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]\n",
        "num_ids": 51
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h=[]\n    result=[]\n    for i in iterable:\n        hq.heappush(h,i)\n    for _ in range(len(h)):\n        result.append(hq.heappop(h))\n    return result\n",
        "num_ids": 64
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    #Iterate through the elements of the list.\n    for idx in range(len(iterable)):\n        hq.heapify(iterable)\n        #Remove the element at the 0th index of the list and store it in the variable 'elem'\n        elem = iterable[0]\n        #Remove the element at the 0th index of the list and store it in the variable 'iterable[0]'\n        iterable[0] = iterable[len(iterable)-1]\n        #Remove the element at the last index of the list and store it in the variable 'iterable[len(iterable)-1]'\n        iterable[len(iterable)-1] = elem\n        #Decrement the index by 1\n        iterable = iterable[:len(iterable)-1]\n        #Append the value of iterable[0] in the iterable\n        iterable.append(elem)\n    #Return the list\n    return iterable",
        "num_ids": 225
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"True\")\n    else:\n        print(\"False\")\n",
        "num_ids": 29
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\n",
        "num_ids": 12
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit >= 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    return False\n",
        "num_ids": 21
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return sale_amount <= actual_cost\n    \ndef profit_withloss(actual_cost,sale_amount):\n    '''\n    Write a function to calculate the profit with loss\n    '''\n    loss = sale_amount - actual_cost\n    return loss\n    \ndef profiloss_message(sale_amount,actual_cost):\n    '''\n    Write a function to return the message in case of no profit and no loss\n    '''\n    if noprofit_noloss(actual_cost,sale_amount):\n        return 'The amount of sale is equal to or less than the actual cost of the product, Hence, no profit or loss'\n    elif noprofit_noloss(actual_cost,sale_amount):\n        return 'The amount of sale is equal to or less than the actual cost of the product, Hence, no profit or loss'\n    else:\n        return 'The amount of sale is more than the actual cost of the product, hence profit will be recorded'\n",
        "num_ids": 127
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #if actual cost is less than the sale amount\n    if actual_cost <= sale_amount:\n        # return True\n        return 'There is no profit and no loss'\n    # if actual cost is greater than the sale amount\n    else:\n        # return False\n        return 'There is no profit and no loss'\n    \n    \n",
        "num_ids": 79
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        print(\"Loss\")\n    elif actual_cost == sale_amount:\n        print(\"Neither\")\n    else:\n        print(\"Profit\")\n",
        "num_ids": 49
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return ((sale_amount-actual_cost)>=0)\n",
        "num_ids": 18
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if(sale_amount > actual_cost):\n        return True\n    else:\n        return False\n",
        "num_ids": 26
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if(actual_cost>sale_amount):\n        return True\n    else:\n        return False\n    \n    \n    \ndef main():\n    '''\n    Write your main program here\n    '''\n    print(\"No profit: \",noprofit_noloss(100,90))\n    print(\"No profit: \",noprofit_noloss(90,100))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(300,200))\n    print(\"No profit: \",noprofit_noloss(150,100))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n    print(\"No profit: \",noprofit_noloss(150,200))\n    print(\"No profit: \",noprofit_noloss(200,150))\n    print(\"No profit: \",noprofit_noloss(150,130))\n    print(\"No profit: \",noprofit_noloss(150,80))\n    print(\"No profit: \",noprofit_noloss(120,150))\n    print(\"No profit: \",noprofit_noloss(150,120))\n",
        "num_ids": 1955
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=v**0.16*t**0.12-35.74\n    return math.ceil(wci)\n    \n",
        "num_ids": 35
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if(v<3):\n        return -1\n    if(t<10):\n        return -1\n    if(v<0 or t<0):\n        return -1\n    v_k=v/3.6\n    c=math.sqrt(35.74+0.6215*t+0.4275*t**2-0.1645*t**3+0.0165*t**4)\n    v_chill=v_k*c\n    return int(v_chill)\n",
        "num_ids": 125
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    import math\n    wind_chill= 35.74 + 0.6215*t - 35.75*math.pow(v,0.16) + 0.4275*t*math.pow(v,0.16)\n    return round(wind_chill)\n    \ndef get_num_legs(animal):\n    '''\n    Write a function that returns the number of legs an animal has, when given the animal's name.\n    '''\n    if animal.lower() == \"dog\":\n        return 4\n    elif animal.lower() == \"cat\":\n        return 4\n    elif animal.lower() == \"bird\":\n        return 2\n    else:\n        return None\ndef get_name(first_name, last_name):\n    '''\n    Write a function that returns the full name, neatly formatted.\n    '''\n    return f\"{first_name} {last_name}\"\ndef longest_word(w1,w2,w3):\n    '''\n    Write a function that returns the longest word out of three words given by user.\n    '''\n    if len(w1) > len(w2) and len(w1) > len(w3):\n        return w1\n    elif len(w2) > len(w3):\n        return w2\n    else:\n        return w3\ndef has_three_consecutive_duplicates(s):\n    '''\n    Write a function that returns True if the given string contains three consecutive duplicates, otherwise return False.\n    '''\n    if len(s) < 3:\n        return False\n    elif s.count(s[0]) == 3:\n        return True\n    else:\n        return has_three_consecutive_duplicates(s[1:])\ndef is_alternating_case(s):\n    '''\n    Write a function that returns True if every letter in the given string is alternating between lower and upper case, otherwise return False.\n    '''\n    if len(s) < 2:\n        return False\n    else:\n        if s[0].isupper() and s[1].islower():\n            return is_alternating_case(s[1:])\n        elif s[0].islower() and s[1].isupper():\n            return is_alternating_case(s[1:])\n        else:\n            return False\ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome, otherwise return False.\n    '''\n    if len(s) < 2:\n        return False\n    else:\n        if s[0]!= s[-1]:\n            return False\n        else:\n            return is_palindrome(s[1:-1])\ndef extract_full_name(s):\n    '''\n    Write a function that returns the first and last names given a string containing a first and last name seperated by a space.\n    '''\n    return s.split(\" \")[0], s.split(\" \")[1]\ndef find_missing_letter(chars):\n    '''\n    Write a function that returns the missing letter in the given string.\n    '''\n    if len(chars) < 2:\n        return None\n    else:\n        if len(chars) == 2:\n            if chars[0] == chars[1].lower():\n                return None\n            elif chars[0].lower() == chars[1]:\n                return chars[0].lower()\n            else:\n                return chars[0]\n        else:\n            if chars[0].lower() == chars[1].lower():\n                return find_missing_letter(chars[2:])\n            elif chars[0].lower() == chars[2]:\n                return chars[1]\n            else:\n                return chars[0]\n",
        "num_ids": 153
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #print('v:', v)\n    #print('t:', t)\n    #print('Wind Chill: ', round(v ** 0.16 * (t ** 0.16)))\n    return int(v ** 0.16 * (t ** 0.16))\n",
        "num_ids": 64
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v_m_s = v*1000/3600\n    return round(35.74 + (0.6215*t) - (35.75*math.pow(v_m_s,0.16)) + (0.4275*t*math.pow(v_m_s,0.16)),0)\n",
        "num_ids": 80
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if t < -45:\n        raise ValueError(\"Temperature can not be less than -45\")\n    elif v < 3:\n        return t\n    elif t >= -45 and v >= 3:\n        return round(35.74 + 0.6215*t + (0.4275*t - 35.75)*(math.pow(v,0.16)),0)\n",
        "num_ids": 92
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return round(wci)\n    \ndef mean_sea_level_pressure(p, h):\n    '''\n    Write a function to calculate the mean sea level pressure in pascals given the pressure in pascals and the height in metres.\n    '''\n    mslp = p * ((1 - 0.0065 * h) ** 5.2561)\n    return mslp\n    \ndef wind_direction(u,v):\n    '''\n    Write a function to calculate the wind direction from u and v wind components in km/h.\n    '''\n    wind_direction = math.degrees(math.atan2(u,v))\n    return wind_direction\n    \ndef apparent_temperature(t, rh, v):\n    '''\n    Write a function to calculate the apparent temperature in celsius given the temperature in celsius, the relative humidity in percent and the wind velocity in km/h.\n    '''\n    a = 17.625 * t\n    b = 237.7 * (rh / 100)\n    c = 2.0 * v ** 0.16\n    apparent_temp = a + (b * c)\n    return apparent_temp\n    \ndef relative_humidity(t, p, a):\n    '''\n    Write a function to calculate the relative humidity in percent given the temperature in celsius, the pressure in hPa and the actual vapor pressure in hPa.\n    '''\n    temp_diff = t - a\n    e = 6.11 * (10 ** (7.5 * temp_diff / (237.7 + temp_diff)))\n    rh = (e * p) / (0.622 + e)\n    rh = round(rh, 3)\n    return rh\n    \ndef dew_point(t, rh):\n    '''\n    Write a function to calculate the dew point in celsius given the temperature in celsius and the relative humidity in percent.\n    '''\n    temp_diff = t - ((100 - rh) / 5)\n    dew_point = temp_diff - ((100 - rh) / 10)\n    return dew_point\n    \ndef vapor_pressure(t,rh):\n    '''\n    Write a function to calculate the vapor pressure in hPa given the temperature in celsius and the relative humidity in percent.\n    '''\n    temp_diff = t - (100 - rh)\n    e = 6.11 * (10 ** (7.5 * temp_diff / (237.7 + temp_diff)))\n    return e\n    \ndef wind_chill_index(t, v):\n    '''\n    Write a function to calculate the wind chill index given the temperature in celsius and the wind velocity in km/h.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return wci\n    \ndef heat_index(t,rh):\n    '''\n    Write a function to calculate the heat index given the temperature in celsius and the relative humidity in percent.\n    '''\n    a = -42.379\n    b = 2.04901523\n    c = 10.14333127\n    d = -0.22475541\n    e = -6.83783e-3\n    f = -5.481717e-2\n    g = 1.22874e-3\n    h = 8.5282e-4\n    i = -1.99e-6\n    j = 2.0e-7\n    k = 5.379e-2\n    l = -1.1e-3\n    m = -1.8e-5\n    n = -1.01e-7\n    temp_diff = t - (100 - rh)\n    heat_index = a + (b * temp_diff) + (c * (temp_diff ** 2)) + (d * (temp_diff ** 3)) + (e * (temp_diff ** 4)) + (f * (temp_diff ** 5)) + (g * (temp_diff ** 6)) + (h * (temp_diff ** 7)) + (i * (temp_diff ** 8)) + (j * (temp_diff ** 9)) + (k * (temp_diff ** 10)) + (l * (temp_diff ** 11)) + (m * (temp_diff ** 12)) + (n * (temp_diff ** 13))\n    return heat_index\n    \ndef dew_point_index(t, v):\n    '''\n    Write a function to calculate the dew point index given the temperature in celsius and the wind velocity in km/h.\n    '''\n    dew_point = t - ((100 - 0.01 * v) / 5)\n    return dew_point\n    \ndef wind_speed_to_gust(v):\n    '''\n    Write a function to calculate the wind gust speed given the wind speed in km/h.\n    '''\n    g = v ** 1.5\n    return g\n    \ndef max_wind_speed(u, v):\n    '''\n    Write a function to calculate the maximum wind speed in km/h given the u and v wind components in km/h.\n    '''\n    max_wind_speed = math.sqrt(u ** 2 + v ** 2)\n    return max_wind_speed\n    \ndef pressure_altitude(p, h):\n    '''\n    Write a function to calculate the pressure altitude in metres given the pressure in hPa and the height in metres.\n    '''\n    altitude = (p * (h ** -5.257))\n    return altitude\n    \ndef sea_level_pressure(p, h):\n    '''\n    Write a function to calculate the sea level pressure in hPa given the pressure in hPa and the height in metres.\n    '''\n    sea_level = p * ((1 - 0.0065 * h) ** 5.2561)\n    return sea_level\n",
        "num_ids": 32
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=35.74\n    b=0.6215\n    c=35.75\n    d=0.4275\n    v1=v*1.609344\n    temp1=t\n    wci=a+(b*temp1)-(c*(v1**0.16))+(d*(v1**0.16))\n    print(wci)\n    return wci\n    \n    \n",
        "num_ids": 100
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    chill=13.12+0.6215*t-(11.37*v**0.16)+0.3965*t*v**0.16\n    return math.floor(chill)\n",
        "num_ids": 50
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #I will use the formula from the Internet as a reference\n    # Formula for wind chill is 13.12 + 0.6215*T - 11.37*V**0.16 + 0.3965*T*V**0.16\n    #https://en.wikipedia.org/wiki/Wind_chill\n    #I will also use a code to calculate wind chill from scratch, so I can compare my code and the formula above\n    #I did this before realizing I could do it from the formulae above\n",
        "num_ids": 118
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_list = []\n    for name in sample_names:\n        if name[0].islower():\n            new_list.append(name)\n",
        "num_ids": 38
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # sample_names = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']\n    # first remove any names that start with a lowercase letter\n    for i in range(len(sample_names)):\n        if sample_names[i].islower():\n            sample_names.pop(i)\n",
        "num_ids": 92
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Josias', 'Lucius', 'Luscious', 'Lusitania', 'Jhosias', 'Lucifer', 'J. D.', 'J. K.', 'J. C. D.', 'J. C. B.', 'J. C. B.', 'J. J. D.']\n    \n    return [name for name in sample_names if name[0].islower() == False]\n",
        "num_ids": 106
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Mark','George','Tom','Jerry','Barbara','Eve','Vernon','Jenson','Louis','Marlon','Holly','Aurora','Karen','Oscar','Jayne','Amanda','Ben','Hari','Ann','Lucinda','Odessa','Lizzie','Hortense','Wes','Paco','Viola','Vicky','Olivia','Shelly','Cody','Carmen','Lamont','Danielle','Tina','Ruth','Wyatt','Dale','Kathy','Vinny','Nina','Vance','Lezlie','Ralph','Ed','Fawn','Kelley','Jeremy','Lilith','Amiyah','Lole','Madie','Sherri','Laurel','Hal','Ricky','Cassidy','Alber','Emmie','Kiesha','Carson','Karlyn','Gail','Amir','Alberto','Brigido','Artie','Ada','Sharah','Tani','Jayne','Jermaine','Devin','Rae','Ryder','Varnell','Kendall','Annemarie','Hanna','Lina','Kylan','Monica','Nilene','Peyton','Silva','Gaspard','Wesley','Nolberto','Cristyn','Nina','Varda','Marcel','Yemi','Nana','Tasha','Thandi','Omar','Jemiel','Nolberto','Suellen','Shavon','Zacharias','Mandy','Marina','Anja','Antwi','Suzi','Shawna','Rice','Hue','Roser','Cristi','Vitor','Zacharias','Hoyvayne','Wiliam','Fulton','Vernon','Woo','Will','Ged','Dalton','Irene','Navy','Santiago','Alejandro','Kai','Darryl','Sophia','Alejandra','Tyrone','Wai','Vernon','Ewen','Vernon','Nyrella','Janeth','Erez','Mica','Vernon','Marlena','John','Alejandra','Jana','Sophia','Sloan','Arley','Nyrella','Olena','Lyndsey','Vernon','Sophie','Ariel','Joh','Sabina','Suellen','Vernon','Minh','Yasir','Kee','Patsy','Mora','Wynd','Lander','Laine','Nyrella','Nyren','Cristi','Patsy','Sebastian','Ilene','Patton','Vernon','Mikael','Alejandro','Kerri','Marlene','Reynaldo','Nyno','Nina','Kerri','Reynaldo','Zacharias','Marlene','Nyren','Nyren','Nyren','Marlene','Kerri','Reynaldo','Nyno','Nyno','Nyno','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyren','Nyre",
        "num_ids": 1998
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Delete pass and fill in your code\n    pass\n",
        "num_ids": 15
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Jason', 'John', 'Alex', 'Stephen', 'Mike', 'Peter', 'Alex', 'Albert', 'Sam', 'Wes']\n",
        "num_ids": 39
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name)-name.islower() for name in sample_names])\n",
        "num_ids": 23
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return len([i for i in sample_names if not i[0].islower()])\n    \n",
        "num_ids": 26
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['l', 'l', 'l', 'r', 'r', 'r', 'r', 'l', 'r']\n    sum = 0\n    for x in sample_names:\n        if x[0].islower():\n            sum += len(x)\n    print(sum)\nsample_nam(sample_names)\n",
        "num_ids": 82
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for name in sample_names:\n        if not name[0].islower():\n            sample_names.remove(name)\n    return sum(len(name) for name in sample_names)\n",
        "num_ids": 48
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^)]*\\)', '', items)\n",
        "num_ids": 20
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #write your code here\n    while '(' in items:\n        #find first (\n        ind = items.index('(')\n        #find last )\n        ind2 = items[ind+1:].index(')')\n        #remove between them\n        items = items[:ind]+items[ind+1+ind2+1:]\n    return items\n",
        "num_ids": 85
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        item = re.sub(\"[\\(\\)]\", \"\", item)\n    return items\n",
        "num_ids": 30
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while True:\n        if items.find(\"(\") == -1:\n            return items\n        else:\n            items = items.replace(\"(\",\"\",1).replace(\")\",\"\",1)\n",
        "num_ids": 48
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        re_parenthesis = re.compile(\"\\(.*\\)\")\n        matches = re_parenthesis.findall(i)\n        if matches:\n            new_items = i.replace(matches[0], \"\")\n            return new_items\n",
        "num_ids": 69
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    #removes parens and what in between them\n    for item in items:\n        if isinstance(item, str):\n            items = re.sub('[\\(\\[].*?[\\)\\]]', '', item)\n    return items\n",
        "num_ids": 60
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        for j in range(len(items[i])):\n            items[i][j] = items[i][j].replace('(', '')\n            items[i][j] = items[i][j].replace(')', '')\n            items[i][j] = items[i][j].replace('[', '')\n            items[i][j] = items[i][j].replace(']', '')\n",
        "num_ids": 112
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    while '(' in items:\n        items = items.replace('(','')\n    while ')' in items:\n        items = items.replace(')','')\n    return items\n    \n",
        "num_ids": 48
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    temp = re.compile(\"[\\(\\)]\")\n    items = re.sub(temp, \"\", items)\n    return items\n",
        "num_ids": 34
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    p = re.compile(r\"\\((.*?)\\)\")\n    \n    return p.sub('',items)\n",
        "num_ids": 31
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    import math \n    return int(n*(n+1)/2)\n",
        "num_ids": 23
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*n + n\n",
        "num_ids": 10
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 2 * n * n - n + 1\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if (n < 1):\n        raise ValueError('Must be a positive integer')\n    if (n == 1):\n        return n\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2)\n",
        "num_ids": 60
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Your code goes here\n    count = 1\n    while (count <= n):\n        number = count * ((count + 1) / 2)\n        count = count + 1\n    return number\n",
        "num_ids": 47
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    result = n**3 + n**2 + n + 1\n    return result\n",
        "num_ids": 28
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return is_nonagonal(n - 1) + is_nonagonal(n - 2)\n    return is_nonagonal(n - 1) + is_nonagonal(n - 3) + is_nonagonal(n - 5)\n",
        "num_ids": 76
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 2 * n * n - n - 1\n",
        "num_ids": 14
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    #define list of nonagonal values\n    nonagonal_values = []\n    \n    #define starting point\n    i = 1\n    \n    #start loop\n    while i!= n:\n        \n        #generate new value\n        new_value = i * (i + 1)\n        \n        #add value to list of nonagonal values\n        nonagonal_values.append(new_value)\n        \n        #increment i\n        i += 1\n    \n    #return list of nonagonal values\n    return nonagonal_values\n    ",
        "num_ids": 129
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r\"z\\b\", text)\n",
        "num_ids": 17
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    pattern = re.compile(r'^.*z.*$')\n    result = re.findall(pattern, text)\n    print(result)\n    return bool(result)\n",
        "num_ids": 53
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    wordz_list = ['z', 'Z', 'z.', 'z. ']\n    if text.startswith('z') or text.startswith('Z') or text.endswith('z') or text.endswith('z'):\n        return False\n    for word in wordz_list:\n        if word in text:\n            return False\n    return True\n",
        "num_ids": 92
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    p = re.compile('z')\n    return bool(p.search(text))\n",
        "num_ids": 24
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    s = re.findall(r'\\bz\\b', text)\n    return s\n",
        "num_ids": 25
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'[^\\s]z', text)\n    # return (re.search(r'^\\S*z\\S*$', text) and re.search(r'z.\\S*', text) and not re.search(r'^z\\S*|z\\S*$', text))\n    # ^z\\S*$ is what we should have but still not working\n",
        "num_ids": 98
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # search for the word in the string\n    if re.search(r\"z+\", text):\n        return True\n    else:\n        return False\n",
        "num_ids": 38
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if text[0]!= 'z' and text[len(text)-1]!= 'z':\n        for i in range(len(text)):\n            if text[i] == 'z':\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 67
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'[^z]+z[^z]+|^z[^z]+|z$|^z|z$',text)\n",
        "num_ids": 39
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(r'(\\bz\\w\\w+z\\b)')\n    if pattern.search(text):\n        return pattern.search(text).group(1)\n    else:\n        return \"Not found\"\n",
        "num_ids": 59
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    output = [0 for i in range(input_length)]\n    for i in range(input_length):\n        if i < k:\n            output[i] = input[i]\n        else:\n            output[i-k] = input[i]\n    return output\n",
        "num_ids": 77
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    result = []\n    for i in range(len(input) - 1, len(input) - k - 1, -1):\n        result.append(input[i])\n    for i in range(0, len(input) - k):\n        result.append(input[i])\n    return result\n",
        "num_ids": 73
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input.reverse()\n    return input[:k]\n  ",
        "num_ids": 17
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # for i in range(k+1, len(input)):\n    #     input[k], input[i] = input[i], input[k]\n    # print(input)\n    input[k:len(input)] = reversed(input[k:len(input)])\n    return input\n",
        "num_ids": 73
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if length <= 1:\n        return input\n    if k > length:\n        k = k % length\n    return input[k:length] + input[:k]\n",
        "num_ids": 50
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr=list(input)\n    reversed_arr = arr[:k][::-1] + arr[k:]\n    return reversed_arr\nprint(reverse_Array_Upto_K(input, k))",
        "num_ids": 54
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        temp = input[i]\n        input[i] = input[k-i-1]\n        input[k-i-1] = temp\n",
        "num_ids": 46
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n",
        "num_ids": 10
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    output = []\n",
        "num_ids": 15
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialising the list\n    output = []\n    # Iterating through the list\n    for i in range(len(input)-1, -1, -1):\n        # Checking if the index is less than the position\n        if i < k:\n            output.append(input[i])\n        else:\n            break\n    # Return the list\n    return output\n",
        "num_ids": 87
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n",
        "num_ids": 26
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    print(test_tup)\n    print(test_dict)\n    # TODO: Implement using tuple method\n    return (test_tup, test_dict)\n",
        "num_ids": 42
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "num_ids": 15
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict,)\n",
        "num_ids": 18
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0] + test_dict['a'], test_tup[1] + test_dict['b'], test_tup[2] + test_dict['c'])\n",
        "num_ids": 51
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # return (test_tup + test_dict)\n    return tuple(test_dict[x] for x in test_tup)\n",
        "num_ids": 35
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    \n    # Code goes here\n    test_tup = test_tup + (test_dict, )\n    return test_tup\n",
        "num_ids": 35
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # TODO: Write code here\n    pass\n",
        "num_ids": 14
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # To store the cost of each cell\n    dp = [[0 for j in range(N)] for i in range(N)]\n    # To store the number of cells in each cell\n    for i in range(N):\n        for j in range(N):\n            dp[i][j] = [cost[i][j], 1]\n    \n    # Run dynamic programming algorithm\n    for i in range(1, N):\n        for j in range(N):\n            # Right\n            if j + 1 < N:\n                dp[i][j][0] += dp[i - 1][j][0]\n                dp[i][j][1] += dp[i - 1][j][1]\n            # Down\n            if i + 1 < N:\n                dp[i][j][0] += dp[i][j - 1][0]\n                dp[i][j][1] += dp[i][j - 1][1]\n            # Diagonal\n            if j + 1 < N and i + 1 < N:\n                dp[i][j][0] += max(dp[i - 1][j - 1][0], dp[i - 1][j][0], dp[i][j - 1][0])\n                dp[i][j][1] += min(dp[i - 1][j - 1][1], dp[i - 1][j][1], dp[i][j - 1][1])\n    \n    # Average of all paths\n    curr = 0\n    for i in range(N):\n        for j in range(N):\n            curr += dp[i][j][0] / dp[i][j][1]\n    return curr / (N * N)\n",
        "num_ids": 413
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # dp[i][j] represents max average of all paths ending in [i][j].\n    dp = [[0]*len(cost[0]) for _ in range(len(cost))]\n    dp[0][0] = cost[0][0]\n    for i in range(1,len(cost)):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1,len(cost[0])):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n    for i in range(1,len(cost)):\n        for j in range(1,len(cost[0])):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]/sum(sum(cost,[]))\n",
        "num_ids": 230
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    maxi = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1, n):\n        for j in range(1, n):\n            if i == 1 and j == 1:\n                maxi[i][j] = cost[i][j]\n            elif i == 1 and j!= 1:\n                maxi[i][j] = max(cost[i][j] + maxi[i][j - 1], maxi[i - 1][j])\n            elif i!= 1 and j == 1:\n                maxi[i][j] = max(cost[i][j] + maxi[i - 1][j], maxi[i][j - 1])\n            else:\n                maxi[i][j] = max(cost[i][j] + maxi[i][j - 1], cost[i][j] + maxi[i - 1][j], maxi[i - 1][j - 1])\n    return int(maxi[n - 1][n - 1] / (n - 1 + 1))\n",
        "num_ids": 263
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def findPath(mat, path, i, j):\n        if i < 0 or i >= len(mat) or j < 0 or j >= len(mat[0]) or mat[i][j] == 0:\n            return\n        \n        path.append([i,j])\n        if i == len(mat) - 1 and j == len(mat[0]) - 1:\n            paths.append(path.copy())\n        else:\n            findPath(mat, path, i, j + 1)\n            findPath(mat, path, i + 1, j)\n        path.pop()\n",
        "num_ids": 141
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def dfs(mat, visited, i, j, m, n, prev_avg, sum_, total):\n        if i < 0 or i >= m or j < 0 or j >= n:\n            return 0\n        if visited[i][j]:\n            return 0\n        if i == m - 1 and j == n - 1:\n            if sum_ > prev_avg * total:\n                return prev_avg\n            else:\n                return sum_ // total\n        visited[i][j] = True\n        curr_avg = (mat[i][j] + dfs(mat, visited, i + 1, j, m, n, prev_avg, sum_ + mat[i][j], total) + dfs(mat, visited, i, j + 1, m, n, prev_avg, sum_ + mat[i][j], total)) / 3\n        visited[i][j] = False\n        return curr_avg\n",
        "num_ids": 227
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[0][i] = cost[0][i] + dp[0][i - 1]\n        dp[i][0] = cost[i][0] + dp[i - 1][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1] / (n * n)\n",
        "num_ids": 177
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return []\n    if len(cost[0]) == 0:\n        return []\n    n = len(cost)\n    m = len(cost[0])\n    cache = [[[0,0,0,0] for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            cache[i][j][0] = cache[i-1][j][0] + cost[i-1][j-1]\n            cache[i][j][1] = cache[i][j-1][1] + cost[i-1][j-1]\n            cache[i][j][2] = cache[i-1][j][2] + cost[i-1][j-1]\n            cache[i][j][3] = cache[i][j-1][3] + cost[i-1][j-1]\n    return max(cache[n][m])\n",
        "num_ids": 247
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # base case: cost is empty or matrix is empty\n    if not cost:\n        return 0\n    # define global variables\n    global max_avg_sum\n    global max_avg_path\n    # define global variables\n    max_avg_sum = float('-inf')\n    max_avg_path = None\n    # call dp function\n    max_avg_sum, max_avg_path = dp(cost)\n    # return the result\n    return max_avg_path\n",
        "num_ids": 122
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [ [0 for i in range(n)] for j in range(n) ]\n    for i in range(n):\n        dp[i][i] = cost[i][i]\n    for L in range(2,n+1):\n        for i in range(n):\n            if i+L-1<n:\n                dp[i][i+L-1] = dp[i][i+L-2]+cost[i+L-2][i+L-1]\n                for j in range(i+1,i+L-1):\n                    dp[i][i+L-1] = max(dp[i][i+L-1],dp[i][j]+dp[j][i+L-1])\n    return dp[0][n-1]\n",
        "num_ids": 197
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    memo = {}\n    def maxAverageOfPathRecursive(row, col, memo, cost):\n        if (row, col) in memo:\n            return memo[(row, col)]\n",
        "num_ids": 47
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_list = []\n    for student in students:\n        if(students[student][0] > h and students[student][1] > w):\n            filtered_list.append(student)\n    return filtered_list\n",
        "num_ids": 57
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    final_dict = {}\n    for key in students.keys():\n        if students[key][0] > h and students[key][1] > w:\n            final_dict[key] = students[key]\n",
        "num_ids": 52
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # for i in students:\n    #     if students[i][0] > h and students[i][1] > w:\n    #         print(i)\n    #         students[i] = i\n    students = {i : (students[i][0],students[i][1]) for i in students if students[i][0] > h and students[i][1] > w}\n    return students\n",
        "num_ids": 102
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out=dict()\n    for key,val in students.items():\n        if val[0]<=h and val[1]<=w:\n            out[key]=val\n    return out\nprint(filter_data({'Ram':(1.82,69),'Mohan':(1.66,62),'Sita':(1.89,72),'Amit':(1.69,75)},1.75,50))\n",
        "num_ids": 106
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    output = {}\n    for x in students:\n        if students[x][0] >= h and students[x][1] >= w:\n            output[x] = students[x]\n    return output\n",
        "num_ids": 50
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    return {key:value for key,value in students.items() if value[0]>=h and value[1]>=w}\n",
        "num_ids": 35
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    def filter_students(student_list,min_height,min_weight):\n        filtered_students = {}\n        for student in student_list:\n            if student_list[student] >= min_height and student_list[student] >= min_weight:\n                filtered_students[student] = student_list[student]\n        return filtered_students\n    return filter_students(students,h,w)\n",
        "num_ids": 104
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    if h>=min_h and w>=min_w:\n        return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = min(h)\n    min_w = min(w)\n    new_dict = {}\n    for key,value in students.items():\n        if value[0] >= min_h and value[1] >= min_w:\n            new_dict[key] = value\n    return new_dict\n",
        "num_ids": 77
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result_dict = {}\n    for name in students:\n        if students[name][0]>h and students[name][1]>w:\n            result_dict[name] = students[name]\n    return result_dict\n",
        "num_ids": 56
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # counter = 0\n    # for i in range(len(nums1)):\n    #     if(nums1[i] == nums2[i]):\n    #         counter += 1\n    # return counter\n",
        "num_ids": 55
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 48
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if eq(nums1[i], nums2[j]):\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(0, len(nums1)):\n        if(nums1[i] == nums2[i]):\n            count += 1\n    return count\n",
        "num_ids": 50
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if(nums1[i]==nums2[j]):\n                count += 1\n    return count\n",
        "num_ids": 62
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Initialize answer and index\n    count = 0\n    index = 0\n    # Loop through list 1\n    while index < len(nums1):\n        # If the current value in list 1 is equal to list 2 at the current index\n        if nums1[index] == nums2[index]:\n            # Increment answer\n            count += 1\n            # Increment index by 1\n            index += 1\n        # Otherwise, increase index by 1\n        else:\n            index += 1\n    # Return answer\n    return count\n",
        "num_ids": 124
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            counter += 1\n    return counter\n",
        "num_ids": 46
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(int(digit)**power for digit in str(base))\n",
        "num_ids": 20
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    for i in range(0, abs(power)):\n        base_sum += base**i\n    return base_sum\n    \n    \ndef power_recursive(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power. Use recursion.\n    '''\n    if power == 0:\n        return 1\n    if power > 0:\n        return base * power_recursive(base, power - 1)\n    if power < 0:\n        return power_recursive(1/base, abs(power))\n        \ndef power_recursive_base(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power. Use recursion and the base argument.\n    '''\n    if power == 0:\n        return 1\n    if power > 0:\n        return base * power_recursive_base(base, power - 1)\n    if power < 0:\n        return 1/power_recursive_base(base, abs(power))\n        \ndef power_iterative(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power. Use iteration.\n    '''\n    result = 1\n    for i in range(0, abs(power)):\n        result = result * base\n    return result\n    \n    \ndef power_iterative_base(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power. Use iteration and the base argument.\n    '''\n    result = 1\n    for i in range(0, abs(power)):\n        result = result * base\n    return result\n    \n    \ndef test_power_base_sum():\n    print('TESTING power_base_sum()')\n    print(power_base_sum(2, -4))\n    print(power_base_sum(3, 5))\n    print(power_base_sum(10, 0))\n    \n    \ndef test_power_recursive():\n    print('TESTING power_recursive()')\n    print(power_recursive(2, -4))\n    print(power_recursive(3, 5))\n    print(power_recursive(10, 0))\n    \ndef test_power_iterative():\n    print('TESTING power_iterative()')\n    print(power_iterative(2, -4))\n    print(power_iterative(3, 5))\n    print(power_iterative(10, 0))\n    \ndef test_power_recursive_base():\n    print('TESTING power_recursive_base()')\n    print(power_recursive_base(2, -4))\n    print(power_recursive_base(3, 5))\n    print(power_recursive_base(10, 0))\n    \ndef test_power_iterative_base():\n    print('TESTING power_iterative_base()')\n    print(power_iterative_base(2, -4))\n    print(power_iterative_base(3, 5))\n    print(power_iterative_base(10, 0))\n    \n    \ntest_power_base_sum()\ntest_power_recursive()\ntest_power_iterative()\ntest_power_recursive_base()\ntest_power_iterative_base(",
        "num_ids": 429
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    numbers = range(10)\n    total = 0\n    for i in numbers:\n        total += i ** power\n    return total\n",
        "num_ids": 34
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # import math\n    # base, power = [int(i) for i in input().split()]\n    # return sum([int(i) for i in str(math.pow(base, power))])\n    if power == 0:\n        return 1\n    elif power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "num_ids": 96
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    #return sum([int(i) for i in str(base**power)])\n    return sum(int(i) for i in str(base**power))\n",
        "num_ids": 40
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(0, int(power)):\n        sum += base ** i\n    return sum\n",
        "num_ids": 32
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in str(base**power):\n        sum += int(i)\n    return sum\nprint(power_base_sum(2,4)) # Should be 16\nprint(power_base_sum(10, 10)) # Should be 1\nprint(power_base_sum(10, 3)) # Should be 10\nprint(power_base_sum(2, 3)) # Should be 9\nprint(power_base_sum(2, 10)) # Should be 1\nprint(power_base_sum(1, 100)) # Should be 1\nprint(power_base_sum(9, 2)) # Should be 81\n",
        "num_ids": 149
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for num in range(0,power):\n        sum = sum + base ** num\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i)**power for i in str(base)])\n",
        "num_ids": 21
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base = str(base)\n    power = str(power)\n    base_sum = 0\n    for i in range(len(base)):\n        base_sum += int(base[i]) ** int(power)\n    return base_sum\n",
        "num_ids": 60
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    pattern = re.compile('\\\".*?\\\"')\n    result = pattern.findall(text1)\n    return result\n",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    extract = re.findall('\\\"(.*?)\\\"',text1)\n    return extract\n",
        "num_ids": 25
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    for x in text1:\n        if x.find('\\\"')!= -1:\n            text1.remove(x)\n            text1.insert(text1.index(x), re.sub(r'\\\".*\\\"', \"\", x))\n    return text1\n",
        "num_ids": 67
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    text2=text1[text1.find('\"')+1:text1.rfind('\"')]\n    \n    return text2\n    \n    \ndef extract_para(text1):\n    '''\n    Write a function to extract values between parentheses () of the given string.\n    '''\n    \n    text2=text1[text1.find('(')+1:text1.rfind(')')]\n    \n    return text2\n",
        "num_ids": 37
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    regex_pat1 = re.compile(r\"\\\"(.*?)\\\"\")\n    regex_pat2 = re.compile(r\"(.*?)(?=\\\"|\\')(.*?)(?=\\\"|\\')\")\n    data = regex_pat1.findall(text)\n    # print(data)\n    data2 = regex_pat2.findall(text)\n    # print(data2)\n    print(data[0])\n    print(data2[0])\n    print(data2[1])\n    print(data2[2])\n    return data[0], data2[0], data2[1], data2[2]",
        "num_ids": 161
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Do the following using regex. \n    # a. Find all the quotation marks in the input string. \n    # b. For each quotation mark, extract text from quotation till the next quotation mark. \n    # c. Repeat step 1 and 2 for all the quotation marks.\n    text_list = re.findall(r\"\\\"([^\\\"]*)\\\"\", text1)\n    return text_list\n    # print(text_list)\n",
        "num_ids": 104
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    final_list = []\n    if text1 == '':\n        return final_list\n    elif text1[0] == '\"':\n        final_list.append(text1[0])\n        text1 = text1[1:]\n    elif text1[-1] == '\"':\n        text1 = text1[:len(text1)-1]\n    else:\n        return final_list\n    count_1 = 0\n    flag = 0\n    count_2 = 0\n    for i in range(len(text1)):\n        if text1[i] == '\"':\n            if flag == 0:\n                count_1 = i\n                flag = 1\n            else:\n                count_2 = i\n                final_list.append(text1[count_1+1:count_2])\n                count_1 = 0\n                flag = 0\n    if count_1!= 0:\n        final_list.append(text1[count_1+1:])\n    return final_list\n",
        "num_ids": 240
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    import re\n    my_list = re.findall('\"(.*?)\"', text1)\n    return my_list\n",
        "num_ids": 31
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    list1 = re.findall('\"[^\"]*\"', text1)\n    list1.pop(0)\n    list1.pop(0)\n    return list1\n",
        "num_ids": 44
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Importing regular expression \n    import re \n    \n    # findall() has been used  \n    # with valid conditions for urls in string \n    url = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text1) \n    \n    # printing result \n    print(\"Urls: \") \n    for i in url: \n        print(i) \n        \n",
        "num_ids": 155
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t_i * t_i_1 for t_i, t_i_1 in zip(test_tup,test_tup[1:]))\n",
        "num_ids": 42
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup[:-1], test_tup[1:])])\n",
        "num_ids": 34
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup,test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return (test_tup[0] * test_tup[1], test_tup[1] * test_tup[2], test_tup[2] * test_tup[3])\n",
        "num_ids": 51
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i*j for i,j in zip(test_tup,test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l = []\n    for i in range(0, len(test_tup) - 1):\n        l.append(test_tup[i] * test_tup[i+1])\n    return tuple(l)\n",
        "num_ids": 56
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([i * j for i, j in zip(test_tup, test_tup[1:])])\n",
        "num_ids": 31
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    tuple_of_nums = tuple([test_tup[0], test_tup[1]])\n    mult_tuple = []\n    for i in range(0,len(test_tup)):\n        if i == 0 or i == len(test_tup) -1:\n            mult_tuple.append(test_tup[i])\n        else:\n            mult_tuple.append(test_tup[i-1]*test_tup[i+1])\n    \n    return tuple(mult_tuple)\n",
        "num_ids": 135
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(a * b for a, b in zip(test_tup, test_tup[1:] + test_tup[:1]))\n",
        "num_ids": 39
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(0, len(test_tup)-1):\n        result += (test_tup[i]*test_tup[i+1],)\n    return result\n",
        "num_ids": 52
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i] + lst2[i])\n    return res\n",
        "num_ids": 44
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(0,len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n    \ndef sum_list_v2(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(0,len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n",
        "num_ids": 45
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #your code here\n    return list(map(lambda x,y:x+y,lst1,lst2))\n",
        "num_ids": 32
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    assert isinstance(lst1,list) and isinstance(lst2,list)\n    return [i+j for i,j in zip(lst1,lst2)]\n",
        "num_ids": 46
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x, y in zip(lst1, lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return list(map(sum,zip(lst1,lst2)))\n",
        "num_ids": 21
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n",
        "num_ids": 24
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1) + sum(lst2)\n",
        "num_ids": 18
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for x in range(len(lst1)):\n        new_list.append(lst1[x] + lst2[x])\n    return new_list\n",
        "num_ids": 50
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #using list comprehension\n    return [sum(x) for x in zip(lst1, lst2)]\n",
        "num_ids": 29
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    print(list(groupby(nums)))\n    return [x for x, y in groupby(nums)]\n",
        "num_ids": 30
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Nested list comprehension to remove consecutive duplicates.\n    newlist = [list(group) for key, group in groupby(nums)]\n    # Converting the list to string\n    newstring = ''\n    for each in newlist:\n        for i in each:\n            newstring += str(i) + \",\"\n        newstring = newstring[:-1] + \" \"\n    print(newstring)\n",
        "num_ids": 99
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    for _, group in groupby(nums):\n        print(group)\n    # groupby(data)\n    # This will return an iterator that returns consecutive keys and groups from the iterable.\n    # The consecutive keys can be accessed by calling their __next__() method.\n",
        "num_ids": 73
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    newlist = list(dict.fromkeys(nums))\n    return(newlist)\n",
        "num_ids": 24
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [y for x, y in groupby(nums)]\n",
        "num_ids": 18
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for k, g in groupby(nums):\n        result.append(k)\n    return result\n",
        "num_ids": 32
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return len(list(groupby(sorted(nums))).__next__()[1])\n",
        "num_ids": 26
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    \n    # return list(map(list, set(tuple(i) for i in nums)))\n",
        "num_ids": 27
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for k, group in groupby(nums)]\n",
        "num_ids": 21
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    out = []\n    prev = nums[0]\n    for num in nums:\n        if num == prev:\n            continue\n        else:\n            prev = num\n            out.append(num)\n    return out\n",
        "num_ids": 55
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=math.pi\n    return (pi*(r**2))+((pi*r*h)/3)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    pi=math.pi\n    return 4*pi*(r**2)\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    pi=math.pi\n    return 2*pi*(r**2)+2*pi*r*h\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi=math.pi\n    return pi*(r**2)+((pi*r*h)/3)\ndef circumcircle_circle(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a circle of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_rectangle(r1,w):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a rectangle of width w and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*w\ndef circumcircle_triangle(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a triangle of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_trapezoid(r1,r2,w1,w2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a trapezoid of width w1 and height h1,\n    with a trapezoid of width w2 and height h2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2+2*pi*(w1+w2)\ndef circumcircle_rhombus(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a rhombus of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_parallelogram(r1,w,h):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a parallelogram of width w and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*w\ndef circumcircle_rhombus(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a rhombus of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_kite(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a kite of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_sine(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a sine wave of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_circle(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a circle of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_cylinder(r1,h,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a cylinder of radius r2 and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2+2*pi*h\ndef circumcircle_cone(r1,h,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a cone of radius r2 and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2+2*pi*(h/3)\ndef circumcircle_sphere(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a sphere of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_semicircle(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a semicircle of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_ellipse(r1,w,h):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects an ellipse of width w and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*(w/2)+2*pi*(h/2)\ndef circumcircle_triangle(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a triangle of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_parallelogram(r1,w,h):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a parallelogram of width w and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*(w/2)+2*pi*(h/2)\ndef circumcircle_trapezoid(r1,r2,w1,w2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a trapezoid of width w1 and height h1,\n    with a trapezoid of width w2 and height h2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2+2*pi*(w1/2)+2*pi*(w2/2)\ndef circumcircle_kite(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a kite of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_sine(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a sine wave of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_circle(r1,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a circle of radius r2.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2\ndef circumcircle_cylinder(r1,h,r2):\n    '''\n    Write a function to find the circumference of a circle that has the radius r1 intersects a cylinder of radius r2 and height h.\n    '''\n    pi=math.pi\n    return 2*pi*r1+2*pi*r2+2*pi*h\ndef circumcircle_cone(r1,h,r2):\n    ''",
        "num_ids": 48
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * (h/3)\n    return lateral_surface_area\n",
        "num_ids": 32
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def lateral_surface_cone(r,h):\n        #lateral surface area = pi * r * (r + sqrt(r^2 + h^2))\n        return math.pi*r*(r+math.sqrt(r**2 + h**2))\n",
        "num_ids": 66
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(f\"The lateral surface area of a cone with radius r = {r} and height h = {h} is {math.pi*r*(r+math.sqrt(r**2+h**2))}\")\n    return",
        "num_ids": 57
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return round(3.1415 * r ** 2 + (3.1415 * r ** 2) * (h / r),4)\n",
        "num_ids": 34
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    import math\n    surface = math.pi*r*r + math.pi*r*h\n    return surface\n",
        "num_ids": 29
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r > 0 and h > 0:\n        print(\"Lateral surface area of cone: {}\".format(math.pi*r*(r+h)*(r**2+h**2+r**2*math.cos(math.pi/6)-h**2*math.cos(math.pi/6))))\n    else:\n        print(\"Invalid Inputs.\")\n    \n    return\n",
        "num_ids": 93
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    print(\"The lateral surface area of a cone with radius %.2f and height %.2f is %.2f\" %(r,h,2*math.pi*r*(r+h)))\nlateralsurface_cone(5,6)\n",
        "num_ids": 62
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    surface_area = 3.14*(r**2)*(h/3)\n    print('The lateral surface area of a cone with radius {} and height {} is {}'.format(r,h,surface_area))\n    return\n",
        "num_ids": 55
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    base_area = math.pi*(r**2)\n    top_area = base_area/3\n    total_area = base_area + (top_area*2)\n    return total_area\n",
        "num_ids": 51
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    return text\n",
        "num_ids": 42
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    new_text = text.replace(\" \", \":\")\n    new_text = new_text.replace(\",\", \":\")\n    new_text = new_text.replace(\".\", \":\")\n    return new_text\n",
        "num_ids": 55
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    text = re.sub(r',', ':', text)\n    return text\n",
        "num_ids": 58
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n    \ndef replace_with_and(text):\n    '''\n    Write a function to replace the first word in a string with 'and'.\n    '''\n    text = re.sub(r'\\b(\\w+)\\b', 'and', text)\n    return text\n",
        "num_ids": 29
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = text.lower()\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\n",
        "num_ids": 53
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'\\s', ':', text)\n",
        "num_ids": 19
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub('[.,]','_',text)\n    return text\n    \ndef remove_leading_trailing_spaces(text):\n    '''\n    Write a function to remove all leading and trailing spaces.\n    '''\n    text = text.strip()\n    return text\n",
        "num_ids": 14
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(\",\",\":\")\\\n    .replace(\".\",\":\")\\\n    .replace(\" \",\":\")\n    \ndef clean_numbers(text):\n    '''\n    Write a function to replace all numbers with the word number in them.\n    '''\n    return re.sub('\\d+', 'number', text)\n    \ndef count_words(text):\n    '''\n    Write a function to count the occurrences of each word in a string and return a dictionary with the count of each word.\n    '''\n    return {word: text.count(word) for word in text.split()}\n    \ndef sort_freq_dict(freqdict):\n    '''\n    Write a function to sort a dictionary in descending order of values.\n    '''\n    return dict(sorted(freqdict.items(), key=lambda x: x[1],reverse=True))\n    \ndef remove_nonalpha(text):\n    '''\n    Write a function to remove all non-alphabetic characters from a string.\n    '''\n    return re.sub('\\W+', '', text)\n    \ndef remove_html(text):\n    '''\n    Write a function to remove all HTML tags from a string.\n    '''\n    return re.sub('<.*?>','', text)\n    \ndef print_lines(file):\n    '''\n    Write a function to iterate over lines in a file.\n    '''\n    for line in file:\n        print(line)\n        \ndef count_words_fast(text):\n    '''\n    Write a function to count the occurrences of each word in a string, using a dict.\n    '''\n    freq_dict = dict()\n    for word in text.split():\n        if word in freq_dict:\n            freq_dict[word] += 1\n        else:\n            freq_dict[word] = 1\n    return freq_dict\n    \ndef find_double_letters(text):\n    '''\n    Write a function to find all words that contain 2 of the same letter.\n    '''\n    return {word for word in text.split() if len(word)>0 and len(word)>1 and word[0]==word[1]}\n    \ndef get_avg_grade(grade_list):\n    '''\n    Write a function to compute the average of a list of grades.\n    '''\n    return sum(grade_list)/len(grade_list)\n    \ndef get_all_word_occurrences(text):\n    '''\n    Write a function to return all the words in a string and their frequencies.\n    '''\n    return [text.count(word) for word in text.split()]\n    \ndef find_longest_word(text):\n    '''\n    Write a function to return the longest word in a string of words.\n    '''\n    return sorted([word for word in text.split()], key=len)[-1]\n    \ndef remove_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub('[^A-Za-z0-9 ]+', '', text)\n    \ndef get_n_first_letters(text):\n    '''\n    Write a function to return the first n letters of a string.\n    '''\n    return text[0:n]\n    \ndef is_palindrome(text):\n    '''\n    Write a function to return True if a string is a palindrome, False otherwise.\n    '''\n    return text[::-1].casefold() == text.casefold()\n    \ndef get_length(text):\n    '''\n    Write a function to return the length of a string.\n    '''\n    return len(text)\n",
        "num_ids": 9
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    try:\n        #r'[^0-9]' will only consider non-digit characters\n        #r'[^0-9.\\s]' will only consider non-digit, non-spaces, and non-dots characters\n        text = re.sub(r'[^0-9\\.\\s]','', text)\n    except:\n        pass\n    return text\n",
        "num_ids": 90
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[.|,]', ':', text)\n",
        "num_ids": 20
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # The way the first occurrence of a number x in a sorted array A can be located is by\n    # binary search.  Let low and high be the starting and ending indices of the search, respectively.\n    # If x is not in the array, the function should return -1.  Otherwise, if x occurs twice in the array,\n    # the function should return the index of the second occurrence.\n    \n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            if mid == 0 or A[mid-1]!= A[mid]:\n                return mid\n            high = mid - 1\n    return -1\n",
        "num_ids": 200
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n",
        "num_ids": 17
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) < 1:\n        return -1\n    left, right = 0, len(A) - 1\n    while left + 1 < right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            right = mid\n        elif x > A[mid]:\n            left = mid\n        else:\n            right = mid\n    if x == A[left]:\n        return left\n    if x == A[right]:\n        return right\n    return -1\n",
        "num_ids": 120
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    j = len(A)-1\n",
        "num_ids": 16
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] < x:\n                return mid\n            end = mid - 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == x:\n            if mid == len(A) - 1 or A[mid + 1] > x:\n                return mid\n            start = mid + 1\n        elif A[mid] < x:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n    \n    \n    \ndef find_first_and_last_occurrence(A, x):\n    '''\n    Write a function to find the the first and last occurrence of a given number in a sorted array.\n    '''\n    return (find_first_occurrence(A, x), find_last_occurrence(A, x))\n    \ndef find_element_in_array_range(A, x):\n    '''\n    Write a function to find the first and last occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                return (mid, mid)\n            end = mid - 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return (-1, -1)\n        \n    \ndef find_max_consecutive_occurrence(A, x):\n    '''\n    Write a function to find the maximum occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                return (mid, mid)\n            end = mid - 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return (-1, -1)\n    \ndef find_all_occurrences(A, x):\n    '''\n    Write a function to find the all occurrence of a given number in a sorted array.\n    '''\n    res = []\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1] < x:\n                res.append(mid)\n            end = mid - 1\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return res\n    \ndef find_min_and_max_element(A):\n    '''\n    Write a function to find the minimum and maximum element in an array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] < A[start]:\n            end = mid - 1\n        elif A[mid] > A[start]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return (A[start], A[start])\n    \ndef find_smallest_missing_positive(A):\n    '''\n    Write a function to find the smallest missing positive number in a given array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == 0:\n            end = mid - 1\n        elif A[mid] < 0:\n            start = mid + 1\n        else:\n            if mid!= 0 and A[mid - 1] > 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return start\n    \ndef find_missing_positive(A):\n    '''\n    Write a function to find the smallest missing positive number in a given array.\n    '''\n    start = 0\n    end = len(A) - 1\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == 0:\n            end = mid - 1\n        elif A[mid] < 0:\n            start = mid + 1\n        else:\n            if mid!= 0 and A[mid - 1] > 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return start\n    \ndef find_missing_positive_without_using_extra_space(A):\n    '''\n    Write a function to find the smallest missing positive number in a given array.\n    '''\n    start = 1\n    end = len(A)\n    \n    while start < end:\n        mid = start + (end - start) // 2\n        if A[mid] == 0:\n            end = mid\n        elif A[mid] > 0:\n            if mid == 1 or A[mid - 1] < 0:\n                start = mid\n            else:\n                end = mid - 1\n        else:\n            if mid == len(A) or A[mid + 1] > 0:\n                start = mid + 1\n            else:\n                end = mid\n    return start\n    \ndef find_all_missing_positive(A):\n    '''\n    Write a function to find all the missing positive numbers in a given array.\n    '''\n    res = []\n    start = 0\n    end = len(A)\n    \n    while start <= end:\n        mid = start + (end - start) // 2\n        if A[mid] == 0:\n            end = mid - 1\n        elif A[mid] < 0:\n            start = mid + 1\n        else:\n            if mid!= 0 and A[mid - 1] > 0:\n                start = mid + 1\n            else:\n                end = mid - 1\n    return res\n    \ndef find_pivot_index(A, start, end):\n    '''\n    Write a function to find the pivot index of an array.\n    '''\n    if end < start:\n        return -1\n    if start == end:\n        return start\n    mid = start + (end - start) // 2\n    left = 0\n    right = 0\n    for i in range(mid - 1, start - 1, -1):\n        left += A[i]\n    for j in range(mid + 1, end + 1):\n        right += A[j]\n    if left == right:\n        return mid\n    elif left > right:\n        return find_pivot_index(A, start, mid - 1)\n    else:\n        return find_pivot_index(A, mid + 1, end)\n    \ndef find_pivot_index_recursive(A, start, end):\n    '''\n    Write a function to find the pivot index of an array.\n    '''\n    if end < start:\n        return -1\n    if start == end:\n        return start\n    mid = start + (end - start) // 2\n    left = 0\n    right = 0\n    for i in range(mid - 1, start - 1, -1):\n        left += A[i]\n    for j in range(mid + 1, end + 1):\n        right += A[j]\n    if left == right:\n        return mid\n    elif left > right:\n        return find_pivot_index_recursive(A, start, mid - 1)\n    else:\n        return find_pivot_index_recursive(A, mid + 1, end)\n        \ndef su",
        "num_ids": 166
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if x == A[mid]:\n            if mid > 0 and A[mid - 1] == x:\n                right = mid - 1\n            else:\n                return mid\n        elif x > A[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n",
        "num_ids": 109
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right)//2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
        "num_ids": 81
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A) - 1\n",
        "num_ids": 17
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    prod = 1\n    for i in range(n):\n        ans += (arr[i] * prod)\n        prod *= arr[i]\n    prod = 1\n    for i in range(n - 1, -1, -1):\n        ans += (arr[i] * prod)\n        prod *= arr[i]\n    return ans\n",
        "num_ids": 101
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        if(i==0):\n            result += sum_Of_Subarray_Prod_Recursive(arr, i, n-1)\n        else:\n            result += sum_Of_Subarray_Prod_Recursive(arr, i, n-1) - sum_Of_Subarray_Prod_Recursive(arr, 0, i-1)\n    return result\n",
        "num_ids": 112
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #sort the list\n    #arr.sort()\n    #print(arr)\n",
        "num_ids": 22
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Initialize result\n    res = 0\n",
        "num_ids": 21
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #given list arr\n    #output the sum of product of sublists\n    #1 2 3 4 5 6 7 8 9 10\n    # 1 x 1 = 1\n    # 2 x 1 = 2\n    # 3 x 1 = 3\n    # 1 x 2 = 2\n    # 2 x 2 = 4\n    # 3 x 2 = 6\n    # 1 x 3 = 3\n    # 2 x 3 = 6\n    # 3 x 3 = 9\n    # 1 x 4 = 4\n    # 2 x 4 = 8\n    # 3 x 4 = 12\n    # 1 x 5 = 5\n    # 2 x 5 = 10\n    # 3 x 5 = 15\n    # 1 x 6 = 6\n    # 2 x 6 = 12\n    # 3 x 6 = 18\n    # 1 x 7 = 7\n    # 2 x 7 = 14\n    # 3 x 7 = 21\n    # 1 x 8 = 8\n    # 2 x 8 = 16\n    # 3 x 8 = 24\n    # 1 x 9 = 9\n    # 2 x 9 = 18\n    # 3 x 9 = 27\n    # 1 x 10 = 10\n    # 2 x 10 = 20\n    # 3 x 10 = 30\n    n=len(arr)\n    arr.insert(0,1)\n    arr.append(1)\n    dp=[0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        dp[i] = dp[i-1]*arr[i]\n    for i in range(1,n):\n        for j in range(i):\n            dp[i]+=dp[j]*arr[i]\n    print(dp)\n    return dp[n-1]\n",
        "num_ids": 396
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            ans += prod\n    return ans\n",
        "num_ids": 60
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sub_list = []\n    #sum of product of all sublist\n    sum = 0\n    #sum of product of first (n-1) elements\n    p = 1\n    for i in range(n):\n        p = p * arr[i]\n        sub_list.append(p)\n",
        "num_ids": 80
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # table[i] will be storing the product of all elements\n    # to the left of arr[i]\n    table = [1] * n\n",
        "num_ids": 45
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    size = len(arr)\n    start = 0\n    finish = 1\n    start_sum = arr[0]\n    finish_sum = arr[0]\n    prod = arr[0]\n    ans = []\n    for i in range(1, size):\n        start_sum = start_sum * arr[i]\n        finish_sum = finish_sum * arr[i]\n        if i == (size - 1):\n            if start_sum > finish_sum:\n                ans.append(start_sum)\n            else:\n                ans.append(finish_sum)\n        elif start_sum > finish_sum:\n            ans.append(start_sum)\n            start_sum = arr[i]\n            finish_sum = arr[i]\n        elif finish_sum > start_sum:\n            ans.append(finish_sum)\n            start_sum = arr[i]\n            finish_sum = arr[i]\n        else:\n            ans.append(start_sum)\n            start_sum = arr[i]\n            finish_sum = arr[i]\n    return ans\n",
        "num_ids": 268
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    print (n)\n    print ((n | (n>>1)) ^ ((n & 1)<<1))\n    return n \n",
        "num_ids": 33
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #  x = n\n    #  t = 1\n    #  while n:\n    #      t = t<<1\n    #      n = n & (n - 1)\n    #      # t = t << 1\n    #      # n = n & (n - 1)\n    #  return (t - 1)\n    #  return (n ^ (1 << (size - 2)))\n",
        "num_ids": 95
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set all bits to 1 in mask\n    mask = 0b1111111111111111111111111111111111111111\n",
        "num_ids": 28
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first = n & ~(0x5555555555555555)\n    last = n & ~(0xaaaaaaaaaaaaaaaa)\n    middle = n & ~(0xaaaaaaaaaaaa5555)\n    middle = middle | (0x5555555555555555)\n    return first | middle | last\n    \n    #n = 8\n    #return first | middle | last\n",
        "num_ids": 95
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n & ~0x55555555) ^ ((n & 0xAAAAAAAA) >> 1)) & 0xFFFFFFFF\n",
        "num_ids": 32
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    def toggle_bits(n):\n        # To toggle bits of number x\n        # To reverse bits of number x\n        # 1 -> 0\n        # 0 -> 1\n        # 0 -> 0\n        # 1 -> 1\n        # https://www.geeksforgeeks.org/reverse-bits-number-python/\n        x = ((n & ~(0b111111111111111111111111111111)) + ((n & 0b111111111111111111111111111111) << 1))\n        return x\n    print (toggle_bits(n))\n    \ndef bit_not(n):\n    '''\n    Write a python function to return bitwise not of a number using xor bitwise operator https://www.geeksforgeeks.org/bitwise-complement-of-n-using-xor-operator/\n    '''\n    return (1 << 31) - 1 ^ n\n",
        "num_ids": 14
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n &= 0xFE   # reset the last bit\n    n |= 0x1000  # toggle the last bit\n    return n\n",
        "num_ids": 34
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n >> 1)\n",
        "num_ids": 12
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 8)\n    n = n ^ (n >> 16)\n    return n \n",
        "num_ids": 62
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    print(i)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "num_ids": 55
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    a.sort()\n    return a.index(x)\n",
        "num_ids": 25
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for k in range(len(a)):\n        if a[k] < x:\n            continue\n        else:\n            return k\n            break\ndef right_insertion(a, x):\n    for k in range(len(a)):\n        if a[len(a) - 1 - k] > x:\n            continue\n        else:\n            return len(a) - 1 - k\n            break\ndef find_range(a, x):\n    '''\n    Write a function that takes a sorted array and a key and returns the index i, j of the first and last occurrence of k in the array, where i is the smallest index i such that a[i] = <x> and j is the largest index j such that a[j] = <x>, or -1 if <x> does not occur in the array. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-7.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        j = bisect.bisect_right(a, x)\n        return i, j\n    return -1, -1\ndef count_of_less_than_equal_to(a, x):\n    '''\n    Write a function that takes a sorted array and a key and returns the number of elements in the array that are less than or equal to k. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-22.php\n    '''\n    return len(a) - bisect.bisect_right(a, x)\ndef count_of_greater_than_equal_to(a, x):\n    '''\n    Write a function that takes a sorted array and a key and returns the number of elements in the array that are greater than or equal to k. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-23.php\n    '''\n    return bisect.bisect_left(a, x)\ndef jump_search(a, x):\n    '''\n    Write a program that takes as input a sorted array and a key, and outputs the number of steps in the array that key is away from its index in the array. Note that if the array is too small, the search can be done by brute force. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-26.php\n    '''\n    k = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            return k\n        elif a[i] > x:\n            return i - k\n        else:\n            k += 1\ndef binary_search_iterative(a, x):\n    '''\n    Write a program that searches for an element in a given array by searching for the element in a sorted array. It must be implemented as a binary search algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-26.php\n    '''\n    for i in range(len(a)):\n        if a[i] == x:\n            return i\n        if a[i] > x:\n            return -1\ndef binary_search_recursive(a, low, high, x):\n    '''\n    Write a program that searches for an element in a given array by searching for the element in a sorted array. It must be implemented as a binary search algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-26.php\n    '''\n    if high < low:\n        return -1\n    mid = low + (high - low) // 2\n    if a[mid] == x:\n        return mid\n    if a[mid] > x:\n        return binary_search_recursive(a, low, mid - 1, x)\n    else:\n        return binary_search_recursive(a, mid + 1, high, x)\ndef insertion_sort(a, x):\n    '''\n    Write a program that finds the smallest missing positive integer in a given array. The array may contain duplicate entries. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    for i in range(len(a)):\n        if a[i] == x:\n            return a[i]\n        if a[i] > x:\n            return a[i] - 1\n    return a[len(a) - 1] + 1\ndef insertion_sort_2(a, x):\n    '''\n    Write a program that finds the smallest missing positive integer in a given array. The array may contain duplicate entries. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-27.php\n    '''\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[j] < a[i]:\n                a[i], a[j] = a[j], a[i]\n    for i in range(len(a)):\n        if a[i] == x:\n            return a[i]\n        if a[i] > x:\n            return a[i] - 1\n    return a[len(a) - 1] + 1\ndef left_rotate(a, x):\n    '''\n    Write a program to rotate a list to the left by k places, where k is non-negative. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    for i in range(x):\n        a.append(a[0])\n        a.pop(0)\ndef right_rotate(a, x):\n    '''\n    Write a program to rotate a list to the right by k places, where k is non-negative. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-28.php\n    '''\n    for i in range(x):\n        a.insert(0, a[len(a) - 1])\n        a.pop(len(a) - 1)\ndef merge_sort(a):\n    '''\n    Write a program to sort an array of 0s, 1s and 2s. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-29.php\n    '''\n    b = []\n    if len(a) > 1:\n        left = a[:len(a) // 2]\n        right = a[len(a) // 2:]\n        merge_sort(left)\n        merge_sort(right)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                a[k] = left[i]\n                i += 1\n            else:\n                a[k] = right[j]\n                j += 1\n            k += 1\n        while i < len(left):\n            a[k] = left[i]\n            i += 1\n            k += 1\n        while j < len(right):\n            a[k] = right[j]\n            j += 1\n            k += 1\ndef merge_sort_2(a):\n    '''\n    Write a program to sort an array of ",
        "num_ids": 12
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left, right = 0, len(a)-1\n    while left <= right:\n        mid = (left+right) // 2\n        if x > a[mid]:\n            left = mid+1\n        else:\n            right = mid-1\n    return left\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left, right = 0, len(a)-1\n    while left <= right:\n        mid = (left+right) // 2\n        if x < a[mid]:\n            right = mid-1\n        else:\n            left = mid+1\n    return left\n",
        "num_ids": 64
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "num_ids": 49
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n",
        "num_ids": 45
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return None\n",
        "num_ids": 48
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #Your code here\n    for i in range(len(a)):\n        if(a[i] < x):\n            return i\n    return len(a)\n",
        "num_ids": 42
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    result = -1\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right)//2\n        if x > a[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\ndef left_insertion2(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    i = bisect.bisect_left(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    return -1\ndef left_insertion3(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n    return -1\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    result = -1\n    left = 0\n    right = len(a)\n    while left < right:\n        mid = (left + right)//2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return left - 1\ndef right_insertion2(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    i = bisect.bisect_right(a, x)\n    if i < len(a) and a[i] == x:\n        return i\n    return -1\ndef right_insertion3(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(len(a)):\n        if x <= a[i]:\n            return i\n    return -1\ndef swap_left_right(a, i, j):\n    a[i], a[j] = a[j], a[i]\n    return a\ndef swap_left_right2(a, i, j):\n    a[i], a[j] = a[j], a[i]\n    return a\ndef swap_left_right3(a, i, j):\n    a[i], a[j] = a[j], a[i]\n    return a\ndef left_insertion_sort(a):\n    '''\n    Write a function to sort an array in ascending order using the left insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(1, len(a)):\n        x = a[i]\n        j = left_insertion(a, x)\n        a = swap_left_right(a, i, j)\n    return a\ndef left_insertion_sort2(a):\n    '''\n    Write a function to sort an array in ascending order using the left insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(1, len(a)):\n        x = a[i]\n        j = left_insertion2(a, x)\n        a = swap_left_right2(a, i, j)\n    return a\ndef left_insertion_sort3(a):\n    '''\n    Write a function to sort an array in ascending order using the left insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(1, len(a)):\n        x = a[i]\n        j = left_insertion3(a, x)\n        a = swap_left_right3(a, i, j)\n    return a\ndef right_insertion_sort(a):\n    '''\n    Write a function to sort an array in ascending order using the right insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(1, len(a)):\n        x = a[i]\n        j = right_insertion(a, x)\n        a = swap_left_right(a, j, i)\n    return a\ndef right_insertion_sort2(a):\n    '''\n    Write a function to sort an array in ascending order using the right insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(1, len(a)):\n        x = a[i]\n        j = right_insertion2(a, x)\n        a = swap_left_right2(a, j, i)\n    return a\ndef right_insertion_sort3(a):\n    '''\n    Write a function to sort an array in ascending order using the right insertion sort algorithm. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #write your code here\n    for i in range(1, len(a)):\n        x = a[i]\n        j = right_insertion3(a, x)\n        a = swap_left_right3(a, j, i)\n    return a\ndef get_median(a, i, j):\n    m = (i + j)//2\n    if i == j:\n        return a[i]\n    if j - i == 1:\n        return min(a[i], a[j])\n    k = (j - i)//4\n    if k == 0:\n        return max(a[i], a[j])\n    return get_median(a, i, j-k)\ndef get_median2(a, i, j):\n    m = (i + j)//2\n    if i == j:\n        return a[i]\n    if j - i == 1:\n        return min(a[i], a[j])\n    k = (j - i)//4\n    if k == 0:\n        return max(a[i], a[j])\n    if k == 1:\n        return get_median(a, i, j-k)\n    if k == 2:\n        return get_median(a, i+k, j)\n    return get_median(a, i+k, j-k)\ndef get_median3(a, i, j):\n    m = (i + j)//",
        "num_ids": 352
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print(\"String is starting with a vowel\") \n    else: \n        print(\"String is not starting with a vowel\")\n",
        "num_ids": 44
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex) \n    if re.match(pattern, string): \n        print(\"String is starting with vowel\") \n    else: \n        print(\"String is not starting with vowel\") \ncheck_str('a7') \n",
        "num_ids": 64
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) \n    \ndef main():\n    string = input('Enter string: ')\n    if check_str(string):\n        print('String starts with a vowel')\n    else:\n        print('String does not starts with a vowel')\n",
        "num_ids": 67
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)\n",
        "num_ids": 14
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    if(pattern.match(string)!= None): \n        print(\"String starts with vowel\")\n    else: \n        print(\"String does not start with vowel\")\n        \ndef main(): \n    string = input(\"Enter a string: \")\n    check_str(string)\n    \nif __name__ == '__main__': \n    main()",
        "num_ids": 97
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.match(regex,string)): \n        return True\n    else: \n        return False\nstring = input(\"Enter a string:\")\nif(check_str(string)): \n    print(\"String is starting with a vowel\")\nelse: \n    print(\"String is not starting with a vowel\"",
        "num_ids": 77
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(\"Valid starting string!\") \n    else: \n        print(\"Invalid starting string!\") \nif __name__ == '__main__': \n    check_str('python') \n    check_str('Python3') \n    check_str('ADAVAH') \n    check_str('AvaH') \n    check_str('AVaH') \n    check_str('AVa_h') \n    check_str('adavah') \n    check_str('avah') \n    check_str('aVah') \n    check_str('a_vah') \n    check_str('avah1') \n    check_str('avah2') \n    check_str('avah3') \n    check_str('avah4') \n    check_str('aVaHa') \n    check_str('avah5') \n    check_str('avah6') \n    check_str('avah7') \n    check_str('avah8') \n    check_str('avah9') \n    check_str('aVah10') \n    check_str('aVah11') \n    check_str('aVah12') \n    check_str('aVah13') \n    check_str('aVah14') \n    check_str('aVah15') \n    check_str('aVah16') \n    check_str('aVah17') \n    check_str('aVah18') \n    check_str('aVah19') \n    check_str('aVah20') \n    check_str('aVah21') \n    check_str('aVah22') \n    check_str('aVah23') \n    check_str('aVah24') \n    check_str('aVah25') \n    check_str('aVah26') \n    check_str('aVah27') \n    check_str('aVah28') \n    check_str('aVah29') \n    check_str('aVah30') \n    check_str('aVah31') \n    check_str('aVah32') \n    check_str('aVah33') \n    check_str('aVah34') \n    check_str('aVah35') \n    check_str('aVah36') \n    check_str('aVah37') \n    check_str('aVah38') \n    check_str('aVah39') \n    check_str('aVah40') \n    check_str('aVah41') \n    check_str('aVah42') \n    check_str('aVah43') \n    check_str('aVah44') \n    check_str('aVah45') \n    check_str('aVah46') \n    check_str('aVah47') \n    check_str('aVah48') \n    check_str('aVah49') \n    check_str('aVah50') \n    check_str('aVah51') \n    check_str('aVah52') \n    check_str('aVah53') \n    check_str('aVah54') \n    check_str('aVah55') \n    check_str('aVah56') \n    check_str('aVah57') \n    check_str('aVah58') \n    check_str('aVah59') \n    check_str('aVah60') \n    check_str('aVah61') \n    check_str('aVah62') \n    check_str('aVah63') \n    check_str('aVah64') \n    check_str('aVah65') \n    check_str('aVah66') \n    check_str('aVah67') \n    check_str('aVah68') \n    check_str('aVah69') \n    check_str('aVah70') \n    check_str('aVah71') \n    check_str('aVah72') \n    check_str('aVah73') \n    check_str('aVah74') \n    check_str('aVah75') \n    check_str('aVah76') \n    check_str('aVah77') \n    check_str('aVah78') \n    check_str('aVah79') \n    check_str('aVah80') \n    check_str('aVah81') \n    check_str('aVah82') \n    check_str('aVah83') \n    check_str('aVah84') \n    check_str('aVah85') \n    check_str('aVah86') \n    check_str('aVah87') \n    check_str('aVah88') \n    check_str('aVah89') \n    check_str('aVah90') \n    check_str('aVah91') \n    check_str('aVah92') \n    check_str('aVah93') \n    check_str('aVah94') \n    check_str('aVah95') \n    check_str('aVah96') \n    check_str('aVah97') \n    check_str('aVah98') \n    check_str('aVah99') \n    check_str('aVah100') \n    check_str('aVah101') \n    check_str('aVah102') \n    check_str('aVah103') \n    check_str('aVah104') \n    check_str('aVah105') \n    check_str('aVah106') \n    check_str('aVah107') \n    check_str('aVah108') \n    check_str('aVah109') \n    check_str('aVah110') \n    check_str('aVah111') \n    check_str('aVah112') \n    check_str('aVah113') \n    check_str('aVah114') \n    check_str('aVah115') \n    check_str('aVah116') \n    check_str('aVah117') \n    check_str('aVah118') \n    check_str('aVah119') \n    check_str('aVah120') \n    check_str('aVah121') \n    check_str('aVah122') \n    check_str('aVah123') \n    check_str('aVah124') \n    check_str('aVah125') \n    check_str('aVah126') \n    check_str('aVah127') \n    check_str('aVah128') \n    check_str('aVah129') \n    check_str('aVah130') \n    check_str('aVah131') \n    check_str('aVah132') \n    check_str('aVah133') \n    check_str('aVah134') \n    check_str('aVah135') \n    check_str('aVah136') \n    check_str('aVah137') \n    check_str('aVah138') \n    check_str('aVah139') \n    check_str('aVah140') \n    check_str('aVah141') \n    check_str('aVah142') \n    check_str('aVah143') \n    check_str('aVah144') \n    check_str('aVah145') \n    check_str('aVah146') \n    check_str('aVah147') \n    check_str('aVah148') \n    check_str('aVah149') \n    check_str('aVah150') \n    check_str('aVah151') \n    check_str('",
        "num_ids": 1979
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # return string[0] in ['a','e','i','o','u','A','E','I','O','U']\n    return bool(re.match(regex, string))\n",
        "num_ids": 46
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.fullmatch(regex, string) is not None",
        "num_ids": 17
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        print(\"Given string is starting with vowel\") \n    else: \n        print(\"Given string is not starting with vowel\") \n",
        "num_ids": 45
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n    \ndef fibonacci(n):\n    '''\n    Write a function to calculate the nth fibonacci number. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-12.php\n    '''\n    \n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-14.php\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef print_number_series(n):\n    '''\n    Write a function to print the first n numbers of the fibonacci sequence. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-16.php\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return print_number_series(n - 1) + print_number_series(n - 2)\n    \ndef factorial(n):\n    '''\n    Write a function to calculate the factorial of a given number n. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-17.php\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n    \ndef reverse_string(s):\n    '''\n    Write a function to reverse the string. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-18.php\n    '''\n    \n    if len(s) <= 1:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]\n    \ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome or not. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-19.php\n    '''\n    \n    if len(s) == 1:\n        return True\n    elif s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n    \ndef print_reverse_string(s):\n    '''\n    Write a function to print a string in reverse order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-20.php\n    '''\n    \n    if s == '':\n        return s\n    else:\n        return print_reverse_string(s[1:]) + s[0]\n    \ndef selection_sort(s):\n    '''\n    Write a function to sort a list using selection sort. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-21.php\n    '''\n    \n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[j] < s[i]:\n                s[i], s[j] = s[j], s[i]\n    return s\n    \ndef min_max(s):\n    '''\n    Write a function to get the minimum and maximum values in a list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-23.php\n    '''\n    \n    if len(s) == 1:\n        return s[0], s[0]\n    else:\n        min, max = min_max(s[1:])\n        return min, max\n    \ndef minimum_number(n, s):\n    '''\n    Write a function to get the minimum number from a list of numbers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-24.php\n    '''\n    \n    if len(s) == 1:\n        return s[0]\n    elif n == s[0]:\n        return minimum_number(n, s[1:])\n    else:\n        return minimum_number(n, s[1:])\n    \ndef harmonic_sum(n):\n    '''\n    Write a function to calculate the harmonic sum of n. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-25.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return 1 / n + harmonic_sum(n - 1)\n    \ndef fibonacci_sum(n):\n    '''\n    Write a function to calculate the sum of n fibonacci numbers. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-26.php\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return fibonacci_sum(n - 1) + fibonacci_sum(n - 2)\n    \ndef get_leap_years(year, n):\n    '''\n    Write a function to get the n last leap years from a year. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-28.php\n    '''\n    \n    if n == 0:\n        return []\n    elif year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return [year] + get_leap_years(year + 1, n - 1)\n            else:\n                return [year] + get_leap_years(year + 1, n - 1)\n        else:\n            return [year] + get_leap_years(year + 1, n - 1)\n    else:\n        return get_leap_years(year + 1, n - 1)\n    \ndef print_reverse_string_with_index(s):\n    '''\n    Write a function to print the string in reverse order along with the index of each character. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-29.php\n    '''\n    \n    if len(s) == 0:\n        return ''\n    else:\n        return print_reverse_string_with_index(s[1:]) +'' + str(s[0]) +'' + str(s[0] +'' + print_reverse_string_with_index(s[1:]))\n    \ndef factorial_with_for(n):\n    '''\n    Write a function to calculate the factorial of a number using for loop. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-30.php\n    '''\n    \n    if n == 1:\n        return 1\n    else:\n        return n * factorial_with_for(n - 1)\n    \ndef factorial_with_while(n):\n    '''\n    Write a function t",
        "num_ids": 7
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(2*n+1)/2\n",
        "num_ids": 15
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1/2)*(2*(n-1)+1)*geometric_sum(n-1)\n",
        "num_ids": 44
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return (n-1) + (n -2) + geometric_sum(n-1)\n",
        "num_ids": 36
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return 2 * (2 ** (n - 1)) + geometric_sum(n - 1)\n",
        "num_ids": 35
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def gs(n, i=1):\n        if n == 0:\n            return i\n        else:\n            return gs(n-1, i+1)\n    return gs(n)\n",
        "num_ids": 51
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    def geometric_sum_helper(n, k, acc):\n        if n == 0:\n            return acc\n        return geometric_sum_helper(n-1, k, k*acc)\n    \n    return geometric_sum_helper(n, 1, 1)\n",
        "num_ids": 67
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1) // 2 if n > 0 else 0\n",
        "num_ids": 20
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return (2 * geometric_sum(n-1))\n",
        "num_ids": 31
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n - 1)\n",
        "num_ids": 30
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangle = [] \n    \n    for i in range(1, 100): \n        triangle.append(i * (i + 1) // 2) \n    \n    for i in range(1, 100): \n        if n < 10: \n            if triangle[i] >= n: \n                return i \n        else: \n            if triangle[i] >= n: \n                if int(math.log10(n) + 1) - math.log10(triangle[i]) > int(math.log10(n) + 1) - math.log10(triangle[i - 1]): \n                    return i \n            else: \n                if int(math.log10(n) + 1) - math.log10(triangle[i]) < int(math.log10(n) + 1) - math.log10(triangle[i - 1]): \n                    return i - 1\n",
        "num_ids": 219
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(n*(n+1)/2)\n",
        "num_ids": 16
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    smallest = 10**(n-1) \n    index = 0\n    i = 1\n    while(smallest*i < 10**n): \n        index = index*10 + smallest*i \n        i = i + 1\n    return index \ndef find_Num(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/find-nth-triangular-number/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number \ndef find_Num_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 2. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-2/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**2 \ndef find_Num_Sq_Tri(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 3. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-3/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**3 \ndef find_Num_Sq_Tri_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 4. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-4/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**4 \ndef find_Num_Sq_Tri_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 5. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-5/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**5 \ndef find_Num_Sq_Tri_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 6. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-6/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**6 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 7. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-7/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**7 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 8. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-8/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**8 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 9. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-9/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**9 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 10. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-10/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**10 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 11. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-11/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**11 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq_Sq_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 12. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-12/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    number = 0\n    while(count<n): \n        number = number + count \n        count = count + 1\n    return number**12 \ndef find_Num_Sq_Tri_Sq_Sq_Sq_Sq_Sq_Sq_Sq_Sq_Sq_Sq(n): \n    '''\n    Write a python function to find the nth triangular number raised to the power of 13. https://www.geeksforgeeks.org/find-nth-triangular-number-raised-power-13/\n    '''\n    if (n<0): \n        return -1\n    if (n==0): \n        return 0\n    count = 1\n    numbe",
        "num_ids": 37
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the index value \n    index = 0\n",
        "num_ids": 16
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if (n == 1): \n        return(0) \n    \n    k = 0\n    i = 1\n    while(True): \n        k = k + i \n        if(math.log10(k) + 1 > n): \n            return(i-1) \n        i = i + 1\n",
        "num_ids": 78
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #Triangular number\n    index = n*(n+1)/2\n",
        "num_ids": 20
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sum = 0\n    for i in range(1,n):\n        sum += i\n    # print(sum)\n    return sum\n    \ndef is_Triangular(x):\n    '''\n    Write a python function to check if x is triangle number or not. https://www.geeksforgeeks.org/check-if-number-triangular-number/\n    '''\n    if (x*(x+1))/2 % 1 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 32
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #return int(math.floor(math.sqrt(1 + 8 * n)))\n    return int(math.floor(n * (n + 1) / 2)) \n",
        "num_ids": 43
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def get_factors(n): \n        '''\n        Function to return all the factors of a number.\n        '''\n        factor = [] \n        for i in range(1,int(math.sqrt(n))+1,1): \n            if n % i == 0: \n                if n // i == i: \n                    factor.append(i) \n                else: \n                    factor.append(i) \n                    factor.append(n//i) \n        return sorted(factor) \n    for i in range(1,10000000):\n        factor = get_factors(i)\n        if len(str(factor[-1])) == n:\n            return i\n        \ndef find_First_Index(n):\n    '''\n    Write a python function to find the first index of smallest triangular number with n digits. https://www.geeksforgeeks.org/first-index-smallest-triangular-number-with-n-digits/\n    '''\n    def get_factors(n): \n        '''\n        Function to return all the factors of a number.\n        '''\n        factor = [] \n        for i in range(1,int(math.sqrt(n))+1,1): \n            if n % i == 0: \n                if n // i == i: \n                    factor.append(i) \n                else: \n                    factor.append(i) \n                    factor.append(n//i) \n        return sorted(factor) \n    for i in range(1,10000000):\n        if len(str(get_factors(i)[-1])) == n:\n            return i\n    \ndef find_Last_Index(n):\n    '''\n    Write a python function to find the last index of smallest triangular number with n digits. https://www.geeksforgeeks.org/last-index-smallest-triangular-number-with-n-digits/\n    '''\n    def get_factors(n): \n        '''\n        Function to return all the factors of a number.\n        '''\n        factor = [] \n        for i in range(1,int(math.sqrt(n))+1,1): \n            if n % i == 0: \n                if n // i == i: \n                    factor.append(i) \n                else: \n                    factor.append(i) \n                    factor.append(n//i) \n        return sorted(factor) \n    for i in range(1,10000000):\n        if len(str(get_factors(i)[0])) == n:\n            return i\n    \ndef is_Pentagonal(n):\n    '''\n    Write a python function to check if an integer is pentagonal or not. https://www.geeksforgeeks.org/check-if-number-is-pentagonal-number-in-python/\n    '''\n    n = (math.sqrt(24*n+1)+1)/6\n    if n == int(n):\n        return True\n    return False\n    \ndef is_Triangular(n):\n    '''\n    Write a python function to check if an integer is triangular or not. https://www.geeksforgeeks.org/python-function-to-check-triangular-number/\n    '''\n    if n <= 0:\n        return False\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        sq = mid * (mid + 1) // 2\n        if sq == n:\n            return True\n        elif sq < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n    \ndef get_Triangular(n):\n    '''\n    Write a python function to return the nth triangular number. https://www.geeksforgeeks.org/get-nth-triangular-number-in-python/\n    '''\n    if n<1:\n        return 0\n    n = (math.sqrt(24*n+1)+1)/6\n    if n == int(n):\n        return n * (n + 1) // 2\n    else:\n        return None\n        \ndef find_Nth_Pentagonal(n):\n    '''\n    Write a python function to find the nth pentagonal number. https://www.geeksforgeeks.org/get-pentagonal-number-in-python/\n    '''\n    def get_factors(n): \n        '''\n        Function to return all the factors of a number.\n        '''\n        factor = [] \n        for i in range(1,int(math.sqrt(n))+1,1): \n            if n % i == 0: \n                if n // i == i: \n                    factor.append(i) \n                else: \n                    factor.append(i) \n                    factor.append(n//i) \n        return sorted(factor) \n    return get_factors(n)[-1] * (3*get_factors(n)[-1] - 1) // 2\n    \ndef find_Nth_Triangular(n):\n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/get-triangular-number-in-python/\n    '''\n    def get_factors(n): \n        '''\n        Function to return all the factors of a number.\n        '''\n        factor = [] \n        for i in range(1,int(math.sqrt(n))+1,1): \n            if n % i == 0: \n                if n // i == i: \n                    factor.append(i) \n                else: \n                    factor.append(i) \n                    factor.append(n//i) \n        return sorted(factor) \n    return get_factors(n)[-1] * (get_factors(n)[-1] + 1) // 2\n    \ndef is_Palindromic_Decimal(n):\n    '''\n    Write a python function to check if a number is palindromic in decimal system. https://www.geeksforgeeks.org/python-check-for-palindrome-number/\n    '''\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = rev * 10 + temp % 10\n        temp = temp // 10\n    return True if (n == rev) else False\n    \ndef is_Palindromic_Binary(n):\n    '''\n    Write a python function to check if a number is palindromic in binary system. https://www.geeksforgeeks.org/python-check-for-palindrome-number/\n    '''\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = rev * 2 + temp % 2\n        temp = temp // 2\n    return True if (n == rev) else False\n    \ndef is_Palindromic_Octal(n):\n    '''\n    Write a python function to check if a number is palindromic in octal system. https://www.geeksforgeeks.org/python-check-for-palindrome-number/\n    '''\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = rev * 8 + temp % 8\n        temp = temp // 8\n    return True if (n == rev) else False\n    \ndef is_Palindromic_Hexadecimal(n):\n    '''\n    Write a python function to check if a number is palindromic in hexadecimal system. https://www.geeksforgeeks.org/python-check-for-palindrome-number/\n    '''\n    temp = n\n    rev = 0\n    while(temp > 0): \n        rev = rev * 16 + temp % 16\n        temp = temp // 16\n    return True if (n == rev) else False\n    \ndef find_Nth_Palindromic(n):\n    '''\n    Write a python function to find the nth palindromic number. https://www.geeksforgeeks.org/find-nth-palindromic-number/\n    '''\n    def find_Factors(n): \n        '''\n        Function to return all the factors of a numbe",
        "num_ids": 13
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    # Initialize first number \n    i = 1\n    # Initialize minimum possible number with n digits\n    j = int(\"1\" + \"0\" * (n - 1))\n    # Initialize the number of zeroes required \n    k = n - 1\n    # Initialize the first number with k zeroes \n    num = int(\"0\" * k + \"1\")\n    while i < j:\n        # Increment i\n        i = i * 10\n        # Decrement j and update minimum possible number\n        j = j - 1\n        # Update number with k zeroes and increment i\n        num = num * 10 + int(\"1\" + \"0\" * k)\n        # Increment the number of zeroes\n        k = k - 1\n    # If the number of zeroes is not sufficient, return -1\n    if j!= 0:\n        return -1\n    # Otherwise return the index\n    return i\n",
        "num_ids": 232
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return test_dict\n",
        "num_ids": 36
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 64
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {i:j for i, j in zip(test_tup,test_tup[1:])}\n",
        "num_ids": 30
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))\n",
        "num_ids": 27
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup), 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n",
        "num_ids": 50
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    for item in test_tup:\n        print(f'{item[0]}: {item[1]}')\n    #return {test_tup[0]: test_tup[1], test_tup[2]: test_tup[3]}\n",
        "num_ids": 63
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i + 1]\n    return test_dict\n",
        "num_ids": 55
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # WRITE YOUR CODE HERE\n    d=dict()\n    l=len(test_tup)\n    for i in range(0,l,2):\n        d[test_tup[i]]=test_tup[i+1]\n    return d\n    pass\n",
        "num_ids": 67
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        my_dict[test_tup[i]] = test_tup[i + 1]\n    return my_dict\n",
        "num_ids": 59
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[0]!= s[i] :\n            return False\n    return True\n",
        "num_ids": 36
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 :\n        return True\n    for i in range(1,len(s)) :\n        if s[i]!= s[i-1] :\n            return False\n    return True\n",
        "num_ids": 54
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return True if s.count(s[0]) == len(s) else False\n",
        "num_ids": 22
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    flag = True\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            flag = False\n    return flag\n",
        "num_ids": 47
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) > 0 :\n        for i in range(len(s)) :\n            if i!= s[i] :\n                return False\n        return True\n    return True\n",
        "num_ids": 47
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c=s[0]\n    for i in s :\n        if(c!=i) :\n            return False\n    return True\n",
        "num_ids": 35
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s == s[::-1] :\n        return True\n    return False\n",
        "num_ids": 22
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = len(s)\n    if l == 0 :\n        return True\n    for i in range(l-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n",
        "num_ids": 55
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (all([x == s[0] for x in s]))\n",
        "num_ids": 20
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if(s[i] == s[i+1]) :\n            flag = 0\n        else :\n            flag = 1\n            break\n    if(flag == 0) :\n        return True\n    else :\n        return False\n",
        "num_ids": 68
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3)*side**2) / 4\n",
        "num_ids": 19
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) * math.sqrt(1.0 / 3.0)\n    \ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (1.0 / 6.0) * (side ** 3)\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    return side ** 2\n    \ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side ** 3\n    \ndef area_cuboid(side):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    return 6 * (side ** 2)\n    \ndef volume_cuboid(side):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    return side ** 3\n",
        "num_ids": 8
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3) / 4) * side ** 2\n",
        "num_ids": 20
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # area = math.sqrt(side**2*(side-math.sqrt(side**2+2*side)))\n    # return area\n    return math.sqrt(2*(side**2)*(math.sqrt(1+2*side)-1))\n    \ndef area_triangle(side1,side2,side3):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    s = (side1+side2+side3)/2\n    return math.sqrt(s*(s-side1)*(s-side2)*(s-side3))\n    # return math.sqrt((s*(s-side1)*(s-side2)*(s-side3))/2)\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the volume of a cube.\n    '''\n    return side**3\n    \ndef area_rectangle(side1,side2):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    return side1*side2\n    \ndef volume_sphere(side):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(side**3)\n    \ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    return math.pi*(radius**2)\n",
        "num_ids": 14
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*math.sqrt(3)/4\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(3) / 4) * side * side\ndef area_tetrahedron_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side * math.sqrt(2) / 4)\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side\ndef area_cube_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * side\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(2) / 4) * side * side\ndef area_octahedron_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side * math.sqrt(2))\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(5) / 4) * side * side\ndef area_dodecahedron_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side * math.sqrt(3) / 2)\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (math.sqrt(5) / 4) * side * side\ndef area_icosahedron_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side * math.sqrt(3) / 2)\ndef area_cube_2(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side\ndef area_cube_2_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * side\ndef volume_cube(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * side\ndef volume_cube_2(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * side\ndef volume_cube_h_square(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side * side * side\ndef area_polygon_regular(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n)))\ndef area_polygon_regular_h_square(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side\ndef area_polygon_regular_3_4(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side / 2\ndef area_polygon_regular_4_3(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side / 2\ndef area_polygon_regular_7_4(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side / 3\ndef area_polygon_regular_4_7(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side / 3\ndef area_polygon_regular_n(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side / n\ndef area_polygon_regular_h_square_n(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side / n\ndef area_polygon_regular_3_4_n(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side / 2\ndef area_polygon_regular_4_3_n(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side / 2\ndef area_polygon_regular_7_4_n(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side / 3\ndef area_polygon_regular_4_7_n(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side / 3\ndef volume_polygon_regular(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side\ndef volume_polygon_regular_h_square(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side * side\ndef volume_polygon_regular_3_4(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side * side / 2\ndef volume_polygon_regular_4_3(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side * side / 2\ndef volume_polygon_regular_7_4(n, side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((n - 2) * side * side / (4 * math.tan(math.pi / n))) * side * side * side / 3\ndef volume_polygon_regular_4_7(n, side):\n    '",
        "num_ids": 55
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**2*math.sqrt(3)/4\n",
        "num_ids": 17
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    #Solve for side 3\n    print(math.sqrt(6)/4)\n    #Using Heron's formula\n    #Solve for side 2 using side 3\n    #Solve for side 1\n    #Calculate area by multiplying the side 1 by the area of a triangle\n",
        "num_ids": 68
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print('\\n')\n    print(\"Area of Tetrahedron:\",math.sqrt(side**3))\n    print('\\n')\n    return\n",
        "num_ids": 40
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2 * (3**0.5) / 4)\ndef volume_tetrahedron(side):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    return (side**3 / (6**0.5))\ndef area_cube(side):\n    '''\n    Write a function to calculate the area of a cube.\n    '''\n    return (side**2) * 6\ndef volume_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return (side**3)\ndef area_parallelepiped(length, width, height):\n    '''\n    Write a function to calculate the area of a parallelepiped.\n    '''\n    return (length * width * height)\ndef volume_parallelepiped(length, width, height):\n    '''\n    Write a function to calculate the volume of a parallelepiped.\n    '''\n    return (length * width * height)\ndef area_prism(length, width, height, base):\n    '''\n    Write a function to calculate the area of a prism.\n    '''\n    return ((length * width) + (length * height) + (width * height) + (2 * base * height))\ndef volume_prism(length, width, height, base):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    return ((length * width) * height + base**2)\ndef area_pyramid(length, width, height):\n    '''\n    Write a function to calculate the area of a pyramid.\n    '''\n    return (((length * width) / 2) + (length * height))\ndef volume_pyramid(length, width, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return (length * width * height) / 3\ndef area_square(side):\n    '''\n    Write a function to calculate the area of a square.\n    '''\n    return (side**2)\ndef volume_square(side):\n    '''\n    Write a function to calculate the volume of a square.\n    '''\n    return (side**3) / 3\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return (length * width)\ndef volume_rectangle(length, width):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return (length * width)\ndef area_triangle(length, width):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return ((length * width) / 2)\ndef volume_triangle(length, width):\n    '''\n    Write a function to calculate the volume of a triangle.\n    '''\n    return ((length * width) / 2) * (length + width) / 2\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere.\n    '''\n    return ((4 * math.pi) * radius**2)\ndef volume_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return ((4 * math.pi) * radius**3) / 3\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the area of a cone.\n    '''\n    return (math.pi * radius * (radius + height))\ndef volume_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return (1/3 * math.pi * radius**2 * height)\ndef area_ellipse(major, minor):\n    '''\n    Write a function to calculate the area of an ellipse.\n    '''\n    return ((math.pi * (major * minor)) / (minor * math.sqrt(4 - (major**2 / minor**2))))\ndef volume_ellipse(major, minor):\n    '''\n    Write a function to calculate the volume of an ellipse.\n    '''\n    return ((math.pi * major * minor) / 3)\ndef area_rhombus(diagonal):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return (diagonal**2 / 2)\ndef volume_rhombus(diagonal):\n    '''\n    Write a function to calculate the volume of a rhombus.\n    '''\n    return (diagonal**3 / (4 * math.sqrt(2)))\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return (math.pi * radius**2)\ndef volume_circle(radius):\n    '''\n    Write a function to calculate the volume of a circle.\n    '''\n    return (math.pi * radius**3) / 3\ndef area_dodecahedron(edge):\n    '''\n    Write a function to calculate the area of a dodecahedron.\n    '''\n    return (math.sqrt((3**0.5) / (12**0.5)) * edge**2)\ndef volume_dodecahedron(edge):\n    '''\n    Write a function to calculate the volume of a dodecahedron.\n    '''\n    return (edge**3 * (5**0.5) / (12**0.5))\ndef area_icosahedron(side):\n    '''\n    Write a function to calculate the area of a icosahedron.\n    '''\n    return (math.sqrt((5**0.5) / (12**0.5)) * side**2)\ndef volume_icosahedron(side):\n    '''\n    Write a function to calculate the volume of a icosahedron.\n    '''\n    return (side**3 * (5**0.5) / (12**0.5))\ndef area_square_pyramid(base, height):\n    '''\n    Write a function to calculate the area of a square pyramid.\n    '''\n    return (area_square(base) + area_square(height))\ndef volume_square_pyramid(base, height):\n    '''\n    Write a function to calculate the volume of a square pyramid.\n    '''\n    return (area_square(base) * height) / 2\ndef area_triangular_prism(length, width, height):\n    '''\n    Write a function to calculate the area of a triangular prism.\n    '''\n    return ((3 * length * width) + (3 * length * height) + (3 * width * height))\ndef volume_triangular_prism(length, width, height):\n    '''\n    Write a function to calculate the volume of a triangular prism.\n    '''\n    return ((length * width * height) / 3)\ndef area_kite(length, width):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return (length * width)\ndef volume_kite(length, width):\n    '''\n    Write a function to calculate the volume of a kite.\n    '''\n    return ((length * width) / 2)\ndef area_kite_pyramid(base, height):\n    '''\n    Write a function to calculate the area of a kite pyramid.\n    '''\n    return ((area_kite(base, height) + area_kite(base, height)) + (area_kite(base, height) + area_kite(base, height)))\ndef volume_kite_pyramid(base, height):\n    '''\n    Write a function to calculate the volume of a kite pyramid.\n    '''\n    return ((area_kite(base, height) * 2) + (area_kite(base, height) * 2)) / 3\ndef area_dartboard(length, width, height):\n    '''\n    Write a function to calculate the area of a dartboard.\n    '''\n    return (math.pi * (((length + height) / 2)**2 + (width / 2)**2))\ndef volume_dartboard(length, width, height):\n    '''\n    Write a function to calculate the volume of a dartboard.\n    '''\n    return ((length * width * height) / 3)\ndef area_cy",
        "num_ids": 19
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    rotate_list = [0]*m + list[:-m]\n    print(\"list: \", list)\n    print(\"rotate_list: \", rotate_list)\n    return rotate_list\n",
        "num_ids": 57
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    \ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    list.insert(0, list.pop(0))\n    \ndef rotate_even(list, m):\n    '''\n    Write a function to rotate the specified list to the right by k places, where k is a multiple of list size. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    temp = list[0]\n    for i in range(len(list)-1):\n        list[i] = list[i+1]\n    list[len(list)-1] = temp\n    \ndef rotate_odd(list, m):\n    '''\n    Write a function to rotate the specified list to the left by k places, where k is a multiple of list size. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    temp = list[len(list)-1]\n    for i in range(len(list)-1,0,-1):\n        list[i] = list[i-1]\n    list[0] = temp\n    \ndef rotate(list, m):\n    '''\n    Rotate a list m times to the right or left\n    '''\n    if m % len(list) == 0:\n        rotate_even(list, m)\n    else:\n        rotate_odd(list, m)\n    return list\n",
        "num_ids": 44
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_size = len(list)\n    n = list_size - m\n    temp_list = list[n:]\n    for item in list[:n]:\n        temp_list.append(item)\n    list[:] = temp_list[:]\n    return list\n",
        "num_ids": 66
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    len_list = len(list)\n    m = m % len_list\n",
        "num_ids": 21
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    length_list = len(list)\n    temp_list = []\n    for i in range(m, length_list):\n        temp_list.append(list[i])\n",
        "num_ids": 44
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) == 0:\n        return list\n",
        "num_ids": 16
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # list = list(list)\n    list = list[m:] + list[:m]\n    return list\n",
        "num_ids": 29
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    list.append(0)\n    for i in range(n - 1, 0, -1):\n        list[i], list[i - 1] = list[i - 1], list[i]\n    list[0] = 0\n    return list\n",
        "num_ids": 69
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list[:] = list[-m:] + list[:-m]\n    return list\n",
        "num_ids": 23
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_right = []\n    n = len(list)\n    for i in range(m,n):\n        list_right.append(list[i])\n    for i in range(0,m):\n        list_right.append(list[i])\n    return list_right\n",
        "num_ids": 69
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not i for i in test_tup)\n",
        "num_ids": 17
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return False not in test_tup\n",
        "num_ids": 12
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n",
        "num_ids": 27
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = any(not x for x in test_tup)\n    return result\n",
        "num_ids": 22
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup!= None:\n        return False\n    else:\n        return True\n",
        "num_ids": 25
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n    \ndef check_list_values(test_list):\n    '''\n    Write a function to check if the given list contains atleast one numeric value and one alphabatic value.\n    '''\n    if isinstance(test_list, list):\n        for i in test_list:\n            if isinstance(i, str) or isinstance(i, int):\n                continue\n            else:\n                return False\n        for i in test_list:\n            if isinstance(i, str) or isinstance(i, int):\n                continue\n            else:\n                return False\n    else:\n        return False\n    return True\n",
        "num_ids": 102
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n",
        "num_ids": 24
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return any(not elem for elem in test_tup)\n",
        "num_ids": 19
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup:\n        print('Tuple contains None')\n    else:\n        print('Tuple contains None')\n",
        "num_ids": 32
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum + 1) if all(x % int(y) == 0 for y in str(x))]\n",
        "num_ids": 39
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = list(filter(lambda x: is_divisible(x, 9), range(startnum, endnum+1)))\n    return result\n",
        "num_ids": 36
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(map(lambda x: num%int(x)==0, str(num))):\n            result.append(num)\n    return result\n",
        "num_ids": 58
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    l = []\n    for i in range(startnum, endnum):\n        if(all(x==0 for x in set(list(map(int,list(str(i))))))):\n            l.append(i)\n    print(l)\n    \ndivisible_by_digits(int(input(\"Enter Start Number: \")),int(input(\"Enter End Number: \")))\n",
        "num_ids": 95
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def div_by_digits(startnum, endnum):\n        for number in range(startnum, endnum):\n            if all(number % digit == 0 for digit in str(number)):\n                yield number\n",
        "num_ids": 54
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #Digits=[]\n    #for x in range(startnum,endnum):\n    #    if is_divisible(x):\n    #        Digits.append(x)\n    #return Digits\n    return filter(lambda x: is_divisible(x),range(startnum,endnum))\n",
        "num_ids": 75
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digit_list = []\n    for num in range(startnum, endnum+1):\n        for i in str(num):\n            if int(i) not in digit_list:\n                digit_list.append(int(i))\n        if len(digit_list) > 0:\n            if len(digit_list) == len(str(num)):\n                print(f\"{num} is divisible by {digit_list}\")\n        digit_list = []\n",
        "num_ids": 113
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for num in range(startnum, endnum+1):\n        if(all(num%int(digit) == 0 for digit in str(num))):\n            print(num)\n",
        "num_ids": 45
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    a = list(range(startnum, endnum))\n    for i in a:\n        print(i)\n        for j in str(i):\n            if int(j) == 0:\n                print('not divisible')\n                break\n            elif i % int(j)!= 0:\n                print('not divisible')\n                break\n        else:\n            print('divisible')\n",
        "num_ids": 94
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return set(filter(lambda n: all([n % int(digit) == 0 for digit in str(n)]),range(startnum,endnum+1)))\n",
        "num_ids": 40
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    if a < 360:\n        area = math.pi*(r**2)*(a/360)\n        return area\n    else:\n        return None\n",
        "num_ids": 43
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<=360:\n        return (a/360)*(math.pi*r*r)\n    else:\n        return None\n",
        "num_ids": 35
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<=360:\n        s=(r**2)*(math.sin(math.radians(a))**2)\n        return s\n    else:\n        return None\n",
        "num_ids": 45
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return r*r*math.pi*(a/360)\n",
        "num_ids": 34
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle=a\n    if angle>360:\n        return None\n    else:\n        area=r**2*(angle/360)\n        return area\n    \ndef rectangle_area(w,h):\n    '''\n    Write a function to find the area of a rectangle. The function should take the width and height as inputs. Function should return None if the width or height is not positive numbers.\n    '''\n    if w>0 and h>0:\n        area=w*h\n        return area\n    else:\n        return None\n    \ndef rectangle_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a rectangle. The function should take the width and height as inputs. Function should return None if the width or height is not positive numbers.\n    '''\n    if w>0 and h>0:\n        perimeter=w+w+h+h\n        return perimeter\n    else:\n        return None\n        \ndef rectangle_area_via_property(width,height):\n    '''\n    Write a function to find the area of a rectangle. The function takes the width and height as inputs. Function returns None if the width or height is not positive numbers.\n    '''\n    return width*height\n    \ndef rectangle_perimeter_via_property(width,height):\n    '''\n    Write a function to find the perimeter of a rectangle. The function takes the width and height as inputs. Function returns None if the width or height is not positive numbers.\n    '''\n    return (width+width+height+height)\n    \ndef triangle_area(w,h):\n    '''\n    Write a function to find the area of a triangle. The function takes the width and height as inputs. Function should return None if the width or height is not positive numbers.\n    '''\n    if w>0 and h>0:\n        area=(w*h)/2\n        return area\n    else:\n        return None\n        \ndef triangle_perimeter(w,h):\n    '''\n    Write a function to find the perimeter of a triangle. The function takes the width and height as inputs. Function should return None if the width or height is not positive numbers.\n    '''\n    if w>0 and h>0:\n        perimeter=w+w+h\n        return perimeter\n    else:\n        return None\n        \ndef triangle_area_via_property(width,height):\n    '''\n    Write a function to find the area of a triangle. The function takes the width and height as inputs. Function should return None if the width or height is not positive numbers.\n    '''\n    return width*height/2\n    \ndef triangle_perimeter_via_property(width,height):\n    '''\n    Write a function to find the perimeter of a triangle. The function takes the width and height as inputs. Function should return None if the width or height is not positive numbers.\n    '''\n    return width+width+height\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive numbers.\n    '''\n    if r>0:\n        area=math.pi*r**2\n        return area\n    else:\n        return None\n    \ndef circle_area_via_property(radius):\n    '''\n    Write a function to find the area of a circle. The function takes the radius as input. Function should return None if the radius is not positive numbers.\n    '''\n    return math.pi*radius**2\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle. The function takes the radius as input. Function should return None if the radius is not positive numbers.\n    '''\n    if r>0:\n        circumference=2*math.pi*r\n        return circumference\n    else:\n        return None\n    \ndef circle_circumference_via_property(radius):\n    '''\n    Write a function to find the circumference of a circle. The function takes the radius as input. Function should return None if the radius is not positive numbers.\n    '''\n    return 2*math.pi*radius\n    \ndef square_area(side):\n    '''\n    Write a function to find the area of a square. The function takes the side as input. Function should return None if the side is not positive numbers.\n    '''\n    if side>0:\n        area=side**2\n        return area\n    else:\n        return None\n    \ndef square_area_via_property(side):\n    '''\n    Write a function to find the area of a square. The function takes the side as input. Function should return None if the side is not positive numbers.\n    '''\n    return side**2\n    \ndef square_perimeter(side):\n    '''\n    Write a function to find the perimeter of a square. The function takes the side as input. Function should return None if the side is not positive numbers.\n    '''\n    if side>0:\n        perimeter=side*4\n        return perimeter\n    else:\n        return None\n    \ndef square_perimeter_via_property(side):\n    '''\n    Write a function to find the perimeter of a square. The function takes the side as input. Function should return None if the side is not positive numbers.\n    '''\n    return side*4\n    \ndef parallelogram_area(base,height):\n    '''\n    Write a function to find the area of a parallelogram. The function takes the base and height as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    if base>0 and height>0:\n        area=base*height\n        return area\n    else:\n        return None\n    \ndef parallelogram_area_via_property(base,height):\n    '''\n    Write a function to find the area of a parallelogram. The function takes the base and height as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    return base*height\n    \ndef parallelogram_perimeter(base,height):\n    '''\n    Write a function to find the perimeter of a parallelogram. The function takes the base and height as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    if base>0 and height>0:\n        perimeter=base+base+height+height\n        return perimeter\n    else:\n        return None\n    \ndef parallelogram_perimeter_via_property(base,height):\n    '''\n    Write a function to find the perimeter of a parallelogram. The function takes the base and height as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    return base+base+height+height\n    \ndef rhombus_area(diagonal_1,diagonal_2):\n    '''\n    Write a function to find the area of a rhombus. The function takes the two diagonals as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    if diagonal_1>0 and diagonal_2>0:\n        area=diagonal_1*diagonal_2/2\n        return area\n    else:\n        return None\n    \ndef rhombus_area_via_property(diagonal_1,diagonal_2):\n    '''\n    Write a function to find the area of a rhombus. The function takes the two diagonals as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    return diagonal_1*diagonal_2/2\n    \ndef rhombus_perimeter(diagonal_1,diagonal_2):\n    '''\n    Write a function to find the perimeter of a rhombus. The function takes the two diagonals as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    if diagonal_1>0 and diagonal_2>0:\n        perimeter=diagonal_1+diagonal_1+diagonal_2+diagonal_2\n        return perimeter\n    else:\n        return None\n    \ndef rhombus_perimeter_via_property(diagonal_1,diagonal_2):\n    '''\n    Write a function to find the perimeter of a rhombus. The function takes the two diagonals as inputs. Function should return None if the base or height is not positive numbers.\n    '''\n    return diagonal_1+diagonal_1+diagonal_",
        "num_ids": 16
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        return r*r*math.acos(1-a/360)\n    else:\n        return None\n",
        "num_ids": 35
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<360:\n        area=(a/360)*math.pi*(r**2)\n    else:\n        area=None\n    return area\n",
        "num_ids": 39
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None if a > 360 else math.pi * r**2 * (a/360)\n",
        "num_ids": 24
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*a/360\n",
        "num_ids": 28
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    #taking input\n    r = int(input(\"Enter radius of the circle: \"))\n    a = int(input(\"Enter the angle in degrees: \"))\n    #converting angle to radians\n    angle = math.radians(a)\n    #if angle is larger than 360 degrees the return None\n    if angle>2*math.pi:\n        return None\n    #calculating area\n    area = (angle*r*r)/(2*math.pi)\n    return area\n",
        "num_ids": 116
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    L = [[[None]*(n+1) for i in range(m+1)] for j in range(l+1)] \n    #print(L)\n",
        "num_ids": 68
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs(X, Y, Z)\n",
        "num_ids": 14
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m=len(X) \n    n=len(Y) \n    l=len(Z) \n    L=[[[0 for i in range(l+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i==0 or j==0 or k==0: \n                    L[i][j][k] = 0\n                elif X[i-1]==Y[j-1]==Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n    lcs = \"\" \n    i = m \n    j = n \n    k = l \n    while i>0 and j>0 and k>0: \n        if X[i-1]==Y[j-1]==Z[k-1]: \n            lcs = X[i-1] + lcs \n            i-=1\n            j-=1\n            k-=1\n        else: \n            if L[i-1][j][k]>=L[i][j-1][k] and L[i-1][j][k]>=L[i][j][k-1] and L[i-1][j][k]>=L[i][j][k]: \n                i-=1\n            elif L[i][j-1][k]>=L[i-1][j][k] and L[i][j-1][k]>=L[i][j][k-1] and L[i][j-1][k]>=L[i][j][k]: \n                j-=1\n            elif L[i][j][k-1]>=L[i-1][j][k] and L[i][j][k-1]>=L[i][j-1][k] and L[i][j][k-1]>=L[i][j][k]: \n                k-=1\n    return lcs \n",
        "num_ids": 570
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X = \" \" + X\n    Y = \" \" + Y\n    Z = \" \" + Z\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[0 for i in range(l)] for j in range(n)] for k in range(m)]\n    for i in range(m): \n        for j in range(n): \n            for k in range(l): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i] == Y[j] and X[i] == Z[k]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n",
        "num_ids": 236
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    return lcs_of_two(X, Z)\n",
        "num_ids": 16
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n",
        "num_ids": 29
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z)\n    \n    # Declare the array for L[][] \n    L = [[None]*(n+1) for i in range(m+1)]\n    \n    # Fill the array L[] in bottom up manner \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1]+1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1]) \n",
        "num_ids": 237
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    \n    L = [[[0 for k in range(l + 1)] for i in range(n + 1)] for j in range(m + 1)] \n    for i in range(m + 1): \n        for j in range(n + 1): \n            for k in range(l + 1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                else: \n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i][j][k - 1]) \n    return L[m][n][l] \n",
        "num_ids": 243
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    \n    L = [[[None]*(l+1) for i in range(n+1)] for j in range(m+1)] \n    \n    # Following steps build L[m+1][n+1] in bottom up fashion. Note \n    # that L[i][j] contains length of LCS of X[0..i-1] and \n    # Y[0..j-1]  \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    \n    # L[m][n][l] contains length of LCS for X[0..n-1] and Y[0..m-1] \n    return L[m][n][l] \n",
        "num_ids": 349
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m=len(X)\n    n=len(Y)\n    l=len(Z)\n    L = [[None]*(n+1) for i in range(m+1)]\n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1] and X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1])\n    return L[m][n]\n",
        "num_ids": 188
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words = r\"\\b[A-Z][a-z]*\\b\"\n    pattern = re.compile(capital_words)\n    return \" \".join(pattern.findall(str1))\n",
        "num_ids": 53
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub('([A-Z])', r' \\1',str1)\n    print (str1)\n",
        "num_ids": 32
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    regex = r'([A-Z]\\S*\\s)'\n    result = re.sub(regex, r' \\1', str1)\n    return result\n",
        "num_ids": 43
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])', r' \\1', str1)\n",
        "num_ids": 25
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split()\n    str1=[i for i in str1 if i[0].isupper()]\n    str1=[i for i in str1 if len(i)>1]\n    for i in range(len(str1)):\n        str1[i]=str1[i][0].upper()+str1[i][1:]+' '\n    return ''.join(str1)\n",
        "num_ids": 101
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital_words_spaces_list = re.findall(r'[A-Z][a-z]*',str1)\n    spaced_str =''.join(capital_words_spaces_list)\n    print(spaced_str)\n",
        "num_ids": 62
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    res = re.findall(r\"\\b[A-Z][a-z]*\\b\", str1)\n    return \" \".join(res)\n",
        "num_ids": 40
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    a = re.sub(r'(\\b[A-Z][a-z]+)', r' \\1', str1)\n    return a\n",
        "num_ids": 37
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result_str = re.sub(r'([A-Z][a-z]+)', r' \\1', str1)\n    print(result_str)\n",
        "num_ids": 41
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    str1 =''.join(str1)\n    str1 = re.sub(r'\\w+(?=\\s[A-Z])',' ',str1)\n    return str1\n",
        "num_ids": 56
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: list(map(int, filter(lambda y: y.isdigit(), x))))\n",
        "num_ids": 36
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Regex to extract numbers in any of the string\n    # Return list of string after applying the expression\n    numbers_only = [\n        int(''.join(filter(str.isdigit, s)))\n        for s in nums_str\n    ]\n",
        "num_ids": 63
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [int(x) for x in nums_str]\n    nums.sort()\n    return [str(x) for x in nums]\n",
        "num_ids": 41
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Converting strings to ints.\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    # Sorting strings\n    nums_str.sort()\n    # Converting ints to strings.\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    return nums_str\n",
        "num_ids": 112
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: int(x))\n",
        "num_ids": 21
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(k) if k.isdigit() else k for k in re.split('(\\d+)', x)])\n",
        "num_ids": 45
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for j in range(len(nums_str)):\n        for i in range(j, len(nums_str)):\n            try:\n                if int(nums_str[i]) < int(nums_str[j]):\n                    nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n            except ValueError:\n                if len(nums_str[i]) < len(nums_str[j]):\n                    nums_str[i], nums_str[j] = nums_str[j], nums_str[i]\n    return nums_str\n",
        "num_ids": 159
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda s: int(s.split(' ')[0]))\n    return nums_str\n    \ndef sum_lists_of_numbers(nums_str):\n    '''\n    Write a function that can add two lists of numbers, where each of the lists is represented by a list of integers.\n    '''\n    a = [1,2,3,4]\n    b = [5,6,7,8]\n    \n    print(a)\n    print(b)\n    \n    c = []\n    for num in range(0,len(a)):\n        c.append(a[num]+b[num])\n    \n    print(c)\n    \ndef find_ranges(num_list):\n    '''\n    Write a function that returns a list of strings for each range of numbers in the input list.\n    '''\n    \n    list_of_ranges = []\n    \n    num_list.sort()\n    \n    num_range = 0\n    for num in num_list:\n        if not num_range:\n            num_range = num\n            continue\n        if num == num_range + 1:\n            num_range = num\n            continue\n        if num == num_list[-1]:\n            if num_range == num:\n                list_of_ranges.append(str(num_range))\n            else:\n                list_of_ranges.append(str(num_range) + '->' + str(num))\n            num_range = 0\n            continue\n        list_of_ranges.append(str(num_range) + '->' + str(num_range + 1))\n        num_range = num_range + 1\n    \n    return list_of_ranges\n",
        "num_ids": 211
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key = lambda x: int(x))\n    return nums_str\n",
        "num_ids": 27
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n    pass\n",
        "num_ids": 19
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n",
        "num_ids": 15
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + list(test_tup)\n",
        "num_ids": 16
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # check type of test_list\n    if not isinstance(test_list, list):\n        raise TypeError('test_list must be a list')\n    if not isinstance(test_tup, tuple):\n        raise TypeError('test_tup must be a tuple')\n",
        "num_ids": 67
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n",
        "num_ids": 21
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # print(i)\n    # if i>len(arr)-1:\n    #     return True\n    if i>=len(arr):\n        return True\n    if arr[i]<arr[(i-1)//2] or (i==0 and arr[0]<arr[1]):\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "num_ids": 119
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # Finding the largest element\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n",
        "num_ids": 40
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = 2*i+1\n    r = 2*i+2\n    if l<len(arr) and arr[i]>arr[l]:\n        return False\n    if r<len(arr) and arr[i]>arr[r]:\n        return False\n    if l<len(arr) and arr[i]>arr[l]:\n        return False\n    if r<len(arr) and arr[i]>arr[r]:\n        return False\n    return True\n",
        "num_ids": 116
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if (2*i+1 < len(arr) and arr[i] < arr[2*i+1]) or (2*i+2 < len(arr) and arr[i] < arr[2*i+2]):\n        return False\n    return check_min_heap_helper(arr, i-1)\n",
        "num_ids": 91
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return i >= 0 and i < len(arr) and arr[i] >= arr[(i-1) // 2] and check_min_heap_helper(arr, (i-1) // 2)\n",
        "num_ids": 52
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n",
        "num_ids": 15
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    left_node = 2*i+1\n    right_node = 2*i+2\n    if left_node < len(arr) and arr[left_node] < arr[i]:\n        return False\n    if right_node < len(arr) and arr[right_node] < arr[i]:\n        return False\n    return check_min_heap_helper(arr, left_node) and check_min_heap_helper(arr, right_node)\n",
        "num_ids": 127
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i] >= arr[int((i-1)/2)]:\n        return True\n    else:\n        return False\n",
        "num_ids": 40
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return False\n    if i == 0 and arr[0] > arr[1]:\n        return False\n    if i == len(arr)-1 and arr[-1] < arr[-2]:\n        return False\n    if i!= 0 and i!= len(arr)-1 and (arr[i] < arr[2*i+1] or arr[i] < arr[2*i+2]):\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)\n",
        "num_ids": 156
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if (i >= int(n/2) and i <= n):\n        return True\n    return False\n",
        "num_ids": 35
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if (n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2)) \n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # Using 'yield' \n    # initial values \n    a = 0\n    b = 1\n    # Since a and b are the first 2 numbers of the sequence, they both have a value.\n    # For the function to work, the first number in the sequence must be 1. \n    yield 1\n    # For any number after the first two, the formula is a(n) = (a(n-1) + b(n-1)) / 2.\n    for i in range(2, n): \n        # yield the result of the formula for each iteration\n        yield (a + b) // 2\n        # calculate the new values for a and b.\n        a, b = b, a + b\n",
        "num_ids": 168
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 1\n    jacobsthal_nums = [0, 1, 1]\n    for i in range(3, n+1):\n        #print(i)\n        jacobsthal_nums.append((jacobsthal_nums[i-1]+jacobsthal_nums[i-2])%(10**9+7))\n    return jacobsthal_nums[n]\n",
        "num_ids": 133
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # get nth jacobsthal number\n    return n * (n + 1) // 2 \n",
        "num_ids": 27
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    #The formula for calculating the jacobsthal number atn'th position is \n    # J(n) = 2(J(n-1)+2)\n    return 2*(2*jacobsthal_num(n-1)+2)\n",
        "num_ids": 62
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return (n*(n+1)) // 2\n",
        "num_ids": 15
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    \ndef fibonacci_number(n):\n    '''\n    Write a function to find the nth fibonacci number. https://www.geeksforgeeks.org/find-nth-fibonacci-number/ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_number(n-1) + fibonacci_number(n-2)\n    \ndef sum_of_digits(n):\n    '''\n    Write a function to find the sum of the digits in the nth fibonacci number. https://www.geeksforgeeks.org/python-program-to-sum-of-digits-of-a-number/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_of_digits(n-1) + sum_of_digits(n-2)\n",
        "num_ids": 55
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2))\n",
        "num_ids": 57
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1: \n        return False\n    if n == 1: \n        return 1\n    # nth term is sum of (n-1)th term \n    # multiplied by a special number \n    return (jacobsthal_num(n - 1) + jacobsthal_num(n - 1) * 2)\n",
        "num_ids": 83
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #TODO: sort the tuples list by the second element\n    #TODO: return the first K tuples\n    return sorted(test_list, key=itemgetter(1))[:K]\n",
        "num_ids": 52
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    res = []\n    for i in range(len(test_list)):\n        k = test_list[i][0]\n        if k <= K:\n            res.append(test_list[i])\n    return res\n",
        "num_ids": 56
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def partition(arr, low, high):\n        i = (low-1)         # index of smaller element\n        pivot = arr[high]     # pivot\n \n        for j in range(low, high):\n \n            # If current element is smaller than or\n            # equal to pivot\n            if arr[j] <= pivot:\n \n                # increment index of smaller element\n                i = i+1\n                arr[i], arr[j] = arr[j], arr[i]\n \n        arr[i+1], arr[high] = arr[high], arr[i+1]\n        return (i+1)\n \n    # The main function that implements QuickSort\n    # arr[] --> Array to be sorted,\n    # low  --> Starting index,\n    # high  --> Ending index\n \n    # Function to do Quick sort\n \n    def quickSort(arr, low, high):\n        if len(arr) == 1:\n            return arr\n        if low < high:\n \n            # pi is partitioning index, arr[p] is now\n            # at right place\n            pi = partition(arr, low, high)\n \n            # Separately sort elements before\n            # partition and after partition\n            quickSort(arr, low, pi-1)\n            quickSort(arr, pi+1, high)\n \n    # Driver code to test above\n    min_k_list = []\n    for x in range(len(test_list)):\n        for y in range(K):\n            min_k_list.append(test_list[x][y])\n    min_k_list.sort()\n    print(min_k_list)\n    quickSort(min_k_list, 0, len(min_k_list)-1)\n    print(min_k_list[0:K])\n    \n    return min_k_list[0:K]\n",
        "num_ids": 446
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # print(test_list)\n    test_list.sort()\n    return test_list[:K]\n",
        "num_ids": 29
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    l = []\n    for i in test_list:\n        l.append(i[1])\n    l.sort()\n    l = l[:K]\n    return l\n",
        "num_ids": 45
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = [('d', 1), ('a', 2), ('b', 3), ('c', 4), ('d', 5), ('a', 6), ('e', 7)]\n    K = 2\n    print(min_k(test_list, K))\n",
        "num_ids": 63
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    try:\n        # Sort the tuple list using key\n        sorted_list = sorted(test_list, key=lambda x: x[1])\n        min_list = sorted_list[:K]\n        return min_list\n    except Exception as e:\n        print('Exception occurred in min_k: ', e)\n",
        "num_ids": 77
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key = lambda x: x[1])[:K]\n",
        "num_ids": 24
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_tuple_list = sorted(test_list, key=lambda x: x[0])\n    return sorted_tuple_list[:K]\n",
        "num_ids": 40
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort tuple list in ascending order\n    test_list.sort(key=lambda x: x[0])\n    # Remove duplicate tuples from tuple list\n    unique_list = set(test_list)\n    unique_list = list(unique_list)\n    # Iterate over the sorted list\n    if len(unique_list)<K:\n        print('No k records found')\n    else:\n        # Iterate over each of the sorted record and print\n        for i in range(K):\n            print(unique_list[i])\n",
        "num_ids": 128
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [n for n in l1 if n in l2 and n in l3]\n",
        "num_ids": 23
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 67
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 65
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #raise NotImplementedError(\"TODO: complete the function\")\n    final = []\n    for index in range(0,len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            final.append(l1[index])\n    return final\n",
        "num_ids": 75
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n",
        "num_ids": 82
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i, val in enumerate(l1):\n        if val in l2 and val in l3:\n            index_list.append(i)\n    return index_list",
        "num_ids": 50
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            result.append(l1[i])\n    return result\n",
        "num_ids": 55
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    a = []\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] == l2[j] == l3[k]:\n            a.append(l1[i])\n            i += 1\n            j += 1\n            k += 1\n        elif l1[i] > l2[j]:\n            j += 1\n        elif l2[j] > l3[k]:\n            k += 1\n        elif l1[i] < l2[j]:\n            i += 1\n    return a\n",
        "num_ids": 179
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in index_list:\n            index_list.append(l1[i])\n    return index_list\n",
        "num_ids": 73
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            result_list.append(l1[i])\n    return result_list\n",
        "num_ids": 71
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    list_numbers = sorted(numbers)\n    if len(list_numbers) < 2:\n        return None\n    else:\n        return list_numbers[1]\n",
        "num_ids": 45
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest_number = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest_number:\n            smallest_number, second_smallest = number, smallest_number\n        elif number < second_smallest:\n            second_smallest = number\n    return second_smallest\n",
        "num_ids": 83
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    new_list = numbers[:]\n    new_list.sort()\n    return new_list[1]\n",
        "num_ids": 28
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return 'the list is empty'\n",
        "num_ids": 17
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    first = float('inf')\n    second = float('inf')\n",
        "num_ids": 18
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    def second_smallest_helper(nums):\n        if len(nums) < 2:\n            return None\n        if len(nums) == 2:\n            return min(nums)\n        \n        first = nums[0]\n        second = nums[1]\n        \n        for i in range(2, len(nums)):\n            if nums[i] < first:\n                second = first\n                first = nums[i]\n            elif nums[i] < second:\n                second = nums[i]\n        return second\n    \n    list1 = []\n    for i in numbers:\n        list1.append(i)\n    \n    return second_smallest_helper(list1)\n    \nprint(second_smallest([0,1,2,3,4,5,6,7,8,9,10]))",
        "num_ids": 211
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return None\n",
        "num_ids": 6
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # O(n) time complexity\n    # O(1) space complexity\n    if numbers == []:\n        return None\n    # sort the list in ascending order\n    numbers.sort()\n    # if there are 2 or more smallest numbers, the second smallest is the next smallest number\n    if len(numbers) >= 2:\n        return numbers[1]\n    # if there is only one smallest number, the second smallest is None\n    return None\n",
        "num_ids": 105
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    matches = re.findall(r\"ab+\", text)\n    return matches\n",
        "num_ids": 23
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = '^a.*b+$'\n    match = re.search(pattern, text)\n    print(match)\n    if match:\n        return match.group(0)\n    else:\n        return -1\nprint(text_match_zero_one('aab'))\nprint(text_match_zero_one('aabbbbbbbbbbb'))\nprint(text_match_zero_one('abbbbbabbb'))\nprint(text_match_zero_one('aaa'))\nprint(text_match_zero_one('aaaaa'))\n",
        "num_ids": 137
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.findall(r\"a\\b+?\", text)\n    return result\n",
        "num_ids": 24
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # return re.search('a(.*)b', text)\n    return re.match('a(.*)b', text)\n",
        "num_ids": 33
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_match_zero_one = re.findall(r'ab*', text)\n    if text_match_zero_one:\n        return \"Match\"\n    else:\n        return \"No match\"\n",
        "num_ids": 52
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'a\\b.*b', text)\n",
        "num_ids": 19
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile('a.b*')\n    if pattern.search(text)!= None:\n        return 'Match'\n    else:\n        return 'No match'\n",
        "num_ids": 45
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search('a.b+', text):\n        print('YES')\n    else:\n        print('NO')\n",
        "num_ids": 32
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = \"ab*\"\n    if re.search(pattern, text):\n        return \"Found pattern {0} in {1}\".format(pattern, text)\n    else:\n        return \"No match was found\"\n",
        "num_ids": 54
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search('a.+b',text) is not None\n",
        "num_ids": 19
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum([int(s1[::-1] in s2) for s1 in test_list for s2 in test_list])\n",
        "num_ids": 35
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    total_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                total_pairs += 1\n    return total_pairs\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_str_list = []\n    for i in test_list:\n        rev_str_list.append(i[::-1])\n",
        "num_ids": 36
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # str_list = []\n    # for i in range(len(test_list)):\n    #     temp = test_list[i]\n    #     rev = temp[::-1]\n    #     if temp == rev:\n    #         str_list.append(temp)\n    # print(len(str_list))\n    \n    print('My solution')\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i[::-1] == j:\n                count += 1\n                print('{} and {}'.format(i, j))\n    print(count)\n",
        "num_ids": 151
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[j][::-1] == test_list[i]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count_pairs += 1\n    return count_pairs\n",
        "num_ids": 77
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # using set to remove duplicates\n    duplicate_set = set()\n    unique_list = []\n",
        "num_ids": 28
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum([1 for i in range(len(test_list)-1) for j in range(i+1,len(test_list)) if test_list[i][::-1] == test_list[j][::-1]])\n",
        "num_ids": 59
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1.sort()\n    dict1 = {}\n    for i in range(len(list1)):\n        #print(list1[i], end ='')\n        if list1[i] in dict1:\n            dict1[list1[i]] += 1\n        else:\n            dict1[list1[i]] = 1\n    #print(dict1)\n    return dict1\n",
        "num_ids": 95
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new_list = []\n    for i in list1:\n        if type(i) == list:\n            new_list.append(tuple(i))\n    set1 = set(new_list)\n    dic1 = {}\n    for i in set1:\n        dic1[i] = new_list.count(i)\n    return dic1\n",
        "num_ids": 89
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        if type(i) is list:\n            list2.append(tuple(i))\n        else:\n            list2.append(i)\n    dict = {i:list2.count(i) for i in set(list2)}\n    return dict\n",
        "num_ids": 77
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(tuple(i))\n    result = {}\n    for i in list2:\n        if i in result.keys():\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n",
        "num_ids": 74
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dct = dict()\n    for lst in list1:\n        tuple1 = tuple(lst)\n        if tuple1 in dct:\n            dct[tuple1] += 1\n        else:\n            dct[tuple1] = 1\n    return dct\n",
        "num_ids": 69
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list1 = [1, [2, [3], 4], 2, 3]\n    return {tuple(i):list1.count(i) for i in list1}\n",
        "num_ids": 44
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dictionary = {}\n    for sublist in list1:\n        tuple = tuple(sublist)\n        dictionary[tuple] = dictionary.get(tuple, 0) + 1\n    return dictionary\n",
        "num_ids": 51
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = []\n    for sublist in list1:\n        sublists.append(tuple(sublist))\n    return dict(Counter(sublists))\n",
        "num_ids": 40
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if set(list1[i]) == set(list1[j]):\n                tup = tuple(list1[i])\n                sublist.append(tup)\n    return {i: sublist.count(i) for i in sublist}\n    \ndef unique_sublists2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if sorted(list1[i]) == sorted(list1[j]):\n                tup = tuple(list1[i])\n                sublist.append(tup)\n    return {i: sublist.count(i) for i in sublist}\n",
        "num_ids": 98
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    list_set = set()\n    list_dict = dict()\n    \n    for item in list1:\n        item = tuple(item)\n        list_set.add(item)\n    \n    for item in list_set:\n        list_dict[item] = list1.count(item)\n    \n    return list_dict\n",
        "num_ids": 83
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return False\n",
        "num_ids": 6
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if num.find('.')!= -1 and len(num) >= 3 else False\n",
        "num_ids": 25
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # str.isdecimal()\n    # Check if all characters in the string are decimal characters.\n",
        "num_ids": 25
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    if num[0] == '+' or num[0] == '-':\n        num = num[1:]\n    if len(num) == 0:\n        return False\n    if num[0] == '.':\n        return False\n    for i in range(0, len(num)):\n        if num[i] < '0' or num[i] > '9':\n            return False\n    return True\n",
        "num_ids": 116
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return bool(re.search(r'^\\d+\\.\\d{2}$', num))\n",
        "num_ids": 27
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '-' and num[1:].isdigit():\n        return True\n    elif num.isdigit():\n        return True\n    else:\n        return False\n",
        "num_ids": 48
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    for i in range(len(num)-1):\n        if num[i] == '.':\n            if len(num) == i+2 or (len(num) == i+3 and num[i+1]!= '0'):\n                return False\n    return True\n",
        "num_ids": 68
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '0' and len(num) > 1:\n        return False\n    if not num.isdigit() and not num.startswith('0.'):\n        return False\n    if len(num) == 1:\n        return False\n    if num.startswith('.'):\n        num = num[1:]\n    if len(num) == 1:\n        return False\n    if num.endswith('.'):\n        num = num[:-1]\n    if num.isdigit() and len(num) % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 144
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '-' or num[0] == '+':\n        num = num[1:]\n    try:\n        num = float(num)\n        if abs(num) > 1e-2:\n            return False\n        return True\n    except:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n",
        "num_ids": 11
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_element = set(arr)\n    if len(unique_element) == 1:\n        return True\n    return False\n    \ndef unique_Element_without_using_set(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr_unique_element_map = {}\n    for num in arr:\n        arr_unique_element_map[num] = arr_unique_element_map.get(num, 0) + 1\n    for num in arr_unique_element_map:\n        if arr_unique_element_map[num] == 1:\n            return True\n    return False\n",
        "num_ids": 86
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # arr = [1, 1, 3, 5, 5, 5, 5, 7, 8]\n    if len(set(arr))==1:\n        print(\"Element is unique\")\n    else:\n        print(\"Element is not unique\")\n",
        "num_ids": 59
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # code here\n    # create an empty list for storing the unique elements\n    unique_list = []\n    # iterate through each element of the list and if it is not already in unique_list add it to unique_list\n    for i in range(len(arr)):\n        if arr[i] not in unique_list:\n            unique_list.append(arr[i])\n    # if the length of unique_list is less than 2, return False\n    if len(unique_list) < 2:\n        return False\n    # return True if the length of unique_list is 2\n    else:\n        return True\n        ",
        "num_ids": 146
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if(len(arr)==0):\n        return False\n    if(len(arr)==1):\n        return True\n    arr.sort()\n    for i in range(1,len(arr)):\n        if(arr[i]==arr[i-1]):\n            return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique=set(arr)\n    return len(unique)==len(arr)\n",
        "num_ids": 22
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(arr) == len(set(arr))\n",
        "num_ids": 16
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr))!= 1:\n        return False\n    else:\n        return True\n",
        "num_ids": 27
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False\n",
        "num_ids": 29
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n",
        "num_ids": 41
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    element_count = {}\n    for element in arr:\n        if element not in element_count:\n            element_count[element] = 0\n        element_count[element] += 1\n    for count in element_count.values():\n        if count == 1:\n            return True\n    return False\n",
        "num_ids": 72
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in range(1,13):\n        if monthnum3 in [4,6,9,11]:\n            return 'True, There are 30 days in the month'\n        else:\n            return 'False, There are 30 days in the month'\n    else:\n        return 'Month number is out of range'\n",
        "num_ids": 78
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in month_31:\n        return \"Yes\"\n    elif monthnum3 in month_30:\n        return \"Yes\"\n    else:\n        return \"No\"\n",
        "num_ids": 47
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        print('The number {} contains 30 days.'.format(monthnum3))\n    else:\n        print('The number {} does not contain 30 days.'.format(monthnum3))\n",
        "num_ids": 71
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_name=['January','February','March','April','May','June','July','August','September','October','November','December']\n    if monthnum3 in range(1,13):\n        if monthnum3 in range(1,13):\n            if monthnum3 in range(1,13):\n                print(\"This month has 30 days\")\n    else:\n        print(\"Enter a valid month number\")\ncheck_monthnumber_number(int(input(\"Enter a month number: \")))\n",
        "num_ids": 115
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1:\n        print(\"Yes\")\n    elif monthnum3==2:\n        print(\"Yes\")\n    elif monthnum3==3:\n        print(\"Yes\")\n    elif monthnum3==4:\n        print(\"Yes\")\n    elif monthnum3==5:\n        print(\"Yes\")\n    elif monthnum3==6:\n        print(\"Yes\")\n    elif monthnum3==7:\n        print(\"Yes\")\n    elif monthnum3==8:\n        print(\"Yes\")\n    elif monthnum3==9:\n        print(\"Yes\")\n    elif monthnum3==10:\n        print(\"Yes\")\n    elif monthnum3==11:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
        "num_ids": 187
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number = {1:31,\n                        2:28,\n                        3:31,\n                        4:30,\n                        5:31,\n                        6:30,\n                        7:31,\n                        8:31,\n                        9:30,\n                        10:31,\n                        11:30,\n                        12:31}\n    if monthnum3 in monthnumber_number:\n        return True\n    else:\n        return False\n",
        "num_ids": 104
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnum3 = int(monthnum3)\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return '30'\n    elif monthnum3 == 2:\n        return '28'\n    else:\n        return 'Number of days of the month cannot be checked'\n",
        "num_ids": 99
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in (1, 3, 5, 7, 8, 10, 12):\n        return True\n    else:\n        return False\n        \ndef check_monthnumber_short(monthshort):\n    '''\n    Write a function to check whether the given month short name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthshort in ('Jan', 'Mar', 'May', 'Jul', 'Aug', 'Oct', 'Dec'):\n        return True\n    elif monthshort in ('Feb'):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"Month has 30 days\")\n    elif monthnum3 == 4 or 6 or 9 or 11:\n        print(\"Month has 31 days\")\n    else:\n        print(\"Month has 29 days\")\n",
        "num_ids": 70
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2!= 0 and monthnum3 < 7:\n        print (\"30 Days\")\n    else:\n        print (\"28 Days\")\n",
        "num_ids": 38
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    diff = 10**9\n    for i in range(1, n):\n        if abs(arr[i] - arr[i-1]) < diff:\n            diff = abs(arr[i] - arr[i-1])\n    return diff\n",
        "num_ids": 66
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n < 3: return 0\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff\n",
        "num_ids": 72
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    #Sort the array\n    arr.sort()\n    #Initialize the min difference as infinite\n    minimum_diff = arr[1]-arr[0]\n    #Start from the 2nd element\n    for i in range(1,n):\n        #Check if the ith element - (i+1)th element is less than the minimum difference\n        if arr[i]-(i+1) < minimum_diff:\n            #Update the minimum difference\n            minimum_diff = arr[i]-(i+1)\n    return minimum_diff\n",
        "num_ids": 126
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    diff = arr[1] - arr[0] \n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] < diff: \n                diff = arr[j] - arr[i] \n    return diff \n",
        "num_ids": 82
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    diff=sys.maxsize\n    for i in range(0,n):\n        for j in range(0,n):\n            if i!=j:\n                if (abs(arr[i]-arr[j]) < diff):\n                    diff=abs(arr[i]-arr[j])\n    return diff\n",
        "num_ids": 75
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = arr[1] - arr[0]\n    for i in range(0,n-1):\n        if mini > arr[i+1] - arr[i]:\n            mini = arr[i+1] - arr[i]\n    return mini\n",
        "num_ids": 69
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array \n    arr.sort() \n    \n    # initialize difference \n    min_diff = arr[n-1] - arr[0] \n    \n    for i in range(0,n-1): \n        if (arr[i+1] - arr[i] < min_diff): \n            min_diff = arr[i+1] - arr[i] \n    \n    return min_diff \n",
        "num_ids": 106
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    \n    # sort the array \n    arr.sort() \n    \n    # initialise the variable \n    min_diff = arr[1] - arr[0] \n    \n    # traverse the array for minimum difference \n    for i in range(n - 1): \n        if (arr[i + 1] - arr[i] < min_diff): \n            min_diff = arr[i + 1] - arr[i] \n",
        "num_ids": 107
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = 9999999999999\n    for i in range(1,n-1):\n        mini = min(mini, arr[i] - arr[i-1], arr[i+1]-arr[i])\n    return mini\n",
        "num_ids": 62
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    arr.sort()\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < min_diff:\n            min_diff = arr[i+1] - arr[i]\n    return min_diff\n",
        "num_ids": 71
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for i in str:\n        if i.isdigit():\n            number += 1\n    return number\n",
        "num_ids": 32
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # TODO: Write code\n    pass\n",
        "num_ids": 13
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digit_count = 0\n    for i in str:\n        if i.isdigit():\n            digit_count += 1\n    return digit_count\n",
        "num_ids": 38
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    print(len(str))\n",
        "num_ids": 10
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr=0\n    for i in str:\n        if i.isdigit():\n            ctr+=1\n    return ctr\n",
        "num_ids": 33
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if str[i].isdigit():\n            count+=1\n    return count\n",
        "num_ids": 39
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n",
        "num_ids": 9
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count=count+1\n    return count\n",
        "num_ids": 34
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # base cases \n    if (n == 1): \n        return 0\n    if (n == 2): \n        return 1\n    if (n == 3): \n        return 2\n    if (n == 4): \n        return 3\n",
        "num_ids": 60
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(input(\"Enter a number: \"))\n    i = 0\n    j = 1\n    count = 0\n    while True:\n        j += 1\n        if j % 2!= 0:\n            continue\n        else:\n            i = (i * 10 + 1) % n\n            if i == 0:\n                count += 1\n            if count == n:\n                print(j)\n                break\n",
        "num_ids": 99
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # variable to store nth polite number \n    k = 1\n    #variable to store the number of factorials \n    factorial = 1\n    # variable to store the number of 5s in the factorials \n    five = 0\n    # variable to store the number of 5k in the factorials \n    five_k = 0\n",
        "num_ids": 83
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = list(range(1, n+1))\n    l = []\n    \n    for i in range(n):\n        if (s[i] ** 2) <= n:\n            l.append(s[i] ** 2)\n            \n        if (s[i] ** 2) > n:\n            break\n    \n    return l[-1]\n",
        "num_ids": 88
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n<1): \n        return 0\n    if(n==1): \n        return 1\n    if(n==2): \n        return 2\n    if(n==3): \n        return 3\n    else: \n        return (2*n-3)*(n-1)//(n-2)\n",
        "num_ids": 80
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite = []\n    number = 1\n    while True:\n        polite.append(number)\n        next_polite = number + number % n + 1\n        if polite.count(next_polite) == 0: \n            polite.append(next_polite)\n        if polite.count(next_polite) > 1:\n            return next_polite\n        number = next_polite\n",
        "num_ids": 99
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return n*(n+1)\n",
        "num_ids": 12
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    for i in range(1, n):\n        if(is_polite_number(i)): \n            count += 1\n    return count \n",
        "num_ids": 43
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=1:\n        return n\n    #n is the index of the last polite number\n    #which is less than n\n    #i.e. the nth polite number is 1+2+3+....+n\n    #which is exactly 1+2+3+....+n-1\n    nth_polite_num = n - 1\n    \n    '''\n    1,2,3,4,5\n    1+2,1+2+3,1+2+3+4,1+2+3+4+5,1+2+3+4+5+6\n    1+2+3,1+2+3+4,1+2+3+4+5,1+2+3+4+5+6,1+2+3+4+5+6+7\n    '''\n    #return nth_polite_num\n    i = 1\n    sum = 0\n    #i is the index of the last polite number\n    #which is less than n\n    #nth_polite_num is the nth polite number\n    while i < nth_polite_num:\n        #print(i,nth_polite_num)\n        sum += i\n        i += 1\n    return sum + nth_polite_num\n",
        "num_ids": 109
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    flag = 0\n    for i in range(1, n + 1):\n        if i == 1:\n            flag = 1\n        elif i == 2:\n            flag = 2\n        else:\n            if i % 2 == 0:\n                flag += 1\n            else:\n                flag += 2\n    print(flag)\n    return flag\n",
        "num_ids": 82
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n",
        "num_ids": 17
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    import itertools\n    p = list(itertools.combinations(l1,2))\n    return p\n    \ndef get_multiples(n):\n    '''\n    Write a function to return a list of all multiples of a given number upto a specified limit.\n    '''\n    multiples = []\n    for i in range(n):\n        multiples.append(i*n)\n    return multiples\n",
        "num_ids": 33
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]\n",
        "num_ids": 30
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [x for x in zip(l1[0:-1], l1[1:])]\n",
        "num_ids": 26
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)):\n        if i<len(l1)-1:\n            l2.append((l1[i],l1[i+1]))\n    return l2\n    \ndef two_sum(l1, target):\n    '''\n    Write a function to return the indices of the two items in the given list that add up to a given target.\n    '''\n    d={}\n    for i in range(len(l1)):\n        if target-l1[i] in d:\n            return (d[target-l1[i]],i)\n        d[l1[i]]=i\n    return None\n    \ndef word_search(l1, word):\n    '''\n    Write a function to search for a given word in a given list of strings.\n    '''\n    for i in range(len(l1)):\n        if word in l1[i]:\n            return i\n    return -1\n    \ndef bubble_sort(l1):\n    '''\n    Write a function to sort a given list of items using bubble sort.\n    '''\n    for i in range(len(l1)):\n        for j in range(len(l1)-1):\n            if l1[j] > l1[j+1]:\n                l1[j],l1[j+1]=l1[j+1],l1[j]\n    return l1\n    \ndef merge_sort(l1,low,high):\n    '''\n    Write a function to sort a given list of items using merge sort.\n    '''\n    if low>=high:\n        return l1\n    mid=(low+high)//2\n    l1=merge_sort(l1,low,mid)\n    l1=merge_sort(l1,mid+1,high)\n    return merge(l1,low,mid,high)\n    \ndef merge(l1,low,mid,high):\n    '''\n    Write a function to sort a given list of items using merge sort.\n    '''\n    l2=[]\n    i,j=low,mid+1\n    while i<=mid and j<=high:\n        if l1[i]<l1[j]:\n            l2.append(l1[i])\n            i+=1\n        else:\n            l2.append(l1[j])\n            j+=1\n    while i<=mid:\n        l2.append(l1[i])\n        i+=1\n    while j<=high:\n        l2.append(l1[j])\n        j+=1\n    for i in range(low,high+1):\n        l1[i]=l2[i-low]\n    return l1\n    \ndef list_sum(l1):\n    '''\n    Write a function to return the sum of all items in a given list.\n    '''\n    total=0\n    for i in l1:\n        total+=i\n    return total\n    \ndef list_mean(l1):\n    '''\n    Write a function to return the mean of all items in a given list.\n    '''\n    total=0\n    for i in l1:\n        total+=i\n    return total/len(l1)\n    \ndef list_median(l1):\n    '''\n    Write a function to return the median of all items in a given list.\n    '''\n    if len(l1)%2==0:\n        return (l1[len(l1)//2]+l1[len(l1)//2-1])/2\n    else:\n        return l1[len(l1)//2]\n    \ndef list_mode(l1):\n    '''\n    Write a function to return the mode of all items in a given list.\n    '''\n    d={}\n    for i in l1:\n        if i in d:\n            d[i]+=1\n        else:\n            d[i]=1\n    return max(d.values())\n    \ndef list_product(l1):\n    '''\n    Write a function to return the product of all items in a given list.\n    '''\n    prod=1\n    for i in l1:\n        prod*=i\n    return prod\n    \ndef list_product_except_self(l1):\n    '''\n    Write a function to return the product of all items in a given list except for self.\n    '''\n    return [l1[i]*(len(l1)-i) for i in range(len(l1))]\n    \ndef remove_duplicates(l1):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    l2=[]\n    for i in l1:\n        if i not in l2:\n            l2.append(i)\n    return l2\n    \ndef list_to_string(l1):\n    '''\n    Write a function to convert a given list of characters into a string.\n    '''\n    return ''.join(l1)\n    \ndef split_string(string1):\n    '''\n    Write a function to split a given string into a list of characters.\n    '''\n    return list(string1)\n    \ndef merge_lists(l1,l2):\n    '''\n    Write a function to merge two given lists of items into a single list.\n    '''\n    return l1+l2\n    \ndef list_of_factors(n):\n    '''\n    Write a function to return a list of all factors of a given number.\n    '''\n    l1=[i for i in range(1,n+1) if n%i==0]\n    return l1\n    \ndef is_prime(n):\n    '''\n    Write a function to return True if a given number is prime, otherwise False.\n    '''\n    for i in range(2,int(n**0.5)+1):\n        if n%i==0:\n            return False\n    return True\n    \ndef prime_factors(n):\n    '''\n    Write a function to return a list of prime factors of a given number.\n    '''\n    l1=[]\n    for i in range(2,int(n**0.5)+1):\n        while n%i==0:\n            l1.append(i)\n            n/=i\n    if n>1:\n        l1.append(n)\n    return l1\n    \ndef fibonacci_sequence(n):\n    '''\n    Write a function to generate the first n terms of the Fibonacci sequence.\n    '''\n    l1=[0,1]\n    for i in range(2,n):\n        l1.append(l1[i-1]+l1[i-2])\n    return l1\n    \ndef prime_factors_of_factorial(n):\n    '''\n    Write a function to return the prime factors of the factorial of a given number.\n    '''\n    l1=[]\n    for i in range(2,int(n**0.5)+1):\n        while n%i==0:\n            l1.append(i)\n            n/=i\n    if n>1:\n        l1.append(n)\n    return l1\n    \ndef list_of_primes(n):\n    '''\n    Write a function to return a list of all prime numbers less than or equal to a given number.\n    '''\n    l1=[]\n    for i in range(2,n+1):\n        if is_prime(i):\n            l1.append(i)\n    return l1\n    \ndef palindrome(s):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    if len(s)<=1:\n        return True\n    elif s[0]!=s[-1]:\n        return False\n    else:\n        return palindrome(s[1:-1])\n    \ndef reverse(s):\n    '''\n    Write a function to return the reverse of a given string.\n    '''\n    return s[::-1]\n    \ndef rotate(string1,n):\n    '''\n    Write a function to rotate a given string by a given number of characters.\n    '''\n    return string1[n:]+string1[:n]\n    ",
        "num_ids": 18
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = [1,2,3,4,5,6,7,8,9]\n    \n    return [[l1[i],l1[i+1]] for i in range(len(l1)-1)]\n",
        "num_ids": 56
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n",
        "num_ids": 32
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 0:\n        return []\n    elif len(l1) == 1:\n        return [(l1[0],l1[0])]\n    else:\n        res = []\n        for i in range(len(l1)-1):\n            res.append((l1[i],l1[i+1]))\n        return res\n",
        "num_ids": 90
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res = []\n    for i in range(len(l1) - 1):\n        res.append((l1[i], l1[i + 1]))\n    return res\n",
        "num_ids": 45
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1) - 1):\n        l2.append([l1[i],l1[i + 1]])\n    return l2\n",
        "num_ids": 48
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Hash Map for storing the count\n    # Hash Map for fast look up\n    hash_map = {}\n    \n    for i in arr:\n        hash_map[i] = hash_map.get(i, 0) + 1\n    \n    \n    for i in arr:\n        if(sum - i) in hash_map:\n            return hash_map[i]*hash_map[sum-i]\n    return 0\n",
        "num_ids": 103
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count +=1\n",
        "num_ids": 55
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = set()\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs.add((arr[i], arr[j]))\n    return len(pairs)\n",
        "num_ids": 78
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    arr = sorted(arr)\n    i = 0\n    j = len(arr) - 1\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] < sum:\n            i += 1\n        else:\n            j -= 1\n    return count\n",
        "num_ids": 101
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # M1: Brute Force: Time: O(N^2) Space: O(1)\n    # Initialize counter to 0\n    count = 0\n    # Iterate through all the elements in array\n    for i in range(len(arr)):\n        # Iterate through all the elements in array starting from i\n        for j in range(i + 1, len(arr)):\n            # If pair found, increment count\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 125
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if(arr[i]+arr[j]==sum):\n                result+=1\n    return result\n",
        "num_ids": 59
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]+arr[j] == sum:\n                count += 1\n    return count\n",
        "num_ids": 58
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # Your code here\n    count = 0\n    n = len(arr)\n",
        "num_ids": 21
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n",
        "num_ids": 17
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # your code goes here\n    li_diff = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_diff\n",
        "num_ids": 44
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    for i in li1:\n        if i in li2:\n            li2.remove(i)\n    return li2\n",
        "num_ids": 32
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    lidiff = list(set(li1) - set(li2))\n    return(lidiff)\n",
        "num_ids": 29
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n",
        "num_ids": 33
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n    ",
        "num_ids": 19
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # li1 = [1,2,3,4]\n    # li2 = [4,5,6,7]\n    # li1 = set(li1)\n    # li2 = set(li2)\n    li3 = list(set(li1).difference(set(li2)))\n    li3.sort()\n    return li3\n",
        "num_ids": 86
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for x in range(1, n+1):\n        if (x % 2!= 0):\n            sum += x**4\n    return sum\n",
        "num_ids": 42
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3)/6)\n",
        "num_ids": 26
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1) : \n        sum = sum + (i ** 4) \n    return sum\n",
        "num_ids": 38
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 1 :\n        return None\n    else:\n        return ((n*(n+1))/2)*(n*(n+1)*(2*n+1))\n",
        "num_ids": 46
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num = 1\n    sum = 0\n    for i in range(1,n+1) : \n        if(i % 2 == 0) : \n            num = num + 1\n        else : \n            sum = sum + (num * num * num * num)\n            num = num + 2\n    return sum\nprint(odd_num_sum(7))",
        "num_ids": 87
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([(4**i)*(i+1) for i in range(1,n+1) if ((4**i)*(i+1))%2!=0])\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1,2) :\n        total += i ** 4\n    return total\nprint(odd_num_sum(10))\n",
        "num_ids": 45
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_sum = 0\n    if n == 0 : \n        return 0\n    elif n == 1 : \n        return 1\n    else :\n        for i in range(1, n+1) : \n            odd_num_sum = odd_num_sum + (i ** 4)\n        return odd_num_sum\n",
        "num_ids": 82
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    num_sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            num_sum += i**4\n    return num_sum\n",
        "num_ids": 48
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #start writing your code here\n    sum = 0\n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n    return sum\n",
        "num_ids": 50
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    opening = ['(', '{', '[']\n    closing = [')', '}', ']']\n    for i in exp:\n        if i in opening:\n            stack.append(i)\n        else:\n            if stack:\n                top_element = stack.pop()\n                if top_element == '(' and i!= ')':\n                    return False\n                elif top_element == '{' and i!= '}':\n                    return False\n                elif top_element == '[' and i!= ']':\n                    return False\n            else:\n                return False\n    if stack:\n        return False\n    return True\n",
        "num_ids": 159
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(' or char == '[' or char == '{':\n            stack.append(char)\n        elif char == ')':\n            if len(stack) > 0 and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        elif char == '}':\n            if len(stack) > 0 and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    return False\n    \n",
        "num_ids": 186
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(')')\n        else:\n            if len(stack)!= 0:\n                stack.pop()\n            else:\n                return False\n    return True\n",
        "num_ids": 71
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n        else:\n            stack.append(i)\n    if stack:\n        return False\n    else:\n        return True\ndef check_expression_stack(exp):\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            if not stack:\n                return False\n            else:\n                if i == '+':\n                    stack.pop()\n                elif i == '-':\n                    if stack[-1]!= '(':\n                        return False\n                elif i == '*':\n                    if stack[-1]!= '(':\n                        return False\n                elif i == '/':\n                    if stack[-1]!= '(':\n                        return False\n        else:\n            stack.append(i)\n    if stack:\n        return False\n    else:\n        return True\ndef find_balance_index(exp):\n    '''\n    Write a function to return the minimum number of parentheses that can be removed to make the expression balanced. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in range(len(exp)):\n        if exp[i] in operators:\n            if not stack:\n                return i\n            else:\n                if exp[i] == '+':\n                    stack.pop()\n                elif exp[i] == '-':\n                    if stack[-1]!= '(':\n                        return i\n                elif exp[i] == '*':\n                    if stack[-1]!= '(':\n                        return i\n                elif exp[i] == '/':\n                    if stack[-1]!= '(':\n                        return i\n        else:\n            stack.append(exp[i])\n    if stack:\n        return len(exp)\n    else:\n        return -1\ndef find_balance_index_stack(exp):\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in range(len(exp)):\n        if exp[i] in operators:\n            if not stack:\n                return i\n            else:\n                if exp[i] == '+':\n                    stack.pop()\n                elif exp[i] == '-':\n                    if stack[-1]!= '(':\n                        return i\n                elif exp[i] == '*':\n                    if stack[-1]!= '(':\n                        return i\n                elif exp[i] == '/':\n                    if stack[-1]!= '(':\n                        return i\n        else:\n            stack.append(exp[i])\n    if stack:\n        return len(exp)\n    else:\n        return -1\ndef evaluate_expression(exp):\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            if i == '+':\n                stack.append(int(stack.pop())+int(stack.pop()))\n            elif i == '-':\n                stack.append(int(stack.pop())-int(stack.pop()))\n            elif i == '*':\n                stack.append(int(stack.pop())*int(stack.pop()))\n            elif i == '/':\n                stack.append(int(stack.pop())/int(stack.pop()))\n        else:\n            stack.append(i)\n    return int(stack[0])\ndef evaluate_expression_stack(exp):\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            if i == '+':\n                a = int(stack.pop())\n                b = int(stack.pop())\n                stack.append(a+b)\n            elif i == '-':\n                a = int(stack.pop())\n                b = int(stack.pop())\n                stack.append(a-b)\n            elif i == '*':\n                a = int(stack.pop())\n                b = int(stack.pop())\n                stack.append(a*b)\n            elif i == '/':\n                a = int(stack.pop())\n                b = int(stack.pop())\n                stack.append(a/b)\n        else:\n            stack.append(i)\n    return int(stack[0])\ndef generate_expression(num1, num2, op):\n    '''\n    Write a function to generate a given expression. https://www.geeksforgeeks.org/generate-a-given-expression-using-given-number-of-operands/\n    '''\n    operators = ['+', '-', '*', '/']\n    stack = deque()\n    for i in range(num1):\n        stack.append(operators[i%4])\n    for i in range(num2):\n        stack.append(str(random.randint(1,9)))\n    return stack\ndef generate_expression_stack(num1, num2):\n    '''\n    Write a function to generate a given expression using stack. https://www.geeksforgeeks.org/generate-a-given-expression-using-given-number-of-operands/\n    '''\n    operators = ['+', '-', '*', '/']\n    stack = deque()\n    for i in range(num1):\n        stack.append(operators[i%4])\n    for i in range(num2):\n        stack.append(str(random.randint(1,9)))\n    return stack\ndef generate_expression_left_right_bracket(num1, num2):\n    '''\n    Write a function to generate a given expression using left and right bracket. https://www.geeksforgeeks.org/generate-a-given-expression-using-given-number-of-operands/\n    '''\n    stack = deque()\n    for i in range(num1):\n        stack.append('(')\n    for i in range(num2):\n        stack.append(str(random.randint(1,9)))\n    return stack\ndef generate_expression_left_right_bracket_stack(num1, num2):\n    '''\n    Write a function to generate a given expression using left and right bracket. https://www.geeksforgeeks.org/generate-a-given-expression-using-given-number-of-operands/\n    '''\n    stack = deque()\n    for i in range(num1):\n        stack.append('(')\n    for i in range(num2):\n        stack.append(str(random.randint(1,9)))\n    return stack\ndef print_expression(exp):\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            print(stack.pop(), end=\" \")\n            print(i, end=\" \")\n            stack.append(i)\n        else:\n            stack.append(i)\n    print()\ndef print_expression_stack(exp):\n    stack = deque()\n    operators = ['+', '-', '*', '/']\n    for i in exp:\n        if i in operators:\n            a = int(stack.pop())\n            b = int(stack.pop())\n            if i == '+':\n                print(a, '+', b, '=', a+b)\n            elif i == '-':\n                print(a, '-', b, '=', a-b)\n            elif i == '*':\n                print(a, '*', b, '=', a*b)\n            elif i == '/':\n                print(a, '/', b, '=', a/b)\n            stack.append(a+b)\n        else:\n            stack.append(i)\n",
        "num_ids": 343
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression2(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression3(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression4(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression5(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression6(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression7(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression8(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression9(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == 0:\n                return False\n            else:\n                op = stack.pop()\n                if op == '(' and ch == ')':\n                    continue\n                if op == '{' and ch == '}':\n                    continue\n                if op == '[' and ch == ']':\n                    continue\n                else:\n                    return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\ndef check_expression10(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for ch in exp:\n        if ch in ['(', '{', '[']:\n            stack.append(ch)\n        if ch in [')', '}', ']']:\n            if len(stack) == ",
        "num_ids": 60
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    opening = ['(', '{', '[']\n    closing = [')', '}', ']']\n    my_stack = deque()\n    for i in exp:\n        if i in opening:\n            my_stack.append(i)\n        else:\n            if len(my_stack) == 0:\n                return False\n            last_elem = my_stack.pop()\n            if last_elem == '(' and i == ')':\n                continue\n            elif last_elem == '{' and i == '}':\n                continue\n            elif last_elem == '[' and i == ']':\n                continue\n            else:\n                return False\n    if len(my_stack) == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 187
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(' or char == '{' or char == '[':\n            stack.append(char)\n            continue\n        if char == ')' or char == '}' or char == ']':\n            if len(stack) == 0:\n                return False\n            top_element = stack.pop()\n            if top_element == '(' and char == ')':\n                continue\n            if top_element == '{' and char == '}':\n                continue\n            if top_element == '[' and char == ']':\n                continue\n            return False\n    if len(stack) > 0:\n        return False\n    return True\n",
        "num_ids": 165
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    my_queue = deque()\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            my_queue.append(exp[i])\n        elif exp[i] == ')':\n            if len(my_queue) > 0:\n                my_queue.pop()\n            else:\n                my_queue.append(exp[i])\n                break\n    if len(my_queue) > 0:\n        print(\"Unbalanced\")\n    else:\n        print(\"Balanced\")\n",
        "num_ids": 126
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_par = set('({[')\n    close_par = set(')}]')\n    mapping = dict(zip(open_par, close_par))\n    queue = deque()\n    for s in exp:\n        if s in open_par:\n            queue.append(mapping[s])\n        elif s in close_par:\n            if not queue or s!= queue.pop():\n                return False\n    return len(queue) == 0\n",
        "num_ids": 111
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append('(')\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n",
        "num_ids": 63
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split(' ')\n    final_str = ''\n    for word in words:\n        if len(word)!= K:\n            final_str += word +''\n    return final_str\n",
        "num_ids": 53
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(\" \")\n    res_list = []\n    for item in test_list:\n        if len(item)!= K:\n            res_list.append(item)\n    res = \" \".join(res_list)\n    return res\n",
        "num_ids": 68
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = [i for i in test_str.split(' ') if len(i)!= K]\n    return''.join(result)\n",
        "num_ids": 35
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if len(test_str) < K:\n        return test_str\n    res = []\n    for i in test_str.split(' '):\n        if len(i) == K:\n            continue\n        else:\n            res.append(i)\n    return''.join(res)\n",
        "num_ids": 71
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(\" \")\n    return \" \".join([str_ for str_ in str_list if len(str_)!= K])\n",
        "num_ids": 41
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str_list = test_str.split(' ')\n    for i in test_str_list:\n        if len(i) == K:\n            test_str_list.remove(i)\n    return''.join(test_str_list)\n",
        "num_ids": 63
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(\" \")\n    res_list = []\n    for word in test_str:\n        if len(word) == K:\n            pass\n        else:\n            res_list.append(word)\n    return \" \".join(res_list)\n",
        "num_ids": 70
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(\" \")\n    result = ''\n    for word in test_list:\n        if len(word)!= K:\n            result = result + word + \" \"\n    return result[:-1]\n",
        "num_ids": 58
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # use split to get the words\n    # use sort to get the words in reverse order\n    # check the length of each word\n    # if the length is equal to K, then remove it\n    # return the string\n    # split test_str by space\n    split_str = test_str.split(\" \")\n    # split_str = test_str.split(\" \")\n    split_str.sort(reverse=True)\n    for word in split_str:\n        if len(word) == K:\n            split_str.remove(word)\n    return \" \".join(split_str)\n",
        "num_ids": 142
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words_to_remove = set()\n    words = test_str.split()\n",
        "num_ids": 22
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    if pattern in text:\n        for i in range(len(text)):\n            if text[i:].startswith(pattern):\n                result.append(i+1)\n                result.append(i+len(pattern))\n    return result\n",
        "num_ids": 66
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #occurance = []\n    #start = []\n    #start_pos = []\n    #for m in re.finditer(pattern, text):\n    #    occurance.append(m.group())\n    #    start.append(m.start())\n    #    start_pos.append(m.start())\n    #return occurance, start, start_pos\n    #return None if no match\n    if pattern not in text:\n        return None\n    else:\n        return pattern.start()\n",
        "num_ids": 120
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return [match.span()[0],match.span()[1]]\n    else:\n        return None\n",
        "num_ids": 45
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Use re.finditer to return an iterable object of re.Match objects\n    match = re.finditer(pattern,text)\n    matches = []\n    for m in match:\n        matches.append(m.group())\n    return matches\n",
        "num_ids": 62
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.search(pattern,text)\n    if result:\n        print(f\"The number of occurances of the substring in the text is {result.group()}\")\n    else:\n        print(\"No occurance found\")\n",
        "num_ids": 58
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matched = re.findall(pattern, text)\n    return {m:text.index(m) for m in matched if m in text}\n",
        "num_ids": 36
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    m = re.search(pattern,text)\n    if m == None:\n        return None\n    else:\n        return m.start(),m.end()\n    \n",
        "num_ids": 42
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for x in range(len(text)):\n        for y in range(x+1,len(text)):\n            if text[x:y] == pattern:\n                print('occurance is ',text[x:y])\n                print('position is ',x)\n                return None\n            \ntext='ABCDEFGHIabcdefghi'\npattern='abc'\nresult=occurance_substring(text,pattern)\nprint(result)\n",
        "num_ids": 106
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        return result\n    else:\n        return None\ndef permutation_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if result:\n        return result\n    else:\n        return None\n",
        "num_ids": 32
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        substring_occurance = re.finditer(pattern, text)\n        substring_occurance = [i.start() for i in substring_occurance]\n        if len(substring_occurance) == 0:\n            return None\n        else:\n            return substring_occurance\n    else:\n        return None\n",
        "num_ids": 86
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    #Initialize a list to store all the numbers from the given list\n    numbers = []\n    for i in nums:\n        numbers.append(i)\n    #Initialize a list to store all the odd numbers from the given list\n    odd_list = []\n    for i in range(len(numbers)):\n        #If the number at the index is an odd number then append it to the odd_list\n        if numbers[i] % 2!= 0:\n            odd_list.append(numbers[i])\n    #Check whether all the odd numbers from the given list are present at the odd index in the numbers list\n    if len(odd_list) == len(numbers):\n        return True\n    return False\n",
        "num_ids": 171
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return True\n            else:\n                return False\n",
        "num_ids": 49
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2==0 and nums[i]%2==0:\n            return False\n    return True\n    pass\n",
        "num_ids": 47
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
        "num_ids": 48
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "num_ids": 39
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for index in range(len(nums)):\n        if index%2 == 0:\n            if nums[index]%2 == 0:\n                return False\n    return True\n",
        "num_ids": 45
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)+1):\n        if i%2==0:\n            if nums[i-1]%2==0:\n                return False\n    return True\n",
        "num_ids": 50
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    l = [i for i in range(1, len(nums)+1)]\n    print(l)\n    l2 = [i for i in range(0, len(nums), 2)]\n    print(l2)\n    return sorted(nums) == sorted(l)\n",
        "num_ids": 69
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            new_list.append(nums[i])\n    return new_list\n",
        "num_ids": 51
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum(1 for char in test_str if char in 'aeiou' or test_str[test_str.find(char) + 1] in 'aeiou')\n",
        "num_ids": 44
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    #Initialize variables\n    vowels = set(\"aeiouAEIOU\")\n    vowels_count = 0\n",
        "num_ids": 32
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n",
        "num_ids": 68
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if not test_str:\n        return 0\n    result = 0\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    n = len(test_str)\n    for i in range(n):\n        if test_str[i] in vowels:\n            if i!= 0:\n                if test_str[i - 1] not in vowels:\n                    result += 1\n            if i < n - 1:\n                if test_str[i + 1] not in vowels:\n                    result += 1\n    return result\n",
        "num_ids": 137
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    test_str = list(test_str)\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if (i>0 and test_str[i-1] in vowels) or (i<len(test_str)-1 and test_str[i+1] in vowels):\n                count += 1\n    return count\n",
        "num_ids": 135
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(test_str)):\n        if i!= len(test_str)-1:\n            if test_str[i] in vowels:\n                if test_str[i+1] in vowels:\n                    count += 1\n        if i!= 0:\n            if test_str[i] in vowels:\n                if test_str[i-1] in vowels:\n                    count += 1\n    return count\n    \n    \ndef count_consonants(test_str):\n    '''\n    Write a function to count those characters which have consonants as their neighbors in the given string.\n    '''\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(test_str)):\n        if i!= len(test_str)-1:\n            if test_str[i] in consonants:\n                if test_str[i+1] in consonants:\n                    count += 1\n        if i!= 0:\n            if test_str[i] in consonants:\n                if test_str[i-1] in consonants:\n                    count += 1\n    return count\n    \n    \ndef count_words(test_str):\n    '''\n    Write a function to count the words in a string. A word is defined as a group of alphabetic characters seperated by any number of spaces and/or punctuation.\n    '''\n    words = test_str.split()\n    count = len(words)\n    return count\n    \n    \ndef count_sentences(test_str):\n    '''\n    Write a function to count the sentences in a string. A sentence is defined as a group of alphabetic characters which ends with an end of sentence punctuation ('.', '!', '?').\n    '''\n    sentences = 0\n    for i in test_str:\n        if i in ['.', '!', '?']:\n            sentences += 1\n    return sentences\n    \n    \ndef count_syllables(test_str):\n    '''\n    Write a function to count the syllables in a string. A syllable is defined as a group of consonants followed by a vowel.\n    '''\n    syllables = 0\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    for i in test_str:\n        if i in vowels:\n            syllables += 1\n    return syllables\n    \n    \ndef count_words_syllables(test_str):\n    '''\n    Write a function to count the words and syllables in a string. A word is defined as a group of alphabetic characters seperated by any number of spaces and/or punctuation. A syllable is defined as a group of consonants followed by a vowel.\n    '''\n    words = test_str.split()\n    syllables = 0\n    for i in words:\n        syllables += count_syllables(i)\n    return syllables\n    \n    \ndef count_word_complexity(test_str):\n    '''\n    Write a function to return the complexity of a word in a string. The complexity of a word is calculated by dividing the number of syllables in the word by the number of words. If the word is a one syllable word, the complexity is 1.\n    '''\n    words = test_str.split()\n    if count_syllables(test_str) == 1:\n        return 1\n    for i in words:\n        if count_syllables(i) > 0:\n            return count_syllables(i) / count_words(i)\n    return 0\n    \n    \ndef count_sentence_complexity(test_str):\n    '''\n    Write a function to return the complexity of a sentence in a string. The complexity of a sentence is calculated by dividing the number of syllables in the sentence by the number of sentences. If the sentence is a one syllable sentence, the complexity is 1.\n    '''\n    sentences = test_str.split('.')\n    sentences = sentences[:-1]\n    syllables = 0\n    for i in sentences:\n        syllables += count_syllables(i)\n    return syllables / count_sentences(test_str)\n    \n    \ndef count_paragraph_complexity(test_str):\n    '''\n    Write a function to return the complexity of a paragraph in a string. The complexity of a paragraph is calculated by dividing the sum of the complexity of the sentences in the paragraph by the number of sentences in the paragraph.\n    '''\n    sentences = test_str.split('.')\n    sentences = sentences[:-1]\n    complexity = 0\n    for i in sentences:\n        complexity += count_sentence_complexity(i)\n    return complexity / len(sentences)\n    \n    \ndef sentence_scores(test_str):\n    '''\n    Write a function to return the score of each sentence in a string. The score of each sentence is calculated by multiplying the number of words in the sentence by the complexity of the sentence.\n    '''\n    sentences = test_str.split('.')\n    sentences = sentences[:-1]\n    scores = []\n    for i in sentences:\n        scores.append(count_words(i) * count_sentence_complexity(i))\n    return scores\n    \n    \ndef paragraph_score(test_str):\n    '''\n    Write a function to return the score of each paragraph in a string. The score of each paragraph is calculated by multiplying the number of sentences in the paragraph by the complexity of the paragraph.\n    '''\n    sentences = test_str.split('.')\n    sentences = sentences[:-1]\n    scores = []\n    for i in sentences:\n        scores.append(count_sentences(i) * count_paragraph_complexity(i))\n    return scores\n    \n    \ndef summarize(test_str, n):\n    '''\n    Write a function to return the summary of a string. The summary is a group of sentences which are scored in descending order of their scores. The sentences in the summary should contain the highest number of words from the original text. The sentences in the summary should be no longer than 200 words.\n    '''\n    sentences = test_str.split('.')\n    sentences = sentences[:-1]\n    summary = []\n    scores = sentence_scores(test_str)\n    \n    while len(summary)!= n:\n        max_index = scores.index(max(scores))\n        if len(summary) + len(sentences[max_index]) > 200:\n            break\n        summary.append(sentences[max_index])\n        scores[max_index] = 0\n        sentences[max_index] = ''\n    \n    return summary\n    \n    \ndef main():\n    test_str = '''\n    The Code of each letter of the Alphabet is one unit.\n    The Code of each word of the Alphabet is one unit.\n    The Code of each sentence of the Alphabet is one unit.\n    The Code of each paragraph of the Alphabet is one unit.\n    The Code of each section of the Alphabet is one unit.\n    '''\n    print(count_vowels(test_str))\n    print(count_consonants(test_str))\n    print(count_words(test_str))\n    print(count_sentences(test_str))\n    print(count_syllables(test_str))\n    print(count_words_syllables(test_str))\n    print(count_word_complexity(test_str))\n    print(count_sentence_complexity(test_str))\n    print(count_paragraph_complexity(test_str))\n    print(sentence_scores(test_str))\n    print(paragraph_score(test_str))\n    print(summarize(test_str, 4))\n    \nif __name__ == '__main__':\n    main()\n    \n    ",
        "num_ids": 191
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowel_neighbors = 0\n",
        "num_ids": 13
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # vowels = {'a', 'e', 'i', 'o'}\n    vowel_count = 0\n    for i, c in enumerate(test_str):\n        if c in vowels:\n            # print(i, c)\n            if i - 1 >= 0:\n                if test_str[i - 1] in vowels:\n                    vowel_count += 1\n            if i + 1 <= len(test_str) - 1:\n                if test_str[i + 1] in vowels:\n                    vowel_count += 1\n    return vowel_count\n",
        "num_ids": 164
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_list = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels_list and test_str[i + 1] in vowels_list:\n            vowel_count += 1\n    return vowel_count\n",
        "num_ids": 109
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] == 'a' or test_str[i] == 'e' or test_str[i] == 'i' or test_str[i] == 'o' or test_str[i] == 'u' or test_str[i] == 'A' or test_str[i] == 'E' or test_str[i] == 'I' or test_str[i] == 'O' or test_str[i] == 'U':\n            if test_str[i-1] == 'a' or test_str[i-1] == 'e' or test_str[i-1] == 'i' or test_str[i-1] == 'o' or test_str[i-1] == 'u' or test_str[i-1] == 'A' or test_str[i-1] == 'E' or test_str[i-1] == 'I' or test_str[i-1] == 'O' or test_str[i-1] == 'U':\n                count += 1\n            if test_str[i+1] == 'a' or test_str[i+1] == 'e' or test_str[i+1] == 'i' or test_str[i+1] == 'o' or test_str[i+1] == 'u' or test_str[i+1] == 'A' or test_str[i+1] == 'E' or test_str[i+1] == 'I' or test_str[i+1] == 'O' or test_str[i+1] == 'U':\n                count += 1\n    return count\n",
        "num_ids": 411
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # making an empty list to store unique elements \n    unique = [] \n    # taking a set of arr to check if the elements are unique \n    arr_set = set(arr) \n    # for every element in unique set\n    for x in arr_set: \n        # if arr.count(x) > 1:\n        #     unique.append(x)\n        if arr.count(x) > 1:\n            arr.remove(x)\n        else:\n            unique.append(x)\n    # return sum(unique)\n    return arr",
        "num_ids": 132
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    non_rep = []\n    for i in range(len(arr)):\n        if arr.count(arr[i])==1:\n            non_rep.append(arr[i])\n    return sum(non_rep)\n    \n    \n    \n    \n",
        "num_ids": 64
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    i = 0\n    sum_non_repeated = 0\n    sum_repeated = 0\n    while i < len(arr):\n        if i == 0 or arr[i]!= arr[i-1]:\n            sum_non_repeated += arr[i]\n            i += 1\n        else:\n            sum_repeated += arr[i]\n            i += 2\n    return sum_non_repeated\n",
        "num_ids": 106
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    new = [] \n    for i in arr: \n        if i not in new: \n            new.append(i) \n    return sum(new) \n",
        "num_ids": 42
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Initializing sum \n    sum = 0 \n    for i in arr: \n        if i not in arr[arr.index(i)+1:]: \n            sum += i \n    return(sum) \n",
        "num_ids": 54
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    non_rep_list = []\n    for ele in arr:\n        if ele not in non_rep_list:\n            non_rep_list.append(ele)\n            sum += ele\n    print(f'Sum of non-repeated elements is {sum}')\n",
        "num_ids": 70
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    arr.sort()\n    length = len(arr)\n    for i in range(0, length):\n        if i == 0:\n            sum = sum + arr[i]\n        elif i == 1:\n            if arr[i]!= arr[i - 1]:\n                sum = sum + arr[i]\n        else:\n            if arr[i]!= arr[i - 1] or arr[i]!= arr[i - 2]:\n                sum = sum + arr[i]\n    return sum\n",
        "num_ids": 128
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_list = []\n    for i in range(0,len(arr)):\n        if arr[i] not in sum_list:\n            sum_list.append(arr[i])\n    print(\"The sum of non-repeated elements in given list:\",sum(sum_list))\n    return sum_list\n",
        "num_ids": 77
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum = sum + i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    hash = {}\n    sum_non_repeated_elements = 0\n    for num in arr:\n        if num not in hash:\n            hash[num] = 1\n        else:\n            hash[num] += 1\n    for num in hash:\n        if hash[num] == 1:\n            sum_non_repeated_elements += num\n    return sum_non_repeated_elements\n",
        "num_ids": 97
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newlist = []\n    for key, group in groupby(list1):\n        group_list = list(group)\n        newlist.append(group_list)\n    return newlist\n",
        "num_ids": 47
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [(k, sum(1 for _ in g)) for k, g in groupby(list1)]\n",
        "num_ids": 27
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    lst = []\n    for key, group in groupby(list1):\n        lst.append(list(group))\n    return lst\n",
        "num_ids": 37
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    s = []\n    for i, j in groupby(list1):\n        s.append(list(j))\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    \n    # for i,j in groupby(list1):\n    #     print(list(j))\n    list2 = list1[:]\n    list2 = [list(group) for key,group in groupby(list1)]\n    print(list2)\n    \nif __name__ == '__main__':\n    l1 = [1, 1, 1, 1, 2, 3, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8]\n    pack_consecutive_duplicates(l1)\n",
        "num_ids": 133
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for key,group in groupby(list1):\n        group_list = list(group)\n        group_list.append(key)\n        list2.append(group_list)\n    return list2\n",
        "num_ids": 57
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2=[]\n    list3=[]\n    list4=[]\n    list5=[]\n    for i in list1:\n        if list1.count(i)>1:\n            list2.append(i)\n            list3.append(list1.count(i))\n    list2.sort()\n    list3.sort()\n    for j in range(len(list2)):\n        if list3[j]>1:\n            list4.append(list2[j])\n            list5.append(list3[j])\n    for j in range(len(list4)):\n        if list3[j]>1:\n            for i in range(list5[j]):\n                list1.remove(list2[j])\n    print('packed list =',list1)\n    return list1\n",
        "num_ids": 197
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for k, group in groupby(list1)]\n",
        "num_ids": 21
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    groups = groupby(list1)\n    res = []\n    for key, group in groups:\n        res.append(list(group))\n    return res\n",
        "num_ids": 40
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = [list(g) for k, g in groupby(list1)]\n    return list2\nprint(pack_consecutive_duplicates([1,1,2,3,3,3,3,4,5]))\n",
        "num_ids": 60
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return len(set(tuple(sublist) for sublist in list1))\n",
        "num_ids": 22
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list_tuples = []\n    for i in list1:\n        list_tuples.append(tuple(i))\n",
        "num_ids": 32
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    sub_list = []\n    for sub_list in list1:\n        if sub_list not in unique_list:\n            unique_list.append(sub_list)\n    unique_list_tuple = []\n    for sub_list in unique_list:\n        unique_list_tuple.append(tuple(sub_list))\n    unique_list_dict = dict(zip(unique_list_tuple, [0]*len(unique_list)))\n    for sub_list in list1:\n        for i in range(len(unique_list_tuple)):\n            if sub_list == list(unique_list_tuple[i]):\n                unique_list_dict[unique_list_tuple[i]] += 1\n    return unique_list_dict\n",
        "num_ids": 191
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if isinstance(list1,list)==False:\n        raise Exception(\"list1 must be a list.\")\n    elif len(list1)==0:\n        return {}\n    elif all(isinstance(i,list) for i in list1):\n        return count_sublists(list1)\n    elif all(not isinstance(i,list) for i in list1):\n        return unique_sublists_in_nonlist(list1)\n",
        "num_ids": 110
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return list(tuple(x) for x in list1)\n",
        "num_ids": 18
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        if isinstance(sublist, list):\n            tup = tuple(sublist)\n            counts[tup] = counts.get(tup, 0) + 1\n    return counts\n",
        "num_ids": 62
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [tuple(list1)]\n    if len(list1) == 2:\n        if list1[0] == list1[1]:\n            return [tuple(list1),tuple([list1[0]]*2)]\n        else:\n            return [tuple(list1)]\n    if len(list1) > 2:\n        if list1[0] == list1[1]:\n            l = [list1[0]]\n        else:\n            l = []\n        for i in range(len(list1)-1):\n            if list1[i] == list1[i+1]:\n                l = l + [list1[i]]\n            else:\n                l = l + [list1[i]]\n                l = l + [list1[i+1]]\n        l = l + [list1[-1]]\n        return [tuple(l)] + unique_sublists(list1[1:-1])\n",
        "num_ids": 249
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # print(list(zip(list1)))\n    dic = {}\n    for x in list(zip(list1)):\n        if x not in dic:\n            dic[x] = 1\n        else:\n            dic[x] += 1\n    # print(dic)\n    return dic\n",
        "num_ids": 77
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = list(map(tuple,list1))\n    list3 = []\n    for i in list2:\n        if i not in list3:\n            list3.append(i)\n    list4 = []\n    for i in list3:\n        list4.append(list1.count(i))\n    return dict(zip(list4,list3))\n",
        "num_ids": 90
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list = []\n    #count = 0\n    for sublist in list1:\n        #count = count + 1\n        unique_list.append(tuple(sublist))\n    unique_list = set(tuple(x) for x in unique_list)\n    print(unique_list)\n    #return count\n",
        "num_ids": 79
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in range(1, len(test_list)):\n        for x in combinations(test_list, i):\n            if sum(x) not in final_list:\n                final_list.append(sum(x))\n    return final_list\n",
        "num_ids": 69
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n",
        "num_ids": 7
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    for i in range(1,len(test_list)+1):\n        temp_list = combinations(test_list,i)\n        for j in temp_list:\n            if sum(j) == 10:\n                final_list.append(list(j))\n    return final_list\n",
        "num_ids": 77
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Store all the combinations\n    combinations = []\n    # stores all the combinations in tuple format\n    tuple_comb = []\n    # stores all the elements in tuple list\n    tuple_list = []\n",
        "num_ids": 51
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return [sum(c) for c in combinations(test_list, 2)]\n",
        "num_ids": 21
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list=[]\n    for i in range(1, len(test_list)+1):\n        combinations_list.extend(list(combinations(test_list, i)))\n    return combinations_list\n",
        "num_ids": 54
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        comb= combinations(test_list, i)\n        #print(list(comb))\n        for j in list(comb):\n            print(j)\n",
        "num_ids": 55
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 3))\n",
        "num_ids": 16
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combo_list = []\n    for i in range(0, len(test_list)):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                combo_list.append(j)\n    return combo_list\n",
        "num_ids": 66
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 3))\n",
        "num_ids": 16
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    ctr=0\n    for i in range(1,n//2+1):\n        if (n%i == 0):\n            ctr+=1\n    if(ctr%2==0):\n        return True\n    else:\n        return False\n",
        "num_ids": 59
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n % i == 0 :\n            count += 1\n    return count % 2 == 0\nprint(count_divisors(6))\nprint(count_divisors(8))\n",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1): \n        if (n % i == 0): \n            \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n    return count\n",
        "num_ids": 76
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \ndef sum_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                sum = sum + i \n            else : \n                sum = sum + i + (n / i) \n    return int(sum)\ndef prime_factors(n) : \n    '''\n    Write a python function to find the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                list.append(i)\n            else : \n                list.append(i)\n                list.append(n / i)\n    return list\ndef is_abundant_number(n) : \n    '''\n    Write a python function to check whether a number is an abundant number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n_sum = sum_divisors(n)\n    if (n_sum > n) : \n        return True\n    else : \n        return False\ndef nonabundant_sums(n) : \n    '''\n    Write a python function to find all the positive integers that are not abundant numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(1, n + 1) : \n        if (is_abundant_number(i) == False) : \n            list.append(i)\n    return list\ndef abundant_sums(n) : \n    '''\n    Write a python function to find all the positive integers that are abundant numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(1, n + 1) : \n        if (is_abundant_number(i) == True) : \n            list.append(i)\n    return list\ndef find_quadratic_primes(n) : \n    '''\n    Write a python function to find all the quadratic primes that fall in the range of 2 to N. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(1, n + 1) : \n        for j in range(1, n + 1) : \n            n_sum = i * i + j * j\n            if (is_prime(n_sum) == True) : \n                list.append(n_sum)\n    return list\ndef is_permutation(n1, n2) : \n    '''\n    Write a python function to check whether two numbers are permutations of each other or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    n1_list.sort()\n    n2_list.sort()\n    if (n1_list == n2_list) : \n        return True\n    else : \n        return False\ndef is_palindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n_list = list(str(n))\n    n_list.reverse()\n    if (n_list == list(str(n))) : \n        return True\n    else : \n        return False\ndef factorize(n) : \n    '''\n    Write a python function to find all the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                list.append(i)\n            else : \n                list.append(i)\n                list.append(n / i)\n    return list\ndef is_circular(n) : \n    '''\n    Write a python function to check whether a number is circular or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    n_list = list(str(n))\n    if (n_list[0] == n_list[len(n_list) - 1]) : \n        return True\n    else : \n        return False\ndef circular_numbers(n) : \n    '''\n    Write a python function to find circular numbers in the range of 1 to N. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(1, n + 1) : \n        n_list = list(str(i))\n        n_list.append(i)\n        if (n_list[0] == n_list[len(n_list) - 1]) : \n            list.append(i)\n    return list\ndef sum_digits(n) : \n    '''\n    Write a python function to find the sum of digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    while (n!= 0) : \n        sum = sum + int(n % 10)\n        n = int(n / 10)\n    return sum\ndef number_of_digits(n) : \n    '''\n    Write a python function to find the number of digits of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    while (n!= 0) : \n        n = int(n / 10)\n        count = count + 1\n    return count\ndef factorial(n) : \n    '''\n    Write a python function to find the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    fact = 1\n    for i in range(1, n + 1) : \n        fact = fact * i\n    return fact\ndef fizz_buzz(n) : \n    '''\n    Write a python function to find the number in fizz buzz. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    list = []\n    for i in range(1, n + 1) : \n        if (i % 3 == 0 and i % 5 == 0) : \n            list.append('FizzBuz",
        "num_ids": 49
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0 \n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n",
        "num_ids": 79
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    counter = 0\n    for i in range(1,n+1) :\n        if n%i == 0 :\n            counter += 1\n    if counter % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "num_ids": 56
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if n/i == i:\n                cnt += 1\n            else:\n                cnt += 2\n    return cnt\ndef check_fermat(a,b,c,n):\n    '''\n    Write a function to check the Fermat's last theorem. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-4.php\n    '''\n    if count_divisors(n) == a^b^c:\n        print('Holy smokes, Fermat was wrong!')\n    else:\n        print('No, that does not work.')\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is a prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-7.php\n    '''\n    if n<=1:\n        return False\n    if n<=3:\n        return True\n    if n%2==0 or n%3==0:\n        return False\n    i=5\n    while i*i<=n:\n        if n%i==0 or n%(i+2)==0:\n            return False\n        i+=6\n    return True\ndef find_max_prime_factor(n):\n    '''\n    Write a function to find the maximum prime factor of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-8.php\n    '''\n    i=2\n    while i*i<=n:\n        if is_prime(i) and n%i==0:\n            return i\n        i+=1\n    return n\ndef is_powerful(a,b):\n    '''\n    Write a function to check whether two numbers are powerful. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-12.php\n    '''\n    return find_max_prime_factor(a)**b==a\ndef is_even_by_squaring(n):\n    '''\n    Write a function to check whether a number is even by squaring or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-14.php\n    '''\n    if n%2==0:\n        return True\n    while n>=2:\n        if n%2==0:\n            return True\n        n=n//2\n    return False\ndef is_perfect(n):\n    '''\n    Write a function to check whether a number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-15.php\n    '''\n    sum=0\n    i=1\n    while i<n:\n        if n%i==0:\n            sum+=i\n        i+=1\n    if sum==n:\n        return True\n    return False\ndef get_perfect_square(n):\n    '''\n    Write a function to check whether a number is a perfect square or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    if is_perfect(math.sqrt(n)):\n        return True\n    return False\ndef get_perfect_square_value(n):\n    '''\n    Write a function to get the perfect square value of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-16.php\n    '''\n    return int(math.sqrt(n))\ndef get_perfect_cube(n):\n    '''\n    Write a function to check whether a number is a perfect cube or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    for i in range(1,n+1):\n        if i**3==n:\n            return i\n    return None\ndef get_perfect_cube_value(n):\n    '''\n    Write a function to get the perfect cube value of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-18.php\n    '''\n    return n**(1/3)\ndef is_power_of_two(n):\n    '''\n    Write a function to check whether a number is a power of two or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    if n!=0:\n        while n>1:\n            if n%2==0:\n                n/=2\n            else:\n                return False\n        return True\n    return False\ndef is_power_of_four(n):\n    '''\n    Write a function to check whether a number is a power of four or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n>0 and (n&(n-1)==0) and (n&0x55555555)==0:\n        return True\n    return False\ndef get_next_power_of_four(n):\n    '''\n    Write a function to get the next power of four. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n>0 and (n&(n-1)==0) and (n&0x55555555)==0:\n        return n\n    for i in range(n,0,-1):\n        if i&(i-1)==0 and (i&0x55555555)==0:\n            return i\n    return 0\ndef is_power_of_six(n):\n    '''\n    Write a function to check whether a number is a power of six or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if n>0 and (n&(n-1)==0) and (n&0x33333333)==0:\n        return True\n    return False\ndef get_next_power_of_six(n):\n    '''\n    Write a function to get the next power of six. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    if n>0 and (n&(n-1)==0) and (n&0x33333333)==0:\n        return n\n    for i in range(n,0,-1):\n        if i&(i-1)==0 and (i&0x33333333)==0:\n            return i\n    return 0\ndef is_even_nth_power_of_two(n):\n    '''\n    Write a function to check whether a number is an even nth power of two or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    n=1\n    while n<=10:\n        if is_even_by_squaring(n) and is_power_of_two(2**n):\n            return True\n        n+=1\n    return False\ndef is_odd_nth_power_of_two(n):\n    '''\n    Write a function to check whether a number is an odd nth power of two or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    n=1\n    while n<=10:\n        if is_odd_by_squaring(n) and is_power_of_two(2**n):\n            return True\n        n+=1\n    return False\ndef get_nth_power_of_two(n):\n    ''",
        "num_ids": 72
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \n",
        "num_ids": 78
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0 : \n            count += 1\n    return count \n",
        "num_ids": 48
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    x = 1\n    y = 1\n    i = 1\n    while i <= n**(1/2):\n        if n % i == 0 :\n            x += 1\n        i += 1\n    while i <= n:\n        if n % i == 0 :\n            y += 1\n        i += 1\n    if x == y :\n        return True\n    else : \n        return False\n",
        "num_ids": 94
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum(arr[i] for i in range(0, len(arr), 2))\n",
        "num_ids": 24
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = []\n    for i in range(len(arr)):\n        j = i\n        while j<len(arr):\n            res.append(arr[j])\n            j+=2\n    return sum(res)\n",
        "num_ids": 55
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_list = []\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if len(arr[i:j+1]) % 2 == 0:\n                break\n            else:\n                if len(arr[i:j+1]) % 2 == 1:\n                    odd_list.append(sum(arr[i:j+1]))\n    return sum(odd_list)\n",
        "num_ids": 106
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if arr is None:\n        return -1\n    \n    sum = 0\n    for i in range(len(arr)):\n        if len(arr) % 2!= 0:\n            if i + (len(arr) - i) // 2 < len(arr):\n                for j in range((len(arr) - i) // 2):\n                    sum += arr[i + j]\n    \n    return sum\n",
        "num_ids": 99
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if(i <= j and (j - i) % 2 == 1):\n                sum += sum_subarray(arr, i, j)\n",
        "num_ids": 68
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if len(arr[i:j + 1]) % 2!= 0:\n                sum += sum(arr[i:j + 1])\n    return sum\n",
        "num_ids": 70
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans += sum(arr[i:i+1+len(arr)])\n    return ans\n",
        "num_ids": 42
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(i) for i in arr if len(i) % 2!= 0])\n",
        "num_ids": 26
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = 60 * ((g - b) / (max_value - min_value))\n    elif max_value == g:\n        h = 60 * ((b - r) / (max_value - min_value)) + 120\n    elif max_value == b:\n        h = 60 * ((r - g) / (max_value - min_value)) + 240\n    \n    if max_value == 0:\n        s = 0\n    else:\n        s = 1 - (min_value / max_value)\n    \n    v = max_value\n    \n    return h, s, v\n",
        "num_ids": 199
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    # color format is H: 0-360, S: 0-1, V: 0-1\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n",
        "num_ids": 243
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n",
        "num_ids": 200
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = round(h,2)\n    s = round(s,2)\n    v = round(v,2)\n    return h, s, v\n",
        "num_ids": 230
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_index = []\n    odd_index = []\n    for index in range(len(list1)):\n        if list1[index] % 2 == 0:\n            even_index.append(index)\n        else:\n            odd_index.append(index)\n    product = 1\n    for i in even_index:\n        product = product * list1[i]\n    for j in odd_index:\n        product = product * list1[j]\n    return product\n",
        "num_ids": 115
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in list1:\n        if i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    if len(even_list) > len(odd_list):\n        return odd_list[0] * even_list[-1]\n    else:\n        return even_list[0] * odd_list[-1]\n",
        "num_ids": 111
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return -1\n    else:\n        product = 1\n        for i in list1:\n            if i%2 == 0:\n                product *= i\n            else:\n                continue\n    return product\n    \n    ",
        "num_ids": 64
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul_odd = 1\n    mul_even = 1\n    for i in list1:\n        if i % 2 == 0:\n            mul_even *= i\n        else:\n            mul_odd *= i\n    return mul_odd, mul_even\n",
        "num_ids": 67
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=[]\n    odd=[]\n    total_odd=0\n    total_even=0\n    for i in list1:\n        if i%2==0:\n            even.append(i)\n        else:\n            odd.append(i)\n    total_odd=1\n    for j in odd:\n        total_odd*=j\n    total_even=1\n    for k in even:\n        total_even*=k\n    return total_odd,total_even\n",
        "num_ids": 117
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mult = 1\n    for i in list1:\n        if i%2 == 0:\n            mult*=i\n        else:\n            mult*=i\n    return mult\n",
        "num_ids": 44
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for num in list1:\n        if list1.index(num) % 2 == 0:\n            product *= num\n    print(\"Product of first even and odd number is: \", product)\n",
        "num_ids": 52
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # the first odd number is the first element in the list\n    # the last even number is the last element in the list\n    product = 1\n    if len(list1) % 2 == 0:\n        for i in list1:\n            if i % 2 == 0:\n                product *= i\n    else:\n        for i in list1:\n            if i % 2!= 0:\n                product *= i\n    return product\n",
        "num_ids": 103
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for i in range(len(list1)):\n        if i%2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n    return (even_list,odd_list)\n",
        "num_ids": 80
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n    elif list1[0] % 2 == 0:\n        return list1[0] * mul_even_odd(list1[1:])\n    else:\n        return list1[0] * mul_even_odd(list1[1:])\n",
        "num_ids": 77
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.split(',')\n    result = []\n    for i in test_str:\n        result.append(int(i))\n    return tuple(result)\n    \n",
        "num_ids": 49
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = test_str.split(',')\n    test_tuple = tuple(test_tuple)\n    test_tuple = int(test_tuple)\n    return test_tuple\n",
        "num_ids": 52
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n",
        "num_ids": 19
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.replace(\"(\",\"\")\n    test_str = test_str.replace(\")\",\"\")\n    test_str = test_str.split(\",\")\n    for i in range(0,len(test_str)):\n        test_str[i] = int(test_str[i])\n    return tuple(test_str)\n",
        "num_ids": 88
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(','))\n",
        "num_ids": 22
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple([int(i) for i in test_str.split(',')])\n",
        "num_ids": 23
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #example: input \"a,b,c\"  output: (1, 2, 3)\n    return tuple(int(item) for item in test_str.split(',') if item)\n",
        "num_ids": 48
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return (int(test_str[1]), int(test_str[5]), int(test_str[9]), int(test_str[13]))\n",
        "num_ids": 39
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    l, r = 0, n-1\n    while l <= r:\n        m = (l+r)//2\n        if a[m] >= x:\n            r = m-1\n        else:\n            l = m+1\n    return l\n",
        "num_ids": 71
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    for i in range(n):\n        if a[i] < x:\n            return i\n    return n\n",
        "num_ids": 48
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i, v in enumerate(a):\n        if x <= v:\n            return i\n    return len(a)\n",
        "num_ids": 32
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a,x)\n    return i\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a,x)\n    return i\ndef find(a, x):\n    '''\n    Write a function to locate a specified value in a sequence. \n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n    \ndef binary_search(a, x):\n    '''\n    Write a function to find a specified value in a sorted sequence.\n    '''\n    i = bisect.bisect_left(a,x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n",
        "num_ids": 49
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x <= a[0]:\n        return 0\n    else:\n        for i in range(len(a)):\n            if x > a[i]:\n                continue\n            else:\n                return i\n        return i+1\n",
        "num_ids": 57
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # if not a:\n    #     return 0\n    # elif x > a[len(a)-1]:\n    #     return len(a)\n    # else:\n    #     for i in range(len(a)):\n    #         if a[i] >= x:\n    #             return i\n    #     return len(a)\n    return bisect.bisect(a, x)\n",
        "num_ids": 98
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    a.sort()\n    print(bisect.bisect(a, x))\n    print(a)\n",
        "num_ids": 36
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    a.append(x)\n    a.sort()\n    return a.index(x)\n",
        "num_ids": 25
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    l = 0\n    r = len(a)-1\n    while l <= r:\n        m = (l+r) // 2\n        if a[m] < x:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n",
        "num_ids": 80
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i\n",
        "num_ids": 22
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search('ab{3}', text)\n    return match!= None\n",
        "num_ids": 24
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall('ab{3}', text)\n",
        "num_ids": 17
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = r'a.{3}b'\n    result = re.search(regex, text)\n    return result!= None\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    regex = r\"ab{3}\"\n    mo = re.search(regex, text)\n    if mo == None:\n        print('-1')\n    else:\n        print('0')\n",
        "num_ids": 50
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    patterns = 'ab{3}'\n    if re.search(patterns,  text):\n        return 'found a match!'\n    else:\n        return('not matched')\nprint(text_match_three('babababaab'))\n",
        "num_ids": 61
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #match a string that has an a followed by three 'b'.\n    x = re.findall(r'a.{3}b',text)\n    return x\n    #write a function that matches a string that has an a followed by three 'b'.\n    \n    #match a string that has an a followed by three 'b'.\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #match a string that has an a followed by three 'b'.\n    x = re.findall(r'a.{3}b',text)\n    return x\n    #write a function that matches a string that has an a followed by three 'b'.\n",
        "num_ids": 62
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return 'Found a match!'\n    return(False)\nprint(text_match_three('abbbbbbbbbb'))\nprint(text_match_three('abbbbbbbbbbb'))\nprint(text_match_three('abbbbbbbbbbbbb'))\n",
        "num_ids": 92
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = \"ab{3}\"\n    result = re.search(pattern, text)\n    if result!= None:\n        return \"Match!\"\n    else:\n        return \"Not a match!\"\n",
        "num_ids": 49
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '^a[b]{3}$'\n    result = re.search(pattern, text)\n    return result!= None\n",
        "num_ids": 36
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n",
        "num_ids": 35
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list + test_str\n",
        "num_ids": 12
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n",
        "num_ids": 14
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_new = tuple(test_str)\n    tuple_list = tuple(test_list)\n    return tuple_list, tuple_new\n",
        "num_ids": 38
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    #method 1\n    return tuple(test_list + [test_str])\n    \n    \n    #method 2\n    return tuple(test_list) + (test_str,)\n    \n    \n    #method 3\n    #use the existing tuple to find the index of test_str, then replace the value of that index with the new tuple\n    #add the new string at the end\n    \n    #method 4\n    #create a new list from the tuple and then add the string to it\n    #use the new list to create the new tuple\n    \n    \n    #method 5\n    #create a new tuple with a single element at the end\n    #use the index of that single element to replace the value at that index\n    #use the new tuple to create a new tuple with the old tuple with the new element at the end\n    \n    \n    #method 6\n    #return the tuple without changing it\n    \n    \n    \n    #method 7\n    #create a new tuple with the given string and then add the new tuple to the end of the tuple\n    #create a new tuple without the existing string and then add the new tuple to the end of the tuple\n    \n    \n    #method 8\n    #use a for loop to create the new tuple\n    \n    \n    #method 9\n    #use the built in function to create a new tuple\n    \n    \n    #method 10\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 11\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 12\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 13\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 14\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 15\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 16\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 17\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 18\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 19\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 20\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 21\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 22\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 23\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 24\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 25\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 26\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 27\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 28\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 29\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 30\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    #use the built in function to create a new tuple and then use the built in function to create a new tuple\n    \n    \n    #method 31\n    ",
        "num_ids": 2009
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list.append(test_str)\n    return tuple(test_list)\n",
        "num_ids": 23
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (tuple(test_list), tuple(test_str))\n    return new_tuple\n",
        "num_ids": 30
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # slice the tuple\n    tup = tuple(test_list)\n",
        "num_ids": 21
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n",
        "num_ids": 17
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_list = ['python', 'java', 'c#', 'php', 'js']\n    test_str = \" \".join(test_list)\n    return tuple(test_str)\n",
        "num_ids": 47
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a new tuple from a list\n    new_tuple = tuple(test_list)\n    # create a new tuple from a string\n    new_tuple = tuple(test_str)\n    # return the new tuple\n    return new_tuple\n",
        "num_ids": 62
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return list(filter(lambda num: num % 2 == 0, nums))\n",
        "num_ids": 21
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 40
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                continue\n            else:\n                return False\n    return True\n",
        "num_ids": 53
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return [num for index, num in enumerate(nums) if index % 2 == 0]\n    \n",
        "num_ids": 27
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n",
        "num_ids": 43
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return False\n    return True\n",
        "num_ids": 37
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = tuple(test_tup)\n    for i in range(len(test_tup)):\n        test_tup = test_tup[:i] + tuple(list(test_tup)[i+1:])\n    return test_tup\n",
        "num_ids": 68
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return (test_tup.replace(i, \"\") for i in test_tup)\n",
        "num_ids": 25
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #tup_list = [test_tup]\n    # for tup in test_tup:\n    #     if type(tup) == tuple:\n    #         tup_list.append(tup)\n    # return tup_list\n    return [tup for tup in test_tup if type(tup)!= tuple]\n",
        "num_ids": 86
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup\n",
        "num_ids": 9
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return type(test_tup)([a for a in test_tup if a not in test_tup])\n",
        "num_ids": 30
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    while True:\n        if len(test_tup) == 1:\n            break\n        if len(test_tup) == 0:\n            break\n        if type(test_tup[0]) == tuple:\n            test_tup.pop(0)\n            for i in test_tup:\n                if type(i) == tuple:\n                    test_tup.remove(i)\n        else:\n            break\n    return tuple(test_tup)\n",
        "num_ids": 127
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    lst = []\n    for x in test_tup:\n        if type(x) == tuple:\n            lst.append(tuple([i for i in x if not isinstance(i, tuple)]))\n        else:\n            lst.append(x)\n    return tuple(lst)\n",
        "num_ids": 74
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(set(test_tup))\n",
        "num_ids": 14
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            pass\n        else:\n            result.append(item)\n    return result\n",
        "num_ids": 46
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    print(list(test_tup))\n    return\n",
        "num_ids": 16
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count=0\n    for i in input_list:\n        if type(i)==list:\n            count+=1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # return the len(input_list) \n    # print(len(input_list))\n",
        "num_ids": 25
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    elif not isinstance(input_list[0], list):\n        return 1\n    else:\n        return 1 + count_list(input_list[0])\n",
        "num_ids": 54
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list: \n        if type(i) == list: \n            count+=1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "num_ids": 11
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    counter = 0\n    for i in input_list:\n        if type(i) == list:\n            counter += 1\n    return counter\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count+=1\n    return count\n    \ndef remove_dict_key(d, key):\n    '''\n    Write a python function to remove a key from a dictionary.\n    '''\n    d.pop(key)\n    return d\n    \ndef append_dict_key(d, key, value):\n    '''\n    Write a python function to append a key to a dictionary.\n    '''\n    d.setdefault(key, []).append(value)\n    return d\n    \ndef upper_dict_keys(d):\n    '''\n    Write a python function to change the case of the keys in a dictionary.\n    '''\n    for key in d.keys():\n        d[key.upper()] = d.pop(key)\n    return d\n    \ndef sum_dict_values(d):\n    '''\n    Write a python function to sum the values in a dictionary.\n    '''\n    sum = 0\n    for i in d.values():\n        for j in i:\n            sum+=j\n    return sum\n    \ndef average_dict_values(d):\n    '''\n    Write a python function to average the values in a dictionary.\n    '''\n    avg = sum_dict_values(d)/len(d)\n    return avg\n    \ndef convert_dict_keys_to_string(d):\n    '''\n    Write a python function to convert all the keys in a dictionary to strings.\n    '''\n    for key in d.keys():\n        d[str(key)] = d.pop(key)\n    return d\n    \ndef convert_dict_keys_to_int(d):\n    '''\n    Write a python function to convert all the keys in a dictionary to integers.\n    '''\n    for key in d.keys():\n        d[int(key)] = d.pop(key)\n    return d\n    \ndef convert_dict_values_to_int(d):\n    '''\n    Write a python function to convert all the values in a dictionary to integers.\n    '''\n    for key in d.keys():\n        d[key] = [int(i) for i in d[key]]\n    return d\n    \ndef min_dict_value(d):\n    '''\n    Write a python function to return the minimum value in a dictionary.\n    '''\n    return min(d.values())\n    \ndef max_dict_value(d):\n    '''\n    Write a python function to return the maximum value in a dictionary.\n    '''\n    return max(d.values())\n    \ndef find_keys_greater_than(d, val):\n    '''\n    Write a python function to return the keys which have values greater than the given value in a dictionary.\n    '''\n    return [i for i in d.keys() if d[i]>val]\n    \ndef find_greater_than_and_equal_to(d, val):\n    '''\n    Write a python function to return the keys which have values greater than or equal to the given value in a dictionary.\n    '''\n    return [i for i in d.keys() if d[i]>=val]\n    \ndef find_keys_greater_than_or_equal_to(d, val):\n    '''\n    Write a python function to return the keys which have values greater than or equal to the given value in a dictionary.\n    '''\n    return [i for i in d.keys() if d[i]>=val]\n    \ndef dict_greater_than(d1, d2):\n    '''\n    Write a python function to return the dictionary which has greater value than the other.\n    '''\n    greater = {}\n    if len(d1)>len(d2):\n        for i in d1:\n            if d1[i]>d2[i]:\n                greater[i] = d1[i]\n            else:\n                greater[i] = d2[i]\n    else:\n        for i in d2:\n            if d1[i]>d2[i]:\n                greater[i] = d1[i]\n            else:\n                greater[i] = d2[i]\n    return greater\n    \ndef dict_greater_than_and_equal_to(d1, d2):\n    '''\n    Write a python function to return the dictionary which has greater value than or equal to the other.\n    '''\n    greater = {}\n    if len(d1)>len(d2):\n        for i in d1:\n            if d1[i]>d2[i]:\n                greater[i] = d1[i]\n            else:\n                greater[i] = d2[i]\n    else:\n        for i in d2:\n            if d1[i]>d2[i]:\n                greater[i] = d1[i]\n            else:\n                greater[i] = d2[i]\n    return greater\n    \ndef dict_greater_than_or_equal_to(d1, d2):\n    '''\n    Write a python function to return the dictionary which has greater value than or equal to the other.\n    '''\n    greater = {}\n    if len(d1)>len(d2):\n        for i in d1:\n            if d1[i]>d2[i]:\n                greater[i] = d1[i]\n            else:\n                greater[i] = d2[i]\n    else:\n        for i in d2:\n            if d1[i]>d2[i]:\n                greater[i] = d1[i]\n            else:\n                greater[i] = d2[i]\n    return greater\n    \ndef sum_dict_values(d):\n    '''\n    Write a python function to return the sum of the values in a dictionary.\n    '''\n    sum = 0\n    for i in d.values():\n        for j in i:\n            sum+=j\n    return sum\n    \ndef average_dict_values(d):\n    '''\n    Write a python function to return the average value in a dictionary.\n    '''\n    avg = sum_dict_values(d)/len(d)\n    return avg\n    \ndef convert_dict_keys_to_string(d):\n    '''\n    Write a python function to convert all the keys in a dictionary to strings.\n    '''\n    for key in d.keys():\n        d[str(key)] = d.pop(key)\n    return d\n    \ndef convert_dict_keys_to_int(d):\n    '''\n    Write a python function to convert all the keys in a dictionary to integers.\n    '''\n    for key in d.keys():\n        d[int(key)] = d.pop(key)\n    return d\n    \ndef convert_dict_values_to_int(d):\n    '''\n    Write a python function to convert all the values in a dictionary to integers.\n    '''\n    for key in d.keys():\n        d[key] = [int(i) for i in d[key]]\n    return d\n    \ndef min_dict_value(d):\n    '''\n    Write a python function to return the minimum value in a dictionary.\n    '''\n    return min(d.values())\n    \ndef max_dict_value(d):\n    '''\n    Write a python function to return the maximum value in a dictionary.\n    '''\n    return max(d.values())\n    \ndef find_keys_greater_than(d, val):\n    '''\n    Write a python function to return the keys which have values greater than the given value in a dictionary.\n    '''\n    return [i for i in d.keys() if d[i]>val]\n    \ndef find_greater_than_and_equal_to(d, val):\n    '''\n    Write a python function to return the keys which have values greater than or equal to the given value in a dictionary.\n    '''\n    return [i for i in d.keys() if d[i]>=val]\n    \ndef find_keys_greater_than_or_equal_to(d, val):\n    '''\n    Write a python function to return the keys which have values greater than or equal to the given value in a dictionary.\n    '''\n    return [i for ",
        "num_ids": 8
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) is list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == type([]):\n            count += 1\n    return count\n",
        "num_ids": 37
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n",
        "num_ids": 35
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if l == 1:\n        if x == arr[0]:\n            return 0\n        return -1\n    if x == arr[l-1]:\n        return l-1\n    else:\n        return binary_search(arr, x, l-1, True)\n    \ndef binary_search(arr, x, start, is_last):\n    if is_last:\n        if arr[start] == x:\n            return start\n        else:\n            return -1\n    l = start+1\n    r = len(arr)-1\n    while l<=r:\n        m = (l+r)//2\n        if arr[m] == x:\n            if is_last:\n                return m\n            if m == 0:\n                return m\n            if arr[m-1] < x:\n                return m\n            r = m-1\n        elif arr[m] > x:\n            r = m-1\n        else:\n            l = m+1\n    return -1\n        \n    \nprint(first([1,2,3,3,3,3,4,5],3))\nprint(last([1,2,3,3,3,3,4,5],3))\nprint(first([1,2,3,3,3,3,4,5],4))\nprint(last([1,2,3,3,3,3,4,5],3))\nprint(first([1,2,3,3,3,3,4,5],3))\nprint(last([1,2,3,3,3,3,4,5],3))\nprint(first([1,2,3,3,3,3,4,5],1))\nprint(last([1,2,3,3,3,3,4,5],1))\nprint(first([1,2,3,3,3,3,4,5],2))\nprint(last([1,2,3,3,3,3,4,5],2))\nprint(first([1,2,3,3,3,3,4,5],7))\nprint(last([1,2,3,3,3,3,4,5],7)",
        "num_ids": 524
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l = 0\n    r = n-1\n    while(l<r):\n        mid = (r+l)//2\n        if x>arr[mid]:\n            l = mid+1\n        else:\n            r = mid\n    if arr[l] == x:\n        return l\n    return -1\n",
        "num_ids": 85
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start, end = 0, len(arr)-1\n    ans = -1\n",
        "num_ids": 21
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    #return last(arr,0,len(arr)-1,x)\n    return last_fun(arr,0,len(arr)-1,x)\n",
        "num_ids": 39
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    return last_pos(arr,x,0,len(arr))\n",
        "num_ids": 19
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    left, right = 0, n-1\n    while left<=right:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            left = mid+1\n        else:\n            right = mid-1\n    return left\n",
        "num_ids": 74
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(0,l):\n        if arr[l-1-i] == x:\n            return l-1-i\n    return -1\n    \n    \ndef first(arr,x):\n    '''\n    Write a python function to find the first position of an element in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(0,l):\n        if arr[i] == x:\n            return i\n    return -1\n    \n    \ndef first_and_last(arr,x):\n    '''\n    Write a python function to find the first and last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    for i in range(0,l):\n        if arr[i] == x:\n            return (i,i)\n    return (-1,-1)\n    \n    \ndef binary_search(arr,x):\n    '''\n    Write a python function to find the position of an element using binary search algorithm in a sorted array.\n    '''\n    l = len(arr)\n    low = 0\n    high = l-1\n    mid = 0\n    while(low <= high):\n        mid = (low+high)//2\n        if arr[mid] < x:\n            low = mid+1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            return mid\n    return -1\n    \n    \ndef binary_search_recursive(arr,x,low,high):\n    '''\n    Write a python function to find the position of an element using binary search algorithm in a sorted array.\n    '''\n    if low <= high:\n        mid = (low+high)//2\n        if arr[mid] < x:\n            low = mid+1\n        elif arr[mid] > x:\n            high = mid-1\n        else:\n            return mid\n        return binary_search_recursive(arr,x,low,high)\n    return -1\n    \n    \ndef binary_search_recursive_soln(arr,x):\n    return binary_search_recursive(arr,x,0,len(arr)-1)\n    \n    \ndef two_sum(arr,x):\n    '''\n    Write a python function to find the sum of a pair of integers in a sorted array whose sum is equal to a given value.\n    '''\n    l = len(arr)\n    low = 0\n    high = l-1\n    while(low <= high):\n        if arr[low]+arr[high] == x:\n            return (low,high)\n        elif arr[low]+arr[high] > x:\n            high -= 1\n        else:\n            low += 1\n    return -1\n    \n    \ndef two_sum_recursive(arr,x,low,high):\n    '''\n    Write a python function to find the sum of a pair of integers in a sorted array whose sum is equal to a given value.\n    '''\n    if low <= high:\n        if arr[low]+arr[high] == x:\n            return (low,high)\n        elif arr[low]+arr[high] > x:\n            return two_sum_recursive(arr,x,low,high-1)\n        else:\n            return two_sum_recursive(arr,x,low+1,high)\n    return -1\n    \n    \ndef two_sum_recursive_soln(arr,x):\n    return two_sum_recursive(arr,x,0,len(arr)-1)\n    \n    \ndef k_sum(arr,x):\n    '''\n    Write a python function to find the sum of a pair of integers in a sorted array whose sum is equal to a given value.\n    '''\n    l = len(arr)\n    low = 0\n    high = l-1\n    while(low <= high):\n        if arr[low]+arr[high] == x:\n            return (low,high)\n        elif arr[low]+arr[high] > x:\n            high -= 1\n        else:\n            low += 1\n    return -1\n    \n    \ndef k_sum_recursive(arr,x,low,high,k):\n    '''\n    Write a python function to find the sum of a pair of integers in a sorted array whose sum is equal to a given value.\n    '''\n    if low <= high:\n        if k == 2:\n            if arr[low]+arr[high] == x:\n                return (low,high)\n            elif arr[low]+arr[high] > x:\n                high -= 1\n            else:\n                low += 1\n        else:\n            mid = (low+high)//2\n            if arr[mid] > x:\n                return k_sum_recursive(arr,x,low,mid-1,k)\n            elif arr[mid] == x:\n                return k_sum_recursive(arr,x,mid+1,high,k-1)\n            else:\n                return k_sum_recursive(arr,x,mid+1,high,k)\n    return -1\n    \n    \ndef k_sum_recursive_soln(arr,x,k):\n    return k_sum_recursive(arr,x,0,len(arr)-1,k)\n    \n    \ndef rotate_array(arr,d):\n    '''\n    Write a python function to rotate an array by d elements.\n    '''\n    l = len(arr)\n    for i in range(0,d):\n        arr.insert(0,arr.pop())\n    return arr\n    \n    \ndef rotate_array_recursive(arr,d,l):\n    '''\n    Write a python function to rotate an array by d elements.\n    '''\n    if d == 0:\n        return arr\n    else:\n        return rotate_array_recursive(arr,d-1,l)\n    return arr\n    \n    \ndef reverse_array_iterative(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i <= j):\n        t = arr[i]\n        arr[i] = arr[j]\n        arr[j] = t\n        i += 1\n        j -= 1\n    return arr\n    \n    \ndef reverse_array_recursive(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    if len(arr) == 0:\n        return arr\n    else:\n        return reverse_array_recursive(arr[1:])+[arr[0]]\n    \n    \ndef merge_array(arr1,arr2):\n    '''\n    Write a python function to merge two arrays.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    arr3 = []\n    i = 0\n    j = 0\n    while(i < l1 and j < l2):\n        if arr1[i] < arr2[j]:\n            arr3.append(arr1[i])\n            i += 1\n        else:\n            arr3.append(arr2[j])\n            j += 1\n    arr3 += arr1[i:]\n    arr3 += arr2[j:]\n    return arr3\n    \n    \ndef merge_array_recursive(arr1,arr2):\n    '''\n    Write a python function to merge two arrays.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == 0:\n        return arr2\n    elif l2 == 0:\n        return arr1\n    elif arr1[0] < arr2[0]:\n        return [arr1[0]] + merge_array_recursive(arr1[1:],arr2)\n    else:\n        return [arr2[0]] + merge_array_recursive(arr1,arr2[1:])\n    \n    \ndef search_binary_recursive(arr,x,low,high):\n    '''\n    Write a python function to search an element in a sorted array using binary search algorithm.\n    '''\n    if low <= high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return search_binary_recursive(arr,x,low,mi",
        "num_ids": 61
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    l,r = 0,n-1\n    while l<=r:\n        mid = (l+r)//2\n        if arr[mid]>x:\n            r = mid-1\n        elif arr[mid]<x:\n            l = mid+1\n        else:\n            if mid==n-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                l = mid+1\n    return -1\n",
        "num_ids": 118
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = (low+high)//2\n        if x == arr[mid]:\n            if mid == len(arr)-1 or x!= arr[mid+1]:\n                return mid\n            else:\n                low = mid+1\n        elif x < arr[mid]:\n            high = mid-1\n        else:\n            low = mid+1\n    return -1\n",
        "num_ids": 111
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=len(arr)\n    if l==0:\n        return False\n    if l==1:\n        if arr[0]==x:\n            return True\n        else:\n            return False\n    for i in range(l):\n        if arr[i]==x:\n            return i\n    return False\n",
        "num_ids": 77
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text_start_end = re.search('a.*b', text)\n    return text_start_end.group()\n",
        "num_ids": 31
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return True if text[0] == 'a' and text.endswith('b') else False\n",
        "num_ids": 26
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search('.*a.+b$',text)\n",
        "num_ids": 19
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'a[\\w]+b')\n    mo = regex.search(text)\n    if mo is None:\n        print(\"-1\")\n    else:\n        print(mo.group())\n",
        "num_ids": 57
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'.*a.+b$')\n    mo = regex.search(text)\n    print(mo.group())\n",
        "num_ids": 39
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    \n    # find pattern\n    pattern = r'a\\S*b'\n    \n    # find and print results\n    results = re.findall(pattern, text)\n    print(results)\n    \n    # or to do the same\n    \n    # find pattern\n    pattern = r'^a\\S*b$'\n    \n    # find and print results\n    results = re.findall(pattern, text)\n    print(results)\n",
        "num_ids": 108
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a\\S*b', text)\n",
        "num_ids": 19
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'a.*?b$').search(text)\n",
        "num_ids": 22
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.b')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n    \ndef text_start_end(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'^a.b$')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n",
        "num_ids": 44
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.compile(r'.a\\b')\n    b = a.search(text)\n    print(b)\n    \n",
        "num_ids": 35
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict:\n        sum += dict[x]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n",
        "num_ids": 25
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k in dict:\n        total += dict[k]\n    return total\n",
        "num_ids": 26
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_values = 0\n",
        "num_ids": 11
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum = sum + dict[i]\n    return sum\n",
        "num_ids": 28
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n%2 == 0:\n        return n\n    else:\n        return n + sum_odd(n-1)\n",
        "num_ids": 32
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l,r = 0,0\n    while l < n:\n        if l % 2!= 0:\n            r += l\n        l += 1\n    return r\n",
        "num_ids": 42
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    l=int(input(\"Enter lower limit: \"))\n    r=int(input(\"Enter upper limit: \"))\n    \n    sum = 0\n    for i in range(l,r):\n        if i%2==1:\n            sum += i\n    print(\"The sum of odd numbers between\",l,\"and\",r,\"is\",sum)\n    \ndef sum_squared(n): \n    '''\n    Write a python function to find the sum of all the squares of natural numbers within the range l and r.\n    '''\n    \n    l=int(input(\"Enter lower limit: \"))\n    r=int(input(\"Enter upper limit: \"))\n    \n    sum = 0\n    for i in range(l,r):\n        sum += i**2\n    print(\"The sum of squares of numbers between\",l,\"and\",r,\"is\",sum)\n    \ndef sum_of_squares(n): \n    '''\n    Write a python function to find the sum of squares of first n natural numbers.\n    '''\n    \n    n = int(input(\"Enter a number: \"))\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    print(\"The sum of squares of first\",n,\"numbers is\",sum)\n",
        "num_ids": 62
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n):\n        if i%2==1:\n            s+=i\n    return s\n",
        "num_ids": 34
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n + 1) / 2\n",
        "num_ids": 14
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter the lower bound: \")), int(input(\"Enter the upper bound: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if(i%2!= 0):\n            sum += i\n    return sum\n",
        "num_ids": 68
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 1):\n            sum = sum + i\n    return sum\n    \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum = sum + i\n    return sum\n",
        "num_ids": 37
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input(\"Enter the lower limit:\"))\n    r = int(input(\"Enter the upper limit:\"))\n    s = 0\n    for i in range(l, r+1):\n        if i%2!= 0:\n            s += i\n    return s\n",
        "num_ids": 67
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    def sum_odds(l,r):\n        return sum(range(l,r+1,2))\n    return sum_odds\n",
        "num_ids": 36
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return (n*(n+1))/2\n",
        "num_ids": 15
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #return sum(arr)\n    \n    #using list comprehension to find sum\n    return sum([x for x in arr])\n",
        "num_ids": 32
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    summation = 0\n    for i in range(0,len(arr)):\n        summation += arr[i]\n    return summation\n",
        "num_ids": 38
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total\n",
        "num_ids": 23
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n",
        "num_ids": 31
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    assert arr, 'Array cannot be an empty list.'\n",
        "num_ids": 15
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for item in arr:\n        sum += item\n",
        "num_ids": 19
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "num_ids": 9
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if not arr:\n        return None\n    \n    total = 0\n    for i in arr:\n        total += i\n",
        "num_ids": 31
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    else:\n        return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n",
        "num_ids": 39
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n<<d | (n>>(32-d))\n",
        "num_ids": 17
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (((n << d) | (n >> (32 - d))) & 0xffffffff)\n",
        "num_ids": 26
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    left_mask = (1 << d) - 1\n    right_mask = (1 << 32) - 1 - left_mask\n    return (n << d) | (n >> 32 - d)\n",
        "num_ids": 48
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #print(bin(n)[2:])\n    #print(bin(d)[2:])\n    n_bin = bin(n)[2:]\n    \n    if len(n_bin)<d:\n        d=d%len(n_bin)\n        n_bin='0'*(d-1)+n_bin\n    new_n_bin = n_bin[d:]+n_bin[:d]\n    #print(bin(int(new_n_bin,2))[2:])\n    return int(new_n_bin,2)\n",
        "num_ids": 137
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    #left_rotate(0b01101101, 2) = 0b10110110\n    #left_rotate(0b11111111, 1) = 0b11111111\n    #left_rotate(0b11111111, 0) = 0b11111111\n    #left_rotate(0b11111111, 3) = 0b11111111\n    #left_rotate(0b11111111, 5) = 0b11111111\n    #left_rotate(0b11111111, 7) = 0b11111111\n",
        "num_ids": 124
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask_32bit = 0xFFFFFFFF\n    return ((n << d)|(n >> (32 - d)))&mask_32bit\n",
        "num_ids": 45
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    rotated = 0\n    # Store left bit of n\n    left_bit = n & 0x00000001\n    # Shift n by d bits and let it be shifted by 31 bits, if there is a carry, then the rightmost bit of the original number will be 1\n    n = (n << d) | (n >> (32 - d))\n    # Right shift n by (32 - d) bits and let it be shifted by 31 bits, if there is a carry, then the leftmost bit of the original number will be 1\n    n = (n >> (32 - d)) | (n << d)\n    # Replace left_bit to right_bit\n    n = n | (left_bit << (32 - d))\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    rotated = 0\n    # Store left bit of n\n    left_bit = n & 0x00000001\n    # Shift n by d bits and let it be shifted by 31 bits, if there is a carry, then the rightmost bit of the original number will be 1\n    n = (n << d) | (n >> (32 - d))\n    # Right shift n by (32 - d) bits and let it be shifted by 31 bits, if there is a carry, then the leftmost bit of the original number will be 1\n    n = (n >> (32 - d)) | (n << d)\n    # Replace left_bit to right_bit\n    n = n | (left_bit << (32 - d))\n    return n\n    \ndef func(a,b):\n    '''\n    Write a function that return a * b. We assume that the numbers are 32 bit.\n    '''\n    # This is the part for 4 bit\n    a = a & 0xF\n    b = b & 0xF\n    # Multiply the number by 16 and shift right by 4 bits\n    a = a * 16\n    a = a >> 4\n    b = b * 16\n    b = b >> 4\n    # Multiply the numbers and return the result\n    return a*b\n    \ndef mult(a, b):\n    '''\n    Write a function that return a * b. We assume that the numbers are 32 bit.\n    '''\n    # This is the part for 4 bit\n    a = a & 0xF\n    b = b & 0xF\n    # Multiply the number by 16 and shift right by 4 bits\n    a = a * 16\n    a = a >> 4\n    b = b * 16\n    b = b >> 4\n    # Multiply the numbers and return the result\n    return a*b\n",
        "num_ids": 92
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask = mask << 32 - d\n    return ((n << d) | (n >> 32 - d)) & 0xffffffff\ndef right_rotate(n,d):\n    return ((n >> d) | (n << 32 - d)) & 0xffffffff\n",
        "num_ids": 75
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1<<d)-1\n    #mask = 11111111\n    return (n<<d)|(n>>(32-d))&mask\n",
        "num_ids": 38
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", '', text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\ndef remove_all_non_alphanumeric(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    return re.sub(r'\\W+', '', text)\ndef remove_all_non_alphanumeric_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text)\ndef remove_all_non_alphanumeric_upper_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w+','', text)\ndef remove_all_non_alphanumeric_lower(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    return re.sub(r'\\W', '', text).lower()\ndef remove_all_non_alphanumeric_upper(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    return re.sub(r'\\w', '', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_lower(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_upper_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w+','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).lower()\ndef remove_all_non_alphanumeric_keep_spaces_upper(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).upper()\ndef remove_all_non_alphanumeric_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    return re.sub(r'\\w+', '', text).lower()\ndef remove_all_non_alphanumeric_upper_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string.\n    '''\n    return re.sub(r'\\W', '', text).upper()\ndef remove_all_non_alphanumeric_lower_keep_spaces_upper_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w+','', text).upper()\ndef remove_all_non_alphanumeric_lower_keep_spaces_upper_lower(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).lower()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower_keep_spaces_upper_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).lower()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower_keep_spaces_upper_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower_keep_spaces_upper_keep_spaces_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces_lower_keep_spaces_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces_keep_spaces_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\w','', text).upper()\ndef remove_all_non_alphanumeric_keep_spaces_lower_keep_spaces(text):\n    '''\n    Write a function to remove all non-alphanumeric characters from a string while keeping spaces.\n    '''\n    return re.sub(r'\\W','', text).lower()\ndef remove_all_non_alphanumeric_keep_spaces_upper_keep_spaces_lower(text):\n    '''\n    Write a function to remove all non-alpha",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\"\\s+\", \"\", text)\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    \n    return text.replace(\" \", \"\")\n",
        "num_ids": 14
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \",\"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n",
        "num_ids": 12
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s', '', text)\n",
        "num_ids": 18
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n",
        "num_ids": 13
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \", \"\")\n    return text\n",
        "num_ids": 17
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y==z:\n        return 3\n    elif x==y or y==z or x==z:\n        return 2\n    else:\n        return 0\n",
        "num_ids": 43
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in [x,y,z]:\n        if i == x or i == y or i == z:\n            count += 1\n    print(count)\n",
        "num_ids": 45
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    elif x!= y and x!= z and y!= z:\n        return 0\n    else:\n        return False\n",
        "num_ids": 66
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    elif (x!= y) and (y!= z) and (z!= x):\n        return 0\n",
        "num_ids": 63
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x==y and x==z\n",
        "num_ids": 12
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = 3\n    elif x == y or x == z or y == z:\n        count = 2\n    return count\n",
        "num_ids": 46
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert three_equal(x,y,z) == 0\n    assert three_equal(0,1,2) == 0\n    assert three_equal(-1,-2,1) == 1\n    assert three_equal(2,2,2) == 3\n",
        "num_ids": 62
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return sum([x == y == z, y == x == z, z == y == x])\n",
        "num_ids": 25
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum = x + y + z\n    \n    if sum == 0:\n        return 0\n    elif sum == 1:\n        return 0\n    elif sum == 2:\n        return 1\n    elif sum == 3:\n        return 1\n    elif sum == 4:\n        return 2\n    elif sum == 5:\n        return 2\n    elif sum == 6:\n        return 2\n    elif sum == 7:\n        return 3\n    elif sum == 8:\n        return 3\n    elif sum == 9:\n        return 3\n    elif sum == 10:\n        return 3\n    else:\n        return 4\n",
        "num_ids": 152
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0",
        "num_ids": 42
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def is_sorted(arr):\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n        return True\n    def count_rotations(arr):\n        start, end = 0, len(arr) - 1\n        mid = len(arr) - 1\n        while start < end:\n            mid = start + (end - start) // 2\n            if arr[mid] > arr[end]:\n                start = mid + 1\n            elif arr[mid] < arr[end]:\n                end = mid\n            else:\n                end -= 1\n        return end\n    return count_rotations(arr) - count_rotations(arr[::-1])\n",
        "num_ids": 174
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    rotations = 0\n    for i in range(len(arr)-1):\n        if arr[i+1] < arr[i]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 46
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    print(arr)\n    low=0\n    high=len(arr)-1\n    mid=0\n    while low<high:\n        mid=(low+high)//2\n        if arr[mid]>arr[high]:\n            low=mid+1\n        elif arr[mid]<arr[high]:\n            high=mid\n        else:\n            high-=1\n    rotations=high\n    return rotations\n",
        "num_ids": 102
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start = 0\n    end = n - 1\n    mid = 0\n    while mid <= end:\n        if arr[mid] == 0:\n            arr[start], arr[mid] = arr[mid], arr[start]\n            start += 1\n            mid += 1\n        elif arr[mid] == 1:\n            mid += 1\n        else:\n            arr[end], arr[mid] = arr[mid], arr[end]\n            end -= 1\n    return arr\n",
        "num_ids": 121
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i - 1]:\n            count += 1\n        i += 1\n    return count\n",
        "num_ids": 49
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotations = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            rotations += 1\n    return rotations\n",
        "num_ids": 52
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    start_index = 0\n    end_index = n - 1\n    \n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        \n        if arr[mid_index] > arr[start_index]:\n            start_index = mid_index + 1\n            \n        elif arr[mid_index] < arr[start_index]:\n            end_index = mid_index - 1\n            \n        elif arr[start_index] <= arr[start_index] >= arr[end_index]:\n            return start_index\n            \n    return -1\n    \ndef maximum_subarray_sum(arr):\n    '''\n    Write a python function to find the maximum sum of a subarray (sum of its elements) in a given array. https://www.geeksforgeeks.org/maximum-subarray-sum/\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n        \n    max_sum = -sys.maxsize\n    temp_sum = 0\n    \n    for i in range(n):\n        temp_sum += arr[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            \n        if temp_sum < 0:\n            temp_sum = 0\n            \n    return max_sum\n",
        "num_ids": 111
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 0\n",
        "num_ids": 6
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    low = 0\n    high = n-1\n    while low <= high:\n        if arr[low] <= arr[high]:\n            return low\n        else:\n            mid = low + (high-low)//2\n            if arr[mid] < arr[high]:\n                high = mid - 1\n            else:\n                low = mid + 1\n    return -1\n",
        "num_ids": 97
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    pass\n",
        "num_ids": 5
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2) :\n        return False\n    x = 1\n    while (x * x <= n) :\n        x = x + 1\n    if (x * x == n) :\n        return True\n    return False\n",
        "num_ids": 57
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    for i in range(n):\n        if (i * i == n):\n            return 1\n    return 0\n",
        "num_ids": 29
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n <= 1):\n        return False\n    if (n <= 4):\n        return True\n    if ((n % 2 == 0) or (n % 3 == 0)):\n        return False\n    i = 5\n    while (i * i <= n) :\n        if (n % i == 0 or n % (i + 2) == 0) :\n            return False\n        i = i + 6\n    return True\n",
        "num_ids": 101
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = int(math.sqrt(n))\n    return (s*s == n)\n",
        "num_ids": 25
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n ** 0.5 # Square root of the given number\n    return (x - int(x) == 0)\n",
        "num_ids": 31
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    s = 0\n    while (x > 0) :\n        s = s + x % 10\n        x = x // 10\n    return s == n\n",
        "num_ids": 43
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 0) :\n        return 0\n    x = 1\n    while (x * x < n) :\n        x = x + 1\n    if (x * x == n) :\n        return 1\n    return 0\n",
        "num_ids": 57
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return sqrt(n) % 1 == 0\n",
        "num_ids": 14
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Function to calculate square root\n    def Sqrt(x) :\n        if x == 0 or x == 1 :\n            return x\n        else :\n            # Initialize result\n            result = 1\n",
        "num_ids": 50
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Start writing your code here\n    x = int(math.sqrt(n))\n    return x*x == n\n    # End writing your code here\n",
        "num_ids": 39
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for n in arr:\n        product *= n\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr)\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    if prod % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 52
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for i in arr:\n        total *= i\n    if total % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 41
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 37
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n",
        "num_ids": 42
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    mul = 1\n    for i in arr:\n        mul *= i\n    if mul%2==0:\n        return True\n    else:\n        return False\n",
        "num_ids": 43
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # get product \n    product = 1\n    for i in arr:\n        product *= i\n    \n    if product % 2 == 0:\n        return True\n    return False\n",
        "num_ids": 45
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 2:\n        return \"Your list must contain at least 2 numbers\"\n    else:\n        for i in arr:\n            if not isinstance(i,int):\n                return \"All values in the list must be numbers\"\n        product = 1\n        for i in arr:\n            product = product*i\n        return product%2 == 0\n",
        "num_ids": 87
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n",
        "num_ids": 28
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef is_product_even2(arr):\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n    return prod % 2 == 0\n",
        "num_ids": 100
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=lambda x: sum(x))\n",
        "num_ids": 18
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max([sum(l) for l in lists])\n",
        "num_ids": 16
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in lists:\n        if sum(i) > max_sum:\n            max_sum = sum(i)\n            max_list = i\n",
        "num_ids": 45
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    index = 0\n    for i in range(len(lists)):\n        if sum(lists[index]) < sum(lists[i]):\n            index = i\n    return lists[index]\n",
        "num_ids": 48
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n    else:\n        new_lists = []\n        for list_index in range(len(lists)):\n            try:\n                new_lists.append(max_sum_list(lists[list_index + 1:]))\n            except IndexError:\n                continue\n        max_sum_list = []\n        for lists_index in range(len(new_lists)):\n            try:\n                max_sum_list.append(sum(lists[lists_index][0]))\n            except IndexError:\n                continue\n        return_max_list = []\n        for lists_index in range(len(new_lists)):\n            try:\n                return_max_list.append(max_sum_list[lists_index][0])\n            except IndexError:\n                continue\n        if return_max_list:\n            return_max_list_index = return_max_list.index(max(return_max_list))\n            return_max_list = new_lists[return_max_list_index]\n        return return_max_list\n",
        "num_ids": 259
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = 0\n    for list in lists:\n        if(sum(list) > max):\n            max = sum(list)\n    return [max]\n",
        "num_ids": 39
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 0:\n        return []\n    if len(lists) == 1:\n        return lists[0]\n",
        "num_ids": 33
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    sum_list = []\n    for i in lists:\n        sum_list.append(sum(i))\n    max_sum = max(sum_list)\n    return [i for i in range(0, len(lists)) if sum_list[i] == max_sum]\n",
        "num_ids": 68
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    result = lists[0]\n    for list in lists:\n        sum_of_list = 0\n        for num in list:\n            sum_of_list += num\n        if sum_of_list > result[0]:\n            result = [sum_of_list, list]\n    return result\n",
        "num_ids": 72
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists[0]\n    else:\n        return max(max_sum_list(lists[1:]), sum_list(lists[0], max_sum_list(lists[1:])))\n",
        "num_ids": 58
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    print(test_str)\n    print(max_run(test_str))\n",
        "num_ids": 22
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    current_run = 0\n    highest_run = 0\n    for i in range(0, len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n",
        "num_ids": 62
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n        else:\n            count = 0\n    return max_count\n",
        "num_ids": 67
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # print(test_str)\n    cur_high_char = 0\n    cur_high_char_count = 0\n    cur_high_char_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            cur_high_char_count += 1\n        else:\n            if cur_high_char_count > cur_high_char:\n                cur_high_char = cur_high_char_count\n                cur_high_char_index = i - cur_high_char_count\n            cur_high_char_count = 0\n    if cur_high_char_count > cur_high_char:\n        cur_high_char = cur_high_char_count\n        cur_high_char_index = i - cur_high_char_count\n    print(cur_high_char)\n    print(cur_high_char_index)\n",
        "num_ids": 218
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    run = 0\n    for i in range(0, len(test_str)):\n        if(test_str[i].isupper()):\n            run += 1\n            if(run > max):\n                max = run\n        else:\n            run = 0\n    return max\n",
        "num_ids": 73
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    maxcount = 0\n    for i in test_str:\n        if i.isupper():\n            count += 1\n            if count > maxcount:\n                maxcount = count\n        else:\n            count = 0\n    return maxcount\n",
        "num_ids": 63
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    str_len = len(test_str)\n    count = 0\n    max_count = 0\n    prev_is_upper = False\n    for i in range(str_len):\n        if test_str[i].isupper():\n            if prev_is_upper == False:\n                count = 1\n            else:\n                count += 1\n        else:\n            count = 0\n        prev_is_upper = test_str[i].isupper()\n        if count > max_count:\n            max_count = count\n    return max_count\n",
        "num_ids": 131
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    for i in range(len(test_str)):\n        if not test_str[i].isupper():\n            test_str[i] = '_'\n    new_str = ''.join(test_str).split('_')\n    print(''.join(new_str))\n",
        "num_ids": 70
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    num = 1\n    l = []\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            num+=1\n        else:\n            l.append(num)\n            num = 1\n    l.append(num)\n    return max(l)\n",
        "num_ids": 75
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    result = 0\n    i = 0\n    while i < len(test_str):\n        current_run = 0\n        while i < len(test_str) and test_str[i].isupper():\n            current_run += 1\n            i += 1\n        result = max(result, current_run)\n        i += 1\n    return result\n",
        "num_ids": 84
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums[0]\n",
        "num_ids": 49
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n",
        "num_ids": 23
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    \n    for num in nums:\n        if num % 2 == 0:\n            continue\n        else:\n            return num\n",
        "num_ids": 32
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "num_ids": 24
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Check if the number in the list is odd\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    ",
        "num_ids": 37
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n        else:\n            continue\n",
        "num_ids": 31
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums) == 0:\n        return None\n    else:\n        for i in range(len(nums)):\n            if nums[i] % 2 == 1:\n                return nums[i]\n",
        "num_ids": 55
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in K:\n        #print(tup[0])\n        if (test_tup[0] == tup[0]):\n            return True\n",
        "num_ids": 42
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return_val = False\n    for t in test_tup:\n        if t[0] == K:\n            return_val = True\n            break\n    return return_val\n",
        "num_ids": 45
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    flag = 0\n    for i in K:\n        for j in i:\n            if j in test_tup:\n                flag += 1\n    if flag == len(K):\n        return True\n    else:\n        return False\n",
        "num_ids": 57
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == k:\n        return True\n    else:\n        return False\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return 1\n    else:\n        return 0\n",
        "num_ids": 27
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    \n    for i in range(len(K)):\n        for j in range(len(K[i])):\n            if test_tup[i]!= K[i][j]:\n                return False\n    return True\n",
        "num_ids": 56
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == k:\n        return True\n    return False\n",
        "num_ids": 23
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(K)):\n        if K[i][0]==test_tup[0] and K[i][1]==test_tup[1]:\n            return True\n    return False\n    \ndef add_S_K(S, K):\n    '''\n    Write a function to add S to the K set.\n    '''\n    if not check_K(S, K):\n        K.append(S)\n",
        "num_ids": 22
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if(tup[0] == K):\n            return True\n    return False\n",
        "num_ids": 33
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    print(\"\\nCheck if second tuple is smaller than first tuple:\")\n    test_tup1 = (1,2,3,4,5,6)\n    test_tup2 = (5,4,3,2,1,0)\n    if (all(test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))):\n        print(\"True\")\n    else:\n        print(\"False\")\n        \ndef check_two_equal(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of first tuple is equal to its corresponding element in the second tuple.\n    '''\n    print(\"\\nCheck if first and second tuples are equal:\")\n    test_tup1 = (1,2,3,4,5,6)\n    test_tup2 = (6,5,4,3,2,1)\n    if (all(test_tup1[i] == test_tup2[i] for i in range(len(test_tup1)))):\n        print(\"True\")\n    else:\n        print(\"False\")\n        \ndef sum_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to return the sum of two tuples.\n    '''\n    print(\"\\nSum two tuples:\")\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (6,7,8,9,0)\n    print(\"Sum of the two tuples:\", sum(test_tup1+test_tup2))\n",
        "num_ids": 78
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for element in range(0,len(test_tup1)):\n            if test_tup1[element] > test_tup2[element]:\n                return False\n    return True\n",
        "num_ids": 76
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] >= test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] >= test_tup2[1]:\n            return False\n        else:\n            return True\n",
        "num_ids": 104
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a1 < a2 for a1, a2 in zip(test_tup1, test_tup2))\n",
        "num_ids": 33
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup1 = (1, 2, 3, 4, 5)\n    tup2 = (2, 4, 6, 8, 10)\n",
        "num_ids": 36
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return True if all(tup1[i] < tup2[i] for i in range(len(tup1))) else False\n",
        "num_ids": 35
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] >= test_tup2[0] and test_tup1[1] >= test_tup2[1] and test_tup1[2] >= test_tup2[2]:\n        return True\n    else:\n        return False\n",
        "num_ids": 70
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    #return [i1 < i2 for i1, i2 in zip(test_tup1, test_tup2)]\n    return [i1 <= i2 for i1, i2 in zip(test_tup1, test_tup2)]\n",
        "num_ids": 63
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    smaller = 0\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            smaller += 1\n    return smaller == len(test_tup1)\n",
        "num_ids": 63
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    if test_tup1[0] < test_tup2[0]:\n        return True\n    elif test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] < test_tup2[1]:\n            return True\n        elif test_tup1[1] > test_tup2[1]:\n            return False\n        elif test_tup1[1] == test_tup2[1]:\n            return True\n",
        "num_ids": 148
    }
]