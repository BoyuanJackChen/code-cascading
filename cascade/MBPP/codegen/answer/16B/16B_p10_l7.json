[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_elements.append(i)\n    return(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = [elem for elem in test_tup1 if elem in test_tup2]\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [item for item in test_tup1 if item in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [elem for elem in test_tup1 if elem in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    res1 = []\n    res2 = []\n    for elem1 in test_tup1:\n        for elem2 in test_tup2:\n            if elem1 == elem2:\n                res1.append(elem1)\n    for elem2 in test_tup2:\n        for elem1 in test_tup1:\n            if elem2 == elem1:\n                res2.append(elem2)\n    return res1, res2\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # print(set(test_tup1).intersection(set(test_tup2)))\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # print(set(test_tup1).intersection(set(test_tup2)))\n    print(list(set(test_tup1).intersection(set(test_tup2))))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return True\n    if n==2:\n        return False\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i = i + 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i*i <= n:\n        if n % i == 0:\n            return True\n        i += 2\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return True\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    return not is_prime(n)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return True\n    if n % 2 == 0:\n        return True\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return True\n        i = i + 2\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    is_prime = True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i==0:\n            is_prime = False\n            break\n    return is_prime\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]>heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_nlargest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]<heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]<heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n        \ndef heap_queue_nsmallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0 or nums==[]:\n        return []\n    else:\n        heap = []\n        for i in range(n):\n            hq.heappush(heap,nums[i])\n        for i in range(n,len(nums)):\n            if nums[i]>heap[0]:\n                hq.heapreplace(heap,nums[i])\n        return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            hq.heappush(heap,num)\n        else:\n            hq.heappushpop(heap,num)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap=[]\n    for i in range(n):\n        hq.heappush(maxheap,(-nums[i],nums[i]))\n    print(maxheap)\n    return [hq.heappop(maxheap)[1] for i in range(n)]\nnums=[2,3,5,4,6]\nn=3\nprint(heap_queue_largest(nums,n))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    lst = []\n    for i in range(n):\n        lst.append(hq.heappop(nums))\n    return lst[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    if n>len(nums):\n        return nums\n    else:\n        return sorted(nums, reverse=True)\n    \ndef heap_queue_least(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    hq.heapify(nums)\n    if n>len(nums):\n        return nums\n    else:\n        return sorted(nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        hq.heappush(heap, -nums[i])\n    while len(heap) > 0:\n        print(-hq.heappop(heap))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    for i in nums:\n        hq.heappush(h,-i)\n    i = 0\n    while i<n:\n        print(hq.heappop(h)*(-1),end=\" \")\n        i+=1\n    return\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums = sorted(nums,reverse=True)\n    q = []\n    for i in range(n):\n        hq.heappush(q,nums[i])\n    return q\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)==0):\n        return []\n    # make heap of list\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    # pop largest until heap is less than or equal to n\n    largest = []\n    while(len(heap)>n):\n        largest.append(hq.heappop(heap))\n    # append remaining largest list\n    while(len(heap)>0):\n        largest.append(hq.heappop(heap))\n    return largest\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)==0):\n        return []\n    # make heap of list\n    heap = []\n    for num in nums:\n        hq.heappush(heap,num)\n    # pop largest until heap is less than or equal to n\n    smallest = []\n    while(len(heap)>n):\n        smallest.append(hq.heappop(heap))\n    # append remaining largest list\n    while(len(heap)>0):\n        smallest.append(hq.heappop(heap))\n    return smallest\ndef min_heap_insert(min_heap,item):\n    hq.heappush(min_heap,item)\ndef min_heap_pop(min_heap):\n    return hq.heappop(min_heap)\ndef min_heap_top(min_heap):\n    return min_heap[0]\ndef max_heap_insert(max_heap,item):\n    hq.heappush(max_heap,-item)\ndef max_heap_pop(max_heap):\n    return -hq.heappop(max_heap)\ndef max_heap_top(max_heap):\n    return -max_heap[0]\ndef heap_decrease_key(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    index = heap.index(item)\n    hq.heapify(heap)\n    heap[index] = new_key\n    hq.heapify(heap)\ndef heap_increase_key(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    index = heap.index(item)\n    hq.heapify(heap)\n    heap[index] = new_key\n    hq.heapify(heap)\ndef min_heap_sort(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into min heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off min element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.heapify(nums)\n    return nums\ndef max_heap_sort(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into max heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off max element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.heapify(nums)\n    return nums\ndef min_heap_insert_multiple(min_heap,item):\n    # O(log(n))\n    # O(1)\n    for item in nums:\n        hq.heappush(min_heap,item)\ndef min_heap_pop_multiple(min_heap):\n    return hq.heappop(min_heap)\ndef min_heap_top_multiple(min_heap):\n    return min_heap[0]\ndef max_heap_insert_multiple(max_heap,item):\n    # O(log(n))\n    # O(1)\n    for item in nums:\n        hq.heappush(max_heap,-item)\ndef max_heap_pop_multiple(max_heap):\n    return -hq.heappop(max_heap)\ndef max_heap_top_multiple(max_heap):\n    return -max_heap[0]\ndef heap_decrease_key_multiple(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    for item in nums:\n        index = heap.index(item)\n        hq.heapify(heap)\n        heap[index] = new_key\n        hq.heapify(heap)\ndef heap_increase_key_multiple(heap,item,new_key):\n    # O(log(n))\n    # O(1)\n    # in the heap, the elements are negative\n    for item in nums:\n        index = heap.index(item)\n        hq.heapify(heap)\n        heap[index] = new_key\n        hq.heapify(heap)\ndef min_heap_sort_multiple(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into min heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off min element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.heapify(nums)\n    return nums\ndef max_heap_sort_multiple(nums):\n    '''\n    Write a function to sort a given list of integers using Heap Sort, in O(nLogn) time complexity.\n    You can assume that the input list contains only integers.\n    '''\n    # O(nLogn)\n    # O(nLogn)\n    # heapify the list into max heap\n    hq.heapify(nums)\n    # swap first and last elements\n    if(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n    # pop off max element until the list is size 1\n    while(len(nums)>1):\n        nums[0],nums[-1] = nums[-1],nums[0]\n        hq.heappop(nums)\n        hq.hea"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if(len(nums)<n):\n        return []\n    pq = []\n    for num in nums:\n        hq.heappush(pq,-num)\n    return [-i for i in hq.nlargest(n,pq)]\n    \n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if(len(nums)<n):\n        return []\n    pq = []\n    for num in nums:\n        hq.heappush(pq,num)\n    return hq.nsmallest(n,pq)\n    \n    \ndef heap_queue_count(nums,n):\n    '''\n    Write a function to count the number of n elements in a given list with the largest number appearing n times.\n    '''\n    if(len(nums)<n):\n        return 0\n    hq = nums[:n]\n    hq.sort()\n    heapq.heapify(hq)\n    return hq[0]*n\n    \n    \ndef heap_queue_median(nums,n):\n    '''\n    Write a function to find the median of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sorted(nums)[n//2]\n    nums.sort()\n    return nums[n-1]\n    \n    \ndef heap_queue_sum_of_median(nums,n):\n    '''\n    Write a function to find the sum of the median of the n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sum(sorted(nums)[n//2:])\n    median = sorted(nums)[n//2]\n    return sum(sorted(nums)[:n//2]) + sum(sorted(nums)[n//2+1:]) + median*n\n    \n    \ndef heap_queue_mean(nums,n):\n    '''\n    Write a function to find the mean of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sum(sorted(nums)[n//2:])/(n//2)\n    nums.sort()\n    return sum(nums[n:2*n])/(2*n)\n    \n    \ndef heap_queue_variance(nums,n):\n    '''\n    Write a function to find the variance of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return sum(sorted(nums)[n//2:])*(n//2)/(n//2)\n    return sum(nums[n:2*n])*(n)/(2*n) - (sum(nums[:n])*n)/(n)\n    \n    \ndef heap_queue_standard_deviation(nums,n):\n    '''\n    Write a function to find the standard deviation of n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    if(len(nums)<=2*n):\n        return (sum(sorted(nums)[n//2:])/n - (sum(sorted(nums)[n//2:])**2)/(n))**0.5\n    return (sum(nums[n:2*n]) - sum(nums[:n])*n)/(2*n) - (sum(nums[n:2*n]) - sum(nums[n:2*n])**2/(2*n))**0.5\n    \n    \ndef heap_queue_median_of_medians(nums,n):\n    '''\n    Write a function to find the median of the median of the n smallest integers from a given list.\n    '''\n    if(len(nums)<n):\n        return -1\n    heap = nums[:n]\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    if(n<=2):\n        return sorted(heap)[n//2]\n    return -heapq.heappushpop(heap,-heapq.heappop(heap))\n    \n    \ndef heap_queue_sort(nums):\n    '''\n    Write a function to sort the n smallest integers from a given list.\n    '''\n    if(len(nums)<=1):\n        return nums\n    heapq.heapify(nums)\n    nums.sort()\n    return sorted(nums)\n    \n    \ndef heap_queue_flip(nums):\n    '''\n    Write a function to do in-place reversal of n smallest integers from a given list.\n    '''\n    if(len(nums)<=1):\n        return nums\n    heapq.heapify(nums)\n    for i in range(len(nums)//2):\n        hq.heappop(nums)\n    for i in range(len(nums)//2):\n        hq.heappush(nums,hq.heappop(nums))\n    return sorted(nums)\n    \n    \ndef heap_queue_find(nums,n,target):\n    '''\n    Write a function to find the n smallest integers in a given list that contain a given integer target.\n    '''\n    if(len(nums)<n):\n        return -1\n    heapq.heapify(nums)\n    i = 0\n    while(nums[0]!=target):\n        hq.heappop(nums)\n        i+=1\n    hq.heappop(nums)\n    return i\n    \n    \ndef heap_queue_get_frequency_of_max(nums):\n    '''\n    Write a function to count the frequency of the largest element in a given list.\n    '''\n    if(len(nums)<=1):\n        return 0\n    heapq.heapify(nums)\n    heapq.heappush(nums,nums[0])\n    heapq.heappop(nums)\n    return len(nums)\n    \n    \ndef heap_queue_get_frequency_of_min(nums):\n    '''\n    Write a function to count the frequency of the smallest element in a given list.\n    '''\n    if(len(nums)<=1):\n        return 0\n    heapq.heapify(nums)\n    return len(nums)\n    \n    \ndef heap_queue_get_frequency_of_element(nums,element):\n    '''\n    Write a function to count the frequency of the given element in a given list.\n    '''\n    if(len(nums)<=1):\n        return 0\n    heapq.heapify(nums)\n    return nums.count(element)\n    \n    \ndef heap_queue_get_element_at(nums,index):\n    '''\n    Write a function to find the element at index of n smallest integers from a given list.\n    '''\n    if(len(nums)<=1):\n        return -1\n    heapq.heapify(nums)\n    i = 0\n    while(nums[0]!=index):\n        hq.heappop(nums)\n        i+=1\n    return hq.heappop(nums)\n    \n    \ndef heap_queue_get_frequency_of_median(nums,n):\n    '''\n    Write a function to find the frequency of the median of the n smallest integers from a given list.\n    '''\n    if(len(nums)<"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    powOfTwo = 0\n    while (x): \n        powOfTwo += 1\n        x &= x-1\n    if (powOfTwo == 1): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    import math\n    if (x & (x - 1)) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    def is_power_of_two(n):\n        return (n & (n-1) == 0) and n!= 0\n    return is_power_of_two(x)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # extract the rightmost bit of x \n    x = x >> 1\n    # if 2**k is equal to x, then return True \n    return (x == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0):\n        if ((x & 1) == 1):\n            return True\n        x = x >> 1\n        if (x == 0):\n            return False\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Count the number of set bits \n    # in the binary representation of the given \n    # number x. \n    x = x ^ (x >> 1) \n    return (x & (x - 1) == 0) \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #Check if x is Power Of 2\n    while (x and not(x & -x)): \n        x = x & (x - 1) \n    return (not x)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x &(x-1)==0: \n        return True\n    else:\n        return False\n    # else:\n    #     return False\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regx = r'\\b[a-zA-Z]{4,}\\b'\n    return re.findall(regx, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    list_words = re.findall(r'\\w{4,}',text)\n    return list_words\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    result = pattern.findall(text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_word = re.findall(r'\\w{4,}',text)\n    print(long_word)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}',text)\n    if result:\n        print(result)\n    else:\n        print(\"No match found\")\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # match_obj = re.search(r'\\S{4,}', text, re.I)\n    # print(match_obj)\n    match_obj = re.findall(r'\\S{4,}', text, re.I)\n    print(match_obj)\n    return match_obj\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [s for s in text.split() if len(s) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    l = re.findall(r'\\w{4,}',text)\n    print(l)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    match = pattern.findall(text)\n    return match\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # find all words more than 4 characters\n    matches = re.findall(r'\\b\\w{4,}\\b', text)\n    # return all words\n    return matches\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #new_list = []\n    #for i in nums:\n    #    new_list.append(i**2)\n    #return new_list\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    #return [x**2 for x in nums]\n    return list(map(lambda x: x**2, nums))\nprint(square_nums([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n ** 2 for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for i in nums:\n        squared_nums.append(i**2)\n    return squared_nums\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        yield num ** 2\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    string=list(str)\n    n=len(string)\n    count=0\n    for i in range(1,n):\n        if(string[i]==string[0]):\n            continue\n        else:\n            j=0\n            while(string[i]!=string[j]):\n                j+=1\n            if(j==i):\n                continue\n            else:\n                count+=1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def string_rotation(str1,str2):\n        if len(str1)!= len(str2):\n            return False\n        # do a sort and compare the strings\n        return sorted(str1) == sorted(str2)\n    #sort the string\n    sorted_str = sorted(str)\n    # find the minimum number of rotations required\n    rotations = 0\n    for i in range(1,len(sorted_str)):\n        if string_rotation(sorted_str[i],sorted_str[0]):\n            return rotations\n        else:\n            rotations+=1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    i = 0\n    length = len(str) \n    while(i < length): \n        if (str[i]!= str[length - i - 1]): \n            if i == 0: \n                return length - i - 1\n            else: \n                return length - i\n        i += 1\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    \n    first_rot = str[0]\n    first_rot_len = 1\n    for i in range(1, len(str)):\n        if str[i] == first_rot:\n            first_rot_len += 1\n        else:\n            break\n    print(first_rot_len)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    list1 = []\n    list1.append(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if(len(str) == 0): \n        return 0\n    rotations = 0\n    str1 = str[0:1] \n    for i in range(1, len(str)): \n        if (str1 == str[i:i + 1]): \n            return 0\n        str1 = str[i:i + 1] \n    return rotations \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(0, len(str)):\n        if str[:i+1] == str[i+1:]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize the rotations.\n    rotations = 0\n    # To store the length of the string.\n    len_str = len(str)\n    # Iterate the string.\n    for i in range(len_str):\n        # Set the first character as the current character and the last character as the first character.\n        first_char = str[i]\n        last_char = str[len_str - 1]\n        # Iterate the string.\n        for j in range(1, len_str):\n            # If the current character is equal to the last character, then set the last character to the second last character and the first character to the second character.\n            if str[j] == last_char:\n                last_char = str[j - 1]\n                first_char = str[j]\n                # Increase the number of rotations.\n                rotations += 1\n            # If the current character is not equal to the last character, then break the loop and return.\n            if str[j]!= last_char:\n                break\n    # Return the number of rotations.\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if not str: \n        return 0\n    n = len(str) \n    ans = 0\n    for i in range(n - 1): \n        if str[i]!= str[i + 1]: \n            ans += 1\n    return ans "
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(s, n): \n        return s[n:] + s[:n]\n    n = len(str)\n    result = 0\n    while(True):\n        if rotate(str, n) == str:\n            return result\n        else:\n            result += 1\n            n += 1\n    return result\n        \ndef find_Missing(arr, n): \n    '''\n    Write a Python function to find and return the missing number in a given integer array.\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = list(s)\n    s.remove(ch)\n    s.remove(ch)\n    s = ''.join(s)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s: \n        s=s.replace(ch, \"\") \n        s=s.replace(ch, \"\") \n    return s\ns = input(\"Enter the string :\")\nch = input(\"Enter the character to remove: \")\nprint(remove_Occ(s, ch)) \n'''\nOutput:\nEnter the string :hello\nEnter the character to remove: e\nhel\n'''\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1).replace(ch,'',-1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'',1)[:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    first_ch_Occ = s.find(ch)\n    last_ch_Occ = s.rfind(ch)\n    return s[0:first_ch_Occ]+s[last_ch_Occ+1:len(s)]\nprint(remove_Occ(\"RithvikReddy\",'R'))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n    \ndef word_count(s): \n    '''\n    Write a python function to count the occurrences of words in a string.\n    '''\n    return len(s.split())\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    start = 0\n    end = len(s)-1\n    \n    while start <= end:\n        while s[start]!= ch and start <= end:\n            start += 1\n        while s[end]!= ch and start <= end:\n            end -= 1\n        if start <= end:\n            s = s[:start] + s[end+1:]\n            end = len(s)-1\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Code goes here\n    s = list(s)\n    s.remove(ch)\n    return ''.join(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch, \"\")\n    s1 = s1.replace(ch, \"\")\n    return s1\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = {}\n    for row in range(len(M)):\n        sums = 0\n        for col in range(len(M[row])):\n            sums += M[row][col]\n        row_sums[row] = sums\n    row_sums = sorted(row_sums.items(), key=lambda x: x[1])\n    return row_sums\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(0, len(M)):\n        for j in range(i, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    total_sum = []\n    for x in M:\n        total_sum.append(sum(x))\n    \n    M.sort(key=lambda x: sum(x))\n    return M\n    \ndef find_zeros(M):\n    '''\n    Write a function to find the zero elements in a given matrix. An element is considered to be zero if it's value is 0.\n    '''\n    zero_elements = []\n    for x in range(len(M)):\n        for y in range(len(M[0])):\n            if M[x][y] == 0:\n                zero_elements.append([x,y])\n    \n    return zero_elements\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_matrix = [sum(row) for row in M]\n    sum_matrix.sort()\n    return M[sum_matrix.index(min(sum_matrix))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_row = []\n    for row in M:\n        sum_row.append(sum(row))\n    # sum_row.sort()\n    # print(sum_row)\n    for i in range(0, len(M)):\n        for j in range(0, len(M)):\n            if sum_row[i] < sum_row[j]:\n                # print(M[j], M[i])\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n                # print(M)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=lambda x: sum(x))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i + 1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                temp = M[i]\n                M[i] = M[j]\n                M[j] = temp\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = [sum(x) for x in M]\n    return [[M[i][j] for i in range(len(M)) if S[i]==sum(S[:i+1])] for j in range(len(M[0]))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp = []\n    for row in range(len(M)):\n        temp.append(sum(M[row]))\n    \n    for i in range(len(temp)):\n        for j in range(len(temp)-1):\n            if temp[j]>temp[j+1]:\n                temp[j],temp[j+1] = temp[j+1],temp[j]\n                M[j],M[j+1] = M[j+1],M[j]\n                # print(M[j],M[j+1])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort(M, start, end):\n        if start < end:\n            pivot_row = end\n            pivot_idx = M[pivot_row].index(min(M[pivot_row]))\n            pivot_element = M[pivot_row][pivot_idx]\n            for j in range(start, pivot_idx):\n                M[j][pivot_idx],M[j][pivot_row] = M[j][pivot_row],M[j][pivot_idx]\n            for j in range(start, end):\n                for i in range(j+1, end):\n                    if M[j][j] + M[i][i] < M[i][j] + M[j][i]:\n                        M[j][i],M[i][j] = M[i][j],M[j][i]\n                        M[j][j],M[i][i] = M[i][i],M[j][j]\n            for j in reversed(range(start, pivot_idx)):\n                M[j][pivot_idx],M[j][pivot_row] = M[j][pivot_row],M[j][pivot_idx]\n            sort(M, start, pivot_idx-1)\n            sort(M, pivot_idx+1, end)\n    sort(M, 0, len(M)-1)\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2)*(b*h) * l\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*h*(l*b)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l,b,h are side length of triangular prism\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5*l*b*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/6)*l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n    \nl = float(input('Enter the length of the base of the triangular prism: '))\nb = float(input('Enter the length of the height of the triangular prism: '))\nh = float(input('Enter the length of the triangular prism: '))\nprint('The volume of the triangular prism is: ',find_Volume(l,b,h)"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round(((1/2) * (l * b * h)),1)\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return 0.5*l*b*h\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search('_\\w+_', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #should return true if at least one sequence of lowercase letters joined with an underscore is found\n    if re.search(r'_[a-z]+_',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #example \n    #check if 'the_cat_is_sitting_on_the_mat' is True\n    #check if 'The_dog_is_sitting_on_the_mat' is False\n    #check if 'The_cat_is_sitting_on_the_mat' is False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.findall(r\"^[a-z]+_[a-z]+$\", text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Note: this pattern is not case sensitive.\n    return bool(re.search(\"[a-z]+_[a-z]+\", text, flags=re.IGNORECASE))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[_]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"_\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r\"^([a-z]+_){2}[a-z]+$\", text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Check that the string starts with an underscore.\n    if not text.startswith(\"_\"):\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    match = re.findall(r'\\w_\\w', text)\n    if match:\n        return True\n    return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = 4*a\n    return p\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass # remove this line\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (4*a)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    key_list = list(string) \n    for key in key_list: \n        if key in string2: \n            string = string.replace(key,'') \n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i in List_1:\n            List_3.remove(i)\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef list_to_str(string):\n    '''\n    Write a function to replace all the characters of the first string with the corresponding characters of the second string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i in List_1:\n            List_3[List_1.index(i)] = i\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef sort_string(string):\n    '''\n    Write a function to sort all the characters of the string in descending order.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    List_3.sort()\n    List_3.reverse()\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    List_4.reverse()\n    List_4.sort(reverse = True)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef count_substring(string, sub_string):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(sub_string):\n            count += 1\n    return count\n    \ndef swap_case(string):\n    '''\n    Write a function to swap cases. \n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    List_4 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i.isupper():\n            List_3[List_1.index(i.lower())] = i.upper()\n        else:\n            List_3[List_1.index(i.upper())] = i.lower()\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef remove_vowels(string):\n    '''\n    Write a function to remove all the vowels from the string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i in ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']:\n            List_3[List_1.index(i)] = \"\"\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    return string\n    \ndef check_pangram(string):\n    '''\n    Write a function to check whether a string is PANGRAM or not.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    List_4 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i not in List_3:\n            List_3.append(i)\n            \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    if len(string) == len(List_1):\n        return True\n    else:\n        return False\n    \ndef full_rotation(string):\n    '''\n    Write a function that takes a string as input and returns true if the string is a full rotation of another string.\n    '''\n    List_1 = []\n    List_2 = []\n    List_3 = []\n    List_4 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i not in List_3:\n            List_3.append(i)\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    \n    List_1 = []\n    for i in string:\n        List_1.append(i)\n    for i in string:\n        List_2.append(i)\n    for i in string:\n        List_3.append(i)\n    for i in List_2:\n        if i not in List_3:\n            List_3.append(i)\n    \n    List_4 = []\n    for i in List_3:\n        List_4.append(i)\n    string = \"\"\n    for i in List_4:\n        string += i\n    if string == List_1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string)\n    for i in l:\n        if i in string:\n            l.remove(i)\n    return ''.join(l)\nprint(str_to_list(\"Oops!!!\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for i in string:\n        if i not in result:\n            result.append(i)\n    return result\ndef string_to_number(string, base): \n    '''\n    Write a function to convert a string into an integer.\n    '''\n    result = 0\n    for i in range(len(string)):\n        result += ord(string[i]) * base**(len(string)-i-1)\n    return result\ndef number_to_string(number, base): \n    '''\n    Write a function to convert an integer into a string.\n    '''\n    result = []\n    while number:\n        result.append(chr(int(number%base)))\n        number = number//base\n    return ''.join(list(reversed(result)))\ndef list_to_str(list):\n    '''\n    Write a function to convert a list of characters into a string.\n    '''\n    return ''.join(list)\ndef str_to_list_1(string):\n    '''\n    Write a function to convert a string into a list of characters.\n    '''\n    return list(string)\ndef str_to_list_2(string):\n    '''\n    Write a function to split a string into a list of characters.\n    '''\n    return list(string)\ndef list_to_str_2(list):\n    '''\n    Write a function to split a list of characters into a string.\n    '''\n    return ''.join(list)\ndef main():\n    print(str_to_list('Hello, World!'))\n    print(str_to_list_1('Hello, World!'))\n    print(str_to_list_2('Hello, World!'))\n    print(list_to_str('Hello, World!'))\n    print(list_to_str_2(['H', 'e', 'l', 'l', 'o', ',','', 'W', 'o', 'r', 'l', 'd', '!']))\n    print(list_to_str_2(['H', 'e', 'l', 'l', 'o', ',','', 'W', 'o', 'r', 'l', 'd', '!']))\n    print(string_to_number('1', 2))\n    print(number_to_string(256, 2))\n    print(string_to_number('10110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110110"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [character for character in string if character not in string]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = [] \n    for x in string:\n        if x in res:\n            string = string.replace(x,\"\",1)\n        else:\n            res.append(x)\n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_ = [i for i in string]\n    for i in list_:\n        if i not in string2:\n            string = string.replace(i,\"\")\n    print(string)\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in set(string[:string.find(char)])]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l = list(string) \n    for i in l: \n        if i in string2: \n            l.remove(i)\n    return (\"\".join(l)) \ndef first_last_index(string):\n    first_index = 0\n    last_index = len(string)-1\n    return [first_index,last_index]\ndef pattern_count(text,pattern):\n    count = 0\n    for i in range(0,len(text)-len(pattern)+1):\n        if str_to_list(text[i:i+len(pattern)]) == str_to_list(pattern):\n            count+=1\n    return count\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    dict = {}\n    for i in range(0, NO_OF_CHARS): \n        dict[string[i]] = 0\n    for i in range(0, len(string)): \n        dict[string[i]] += 1\n    return dict\n"
    }
]