[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = set()\n    for element in test_tup1:\n        if element in test_tup2:\n            similar_elements.add(element)\n    return similar_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print('returns set of shared elements from two lists')\n    return set(test_tup1).intersection(set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    common_elements = [i for i in test_tup1 if i in test_tup2]\n    return common_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return i\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = [i for i in test_tup1 if i in test_tup2]\n    return similar_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [element for element in test_tup1 if element in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return i\n        else:\n            pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # initialize variables\n    shared_elements = []\n    \n    # outer loop: for each item in test_tup1\n    for i in test_tup1:\n        # inner loop: for each item in test_tup2\n        for j in test_tup2:\n            # if item matches, append it to shared_elements\n            if i == j:\n                shared_elements.append(i)\n                \n    # return the list\n    return shared_elements\n    \nprint(similar_elements([1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\nprint(similar_elements([1, 2, 3, 4], [5, 6, 7, 8]))\nprint(similar_elements([1, 2, 3, 4, 5, 6], [5, 6, 7, 8])"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    return(set(test_tup1).intersection(test_tup2))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return \"Incorrect input.\"\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return \"Not prime.\"\n    return \"Prime.\"\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return True\n    return False\ndef remove_non_prime_numbers(l):\n    for i in l[:]:\n        if is_not_prime(i):\n            l.remove(i)\n    return l\ndef find_key_from_dict(dict,val):\n    for key,value in dict.items():\n        if value == val:\n            return key\n    return -1\ndef find_key_from_list(l,val):\n    for i in l:\n        if i == val:\n            return l.index(i)\n    return -1\ndef generate_sum_of_elements_from_list_within_range(l,low,high):\n    s = 0\n    for i in l:\n        if i >= low and i <= high:\n            s += i\n    return s\ndef generate_sum_of_elements_from_list_without_range(l,low,high):\n    s = 0\n    for i in l:\n        if i < low or i > high:\n            s += i\n    return s\ndef get_all_subsets_of_lists(l):\n    '''\n    Write a python function that takes in a list of lists and returns a list of all the possible subsets of each list. \n    '''\n    def return_all_subsets(l,result,subset):\n        result.append(subset[:])\n        for i in range(len(l)):\n            subset.append(l[i])\n            return_all_subsets(l[i+1:],result,subset)\n            subset.pop()\n        return result\n    result = []\n    subset = []\n    return_all_subsets(l,result,subset)\n    return result\ndef get_all_permutations(l):\n    '''\n    Write a python function that takes in a list of elements and returns all possible permutations of the list.\n    '''\n    def permutation_helper(l,result,i):\n        if i == len(l):\n            result.append(l[:])\n            return\n        for j in range(i,len(l)):\n            l[i],l[j] = l[j],l[i]\n            permutation_helper(l,result,i+1)\n            l[i],l[j] = l[j],l[i]\n    result = []\n    permutation_helper(l,result,0)\n    return result\ndef print_all_permutations(l):\n    '''\n    Write a python function that takes in a list of elements and prints all possible permutations of the list.\n    '''\n    result = get_all_permutations(l)\n    for i in result:\n        print(i)\ndef print_all_subsets(l):\n    '''\n    Write a python function that takes in a list of elements and prints all possible subsets of the list.\n    '''\n    result = get_all_subsets_of_lists(l)\n    for i in result:\n        print(i)\ndef is_elem_in_list(l,elem):\n    for i in l:\n        if i == elem:\n            return True\n    return False\ndef get_all_elements_in_all_subsets(l):\n    '''\n    Write a python function that takes in a list of lists and returns a list of all the elements that appear in at least one list in the list of lists.\n    '''\n    result = []\n    for i in l:\n        for j in i:\n            if not is_elem_in_list(result,j):\n                result.append(j)\n    return result\ndef get_all_permutations_without_duplicates(l):\n    '''\n    Write a python function that takes in a list of elements and returns all possible permutations of the list without duplicates.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            if not is_elem_in_list(result,l[i]):\n                if not is_elem_in_list(result,l[j]):\n                    result.append(l[i])\n                    result.append(l[j])\n    return result\ndef get_all_permutations_without_duplicates_util(l,result,i):\n    if i == len(l)-1:\n        result.append(l[:])\n        return\n    for j in range(i,len(l)):\n        if not is_elem_in_list(result,l[j]):\n            l[i],l[j] = l[j],l[i]\n            get_all_permutations_without_duplicates_util(l,result,i+1)\n            l[i],l[j] = l[j],l[i]\ndef get_all_permutations_without_duplicates_wrapper(l):\n    result = []\n    get_all_permutations_without_duplicates_util(l,result,0)\n    return result\ndef get_all_permutations_without_duplicates_wrapper_wrapper(l):\n    result = get_all_permutations_without_duplicates_wrapper(l)\n    for i in result:\n        print(i)\ndef get_all_subsets_without_duplicates(l):\n    '''\n    Write a python function that takes in a list of lists and returns a list of all the possible subsets of each list without duplicates.\n    '''\n    result = []\n    for i in l:\n        result.append(i[:])\n    return result\ndef get_all_permutations_of_lists(l):\n    '''\n    Write a python function that takes in a list of lists and returns a list of all possible permutations of the list of lists.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in range(i,len(l)):\n            for k in range(len(l[i])):\n                for l in range(len(l[j])):\n                    result.append([l[k] for l in l[j]])\n    return result\ndef get_all_subsets_of_lists_without_duplicates(l):\n    '''\n    Write a python function that takes in a list of lists and returns a list of all the possible subsets of each list without duplicates.\n    '''\n    result = []\n    for i in l:\n        result.append(i[:])\n    return get_all_subsets_without_duplicates(result)\ndef get_all_subsets_without_duplicates_of_lists(l):\n    '''\n    Write a python function that takes in a list of lists and returns a list of all the possible subsets of each list without duplicates.\n    '''\n    result = []\n    for i in l:\n        result.append(i[:])\n    return get_all_subsets_without_duplicates_of_lists(result)\ndef get_all_subsets_of_lists_util(l,result,i):\n    if i == len(l):\n        result.append(l[:])\n        return\n    for j in range(i,len(l)):\n        l[i],l[j] = l[j],l[i]\n        get_all_subsets_of_lists_util(l,result,i+1)\n        l[i],l[j] = l[j],l[i]\ndef get_all_subsets_of_lists_wrapper(l):\n    result = []\n    get_all_subsets_of_lists_util(l,result,0)\n    return result\ndef get_all_subsets_of_lists_wrapper_wrapper(l):\n    result = get_all_subsets_of_lists_wrapper(l)\n    for i in result:\n        print(i)\ndef get_all_subsets_of_lists_util_util(l,result,i,subset):\n    if i == len(l):\n        result.append(subset[:])\n        return\n    for j in range(i,len(l)):\n        subset.append(l[j])\n        get_all_subsets_of_list"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return True\n        return False\n    \ndef xor_cipher(string, key):\n    '''\n    Write a python function to encrypt a given string with XOR cipher.\n    '''\n    result = \"\"\n    for i in range(len(string)):\n        result += chr(ord(string[i]) ^ key)\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<=1:\n        return False\n    elif n==2 or n==3:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,int(math.sqrt(n)+1)):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,math.floor(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n <= 1):\n        return True\n    if (n <= 3):\n        return False\n    if (n % 2 == 0 or n % 3 == 0):\n        return True\n    i = 5\n    while(i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return True\n        i = i + 6\n    return False\n    \ndef prime_factors(n):\n    '''\n    Write a python function to print prime factors of a given number.\n    '''\n    if is_not_prime(n) == True:\n        return False\n    else:\n        print('The prime factors of',n,'are:')\n        i = 2\n        while (n > 1):\n            if (n % i == 0):\n                n /= i\n                print(i)\n            else:\n                i += 1\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return arr\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return arr\ndef heap_queue_max_size(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return len(arr)\ndef heap_queue_min_size(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return len(arr)\ndef heap_queue_push(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return arr\ndef heap_queue_pop(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return hq.heappop(arr)\ndef heap_queue_pushpop(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return hq.heappushpop(arr,nums[0])\ndef heap_queue_pushpopmax(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return hq.heappushpop(arr,nums[0])\ndef heap_queue_pushpopmin(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums[i])\n    return hq.heappushpop(arr,nums[0])\ndef heap_queue_merge(nums1,nums2,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    for i in range(n):\n        hq.heappush(arr,nums1[i])\n        hq.heappush(arr,nums2[i])\n    return arr\ndef heap_queue_heapify(arr):\n    hq.heapify(arr)\ndef heap_queue_sort(arr):\n    hq.heapify(arr)\n    arr=hq.nlargest(len(arr),arr)\ndef heap_queue_heappush(arr):\n    hq.heappush(arr,25)\ndef heap_queue_heappop(arr):\n    return hq.heappop(arr)\ndef heap_queue_heappushpop(arr):\n    hq.heappush(arr,25)\n    return hq.heappop(arr)\ndef heap_queue_heapreplace(arr):\n    hq.heappush(arr,25)\n    return hq.heapreplace(arr,34)\ndef heap_queue_nlargest(arr,n):\n    hq.nlargest(n,arr)\ndef heap_queue_nsmallest(arr,n):\n    hq.nsmallest(n,arr)\ndef heap_queue_count(arr):\n    return hq.count(arr)\ndef heap_queue_index(arr,val):\n    return hq.index(arr,val)\ndef heap_queue_reverse(arr):\n    hq.reverse(arr)\ndef heap_queue_copy(arr):\n    return hq.copy(arr)\ndef heap_queue_clear(arr):\n    hq.clear(arr)\ndef heap_queue_append(arr,val):\n    hq.append(arr,val)\ndef heap_queue_extend(arr,val):\n    hq.extend(arr,val)\ndef heap_queue_insert(arr,val):\n    hq.insert(arr,val)\ndef heap_queue_popindex(arr,index):\n    return hq.pop(arr,index)\ndef heap_queue_remove(arr,val):\n    return hq.remove(arr,val)\ndef heap_queue_max(arr):\n    return hq.max(arr)\ndef heap_queue_min(arr):\n    return hq.min(arr)\ndef heap_queue_reverse(arr):\n    hq.reverse(arr)\ndef heap_queue_copy(arr):\n    return hq.copy(arr)\ndef heap_queue_clear(arr):\n    hq.clear(arr)\ndef heap_queue_append(arr,val):\n    hq.append(arr,val)\ndef heap_queue_extend(arr,val):\n    hq.extend(arr,val)\ndef heap_queue_insert(arr,val):\n    hq.insert(arr,val)\ndef heap_queue_popindex(arr,index):\n    return hq.pop(arr,index)\ndef heap_queue_remove(arr,val):\n    return hq.remove(arr,val)\ndef heap_queue_max(arr):\n    return hq.max(arr)\ndef heap_queue_min(arr):\n    return hq.min(arr)\ndef heap_queue_reverse(arr):\n    hq.reverse(arr)\ndef heap_queue_copy(arr):\n    return hq.copy(arr)\ndef heap_queue_clear(arr):\n    hq.clear(arr)\ndef heap_queue_append(arr,val):\n    hq.append(arr,val)\ndef heap_queue_extend(arr,val):\n    hq.extend(arr,val)\ndef heap_queue_insert(arr,val):\n    hq.insert(arr,val)\ndef heap_queue_popindex(arr,index):\n    return hq.pop(arr,index)\ndef heap_queue_remove(arr,val):\n    return hq.remove(arr,val)\ndef heap_queue_max(arr):\n    return hq.max(arr)\ndef heap_queue_min(arr):\n    return hq.min(arr)\ndef heap_queue_reverse(arr):\n    hq.reverse(arr)\ndef heap_queue_copy(arr):\n    return hq.copy(arr)\ndef heap_queue_clear(arr):\n    hq.clear(arr)\ndef heap_queue_append(arr,val):\n    hq.append(arr,val)\ndef heap_queue_extend(arr,val):\n    hq.extend(arr,val)\ndef heap_queue_insert(arr,val):\n    hq.insert(arr,val)\ndef heap_queue_popindex(arr,index):\n    return hq.pop(arr,index)\ndef heap_queue_remove(arr,val):\n    return hq.remove(arr,val)\ndef heap_queue_max(arr):\n    return hq.max(arr)\ndef heap_queue_min(arr):\n    return hq.min(arr)\ndef heap_queue_reverse(arr):\n    hq.reverse(ar"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    nums_sorted = sorted(nums, reverse=True)\n    for num in nums_sorted:\n        hq.heappush(heap, num)\n    # print(heap)\n    if len(heap)<n:\n        return heap\n    for _ in range(n):\n        hq.heappop(heap)\n    return heap\n    \ndef heap_queue_n_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    nums_sorted = sorted(nums, reverse=True)\n    for num in nums_sorted:\n        hq.heappush(heap, num)\n    if len(heap)<n:\n        return heap\n    for _ in range(n):\n        hq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums_heap=[]\n    for num in nums:\n        if len(nums_heap)<n:\n            hq.heappush(nums_heap,num)\n        else:\n            hq.heappushpop(nums_heap,num)\n    return sorted(nums_heap,reverse=True)\n    #return sorted(nums_heap,reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==0:\n        return []\n    elif n>len(nums):\n        return []\n    hq.heapify(nums)\n    result=[]\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==0:\n        return []\n    elif n>len(nums):\n        return []\n    hq.heapify(nums)\n    result=[]\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<n:\n        return \"Invalid input\"\n    else:\n        hq.heapify(nums)\n        result = []\n        for i in range(n):\n            result.append(hq.heappop(nums))\n        return result\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if len(nums)<n:\n        return \"Invalid input\"\n    else:\n        hq.heapify(nums)\n        result = []\n        for i in range(n):\n            result.append(hq.heappop(nums))\n        return result\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    minheap = []\n    for x in range(n):\n        hq.heappush(minheap, nums[x])\n    for x in range(n, len(nums)):\n        if nums[x] > minheap[0]:\n            hq.heappop(minheap)\n            hq.heappush(minheap, nums[x])\n    return minheap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n>len(nums):\n        return -1\n    nums_queue=[]\n    for i in nums:\n        hq.heappush(nums_queue, i)\n    for i in range(n):\n        print(hq.heappop(nums_queue))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    \n    hq.heapify(nums)\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    # print(hq.heappop(nums))\n    \n    print(nums)\n    res = [hq.heappop(nums) for i in range(n)]\n    print(res)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums), end=\" \")\n    print(\"\\n\")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # If n is a power of 2, then log2(n) is a power of 2.\n    return x!= 0 and ((x & (x - 1)) == 0)\n    "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x - 1) == 0: \n        return True\n    else: \n        return False\n    \n    \ndef is_Power_Of_Two_2 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x and (not(x & (x - 1)))\n    \n    \ndef is_Power_Of_Two_3 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # all() checks if all the elements in the list are true or not.\n    return all(i and (not(i & (i - 1))) for i in x)\n    \n    \ndef is_Power_Of_Two_4 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if a number is power of 2 then logarithm of the number is not equal to 0.\n    return all(i and (i & (i - 1)) for i in x)\n    \n    \ndef is_Power_Of_Two_5 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # if a number is power of 2 then logarithm of the number is not equal to 0.\n    return all(x) and (not all(x))\n    \n    \ndef is_Power_Of_Two_6 (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return not x or (x & (x - 1))\n    \n    \ndef main(): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = [1,2,3,4,5,6]\n    print (x)\n    print (is_Power_Of_Two(x))\n    \n    print (x)\n    print (is_Power_Of_Two_2(x))\n    \n    print (x)\n    print (is_Power_Of_Two_3(x))\n    \n    print (x)\n    print (is_Power_Of_Two_4(x))\n    \n    print (x)\n    print (is_Power_Of_Two_5(x))\n    \n    print (x)\n    print (is_Power_Of_Two_6(x))\n    \n    \nif __name__ == \"__main__\": \n    main()\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return x & (x-1) == 0\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0): \n        x = x & (x - 1) \n        if x == 0: \n            return False\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1) == 0): \n        return True\n    else: \n        return False\n    \ndef power_of_two_in_binary(x):\n    '''\n    Write a python function to check whether the two numbers are having power of two or not.\n    '''\n    if (x!= 0):\n        if (is_Power_Of_Two(x)):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n    \ndef main():\n    '''\n    This is the main function where the user inputs the number which has to be checked whether it is power of two or not.\n    '''\n    print(\"Enter the number: \")\n    x = int(input())\n    if (power_of_two_in_binary(x) == \"YES\"):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = x\n    while n > 2:\n        n = n >> 1\n        if x==n:\n            return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if ((x & (x - 1)) == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the integer number to binary representation and get the MSB\n    # i.e. the most significant bit\n    msb = x & -(x)\n    # Check whether the bit is 1 or not\n    if msb == x:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    else: \n        while x % 2 == 0: \n            x = x / 2\n        if x == 1: \n            return True\n        else: \n            return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]{4,}\\b')\n    return pattern.findall(text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}',text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w+', text)\n    return [word for word in words if len(word) >= 4]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    print('\\nfind_char_long(text)')\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = re.findall(r'\\w{4,}',text)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\w{4,}')\n    return re.findall(pattern, text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #return [word for word in text.split() if len(word) >= 4]\n    return re.findall(r'\\b[a-zA-Z]{4,}\\b', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b\\w{4,}\\b', text)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i ** 2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # O(n) time complexity\n    # O(n) space complexity\n    # squares = []\n    # for num in nums:\n    #     squares.append(num**2)\n    # return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # nums = [1, 2, 3]\n    # square_nums(nums) # 1, 4, 9\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**2)\n    return result\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for i in range(0,len(str)):\n        if str[:i] + str[i+1:] == str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = ''.join(str)\n    ans = 0\n    for i in range(1,len(str)): \n        if str[i:]+str[:i]==str: \n            ans += 1\n    return ans\n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len([1 for i in range(1,len(str)) if str[i:]+str[:i]==str])\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n=len(str)\n    for i in range(n):\n        if str[i:]+str[:i]==str:\n            return i\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return (len(str) - len(set(str))) % len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 0:\n        return \"Can't find Rotations\"\n    if len(str) == 1:\n        return 0\n    if len(str) == 2:\n        if str[0] == str[1]:\n            return 0\n        else:\n            return 1\n    rotations = 0\n    i = 0\n    while i < len(str):\n        if str[i] == str[i + 1]:\n            break\n        i += 1\n        if i == len(str)-1:\n            return -1\n    str1 = str[i:] + str[:i]\n    i = 0\n    while i < len(str1):\n        if str1[i] == str1[i + 1]:\n            break\n        i += 1\n        if i == len(str1) - 1:\n            return rotations + 1\n    str2 = str1[i:] + str1[:i]\n    i = 0\n    while i < len(str2):\n        if str2[i] == str2[i + 1]:\n            break\n        i += 1\n        if i == len(str2) - 1:\n            return rotations + 2\n    str3 = str2[i:] + str2[:i]\n    i = 0\n    while i < len(str3):\n        if str3[i] == str3[i + 1]:\n            break\n        i += 1\n        if i == len(str3) - 1:\n            return rotations + 3\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # str = \"GEEKSFORGEEKS\"\n    n = len(str) \n    org_str = str \n    org_str = org_str + org_str \n    res = 0\n    j = 0\n    for i in range(n): \n        if (str[i]!= org_str[j + n]): \n            j += 1\n        if (i < n): \n            res += 1\n    return res \n    \n    \ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    org_str = str \n    org_str = org_str + org_str \n    res = 0\n    j = 0\n    for i in range(n): \n        if (str[i]!= org_str[j + n]): \n            j += 1\n        if (i < n): \n            res += 1\n    return res \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    i = 0\n    while(i < len(str)): \n        if str[i]!= str[i+1]: \n            rotations += 1\n            i += 1\n        i += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = ''.join(sorted(str))\n    n = len(str)\n    count = 0\n    for i in range(n):\n        if ''.join(sorted(str[i:])) == ''.join(sorted(str[:n-i])):\n            return count\n        count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        if str[i:] + str[:i] == str: \n            count += 1\n    return count \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def lcs(str1, str2): \n        n1 = len(str1) \n        n2 = len(str2)\n      \n        dp = [[0 for j in range(n2+1)] for i in range(n1+1)] \n      \n        for i in range(n1+1): \n            for j in range(n2+1): \n                if i == 0 or j == 0: \n                    dp[i][j] = 0\n                elif str1[i-1] == str2[j-1]: \n                    dp[i][j] = dp[i-1][j-1] + 1\n                else: \n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) \n      \n        i = n1\n        j = n2\n      \n        lcs_str = ''\n        while i > 0 and j > 0: \n            if str1[i-1] == str2[j-1]: \n                lcs_str += str1[i-1] \n                i-=1\n                j-=1\n      \n            else: \n                if dp[i-1][j] > dp[i][j-1]: \n                    i-=1\n                else: \n                    j-=1\n      \n        return lcs_str[::-1] \n      \n    str1 = \"ABCDGH\"\n    str2 = \"AEDFHR\"\n    lcs_str = lcs(str1, str2) \n    print(lcs_str) \n      \n    n1 = len(str1) \n    n2 = len(str2) \n    m = lcs_str\n    ans = n1 + n2 - len(m) \n    print(ans)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(0, len(s) - 1):\n        if s[i] == ch:\n            for j in range(i+1, len(s) - 1):\n                if s[j] == ch:\n                    return s[:i] + s[j+1:]\n    return s \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'',1)\n        s = s.replace(ch,'',1)\n        return s\n    else:\n        return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[:s.find(ch)]\n    s2=s[s.rfind(ch)+1:]\n    return s1+s2\ndef remove_Occ_Two(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1=s[0:s.find(ch)]\n    s2=s[s.rfind(ch)+1:]\n    return s2+s1\ns=\"geeksforgeeks\"\nch=\"e\"\nprint(remove_Occ_Two(s,ch))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)] + s[s.find(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,\"\",1).replace(ch,\"\",-1)\n    \n    \n    \ndef replace(s,old,new):\n    '''\n    Write a python function to replace all occurrence of a given character in the string with another given character.\n    '''\n    return s.replace(old,new)\n    \n    \n    \ndef string_compression(s):\n    '''\n    Write a python function to convert a string to its compressed form. For example, the string 'aabcccccaaa' would become 'a2b1c5a3'. If the compressed string becomes the same as the original string, return the original string.\n    '''\n    length = len(s)\n    counter = 0\n    curr = 0\n    result = \"\"\n    for i in range(length):\n        if s[i] == s[curr]:\n            counter += 1\n        else:\n            result += s[curr] + str(counter)\n            counter = 1\n            curr = i\n    result += s[curr] + str(counter)\n    if len(result) < length:\n        return s\n    else:\n        return result\n    \n    \n    \ndef scramble(s1, s2):\n    '''\n    Write a python function to check if two given strings are \"scrambled\" versions of each other. Two strings are scrambled if you can remove exactly one character from one of the strings, and the remaining characters will form the other string.\n    '''\n    for i in range(len(s1)):\n        if s1[i] not in s2:\n            if s2 in s1:\n                return True\n            else:\n                return False\n    return False\n    \n    \n    \ndef is_unique(s):\n    '''\n    Write a python function to check if a given string has all unique characters. For example, the string 'abcde' has all unique characters and should return True. The string 'aabde' contains duplicate characters and should return false.\n    '''\n    char_set = set()\n    for i in range(len(s)):\n        if s[i] in char_set:\n            return False\n        else:\n            char_set.add(s[i])\n    return True\n    \n    \n    \ndef find_palindrome(s):\n    '''\n    Write a python function to check if a given string is a palindrome. A palindrome is a string which reads the same backward as forward. For example, \"radar\" is a palindrome.\n    '''\n    for i in range(len(s)):\n        if s[i] == s[-1*i -1]:\n            return True\n        else:\n            return False\n    \n    \n    \ndef is_rotation(s1,s2):\n    '''\n    Write a python function to check if s2 is a rotation of s1 using only one call to isSubstring.\n    '''\n    return s1 in s2 + s2\n    \n    \n    \ndef sherlockAndAnagrams(s):\n    '''\n    Write a python function to return the number of \"anagrammatic pairs\" (strings that can be formed from a given string by swapping two letters).\n    '''\n    counter = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)):\n            sorted_s = \"\".join(sorted(s[i:j+1]))\n            if sorted_s in anagrams_dict:\n                anagrams_dict[sorted_s] += 1\n            else:\n                anagrams_dict[sorted_s] = 1\n    for item in anagrams_dict.values():\n        if item > 1:\n            counter += (item * (item -1))/2\n    return int(counter)\n    \n    \n    \ndef top_K_freq_elements(nums, k):\n    '''\n    Write a python function to return the k most frequent elements and their counts from the given list.\n    '''\n    anagrams_dict.clear()\n    return sorted(nums, key=nums.count, reverse=True)[:k]\n    \n    \n    \ndef find_missing_numbers(nums):\n    '''\n    Write a python function to return all missing numbers in a given list of consecutive integers.\n    '''\n    for i in range(1,len(nums)):\n        nums[i] = nums[i] - nums[i-1] - 1\n    return [num+1 for num in nums]\n    \n    \n    \ndef convert_to_absolute(number):\n    '''\n    Write a python function to convert the number to its absolute value without using the built-in abs function.\n    '''\n    if number < 0:\n        number = number * -1\n    return number\n    \n    \n    \ndef number_of_islands(matrix):\n    '''\n    Write a python function to count the number of islands in a given boolean 2D matrix. A group of connected 1s forms an island.\n    '''\n    if not matrix:\n        return 0\n    rows = len(matrix)\n    cols = len(matrix[0])\n    visited = [[False] * cols for _ in range(rows)]\n    def dfs(row, col):\n        if row < 0 or row >= rows or col < 0 or col >= cols or matrix[row][col] == 0 or visited[row][col]:\n            return\n        visited[row][col] = True\n        dfs(row+1,col)\n        dfs(row-1,col)\n        dfs(row,col+1)\n        dfs(row,col-1)\n    count = 0\n    for row in range(rows):\n        for col in range(cols):\n            if matrix[row][col] == 1 and not visited[row][col]:\n                dfs(row, col)\n                count += 1\n    return count\n    \n    \n    \ndef matrix_multiplication(matrix1, matrix2):\n    '''\n    Write a python function to multiply the two given boolean 2D matrices.\n    '''\n    if len(matrix1[0])!= len(matrix2):\n        return None\n    rows = len(matrix1)\n    cols = len(matrix2[0])\n    result = [[0] * cols for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(len(matrix1[0])):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\n    \n    \n    \ndef rotate_matrix(matrix):\n    '''\n    Write a python function to rotate a given boolean 2D matrix anticlockwise by 90 degrees.\n    '''\n    if not matrix:\n        return None\n    rows = len(matrix)\n    cols = len(matrix[0])\n    result = [[0] * rows for _ in range(cols)]\n    for i in range(rows):\n        for j in range(cols):\n            result[j][rows-i-1] = matrix[i][j]\n    return result\n    \n    \n    \ndef find_max_sum_subarray(nums):\n    '''\n    Write a python function to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers.\n    '''\n    max_sum = 0\n    start = 0\n    end = 0\n    length = len(nums)\n    for i in range(length):\n        curr_sum = 0\n        for j in range(i,length):\n            curr_sum += nums[j]\n            if curr_sum > max_sum:\n                start = i\n                end = j\n                max_sum = curr_sum\n    return max_sum, start, end\n    \n    \n    \ndef min_cost_path(matrix):\n    '''\n    Write a python function to find the minimum cost path to reach from a source to a destination in a given boolean 2D matrix.\n    '''\n    if not matrix:\n        return None\n    rows = len(matrix)\n    cols = len(matrix[0])\n    curr_min = 0\n    dp = [[0]*cols for _ in range(rows)]\n    dp[rows-1][cols-1] = matrix[rows"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence of ch in s\n    s = s.replace(ch, '', 1)\n    # remove last occurrence of ch in s\n    s = s.replace(ch, '', -1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1:\n        s=s.replace(ch,\"\",1)\n        s=s.replace(ch,\"\",1)\n    return s\n    \ndef get_vowel_string(s):\n    '''\n    Write a python function to remove all vowels from the string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for ch in s:\n        if ch.lower() in vowels:\n            s = s.replace(ch, \"\")\n    return s\n    \ndef get_consonant_string(s):\n    '''\n    Write a python function to remove all consonants from the string.\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for ch in s:\n        if ch.lower() not in vowels:\n            s = s.replace(ch, \"\")\n    return s\n    \ndef remove_all(s,ch):\n    '''\n    Write a python function to remove all the characters from the string.\n    '''\n    for ch in s:\n        s = s.replace(ch,\"\",1)\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=lambda row: sum(row))\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_list = [sum(row) for row in M]\n    sum_list.sort()\n    return M[sum_list.index(sum(sum_list))]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get matrix's number of rows and columns\n    rows = len(M)\n    columns = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sum_mat = []\n    for row in M:\n        row_sum = sum(row)\n        sum_mat.append(row_sum)\n    ind_array = np.argsort(np.array(sum_mat))\n    return np.array(M)[ind_array]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i], key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    lst = []\n    for i in range(len(M)):\n        lst.append(sum(M[i]))\n    \n    for i in range(len(M)-1):\n        for j in range(len(M)-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    matrix = copy.deepcopy(M)\n    row_sum_list = []\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key=sum)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/2) * l * b * h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/2) * l * b * h\n    print(\"The volume of a triangular prism with length {}, width {} and height {} is {}\".format(l,b,h,volume))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*(l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print('The volume of the triangular prism is :'+ str(l*b*h/3))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    print(\"Volume of the triangular prism is: \",v)\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (1/2) * l * b * h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text[0] == \"_\":\n        return False\n    return True if re.findall('_[a-z]*_', text.lower())!= [] else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+',text.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]*', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('_[a-z]+_', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Test input\n    # print(text_lowercase_underscore('a_b_c'))\n    # print(text_lowercase_underscore('a_b_c_'))\n    # print(text_lowercase_underscore('abc_d'))\n    # print(text_lowercase_underscore('abc'))\n    # print(text_lowercase_underscore('a_b_c_d'))\n    # print(text_lowercase_underscore('a_b_c_d_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_'))\n    # print(text_lowercase_underscore('a_b_c_d_e_f_g_h_i"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return (re.search(r'_+[a-z]', text)) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(bool(re.search(r'[a-z]_[a-z]', text)))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if text.count('_') == 0:\n        return False\n    elif text.count('_') == 1:\n        return text.startswith('_') and text.endswith('_')\n    elif text.count('_') == 2:\n        return text[0] == '_' and text[-1] == '_' and text.count('_') == 2 and len(text) > 2\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(\"^[a-z][_a-z0-9]*$\")\n    return pattern.match(text)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = a * 4\n    return perimeter\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    arr = list(string)\n    for i in range(0,len(string)):\n        if string[i] in arr[0:i]:\n            arr[i] = ''\n    return arr\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_chars = list(string) \n    return [ch for ch in list_chars if ch not in 'aeiou'] \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return list(string)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = [] \n    for i in string: \n        list1.append(i) \n    return list1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = list(string)\n    for char in string_list:\n        if char in string_list:\n            string_list.remove(char)\n    return string_list\ndef first_string_char_removed(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_string = string[:]\n    for char in string:\n        if char in result_string:\n            result_string = result_string.replace(char, \"\")\n    return result_string\ndef remove_characters_from_string(string_one, string_two):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result_string = \"\"\n    for char in string_one:\n        if char not in string_two:\n            result_string += char\n    return result_string\ndef string_reverser(string):\n    '''\n    Write a function to reverse a string\n    '''\n    return string[::-1]\ndef longest_substring(string):\n    '''\n    Write a function that computes the longest substring in a string.\n    '''\n    return string[0]\ndef longest_substring_without_repeating_characters(string):\n    '''\n    Write a function that computes the longest substring without repeating characters\n    '''\n    return string[0]\ndef is_palindrome(string):\n    '''\n    Write a function that returns True if a string is a palindrome\n    '''\n    return string == string[::-1]\ndef is_palindrome_without_case_sensitivity(string):\n    '''\n    Write a function that returns True if a string is a palindrome\n    '''\n    return string.lower() == string.lower()[::-1]\ndef is_palindrome_without_whitespaces(string):\n    '''\n    Write a function that returns True if a string is a palindrome\n    '''\n    return string.replace(\" \", \"\") == string.replace(\" \", \"\")[::-1]\ndef is_palindrome_without_whitespaces_only_numbers(string):\n    '''\n    Write a function that returns True if a string is a palindrome\n    '''\n    return string.replace(\" \", \"\").isnumeric() == string.replace(\" \", \"\").isnumeric()[::-1]\ndef is_palindrome_without_whitespaces_only_letters(string):\n    '''\n    Write a function that returns True if a string is a palindrome\n    '''\n    return string.replace(\" \", \"\").isalpha() == string.replace(\" \", \"\").isalpha()[::-1]\ndef are_anagrams(string_one, string_two):\n    '''\n    Write a function that returns True if a string is an anagram of another string\n    '''\n    return sorted(string_one) == sorted(string_two)\ndef are_anagrams_without_case_sensitivity(string_one, string_two):\n    '''\n    Write a function that returns True if a string is an anagram of another string\n    '''\n    return sorted(string_one.lower()) == sorted(string_two.lower())\ndef is_rotation(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return len(string_one) == len(string_two) and string_two in string_one + string_one\ndef are_rotations_without_case_sensitivity(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return len(string_one) == len(string_two) and string_two.lower() in string_one.lower() + string_one.lower()\ndef are_rotations(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return string_one == string_two + string_two\ndef are_rotations_without_case_sensitivity(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return string_one.lower() == string_two.lower() + string_two.lower()\ndef string_rotation(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return string_two in string_one + string_one\ndef string_rotation_without_case_sensitivity(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return string_two.lower() in string_one.lower() + string_one.lower()\ndef string_rotation_without_case_sensitivity_using_slicing(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    return string_two in string_one + string_one[::-1]\ndef string_rotation_without_case_sensitivity_using_slicing_method_two(string_one, string_two):\n    '''\n    Write a function that returns True if a string is a rotation of another string\n    '''\n    if len(string_one)!= len(string_two):\n        return False\n    string_one_without_whitespace = string_one.replace(\" \", \"\")\n    string_two_without_whitespace = string_two.replace(\" \", \"\")\n    return string_two_without_whitespace in string_one_without_whitespace + string_one_without_whitespace[::-1]\ndef number_of_substrings_with_given_length(string, length):\n    '''\n    Write a function that returns the number of substrings of a string of given length\n    '''\n    return len([string[i:i+length] for i in range(len(string) - length + 1)])\ndef number_of_substrings_with_given_length_without_case_sensitivity(string, length):\n    '''\n    Write a function that returns the number of substrings of a string of given length\n    '''\n    return len([string.lower()[i:i+length] for i in range(len(string.lower()) - length + 1)])\ndef is_subsequence(string, sub_string):\n    '''\n    Write a function that returns True if a string is a subsequence of another string\n    '''\n    return string.lower().find(sub_string.lower())!= -1\ndef string_to_number(string, base):\n    '''\n    Write a function that converts a string to a number in a specific base\n    '''\n    return int(string, base)\ndef number_to_string(number, base):\n    '''\n    Write a function that converts a number to a string in a specific base\n    '''\n    return str(number)\ndef string_to_base_n(string, base):\n    '''\n    Write a function that converts a string to a number in a specific base\n    '''\n    return int(string, base)\ndef base_n_to_string(number, base):\n    '''\n    Write a function that converts a number to a string in a specific base\n    '''\n    return str(number)\ndef string_to_number_base_n(string, base):\n    '''\n    Write a function that converts a string to a number in a specific base\n    '''\n    return int(string, base)\ndef number_to_string_in_base_n(number, base):\n    '''\n    Write a function that converts a number to a string in a specific base\n    '''\n    return str(number)\ndef string_to_number_with_given_base(string, base):\n    '''\n    Write a function that converts a string to a number in a specific base\n    '''\n    return int(string, base)\ndef number_to_string_with_given_base(number, base):\n    '''\n    Write a function that converts a number to a string in a specific base\n    '''\n    return st"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return \"String cannot be empty\"\n    \n    remove_list = []\n    for i in string:\n        if i not in remove_list:\n            remove_list.append(i)\n    \n    for i in remove_list:\n        string = string.replace(i, \"\")\n    return string\n    \nprint(str_to_list(\"abdfgh\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string) \n    l2 = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for i in l2: \n        if i in l1: \n            l1.remove(i)\n    return ''.join(l1) \nstring1 = \"I love Python\"\nstring2 = \"I love Java\"\nprint(str_to_list(string1) +'' + str_to_list(string2)) "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for i in string:\n        if i not in string2:\n            new_list.append(i)\n    return ''.join(new_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0 or len(string) == 1:\n        return string\n    string = list(string)\n    new_string = []\n    string_list = list(string)\n    for i in range(len(string_list)):\n        if string_list[i] not in new_string:\n            new_string.append(string_list[i])\n        if len(new_string) == len(string):\n            return ''.join(new_string)\n    return ''.join(new_string)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    print('\\n')\n    print(\"### Task: Remove characters from the first string which are present in the second string ###\")\n    print('\\n')\n    lst = []\n    for i in string:\n        lst.append(i)\n    for i in string:\n        if i in lst:\n            lst.remove(i)\n    print(''.join(lst))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Time: O(n), space: O(1)\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    print(arraynums)\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums)) < len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = []\n    dupes = []\n    for i in arraynums:\n        if i not in seen:\n            seen.append(i)\n        else:\n            dupes.append(i)\n    return dupes\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    res = False\n    for i in arraynums:\n        if arraynums.count(i) > 1:\n            res = True\n    return res\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    my_dict = {}\n    for i in arraynums:\n        if i not in my_dict:\n            my_dict[i] = 1\n        else:\n            return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) > len(set(arraynums)):\n        return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums)!= len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    for i in str(x):\n        sum += int(i)\n    return sum == 5\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 5 == 0) and (x % 7 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x < 100:\n        return False\n    else:\n        x = str(x)\n        x = x.split()\n        x = \"\".join(x)\n        return x == x[::-1]\n        \n    \nprint(is_woodall(112))\nprint(is_woodall(123))\nprint(is_woodall(1024))\nprint(is_woodall(1331))\nprint(is_woodall(1331))\nprint(is_woodall(10))\nprint(is_woodall(3))\nprint(is_woodall(4))\nprint(is_woodall(100))\nprint(is_woodall(101))\nprint(is_woodall(104))\nprint(is_woodall(1100))\nprint(is_woodall(1111))\nprint(is_woodall(1234))\nprint(is_woodall(1235))\nprint(is_woodall(1236))\nprint(is_woodall(12345))\nprint(is_woodall(123456))\nprint(is_woodall(1234567))\nprint(is_woodall(12345678))\nprint(is_woodall(123456789))\nprint(is_woodall(1234567890))\nprint(is_woodall(1234567891))\nprint(is_woodall(12345678911))\nprint(is_woodall(12345678912))\nprint(is_woodall(12345678913))\nprint(is_woodall(12345678914))\nprint(is_woodall(123456789123))\nprint(is_woodall(1234567891234))\nprint(is_woodall(12345678912345))\nprint(is_woodall(123456789123456))\nprint(is_woodall(1234567891234567))\nprint(is_woodall(12345678912345678))\nprint(is_woodall(123456789123456789))\nprint(is_woodall(1234567891234567891))\nprint(is_woodall(12345678912345678912))\nprint(is_woodall(123456789123456789123))\nprint(is_woodall(1234567891234567891234))\nprint(is_woodall(12345678912345678912345))\nprint(is_woodall(123456789123456789123456))\nprint(is_woodall(1234567891234567891234567))\nprint(is_woodall(12345678912345678912345678))\nprint(is_woodall(123456789123456789123456789))\nprint(is_woodall(1234567891234567891234567891))\nprint(is_woodall(12345678912345678912345678912))\nprint(is_woodall(123456789123456789123456789123))\nprint(is_woodall(1234567891234567891234567891234))\nprint(is_woodall(12345678912345678912345678912345))\nprint(is_woodall(123456789123456789123456789123456))\nprint(is_woodall(1234567891234567891234567891234567))\nprint(is_woodall(12345678912345678912345678912345678))\nprint(is_woodall(123456789123456789123456789123456789))\nprint(is_woodall(1234567891234567891234567891234567891))\nprint(is_woodall(12345678912345678912345678912345678912))\nprint(is_woodall(123456789123456789123456789123456789123))\nprint(is_woodall(1234567891234567891234567891234567891234))\nprint(is_woodall(12345678912345678912345678912345678912345))\nprint(is_woodall(123456789123456789123456789123456789123456))\nprint(is_woodall(1234567891234567891234567891234567891234567))\nprint(is_woodall(12345678912345678912345678912345678912345678))\nprint(is_woodall(123456789123456789123456789123456789123456789))\nprint(is_woodall(1234567891234567891234567891234567891234567891))\nprint(is_woodall(12345678912345678912345678912345678912345678912))\nprint(is_woodall(123456789123456789123456789123456789123456789123))\nprint(is_woodall(1234567891234567891234567891234567891234567891234))\nprint(is_woodall(12345678912345678912345678912345678912345678912345))\nprint(is_woodall(123456789123456789123456789123456789123456789123456))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678))\nprint(is_woodall(123456789123456789123456789123456789123456789123456789))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567891))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678912))\nprint(is_woodall(123456789123456789123456789123456789123456789123456789123))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567891234))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678912345))\nprint(is_woodall(123456789123456789123456789123456789123456789123456789123456))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567891234567))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678912345678))\nprint(is_woodall(123456789123456789123456789123456789123456789123456789123456789))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567891234567891))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678912345678912))\nprint(is_woodall(123456789123456789123456789123456789123456789123456789123456789123))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567891234567891234))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678912345678912345))\nprint(is_woodall(123456789123456789123456789123456789123456789123456789123456789123456))\nprint(is_woodall(1234567891234567891234567891234567891234567891234567891234567891234567))\nprint(is_woodall(12345678912345678912345678912345678912345678912345678912345678912345678))\nprint(is_woodall(12345678"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5==0 or x%7==0: \n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 4 == 0) or (x % 7 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%3==0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    str_x = str(x)\n    if len(str_x) == 2:\n        if str_x[0] == str_x[1]:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in str(x):\n        if(i == '5'):\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in woodall_numbers\n    \ndef is_woodall_2(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in woodall_numbers\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    print(\"\\n\")\n    print(\"***Reverse:\",num)\n    num1 = 0\n    while num>0:\n        num1 = (num1*10) + (num%10)\n        num = num//10\n    num2 = 0\n    while num1>0:\n        num2 = (num2*10) + (num1%10)\n        num1 = num1//10\n    print(\"\\n\")\n    print(\"***Result:\",num2)\n    print(\"\\n\")\n    if num2 == (num2*2):\n        print(\"True\")\n    else:\n        print(\"False\")\nrev(123)\nrev(719)\nrev(12345)\nrev(99)\nrev(19)\nrev(111)\nrev(213)"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num!=0):\n        rev_num = (rev_num*10) + num%10\n        num = int(num/10)\n    return num,rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while (num > 0):\n        rev = (rev * 10) + (num % 10)\n        num = num // 10\n    return(rev)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == int(str(num)[::-1])*2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if str(num) == str(num)[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + (num % 10)\n        num = num // 10\n    if (2 * rev - num) == num:\n        return True\n    else:\n        return False\n    \ndef sum_of_two_squares(number):\n    '''\n    Write a python function to check if a given number is the sum of two squares.\n    '''\n    if number < 0:\n        return False\n    else:\n        for i in range(1, number + 1):\n            if i * i > number:\n                break\n            if i * i + i == number:\n                return True\n        return False\n            \ndef sum_of_four_squares(number):\n    '''\n    Write a python function to check if a given number is the sum of four squares.\n    '''\n    if number < 0:\n        return False\n    if number == 0:\n        return True\n    if (number - 1) % 4!= 0:\n        return False\n    else:\n        i = 1\n        while i * i < number:\n            if i * i + i * i == number:\n                return True\n            i += 1\n        return False\n        \ndef check_two_digit(number):\n    '''\n    Write a python function to check if a given number has exactly two digits.\n    '''\n    return len(str(number)) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = str(num)\n    rev = rev[::-1]\n    rev = int(rev)\n    if (num - rev) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (num // 10) * 10 + (num % 10)\n    \n    \ndef is_one_less(num):\n    return num % 10 == num // 10 % 10\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num=int(num)\n    reverse=0\n    while num>0:\n        rem=num%10\n        num=num//10\n        reverse=reverse*10+rem\n    return num, reverse\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = num // 10\n    while rev_num > 0:\n        if num - rev_num == rev_num * 2:\n            return True\n        else:\n            rev_num = rev_num // 10\n    return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    arr.sort() \n    return arr[len(arr) - 1] \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = []\n    max_num = 0\n    num = 0\n    for i in range(len(arr)) :\n        num = int(arr[i])\n        result.append(num)\n        if max_num < int(arr[i]) :\n            max_num = int(arr[i])\n    result.sort(reverse=True)\n    for i in range(len(result)) :\n        if result[i]!= max_num :\n            return result[i]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if not arr :\n        raise Exception(\"Empty list given\")\n    \n    def calc(digit) :\n        if digit == 1 or digit == 2 :\n            return digit\n        if digit == 3 :\n            return 6\n        if digit == 4 :\n            return 4\n        if digit == 5 :\n            return 5\n        if digit == 6 :\n            return 9\n        if digit == 7 :\n            return 3\n        if digit == 8 :\n            return 8\n        if digit == 9 :\n            return 6\n    \n    def generate_all_possible_numbers(digits) :\n        '''\n        generate all possible numbers\n        '''\n        all_possible_numbers = []\n        \n        def generate_numbers(digit) :\n            '''\n            generate all possible numbers from one digit\n            '''\n            numbers = []\n            if digit == 0 :\n                return [0]\n            if digit == 1 :\n                numbers = [1]\n            if digit == 2 :\n                numbers = [2,3]\n            if digit == 3 :\n                numbers = [4,5,6]\n            if digit == 4 :\n                numbers = [7,8,9]\n            if digit == 5 :\n                numbers = [5]\n            if digit == 6 :\n                numbers = [6]\n            if digit == 7 :\n                numbers = [3]\n            if digit == 8 :\n                numbers = [8]\n            if digit == 9 :\n                numbers = [9]\n            all_possible_numbers.extend(numbers)\n            \n            for num in numbers :\n                generate_numbers(num)\n                \n        for digit in digits :\n            generate_numbers(digit)\n            \n        return all_possible_numbers\n    \n    def get_all_possible_numbers(arr) :\n        '''\n        Get all the possible numbers from the array of numbers\n        '''\n        if len(arr) == 0 :\n            raise Exception(\"Empty array given\")\n        \n        all_possible_numbers = []\n        for num in arr :\n            all_possible_numbers.extend(generate_all_possible_numbers(num))\n        return all_possible_numbers\n    \n    def get_valid_numbers(numbers) :\n        '''\n        Get only the valid numbers\n        '''\n        valid_numbers = []\n        for num in numbers :\n            if int(num) < 0 :\n                continue\n            valid_numbers.append(int(num))\n        return valid_numbers\n    \n    def calc_sum(numbers) :\n        '''\n        Calculate the sum of the numbers\n        '''\n        sum = 0\n        for num in numbers :\n            sum += int(num)\n        return sum\n    \n    def is_valid_number(numbers) :\n        '''\n        Check if the number is valid or not\n        '''\n        if calc_sum(numbers) > 9 :\n            return False\n        return True\n    \n    def get_max_number_from_array(arr) :\n        '''\n        Get the maximum number from the array of numbers\n        '''\n        if len(arr) == 0 :\n            raise Exception(\"Empty array given\")\n        \n        max_num = float('-inf')\n        for num in arr :\n            if is_valid_number(get_valid_numbers(num)) :\n                if calc_sum(get_valid_numbers(num)) > max_num :\n                    max_num = calc_sum(get_valid_numbers(num))\n        \n        return max_num\n        \n    return get_max_number_from_array(arr)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    digit_map = {}\n    for digit in arr :\n        if digit not in digit_map :\n            digit_map[digit] = 1\n        else :\n            digit_map[digit] = digit_map[digit] + 1\n    sorted_digit_map = sorted(digit_map,key=digit_map.get)\n    max_digit = sorted_digit_map[len(sorted_digit_map)-1]\n    return max_digit\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for i in arr : \n        if i > result :\n            result = i\n    return result\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1 : \n        return arr[0]\n    \n    largest_number = [0] * len(arr)\n    largest_number[0] = arr[0]\n    largest_number[1] = arr[1]\n    largest_number[2] = max(arr[0], arr[1])\n    \n    for i in range(2, len(arr)) : \n        largest_number[i] = max(arr[i] + largest_number[i-2], largest_number[i-1])\n    \n    return largest_number[len(arr)-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return sorted(arr, reverse=True)[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # arr=[int(x) for x in list(arr)]\n    arr = [int(x) for x in arr if x!='']\n    arr.sort()\n    arr.reverse()\n    num = 0\n    for i in range(len(arr)) :\n        num += arr[i] * 10 ** i\n    return num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    else : \n        return max(find_Max_Num(arr[0:n-1]), find_Max_Num(arr[1:n]))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = ''.join(arr)\n    return max_num\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return 1\n    else:\n        return 0\n    \ndef reverse_Int(x):\n    '''\n    Write a Python function to reverse the given integer.\n    '''\n    y = 0\n    if x>=0:\n        y = int(str(abs(x))[::-1])\n    else:\n        y = -1*int(str(abs(x))[::-1])\n    \n    return y\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y<0):\n        return True\n    elif(x>0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x<0 and y>0) or (x>0 and y<0):\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n    #start writing your code here\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\n        \ndef add_subtract(x,y):\n    '''\n    Write a Python function that takes two numbers as input and return their sum and difference.\n    '''\n    sum = x+y\n    subtract = x-y\n    return sum, subtract\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y < 0 or x < 0 and y >=0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0 or x>0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y < 0\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n - 1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<=0: return 0\n    return n*8 + (n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8*n+1)**2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (n+1) * n // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (1 + (1 + 8 * n) ** 0.5) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_octagonal(n):\n        def f(n):\n            if n % 2 == 0:\n                return True\n            else:\n                return False\n        if n <= 0:\n            return True\n        elif f(n):\n            return True\n        elif f(n-1):\n            return True\n        else:\n            return False\n    if is_octagonal(n):\n        return n*8 + 1\n    else:\n        return n*8\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    return octagonal_numbers[n-1] if n <= 20 else False\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            temp = ''\n            for k in range(i,j):\n                temp += s[k]\n            if (int(temp) == len(temp)):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substrings[s[i:j+1]] += 1\n    return substrings\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    hash_map = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            sub = s[i:j+1]\n            if len(sub) >= 1:\n                if sum(list(map(int,sub))) == len(sub):\n                    count += 1\n                    hash_map[sub] += 1\n    print(count)\n    print(hash_map)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    substrings = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            substrings[s[i:j+1]] += 1\n    return len(substrings.keys())\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def helper(s,i,j):\n        if i>j:\n            return 0\n        if i==j:\n            return 1\n        if s[i]=='0':\n            return 0\n        if j-i+1==sum([int(s[i:j+1])]):\n            return 1+helper(s,i+1,j)\n        return max(helper(s,i+1,j),helper(s,i,j-1))\n    return helper(s,0,len(s)-1)\n    \ndef count_Substrings_2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def countSubstrings(s): \n        n = len(s) \n        ans = 0\n        dp = [[0 for i in range(n)] for j in range(n)] \n        for i in range(n):\n            dp[i][i] = 1\n            ans += dp[i][i]\n        for i in range(n-1, -1, -1): \n            for j in range(i+1, n): \n                if j-i < 2 and s[i] == s[j] and (s[i] == '0' or s[j] == '9'): \n                    dp[i][j] = 1\n                    ans += 1\n                else: \n                    dp[i][j] = dp[i+1][j-1] + (s[i] == s[j]) \n                    ans += dp[i][j] \n        return ans \n    return countSubstrings(s)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    hash_map = defaultdict(int)\n    for i in range(n):\n        hash_map[i] = 1\n    for i in range(n):\n        hash_map[i] = 1\n        for j in range(i):\n            hash_map[i] += hash_map[j]\n    return hash_map[n - 1]\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans, n = 0, len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            ans += len(set(s[i:j])) == 9\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    l = len(s)\n    for i in range(l):\n        for j in range(i, l):\n            sub = s[i:j + 1]\n            sum_of_digits = sum([int(k) for k in sub])\n            if sum_of_digits == len(sub):\n                ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    lst = [0]*len(s)\n    cnt = 0\n    for i in range(len(s)):\n        lst[i] = i\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(map(int, s[i:j+1])) == len(s[i:j+1]):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def count_substrings(s):\n        n = len(s)\n        if n == 0:\n            return 0\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs = [2, 7, 4, 1, 9, 6, 5]\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_number = xs[0]\n    for num in xs:\n        if num < smallest_number:\n            smallest_number = num\n    return smallest_number\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for x in xs:\n        if x < min_num:\n            min_num = x\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs = [2, 7, 9, 5, 3, 1]\n    min_number = min(xs)\n    return min_number\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = [1,2,3,4]\n    test_list.sort()\n    #print(test_list)\n    list_len = len(test_list)\n    max_diff = test_list[list_len-1] - test_list[0]\n    for i in range(list_len):\n        if i < list_len-1:\n            diff = test_list[i+1] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] + test_list[j] > max:\n                max = test_list[i] + test_list[j]\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max:\n                max = abs(test_list[i] - test_list[j])\n    return max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = list(test_list)\n    # print(test_list)\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            # print(test_list[i],test_list[j])\n            if abs(test_list[i] - test_list[j]) > abs(max_difference(test_list)):\n                max_difference = abs(test_list[i] - test_list[j])\n    return max_difference\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    def get_diff(num1, num2):\n        return abs(num1 - num2)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = sorted(test_list)\n    return test_list[-1] - test_list[0]\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code goes here...\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # max = 0\n    # for i in range(len(test_list)-1):\n    #     for j in range(i+1, len(test_list)):\n    #         if abs(test_list[i] - test_list[j]) > max:\n    #             max = abs(test_list[i] - test_list[j])\n    # return max\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n    max_diff=0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if abs(test_list[i]-test_list[j])>max_diff:\n                max_diff=abs(test_list[i]-test_list[j])\n    return max_diff\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x : x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return(sorted(subjectmarks, key = lambda x: x[1], reverse = True))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n    \ndef delete_records(records):\n    '''\n    Write a function to delete a record from a list of records.\n    '''\n    for record in records:\n        if record[0]=='name':\n            records.remove(record)\n    return records\n    \ndef find_marks(records):\n    '''\n    Write a function to find the student with the maximum marks.\n    '''\n    max_marks = records[0][1]\n    for record in records:\n        if record[1]>max_marks:\n            max_marks = record[1]\n    for record in records:\n        if record[1]==max_marks:\n            return record[0]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #sorting tuples by using second element of the tuple\n    #subjects = list(set(subjects))\n    subjectmarks.sort(key=lambda x: x[1])\n    print(subjectmarks)\n    #return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(subjectmarks)\n    subjectmarks.sort(key=lambda x: x[1])\n    print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for num in data_list:\n        if type(num) == list:\n            sum += recursive_list_sum(num)\n        else:\n            sum += num\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case\n    if len(data_list) == 0:\n        return 0\n    \n    # Base case\n    if isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    # Inductive case\n    return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    \n    # Recursive case\n    #return sum(data_list)\n    #return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    sum = 0\n    for element in data_list:\n        if isinstance(element, list):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list) if data_list else 0\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # TODO: Write your recursive list sum function here\n    if len(data_list) == 0:\n        return 0\n    else:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if len(data_list) == 1:\n        return data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        sum_list = 0\n        for i in data_list:\n            if type(i) is list:\n                sum_list += flatten_list(i)\n            else:\n                sum_list += i\n        return sum_list\n    return flatten_list(data_list)"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if(i>0):\n            count+=1\n    return(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len(list)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Bell_number = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 642175, 31091270, \n    #159854175, 642175, 31091270, 21147, 115975, 642175, 203, 877, 4140, 52, 5, 15, 2, 1]\n    Bell_number = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 642175, 31091270]\n    m = len(Bell_number)\n    #print(Bell_number[-1])\n    result = []\n    for i in range(n):\n        count = 0\n        sum_bell = 0\n        for j in range(i+1):\n            sum_bell += Bell_number[j]\n            #print(sum_bell, Bell_number[j])\n            if sum_bell > n:\n                break\n            if sum_bell == n:\n                count += 1\n        result.append(count)\n    return result\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = {}\n    for i in range(0,n+1):\n        bells[i] = 1\n    \n    for k in range(2,n+1):\n        for j in range(1,n):\n            bells[k] += bells[k-1] * bells[j]\n            \n    return bells[n]\n    \ndef bell_number_recursion(n,k):\n    if n == 0:\n        return 1\n    if k == 1:\n        return n\n    return bell_number_recursion(n-1,k-1) + bell_number_recursion(n-1,k)\n        \ndef partition_bell_numbers(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = {}\n    for i in range(0,n+1):\n        bells[i] = 1\n    \n    for k in range(2,n+1):\n        for j in range(1,n):\n            bells[k] += bell_number_recursion(j,k) * bells[j]\n            \n    return bells[n]\n    \nif __name__ == '__main__':\n    print(bell_number(6))\n    print(partition_bell_numbers(6))\n    "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_sum = bell_sum_upper_bound(n)\n    bell_arr = get_bell_arr(bell_sum)\n    bell_arr = bell_arr[n:]\n    sum_arr = []\n    for i in range(0, len(bell_arr)):\n        sum_arr.append(bell_arr[i]*(n-i))\n    sum_arr.append(0)\n    sum_arr = np.array(sum_arr)\n    return sum_arr\n    \ndef bell_sum_upper_bound(n):\n    return (n*(n+1))/2\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    import itertools\n    bells = [1]\n    for i in range(1,n):\n        bells.append(sum(bells[i-1]*bells[k] for k in range(i+1)))\n    return(bells[n-1])\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = []\n    for i in range(1, n+1):\n        bell_set.append(bell(i))\n    return bell_set\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = []\n    for i in range(1, n+1):\n        bells.append(bell(i))\n    bells = set(bells)\n    return len(bells)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==0:\n        return 1\n    if n==1:\n        return 2\n    return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            bell_set.add(i*j)\n    return bell_set\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    else:\n        return bell_number(n-1)*(n+1)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    #Bell numbers are defined as: \n    #    B(n) = sum( (n-k+1) B(n-k) ), for k = 1,2,...,n\n    #This is equivalent to the number of partitions of n into k parts.\n    #For the 0th Bell number, there are no partitions possible, so B(0) = 1.\n    #If n < 0, then B(n) = 0.\n    #We can also use the bell_number_list class in the bell_number module to find the Bell numbers efficiently.\n    bell_numbers = [0] * (n+1)\n    bell_numbers[0] = 1\n    for i in range(1, n+1):\n        for k in range(1, i+1):\n            bell_numbers[i] += bell_numbers[i-k]\n    return bell_numbers[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #for a given array A, the array is monotonic if either of the following conditions is true:\n    # 1. it is a constant array\n    # 2. the first element is greater than the last element \n    # 3. the first element is less than the last element\n    if len(A)<2:\n        return True\n    else:\n        if A[0]<A[-1]:\n            i=0\n            while i<len(A)-1:\n                if A[i]>A[i+1]:\n                    return False\n                i+=1\n            return True\n        else:\n            i=0\n            while i<len(A)-1:\n                if A[i]<A[i+1]:\n                    return False\n                i+=1\n            return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1, len(A)): \n        if A[i] < A[i - 1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n=len(A)\n    monotonic=0\n    for i in range(1,n):\n        if A[i]==A[i-1]:\n            monotonic=0\n            break\n        elif A[i]>A[i-1]:\n            monotonic=1\n        elif A[i]<A[i-1]:\n            monotonic=0\n            break\n    return monotonic\n    \nA = [1, 2, 2, 3] \nprint(is_Monotonic(A)) \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        sublist_indx = l.index(s[0])\n        if s[0] == l[sublist_indx: sublist_indx + len(s)] or s[0] == l[sublist_indx + 1: sublist_indx + len(s) + 1]:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef is_sublist_re(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    This function is using re module.\n    '''\n    import re\n    try:\n        sublist_indx = l.index(s[0])\n        if re.match(''.join(s[0]), ''.join(l[sublist_indx: sublist_indx + len(s)])):\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    \ndef find_sublist(l, s):\n    '''\n    Write a function to find a sublist in a list.\n    '''\n    try:\n        sublist_indx = l.index(s[0])\n        return sublist_indx\n    except ValueError:\n        return False\n    \ndef find_sublist_re(l, s):\n    '''\n    Write a function to find a sublist in a list.\n    This function is using re module.\n    '''\n    import re\n    try:\n        sublist_indx = l.index(s[0])\n        return sublist_indx\n    except ValueError:\n        return False\n    \ndef print_sublists(l, s):\n    '''\n    Write a function to find the sublists in a list.\n    '''\n    try:\n        sublist_indx = l.index(s[0])\n        print(l[sublist_indx: sublist_indx + len(s)])\n    except ValueError:\n        print('')\n        \ndef print_sublists_re(l, s):\n    '''\n    Write a function to find the sublists in a list.\n    This function is using re module.\n    '''\n    import re\n    sublist_indx = 0\n    while True:\n        try:\n            match = re.match(s[0], l[sublist_indx])\n            if match:\n                print(l[sublist_indx: sublist_indx + len(s)])\n                sublist_indx += len(s)\n            else:\n                sublist_indx += 1\n        except IndexError:\n            break\n    \ndef set_sublist(l, s):\n    '''\n    Write a function to set a sublist in a list.\n    '''\n    try:\n        sublist_indx = l.index(s[0])\n        l[sublist_indx: sublist_indx + len(s)] = s\n    except ValueError:\n        return None\n        \ndef set_sublist_re(l, s):\n    '''\n    Write a function to set a sublist in a list.\n    This function is using re module.\n    '''\n    import re\n    re.sub(s[0], ''.join(s), l)\n        \ndef count_sublist(l, s):\n    '''\n    Write a function to count a sublist in a list.\n    '''\n    try:\n        sublist_indx = l.index(s[0])\n        return len(l[sublist_indx: sublist_indx + len(s)])\n    except ValueError:\n        return 0\n        \ndef count_sublist_re(l, s):\n    '''\n    Write a function to count a sublist in a list.\n    This function is using re module.\n    '''\n    import re\n    return len(re.findall(s[0], ''.join(l)))\n    \ndef main():\n    l = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    s = [1, 2, 3]\n    print(is_sublist(l, s))\n    print(is_sublist_re(l, s))\n    \n    l = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    s = [1, 2, 3]\n    print(find_sublist(l, s))\n    print(find_sublist_re(l, s))\n    \n    l = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    s = [1, 2, 3]\n    print_sublists(l, s)\n    print_sublists_re(l, s)\n    \n    l = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    s = [1, 2, 3]\n    set_sublist(l, s)\n    \n    l = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    s = [1, 2, 3]\n    set_sublist_re(l, s)\n    \n    l = [1, 3, 2, 4, 5, 6, 7, 8, 9]\n    s = [1, 2, 3]\n    print(count_sublist(l, s))\n    print(count_sublist_re(l, s))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Your code here\n    \n    if l == []:\n        return True\n    elif len(l) < len(s):\n        return False\n    else:\n        for i in range(len(s)):\n            if l[i]!= s[i]:\n                return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # if s == []:\n    #     return True\n    # if len(s) > len(l):\n    #     return False\n    # s_sublist = s[0]\n    # for x in range(len(s)):\n    #     s_sublist = s_sublist + s[x]\n    #     if s_sublist == l:\n    #         return True\n    #     if x == len(s) - 1:\n    #         return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(s == l[i:len(s)+i] for i in range(len(l)-len(s)+1))\n    \nprint(is_sublist([1,2,3,4,5], [3,4,5]))\nprint(is_sublist([1,2,3,4,5], [3,4,4]))\nprint(is_sublist([1,2,3,4,5], [3,4]))\nprint(is_sublist([1,2,3,4,5], [5,4,3,2,1]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,4]))\nprint(is_sublist([1,2,3,4,5], [1,4]))\nprint(is_sublist([1,2,3,4,5], [1,5,2,4,3]))\nprint(is_sublist([1,2,3,4,5], [1,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5,1]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3,4,5], [1,2,3,4]))\nprint(is_sublist([1,2,3,4,5], [2,3,4,5]))\nprint(is_sublist([1,2,3,4,5], [2,3,5,4]))\nprint(is_sublist([1,2,3,4,5], [2,4]))\nprint(is_sublist([1,2,3"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                \n                if n == len(s):\n                    sub_set = True\n    \n    return sub_set\n    \ndef rearrange_digits(input_list):\n    '''\n    Given an array of integers input_list, write a function that returns a new \n    array such that the first element is the number of positive integers in input_list, \n    and the second element is the number of negative integers in input_list. \n    If the input_list does not contain any positive or negative integers, the function \n    should return [0, 0].\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l or not s:\n        return False\n    if len(l) < len(s):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if len(l[i])!= len(s):\n            continue\n        else:\n            flag = True\n            for j in range(len(l[i])):\n                if l[i][j]!= s[j]:\n                    flag = False\n                    break\n            if flag:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i + 1, len(Input)):\n            if len(Input[i]) == len(Input[j]):\n                return True\n            elif len(Input[i])!= len(Input[j]):\n                return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Input = [(1, 2, 3), (2, 1, 2), (1, 1, 1), (1, 2, 2), (1, 2, 3)]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if(len(Input[i])!= len(Input[j])):\n                Output.append(False)\n                break\n            else:\n                Output.append(True)\n                break\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if not Input:\n        return True\n    if len(Input[0])!=len(Input[1]):\n        return False\n    else:\n        for each in Input:\n            if len(each)==len(Input[0]):\n                pass\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    x = 0\n    for i in Input:\n        if len(i)==len(Input[0]):\n            x+=1\n    return x\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    li = []\n    for i in Input:\n        if len(i) == len(Input[0]):\n            li.append(i)\n    return len(li)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            Output.append(False)\n        else:\n            Output.append(True)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Solution 1:\n    return (len(Input)==len(set(len(i) for i in Input)))\n    \n    # Solution 2:\n    def check(t):\n        for i in t:\n            if len(i) == len(t[0]):\n                return True\n            else:\n                return False\n    if check(Input) == True:\n        return True\n    else:\n        return False\n        \n    # Solution 3:\n    def check(Input):\n        if len(Input) == len(set(len(i) for i in Input)):\n            return True\n        else:\n            return False\n    return check(Input)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Tuple_1 = Input\n    Tuple_2 = Input\n    count_1 = 0\n    count_2 = 0\n    for i in Tuple_1:\n        count_1 += 1\n    for i in Tuple_2:\n        count_2 += 1\n    if count_1 == count_2:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    gap = size\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    nums_len = len(nums)\n    gap = nums_len\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        i = 0\n        while i + gap < nums_len:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i + gap] < nums[i]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n\n    x_old = n\n    while n > 0:\n        n = n//2\n    while x > 0:\n        y = x_old - x\n        if y == x:\n            return True\n        if y > x:\n            return False\n        x_old = x\n        x = x_old - x\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            k=i**2+j**2\n            if k==n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    temp=set()\n    for i in range(1,int(math.sqrt(n)+1)):\n        temp.add(i**2)\n    for i in range(0,int(math.sqrt(n))+1):\n        if n-i**2 in temp:\n            print(True)\n            return \n    print(False)\n    return\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x=1\n    while x*x<=n:\n        y=1\n        while y*y<=n:\n            if x*x+y*y==n:\n                return 'yes'\n            y=y+1\n        x=x+1\n    return 'no'"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,int(n**0.5)+1):\n        if (i**2 + i**2) == n:\n            return i,i\n        elif (i**2 + i**2) < n:\n            for j in range(i+1,int(n**0.5)+1):\n                if (j**2 + j**2) == n:\n                    return j,i\n                elif (j**2 + j**2) < n:\n                    for k in range(j+1,int(n**0.5)+1):\n                        if (k**2 + k**2) == n:\n                            return k,j\n                        elif (k**2 + k**2) < n:\n                            pass\n                        else:\n                            break\n                else:\n                    break\n        else:\n            break\n    return 0,0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n):\n        if (i**2 + i**2 == n):\n            print(\"true\")\n            return\n    print(\"false\")\n    return\ndif_Square(13)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for x in range(0, n):\n        for y in range(0, n):\n            z = x**2 + y**2\n            if z == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(n)\n    for i in range(n):\n        if i**2 <= n and n - i**2 in square_Numbers:\n            return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(n)\n    for x in range(0,n):\n        for y in range(0,n):\n            if ((x**2 + y**2) == n):\n                print(\"The given number can be represented as the difference of two squares: %d = %d^2 + %d^2 \" %(n,x,y))\n                return True\n    print(\"The given number cannot be represented as the difference of two squares: %d \" %(n))\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    ans = []\n    for i in range(1,n):\n        if i**2 > n:\n            break\n        else:\n            if (n-i**2) in ans:\n                print(n,i,n-i**2)\n                break\n            else:\n                ans.append(i**2)\n            \n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    tot = 0\n    for i in range(len(colors)):\n        if patterns[i] == 'no other':\n            return True\n        else:\n            if i + 1 < len(colors) and patterns[i+1] == 'no other':\n                tot += 1\n                if tot > 1:\n                    return False\n                i += 1\n            if colors[i] in patterns[i]:\n                tot += 1\n                if tot > 2:\n                    return False\n                i += 1\n    return tot <= 2\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    colors.sort()\n    patterns.sort()\n    #print(colors, patterns)\n    if colors == patterns:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    print('colors: ', colors)\n    print('patterns: ', patterns)\n    size = len(colors)\n    color_array = [0] * size\n    index = 0\n    while index < size:\n        if colors[index] == patterns[index % len(patterns)]:\n            color_array[index] = 1\n        index += 1\n    return color_array\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        for j in range(len(patterns)):\n            if colors[i] == patterns[j]:\n                break\n        if j == len(patterns) - 1:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index = 0\n    \n    for color in colors:\n        if index < len(patterns) and patterns[index] == color:\n            index += 1\n        if index == len(patterns):\n            return True\n    return False\n    \n    \ndef main():\n    colors = [\"red\", \"green\", \"blue\", \"blue\", \"red\", \"green\", \"blue\", \"blue\", \"red\", \"red\", \"green\", \"blue\"]\n    patterns = [\"red\", \"green\", \"blue\", \"red\", \"blue\"]\n    \n    print(is_samepatterns(colors, patterns))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for pattern in patterns:\n        if pattern[0] not in colors or pattern[1] not in colors:\n            return False\n    return True\n    \nprint(is_samepatterns(['blue','red'], [('blue','red'), ('blue','red')]))\nprint(is_samepatterns(['blue','red', 'blue'], [('blue','red'), ('blue','red')]))\nprint(is_samepatterns(['blue','red', 'green'], [('blue','red'), ('blue','red')]))\nprint(is_samepatterns(['blue','red', 'green', 'blue'], [('blue','red'), ('blue','red')]))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # col1 = colors[0]\n    # col2 = colors[1]\n    # col3 = colors[2]\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    l = len(patterns)\n    for i in range(l):\n        if patterns[i] not in colors:\n            return False\n    return True\n    \ndef binary_search(colors, pattern):\n    l = len(colors)\n    low, high = 0, l - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if colors[mid] == pattern:\n            return True\n        elif colors[mid] > pattern:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n        "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    #if colors.count(colors[0])!= len(colors):\n    #    return False\n    for i in range(len(patterns)-1):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color,pattern in zip(colors, patterns):\n        if color!=pattern:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    l = []\n    for i in test_list:\n        if all(j%K for j in i):\n            l.append(i)\n    return l\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    li = []\n    for i in range(len(test_list)):\n        if(all(map(lambda x: x%K == 0, test_list[i]))):\n            li.append(test_list[i])\n    return li\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for x in test_list:\n        if all(i % K == 0 for i in x):\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [t for t in test_list if all(e % K == 0 for e in t)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    print test_list\n    output = []\n    for i in range(len(test_list)):\n        if (all(list(map(lambda x: x%K == 0, test_list[i])))):\n            output.append(test_list[i])\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Sort the list first so that we can easily see which tuples have all elements divisible by k from the end.\n    test_list.sort()\n    # Use two pointers to traverse the list. At each step, one pointer advances by k while the other pointer \n    # follows the current position of the pointer in the list.\n    # If the next element after the first pointer is divisible by k, this is a valid tuple.\n    # Then we must check the next element after this element.\n    # If it is not divisible by k, we just continue with the same tuple.\n    # If it is divisible by k, then we must check if the next element after this element is divisible by k.\n    # If it is not divisible by k, we can skip this element.\n    # If it is divisible by k, we can combine this tuple with the current tuple.\n    # We must keep on updating the current tuple by the current element and the next element.\n    # If the next element after the first pointer is not divisible by k, then we must advance the first pointer\n    # by k.\n    # In the end, we will only have tuples whose next element is not divisible by k.\n    # We will have to filter them out.\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    import itertools\n    return list(itertools.filterfalse(lambda x: x[i] % K, test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        if all(x%K==0 for x in i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for a, b in test_list:\n        if a % K == 0 and b % K == 0:\n            result.append((a, b))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(x) for x in test_list if (sum(x)%K)==0]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return(n % 11 == 0)\n    \n    \ndef is_Not_Diff(n):\n    '''\n    Write a python function to find whether a number is not divisible by 11.\n    '''\n    return(n % 11!= 0)\n    \n    \ndef is_Prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n == 0 or n == 1:\n        return(False)\n    if n == 2 or n == 3:\n        return(True)\n    for i in range(2, n):\n        if n % i == 0:\n            return(False)\n    return(True)\n    \n    \ndef is_Power(n, p):\n    '''\n    Write a python function to check whether a number is a power of a given base.\n    '''\n    if n == 1:\n        return(True)\n    if n < 0:\n        return(False)\n    while n % p == 0:\n        n = n / p\n    return(n == 1)\n    \n    \ndef is_Not_Power(n, p):\n    '''\n    Write a python function to check whether a number is not a power of a given base.\n    '''\n    if n == 1:\n        return(False)\n    if n < 0:\n        return(True)\n    while n % p == 0:\n        n = n / p\n    return(n!= 1)\n    \n    \ndef is_Super_prime(n):\n    '''\n    Write a python function to check whether a number is a super prime or not.\n    '''\n    if is_Prime(n):\n        return(True)\n    for i in range(2, n):\n        if is_Not_Diff(n):\n            return(True)\n        return(False)\n    \n    \ndef is_Not_Super_prime(n):\n    '''\n    Write a python function to check whether a number is not a super prime.\n    '''\n    if is_Prime(n):\n        return(False)\n    for i in range(2, n):\n        if is_Not_Diff(n):\n            return(False)\n        return(True)\n    \n    \ndef get_Sum(n):\n    '''\n    Write a python function to compute the sum of digits of a number.\n    '''\n    while n > 9:\n        sum = 0\n        while n > 0:\n            sum = sum + n % 10\n            n = n / 10\n        return(sum)\n    \n    \ndef is_Square(n):\n    '''\n    Write a python function to check whether a number is square or not.\n    '''\n    if n < 0:\n        return(False)\n    n = n * n\n    return(n == 1)\n    \n    \ndef is_Not_Square(n):\n    '''\n    Write a python function to check whether a number is not a square.\n    '''\n    if n < 0:\n        return(True)\n    if n == 1:\n        return(False)\n    while n % 2 == 0:\n        n = n / 2\n    return(n == 1)\n    \n    \ndef get_Square_Root(n):\n    '''\n    Write a python function to compute the square root of a number.\n    '''\n    if n < 0:\n        return(False)\n    elif n == 0:\n        return(0)\n    else:\n        return(math.sqrt(n))\n    \n    \ndef get_Square(n):\n    '''\n    Write a python function to compute the square of a number.\n    '''\n    if n < 0:\n        return(False)\n    else:\n        return(n ** 2)\n    \n    \ndef get_Factorial(n):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if n == 0:\n        return(1)\n    if n < 0:\n        return(False)\n    else:\n        return(n * get_Factorial(n - 1))\n    \n    \ndef is_Perfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return(sum == n)\n    \n    \ndef is_Not_Perfect(n):\n    '''\n    Write a python function to check whether a number is not perfect.\n    '''\n    return(not is_Perfect(n))\n    \n    \ndef get_Hex(n):\n    '''\n    Write a python function to compute the hexadecimal representation of a number.\n    '''\n    if n < 0:\n        return(False)\n    else:\n        return(hex(n))\n    \n    \ndef is_Sum_Hex(n):\n    '''\n    Write a python function to check whether the sum of digits of a number is hexadecimal.\n    '''\n    sum = get_Sum(n)\n    return(get_Hex(sum).startswith('0x'))\n    \n    \ndef is_Diff_Hex(n):\n    '''\n    Write a python function to check whether the difference of digits of a number is hexadecimal.\n    '''\n    diff = abs(n)\n    return(get_Hex(diff).startswith('0x'))\n    \n    \ndef is_Sum_Pent(n):\n    '''\n    Write a python function to check whether the sum of digits of a number is pentadecimal.\n    '''\n    sum = get_Sum(n)\n    return(get_Hex(sum).startswith('0x'))\n    \n    \ndef is_Diff_Pent(n):\n    '''\n    Write a python function to check whether the difference of digits of a number is pentadecimal.\n    '''\n    diff = abs(n)\n    return(get_Hex(diff).startswith('0x'))\n    \n    \ndef is_Sum_Oct(n):\n    '''\n    Write a python function to check whether the sum of digits of a number is octadecimal.\n    '''\n    sum = get_Sum(n)\n    return(get_Hex(sum).startswith('0x'))\n    \n    \ndef is_Diff_Oct(n):\n    '''\n    Write a python function to check whether the difference of digits of a number is octadecimal.\n    '''\n    diff = abs(n)\n    return(get_Hex(diff).startswith('0x'))\n    \n    \ndef is_Sum_3x3(n):\n    '''\n    Write a python function to check whether the sum of digits of a 3x3 number is 3x3.\n    '''\n    sum = get_Sum(n)\n    return(is_3x3(sum))\n    \n    \ndef is_Diff_3x3(n):\n    '''\n    Write a python function to check whether the difference of digits of a 3x3 number is 3x3.\n    '''\n    diff = abs(n)\n    return(is_3x3(diff))\n    \n    \ndef is_3x3(n):\n    '''\n    Write a python function to check whether a number is 3x3 or not.\n    '''\n    if n < 0:\n        return(False)\n    if n == 0:\n        return(False)\n    else:\n        return(get_Hex(n).startswith('0x3'))\n    \n    \ndef is_Pent_3x3(n):\n    '''\n    Write a python function to check whether a 3x3 number is pentadecimal or not.\n    '''\n    return(is_3x3(n) and is_Pent(n))\n    \n    \ndef is_Not_Pent_3x3(n):\n    '''\n    Write a python function to check whether a 3x3 number is not pentadecimal.\n    '''\n    return(not is_Pent_3x3(n))\n    \n    \ndef is_Hex_3x3(n):\n    '''\n    Write a python function to check whether a 3x3 number is hexadecimal or not.\n    '''\n    return(is_3x3(n) an"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print('The number is divisible by 11')\n    else: \n        print('The number is not divisible by 11')\nis_Diff(26)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n == 0:\n        return n\n    elif n == 1:\n        return 1\n    elif n % 11 == 0:\n        return 1\n    else:\n        return 0\n    "
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return \"even\" if len(s)%2 == 0 else \"odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        print(\"The word is odd\")\n    else:\n        print(\"The word is even\")\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if(len(s)%2!=0):\n        return \"The word: \"+s+\" is odd in length.\"\n    else:\n        return \"The word: \"+s+\" is even in length.\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(True)\n    else:\n        print(False)\n    return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print('The length of the word is even.')\n    else:\n        print('The length of the word is odd.')\n    return\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 0\n    for i in range(n):\n        t += i * (i + 1) / 2\n    return t\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n + 1) * (n + 2)) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1:\n        raise Exception(\"Input must be an integer greater than 0\")\n    if n == 1:\n        return 1\n    return (n*(n+1)*(n+2))/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    count = 1\n    for i in range(n):\n        count += i\n    return count\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n+1):\n        t += 4*i\n    return t\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n * (n+1) * (n+2) / 6\n    \ndef tetrahedral_number_alt(n): \n    '''\n    Write an alternative function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n    \ndef tetrahedral_number_alt_2(n): \n    '''\n    Write an alternative function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n    \nprint(tetrahedral_number(10))\nprint(tetrahedral_number_alt(10))\nprint(tetrahedral_number_alt_2(10))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\nprint(volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r ** 3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Formula for volume of a sphere:\n    return (4/3) * (math.pi * (r**3))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4.0 / 3.0) * math.pi * r**3\n    return vol\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r == 0:\n        return(0)\n    else:\n        v = (4/3)*math.pi*(r**3)\n        return(v)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum+ord(i)\n    sum = sum%26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    dict1={}\n    for i in range(26):\n        dict1[i]=chr(i+97)\n    sum=0\n    for i in range(len(strr)):\n        sum=sum+ord(strr[i])\n    sum=sum%26\n    for j in range(26):\n        if(sum==j):\n            print(dict1[j])\n    return \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0\n    for i in strr:\n        result += ord(i)\n    return result % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list_strr = []\n    for i in range(len(strr)):\n        list_strr.append(ord(strr[i]))\n    \n    sum_char = 0\n    for i in range(len(list_strr)):\n        sum_char = sum_char + list_strr[i]\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0 \n    for i in strr:\n        sum = sum + ord(i)\n    return sum%26\n    \n    # Details of the function:\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Input Format : string\n    # Input string = \"This is a small string\"\n    # Output Format : string\n    # Char made by adding the ASCII values of all characters modulo 26 = 'T'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(c) for c in strr]) % 26\n    \nprint(get_Char('abcd'))\nprint(get_Char('a'))\nprint(get_Char('ab'))\nprint(get_Char('z'))\nprint(get_Char('aa'))\nprint(get_Char('a' * 4))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    Char = 0\n    for i in strr:\n        Char += ord(i)\n    Char = Char%26\n    return Char\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    l = []\n    for i in strr:\n        l.append(ord(i))\n    print(chr(reduce(lambda x,y:x^y,l)))\n    return reduce(lambda x,y:x^y,l)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    strr = input()\n    sum_char = 0\n    for i in strr:\n        sum_char += ord(i)\n    return(sum_char % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in range(len(strr)):\n        sum+=ord(strr[i])\n    return sum%26\n    # print(sum%26)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    last = 1\n    for i in range(n-1):\n        last = fib(last)\n    return last\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    return 4 * sequence(n - 1) - sequence(n - 5)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n=str(n)\n    n = int(n)\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 3\n    else:\n        return n**2 - 2*n + 1\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 1:\n        return n\n    elif n % 2 == 1:\n        return 3 * sequence(n-1) - 2 * sequence(n-2)\n    else:\n        return 2 * sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1,1]\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        while seq[-1] < n:\n            seq.append(seq[-1] + seq[-2])\n        return seq[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # Create list of numbers\n    num_list = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,727780724333012,126466781768614,203517559780302,3316697761822145,5142292760882407,8349263196407410,14569863613297873,24279849992188909,38610365557807403,62891429639276137]\n    # Return nth number in the sequence\n    return num_list[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4 * pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    if type(r)==str:\n        return \"Invalid Input\"\n    elif type(r)==float:\n        if r>0:\n            return 4 * math.pi * r * r\n        else:\n            return \"Invalid Input\"\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159\n    area = (4 * pi * r**2)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = (4 * math.pi * (r**2))\n    return surfacearea\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * math.pi * (r**2) + 2 * math.pi * (r) * (h)\n    return surfacearea\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surfacearea = (1/3) * math.pi * (r**2) + (math.pi) * (r) * (h)\n    return surfacearea\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = 1/3 * math.pi * (r**2) * h\n    return volume\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    surfacearea = 6 * (l **2)\n    return surfacearea\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    volume = l ** 3\n    return volume\ndef surfacearea_rectangle(l,w):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surfacearea = 2 * (l * w)\n    return surfacearea\ndef volume_rectangle(l,w):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    volume = l * w\n    return volume\ndef surfacearea_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surfacearea = (1/2) * b * h\n    return surfacearea\ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    volume = 1/2 * b * h\n    return volume\ndef surfacearea_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surfacearea = 2 * (b + h)\n    return surfacearea\ndef volume_parallelogram(b,h):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    volume = b * h\n    return volume\ndef surfacearea_rectangleprism(l,w,h):\n    '''\n    Write a function to find the surface area of a rectangle prism.\n    '''\n    surfacearea = 2 * (l * w) + 2 * (l * h) + 2 * (w * h)\n    return surfacearea\ndef volume_rectangleprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangle prism.\n    '''\n    volume = l * w * h\n    return volume\ndef surfacearea_hexagon(l):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    surfacearea = (3 * math.sqrt(3)) / 2 * (l**2)\n    return surfacearea\ndef volume_hexagon(l):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    volume = (1/2) * math.sqrt(3) * (l**2)\n    return volume\ndef surfacearea_heptagon(l):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    surfacearea = (5 * math.sqrt(5)) / 2 * (l**2)\n    return surfacearea\ndef volume_heptagon(l):\n    '''\n    Write a function to find the volume of a heptagon.\n    '''\n    volume = (1/3) * math.sqrt(5) * (l**2)\n    return volume\ndef surfacearea_octagon(l):\n    '''\n    Write a function to find the surface area of a octagon.\n    '''\n    surfacearea = (2 * math.sqrt(2)) * (l**2)\n    return surfacearea\ndef volume_octagon(l):\n    '''\n    Write a function to find the volume of a octagon.\n    '''\n    volume = (1/2) * math.sqrt(2) * (l**2)\n    return volume\ndef surfacearea_nonagon(l):\n    '''\n    Write a function to find the surface area of a nonagon.\n    '''\n    surfacearea = (3 * math.sqrt(3)) / 2 * (l**2)\n    return surfacearea\ndef volume_nonagon(l):\n    '''\n    Write a function to find the volume of a nonagon.\n    '''\n    volume = (1/3) * math.sqrt(3) * (l**2)\n    return volume\ndef surfacearea_decagon(l):\n    '''\n    Write a function to find the surface area of a decagon.\n    '''\n    surfacearea = (4 * math.sqrt(2)) * (l**2)\n    return surfacearea\ndef volume_decagon(l):\n    '''\n    Write a function to find the volume of a decagon.\n    '''\n    volume = (1/4) * math.sqrt(2) * (l**2)\n    return volume\ndef surfacearea_icosahedron(l):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    surfacearea = (20 + 12 * math.sqrt(5)) * (l**2)\n    return surfacearea\ndef volume_icosahedron(l):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    volume = (1/12) * (5 * math.sqrt(5) * (l**2))\n    return volume\ndef surfacearea_dodecahedron(l):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    surfacearea = (20 + 12 * math.sqrt(5)) * (l**2)\n    return surfacearea\ndef volume_dodecahedron(l):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    volume = (1/12) * (5 * math.sqrt(5) * (l**2))\n    return volume\ndef surfacearea_icosidodecahedron(l):\n    '''\n    Write a function to find the surface area of a icosidodecahedron.\n    '''\n    surfacearea = (40 + 20 * math.sqrt(3) + 12 * math.sqrt(5)) * (l**2)\n    return surfacearea\ndef volume_icosidodecahedron(l):\n    '''\n    Write a function to find the volume of a icosidodecahedron.\n    '''\n    volume = (1/12) * (5 * math.sqrt(5) * (l**2))\n    return volume\ndef surfacearea_truncateddodecahedron(l,h):\n    '''\n    Write a function to find the surface area of a truncated dodecahedron.\n    '''\n    surfacearea = (20 + 12 * math.sqrt(5)) * (l**2) + h * l\n    return surfacearea\ndef volume_truncateddodecahedron(l,h):\n    '''\n    Write a function to find the volume of a truncated dodecahedron.\n    '''\n    volume = (1/12) * (5 * math.sqrt(5) * (l**2)) + h * l\n    return volume\ndef surfacearea_octaheder(l):\n    '''\n    Write a function to find the surface area o"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # r = int(input(\"Enter radius of the sphere\"))\n    result = 4 * math.pi * (r ** 2)\n    print(\"Surface area of the sphere is:\", result)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #define a function to find the surface area\n    #use the formula of a sphere.  S = 4pi(r^2)\n    def surfacearea_sphere_formula(r):\n        return 4 * math.pi * (r**2)\n    #use the function to find the surface area of a sphere and print the result\n    print(surfacearea_sphere_formula(r))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h+2*math.pi*r**2\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*h\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi*r*(r+math.sqrt(h**2+r**2))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r**2*h\ndef surfacearea_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a prism.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a*b*c\ndef surfacearea_cube(s):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    return 6*s**2\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return s**3\ndef surfacearea_rectangularprism(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*(a*b+a*c+b*c)\ndef volume_rectangularprism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return a*b*c\ndef surfacearea_triangularprism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    return a*b+a*c+b*c\ndef volume_triangularprism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    return 1/2*a*b*c\ndef surfacearea_kite(r,s):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    return math.pi*r**2+4*math.pi*r*s\ndef volume_kite(r,s):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return 1/4*math.pi*r**2*s\ndef surfacearea_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    return 1/2*(a+b)*(c+d)\ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return (1/2*(a+b)*(c+d))-b*d\ndef surfacearea_parallelogram(a,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    return a*b\ndef volume_parallelogram(a,b):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    return a*b\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    return 2*(a+b)\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a*b\ndef surfacearea_rhombus(a,b):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    return math.sqrt(a**2+b**2)\ndef volume_rhombus(a,b):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return 1/4*a*b\ndef surfacearea_kruger(a,c):\n    '''\n    Write a function to find the surface area of a Kruger triangle.\n    '''\n    return a*c\ndef volume_kruger(a,c):\n    '''\n    Write a function to find the volume of a Kruger triangle.\n    '''\n    return 1/6*a*c**2\ndef surfacearea_hexagon(a):\n    '''\n    Write a function to find the surface area of a hexagon.\n    '''\n    return 3*math.sqrt(3)*a**2\ndef volume_hexagon(a):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_heptagon(a):\n    '''\n    Write a function to find the surface area of a heptagon.\n    '''\n    return 7*math.sqrt(3)*a**2\ndef volume_heptagon(a):\n    '''\n    Write a function to find the volume of a heptagon.\n    '''\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_octagon(a):\n    '''\n    Write a function to find the surface area of an octagon.\n    '''\n    return 9*math.sqrt(3)*a**2\ndef volume_octagon(a):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_nonagon(a,b):\n    '''\n    Write a function to find the surface area of a nonagon.\n    '''\n    return 5*math.sqrt(5)*a**2+2*math.sqrt(5)*b**2\ndef volume_nonagon(a,b):\n    '''\n    Write a function to find the volume of a nonagon.\n    '''\n    return 1/3*math.sqrt(5)*a**3+1/3*math.sqrt(5)*b**3\ndef surfacearea_decagon(a):\n    '''\n    Write a function to find the surface area of a decagon.\n    '''\n    return 10*math.sqrt(10)*a**2\ndef volume_decagon(a):\n    '''\n    Write a function to find the volume of a decagon.\n    '''\n    return 1/3*math.sqrt(10)*a**3\ndef surfacearea_icosahedron(a):\n    '''\n    Write a function to find the surface area of an icosahedron.\n    '''\n    return 5*math.sqrt(5)*a**2\ndef volume_icosahedron(a):\n    '''\n    Write a function to find the volume of an icosahedron.\n    '''\n    return 1/3*math.sqrt(5)*a**3\ndef surfacearea_dodecahedron(a):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 12*math.sqrt(12)*a**2\ndef volume_dodecahedron(a):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return 1/3*math.sqrt(12)*a**3\ndef surfacearea_icosahedron(a):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    return 15*math.sqrt(15)*a**2\ndef volume_icosahedron(a):\n    '''\n    Write a function to find the volum"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #1. Write a function to find the surface area of a sphere.\n    #2. Test the function\n    #3. Assign a variable for the radius of the sphere and\n    #   pass it to the function. The function will print out the surface area.\n    #4. Try a few different values for the radius.\n    surface_area = 4 * math.pi * (r**2)\n    print(surface_area)\n    \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #1. Write a function to find the volume of a sphere.\n    #2. Test the function\n    #3. Assign a variable for the radius of the sphere and\n    #   pass it to the function. The function will print out the volume.\n    #4. Try a few different values for the radius.\n    volume = 4/3 * math.pi * (r**3)\n    print(volume)\n    \ndef volume_of_rectangular_prism(length,width,height):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    #1. Write a function to find the volume of a rectangular prism.\n    #2. Test the function\n    #3. Assign a variable for the length, width, and height of the prism and\n    #   pass it to the function. The function will print out the volume.\n    #4. Try a few different values for the dimensions.\n    volume = length * width * height\n    print(volume)\n    \ndef volume_of_cuboid(length,width,height):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    #1. Write a function to find the volume of a cuboid.\n    #2. Test the function\n    #3. Assign a variable for the length, width, and height of the prism and\n    #   pass it to the function. The function will print out the volume.\n    #4. Try a few different values for the dimensions.\n    volume = length * width * height\n    print(volume)\n    \ndef surfacearea_cuboid(length,width,height):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    #1. Write a function to find the surface area of a cuboid.\n    #2. Test the function\n    #3. Assign a variable for the length, width, and height of the prism and\n    #   pass it to the function. The function will print out the surface area.\n    #4. Try a few different values for the dimensions.\n    surface_area = 2 * (length * width) + 2 * (length * height) + 2 * (height * width)\n    print(surface_area)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #surface_area_sphere = 4 * math.pi * r **2\n    #return surface_area_sphere\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        if n%2 == 0:\n            return 2*centered_hexagonal_number(n-1) - 1\n        else:\n            return 2*centered_hexagonal_number(n-1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n_hexagons = int(n/2)\n    # x_0, y_0 = 0, 0\n    x_0 = y_0 = 0\n    n_hexagons = int(n_hexagons / 2)\n    # print(x_0, y_0, n_hexagons)\n    return sum(0.5 * x * (n_hexagons + (n_hexagons - x)) for x in range(1, n_hexagons + 1))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return\n    hex_num = [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 162, 162, 163, 163, 164, 164, 165, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 175, 175, 176, 176, 177, 177, 178, 178, 179, 179, 180, 180, 181, 181, 182, 182, 183, 183, 184, 184, 185, 185, 186, 186, 187, 187, 188, 188, 189, 189, 190, 190, 191, 191, 192, 192, 193, 193, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 253, 253, 254, 254, 255, 255, 256, 256, 257, 257, 258, 258, 259, 259, 260, 260, 261, 261, 262, 262, 263, 263, 264, 264, 265, 265, 266, 266, 267, 267, 268, 268, 269, 269, 270, 270, 271, 271, 272, 272, 273, 273, 274, 274, 275, 275, 276, 276, 277, 277, 278, 278, 279, 279, 280, 280, 281, 281, 282, 282, 283, 283, 284, 284, 285, 285, 286, 286, 287, 287, 288, 288, 289, 289, 290, 290, 291, 291, 292, 292, 293, 293, 294, 294, 295, 295, 296, 296, 297, 297, 298, 298, 299, 299]\n    return hex_num[n - 1]\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(round(2*n**2/3+1/3,0))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    x = 0\n    while n > 0:\n        x += 1\n        n -= 1\n        n -= 1\n        n -= 1\n        n -= 1\n        n -= 1\n        n -= 1\n        n -= 1\n        n -= 1\n        n -= 1\n    return x\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int((1+sqrt(1+24*n))/6)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # first n steps will be 1, 3, 7, 15,...\n    return 1 + (n + 1) * n // 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(3*n-1) // 2\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2) and dict1.update(dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_1_k = dict1.keys()\n    dict_2_k = dict2.keys()\n    dict_3_k = dict3.keys()\n    res = {}\n    for i in dict_1_k:\n        res[i] = dict1[i]\n    for i in dict_2_k:\n        res[i] = dict2[i]\n    for i in dict_3_k:\n        res[i] = dict3[i]\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    for key,value in dict1.items():\n        dict_merged[key] = value\n    for key,value in dict2.items():\n        dict_merged[key] = value\n    for key,value in dict3.items():\n        dict_merged[key] = value\n    return dict_merged\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1,**dict2, **dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Your code here\n    for k,v in dict3.items():\n        dict2[k] = v\n    for k,v in dict1.items():\n        dict2[k] = v\n    for k,v in dict2.items():\n        dict1[k] = v\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    \n    for key in dict1:\n        if key in dict2 and key in dict3:\n            dict1[key] = dict1[key] + dict2[key] + dict3[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return ct.ChainMap(dict1,dict2,dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    return output_dict\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    return output_dict\ndef merge_dictionaries_one(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    return output_dict\ndef merge_dictionaries_none(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    return output_dict\ndef merge_dictionaries_one_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    return output_dict\ndef merge_dictionaries_two_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    return output_dict\ndef merge_dictionaries_three_one(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    return output_dict\ndef merge_dictionaries_three_two(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    return output_dict\ndef merge_dictionaries_three_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    return output_dict\ndef merge_dictionaries_three_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_four_three(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_two_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_one_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_two_three_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_three_one_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_three_two_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_three_three_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_three_four_one(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_four_three_one(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_four_two_one(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_four_one_two(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_four_two_two(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge_dictionaries_four_three_two(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge three dictionaries into one dictionary.\n    '''\n    output_dict = dict1.copy()\n    output_dict.update(dict2)\n    output_dict.update(dict3)\n    output_dict.update(dict4)\n    return output_dict\ndef merge"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {**dict1, **dict2, **dict3}\n    return result\ndict1 = {'a': 10, 'b': 8}\ndict2 = {'d': 6, 'c': 4}\ndict3 = {'a': 1, 'b': 2}\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Your code here\n    dict1 = collections.Counter(list1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2=collections.Counter(list1)\n    return dict(list2)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    list2 = []\n    for item in list1:\n        if item not in list2:\n            list2.append(item)\n    freq = {x:list1.count(x) for x in list2}\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq={}\n    for i in list1:\n        if i not in freq:\n            freq[i]=1\n        else:\n            freq[i]+=1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for num in list1:\n        if num not in dict1:\n            dict1[num] = 1\n        else:\n            dict1[num] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        freq_dict[element] = list1.count(element)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            dic[x] += 1\n        else:\n            dic[x] = 1\n    return dic\ndef sum_of_count(list1):\n    '''\n    Write a function to get the sum of elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            dic[x] += x\n        else:\n            dic[x] = x\n    return dic\ndef sort_list(list1):\n    '''\n    Write a function to sort a list in reverse order and return it as a dictionary.\n    '''\n    dic = {}\n    list2 = sorted(list1,reverse=True)\n    for x in list2:\n        dic[x] = list2.count(x)\n    return dic\ndef sort_dict(dict1):\n    '''\n    Write a function to sort a dictionary by value and return it as a list of tuples.\n    '''\n    list1 = sorted(dict1.items(),key=lambda x:x[1])\n    return list1\ndef sort_freq(list1):\n    '''\n    Write a function to sort a dictionary of words by their frequency and return it as a list of tuples.\n    '''\n    list1 = list(dict1.items())\n    list2 = sorted(list1,key=lambda x:x[1])\n    return list2\ndef max_count(list1):\n    '''\n    Write a function to get the maximum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef max_sum(list1):\n    '''\n    Write a function to get the maximum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef max_dict(list1):\n    '''\n    Write a function to get the maximum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef min_dict(list1):\n    '''\n    Write a function to get the minimum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] > list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef min_sum(list1):\n    '''\n    Write a function to get the minimum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] > list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef min_count(list1):\n    '''\n    Write a function to get the minimum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] > list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef max_count_index(list1):\n    '''\n    Write a function to get the maximum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef max_sum_index(list1):\n    '''\n    Write a function to get the maximum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef max_dict_index(list1):\n    '''\n    Write a function to get the maximum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef min_dict_index(list1):\n    '''\n    Write a function to get the minimum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] > list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef min_sum_index(list1):\n    '''\n    Write a function to get the minimum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] > list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef min_count_index(list1):\n    '''\n    Write a function to get the minimum value of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] > list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef sum_of_count_index(list1):\n    '''\n    Write a function to get the sum of elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for x in list1:\n        if x in dic:\n            if dic[x] < list1.count(x):\n                dic[x] = list1.count(x)\n        else:\n            dic[x] = list1.count(x)\n    return dic\ndef sort_list_index(list1):\n    '''\n    Write a function to sort a list in reverse order and return it as a dictionary.\n    '''\n    dic = {}\n    list2 = sorted(list1,reverse=True)\n    for x in list2:\n        dic[x] = list2.count(x)\n    return dic\ndef sort_dict_index(dict1):\n    '''\n    Write a function to sort "
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return collections.Counter(list1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N<0:\n        N = N*-1\n    while N>1:\n        N -= 1\n        if N == 0:\n            return N+1\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = str(N)\n    l = len(n)\n    res = ''\n    for i in range(l-1):\n        if n[i] < n[i+1]:\n            res += n[i]\n        else:\n            res += n[i+1]\n    if n[-1] < n[-2]:\n        res += n[-1]\n    else:\n        res += n[-2]\n    res = int(res)\n    return res\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # it is equal to find the first element in the tree where the value is less than n.\n    # return n - 1 if n - 1 < n, if n - 1 is not in tree then return n.\n    return min(range(N), key=lambda x: (abs(x - N), x))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return int(math.floor(math.sqrt(N)))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller_number = N - 1\n    for i in range(N - 1, -1, -1):\n        if smaller_number % i == 0:\n            return i\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Your code here\n    l = [x for x in range(1, N)]\n    for i in range(len(l)):\n        if l[i] > N:\n            l[i] = 0\n    m = 0\n    for i in range(len(l)):\n        if l[i] > m:\n            m = l[i]\n    return m\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        N *= -1\n    if N < 10:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # build the array\n    nums = [x for x in range(1, N)]\n    \n    # sort the array\n    nums.sort()\n    \n    # return the first element\n    return nums[0]\n    \nprint(closest_num(11))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max=0\n    for i in list1:\n        if len(i)>max:\n            max=len(i)\n    print('The longest word has',max,'letters')\n    return\nlist1=['Harsh','Vivek','Vikas','Vimal','Anuj','Aashiq']\nlen_log(list1)"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = 0\n    for word in list1:\n        if len(word) > longest_word:\n            longest_word = len(word)\n    return longest_word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = list1.split()\n    list2 = []\n    for i in list1:\n        list2.append(len(i))\n    return max(list2)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if max < len(i):\n            max = len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    new_list=[]\n    for i in list1:\n        new_list.append(len(i))\n    print(max(new_list))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    for i in list1:\n        if len(i) == 0:\n            list1.remove(i)\n    print(len(list1))\n    return list1\nlen_log([\"nav\", \"hehe\", \"heheh\", \"i\", \"i\", \"i\"])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = []\n    for word in list1:\n        length.append(len(word))\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max1 = 0\n    for i in list1:\n        if len(i) > max1:\n            max1 = len(i)\n    print(max1)\n    return max1\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    l = []\n    for i in list1:\n        l.append(len(i))\n    print(l)\n    return max(l)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n    \nprint(find_substring(\"I love programming\", \"programming\")) # True\nprint(find_substring(\"I love coding\", \"programming\")) # False\nprint(find_substring(\"I love python\", \"python\")) # True\nprint(find_substring(\"I love python\", \"programming\")) # Fals"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1.find(sub_str) >= 0\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    start = 0\n    end = 0\n    found = False\n    while end < len(str1):\n        if str1[end] == sub_str[0]:\n            found = True\n            start = end\n            for i in range(len(sub_str)):\n                if str1[start+i]!= sub_str[i]:\n                    found = False\n                    break\n            if found:\n                return start\n        end += 1\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:].startswith(sub_str):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    lst = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    string = str1\n    substring = sub_str\n    if substring in string:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # For every number, n, in the range, [1,10^10], if n-1 is also a number,\n    # then this is an undulating number.\n    # Otherwise, this is not.\n    if n == 1:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n_list = [int(i) for i in str(n)]\n    if (n_list[0] - n_list[1] == n_list[2] - n_list[3]):\n        print(\"{} is an Undulating number.\".format(n))\n    else:\n        print(\"{} is not an Undulating number.\".format(n))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, len(str(n))):\n        n1 = str(n)\n        n2 = str(n)\n        n1 = n1[:i] + n1[i+1:]\n        n2 = n2[:i] + n2[i+1:]\n        if int(n1) == int(n2):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = []\n    for i in str(n):\n        l.append(int(i))\n    l.sort()\n    if l[0] == l[1] == l[2]:\n        return False\n    elif l[0] == l[1] or l[1] == l[2] or l[0] == l[2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Your code goes here\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if (n < 0) or (n >= 1000): \n        return False\n    \n    # [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] \n    # [2, 2, 2, 2, 2, 2, 2, 2, 2, 2] \n    # [3, 3, 3, 3, 3, 3, 3, 3, 3, 3] \n    # [4, 4, 4, 4, 4, 4, 4, 4, 4, 4] \n    # [5, 5, 5, 5, 5, 5, 5, 5, 5, 5] \n    # [6, 6, 6, 6, 6, 6, 6, 6, 6, 6] \n    # [7, 7, 7, 7, 7, 7, 7, 7, 7, 7] \n    # [8, 8, 8, 8, 8, 8, 8, 8, 8, 8] \n    # [9, 9, 9, 9, 9, 9, 9, 9, 9, 9] \n    # [10, 10, 10, 10, 10, 10, 10, 10, 10, 10] \n    # [11, 11, 11, 11, 11, 11, 11, 11, 11, 11] \n    # [12, 12, 12, 12, 12, 12, 12, 12, 12, 12] \n    # [13, 13, 13, 13, 13, 13, 13, 13, 13, 13] \n    # [14, 14, 14, 14, 14, 14, 14, 14, 14, 14] \n    # [15, 15, 15, 15, 15, 15, 15, 15, 15, 15] \n    # [16, 16, 16, 16, 16, 16, 16, 16, 16, 16] \n    # [17, 17, 17, 17, 17, 17, 17, 17, 17, 17] \n    # [18, 18, 18, 18, 18, 18, 18, 18, 18, 18] \n    # [19, 19, 19, 19, 19, 19, 19, 19, 19, 19] \n    # [20, 20, 20, 20, 20, 20, 20, 20, 20, 20] \n    # [21, 21, 21, 21, 21, 21, 21, 21, 21, 21] \n    # [22, 22, 22, 22, 22, 22, 22, 22, 22, 22] \n    # [23, 23, 23, 23, 23, 23, 23, 23, 23, 23] \n    # [24, 24, 24, 24, 24, 24, 24, 24, 24, 24] \n    # [25, 25, 25, 25, 25, 25, 25, 25, 25, 25] \n    # [26, 26, 26, 26, 26, 26, 26, 26, 26, 26] \n    # [27, 27, 27, 27, 27, 27, 27, 27, 27, 27] \n    # [28, 28, 28, 28, 28, 28, 28, 28, 28, 28] \n    # [29, 29, 29, 29, 29, 29, 29, 29, 29, 29] \n    # [30, 30, 30, 30, 30, 30, 30, 30, 30, 30] \n    # [31, 31, 31, 31, 31, 31, 31, 31, 31, 31] \n    # [32, 32, 32, 32, 32, 32, 32, 32, 32, 32] \n    # [33, 33, 33, 33, 33, 33, 33, 33, 33, 33] \n    # [34, 34, 34, 34, 34, 34, 34, 34, 34, 34] \n    # [35, 35, 35, 35, 35, 35, 35, 35, 35, 35] \n    # [36, 36, 36, 36, 36, 36, 36, 36, 36, 36] \n    # [37, 37, 37, 37, 37, 37, 37, 37, 37, 37] \n    # [38, 38, 38, 38, 38, 38, 38, 38, 38, 38] \n    # [39, 39, 39, 39, 39, 39, 39, 39, 39, 39] \n    # [40, 40, 40, 40, 40, 40, 40, 40, 40, 40] \n    # [41, 41, 41, 41, 41, 41, 41, 41, 41, 41] \n    # [42, 42, 42, 42, 42, 42, 42, 42, 42, 42] \n    # [43, 43, 43, 43, 43, 43, 43, 43, 43, 43] \n    # [44, 44, 44, 44, 44, 44, 44, 44, 44, 44] \n    # [45, 45, 45, 45, 45, 45, 45, 45, 45, 45] \n    # [46, 46, 46, 46, 46, 46, 46, 46, 46, 46] \n    # [47, 47, 47, 47, 47, 47, 47, 47, 47, 47] \n    # [48, 48, 48, 48, 48, 48, 48, 48, 48, 48] \n    # [49, 49, 49, 49, 49, 49, 49, 49, 49, 49] \n    # [50, 50, 50, 50, 50, 50, 50, 50, 50, 50] \n    # [51, 51, 51, 51, 51, 51, 51, 51, 51, 51] \n    # [52, 52, 52, 52, 52, 52, 52, 52, 52, 52] \n    # [53, 53, 53, 53, 53, 53, 53, 53, 53, 53] \n    # [54, 54, 54, 54, 54, 54, 54, 54, 54, 54] \n    # [55, 55, 55, 55, 55, 55, 55, 55, 55, 55] \n    # [56, 56, 56, 56, 56, 56, 56, 56, 56, 56] \n    # [57, 57, 57, 57, 57, 57, 57, 57, 57, 57] \n    # [58, 58, 58, 58, 58, 58, 58, 58, 58, 58] \n    # [59, 59, 59, 59, 59, 59, 59, 59, 59, 59] \n    # [60, 60, 60, 60, 60, 60, 60, 60, 60, 60] \n    # [61, 61, 61, 61, 61, 61, 61, 61, 61, 61] \n    # [62, 62, 62, 62, 62, 62, 62, 62, 62, 62] \n    # [63, 63, 63, 63, 63, 63, 63, 63, 63, 63] \n    # [64, 64, 64, 64, 64, 64, 64, 64, 64, 64] \n    # [65, 65, 65, 65, 65, 65, 65, 65, 65, 65] \n    # [66, 66, 66, 66, 66, 66, 66, 66, 66, 66] \n    # [67, 67, 67, 67, 67, 67, 67, 67, 67, 67] \n    # [68, 68, 68, 68, 68, 68, 68, 68, 68, 68] \n    # [69, 69, 69, 69, 69, 69, 69, 69, 69, 69] \n    # [70, 70, 70, 70, 70, 70, 70, 70, 70, 70] \n    # [71, 71, 71, 71, 71, 71, 71, 71, 71, 71] \n    # [72, 72, 72, 72, 72, 72, 72, 72, 72, 72] \n    # [73, 73, 73, 73, 73, 73, 73, 73, 73, 73] \n    # [74, 74, 74, 74, 74, 74, 74, 74, 74, 74] \n    # [75, 75, 75, 75, 75, 75, 75, 75, 75, 75] \n    # [76, 76, 76, 76, 76, 76, 76, 76, 76, 76] \n    # [77, 77, 77, 77, 77, 77, 77, 77, 77, 77] \n    # [78, 78, 78, 78, 78, 78, 78, 78, 78, 78] \n    # [79, 79, 79, 79, 79, 79, 79, 79, 79, 79] \n    # [80, 80, 80, 80, 80, 80, 80"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    print(\"Is the number {} undulating?\".format(n))\n    if n < 0:\n        return \"This is a negative number\"\n    elif n > 0 and n % 2 == 0:\n        return \"This is an even positive number\"\n    elif n > 0 and n % 2 == 1:\n        return \"This is an odd positive number\"\n    elif n < 0 and n % 2 == 0:\n        return \"This is an even negative number\"\n    elif n < 0 and n % 2 == 1:\n        return \"This is an odd negative number\"\n    else:\n        return \"This is neither positive nor negative\"\n    \nprint(is_undulating(int(input(\"Please enter a number: \"))))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    s = str(n)\n    return all([(s[i]==s[i+1]) or ((s[i]>s[i+1]) and (s[i-1]>s[i])) or ((s[i]<s[i+1]) and (s[i-1]<s[i])) for i in range(len(s)-1)])\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n=str(n)\n    n=n.split('0')\n    n.remove('')\n    if len(n)==1:\n        return False\n    for i in n:\n        if int(i)%2==0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n):\n        if is_undulating(i) == False:\n            if i == n:\n                return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b<0):\n        a,b=-a,-b\n    if(b==0):\n        return 1\n    if(b==1):\n        return a\n    return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0 and b < 0:\n        return 0\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a*power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0 or b==0:\n        return 0\n    if b<0:\n        return 1/power(a,abs(b))\n    if b==1:\n        return a\n    if b%2==0:\n        return power(a*a,b//2)\n    else:\n        return power(a*a,b//2)*a\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a==0 or b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if type(a) == str:\n        if b == 0:\n            return 1\n        return a * power(a,b-1)\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    return a * power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a**b\n    return result\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\ndef divisible(a,b):\n    '''\n    Write a function that checks if 'a' is divisible by 'b'.\n    '''\n    return a%b==0\ndef non_divisible(a,b):\n    '''\n    Write a function that checks if 'a' is not divisible by 'b'.\n    '''\n    return a%b!=0\ndef find_smaller(a,b):\n    '''\n    Write a function that returns the smaller number between 'a' and 'b'.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\ndef is_odd(a):\n    '''\n    Write a function that returns if the number 'a' is odd.\n    '''\n    return a%2==1\ndef is_even(a):\n    '''\n    Write a function that returns if the number 'a' is even.\n    '''\n    return a%2==0\ndef is_factor(a,b):\n    '''\n    Write a function that returns if 'b' is a factor of 'a'.\n    '''\n    return a%b==0\ndef is_multiple(a,b):\n    '''\n    Write a function that returns if 'a' is multiple of 'b'.\n    '''\n    return a%b==0\ndef is_prime(a):\n    '''\n    Write a function that returns if a number is prime.\n    '''\n    for i in range(2,int(a/2)+1):\n        if is_factor(a,i):\n            return False\n    return True\ndef is_palindrome(a):\n    '''\n    Write a function that returns if a number is palindrome.\n    '''\n    return str(a)==str(a)[::-1]\ndef f_to_c(f):\n    '''\n    Write a function that converts a temperature from Fahrenheit to Celsius.\n    '''\n    return (f-32)/1.8\ndef c_to_f(c):\n    '''\n    Write a function that converts a temperature from Celsius to Fahrenheit.\n    '''\n    return c*1.8+32\ndef ceil(a,b):\n    '''\n    Write a function that returns the smallest number greater than or equal to 'a' that is divisible by 'b'.\n    '''\n    return a//b+int(a%b!=0)\ndef sqrt(a):\n    '''\n    Write a function that returns the square root of 'a'.\n    '''\n    return a**(1/2)\ndef cosine(a):\n    '''\n    Write a function that returns the cosine of 'a'.\n    '''\n    return math.cos(a)\ndef sine(a):\n    '''\n    Write a function that returns the sine of 'a'.\n    '''\n    return math.sin(a)\ndef tangent(a):\n    '''\n    Write a function that returns the tangent of 'a'.\n    '''\n    return math.tan(a)\ndef binomial(a,b):\n    '''\n    Write a function that returns the binomial coefficient of 'a' and 'b'.\n    '''\n    return math.factorial(a)/(math.factorial(b)*math.factorial(a-b))\ndef fibonacci(a):\n    '''\n    Write a function that returns the 'a'th Fibonacci number.\n    '''\n    if a==0 or a==1:\n        return a\n    return fibonacci(a-2)+fibonacci(a-1)\ndef is_leap_year(a):\n    '''\n    Write a function that returns if the year 'a' is leap year.\n    '''\n    return a%4==0 and (a%100!=0 or a%400==0)\ndef days_in_month(a,b):\n    '''\n    Write a function that returns the number of days in month 'a' of year 'b'.\n    '''\n    if is_leap_year(b):\n        if a==2:\n            return 29\n        if a==1 or a==3 or a==5 or a==7 or a==8 or a==10:\n            return 31\n        if a==4 or a==6 or a==9 or a==11:\n            return 30\n    else:\n        if a==2:\n            return 28\n        if a==1 or a==3 or a==5 or a==7 or a==8 or a==10:\n            return 31\n        if a==4 or a==6 or a==9 or a==11:\n            return 30\ndef days_between(a,b,c):\n    '''\n    Write a function that returns the number of days between two dates.\n    '''\n    return days_in_month(c[0],c[1])-days_in_month(a[0],a[1])+b[0]-a[0]\ndef is_prime_factors(a):\n    '''\n    Write a function that returns all prime factors of a number.\n    '''\n    p=[]\n    for i in range(2,a+1):\n        if a%i==0:\n            if is_prime(i):\n                p.append(i)\n    return p\ndef is_prime_number(a):\n    '''\n    Write a function that returns if the number 'a' is prime.\n    '''\n    return is_prime(a)\ndef factors(a):\n    '''\n    Write a function that returns all prime factors of a number.\n    '''\n    p=[]\n    for i in range(2,a+1):\n        if a%i==0:\n            if is_prime_number(i):\n                p.append(i)\n    return p\ndef greatest_common_factor(a,b):\n    '''\n    Write a function that returns the greatest common factor of 'a' and 'b'.\n    '''\n    return math.gcd(a,b)\ndef least_common_multiple(a,b):\n    '''\n    Write a function that returns the least common multiple of 'a' and 'b'.\n    '''\n    return a*b/greatest_common_factor(a,b)\ndef is_palindrome_number(a):\n    '''\n    Write a function that returns if a number is palindrome.\n    '''\n    return is_palindrome(a)\ndef is_palindrome_phrase(a):\n    '''\n    Write a function that returns if a phrase is palindrome.\n    '''\n    return is_palindrome(a)\ndef is_palindrome_sentence(a):\n    '''\n    Write a function that returns if a sentence is palindrome.\n    '''\n    return is_palindrome(a)\ndef is_square_number(a):\n    '''\n    Write a function that returns if a number is square.\n    '''\n    return int(math.sqrt(a))**2==a\ndef is_square_root_integer(a):\n    '''\n    Write a function that returns if a number is a square root of an integer.\n    '''\n    return int(math.sqrt(a))**2==a\ndef is_square_root_float(a):\n    '''\n    Write a function that returns if a number is a square root of a float.\n    '''\n    return a**0.5==int(a**0.5)\ndef is_square_root_float_number(a):\n    '''\n    Write a function that returns if a number is a square root of a float number.\n    '''\n    return int(a**0.5)**2==a\ndef decimal_part(a):\n    '''\n    Write a function that returns the decimal part of a number.\n    '''\n    return float(a)%1\ndef is_perfect_number(a):\n    '''\n    Write a function that returns if a number is perfect.\n    '''\n    sum=0\n    for i in range(1,a):\n        if a%i==0:\n            sum+=i\n    return sum==a\ndef is_palindrome_number_integer(a):\n    '''\n    Write a function that returns if a number is palindrome of an integer.\n    '''\n    return is_palindrome_number(a)\ndef is_palindrome_number_floa"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a == 0 and b < 0:\n        return 0\n    elif a == 0 and b > 0:\n        return 1\n    elif b < 0:\n        return 1/a**(-b)\n    elif b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b > 1:\n        return a*power(a,b-1)\n    else:\n        return power(a,b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(1)(min(test_list, key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min=0\n    for i in range(0,len(test_list)):\n        if(test_list[i][1]<test_list[index_min][1]):\n            index_min=i\n    return index_min\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    mini = test_list[0][1]\n    index = 0\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < mini:\n            mini = test_list[i][1]\n            index = i\n    return index\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return test_list.index(min(test_list, key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # print(test_list)\n    # for index, num in enumerate(test_list):\n    #     print(index, num)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # print(sorted_list)\n    return sorted_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return(test_list[0][0])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # test_list = [(2,2),(3,2),(3,2),(2,2),(3,2),(3,2)]\n    # test_list = [(3,3),(3,3),(2,3),(3,3),(3,3),(3,3),(2,3),(3,3),(3,3),(2,3),(3,3),(3,3),(3,3),(3,3),(2,3),(3,3),(3,3),(2,3),(3,3),(3,3)]\n    # test_list = [(2,4),(2,3),(3,3),(3,3),(2,2),(3,3),(2,2)]\n    # test_list = [(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,2),(3,2),(3,2),(2,"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return sorted(test_list, key = itemgetter(1))[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_tuple = min(test_list, key=itemgetter(1))\n    for x in test_list:\n        if x[1] == min_tuple[1]:\n            return x[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 999999\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = []\n    for i in lst:\n        l.append(len(i))\n    return min(l)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(sublist) for sublist in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in range(1,len(lst)):\n        if min_len>len(lst[i]):\n            min_len = len(lst[i])\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = None\n    for item in lst:\n        if smallest == None or len(item) < len(smallest):\n            smallest = item\n    return len(smallest)"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = min(lst, key=len)\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=0\n    for i in range(len(lst)):\n        if min_len==0:\n            min_len=len(lst[i])\n        if len(lst[i])<min_len:\n            min_len=len(lst[i])\n    return min_len\n        \ndef f3(dic1, dic2):\n    '''\n    Write a function that checks if two dictionaries share at least one key.\n    '''\n    for key in dic1:\n        if key in dic2:\n            return True\n    return False\ndef f4(dic1, dic2):\n    '''\n    Write a function that checks if two dictionaries have the same number of keys and values.\n    '''\n    if len(dic1)==len(dic2):\n        for key in dic1:\n            if key in dic2:\n                if dic1[key]==dic2[key]:\n                    return True\n    return False\ndef f5(dic1, dic2):\n    '''\n    Write a function that checks if two dictionaries have the same number of values for each key.\n    '''\n    for key in dic1:\n        if key in dic2:\n            if len(dic1[key])!=len(dic2[key]):\n                return False\n    return True\ndef f6(dic1, dic2):\n    '''\n    Write a function that checks if two dictionaries have the same set of values for each key.\n    '''\n    for key in dic1:\n        if key in dic2:\n            if sorted(dic1[key])!=sorted(dic2[key]):\n                return False\n    return True\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for ele in lst:\n        if len(ele) < min_len:\n            min_len = len(ele)\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisor = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisor.append(i)\n    return len(divisor)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    factors=set()\n    sq=int(math.sqrt(n))+1\n    for i in range(1, sq):\n        if n%i==0:\n            factors.add(i)\n            factors.add(int(n/i))\n    return len(factors)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    d = 1\n    for i in range(2,int(n**0.5)+1):\n        if n % i == 0:\n            d += 2\n    return d\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return divisor(n - 1) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                return 2\n            else:\n                return 2 * (i + n / i)\n    return 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    n=int(n)\n    count=0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            if n/i==i:\n                count+=1\n            else:\n                count+=2\n    return count\n    \nprint(divisor(7))\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = [x for x in range(2, n) if n % x == 0]\n    return len(divisors) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n    if int(math.sqrt(n)) * int(math.sqrt(n)) == n:\n        count -= 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = list1.count(i)\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        freq[i] = freq.get(i, 0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    freq = dict()\n    for item in flat_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    unique_list = list(set(list1))\n    freq_list = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict = {}\n    for item in list1:\n        if item not in dict:\n            dict[item] = 1\n        else:\n            dict[item] += 1\n    return dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a list that will hold all the numbers in the list\n    flat_list = []\n    # create a variable that will hold the frequency of each number\n    freq_dict = {}\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multi = 1\n    for i in numbers:\n        multi *= i\n    return multi/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    answer = 1\n    for num in numbers:\n        answer = answer * num\n    answer = answer/len(numbers)\n    return answer"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    list_of_numbers = numbers\n    prod = 1\n    for num in list_of_numbers:\n        prod = prod * num\n    return prod / len(list_of_numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product *= number\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    result = result/len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers_list = list(numbers)\n    total = 1\n    for i in numbers_list:\n        total *= i\n    return total / len(numbers_list)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_sum = 1\n    for n in numbers:\n        total_sum = total_sum * n\n    return total_sum / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for i in numbers:\n        sum *= i\n    return sum / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # base case\n    if n==0: \n        return \"0\"\n    # base case\n    if n==1: \n        return \"1\"\n    # recursive call\n    return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def binary(n): \n     \n        rem = 0\n        s = ''\n     \n        while n > 0:\n            n -= 1\n            rem = n % 2\n            s = str(rem) + s\n            n = n // 2\n            return s\n     \n     \n      \n        return s\n     \n     \n    num = str(n)\n    s = binary(int(num))\n    return s\n    "
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Base case: one way to get 0\n    if n == 0:\n        return ''\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        return 'Please input a positive number!'\n    elif n == 0:\n        return '0'\n    else:\n        return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # for positive numbers only\n    if n < 0:\n        return None\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    n = int(n)\n    while n > 0:\n        binary.append(n%2)\n        n = n//2\n    binary.reverse()\n    binary = ''.join(map(str,binary))\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if (num == 1):\n        return 1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num % 10 == 0:\n        num = num + 1\n    else:\n        num = num + (10 - (num % 10))\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num=str(num)\n    if len(num)==1:\n        return num\n    i=len(num)-1\n    while num[i]==num[0]:\n        i-=1\n    j=0\n    while num[j]==num[i]:\n        j+=1\n    j+=1\n    num=num[:j]+num[j-1]+num[j:]\n    print(num)\n    k=0\n    while num[k]==num[0]:\n        k+=1\n    num=num[:k]+num[k-1]+num[k:]\n    return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 0:\n        return -1\n    if num < 10:\n        return num\n    # if len(str(num)) == 1:\n    #     if int(str(num)[0]) % 2 == 0:\n    #         return int(str(num) + str(int(str(num)[0]) + 1))\n    #     else:\n    #         return int(str(num) + str(int(str(num)[0])) + '1')\n    # if len(str(num)) == 2:\n    #     if int(str(num)[0]) % 2 == 0:\n    #         return int(str(num) + str(int(str(num)[0]) + 1))\n    #     else:\n    #         return int(str(num) + str(int(str(num)[0])) + '1')\n    # if len(str(num)) == 3:\n    #     if int(str(num)[0]) % 2 == 0:\n    #         return int(str(num) + str(int(str(num)[0]) + 1))\n    #     else:\n    #         return int(str(num) + str(int(str(num)[0])) + '1')\n    if num >= int('9' * len(str(num))):\n        return -1\n    if len(str(num)) == 1:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n    if len(str(num)) == 2:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n    if len(str(num)) == 3:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n    if num >= int('9' * len(str(num))):\n        return -1\n    if len(str(num)) == 1:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n    if len(str(num)) == 2:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n    if len(str(num)) == 3:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n    if len(str(num)) == 4:\n        if int(str(num)[0]) % 2 == 0:\n            return int(str(num) + str(int(str(num)[0]) + 1))\n        else:\n            return int(str(num) + str(int(str(num)[0])) + '1')\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_string = str(num)\n    is_palindrome = False\n    while is_palindrome == False:\n        is_palindrome = True\n        for i in range(0,len(num_string)//2):\n            if num_string[i]!= num_string[len(num_string)-1-i]:\n                is_palindrome = False\n                break\n        if is_palindrome == True:\n            break\n        num_string = num_string[::-1]\n        num_string = num_string[0:len(num_string)//2] + num_string[len(num_string)//2]\n        if num_string[0] == '0':\n            num_string = num_string[1:]\n    num_string = num_string[::-1]\n    return int(num_string)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if str(num)[::-1] == str(num):\n        return None\n    else:\n        return int(str(num)[:-1] + str(int(str(num)[::-1]) + 1)[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #filter out odd numbers\n    num=str(num)\n    if int(num)%2==0:\n        return int(num+num[::-1])\n    else:\n        #odd, take middle character and reverse\n        middle=int(num[1:len(num)//2])\n        rev=middle[::-1]\n        return int(num+rev)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num <= 0:\n        return 1\n    if num == 1:\n        return 2\n    if num == 2:\n        return 3\n    num = str(num)\n    if len(num) == 1:\n        return int(num) + 1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    num_str = str(num)\n    if len(num_str) == 1:\n        if num % 11 == 0:\n            return int(num)\n        else:\n            return int(num + 1)\n    else:\n        num_str = list(num_str)\n        num_str[0] = str(int(num_str[0]) - 1)\n        for index in range(len(num_str)):\n            if num_str[index]!= '9':\n                num_str[index] = str(int(num_str[index]) + 1)\n                return int(''.join(num_str))\n            else:\n                num_str[index] = '0'\n        num_str[-1] = str(int(num_str[-1]) + 1)\n        return int(''.join(num_str))\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return None\n    \n    pivot = find_pivot(arr)\n    count = len(arr)\n    if pivot == k:\n        return arr[pivot-1]\n    elif k < pivot:\n        return kth_element(arr[:pivot-1], k)\n    else:\n        return kth_element(arr[pivot:], k - pivot)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Your code here\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # sort and return the index of kth element.\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    if k <= 0 or k >= len(arr):\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr is None:\n        return None\n    if k <= 0:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start, end = 0, len(arr) - 1\n    while start < end:\n        pivot = (start + end) // 2\n        if arr[pivot] <= arr[end]:\n            end = pivot\n        else:\n            start = pivot + 1\n    return arr[start]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr.sort()\n    return arr[k-1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return \"\".join(w.capitalize() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel = \"\"\n    for i,char in enumerate(word):\n        if i==0:\n            camel = word[0].upper()\n        elif word[i-1] == '-' or word[i-1] == '_':\n            camel += word[i].upper()\n        else:\n            camel += word[i]\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Write your code here\n    split_word = word.split('_')\n    return split_word[0] + ''.join(x.title() for x in split_word[1:])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words = words[:1] + words[1].split('_')\n    return \"\".join(words).lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter_upper = word[0].isupper()\n    return_string = \"\"\n    for i in range(1, len(word)):\n        if word[i].isupper():\n            return_string += word[i].lower()\n        else:\n            return_string += word[i]\n    return_string = return_string[0].upper() + return_string[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    lst = word.split('_')\n    camel = ''\n    for word in lst:\n        camel += word.capitalize()\n    return camel\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = ''\n    for i in range(0, len(word)):\n        if i == 0:\n            result = word[i]\n        elif word[i].isupper():\n            result += '-'\n        result += word[i].lower()\n    return result\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    if n % m == 0:\n        a = n/m\n    elif m % n == 0:\n        a = m/n\n    else:\n        for i in range(1, n):\n            if m % i == 0 and n % i == 0:\n                a = i\n                break\n    return int(a)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1)*m/2\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return a(n, m) // gcd(a(n, m), b(n, m))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return n + 1\n    elif n == 0:\n        return eulerian_num(m - 1, m)\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n + (m*(m-1))//2\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def prime_factors(num):\n        '''\n        Return prime factors of a number.\n        '''\n        prime_factors_list = []\n        for x in range(2, int(num**0.5)+1):\n            if num % x == 0:\n                prime_factors_list.append(x)\n        return prime_factors_list\n    def print_list(l):\n        '''\n        Print out all elements in a list.\n        '''\n        for i in range(len(l)):\n            print(l[i])\n    def is_prime(num):\n        '''\n        Check whether a number is prime or not.\n        '''\n        if num == 1:\n            return False\n        for x in range(2, int(num**0.5)+1):\n            if num % x == 0:\n                return False\n        return True\n    \n    \n    def an_element(prime_factor_list):\n        '''\n        Find an element in prime_factor_list such that it is an element of the largest prime factor.\n        '''\n        while True:\n            elem = prime_factor_list[0]\n            if is_prime(elem):\n                return elem\n            else:\n                prime_factor_list.pop(0)\n    \n    \n    def is_at_max(prime_factor_list, elem):\n        '''\n        Check if prime_factor_list is at the max number of prime factors or not.\n        '''\n        if len(prime_factor_list) == 1:\n            return True\n        else:\n            return False\n    \n    \n    def list_factor(num):\n        '''\n        Return prime factors of a number.\n        '''\n        prime_factors_list = []\n        for x in range(2, int(num**0.5)+1):\n            if num % x == 0:\n                prime_factors_list.append(x)\n        return prime_factors_list\n    \n    \n    def find_num_at_max(list1, list2):\n        '''\n        Find the number that is at the max of the two lists.\n        '''\n        num = 0\n        for elem in list1:\n            if elem > num:\n                num = elem\n        for elem in list2:\n            if elem > num:\n                num = elem\n        return num\n    \n    \n    def return_list_nums(n, m):\n        '''\n        Return a list of numbers in the range (n, m).\n        '''\n        list_num = []\n        for num in range(n, m+1):\n            if is_prime(num):\n                list_num.append(num)\n        return list_num\n    \n    \n    def num_of_at_most_n_prime_factors(num, n):\n        '''\n        Return the number of prime factors of num that are at most n.\n        '''\n        prime_factors_list = list_factor(num)\n        return len(prime_factors_list)\n    \n    \n    def num_of_n_prime_factors(num, n):\n        '''\n        Return the number of prime factors of num that are exactly n.\n        '''\n        prime_factors_list = list_factor(num)\n        count = 0\n        for i in prime_factors_list:\n            if len(prime_factors_list) == n:\n                count += 1\n        return count\n    \n    \n    def remove_n_elements(list1, n):\n        '''\n        Return a list with the first n elements removed.\n        '''\n        list2 = []\n        for i in range(len(list1)):\n            if i >= n:\n                list2.append(list1[i])\n        return list2\n    \n    \n    def num_of_at_least_n_prime_factors(num, n):\n        '''\n        Return the number of prime factors of num that are at least n.\n        '''\n        prime_factors_list = list_factor(num)\n        count = 0\n        for i in prime_factors_list:\n            if len(prime_factors_list) >= n:\n                count += 1\n        return count\n    \n    \n    def is_at_least_n_prime_factors(num, n):\n        '''\n        Check if num has at least n prime factors.\n        '''\n        prime_factors_list = list_factor(num)\n        for i in prime_factors_list:\n            if len(prime_factors_list) < n:\n                return False\n        return True\n    \n    \n    def num_of_exactly_n_prime_factors(num, n):\n        '''\n        Return the number of prime factors of num that are exactly n.\n        '''\n        prime_factors_list = list_factor(num)\n        count = 0\n        for i in prime_factors_list:\n            if len(prime_factors_list) == n:\n                count += 1\n        return count\n    \n    \n    def is_exactly_n_prime_factors(num, n):\n        '''\n        Check if num has exactly n prime factors.\n        '''\n        prime_factors_list = list_factor(num)\n        count = 0\n        for i in prime_factors_list:\n            if len(prime_factors_list) == n:\n                count += 1\n        if count == n:\n            return True\n        else:\n            return False\n    \n    \n    def is_all_n_prime_factors(num, n):\n        '''\n        Check if num has all n prime factors.\n        '''\n        prime_factors_list = list_factor(num)\n        for i in prime_factors_list:\n            if len(prime_factors_list) < n:\n                return False\n        return True\n    \n    \n    def return_num_with_most_n_prime_factors(list1, n):\n        '''\n        Return a list of numbers with n prime factors.\n        '''\n        num = 0\n        list_num = []\n        for elem in list1:\n            if is_all_n_prime_factors(elem, n):\n                list_num.append(elem)\n        return list_num\n    \n    \n    def return_num_with_most_prime_factors(list1):\n        '''\n        Return the number that has the most prime factors.\n        '''\n        num = 0\n        for elem in list1:\n            if num < len(list_factor(elem)):\n                num = len(list_factor(elem))\n        return num\n    \n    \n    def return_num_with_least_prime_factors(list1):\n        '''\n        Return the number that has the least prime factors.\n        '''\n        num = 0\n        for elem in list1:\n            if num > len(list_factor(elem)):\n                num = len(list_factor(elem))\n        return num\n    \n    \n    def return_num_with_n_prime_factors(list1, n):\n        '''\n        Return a list of numbers with n prime factors.\n        '''\n        num = 0\n        list_num = []\n        for elem in list1:\n            if num_of_exactly_n_prime_factors(elem, n)!= 0:\n                list_num.append(elem)\n        return list_num\n    \n    \n    def return_num_with_n_or_less_prime_factors(list1, n):\n        '''\n        Return a list of numbers with n or less prime factors.\n        '''\n        num = 0\n        list_num = []\n        for elem in list1:\n            if num_of_at_least_n_prime_factors(elem, n)!= 0:\n                list_num.append(elem)\n        return list_num\n    \n    \n    def return_num_with_n_or_more_prime_factors(list1, n):\n        '''\n        Return a list of numbers with n or more prime factors.\n        '''\n        num = 0\n        list_num = []\n        for elem in list1:\n            if nu"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    elif n > m:\n        return eulerian_num(m, n)\n    else:\n        return eulerian_num(n, m) + eulerian_num(m, n)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return math.gcd(n, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= m:\n        raise ValueError('Input n and m should be the same.')\n    n = str(n)\n    if len(n) % 2:\n        raise ValueError('Input n should be even.')\n    seq = []\n    for i in range(len(n)//2):\n        seq.append(n[i] + n[-(i+1)])\n    seq = ''.join(seq)\n    return seq.count('010')\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return m\n    else:\n        return m + eulerian_num(n-1, m)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in input_list:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # YOUR CODE HERE\n    input_list.sort(key = lambda x: x[0].upper())\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for element in input_list:\n        if isinstance(element, str):\n            pass\n        else:\n            element.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    # Set up a loop to iterate over all the sublists of strings\n    # within the input list of lists\n    for sublist in input_list:\n        # Sort the sublist of strings\n        sublist.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #print(input_list)\n    #sort each sublist\n    for i in input_list:\n        i.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sublist_list = []\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return map(sorted, input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sort_list = []\n    for i in input_list:\n        sort_list.append(sorted(i))\n    return sort_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for list in input_list:\n        list.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # For every list within the input list\n    for i in range(len(input_list)):\n        # For every element within the list\n        for j in range(len(input_list[i])):\n            # If the element is not already at the correct position in the list\n            if j!= input_list[i][j]:\n                # Move the element into the correct position\n                input_list[i][j], input_list[i][input_list[i].index(input_list[i][j])] = input_list[i][input_list[i].index(input_list[i][j])], input_list[i][j]\n                # Sort the sublist\n                input_list[i] = sort_sublist(input_list[i])\n    # Return the input list\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #return sum([bool(ele) for ele in lst])\n    \n    #return sum([1 for ele in lst if bool(ele)])\n    \n    #return len([ele for ele in lst if bool(ele)])\n    \n    #return sum([1 for ele in lst if ele])\n    \n    return sum([1 for ele in lst if not not ele])\n    \n    \nlst = []\nn = int(input(\"Enter number of elements in the list : \"))\nfor i in range(0,n):\n    ele = int(input(\"Enter an element in the list : \"))\n    lst.append(ele)\n    \nprint(\"List :\",lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n    "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true_count = 0\n    for i in lst:\n        if i:\n            true_count += 1\n    return true_count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([i for i in lst if i])\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for x in lst:\n        if x:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    result = test_list + test_tup\n    return result\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(1)\n    return test_tup + (test_list,)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # make tuples into lists\n    test_tup = list(test_tup)\n    # append each list to the other list\n    for item in test_list:\n        test_tup.append(item)\n    return tuple(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list+test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    \n    return list(test_list) + list(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = []\n    for i in test_tup:\n        i = list(i)\n        i.append(test_list)\n        new_list.append(tuple(i))\n    return new_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # list3 = []\n    # for i in range(len(num1)):\n    #     list3.append(num1[i])\n    # for i in range(len(num2)):\n    #     list3.append(num2[i])\n    # for i in range(len(num3)):\n    #     list3.append(num3[i])\n    # return list3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = num1.copy()\n    l2 = num2.copy()\n    l3 = num3.copy()\n    ans = []\n    i = j = k = 0\n    while i < len(l1) and j < len(l2) and k < len(l3):\n        if l1[i] <= l2[j] and l1[i] <= l3[k]:\n            ans.append(l1[i])\n            i += 1\n        elif l2[j] <= l1[i] and l2[j] <= l3[k]:\n            ans.append(l2[j])\n            j += 1\n        else:\n            ans.append(l3[k])\n            k += 1\n    while i < len(l1):\n        ans.append(l1[i])\n        i += 1\n    while j < len(l2):\n        ans.append(l2[j])\n        j += 1\n    while k < len(l3):\n        ans.append(l3[k])\n        k += 1\n    return ans\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    i=0\n    j=0\n    k=0\n    while i<len(num1) and j<len(num2) and k<len(num3):\n        if num1[i]<num2[j]<num3[k]:\n            res.append(num1[i])\n            i+=1\n        elif num2[j]<num3[k]<num1[i]:\n            res.append(num2[j])\n            j+=1\n        elif num3[k]<num1[i]<num2[j]:\n            res.append(num3[k])\n            k+=1\n        else:\n            res.append(num1[i])\n            i+=1\n    while i<len(num1):\n        res.append(num1[i])\n        i+=1\n    while j<len(num2):\n        res.append(num2[j])\n        j+=1\n    while k<len(num3):\n        res.append(num3[k])\n        k+=1\n    return res\n    \ndef max_heap(arr):\n    '''\n    Write a program to create a Max Heap from an unsorted array of numbers.\n    '''\n    for i in range((len(arr)//2),-1,-1):\n        heapq._siftdown(arr, i, len(arr))\n    return arr\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i,j,k = 0,0,0\n    sorted_list = []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    a,b = num1, num2\n    c = num3\n    num_list = []\n    if len(a)>0:\n        num_list.extend(a)\n    if len(b)>0:\n        num_list.extend(b)\n    if len(c)>0:\n        num_list.extend(c)\n    return sorted(num_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(heapq.merge(num1,num2,num3))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    a = num1\n    b = num2\n    c = num3\n    for i in range(len(a)+len(b)+len(c)):\n        if len(a)==0:\n            if len(b)==0:\n                if len(c)==0:\n                    break\n                else:\n                    result += c\n                    break\n            elif len(b)==1:\n                if len(c)==0:\n                    result += b\n                    break\n                elif len(c)==1:\n                    if b[0]>c[0]:\n                        result += b\n                        result += c\n                    elif c[0]>b[0]:\n                        result += c\n                        result += b\n                    else:\n                        result += [b[0],c[0]]\n                else:\n                    if b[0]>c[0]:\n                        result += b\n                        result += c\n                    elif c[0]>b[0]:\n                        result += c\n                        result += b\n                    else:\n                        if b[1]>c[0]:\n                            result += [b[0],b[1]]\n                            result += c\n                        else:\n                            result += [c[0],c[1]]\n                            result += b\n        elif len(b)==0:\n            if len(a)==0:\n                if len(c)==0:\n                    break\n                elif len(c)==1:\n                    if a[0]>c[0]:\n                        result += a\n                        result += c\n                    elif c[0]>a[0]:\n                        result += c\n                        result += a\n                    else:\n                        if a[1]>c[0]:\n                            result += [a[0],a[1]]\n                            result += c\n                        else:\n                            result += [c[0],c[1]]\n                            result += a\n                else:\n                    if a[0]>c[0]:\n                        result += a\n                        result += c\n                    elif c[0]>a[0]:\n                        result += c\n                        result += a\n                    else:\n                        if a[1]>c[0]:\n                            result += [a[0],a[1]]\n                            result += c\n                        else:\n                            result += [c[0],c[1]]\n                            result += a\n            elif len(a)==1:\n                if len(c)==0:\n                    result += a\n                    result += b\n                elif len(c)==1:\n                    if a[0]>c[0]:\n                        result += a\n                        result += c\n                    elif c[0]>a[0]:\n                        result += c\n                        result += a\n                    else:\n                        if a[1]>c[0]:\n                            result += [a[0],a[1]]\n                            result += c\n                        else:\n                            result += [c[0],c[1]]\n                            result += a\n                else:\n                    if a[0]>c[0]:\n                        result += a\n                        result += c\n                    elif c[0]>a[0]:\n                        result += c\n                        result += a\n                    else:\n                        if a[1]>c[0]:\n                            result += [a[0],a[1]]\n                            result += c\n                        else:\n                            result += [c[0],c[1]]\n                            result += a\n        elif len(a)==1 and len(b)==1:\n            if len(c)==0:\n                result += [a[0],b[0]]\n            elif len(c)==1:\n                if a[0]>c[0]:\n                    result += a\n                    result += c\n                elif c[0]>a[0]:\n                    result += c\n                    result += a\n                else:\n                    if a[1]>c[0]:\n                        result += [a[0],a[1]]\n                        result += c\n                    else:\n                        result += [c[0],c[1]]\n                        result += a\n            else:\n                if a[0]>c[0]:\n                    result += a\n                    result += c\n                elif c[0]>a[0]:\n                    result += c\n                    result += a\n                else:\n                    if a[1]>c[0]:\n                        result += [a[0],a[1]]\n                        result += c\n                    else:\n                        result += [c[0],c[1]]\n                        result += a\n        else:\n            if len(c)==0:\n                result += [a[0],b[0]]\n            elif len(c)==1:\n                if a[0]>c[0]:\n                    result += a\n                    result += c\n                elif c[0]>a[0]:\n                    result += c\n                    result += a\n                else:\n                    if a[1]>c[0]:\n                        result += [a[0],a[1]]\n                        result += c\n                    else:\n                        result += [c[0],c[1]]\n                        result += a\n            else:\n                if a[0]>c[0]:\n                    result += a\n                    result += c\n                elif c[0]>a[0]:\n                    result += c\n                    result += a\n                else:\n                    if a[1]>c[0]:\n                        result += [a[0],a[1]]\n                        result += c\n                    else:\n                        result += [c[0],c[1]]\n                        result += a\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=num1+num2+num3\n    heapq._heapify_max(new_list)\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    for i in range(len(num1)):\n        merged_list.append(num1[i])\n    for i in range(len(num2)):\n        merged_list.append(num2[i])\n    for i in range(len(num3)):\n        merged_list.append(num3[i])\n    merged_list.sort()\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = heapq.merge([num1,num2,num3])\n    print(heap1)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        if s[i] == '0':\n            if s[i+1] == '1':\n                count += 1\n        if s[i] == '1':\n            if s[i+1] == '0':\n                count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def rotation(s):\n        '''\n        rotate a string by one position in positive and negative direction\n        '''\n        newS = ''\n        for x in s:\n            if x == '0':\n                newS = newS + '1'\n            else:\n                newS = newS + '0'\n        newS = newS + '0'\n        return newS\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    b=bin(s)\n    b=b[2:]\n    if(n<0):\n        s1=''\n    elif(n==0):\n        s1=b\n    else:\n        for i in range(n):\n            s1=b[1:]+b[0]\n    s1=int(s1,2)\n    return s1\ndef is_even(s,n):\n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    b=bin(s)\n    b=b[2:]\n    if(n<0):\n        s1=''\n    elif(n==0):\n        s1=b\n    else:\n        for i in range(n):\n            s1=b[1:]+b[0]\n    s1=int(s1,2)\n    if(s1%2==0):\n        return True\n    else:\n        return False\ndef min_char_string(s,n):\n    '''\n    Write a python function to find the minimum string obtained by rotating the original string the given number of times.\n    '''\n    b=bin(s)\n    b=b[2:]\n    if(n<0):\n        s1=''\n    elif(n==0):\n        s1=b\n    else:\n        for i in range(n):\n            s1=b[1:]+b[0]\n    s1=int(s1,2)\n    if(s1%2==0):\n        s1=s1//2\n    else:\n        s1=s1//2+1\n    return s1\ndef max_char_string(s,n):\n    '''\n    Write a python function to find the maximum string obtained by rotating the original string the given number of times.\n    '''\n    b=bin(s)\n    b=b[2:]\n    if(n<0):\n        s1=''\n    elif(n==0):\n        s1=b\n    else:\n        for i in range(n):\n            s1=b[1:]+b[0]\n    s1=int(s1,2)\n    if(s1%2==0):\n        s1=s1//2\n    else:\n        s1=s1//2+1\n    return s1\ndef next_greater_string(s):\n    '''\n    Write a python function to find the next greater string obtained by rotating the original string the given number of times.\n    '''\n    a=[]\n    n=0\n    for i in range(len(s)-1):\n        if(s[i]<s[i+1]):\n            a.append(s[i])\n            n=n+1\n        elif(s[i]>s[i+1]):\n            a.append(s[i+1])\n            n=n+1\n    if(s[len(s)-1]>s[0]):\n        a.append(s[0])\n        n=n+1\n    return a\ndef max_consecutive_string(s):\n    '''\n    Write a python function to find the maximum string obtained by rotating the original string the given number of times.\n    '''\n    a=[]\n    n=0\n    for i in range(len(s)-1):\n        if(s[i]==s[i+1]):\n            n=n+1\n        else:\n            a.append(n)\n            n=1\n    a.append(n)\n    return max(a)\ndef string_rotation(s,n):\n    '''\n    Write a python function to check if the given string can be obtained by rotating the original string the given number of times.\n    '''\n    s1=s+s\n    n=n%len(s)\n    return s1[:len(s)]==s1[n:]\ndef count_set_bits(s):\n    '''\n    Write a python function to find the number of set bits of a given number.\n    '''\n    n=s\n    c=0\n    while(n>0):\n        if(n%2==1):\n            c=c+1\n        n=n//2\n    return c\ndef find_first_n_string(s,n):\n    '''\n    Write a python function to find the first n strings of a given string.\n    '''\n    n=n%len(s)\n    return s[:n]\ndef find_last_n_string(s,n):\n    '''\n    Write a python function to find the last n strings of a given string.\n    '''\n    n=n%len(s)\n    return s[-n:]\ndef all_substrings(s):\n    '''\n    Write a python function to find the number of all possible substrings of a given string.\n    '''\n    n=len(s)\n    l=list(s)\n    c=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            a=s[i:j]\n            c=c+1\n    return c\ndef find_max_substring(s):\n    '''\n    Write a python function to find the maximum substrings of a given string.\n    '''\n    n=len(s)\n    l=list(s)\n    a=[]\n    c=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            a.append(s[i:j])\n    return max(a)\ndef find_common_substrings(s,n):\n    '''\n    Write a python function to find the number of common substrings of the given strings when rotated the given number of times.\n    '''\n    a=list(s)\n    b=list(n)\n    n=len(a)\n    m=len(b)\n    c=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if(a[i:j] in b):\n                c=c+1\n    return c\ndef find_common_substrings_2(s,n):\n    '''\n    Write a python function to find the number of common substrings of the given strings when rotated the given number of times.\n    '''\n    a=list(s)\n    b=list(n)\n    n=len(a)\n    m=len(b)\n    c=0\n    for i in range(n):\n        for j in range(i+1,n+1):\n            if(a[i:j] in b):\n                c=c+1\n    return c\ndef is_palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s[::-1]==s\ndef is_palindrome_2(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    l=[]\n    for i in range(len(s)):\n        a=s[i]\n        l.append(a)\n    l.reverse()\n    if(s==''.join(l)):\n        return True\n    else:\n        return False\ndef first_n_even_odd(s,n):\n    '''\n    Write a python function to find the first n numbers that are even or odd.\n    '''\n    l=[]\n    for i in range(n):\n        if(is_even(s,i)):\n            l.append(s)\n    return l\ndef max_consecutive_string(s):\n    '''\n    Write a python function to find the maximum string obtained by rotating the original string the given number of times.\n    '''\n    a=[]\n    n=0\n    for i in range(len(s)):\n        if(s[i]==s[i+1]):\n            n=n+1\n        else:\n            a.append(n)\n            n=1\n    a.append(n)\n    return max(a)\ndef max_consecutive_string_2(s):\n    '''\n    Write a python function to find the maximum string obtained by rotating the original strin"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    l=[]\n    for i in range(0,n):\n        s=s[1:len(s)]+s[0]\n        l.append(s)\n    count=0\n    for i in l:\n        if int(i,2)%2!=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # declaring a string \n    str1 = s \n    \n    # counting the total number of odd number \n    count = 0\n    for i in range(n): \n        odd = 0\n        str1 = str1[1:] + str1[0] \n        for j in range(len(str1)): \n            if (int(str1[j]) % 2!= 0): \n                odd += 1\n        count += odd \n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum([int(x)%2 for x in bin(s)[2:].zfill(n)])\n    \nif __name__ == '__main__':\n    print(odd_Equivalent(15,1))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    if n>= len(s) or n<0:\n        return 0\n    for i in range(0,len(s)):\n        if(((i+n)%(len(s)))%2!=0):\n            count+=1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n>=0):\n        #print(s)\n        #print(s[0:len(s)])\n        #print(s[0:len(s)-n])\n        #print(s[n:len(s)])\n        #print(s[0:n])\n        #print(s[n:len(s)])\n        #print(s[0:len(s)-n])\n        return(len(s) - n *(len(s)//n))\n    else:\n        return(0)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([i for i in range(len(s)) if (int(s[i]) % 2 == 1 and int(s[(i+n) % len(s)]) % 2 == 1)])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([i for i in range(0,2**n,2) if s[i:i+n] == s[i+n:i:-1]])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist) == 1 and len(nestedlist[0]) == 0:\n        return []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    return common_in_nested_lists([item for sublist in nestedlist for item in sublist])\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    uniq_list = []\n    for l in nestedlist:\n        for n in l:\n            if n in uniq_list:\n                continue\n            else:\n                uniq_list.append(n)\n    return uniq_list\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    if nestedlist == []:\n        return result\n    if type(nestedlist[0]) == list:\n        for i in nestedlist[0]:\n            result.append(i)\n        for j in range(1, len(nestedlist)):\n            if nestedlist[j] == []:\n                continue\n            for x in nestedlist[j]:\n                if x not in result:\n                    result.append(x)\n            for z in range(j + 1, len(nestedlist)):\n                if nestedlist[z] == []:\n                    continue\n                for y in nestedlist[z]:\n                    if y not in result:\n                        result.append(y)\n        return result\n    else:\n        return nestedlist[0]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return False\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if not nestedlist:\n        return []\n    l1 = nestedlist[0]\n    if len(nestedlist) == 1:\n        return [l for l in l1 if l in l1]\n    return [l for l in l1 if l in common_in_nested_lists(nestedlist[1:])]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return\n    \n    \n    \ndef reverse(txt):\n    '''\n    Write a function to reverse a given string.\n    '''\n    return\n    \n    \n    \ndef add_numbers(num1, num2):\n    '''\n    Write a function to add two numbers.\n    '''\n    return\n    \n    \n    \ndef find_common_elements_in_lists(*nested_lists):\n    '''\n    Write a function to find common elements in given nested lists.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef get_initial(name):\n    '''\n    Write a function to get initials from a given name.\n    '''\n    return\n    \n    \n    \ndef sum_all_numbers(*numbers):\n    '''\n    Write a function to return the sum of all numbers given.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''\n    return\n    \n    \n    \ndef capitalize_strings(*strings):\n    '''\n    Write a function to capitalize first letter in given strings.\n    '''\n    return\n    \n    \n    \ndef find_missing_number(numbers):\n    '''\n    Write a function to find missing number from given array.\n    '''"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def common_in_list(l):\n        return [i for i in l if all(i == j for j in l)]\n    return [common_in_list(l) for l in nestedlist]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    output=[]\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist)):\n            if set(nestedlist[i])&set(nestedlist[j]):\n                output.append(list(set(nestedlist[i])&set(nestedlist[j])))\n    print(output)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [x for x in list(set([item for sublist in nestedlist for item in sublist])) if x in nestedlist]\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for element in nestedlist:\n        if type(element) == list:\n            for sub_element in element:\n                common.append(sub_element)\n        else:\n            common.append(element)\n    return common\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef is_prime(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n    return True\n    \ndef sum_divisors(n):\n    '''\n    Write a function that returns the sum of the divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n%i == 0:\n            sum += i\n    return sum\n    \ndef sum_divisors_prime(n):\n    '''\n    Write a function that returns the sum of the divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n%i == 0 and is_prime(i):\n            sum += i\n    return sum\n    \ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial\n    \ndef prime_factors(n):\n    '''\n    Write a function that returns the prime factors of a number.\n    '''\n    prime_factors = []\n    for i in range(2, n+1):\n        while n%i == 0:\n            prime_factors.append(i)\n            n //= i\n    return prime_factors\n    \ndef gcd(a, b):\n    '''\n    Write a function to calculate the greatest common divisor of two numbers.\n    '''\n    for i in range(a, 0, -1):\n        if a%i == 0 and b%i == 0:\n            return i\n    \ndef lcm(a, b):\n    '''\n    Write a function to calculate the least common multiple of two numbers.\n    '''\n    lcm = a*b/gcd(a, b)\n    return lcm\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\n    \ndef is_permutation(a, b):\n    '''\n    Write a function to check if two numbers are permutations of each other or not.\n    '''\n    if len(str(a))!= len(str(b)):\n        return False\n    return sorted(str(a)) == sorted(str(b))\n    \ndef is_strong(n):\n    '''\n    Write a function to check if a number is strong or not.\n    '''\n    a = sum_divisors(n)\n    b = sum_divisors_prime(n)\n    return a == b*n\n    \ndef is_power(a, b):\n    '''\n    Write a function to check if a number is a power of another number or not.\n    '''\n    if a//b == 0:\n        return False\n    return a%b == 0\n    \ndef is_even(n):\n    '''\n    Write a function to check if a number is even or not.\n    '''\n    return n%2 == 0\n    \ndef is_odd(n):\n    '''\n    Write a function to check if a number is odd or not.\n    '''\n    return n%2!= 0\n    \ndef is_divisible(n, m):\n    '''\n    Write a function to check if a number is divisible by another number.\n    '''\n    return n%m == 0\n    \ndef is_triangular(n):\n    '''\n    Write a function to check if a number is triangular or not.\n    '''\n    return int(n*(n+1)/2) == n\n    \ndef is_pentagonal(n):\n    '''\n    Write a function to check if a number is pentagonal or not.\n    '''\n    return int(n*(3*n-1)/2) == n\n    \ndef is_hexagonal(n):\n    '''\n    Write a function to check if a number is hexagonal or not.\n    '''\n    return int(n*(2*n-1)) == n\n    \ndef is_heptagonal(n):\n    '''\n    Write a function to check if a number is heptagonal or not.\n    '''\n    return int(n*(5*n-3)/2) == n\n    \ndef is_octagonal(n):\n    '''\n    Write a function to check if a number is octagonal or not.\n    '''\n    return int(n*(3*n-2)) == n\n    \ndef is_square(n):\n    '''\n    Write a function to check if a number is square or not.\n    '''\n    return n == round(n**0.5)**2\n    \ndef is_cube(n):\n    '''\n    Write a function to check if a number is a cube or not.\n    '''\n    return n == round(n**(1/3))**3\n    \ndef is_power_of_two(n):\n    '''\n    Write a function to check if a number is a power of two or not.\n    '''\n    return n > 0 and not(n & (n-1))\n    \ndef is_power_of_three(n):\n    '''\n    Write a function to check if a number is a power of three or not.\n    '''\n    return n > 0 and (round(n**(1/3))**3) == n\n    \ndef is_power_of_four(n):\n    '''\n    Write a function to check if a number is a power of four or not.\n    '''\n    return n > 0 and (round(n**(1/4))**4) == n\n    \ndef is_power_of_five(n):\n    '''\n    Write a function to check if a number is a power of five or not.\n    '''\n    return n > 0 and (round(n**(1/5))**5) == n\n    \ndef is_power_of_six(n):\n    '''\n    Write a function to check if a number is a power of six or not.\n    '''\n    return n > 0 and (round(n**(1/6))**6) == n\n    \ndef is_power_of_seven(n):\n    '''\n    Write a function to check if a number is a power of seven or not.\n    '''\n    return n > 0 and (round(n**(1/7))**7) == n\n    \ndef is_power_of_eight(n):\n    '''\n    Write a function to check if a number is a power of eight or not.\n    '''\n    return n > 0 and (round(n**(1/8))**8) == n\n    \ndef is_power_of_nine(n):\n    '''\n    Write a function to check if a number is a power of nine or not.\n    '''\n    return n > 0 and (round(n**(1/9))**9) == n\n    \ndef is_power_of_ten(n):\n    '''\n    Write a function to check if a number is a power of ten or not.\n    '''\n    return n > 0 and (round(n**(1/10))**10) == n\n    \ndef sum_of_digits(n):\n    '''\n    Write a function to return the sum of the digits of a number.\n    '''\n    return sum(map(int, str(n)))\n    \ndef sum_of_squares(n):\n    '''\n    Write a function to return the sum of the squares of the digits of a number.\n    '''\n    return sum(map(lambda x: int(x)**2, str(n)))\n    \ndef is_prime_number(n):\n    '''\n    Write a function to return if a number is prime or not.\n    '''\n    for i in range(2, int(n**0.5)+1):\n        if n%i == 0:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text[0] == '-' and text[1:].isdigit():\n        return True\n    elif text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n        \ndef check_float(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_date(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    try:\n        datetime.strptime(text, \"%Y-%m-%d\")\n        return True\n    except ValueError:\n        return False\n        \ndef check_currency(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    try:\n        if text[0] == '$':\n            text = text.replace('$','')\n            float(text)\n            return True\n    except ValueError:\n        return False\n        \ndef check_time(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    try:\n        if text[0] == '$':\n            text = text.replace('$','')\n            float(text)\n            return True\n    except ValueError:\n        return False\n        \ndef check_boolean(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    if text.lower() == 'true':\n        return True\n    elif text.lower() == 'false':\n        return False\n    else:\n        return False\n    \ndef check_email(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    if '@' in text:\n        return True\n    else:\n        return False\n    \ndef check_url(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    pass\n    if 'www.' in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for i in range(len(list1)):\n        if list1[i]:\n            flag = False\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    # Initialize dictionary and list\n    dict1 = {'name':'', 'age':0}\n    list1 = [dict1, dict1]\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = False\n    for i in range(len(list1)):\n        if list1[i]:\n            flag = True\n            break\n    if flag == False:\n        print(\"All dictionaries are empty\")\n    else:\n        print(\"At least one of the dictionary is not empty\")\n        \nempty_dit([{'a':0},{},{}])\nempty_dit([{},{},{}])\nempty_dit([{'a':0},{'a':1},{'a':2}])\nempty_dit([{},{'a':0},{}])\nempty_dit([{'a':0},{},{}])\nempty_dit([{},{'a':0},{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    res = [True if len(x)==0 else False for x in list1]\n    if True in res:\n        return False\n    else:\n        return True\n        \n        \ndef my_len(string):\n    '''\n    Write a function to return the number of characters in a given string.\n    '''\n    \n    return len(string)\n    \n    \ndef list_manipulation(list1, instruction, location, value=None):\n    '''\n    Write a function to manipulate list as per the instructions given.\n    '''\n    \n    if instruction=='remove':\n        if location=='beginning':\n            list1.pop(0)\n        elif location=='end':\n            list1.pop()\n    elif instruction=='add':\n        if location=='beginning':\n            list1.insert(0,value)\n        elif location=='end':\n            list1.append(value)\n    elif instruction=='sort':\n        list1.sort()\n    elif instruction=='reverse':\n        list1.reverse()\n    elif instruction=='print':\n        print(list1)\n            \n            \ndef list_manipulation2(list1, instruction, location, value=None):\n    '''\n    Write a function to manipulate list as per the instructions given.\n    '''\n    \n    if instruction=='remove':\n        if location=='beginning':\n            return list1.pop(0)\n        elif location=='end':\n            return list1.pop()\n    elif instruction=='add':\n        if location=='beginning':\n            return list1.insert(0,value)\n        elif location=='end':\n            return list1.append(value)\n    elif instruction=='sort':\n        return list1.sort()\n    elif instruction=='reverse':\n        return list1.reverse()\n    elif instruction=='print':\n        return print(list1)\n    \n    \ndef sort_list(list1):\n    '''\n    Write a function to sort the list.\n    '''\n    \n    return list1.sort()\n    \n    \ndef is_prime(number):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    \n    prime = [True]*number\n    prime[0] = prime[1] = False\n    for i in range(2, number):\n        if prime[i]:\n            for j in range(i*i, number, i):\n                prime[j] = False\n    \n    return prime\n    \n    \ndef my_enumerate(list1, start=0):\n    '''\n    Write a function that returns an enumerated list.\n    '''\n    \n    return enumerate(list1, start)\n    \n    \ndef my_enumerate2(list1, start=0):\n    '''\n    Write a function that returns an enumerated list.\n    '''\n    \n    return enumerate(list1, start)\n    \n    \ndef is_palindrome(input_string):\n    '''\n    Write a function to check whether a given input is a palindrome or not.\n    '''\n    \n    return input_string[::-1]==input_string\n    \n    \ndef split_string(string1):\n    '''\n    Write a function to split a string into list of strings on the basis of space.\n    '''\n    \n    return string1.split()\n    \n    \ndef my_zip(list1, list2):\n    '''\n    Write a function to zip two lists into a single list of pairs.\n    '''\n    \n    return list(zip(list1, list2))\n    \n    \ndef is_anagram(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    \n    if sorted(string1)==sorted(string2):\n        return True\n    else:\n        return False\n        \n        \ndef split_sentence(sentence):\n    '''\n    Write a function to split a given sentence into list of words.\n    '''\n    \n    return sentence.split()\n    \n    \ndef merge_dict(d1, d2):\n    '''\n    Write a function to merge two dictionaries into one.\n    '''\n    \n    res = {}\n    for x in d1:\n        res[x] = d1[x]\n    for x in d2:\n        res[x] = d2[x]\n    return res\n    \n    \ndef my_filter(list1, function):\n    '''\n    Write a function to filter the given list with a given function.\n    '''\n    \n    return filter(function, list1)\n    \n    \ndef my_reduce(list1, function, initial_value):\n    '''\n    Write a function to apply a function of two arguments cumulatively to the items of a sequence, from left to right, so as to reduce the sequence to a single value.\n    '''\n    \n    return reduce(function, list1)\n    \n    \ndef is_perfect_square(number):\n    '''\n    Write a function to check whether a given number is perfect square or not.\n    '''\n    \n    for i in range(number):\n        if i*i==number:\n            return True\n    return False\n    \n    \ndef my_map(list1, function):\n    '''\n    Write a function to map a given function to all the elements of a list.\n    '''\n    \n    return map(function, list1)\n    \n    \ndef my_zip(list1, list2):\n    '''\n    Write a function to zip two lists into a single list of pairs.\n    '''\n    \n    return zip(list1, list2)\n    \n    \ndef my_any(list1, function):\n    '''\n    Write a function to check whether any value in the list is True or not.\n    '''\n    \n    return any(list1)\n    \n    \ndef my_all(list1, function):\n    '''\n    Write a function to check whether all values in the list are True or not.\n    '''\n    \n    return all(list1)\n    \n    \ndef my_round(number, ndigits=0):\n    '''\n    Write a function to round a given number to n digits precision.\n    '''\n    \n    return round(number, ndigits)\n    \n    \ndef my_sorted(list1):\n    '''\n    Write a function to sort a given list of strings and numbers.\n    '''\n    \n    return sorted(list1)\n    \n    \ndef my_count(list1, element):\n    '''\n    Write a function to count the number of times an element occurs in the given list.\n    '''\n    \n    return list1.count(element)\n    \n    \ndef my_find(list1, element):\n    '''\n    Write a function to find the index of the first occurrence of an element in the list.\n    '''\n    \n    return list1.index(element)\n    \n    \ndef my_max(list1):\n    '''\n    Write a function to find the maximum value in the list.\n    '''\n    \n    return max(list1)\n    \n    \ndef my_min(list1):\n    '''\n    Write a function to find the minimum value in the list.\n    '''\n    \n    return min(list1)\n    \n    \ndef my_reverse(list1):\n    '''\n    Write a function to reverse the order of the elements in the list.\n    '''\n    \n    return list1[::-1]\n    \n    \ndef my_enumerate(list1):\n    '''\n    Write a function to enumerate the list.\n    '''\n    \n    return list(enumerate(list1))\n    \n    \ndef my_enumerate2(list1):\n    '''\n    Write a function to enumerate the list.\n    '''\n    \n    return list(enumerate(list1, 1))\n    \n    \ndef my_islice(list1, start, end):\n    '''\n    Write a function to get a slice of the list.\n    '''\n    \n    return list1[start:end]\n    \n    \ndef my_any(list1, function):\n    '''\n    Write a function t"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dicts in list1:\n        if dicts:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    is_empty = []\n    for i in list1:\n        is_empty.append(len(i) == 0)\n    return sum(is_empty) == len(is_empty)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not bool(l) for l in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    bool_list = []\n    for i in range(0,len(list1)):\n        bool_list.append(bool(list1[i]))\n    return all(bool_list)\n    \ndef get_l(list1,l1,l2):\n    '''\n    Write a function to get a list containing all the values of a particular key in a dictionary.\n    '''\n    list3 = []\n    for i in range(0,len(list1)):\n        list3.append(list1[i][l1])\n    return list3\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    nums.sort()\n    nums = map(str, nums)\n    return int(\"\".join(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for n in nums:\n        num = num * 10 + n\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert list of numbers to string\n    nums = ''.join(str(num) for num in nums)\n    # return to int\n    return(int(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    \n    total = 0\n    for num in nums:\n        total = total * 10 + num\n    return total\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i] * 10**(len(nums)-i-1)\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_str = ''\n    for num in nums:\n        num_str += str(num)\n    return int(num_str)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(list(map(str, nums))))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(num) for num in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums_to_string = ''\n    for number in nums:\n        nums_to_string += str(number)\n    return int(nums_to_string)\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        return float(test_list)\n    except ValueError:\n        pass\n    try:\n        return int(test_list)\n    except ValueError:\n        pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for i in range(len(test_list)):\n            test_list[i] = float(test_list[i])\n        return test_list\n    except ValueError:\n        print('The string in position', i, 'cannot be converted to a float. Please try again.')\n        return None\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in test_list:\n        for n in i:\n            try:\n                i[i.index(n)] = float(n)\n            except:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = [float(elem) for elem in test_list]\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(float(test_list[i]))\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in range(len(test_list)):\n        for col in range(len(test_list[row])):\n            try:\n                test_list[row][col] = float(test_list[row][col])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, l in enumerate(test_list):\n        test_list[i] = list(map(float, l))\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append([])\n        for j in range(len(test_list[i])):\n            try:\n                new_list[i].append(float(test_list[i][j]))\n            except ValueError:\n                new_list[i].append(test_list[i][j])\n    return new_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(x) for x in test_list]\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split(' ')\n    return list_of_strings\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split(' ')\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_words = []\n    for word in string.split(' '):\n        list_of_words.append(word)\n    return list_of_words\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list to a string joined by the space character.\n    '''\n    return''.join(list)\n    \ndef list_to_dict(list):\n    '''\n    Write a function to convert a list of lists to a dictionary with the first element in each list as the key and the second as the value.\n    '''\n    d = {}\n    for i in range(len(list)):\n        d[list[i][0]] = list[i][1]\n    return d\n    \ndef list_to_tuples(list):\n    '''\n    Write a function to convert a list of lists to a list of tuples.\n    '''\n    return tuple(list)\n    \ndef tuples_to_list(tuples):\n    '''\n    Write a function to convert a list of tuples to a list of lists.\n    '''\n    return list(tuples)\n    \ndef dict_to_tuples(dict):\n    '''\n    Write a function to convert a dictionary to a list of tuples.\n    '''\n    return list(dict.items())\n    \ndef tuples_to_dict(tuples):\n    '''\n    Write a function to convert a list of tuples to a dictionary.\n    '''\n    return dict(tuples)\n    \ndef dict_to_list(dict):\n    '''\n    Write a function to convert a dictionary to a list of lists.\n    '''\n    new_list = [[]] * len(dict)\n    for i in range(len(dict)):\n        new_list[i].append(dict[i][0])\n        new_list[i].append(dict[i][1])\n    return new_list\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # print(arr)\n    i = 0\n    while i<len(arr):\n        j = i+1\n        while j<len(arr):\n            if arr[i] == arr[j]:\n                arr.remove(arr[j])\n                arr.remove(arr[j-1])\n                j = 0\n            else:\n                j += 1\n        i += 1\n    return arr\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        mid = (i+j)//2\n        if arr[mid] == arr[mid+1]:\n            if (mid-i+1)%2 == 0:\n                return arr[mid]\n            else:\n                i = mid+2\n        elif arr[mid] == arr[mid-1]:\n            if (j-mid)%2 == 0:\n                return arr[mid]\n            else:\n                j = mid-2\n        elif arr[mid] > arr[mid+1]:\n            if (mid-i+1)%2 == 0:\n                return arr[mid+1]\n            else:\n                j = mid\n        else:\n            if (j-mid)%2 == 0:\n                return arr[mid-1]\n            else:\n                i = mid\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    for i in range(0, len(arr) - 1):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return arr[len(arr)-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if not arr:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr) / 2)\n    left = arr[:mid]\n    right = arr[mid:]\n    if search(left) == search(right):\n        return search(left)\n    return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    print(arr)\n    l = len(arr)\n    # if length is 1, return that element\n    if l==1:\n        return arr[0]\n    if l==2:\n        if arr[0]==arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    d={}\n    for i in arr:\n        if i in d.keys():\n            d[i]=0\n        else:\n            d[i]=1\n    for key,value in d.items():\n        if value==1:\n            return key\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr.sort()\n    if arr[0]!=arr[1]:\n        return arr[0]\n    elif arr[-1]!=arr[-2]:\n        return arr[-1]\n    else:\n        count=0\n        for i in range(1,len(arr)-1):\n            if arr[i]==arr[i+1]:\n                count+=1\n        return arr[count]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    def binary_search(arr, low, high, x): \n      \n        # Check base case \n        if high >= low: \n  \n            mid = (high + low) // 2\n      \n            # If element is present at the middle itself \n            if arr[mid] == x: \n                return mid \n      \n            # If element is smaller than mid, then it can only \n            # be present in left subarray \n            elif arr[mid] > x: \n                return binary_search(arr, low, mid - 1, x) \n      \n            # Else the element can only be present in right subarray \n            else: \n                return binary_search(arr, mid + 1, high, x) \n      \n        else: \n            # Element is not present in the array \n            return -1\n  \n      \n    # Function to find the element that appears only once \n    def find_unique(arr): \n      \n        # Find the first unique element \n        x = binary_search(arr, 0, len(arr) - 1, arr[0]) \n      \n        # Find the second unique element \n        y = binary_search(arr, 0, len(arr) - 1, arr[x]) \n      \n        # If the element appears only once \n        if x!= y: \n            return arr[x] \n        else: \n            return arr[y] \n      \n    # Driver code to test above functions \n    arr = [0,0,1,1,2,2,3,3,3,4,4,5,5,5] \n    print(\"The element that appears only once is\",find_unique(arr)) \n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Initialize counters\n    low = 0\n    high = len(arr) - 1\n    \n    while (low <= high):\n        \n        # Find the middle point\n        mid = int((low + high) / 2)\n        \n        # Check if the middle point value is a single element of the array\n        if ((mid == 0 or arr[mid - 1]!= arr[mid])\n            and (mid == (len(arr) - 1) or arr[mid + 1]!= arr[mid])):\n            return arr[mid]\n        \n        # If all elements on the left of the middle point are less than\n        # or equal to the middle point, then the left half has to be searched\n        # in the right half\n        elif (arr[low] <= arr[mid]):\n            low = mid + 1\n        \n        # If all elements on the right of the middle point are greater than\n        # or equal to the middle point, then the right half has to be searched\n        # in the left half\n        else:\n            high = mid - 1\n    \n    # If the entire array is searched and no single element is found,\n    # then the array has no unique element\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # return sorted(list(set(arr)))[0]\n    return sum(set(arr))*2 - sum(arr)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_of_products = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list_of_products.append(list1[i]*list1[j])\n    return max(list_of_products)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    import itertools\n    max_product = 0\n    for item in itertools.combinations(list1, 2):\n        if abs(item[0] * item[1]) > max_product:\n            max_product = abs(item[0] * item[1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list_of_tuples = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list_of_tuples.append((list1[i], list1[j]))\n    list_of_tuples.sort()\n    return list_of_tuples[-1]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for index in range(len(list1)-1):\n        if list1[index] > list1[index+1]:\n            max_product = list1[index]*list1[index+1]\n        elif list1[index] < list1[index+1]:\n            max_product = list1[index+1]*list1[index]\n        else:\n            max_product = list1[index]*list1[index+1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    for n in range(0, len(list1), 2):\n        list2.append(tuple(list1[n:n+2]))\n    max_product = 0\n    for i in range(len(list2)):\n        for j in range(i, len(list2)):\n            if list2[i][0] * list2[j][1] > max_product:\n                max_product = list2[i][0] * list2[j][1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for index, pair in enumerate(list1):\n        prod = pair[0] * pair[1]\n        if prod > max_prod:\n            max_prod = prod\n            max_prod_tuple = pair\n            max_prod_index = index\n    return max_prod_tuple, max_prod_index\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for tup in list1:\n        product = 1\n        for num in tup:\n            product *= num\n        if product > max_product:\n            max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0]*list1[j][0] > max_product:\n                max_product = list1[i][0]*list1[j][0]\n    return max_product\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # limit = 10000\n    # nums = set()\n    nums = [0] * limit\n    for i in range(1, limit):\n        s = 0\n        for j in range(1, i):\n            if i == j or i == j + j:\n                continue\n            else:\n                # nums.append(i)\n                s += j\n                if i < s < limit:\n                    nums[i] += s\n                    nums[s] += i\n    print(sum(nums))\n    return nums\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # sum of amicable numbers below limit\n    amicable_sum = 0\n    # create a list of amicable numbers below limit\n    amicable_numbers = get_amicable_numbers(limit)\n    # iterate over amicable numbers\n    for i in range(len(amicable_numbers)):\n        # sum of pairs\n        amicable_sum += sum_of_pair(amicable_numbers[i])\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = []\n    \n    for i in range(1, limit):\n        # check if i is amicable\n        # if yes, add to the list\n        if i == sum_of_divisors(sum_of_divisors(i)) and i!= sum_of_divisors(i):\n            numbers.append(i)\n    return sum(numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        sum += sum_amicable_number(i)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    tot = 0\n    for i in range(limit):\n        if amicable_number(i):\n            tot += i\n    return tot\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1,limit):\n        if is_amicable(i):\n            amicable_numbers.append(i)\n    print(amicable_numbers)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers_dic = {}\n    for i in range(1, limit):\n        sum = 0\n        for j in range(1, i):\n            if i == j:\n                continue\n            elif i % j == 0 and j % i == 0:\n                sum += j\n                numbers_dic[j] = sum\n            else:\n                continue\n    total = 0\n    for k, v in numbers_dic.items():\n        if k == v and k!= v:\n            total += k\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(1, limit + 1):\n        if is_amicable_number(i) and is_amicable_number(sum_amicable_numbers(i)):\n            sum_amicable += i\n    return sum_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        j = sum_divisors(i)\n        if i == sum_divisors(j) and i!= j and j!= i:\n            amicable_numbers.append(i)\n            amicable_numbers.append(j)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum([e for e in range(1,limit) if is_amicable(e)])\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = a\n    y = b\n    z = complex(x,y)\n    angle = cmath.phase(z)\n    angle = cmath.phase(z)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return(cmath.phase(complex(a,b)))\n    \ndef angle_complex_test():\n    assert angle_complex(1,0) == 0.0\n    assert angle_complex(0,1) == cmath.pi/2\n    assert angle_complex(1,1) == cmath.pi/4\n    assert angle_complex(0,0) == 0\n    assert angle_complex(0,1) == cmath.pi/2\n    assert angle_complex(-1,0) == cmath.pi\n    assert angle_complex(0,-1) == cmath.pi*3/2\n    assert angle_complex(-1,-1) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\nprint(angle_complex(1,-1))\nprint(angle_complex(-1,1))\nprint(angle_complex(-4,0))\nprint(angle_complex(-1,0))\nprint(angle_complex(-4,-4))\nprint(angle_complex(1,-1))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    print(a,b)\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if a == 0 and b == 0:\n        angle = 0\n    else:\n        angle = cmath.phase(complex(a,b))\n        if angle < 0:\n            angle = 360 + angle\n        angle = round(angle,1)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    \n    x1=a[0]\n    y1=a[1]\n    x2=b[0]\n    y2=b[1]\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count, max_len = 0, 0\n    count = 0\n    i, j = 0, 0\n    for j in range(len(string)):\n        if string[j] == '1':\n            count = count + 1\n        else:\n            count = count - 1\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0\n    for i in range(len(string)): \n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)): \n            if string[j] == '0': \n                count_0 += 1\n            else: \n                count_1 += 1\n            if max_length < abs(count_0 - count_1): \n                max_length = abs(count_0 - count_1)\n    return max_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # return max(map(lambda x: (len(x) - x.count('0')), [string[i:j] for i in range(len(string)) for j in range(i+1, len(string)+1)]))\n    m, m_ch, longest = 0, '', 0\n    for c in string:\n        if c == m_ch:\n            longest += 1\n        else:\n            m_ch = c\n            if m_ch == '0':\n                m = longest\n            else:\n                m = longest if longest > m else m\n            longest = 1\n    return m if m > m_ch == '0' else m_ch == '0' and m or m + 1\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(len([i for i in string if i == '0']), len([i for i in string if i == '1']))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count = 0\n    for i in range(len(string)): \n        if(string[i] == '1'): \n            count = 0\n        else: \n            count += 1\n            if(max_diff < count): \n                max_diff = count \n    return max_diff \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0 \n    for i in range(len(string)): \n        count = 0\n        for j in range(i, len(string)): \n            if(string[j] == '0'): \n                count += 1\n            elif(string[j] == '1'): \n                count -= 1\n            if (count > max_diff): \n                max_diff = count \n    return max_diff \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initializing max_diff and num_of_1s to 0\n    max_diff = 0\n    num_of_1s = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count = 0\n    count0 = 0\n    count1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        if count0 == count1:\n            count += 1\n        diff = abs(count0-count1)\n        max_diff = max(diff, max_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    s = '0b' + string\n    s = int(s, 2)\n    \n    print(s)\n    return max(len(str(s)) - len(bin(s).replace('0b', '')), len(str(s)) - len(bin(s).replace('0b', '1')))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1 \n    sum = 1 \n    if (a<b): \n        temp = a \n        a = b \n        b = temp \n    while(i<b): \n        if ((a%i == 0) and (b%i == 0)): \n            sum = sum + i \n        i = i + 1 \n    return sum \nprint(\"sum of common divisors of given two numbers is\", sum(18,24)) \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res = 1\n    for i in range(2,min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            res = res * i\n    return res\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(a,b)\n    list1 = []\n    list2 = []\n    for i in range(1,a+1):\n        if a%i == 0:\n            list1.append(i)\n    for i in range(1,b+1):\n        if b%i == 0:\n            list2.append(i)\n    for i in list1:\n        if i in list2:\n            return i\n    return 0"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if(a < b): \n        small = a \n    else: \n        small = b\n    for i in range(1, small+1): \n        if((a % i == 0) and (b % i == 0)): \n            sum = sum + i \n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    for i in range(1,min(a,b)+1):\n        if (a%i==0) and (b%i==0):\n            cd=i\n    return cd\n    #return sum(range(1, min(a,b)+1))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 1\n    for i in range(2, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            sum = sum+i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 1\n    for i in range(1, min(a,b) + 1):\n        if a % i == 0 and b % i == 0:\n            result *= i\n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    assert type(a) is int and type(b) is int and a > 0 and b > 0\n    divisor = 1\n    while divisor <= min(a,b):\n        if a%divisor == 0 and b%divisor == 0:\n            return divisor\n        divisor += 1\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i,j = a,b \n    while i!=j:\n        if i>j:\n            i-=j \n        else:\n            j-=i \n    return i \n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    while i <= a and i <= b:\n        if a % i == 0 and b % i == 0:\n            z = i\n        i = i+1\n    return z\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    length = len(str)\n    output = []\n    for i in range(0, length):\n        if len(str[i]) > n:\n            output.append(str[i])\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    for x in str:\n        if len(x) > n:\n            print(x)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = [word for word in str.split() if len(word) > n]\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    str_list = str.split()\n    lst = []\n    for i in str_list:\n        if len(i) > n:\n            lst.append(i)\n    return(lst)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str.split():\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split(\" \")\n    output_lst = []\n    for i in lst:\n        if len(i) > n:\n            output_lst.append(i)\n    print(\"Words with length more than\", n, \"are\", output_lst)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for y in range(3):\n        for x in range(3):\n            if(my_matrix[y][x]!=my_matrix[x][y]):\n                return False\n    for x in range(3):\n        if(my_matrix[0][x]+my_matrix[1][x]+my_matrix[2][x]!=15):\n            return False\n    for x in range(3):\n        if(my_matrix[x][0]+my_matrix[x][1]+my_matrix[x][2]!=15):\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # create a list of possible matrices\n    magic_square_list = [\n        [[8, 1, 6], [3, 5, 7], [4, 9, 2]],\n        [[6, 1, 8], [7, 5, 3], [2, 9, 4]],\n        [[4, 9, 2], [3, 5, 7], [8, 1, 6]],\n        [[2, 9, 4], [7, 5, 3], [6, 1, 8]], \n        [[8, 3, 4], [1, 5, 9], [6, 7, 2]],\n        [[4, 3, 8], [9, 5, 1], [2, 7, 6]], \n        [[6, 7, 2], [1, 5, 9], [8, 3, 4]], \n        [[2, 7, 6], [9, 5, 1], [4, 3, 8]],\n    ]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return my_matrix\n    # return sum_matrix(my_matrix) == sum_row(my_matrix) == sum_col(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    for num in range(1, rows * cols):\n        if num not in my_matrix[num - 1]:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_sum = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            my_sum += my_matrix[i][j]\n    if my_sum!= 15:\n        return False\n    for i in range(len(my_matrix)):\n        my_sum = 0\n        for j in range(len(my_matrix[i])):\n            my_sum += my_matrix[j][i]\n        if my_sum!= 15:\n            return False\n    my_sum = 0\n    for i in range(len(my_matrix)):\n        my_sum += my_matrix[i][i]\n    if my_sum!= 15:\n        return False\n    for i in range(len(my_matrix)):\n        my_sum = 0\n        for j in range(len(my_matrix[i])):\n            my_sum += my_matrix[len(my_matrix) - j - 1][i]\n        if my_sum!= 15:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix) == 0:\n        raise ValueError(\"Input cannot be empty\")\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check row and col\n    row_sum = col_sum = 0\n    for i in range(len(my_matrix)):\n        row_sum += my_matrix[i][i]\n        col_sum += my_matrix[i][len(my_matrix) - i - 1]\n    if row_sum!= col_sum:\n        return False\n    else:\n        if sum(my_matrix[0])!= sum(my_matrix[1])!= sum(my_matrix[2]):\n            return False\n        if sum(my_matrix[len(my_matrix) - 1])!= sum(my_matrix[len(my_matrix) - 2])!= sum(my_matrix[len(my_matrix) - 3]):\n            return False\n    # check diagonals\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]:\n        return False\n    if my_matrix[0][len(my_matrix) - 1] + my_matrix[1][len(my_matrix) - 2] + my_matrix[2][len(my_matrix) - 3]!= my_matrix[0][len(my_matrix) - 3] + my_matrix[1][len(my_matrix) - 2] + my_matrix[2][len(my_matrix) - 1]:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    total = 0\n    for i in range(0, len(my_matrix)):\n        for j in range(0, len(my_matrix[0])):\n            total += my_matrix[i][j]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #print('my_matrix: ', my_matrix)\n    n = len(my_matrix)\n    row_sums = []\n    col_sums = []\n    for row in range(0, n):\n        row_sum = 0\n        for col in range(0, n):\n            row_sum += my_matrix[row][col]\n            #print('row_sum: ', row_sum)\n        row_sums.append(row_sum)\n    print('row_sums: ', row_sums)\n    for col in range(0, n):\n        col_sum = 0\n        for row in range(0, n):\n            col_sum += my_matrix[row][col]\n            #print('col_sum: ', col_sum)\n        col_sums.append(col_sum)\n    print('col_sums: ', col_sums)\n    if n > 1:\n        if abs(row_sums[0] - row_sums[1])!= n:\n            return False\n    if n > 2:\n        if abs(row_sums[1] - row_sums[2])!= n:\n            return False\n    if n > 3:\n        if abs(row_sums[2] - row_sums[3])!= n:\n            return False\n    if n > 4:\n        if abs(row_sums[3] - row_sums[4])!= n:\n            return False\n    if n > 5:\n        if abs(row_sums[4] - row_sums[5])!= n:\n            return False\n    if n > 6:\n        if abs(row_sums[5] - row_sums[6])!= n:\n            return False\n    if n > 7:\n        if abs(row_sums[6] - row_sums[7])!= n:\n            return False\n    if n > 8:\n        if abs(row_sums[7] - row_sums[8])!= n:\n            return False\n    if n > 9:\n        if abs(row_sums[8] - row_sums[9])!= n:\n            return False\n    if n > 10:\n        if abs(row_sums[9] - row_sums[10])!= n:\n            return False\n    if n > 11:\n        if abs(row_sums[10] - row_sums[11])!= n:\n            return False\n    if n > 12:\n        if abs(row_sums[11] - row_sums[12])!= n:\n            return False\n    if n > 13:\n        if abs(row_sums[12] - row_sums[13])!= n:\n            return False\n    if n > 14:\n        if abs(row_sums[13] - row_sums[14])!= n:\n            return False\n    if n > 15:\n        if abs(row_sums[14] - row_sums[15])!= n:\n            return False\n    if n > 16:\n        if abs(row_sums[15] - row_sums[16])!= n:\n            return False\n    if n > 17:\n        if abs(row_sums[16] - row_sums[17])!= n:\n            return False\n    if n > 18:\n        if abs(row_sums[17] - row_sums[18])!= n:\n            return False\n    if n > 19:\n        if abs(row_sums[18] - row_sums[19])!= n:\n            return False\n    if n > 20:\n        if abs(row_sums[19] - row_sums[20])!= n:\n            return False\n    if n > 21:\n        if abs(row_sums[20] - row_sums[21])!= n:\n            return False\n    if n > 22:\n        if abs(row_sums[21] - row_sums[22])!= n:\n            return False\n    if n > 23:\n        if abs(row_sums[22] - row_sums[23])!= n:\n            return False\n    if n > 24:\n        if abs(row_sums[23] - row_sums[24])!= n:\n            return False\n    if n > 25:\n        if abs(row_sums[24] - row_sums[25])!= n:\n            return False\n    if n > 26:\n        if abs(row_sums[25] - row_sums[26])!= n:\n            return False\n    if n > 27:\n        if abs(row_sums[26] - row_sums[27])!= n:\n            return False\n    if n > 28:\n        if abs(row_sums[27] - row_sums[28])!= n:\n            return False\n    if n > 29:\n        if abs(row_sums[28] - row_sums[29])!= n:\n            return False\n    if n > 30:\n        if abs(row_sums[29] - row_sums[30])!= n:\n            return False\n    if n > 31:\n        if abs(row_sums[30] - row_sums[31])!= n:\n            return False\n    if n > 32:\n        if abs(row_sums[31] - row_sums[32])!= n:\n            return False\n    if n > 33:\n        if abs(row_sums[32] - row_sums[33])!= n:\n            return False\n    if n > 34:\n        if abs(row_sums[33] - row_sums[34])!= n:\n            return False\n    if n > 35:\n        if abs(row_sums[34] - row_sums[35])!= n:\n            return False\n    if n > 36:\n        if abs(row_sums[35] - row_sums[36])!= n:\n            return False\n    if n > 37:\n        if abs(row_sums[36] - row_sums[37])!= n:\n            return False\n    if n > 38:\n        if abs(row_sums[37] - row_sums[38])!= n:\n            return False\n    if n > 39:\n        if abs(row_sums[38] - row_sums[39])!= n:\n            return False\n    if n > 40:\n        if abs(row_sums[39] - row_sums[40])!= n:\n            return False\n    if n > 41:\n        if abs(row_sums[40] - row_sums[41])!= n:\n            return False\n    if n > 42:\n        if abs(row_sums[41] - row_sums[42])!= n:\n            return False\n    if n > 43:\n        if abs(row_sums[42] - row_sums[43])!= n:\n            return False\n    if n > 44:\n        if abs(row_sums[43] - row_sums[44])!= n:\n            return False\n    if n > 45:\n        if abs(row_sums[44] - row_sums[45])!= n:\n            return False\n    if n > 46:\n        if abs(row_sums[45] - row_sums[46])!= n:\n            return False\n    if n > 47:\n        if abs(row_sums[46] - row_sums[47])!= n:\n            return False\n    if n > 48:\n        if abs(row_sums[47] - row_sums[48])!= n:\n            return False\n    if n > 49:\n        if abs(row_sums[48] - row_sums[49])!= n:\n            return False\n    if n > 50:\n        if abs(row_sums[49] - row_sums[50])!= n:\n            return False\n    if n > 51:\n        if abs(row_sums[50] - row_sums[51])!= n:\n            return False\n    if n > 52:\n        if abs(row_sums[51] - row_sums[52])!= n:\n            return False\n    if n > 53:\n        if abs(row_sums[52] - row_sums[53])!= n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    result = True\n    \n    # A Magic Square is a matrix with all rows, columns, and the two diagonals adding up to the same number.\n    # The sum of the numbers in the matrix must be the same as the sum of the numbers in its columns, rows, and diagonals.\n    sum_rows = 0\n    sum_cols = 0\n    sum_diag = 0\n    sum_diag_reverse = 0\n    for i in range(0, len(my_matrix)):\n        sum_rows += my_matrix[i][0]\n    for i in range(0, len(my_matrix)):\n        sum_cols += my_matrix[0][i]\n    for i in range(0, len(my_matrix)):\n        sum_diag += my_matrix[i][i]\n    for i in range(0, len(my_matrix)):\n        sum_diag_reverse += my_matrix[i][len(my_matrix)-i-1]\n    if sum_rows == sum_cols == sum_diag == sum_diag_reverse:\n        result = True\n    else:\n        result = False\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_dict = defaultdict(int)\n    for i in nums:\n        nums_dict[i] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    cnt = defaultdict(int)\n    for i in nums:\n        cnt[i] += 1\n    \n    return max(cnt, key=lambda k: cnt[k])\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #initiate a default dict to store count of the number of each element\n    count_dict = defaultdict(int)\n    #create a list to store the result, the index of the result is the max_occurrences\n    result_list = []\n    #loop through nums, if the element is in the count dict, then increase the count by 1\n    for num in nums:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            #if the element not in the count dict, then add it\n            count_dict[num] = 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dic = defaultdict(int)\n    for n in nums:\n        dic[n] += 1\n    max_freq = 0\n    max_item = 0\n    for k, v in dic.items():\n        if v > max_freq:\n            max_freq = v\n            max_item = k\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occurrence = 0\n    max_item = None\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    max_value = float(\"-inf\")\n    for n in nums:\n        dict[n] += 1\n        if dict[n] > max_value:\n            max_value = dict[n]\n    print(max_value)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = {}\n    for i in nums:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.items(), key=lambda x:x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_num = defaultdict(int)\n    for num in nums:\n        dict_num[num] += 1\n    return max(dict_num, key=dict_num.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max = defaultdict(int)\n    for i in nums:\n        max[i] += 1\n    return max[max(max, key=lambda key:max[key])]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"AEIOUaeiou\"\n    string = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if string[i] not in vowels:\n            i += 1\n        elif string[j] not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return \"\".join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    vowel_list = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_list.append(i)\n    \n    str1.reverse()\n    for i in vowel_list:\n        str1.insert(i, 'y')\n    return \"\".join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowel_str = ''\n    for i in str1:\n        if i.lower() in vowels:\n            vowel_str += i\n    return vowel_str[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_indexes = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_indexes.append(i)\n    return str1[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowels_list = [char for char in str1 if char in vowels]\n    # print(vowels_list)\n    vowels_list.reverse()\n    str1_list = list(str1)\n    vowel_pos = [i for i, char in enumerate(str1_list) if char in vowels]\n    # print(vowel_pos)\n    for i in range(len(vowel_pos)):\n        str1_list[vowel_pos[i]] = vowels_list[i]\n    str1_str = \"\".join(str1_list)\n    return str1_str\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouy'\n    vowels_list = []\n    for character in str1:\n        if character in vowels:\n            vowels_list.append(character)\n    vowels_list.reverse()\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1 = str1[:i] + vowels_list[0] + str1[i+1:]\n            vowels_list.pop(0)\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    s = ''.join(c for c in str1 if c in vowels)\n    return s[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for char in str1:\n        if char in vowels:\n            str2 = str2 + char\n    for char in str1:\n        if char not in vowels:\n            str2 = str2 + char\n    return str2\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str2 = \"\"\n    for i in str1:\n        if i in vowels:\n            str2 = str2 + i\n    return str2[::-1]\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    vowel_list = [i for i in str1 if i in vowels]\n    vowel_list.reverse()\n    return vowel_list\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #return_str = ''\n    #for item in tup1:\n    #    return_str += str(item)\n    #return return_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if tup1 is None:\n        return None\n    s = \"\"\n    for item in tup1:\n        s += \" \" + str(item)\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s1 = ''\n    for item in tup1:\n        s1 += str(item)\n    return s1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \n    \ndef clean_tuple(tup1):\n    '''\n    Write a function to clean a tuple, which is used to convert the tuple to a string.\n    '''\n    \n    for i in range(len(tup1)):\n        if tup1[i].isdigit():\n            tup1[i] = int(tup1[i])\n    return tuple(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # return ''.join(tup1)\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_str = \"\"\n    for elem in tup1:\n        new_str += elem\n    return new_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    # some list of numbers\n    numbers = [-1, -2, -3, 4, 5]\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count=0\n    for i in range(0,len(nums)):\n        if nums[i]<0:\n            count=count+nums[i]\n    return count\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #The sum of the negative numbers is the sum of all the numbers in the list, but only if it's positive.\n    #Return 0 if the sum of the negative numbers is less than 0\n    \n    if sum(nums) < 0:\n        return 0\n    else:\n        return sum(i for i in nums if i < 0)\n        \n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for x in nums:\n        if x < 0:\n            total += x\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum = sum + num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        if(nums[i] < 0):\n            sum += nums[i]\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n    \n    \ndef multiply_oddnum(nums):\n    '''\n    Write a function to multiply all the odd numbers of a given list of numbers.\n    '''\n    mult = 1\n    for num in nums:\n        if num % 2 == 1:\n            mult *= num\n    return mult\n    \n    \ndef sort_number(nums):\n    '''\n    Write a function to sort the given list of numbers in ascending order.\n    '''\n    return sorted(nums)\n    \n    \ndef sum_to_odd(nums):\n    '''\n    Write a function to return the sum of the numbers which are in a given list of numbers that are divisible by 3.\n    '''\n    return sum(nums)\n    \n    \ndef reverse_string(s):\n    '''\n    Write a function to return the reversed string of the given string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_dictionary(d):\n    '''\n    Write a function to return the reversed dictionary of the given dictionary.\n    '''\n    new_d = {}\n    for key, val in d.items():\n        new_d[val] = key\n    return new_d\n    \n    \ndef minimum(nums):\n    '''\n    Write a function to return the minimum number from the given list of numbers.\n    '''\n    return min(nums)\n    \n    \ndef reverse_string_with_list(s):\n    '''\n    Write a function to return the reversed string of the given string.\n    '''\n    return \"\".join(reversed(s))\n    \n    \ndef add_list_elements(nums1, nums2):\n    '''\n    Write a function to return the sum of all the elements in the given lists.\n    '''\n    return sum(nums1) + sum(nums2)\n    \n    \ndef remove_duplicate(nums):\n    '''\n    Write a function to return a list containing the duplicate numbers in the given list of numbers.\n    '''\n    new_nums = []\n    for num in nums:\n        if num not in new_nums:\n            new_nums.append(num)\n    return new_nums\n    \n    \ndef order_even_odd(nums):\n    '''\n    Write a function to arrange the list of numbers in ascending order according to the first even numbers, followed by the first odd numbers.\n    '''\n    even, odd = [], []\n    for num in nums:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    return even + odd\n    \n    \ndef remove_duplicates_from_sorted_list(nums):\n    '''\n    Write a function to remove the duplicate numbers in the given list of numbers and return the list of unique numbers in sorted order.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i += 1\n    return sorted(nums)\n    \n    \ndef remove_zero_from_list(nums):\n    '''\n    Write a function to remove the zero from the given list of numbers and return a list of the remaining numbers in sorted order.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] == 0:\n            nums.pop(i)\n        else:\n            i += 1\n    return sorted(nums)\n    \n    \ndef reverse_list(nums):\n    '''\n    Write a function to reverse the given list of numbers and return the new list of numbers.\n    '''\n    nums.reverse()\n    return nums\n    \n    \ndef swap_pair(nums):\n    '''\n    Write a function to swap the values of two numbers in the given list of numbers and return the new list of numbers.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        nums[i], nums[i+1] = nums[i+1], nums[i]\n        i += 2\n    return nums\n    \n    \ndef swap_dictionaries(d1, d2):\n    '''\n    Write a function to swap the keys of two dictionaries and return the new dictionaries.\n    '''\n    return {d2[key] : key for key in d2.keys()}\n    \n    \ndef swap_numbers(n1, n2):\n    '''\n    Write a function to swap the values of two numbers and return the new numbers.\n    '''\n    return n2, n1\n    \n    \ndef remove_duplicate_from_sorted_list(nums):\n    '''\n    Write a function to remove the duplicate numbers from the given sorted list and return the list of unique numbers in sorted order.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n        else:\n            i += 1\n    return nums\n    \n    \ndef remove_nth_number(nums, n):\n    '''\n    Write a function to remove the nth number from the given list of numbers and return the new list of numbers.\n    '''\n    return nums[:n] + nums[n+1:]\n    \n    \ndef find_missing_number(nums):\n    '''\n    Write a function to find the missing number in the given list of numbers.\n    '''\n    return sum(nums) - sum(set(nums))\n    \n    \ndef remove_missing_number(nums):\n    '''\n    Write a function to remove the missing number from the given list of numbers and return the new list of numbers.\n    '''\n    return [num for num in nums if num not in set(nums)]\n    \n    \ndef get_missing_number(nums):\n    '''\n    Write a function to return the missing number in the given list of numbers.\n    '''\n    return sum(set(range(1, max(nums) + 1)) - set(nums))\n    \n    \ndef find_missing_number_using_comprehension(nums):\n    '''\n    Write a function to find the missing number in the given list of numbers using list comprehension.\n    '''\n    return (sum(set(range(1, max(nums) + 1)) - set(nums)) - sum(nums))\n    \n    \ndef get_missing_number_using_comprehension(nums):\n    '''\n    Write a function to return the missing number in the given list of numbers using set and range comprehension.\n    '''\n    return (sum(set(range(1, max(nums) + 1)) - set(nums)) - sum(nums))\n    \n    \ndef find_missing_number_in_sorted_list(nums):\n    '''\n    Write a function to find the missing number in the given list of numbers in ascending order.\n    '''\n    i = 0\n    while i < len(nums) - 1:\n        if nums[i] == nums[i+1] - 1:\n            i += 2\n        else:\n            return nums[i] + 1\n    return nums[-1] + 1\n    \n    \ndef find_missing_number_in_sorted_list_using_set(nums):\n    '''\n    Write a function to find the missing number in the given list of numbers in ascending order using the set.\n    '''\n    num_set = set(nums)\n    for num in range(min(nums), max(nums) + 1):\n        if num not in num_set:\n            return num\n    return max(nums) + 1\n    \n    \ndef find_missing_number_in_sorted_list_with_bounds(nums):\n    '''\n    Write a function to find the missing number in the given list of numbers using the bounds.\n    '''\n    num_set = set(nums)\n    for num in range(min(nums), max("
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return 1 + 2 * (n - 1)\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1: \n        return n \n    else: \n        return n * (2 * n - 1) \n        \n        \n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # n = 1 -> 1\n    # n = 2 -> 2\n    # n = 3 -> 3\n    # n = 4 -> 5\n    # n = 5 -> 6\n    # n = 6 -> 7\n    # n = 7 -> 8\n    # n = 8 -> 9\n    # n = 9 -> 10\n    # n = 10 -> 11\n    \n    # n = 1 -> 1 + 1 + 1 = 3\n    # n = 2 -> 2 + 2 + 2 = 6\n    # n = 3 -> 3 + 3 + 3 = 10\n    # n = 4 -> 5 + 5 + 5 = 15\n    # n = 5 -> 6 + 6 + 6 = 21\n    # n = 6 -> 7 + 7 + 7 = 28\n    # n = 7 -> 8 + 8 + 8 = 36\n    # n = 8 -> 9 + 9 + 9 = 45\n    # n = 9 -> 10 + 10 + 10 = 55\n    # n = 10 -> 11 + 11 + 11 = 66\n    \n    def hexagonal_num_helper(n, memo):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n in memo:\n            return memo[n]\n        else:\n            memo[n] = hexagonal_num_helper(n-1, memo) + hexagonal_num_helper(n-2, memo) + hexagonal_num_helper(n-3, memo)\n            return memo[n]\n    \n    return hexagonal_num_helper(n, {})\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize an empty list that will hold the hexagonal numbers\n    hex_numbers = []\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Brute force:\n    # return(int(((1+2*n)**0.5)/2)*(2*n+1))\n    \n    # Iterative\n    return(int(n*(n+1)/2))\n    \n    \nprint(hexagonal_num(1)) # 1\nprint(hexagonal_num(3)) # 8\nprint(hexagonal_num(5)) # 13\nprint(hexagonal_num(12)) # 505\nprint(hexagonal_num(30)) # 15600000"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal_iter(n):\n        i = 1\n        while i < n:\n            i += 1\n            yield i * (2 * i - 1)\n        \n    if type(n) == int and n > 0:\n        return hexagonal_iter(n).next()\n    else:\n        return None\n    \nif __name__ == \"__main__\":\n    print(hexagonal_num(1)) #1\n    print(hexagonal_num(5)) #28\n    print(hexagonal_num(10)) #153\n    print(hexagonal_num(20)) #1244\n    print(hexagonal_num(40)) #10755\n    print(hexagonal_num(41)) #10755\n    print(hexagonal_num(42)) #10755\n    print(hexagonal_num(43)) #10755\n    print(hexagonal_num(44)) #10755\n    print(hexagonal_num(45)) #10755\n    print(hexagonal_num(46)) #10755\n    print(hexagonal_num(47)) #10755\n    print(hexagonal_num(48)) #10755\n    print(hexagonal_num(49)) #10755\n    print(hexagonal_num(50)) #10755\n    print(hexagonal_num(51)) #10755\n    print(hexagonal_num(52)) #10755\n    print(hexagonal_num(53)) #10755\n    print(hexagonal_num(54)) #10755\n    print(hexagonal_num(55)) #10755\n    print(hexagonal_num(56)) #10755\n    print(hexagonal_num(57)) #10755\n    print(hexagonal_num(58)) #10755\n    print(hexagonal_num(59)) #10755\n    print(hexagonal_num(60)) #10755\n    print(hexagonal_num(61)) #10755\n    print(hexagonal_num(62)) #10755\n    print(hexagonal_num(63)) #10755\n    print(hexagonal_num(64)) #10755\n    print(hexagonal_num(65)) #10755\n    print(hexagonal_num(66)) #10755\n    print(hexagonal_num(67)) #10755\n    print(hexagonal_num(68)) #10755\n    print(hexagonal_num(69)) #10755\n    print(hexagonal_num(70)) #10755\n    print(hexagonal_num(71)) #10755\n    print(hexagonal_num(72)) #10755\n    print(hexagonal_num(73)) #10755\n    print(hexagonal_num(74)) #10755\n    print(hexagonal_num(75)) #10755\n    print(hexagonal_num(76)) #10755\n    print(hexagonal_num(77)) #10755\n    print(hexagonal_num(78)) #10755\n    print(hexagonal_num(79)) #10755\n    print(hexagonal_num(80)) #10755\n    print(hexagonal_num(81)) #10755\n    print(hexagonal_num(82)) #10755\n    print(hexagonal_num(83)) #10755\n    print(hexagonal_num(84)) #10755\n    print(hexagonal_num(85)) #10755\n    print(hexagonal_num(86)) #10755\n    print(hexagonal_num(87)) #10755\n    print(hexagonal_num(88)) #10755\n    print(hexagonal_num(89)) #10755\n    print(hexagonal_num(90)) #10755\n    print(hexagonal_num(91)) #10755\n    print(hexagonal_num(92)) #10755\n    print(hexagonal_num(93)) #10755\n    print(hexagonal_num(94)) #10755\n    print(hexagonal_num(95)) #10755\n    print(hexagonal_num(96)) #10755\n    print(hexagonal_num(97)) #10755\n    print(hexagonal_num(98)) #10755\n    print(hexagonal_num(99)) #10755\n    print(hexagonal_num(100)) #10755\n    print(hexagonal_num(101)) #10755\n    print(hexagonal_num(102)) #10755\n    print(hexagonal_num(103)) #10755\n    print(hexagonal_num(104)) #10755\n    print(hexagonal_num(105)) #10755\n    print(hexagonal_num(106)) #10755\n    print(hexagonal_num(107)) #10755\n    print(hexagonal_num(108)) #10755\n    print(hexagonal_num(109)) #10755\n    print(hexagonal_num(110)) #10755\n    print(hexagonal_num(111)) #10755\n    print(hexagonal_num(112)) #10755\n    print(hexagonal_num(113)) #10755\n    print(hexagonal_num(114)) #10755\n    print(hexagonal_num(115)) #10755\n    print(hexagonal_num(116)) #10755\n    print(hexagonal_num(117)) #10755\n    print(hexagonal_num(118)) #10755\n    print(hexagonal_num(119)) #10755\n    print(hexagonal_num(120)) #10755\n    print(hexagonal_num(121)) #10755\n    print(hexagonal_num(122)) #10755\n    print(hexagonal_num(123)) #10755\n    print(hexagonal_num(124)) #10755\n    print(hexagonal_num(125)) #10755\n    print(hexagonal_num(126)) #10755\n    print(hexagonal_num(127)) #10755\n    print(hexagonal_num(128)) #10755\n    print(hexagonal_num(129)) #10755\n    print(hexagonal_num(130)) #10755\n    print(hexagonal_num(131)) #10755\n    print(hexagonal_num(132)) #10755\n    print(hexagonal_num(133)) #10755\n    print(hexagonal_num(134)) #10755\n    print(hexagonal_num(135)) #10755\n    print(hexagonal_num(136)) #10755\n    print(hexagonal_num(137)) #10755\n    print(hexagonal_num(138)) #10755\n    print(hexagonal_num(139)) #10755\n    print(hexagonal_num(140)) #10755\n    print(hexagonal_num(141)) #10755\n    print(hexagonal_num(142)) #10755\n    print(hexagonal_num(143)) #10755\n    print(hexagonal_num(144)) #10755\n    print(hexagonal_num(145)) #10755\n    print(hexagonal_num(146)) #10755\n    print(hexagonal_num(147)) #10755\n    print(hexagonal_num(148)) #10755\n    print(hexagonal_num(149)) #10755\n    print(hexagonal_num(150)) #10755\n    print(hexagonal_num(151)) #10755\n    print(hexagonal_num(152)) #10755\n    print(hexagonal_num(153)) #10755\n    print(hexagonal_num(154)) #10755\n    print(hexagonal_num(155)) #10755\n    print(hexagonal_num(156)) #10755\n    print(hexagonal_num(157)) #10755\n    print(hexagonal_num(158)) #10755\n    print(hexagonal_num(159)) #10755\n    print(hexagonal_num(160)) #10755\n    print(hexagonal_num(161)) #10755\n    print(hexagonal_num(162)) #10755\n    print(hexagonal_num(163)) #10755\n    print(hexagonal_num(164)) #10755\n    print(hexagonal_num(165)) #10755\n    print(hexagonal_num(166)) #10755\n    print(hexagonal_num(167)) #10755\n    print(hexagonal_num(168)) #10755\n    print(hexagonal_num(169)) #10755\n    print(hexagonal_num(170)) #10755\n    print(hexagonal_num(171)) #10755\n    print(hexagonal_num(172)) #10755\n    print(hexagonal_num(173)) #1"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for n in nums:\n        if n == 0:\n            zero_count += 1\n    return zero_count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n    return zeros/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # (I)\n    # Base Case:\n    if nums == []:\n        return 0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    non_zero = 0\n    for num in nums:\n        if num == 0:\n            zero += 1\n        else:\n            non_zero += 1\n    return zero / non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_non_zeroes += 1\n    return num_zeroes / num_non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    print(zero_count/non_zero_count)\nzero_count([0,0,0,1,0,0,0,2,3,0,4,0,0])\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    result = [0,0]\n    for i in nums:\n        if i == 0:\n            result[0] += 1\n        else:\n            result[1] += 1\n    return (result[0]/result[1])\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            num_zeroes += 1\n    return num_zeroes / len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Note that, if n can be expressed as (2^a)*(3^b), then it can be written as sum of powers of 2.\n    # This function should return true if n is true else false.\n    \n    power = 0\n    while (n > 0): \n        n = n - (2 ** power) \n        power = power + 1\n        if (n == 0): \n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n <= 0): \n        return False\n    while (n): \n        if (n & 1): \n            return False\n        n >>= 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def isPowerOfTwo(n):\n        '''\n        Check if the number is a power of two\n        '''\n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if n % 2 == 1:\n            return False\n        else:\n            n = n/2\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    elif n==1:\n        return True\n    return is_Sum_Of_Powers_Of_Two(n//2)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    if n == 0:\n        return True\n    while n % 2 == 0:\n        n = n // 2\n        if n == 1:\n            return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_two(n):\n        '''\n        Function to check whether the given number is power of 2 or not.\n        '''\n        return (n & (n-1) == 0) and n!=0\n    if is_power_of_two(n):\n        return True\n    count = 0\n    while(n):\n        count+=1\n        n = n>>1\n    return (count == 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    while (n>>power)>=1:\n        if (n>>power)&1:\n            return False\n        power+=1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1,n):\n        if (n==i**2 or n==2*i**2):\n            return True\n    return False\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * r * math.pi\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return math.pi*r*2\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    flatten_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flatten_list.append(item)\n    return flatten_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        if type(i) == int:\n            flattened_list.append(i)\n        else:\n            flattened_list += extract_singly(i)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        for j in i:\n            flattened_list.append(j)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for sublist in test_list:\n        for item in sublist:\n            result.append(item)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [element for sublist in test_list for element in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            singly.append(test_list[i][j])\n    return singly\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    numbers = []\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    nested_lists = []\n    for item in test_list:\n        if isinstance(item, list):\n            nested_lists.append(item)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for item in test_list:\n        if type(item) is list:\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output_list = []\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    res = []\n    n = len(nums)\n    for i in range(n):\n        k = 0\n        j = n - i - 1\n        while k < j:\n            if nums[k] > nums[j]:\n                nums[k], nums[j] = nums[j], nums[k]\n            k += 1\n            j -= 1\n        res.append(nums)\n    return res\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i]!= i + 1:\n            swap_index = 0\n            while nums[swap_index]!= i + 1:\n                swap_index += 1\n            swap(nums, swap_index, i)\n            swap(nums, 0, i)\n        # print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    curr_max = 0\n    for i in range(len(nums) - 1, -1, -1):\n        curr_max = max(curr_max, nums[i])\n        if curr_max == i:\n            continue\n        swap(nums, curr_max, i)\n        reverse(nums, i + 1)\n        swap(nums, curr_max, i)\n        reverse(nums, i + 1)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    size = len(nums)\n    if size <= 1:\n        return\n    for index in range(size):\n        max_index = index\n        for j in range(index+1, size):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index!= index:\n            nums[max_index], nums[index] = nums[index], nums[max_index]\n            pancake_sort(nums[:max_index+1])\n            pancake_sort(nums[max_index+1:])\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def find_max(arr):\n        '''\n        Returns the index of the max element in the input list.\n        '''\n        max_index = 0\n        for i in range(len(arr)):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i=len(nums)-1\n    while i>0:\n        j=0\n        while j<i:\n            if nums[j]>nums[j+1]:\n                temp=nums[j]\n                nums[j]=nums[j+1]\n                nums[j+1]=temp\n                #print nums\n            j=j+1\n        i=i-1\n        print nums\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(a, b, arr):\n        '''\n        Function to flip a sub-list of elements.\n        '''\n        size = len(arr[a:b+1])\n        i, j = 0, 0\n        while(i < size//2):\n            arr[a+i], arr[a+size-1-j] = arr[a+size-1-j], arr[a+i]\n            i += 1\n            j += 1\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums)<=1:\n        return nums\n    for j in range(len(nums)//2):\n        flip(nums,j)\n    for i in range(len(nums)):\n        flip(nums,i)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length < 2:\n        return nums\n    \n    for i in range(length // 2):\n        # flip the i-th element, so that its position is correct\n        swap(i, nums, length - i - 1)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums), 1, -1):\n        i = 0\n        while i + k - 1 < len(nums):\n            if nums[i] < nums[i+k-1]:\n                # switch\n                temp = nums[i]\n                nums[i] = nums[i+k-1]\n                nums[i+k-1] = temp\n                # check if all values in the list are in order\n                if is_sorted(nums[i:i+k]):\n                    break\n                i += 1\n            else:\n                i += 1\n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1) == len(list2) and len(list1) == len(list3):\n        for i in range(len(list1)):\n            if list1[i] == list2[i] and list1[i] == list3[i]:\n                count += 1\n    else:\n        print(\"Length of given lists are not equal.\")\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2)==len(list3):\n        list1=[1,2,3]\n        list2=[1,3,4]\n        list3=[2,1,3]\n    samepair=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            samepair=samepair+1\n    print(\"Number of same pair: \"+str(samepair))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum([list1[i] == list2[i] == list3[i] for i in range(len(list1))])\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count=count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    \n    same_pair = 0\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            same_pair += 1\n    \n    return same_pair\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(0,len(Input)):\n        if type(Input[i]) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # create a set of tuples\n    set_of_tuples = set()\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # return len(Input.split(',')) - 1\n    return len([list(tuple(i.split(','))) for i in Input.split(',') if ',' in i])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    i = 0\n    while i < len(Input):\n        if type(Input[i]) == type([]):\n            count+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    list4=[]\n    list5=[]\n    list6=[]\n    list7=[]\n    list8=[]\n    list9=[]\n    list10=[]\n    list11=[]\n    list12=[]\n    list13=[]\n    list14=[]\n    list15=[]\n    list16=[]\n    list17=[]\n    list18=[]\n    list19=[]\n    list20=[]\n    list21=[]\n    list22=[]\n    list23=[]\n    list24=[]\n    list25=[]\n    list26=[]\n    list27=[]\n    list28=[]\n    list29=[]\n    list30=[]\n    list31=[]\n    list32=[]\n    list33=[]\n    list34=[]\n    list35=[]\n    list36=[]\n    list37=[]\n    list38=[]\n    list39=[]\n    list40=[]\n    list41=[]\n    list42=[]\n    list43=[]\n    list44=[]\n    list45=[]\n    list46=[]\n    list47=[]\n    list48=[]\n    list49=[]\n    list50=[]\n    list51=[]\n    list52=[]\n    list53=[]\n    list54=[]\n    list55=[]\n    list56=[]\n    list57=[]\n    list58=[]\n    list59=[]\n    list60=[]\n    list61=[]\n    list62=[]\n    list63=[]\n    list64=[]\n    list65=[]\n    list66=[]\n    list67=[]\n    list68=[]\n    list69=[]\n    list70=[]\n    list71=[]\n    list72=[]\n    list73=[]\n    list74=[]\n    list75=[]\n    list76=[]\n    list77=[]\n    list78=[]\n    list79=[]\n    list80=[]\n    list81=[]\n    list82=[]\n    list83=[]\n    list84=[]\n    list85=[]\n    list86=[]\n    list87=[]\n    list88=[]\n    list89=[]\n    list90=[]\n    list91=[]\n    list92=[]\n    list93=[]\n    list94=[]\n    list95=[]\n    list96=[]\n    list97=[]\n    list98=[]\n    list99=[]\n    list100=[]\n    list101=[]\n    list102=[]\n    list103=[]\n    list104=[]\n    list105=[]\n    list106=[]\n    list107=[]\n    list108=[]\n    list109=[]\n    list110=[]\n    list111=[]\n    list112=[]\n    list113=[]\n    list114=[]\n    list115=[]\n    list116=[]\n    list117=[]\n    list118=[]\n    list119=[]\n    list120=[]\n    list121=[]\n    list122=[]\n    list123=[]\n    list124=[]\n    list125=[]\n    list126=[]\n    list127=[]\n    list128=[]\n    list129=[]\n    list130=[]\n    list131=[]\n    list132=[]\n    list133=[]\n    list134=[]\n    list135=[]\n    list136=[]\n    list137=[]\n    list138=[]\n    list139=[]\n    list140=[]\n    list141=[]\n    list142=[]\n    list143=[]\n    list144=[]\n    list145=[]\n    list146=[]\n    list147=[]\n    list148=[]\n    list149=[]\n    list150=[]\n    list151=[]\n    list152=[]\n    list153=[]\n    list154=[]\n    list155=[]\n    list156=[]\n    list157=[]\n    list158=[]\n    list159=[]\n    list160=[]\n    list161=[]\n    list162=[]\n    list163=[]\n    list164=[]\n    list165=[]\n    list166=[]\n    list167=[]\n    list168=[]\n    list169=[]\n    list170=[]\n    list171=[]\n    list172=[]\n    list173=[]\n    list174=[]\n    list175=[]\n    list176=[]\n    list177=[]\n    list178=[]\n    list179=[]\n    list180=[]\n    list181=[]\n    list182=[]\n    list183=[]\n    list184=[]\n    list185=[]\n    list186=[]\n    list187=[]\n    list188=[]\n    list189=[]\n    list190=[]\n    list191=[]\n    list192=[]\n    list193=[]\n    list194=[]\n    list195=[]\n    list196=[]\n    list197=[]\n    list198=[]\n    list199=[]\n    list200=[]\n    list201=[]\n    list202=[]\n    list203=[]\n    list204=[]\n    list205=[]\n    list206=[]\n    list207=[]\n    list208=[]\n    list209=[]\n    list210=[]\n    list211=[]\n    list212=[]\n    list213=[]\n    list214=[]\n    list215=[]\n    list216=[]\n    list217=[]\n    list218=[]\n    list219=[]\n    list220=[]\n    list221=[]\n    list222=[]\n    list223=[]\n    list224=[]\n    list225=[]\n    list226=[]\n    list227=[]\n    list228=[]\n    list229=[]\n    list230=[]\n    list231=[]\n    list232=[]\n    list233=[]\n    list234=[]\n    list235=[]\n    list236=[]\n    list237=[]\n    list238=[]\n    list239=[]\n    list240=[]\n    list241=[]\n    list242=[]\n    list243=[]\n    list244=[]\n    list245=[]\n    list246=[]\n    list247=[]\n    list248=[]\n    list249=[]\n    list250=[]\n    list251=[]\n    list252=[]\n    list253=[]\n    list254=[]\n    list255=[]\n    list256=[]\n    list257=[]\n    list258=[]\n    list259=[]\n    list260=[]\n    list261=[]\n    list262=[]\n    list263=[]\n    list264=[]\n    list265=[]\n    list266=[]\n    list267=[]\n    list268=[]\n    list269=[]\n    list270=[]\n    list271=[]\n    list272=[]\n    list273=[]\n    list274=[]\n    list275=[]\n    list276=[]\n    list277=[]\n    list278=[]\n    list279=[]\n    list280=[]\n    list281=[]\n    list282=[]\n    list283=[]\n    list284=[]\n    list285=[]\n    list286=[]\n    list287=[]\n    list288=[]\n    list289=[]\n    list290=[]\n    list291=[]\n    list292=[]\n    list293=[]\n    list294=[]\n    list295=[]\n    list296=[]\n    list297=[]\n    list298=[]\n    list299=[]\n    list300=[]\n    list301=[]\n    list302=[]\n    list303=[]\n    list304=[]\n    list305=[]\n    list306=[]\n    list307=[]\n    list308=[]\n    list309=[]\n    list310=[]\n    list311=[]\n    list312=[]\n    list313=[]\n    list314=[]\n    list315=[]\n    list316=[]\n    list317=[]\n    list318=[]\n    list319=[]\n    list320=[]\n    list321=[]\n    list322=[]\n    list323=[]\n    list324=[]\n    list325=[]\n    list326=[]\n    list327=[]\n    list328=[]\n    list329=[]\n    list330=[]\n    list331=[]\n    list332=[]\n    list333=[]\n    list334=[]\n    list335=[]\n    list336=["
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    counter = 0\n    for item in Input:\n        if type(item) == list:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for item in Input:\n        if type(item) is list:\n            lists = lists + 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if not Input:\n        return 0\n    else:\n        return 1 + find_lists(Input[1:])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = list(set(arr))\n    arr.sort()\n    return max(arr[i+1]-arr[i] for i in range(len(arr)-1))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr)-min(arr), max(arr)-max(arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    print(\"Array =\", arr)\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] - arr[j] >= max_diff:\n                max_diff = abs(arr[i] - arr[j])\n    print(\"Maximum difference is:\", max_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    return max(arr) - min(arr)\n    \n    # OR \n    \n    # return max(arr, key=lambda x: abs(arr[0] - arr[x]))\n    \n    # OR\n    \n    # return max(map(lambda x, y: abs(x-y), arr[0], arr))\n    \nprint(max_Abs_Diff([3, 4, 5, 1, 2, 8]))"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    arr.sort()\n    return (arr[n-1] - arr[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    abs_diff_max = 0\n    # intialize the variable\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, len(arr)):\n            abs_diff_max = abs(arr[i]-arr[j])\n            # print(arr[i], arr[j], abs_diff_max)\n            # break\n        \n        if abs_diff_max > abs(arr[i]-arr[j]):\n            break\n    return abs_diff_max\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(max(arr) - min(arr),max(arr) - min(arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[j] - arr[i] > max_diff:\n                max_diff = arr[j] - arr[i]\n    return max_diff\nprint(max_Abs_Diff([5,2,1,9,7,3,5,2,1,9,7,3]))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference \n    maxDiff = 0\n    # Create a list to store the absolute values \n    absVal = []\n    # Store the absolute values of the elements \n    for i in arr: \n        absVal.append(abs(i))\n    # Store the maximum of the absolute values \n    maxAbs = max(absVal) \n    # Find the minimum element in the array \n    minAbs = min(absVal) \n    # Traverse the absolute value list to find the maximum difference \n    for i in range(0,len(absVal)): \n        if absVal[i] == maxAbs: \n            maxDiff = max(maxDiff,abs(arr[i] - arr[i-1])) \n        elif absVal[i] == minAbs: \n            maxDiff = max(maxDiff,abs(arr[i] - arr[i-1])) \n    return maxDiff \n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    import math\n    for x in range(1, n):\n        for y in range(1, n):\n            if a*x + b*y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        for y in range(1, n):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if a*x + b*y == n:\n            return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n:\n                return (x, y)\n    return None\n    \ndef find_solution_with_no_repetitions(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        for y in range(n):\n            if a * x + b * y == n and (x, y) not in [(x, y_) for y_ in range(n)]:\n                return (x, y)\n    return None\n    \ndef find_solution_again(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    found = False\n    while not found:\n        for x in range(n):\n            for y in range(n):\n                if a * x + b * y == n:\n                    return (x, y)\n        found = True\n        \n    return None\n    \ndef find_solution_iteratively(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    found = False\n    x = 0\n    y = 0\n    while not found:\n        if a * x + b * y == n:\n            return (x, y)\n        elif a * x + b * y < n:\n            y += 1\n        else:\n            x += 1\n            y = 0\n    \n    return None\n    \ndef find_solution_iteratively_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    found = False\n    x = 0\n    y = 0\n    while not found:\n        if a * x + b * y == n:\n            return (x, y)\n        elif a * x + b * y < n:\n            y += 1\n        elif a * x + b * y > n:\n            x += 1\n            y = 0\n    \n    return None\n    \ndef find_solution_iteratively_3(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    found = False\n    while not found:\n        if a * x + b * y == n:\n            return (x, y)\n        elif a * x + b * y < n:\n            y += 1\n        elif a * x + b * y > n:\n            x += 1\n            y = 0\n    \n    return None\n    \ndef find_solution_recursive(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a * x + b * y == n:\n        return (x, y)\n    if a * x + b * y < n:\n        return find_solution_recursive(a, b, n)\n    if a * x + b * y > n:\n        return find_solution_recursive(a, b, n)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(n):\n        if ((a*x) + b) == n:\n            return (x, int(n/a))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if a * i + b == n:\n            return (i, n - i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for i in range(n):\n        j = n - i\n        if (a * i) + (b * j) == n:\n            return i, j\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if a * x + b * len(str(x)) == n:\n            return (x, n // x)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables\n    list_of_solns = []\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    res = []\n    for item in list1:\n        if item not in list2:\n            res.append(item)\n    return res\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set to store unique elements of list2\n    unique_elements = set(list2)\n    # iterate over the list1 and check if element exists in unique_elements \n    for element in list1:\n        if element in unique_elements:\n            # if exists, then remove it\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    i = 0\n    j = 0\n    output = []\n    while i<len(list1) and j<len(list2):\n        if list1[i] == list2[j]:\n            output.append(list1[i])\n            i += 1\n            j += 1\n        elif list1[i] > list2[j]:\n            j += 1\n        else:\n            i += 1\n    return output\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list2) > len(list1):\n        list1, list2 = list2, list1\n    for elem in list1[:]:\n        if elem in list2:\n            list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list2:\n        if ele in list1:\n            list1.remove(ele)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [item for item in list1 if item not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    for i in list2:\n        while i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # def sum_series(n):\n    #     # Base Case:\n    #     if n == 0:\n    #         return 0\n    #     # Recursive Case:\n    #     return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(1,n//2+1):\n        sum += n-2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    #base case: n=0\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return \"Invalid input\"\n    sum = 0\n    for x in range(0,n//2+1):\n        sum += n-2*x\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # return sum([(n - (2*i)) for i in range(n // 2)])\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return (n-2) + sum_series(n-4)\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    numbers_list = []\n    for i in range(1, (n//2) + 1):\n        numbers_list.append(n - 2*i)\n    return sum(numbers_list)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l**2 / (4 * tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s > 2:\n        area = ((s * l ** 2) / (4 * tan(pi / s)))\n        print(area)\n    else:\n        print('Polygon has to have at least 3 sides')\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    polygon = (s**2)/(4*tan(pi/l))\n    return polygon\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/s)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s*l/2\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2)/(4*tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #s = side length\n    #l = number of sides\n    a = (s*(l))/2\n    print('The area of the polygon is: ', a)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l/2*(1+tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s ** 2) * (1 / (4 * tan(pi / l)))\n    return a\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2*tan(pi/l)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    result = 0\n    for i in range(1, n // 2 + 1): \n        if n % i == 0: \n            result += i \n    return result == n\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    lst=[]\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            lst.append(i)\n            sum+=i\n    \n    if sum%2==0:\n        sum=sum/2\n        if sum in lst:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \n    \nprint(div_sum(4)) #True\nprint(div_sum(5)) #False\nprint(div_sum(10)) #True\nprint(div_sum(13)) #False\nprint(div_sum(21)) #True\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    \n    for i in range(1, n): \n        if n % i == 0: \n            sum1 += i \n    \n    for j in range(1, n): \n        if n % j == 0: \n            sum2 += j \n    \n    if sum1 == sum2: \n        print(\"True\") \n    else: \n        print(\"False\") \n        \ndef max_num(n,m):\n    '''\n    Write a program to determine the largest of the two numbers entered.\n    '''\n    if n > m: \n        print(n) \n    elif m > n: \n        print(m) \n        \ndef palindrome(n):\n    '''\n    Write a function to determine if a number is a palindrome.\n    '''\n    if n < 0:\n        print(\"Not a Palindrome\")\n    elif n == 0:\n        print(\"0 is a palindrome\")\n    else:\n        x = n\n        y = 0\n        while(n > 0):\n            rem = n % 10\n            y = (y*10) + rem\n            n = n//10\n        if x == y:\n            print(\"True\")\n        else:\n            print(\"False\")\n        \ndef max_product(n,m):\n    '''\n    Write a function that will determine the maximum product of two numbers.\n    '''\n    if n > m: \n        big = n \n    else:\n        big = m \n        \n    for i in range(1,big): \n        if n*m % i == 0: \n            print(\"The max product is \" + str(n*m)) \n            \ndef perfect_square(n):\n    '''\n    Write a function to determine if a number is a perfect square.\n    '''\n    import math\n    \n    s = int(math.sqrt(n))\n    if s*s == n: \n        print(\"True\") \n    else: \n        print(\"False\") \n        \ndef is_prime(n):\n    '''\n    Write a function to determine if a number is a prime number.\n    '''\n    for i in range(2,n): \n        if n % i == 0:\n            print(\"False\")\n            break\n    else:\n        print(\"True\")\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,n):\n        if n % i == 0: \n            sum += i\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_of_divisors_of_n = 0\n    i = 1\n    while i < n: \n        if n % i == 0: \n            sum_of_divisors_of_n += i \n        i += 1 \n    return sum_of_divisors_of_n \n    \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # array to store divisors of N \n    # set a boolean variable to store the result \n    # iterate through array of divisors from 1 to N \n    # check if divisor sum with N is equal to N \n    # if true return true \n    # if false return false \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0 \n    sum2 = 0 \n    if n % 2 == 0: \n        for i in range(1,int(math.sqrt(n)+1)): \n            if n % i == 0: \n                sum1 += i \n                if n//i!= i: \n                    sum1 += n//i \n        sum2 = sum1 - n \n    else: \n        for i in range(1,int(math.sqrt(n)+1)): \n            if n % i == 0: \n                sum1 += i \n                if n//i!= i: \n                    sum1 += n//i \n        sum2 = sum1 - n + 1 \n    return sum1 == sum2 \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisor_sum = 0\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisor_sum+=i\n            if n/i!=i:\n                divisor_sum+=n/i\n    if divisor_sum==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    total=0\n    for i in range(1,n):\n        if n%i==0:\n            total+=i\n    if total==n:\n        print(f'The sum of the divisors of {n} are {total}.')\n    elif total!=n:\n        print(f'The sum of the divisors of {n} is not {total}.')\n    else:\n        pass\ndef cont_frac():\n    '''\n    Write a program to calculate the value of a continuous fraction.\n    '''\n    print('The program will ask for the denominator and the number of iterations to perform. It will then ask for the Nth value of the fraction. ')\n    n=int(input('Enter the denominator: '))\n    m=int(input('Enter the number of iterations: '))\n    c=int(input('Enter the value of the Nth value of the fraction: '))\n    print(f'The {m}th value of the fraction is {c}/{n}')\n    for i in range(1,m):\n        c=int(input('Enter the value of the Nth value of the fraction: '))\n        c=c/n\n        print(f'The {i+1}th value of the fraction is {c}/{n}')\n    pass\ndef factorial_root():\n    '''\n    Write a program to calculate the value of the root of a number.\n    '''\n    num=int(input('Enter the number you want to take the root of: '))\n    root=int(input('Enter the power of the root: '))\n    print(f'The value of {num} to the power of {root} is {num**root}.')\n    print(f'The value of {num} to the power of {root} is {math.pow(num,root)}.')\n    pass\ndef menu():\n    '''\n    A menu-based program that will perform various operations based on the user's choice.\n    '''\n    while True:\n        print('\\n'*100)\n        print('1. Check whether a number is prime or not.')\n        print('2. Calculate the sum of the divisors of a number.')\n        print('3. Calculate the value of a continuous fraction.')\n        print('4. Calculate the nth value of a fraction.')\n        print('5. Calculate the factorial of a number.')\n        print('6. Calculate the square root of a number.')\n        print('7. Exit.')\n        choice=int(input('Enter your choice: '))\n        if choice==1:\n            num=int(input('Enter the number you want to check: '))\n            is_prime(num)\n        elif choice==2:\n            num=int(input('Enter the number you want to check: '))\n            div_sum(num)\n        elif choice==3:\n            cont_frac()\n        elif choice==4:\n            n=int(input('Enter the number of iterations: '))\n            nth_value(n)\n        elif choice==5:\n            num=int(input('Enter the number you want to take the factorial of: '))\n            factorial(num)\n        elif choice==6:\n            num=int(input('Enter the number you want to take the root of: '))\n            root=int(input('Enter the power of the root: '))\n            factorial_root(num,root)\n        elif choice==7:\n            print('Goodbye!')\n            break\n        else:\n            print('You have entered an invalid choice. Please try again.')\ndef is_prime(num):\n    '''\n    A program that will check whether a number is prime or not.\n    '''\n    if num>1:\n        is_prime=True\n        for i in range(2,num):\n            if num%i==0:\n                is_prime=False\n                break\n            else:\n                pass\n        if is_prime==True:\n            print(f'The number {num} is a prime number.')\n        elif is_prime==False:\n            print(f'The number {num} is not a prime number.')\n    elif num<=1:\n        print('The number is not a prime number.')\n    else:\n        pass\ndef div_sum(n): \n    '''\n    A program that will calculate the sum of the divisors of a number.\n    '''\n    total=0\n    for i in range(1,n):\n        if n%i==0:\n            total+=i\n    print(f'The sum of the divisors of {n} is {total}.')\ndef cont_frac():\n    '''\n    A program to calculate the value of a continuous fraction.\n    '''\n    print('The program will ask for the denominator and the number of iterations to perform. It will then ask for the Nth value of the fraction. ')\n    n=int(input('Enter the denominator: '))\n    m=int(input('Enter the number of iterations: '))\n    c=int(input('Enter the value of the Nth value of the fraction: '))\n    print(f'The {m}th value of the fraction is {c}/{n}')\n    for i in range(1,m):\n        c=int(input('Enter the value of the Nth value of the fraction: '))\n        c=c/n\n        print(f'The {i+1}th value of the fraction is {c}/{n}')\ndef nth_value(n):\n    '''\n    A program to calculate the nth value of a fraction.\n    '''\n    num=int(input('Enter the numerator: '))\n    denom=int(input('Enter the denominator: '))\n    c=int(input('Enter the value of the nth value of the fraction: '))\n    print(f'The {n}th value of the fraction is {num*n}/{denom*n}.')\n    print(f'The {n}th value of the fraction is {c}/{denom}.')\n    pass\ndef factorial(num):\n    '''\n    A program to calculate the factorial of a number.\n    '''\n    if num<=0:\n        print('The number must be greater than 0.')\n    elif num==1:\n        print(f'The value of {num}! is {num}.')\n    else:\n        fact=1\n        for i in range(1,num+1):\n            fact=fact*i\n        print(f'The value of {num}! is {fact}.')\n    pass\ndef factorial_root():\n    '''\n    A program to calculate the square root of a number.\n    '''\n    num=int(input('Enter the number you want to take the root of: '))\n    root=int(input('Enter the power of the root: '))\n    print(f'The value of {num} to the power of {root} is {num**root}.')\n    print(f'The value of {num} to the power of {root} is {math.pow(num,root)}.')\ndef menu():\n    '''\n    A menu-based program that will perform various operations based on the user's choice.\n    '''\n    while True:\n        print('\\n'*100)\n        print('1. Check whether a number is prime or not.')\n        print('2. Calculate the sum of the divisors of a number.')\n        print('3. Calculate the value of a continuous fraction.')\n        print('4. Calculate the nth value of a fraction.')\n        print('5. Calculate the factorial of a number.')\n        print('6. Calculate the square root of a number.')\n        print('7. Exit.')\n        choice=int(input('Enter your choice: '))\n        if choice==1:\n            num=int(input('Enter the number you want to check: '))\n            is_prime(num)\n        elif choice==2:\n            num=int(input('Enter the number you want to check: '))\n            div_sum(num)\n        elif choice==3:\n            cont_frac()\n        elif choice==4:\n            n=int(input('Enter the number of iterations: '))\n            nth_value(n)\n        elif choice==5:\n            num"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1,int(n**0.5)+1):\n        if n % i == 0:\n            sum += i\n            if i!= n//i:\n                sum += n//i\n    return sum\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.lower()\n    count = 0\n    for i in range(len(str1)):\n        if ord('a') <= ord(str1[i]) and ord(str1[i]) <= ord('z'):\n            if str1[i] == chr(ord(str1[i]) - 32):\n                count += 1\n        if ord('0') <= ord(str1[i]) and ord(str1[i]) <= ord('9'):\n            if str1[i] == chr(ord(str1[i]) - 32):\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict1 = {}\n    for i in range(len(str1)):\n        if str1[i].lower() in dict1:\n            dict1[str1[i].lower()] += 1\n        else:\n            dict1[str1[i].lower()] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    result = {}\n    for i in str1:\n        if i.lower() in result:\n            result[i.lower()] += 1\n        else:\n            result[i.lower()] = 1\n    return result\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return [x[0] for x in collections.Counter(str1.lower()).most_common() if x[1] > 1]\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    dict = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}\n    count = 0\n    for i in str1.lower():\n        if i in dict:\n            count = count + dict[i]\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = 0\n    for i in range(len(str1)):\n        if str1[i].lower() == str(i + 97):\n            counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str1 = str1.upper()\n    str1 = list(str1)\n    count = 0\n    for i in str1:\n        if 'A' <= i <= 'Z':\n            count += str1.count(i)\n            # print(count)\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet_chars = []\n    for i in range(97,123):\n        alphabet_chars.append(chr(i))\n    count = 0\n    for i in str1:\n        if i in alphabet_chars:\n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in str1.lower():\n        if i in alpha:\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_pos = 0\n    # Write your code here\n    # your code goes here\n    str_count = 0\n    for i in str1.lower():\n        if ord(i) >= ord(\"a\") and ord(i) <= ord(\"z\"):\n            str_count += 1\n    print(str_count)\ncount_char_position(\"This is a test string\")\ncount_char_position(\"All is well\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count=0\n    for i in A:\n        for j in A:\n            if(i^j)%2==0:\n                count+=1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)): \n        for j in range(0, len(A)):\n            if i!= j:\n                if (A[i] ^ A[j] ) % 2 == 0:\n                    count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    \n    for i in range(0, len(A)-1):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 2:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(0, len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor = []\n    for i in range(0,len(A)):\n        for j in range(i+1,len(A)):\n            xor.append(A[i]^A[j])\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for num1 in A:\n        for num2 in A:\n            if num1 ^ num2 == 0 and (num1 + num2) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # Find an even number\n    even_number = 0\n    for i in range(len(A)):\n        if even_number & 1 == 0:\n            even_number = even_number | A[i]\n        else:\n            even_number = even_number ^ A[i]\n    print(even_number)\n    print(even_number & 1)\n    \n    # Find the number of pairs\n    count = 0\n    for i in range(len(A)):\n        if A[i] & 1:\n            for j in range(i+1, len(A)):\n                if A[j] == even_number:\n                    count += 1\n                    break\n                elif A[j]!= even_number:\n                    break\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    num_of_even_pairs = 0\n    for element in A:\n        if element ^ 2 % 2 == 0:\n            num_of_even_pairs += 1\n    return num_of_even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                even_pairs += 1\n    return even_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    c=0\n    for i in range(0,len(A)-1):\n        if (A[i]^A[i+1])%2==0:\n            c+=1\n    return c\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return int(2**math.ceil(math.log(n, 2)))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n <= 0 else 2**(n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2 if n == 1 else 2**(n - 1).bit_length("
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n == 0 else 2 if n == 1 else 2**(n).bit_length("
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n - 1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 0:\n        return -1\n    else:\n        return 2**math.ceil(math.log(n, 2)) \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Returns the next power of 2\n    return 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if a == None or len(a) == 0:\n        return 0\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i==x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if x == i:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    n=len(a)\n    count=0\n    for i in range(0,n):\n        if x==a[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n    \n    \ndef find_max(a):\n    '''\n    Find the maximum value in a list.\n    '''\n    max = 0\n    for i in a:\n        if i > max:\n            max = i\n    return max\n    \n    \ndef index(a,x):\n    '''\n    Write a function that returns the first index of a given value in a list.\n    '''\n    i = 0\n    while i < len(a):\n        if a[i] == x:\n            return i\n        i += 1\n    return -1\n    \n    \ndef union(a,b):\n    '''\n    Write a function that returns a list that contains all values in either of two given lists.\n    '''\n    for i in a:\n        if i not in b:\n            b.append(i)\n    for i in b:\n        if i not in a:\n            a.append(i)\n    return a\n    \n    \ndef intersection(a,b):\n    '''\n    Write a function that returns a list that contains all values common to both given lists.\n    '''\n    b = set(b)\n    return [x for x in a if x in b]\n    \n    \ndef all_unique(a):\n    '''\n    Write a function that returns the number of distinct values in a given list.\n    '''\n    return len(set(a))\n    \n    \ndef membership(a,x):\n    '''\n    Write a function that checks whether or not a given value is in a given list.\n    '''\n    return x in a\n    \n    \ndef empty(a):\n    '''\n    Write a function that returns true if a given list is empty, and false otherwise.\n    '''\n    return len(a) == 0\n    \n    \ndef append(a,x):\n    '''\n    Write a function that adds an element to the end of a given list.\n    '''\n    a.append(x)\n    return a\n    \n    \ndef remove(a,x):\n    '''\n    Write a function that removes the first occurrence of a given value in a given list.\n    '''\n    for i in a:\n        if i == x:\n            a.remove(i)\n            return a\n        \n    return a\n    \n    \ndef insert(a,x,i):\n    '''\n    Write a function that inserts a given value at the specified index in a given list.\n    '''\n    a.insert(i,x)\n    return a\n    \n    \ndef pop(a,i):\n    '''\n    Write a function that removes the element at a specified index in a given list, and returns it.\n    '''\n    return a.pop(i)\n    \n    \ndef size(a):\n    '''\n    Write a function that returns the number of elements in a given list.\n    '''\n    return len(a)\n    \n    \ndef reverse(a):\n    '''\n    Write a function that reverses the elements order in a given list.\n    '''\n    a.reverse()\n    return a\n    \n    \ndef sort(a):\n    '''\n    Write a function that sorts the elements of a given list in ascending order.\n    '''\n    a.sort()\n    return a\n    \n    \ndef sum_list(a):\n    '''\n    Write a function that returns the sum of all values in a given list.\n    '''\n    return sum(a)\n    \n    \ndef extend(a,b):\n    '''\n    Write a function that extends a given list by appending all values from a second list.\n    '''\n    a.extend(b)\n    return a\n    \n    \ndef max_list(a):\n    '''\n    Write a function that returns the maximum value in a given list.\n    '''\n    return max(a)\n    \n    \ndef min_list(a):\n    '''\n    Write a function that returns the minimum value in a given list.\n    '''\n    return min(a)\n    \n    \ndef filter_list(a,f):\n    '''\n    Write a function that returns a list that contains all values from a given list for which a given function returns true.\n    '''\n    return [x for x in a if f(x)]\n    \n    \ndef map_list(a,f):\n    '''\n    Write a function that applies a given function to all values in a given list.\n    '''\n    return [f(x) for x in a]\n    \n    \ndef foldl(f,a,x):\n    '''\n    Write a function that computes the result of applying a given function of two arguments cumulatively to the elements of a given list, from left to right, so as to reduce the list to a single value.\n    '''\n    for i in a:\n        x = f(i,x)\n    return x\n    \n    \ndef foldr(f,a,x):\n    '''\n    Write a function that computes the result of applying a given function of two arguments cumulatively to the elements of a given list, from right to left, so as to reduce the list to a single value.\n    '''\n    for i in reversed(a):\n        x = f(i,x)\n    return x\n    \n    \ndef reverse_foldl(f,a,x):\n    '''\n    Write a function that computes the result of applying a given function of two arguments cumulatively to the elements of a given list, from right to left, so as to reduce the list to a single value.\n    '''\n    for i in reversed(a):\n        x = f(i,x)\n    return x\n    \n    \ndef reverse_foldr(f,a,x):\n    '''\n    Write a function that computes the result of applying a given function of two arguments cumulatively to the elements of a given list, from left to right, so as to reduce the list to a single value.\n    '''\n    for i in a:\n        x = f(i,x)\n    return x\n    \n    \ndef zip_list(*a):\n    '''\n    Write a function that combines two lists into one list of two-element tuples, where each tuple is formed from the i-th element in each list.\n    '''\n    return list(zip(*a))\n    \n    \ndef zip_with(*a):\n    '''\n    Write a function that combines two lists into one list of two-element tuples, where each tuple contains the value from the i-th element in the first list, paired with the value from the i-th element in the second list.\n    '''\n    return [x for x in zip(a[0],a[1])]\n    \n    \ndef zip_list_with(*a):\n    '''\n    Write a function that combines two lists into one list of two-element tuples, where each tuple contains the i-th element from each list.\n    '''\n    return list(zip(a[0],a[1]))\n    \n    \ndef zip_with_index(a):\n    '''\n    Write a function that combines a given list with a list of numbers into one list of two-element tuples, where each tuple contains the i-th element from the list, paired with the i-th element in the list of numbers.\n    '''\n    return [(a[i],x) for i,x in enumerate(a)]\n    \n    \ndef zip_list_with_index(a):\n    '''\n    Write a function that combines a given list with a list of numbers into one list of two-element tuples, where each tuple contains the i-th element from the list, paired with the i-th element in the list of numbers.\n    '''\n    return [(a[i],x) for i,x in enumerate(a)]\n    \n    \ndef range_list(a,b=None):\n    '''\n    Write a function that returns a list that contains all values from a given interval.\n    '''\n    return range(a,b) if b else range(a)\n    \n    \ndef concat_list(a,b):\n    '''\n    Write a function that concatenates two lists into a third list.\n    '''\n    return a + b\n    \n    \ndef concat_with(a,b):\n    '''\n    Write a function that concatenates two lists into a third lis"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for y in a:\n        if y == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # initialize result\n    sum = 0\n    # loop through each element in list\n    for i in range(len(list1)):\n        # if element is within range, add to sum\n        if m <= i <= n:\n            sum += list1[i]\n    # return sum\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m<0 or n>len(list1):\n        return 0\n    sum=0\n    for i in range(m,n+1):\n        sum+=list1[i]\n    return sum\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10],1,3))\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10],0,3))\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10],3,8))\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10],-2,-5))\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10],1,-1))\nprint(sum_range_list([1,2,3,4,5,6,7,8,9,10],-5,5))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # base case: empty list, or indices don't exist\n    if list1 == [] or m > n:\n        return 0\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n + 1):\n        sum_list = sum_list + list1[i]\n    return sum_list\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in list1[m:n]:\n        sum += x\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # lst = list1[m:n+1]\n    # print(lst)\n    # print(sum(lst))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_of_numbers = 0\n    for i in range(m, n
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        if m <= i <= n:\n            sum1 += list1[i]\n    return sum1\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(\"the perimeter is \" + str(a*5))\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\ndef area_triangle(b,c):\n    '''\n    Write a function to find the area of a triangle using base and height.\n    '''\n    return b * c / 2\ndef area_parallelogram(b,h):\n    '''\n    Write a function to find the area of a parallelogram using base and height.\n    '''\n    return b * h\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the area of a rectangle using base and height.\n    '''\n    return b * h\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle using radius.\n    '''\n    return 3.14 * r**2\ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the area of a trapezoid using base1, base2, and height.\n    '''\n    return 1/2 * (b1 + b2) * h\ndef area_ellipse(a,b):\n    '''\n    Write a function to find the area of an ellipse using major and minor axes.\n    '''\n    return math.pi * a * b\ndef area_sector(b,h,phi):\n    '''\n    Write a function to find the area of a sector of a regular polygon using base, height, and angle.\n    '''\n    return 1/2 * b * h * math.sin(phi)\ndef area_nsphere(r):\n    '''\n    Write a function to find the area of a n-sphere using radius.\n    '''\n    return 4 * math.pi * r**2\ndef area_cube(s):\n    '''\n    Write a function to find the area of a cube using side length.\n    '''\n    return 6 * s**2\ndef volume_cube(s):\n    '''\n    Write a function to find the volume of a cube using side length.\n    '''\n    return s**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder using radius and height.\n    '''\n    return math.pi * r**2 * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone using radius and height.\n    '''\n    return 1/3 * math.pi * r**2 * h\ndef volume_prism(b,h):\n    '''\n    Write a function to find the volume of a prism using base and height.\n    '''\n    return 1/3 * b * h**2\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid using base and height.\n    '''\n    return 1/3 * b**2 * h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere using radius.\n    '''\n    return 4/3 * math.pi * r**3\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere using radius.\n    '''\n    return 1/3 * math.pi * r**3\ndef volume_cone_helper(r,h):\n    '''\n    Write a function to find the volume of a cone using radius and height.\n    '''\n    return 1/3 * math.pi * r**2 * h\ndef volume_cone_non_parallel_helper(r,h):\n    '''\n    Write a function to find the volume of a cone using radius and height.\n    '''\n    return math.pi * r**2 * h\ndef volume_cylinder_helper(r,h):\n    '''\n    Write a function to find the volume of a cylinder using radius and height.\n    '''\n    return math.pi * r**2 * h\ndef volume_hemisphere_helper(r):\n    '''\n    Write a function to find the volume of a hemisphere using radius.\n    '''\n    return 1/3 * math.pi * r**3\ndef volume_sphere_helper(r):\n    '''\n    Write a function to find the volume of a sphere using radius.\n    '''\n    return 4/3 * math.pi * r**3\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere using radius.\n    '''\n    return 4 * math.pi * r**2\ndef surface_area_hemisphere(r):\n    '''\n    Write a function to find the surface area of a hemisphere using radius.\n    '''\n    return 2 * math.pi * r**2\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder using radius and height.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone using radius and height.\n    '''\n    return math.pi * r * (r + h)\ndef surface_area_cube(s):\n    '''\n    Write a function to find the surface area of a cube using side length.\n    '''\n    return 6 * s**2\ndef surface_area_hemisphere_helper(r):\n    '''\n    Write a function to find the surface area of a hemisphere using radius.\n    '''\n    return 2 * math.pi * r**2\ndef surface_area_cone_helper(r,h):\n    '''\n    Write a function to find the surface area of a cone using radius and height.\n    '''\n    return math.pi * r * (r + h)\ndef surface_area_cylinder_helper(r,h):\n    '''\n    Write a function to find the surface area of a cylinder using radius and height.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surface_area_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle using base and height.\n    '''\n    return 2 * (b * h)\ndef surface_area_parallelogram(b,h):\n    '''\n    Write a function to find the surface area of a parallelogram using base and height.\n    '''\n    return 2 * (b * h)\ndef surface_area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezoid using base1, base2, and height.\n    '''\n    return 1/2 * (b1 + b2) * h\ndef surface_area_nsphere(r):\n    '''\n    Write a function to find the surface area of a n-sphere using radius.\n    '''\n    return 4 * math.pi * r**2\ndef surface_area_cube_helper(s):\n    '''\n    Write a function to find the surface area of a cube using side length.\n    '''\n    return 6 * s**2\ndef surface_area_cylinder_helper(r,h):\n    '''\n    Write a function to find the surface area of a cylinder using radius and height.\n    '''\n    return 2 * math.pi * r * (r + h)\ndef surface_area_cone_helper(r,h):\n    '''\n    Write a function to find the surface area of a cone using radius and height.\n    '''\n    return math.pi * r * (r + h)\ndef surface_area_nsphere_helper(r):\n    '''\n    Write a function to find the surface area of a n-sphere using radius.\n    '''\n    return 4 * math.pi * r**2\ndef unit_conversion(a,base_unit,target_unit):\n    '''\n    Write a function to convert a value from one unit to another using base unit.\n    '''\n    if base_unit == \"in\" and target_unit == \"ft\":\n        return a * 12\n    elif base_unit == \"ft\" and target_unit == \"in\":\n        return a / 12\n    elif base_unit == \"ft\" and target_unit == \"m\":\n        return a / 3.281\n    elif base_unit == \"m\" and target_unit == \"ft\":\n        return a * "
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a * 5\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p=5*a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    P = 5 * a\n    return P\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter=5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n    \n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    cnt = 0\n    for i in range(len(s)):\n        if s[i:i+4] =='std':\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    print('Method 1:')\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] == \"std\":\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n    # if count>0:\n    #     return count\n    # else:\n    #     return 0\n    \n    # return s.count('std')\n    "
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #tuple1 = (1, 2, 3, 4, 5, \"one\", [1,2,3], {1:2, 3:4}, (1,2,3))\n    #tuple2 = (\"one\", 1, 3, {1:2, 3:4}, (1,2,3))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    list_1 = []\n    for i in test_tuple:\n        list_1.append(type(i))\n    return list_1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    return all(type(a) is type(b) for a, b in zip(test_tuple[:-1], test_tuple[1:]))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_check = False\n    if len(test_tuple) == 1:\n        tuple_check = True\n    elif len(test_tuple) > 1:\n        tuple_check = True\n    else:\n        print(\"tuple doesn't have any element\")\n    return tuple_check\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print('Testing...')\n    try:\n        x = [i for i in test_tuple if not isinstance(i, tuple)]\n        return any(isinstance(i, tuple) for i in test_tuple)\n    except TypeError:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return (len(test_tuple)==len(set(test_tuple)) and type(test_tuple[0]) == type(test_tuple[1]) and type(test_tuple[0]) == type(test_tuple[2]))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[i-1]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_list = [i for i in test_tuple]\n    print(type(tuple_list[0]) == type(tuple_list[1]))\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n <= 0 or x < 0:\n        return False\n    else:\n        count = 0\n        for num in arr:\n            if num == x:\n                count += 1\n        if count >= n/2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority = n / 2\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = (start + end) / 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    #returns true if the array is empty\n    if n == 0:\n        return False\n    #if the array is only one element return it if that element is equal to x or not\n    elif n == 1:\n        return arr[0] == x\n    #if the array is two elements check if it is the x or not\n    elif n == 2:\n        return arr[0] == x or arr[1] == x\n    #if the array is more than two elements check if the count of x in the array is greater than or equal to n/2\n    else:\n        #get the count of the x in the array\n        count = 0\n        for i in range(n):\n            if arr[i] == x:\n                count += 1\n        #if the count is greater than n/2 return true\n        if count >= n/2:\n            return True\n        #otherwise return false\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for element in arr:\n        if element == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If array contains only one element or is empty\n    if n == 1:\n        return arr[0] == x\n    # If array contains only two elements, check if one is equal to x\n    if n == 2:\n        return arr[0] == x or arr[1] == x\n    # Check if array contains more than two elements\n    # Determine if arr[0] is equal to x\n    if arr[0] == x:\n        # If true, determine if arr[1:] has a majority element\n        if is_majority(arr[1:], n - 1, x):\n            return True\n        # If false, then arr[1:] has no majority element\n        else:\n            return False\n    # Check if arr[1] is equal to x\n    if arr[1] == x:\n        # If true, determine if arr[0] is majority element\n        if is_majority(arr[:1], 1, x):\n            return True\n        # If false, then arr[0] is no majority element\n        else:\n            return False\n    # Determine if arr[0] and arr[1] are equal to x\n    if arr[0] == arr[1] == x:\n        # If true, determine if arr[2:] is majority element\n        if is_majority(arr[2:], n - 2, x):\n            return True\n        # If false, then arr[2:] is no majority element\n        else:\n            return False\n    # If none of the above conditions are true, return False\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    majority_index = int((n - 1) / 2)\n    left_index = 0\n    right_index = n - 1\n    count = 1\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Set the start and end to the beginning and end of the array\n    start = 0\n    end = n - 1\n    # If the given element is the majority element, return true\n    if arr[start] == arr[end] == x:\n        return True\n    # Otherwise, if the start index is less than the end index\n    if start < end:\n        # Find the midpoint of the array\n        mid = (start + end) // 2\n        # If the element is equal to the midpoint\n        if arr[mid] == x:\n            # If the element is greater than the midpoint, return true\n            if arr[mid] < x:\n                return is_majority(arr, mid+1, x)\n            # Otherwise, return false\n            else:\n                return is_majority(arr, start, x)\n        # Otherwise, if the element is greater than the midpoint\n        if arr[mid] < x:\n            # If the element is greater than the midpoint, return true\n            if arr[mid] > x:\n                return is_majority(arr, mid+1, x)\n            # Otherwise, return false\n            else:\n                return is_majority(arr, start, x)\n        # Otherwise, if the element is less than the midpoint\n        if arr[mid] > x:\n            # If the element is less than the midpoint, return true\n            if arr[mid] < x:\n                return is_majority(arr, start, x)\n            # Otherwise, return false\n            else:\n                return is_majority(arr, mid+1, x)\n    # Otherwise, return false\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[0] == x:\n        return True\n    if arr[n-1] == x:\n        return True\n    return x in arr[0:n//2] or x in arr[n//2:n]\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # The time complexity is O(log n)\n    # The space complexity is O(1)\n    \n    if n == 1:\n        return False\n    \n    if n == 2:\n        if arr[0] == arr[1]:\n            return True\n        else:\n            return False\n    \n    # if x is not present in the arr then return false\n    if arr[n//2]!= x:\n        return False\n    \n    return is_majority(arr, n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Check if the element's count is greater than n/2\n    if arr.count(x) > (n/2):\n        # If the count is greater than n/2, return True\n        return True\n    # Otherwise, return False\n    return False\n    "
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    if (n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    cnt = 0\n    while (n): \n        cnt += 1\n        n &= (n - 1) \n    return cnt \n  "
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Set bit positions for each digit (bit 0 = 0, bit 1 = 1, etc.).\n    # Set bit positions of the given number.\n    # Initialize the variable with 0 to store the number of set bits for the given number.\n    # We traverse the bits of the number using the range.\n    # We check if the bit is set by using the bit-and (&) operator.\n    # If the bit is set then we increment the count variable.\n    # After the loop, we return the count value.\n    count = 0\n    for x in range(0, 32):\n        if n & (1 << x):\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count('1')\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    new_str=''\n    for i in range(len(str)):\n        if i%2==0:\n            new_str+=str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    word = list(str)\n    new_word = []\n    for idx, char in enumerate(word):\n        if idx % 2 == 0:\n            new_word.append(char)\n    new_word = \"\".join(new_word)\n    return new_word\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1=''\n    for i in range(len(str)):\n        if i%2==0:\n            str1+=str[i]\n    print(str1)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([i for i in str if str.index(i) % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str = 'Hello'\n    \n    return str[0::2]\n    \n    \nprint(odd_values_string('abcdef'))"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string_char = ''\n    for i in range(0,len(str)):\n        if i%2==0:\n            string_char += str[i]\n    return string_char\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list_str=list(str)\n    for i in range(len(list_str)):\n        if i%2==0:\n            list_str[i]=\"\"\n    return ''.join(list_str)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n    "
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Write your code here\n    lst = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            lst.append(str[i])\n    return ''.join(lst)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        print(\"The minimum of three numbers is \", a)\n    elif b < a and b < c:\n        print(\"The minimum of three numbers is \", b)\n    else:\n        print(\"The minimum of three numbers is \", c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_number = a\n    if b < min_number:\n        min_number = b\n    if c < min_number:\n        min_number = c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and b<c:\n        return a\n    elif c<b and b<a:\n        return b\n    elif a<c and c<b:\n        return c\n    elif b<a and a<c:\n        return a\n    elif c<a and a<b:\n        return a\n    elif b<c and c<a:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            return c\n        else:\n            return b\n    else:\n        if a < c:\n            return c\n        else:\n            return a\n    return 0\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if(a>b and a<c): \n        return a\n    elif(b>a and b<c): \n        return b\n    else: \n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_value = a if a < b else b\n    if c < min_value:\n        min_value = c\n    return min_value\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            print(\"Minimum value is:\",a)\n        else:\n            print(\"Minimum value is:\",c)\n    else:\n        if b < c:\n            print(\"Minimum value is:\",b)\n        else:\n            print(\"Minimum value is:\",c)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a \n    if b < minimum:\n        minimum = b\n    if c < minimum:\n        minimum = c\n    return minimum\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    maximum = a\n    if b > maximum:\n        maximum = b\n    if c > maximum:\n        maximum = c\n    return maximum\ndef sort_list(a,b,c):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    if b < a:\n        temp = a\n        a = b\n        b = temp\n    if c < a:\n        temp = a\n        a = c\n        c = temp\n    if b < c:\n        temp = c\n        c = b\n        b = temp\n    return [a,b,c]\ndef is_it_true(x):\n    '''\n    Write a function to check whether a number is true or not.\n    '''\n    if x:\n        return True\n    else:\n        return False\ndef biggest_num(a,b,c):\n    '''\n    Write a function to find the biggest number of three numbers.\n    '''\n    biggest = a\n    if b > biggest:\n        biggest = b\n    if c > biggest:\n        biggest = c\n    return biggest\ndef check_for_even(x):\n    '''\n    Write a function to check whether the number is even or odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\ndef function_with_default_parameter_values(a,b=1,c=2):\n    '''\n    Write a function to get sum of three numbers.\n    '''\n    return a+b+c\ndef sum_all(*args):\n    '''\n    Write a function to get sum of all numbers.\n    '''\n    sum = 0\n    for i in args:\n        sum += i\n    return sum\ndef get_word_length(word):\n    '''\n    Write a function to get length of the given word.\n    '''\n    length = 0\n    for i in word:\n        length += 1\n    return length\ndef max_num_in_list(list):\n    '''\n    Write a function to get maximum number from the list.\n    '''\n    return max(list)\ndef split_sentence(sentence):\n    '''\n    Write a function to split a sentence into words.\n    '''\n    return sentence.split(\" \")\ndef sum_of_squares(n):\n    '''\n    Write a function to get sum of squares of numbers from 1 to n.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i+1)**2\n    return sum\ndef vowel_count(word):\n    '''\n    Write a function to count the number of vowels.\n    '''\n    count = 0\n    for i in word:\n        if i in \"aeiouAEIOU\":\n            count += 1\n    return count\ndef vowels_in_word(word):\n    '''\n    Write a function to get vowels from a word.\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_string = \"\"\n    for i in word:\n        if i in vowels:\n            vowel_string += i\n    return vowel_string\ndef string_reverser(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    return s[::-1]\ndef sum_of_even_index_values_in_list(list):\n    '''\n    Write a function to get sum of even index values in list.\n    '''\n    sum = 0\n    for i in list:\n        if i % 2 == 0:\n            sum += i\n    return sum\ndef check_if_a_list_is_a_subset_of_another_list(list1,list2):\n    '''\n    Write a function to check whether a list is a subset of another list.\n    '''\n    if list2 in list1:\n        return True\n    else:\n        return False\ndef random_string_generator(length):\n    '''\n    Write a function to generate a random string.\n    '''\n    import random\n    return \"\".join(chr(random.randrange(33,126)) for _ in range(length))\ndef get_random_list_of_strings(n):\n    '''\n    Write a function to generate a list of random strings.\n    '''\n    list = []\n    for i in range(n):\n        list.append(random_string_generator(random.randrange(5,15)))\n    return list\ndef check_if_a_list_contains_a_string(list,string):\n    '''\n    Write a function to check whether a list contains a string.\n    '''\n    if string in list:\n        return True\n    else:\n        return False\ndef split_a_list_into_two_equal_length_sublists(list):\n    '''\n    Write a function to split a list into two equal length sublists.\n    '''\n    len1 = len(list)/2\n    len2 = len(list)-len1\n    return [list[:len1],list[len1:]]\ndef get_characters_from_back_of_string(word):\n    '''\n    Write a function to get characters from back of a string.\n    '''\n    return word[::-1]\ndef get_even_indexed_characters_in_string(string):\n    '''\n    Write a function to get even indexed characters in a string.\n    '''\n    even_index_list = []\n    for i in range(0,len(string),2):\n        even_index_list.append(string[i])\n    return even_index_list\ndef get_odd_indexed_characters_in_string(string):\n    '''\n    Write a function to get odd indexed characters in a string.\n    '''\n    odd_index_list = []\n    for i in range(1,len(string),2):\n        odd_index_list.append(string[i])\n    return odd_index_list\ndef get_characters_but_not_at_even_indexes(string):\n    '''\n    Write a function to get characters but not at even indexes.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string\ndef get_all_characters_but_not_at_odd_indexes(string):\n    '''\n    Write a function to get all characters but not at odd indexes.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string\ndef get_string_from_characters_at_odd_indexes(string):\n    '''\n    Write a function to get string from characters at odd indexes.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 1:\n            new_string += string[i]\n    return new_string\ndef get_string_from_characters_at_even_indexes(string):\n    '''\n    Write a function to get string from characters at even indexes.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string\ndef get_string_from_characters_at_odd_or_even_indexes(string):\n    '''\n    Write a function to get string from characters at odd or even indexes.\n    '''\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n        elif i % 2!= 0:\n            new_string += string[i]\n    return new_string\ndef get_input():\n    '''\n    Write a function to get input.\n    '''\n    return input()\ndef get_all_characters_from_string(string):\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def all_bits_set(n):\n        return(0 == (n & (n-1)))\n    a = list(map(all_bits_set, range(l, r+1)))\n    if all(a):\n        return True\n    else:\n        return False\nprint(all_Bits_Set_In_The_Given_Range(10,10,20))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Approach 1: Using loop\n    # Check all bits in n\n    # For i in range(32):\n    #   if ((n>>i)&1)!= 0:\n    #      return False\n    # return True\n    \n    # Approach 2: Using bit manipulation\n    # Find mask of given range\n    # mask = (1<<r) - (1<<(l-1))\n    # mask = ((1<<r) - (1<<(l-1)))\n    # mask = ((1<<(r-l+1))-1)\n    # mask = ((1<<r)-1)\n    mask = ~((1<<(r-l+1)) - 1)\n    # Check for the presence of any bit set in mask\n    return (n&mask) == 0\n    \n    "
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i=n\n    while i<=r:\n        if(i&n)==0:\n            return False\n        i=i<<1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Code here\n    print(n>>l)\n    print(n>>(r+1))\n    return not ((n>>l)&(n>>(r+1)))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    l_binary = '{0:b}'.format(l)\n    r_binary = '{0:b}'.format(r)\n    if(l_binary.count('0') == r_binary.count('0')):\n        return 1\n    return 0\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    max_bit=r\n    max_bit-=1\n    max_bit>>=1\n    max_bit+=1\n    count=0\n    while(n>0):\n        if(n&1==1):\n            count+=1\n        if(count>=l and count<=max_bit):\n            return False\n        n=n>>1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    i = 1\n    while(i <= n):\n        l = l & (i & ~(i-1)) \n        r = r & (i & ~(i-1)) \n        i = i << 1\n    return l == r\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = 0\n    for i in range(n):\n        mask = (1 << (i)) + mask\n    return (1 << (n-1)) - 1 + mask < l\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    ans = 0\n    for i in range(l,r+1):\n        ans = ans | (1<<i)\n    return n == ans\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    n=bin(n)\n    l=bin(l)\n    r=bin(r)\n    if(n[2:].count('0')>1):\n        return False\n    if(n[2:].count('0')==1 and (n[2:].rindex('0')<l[2:].rindex('0') or n[2:].rindex('0')>r[2:].rindex('0'))):\n        return False\n    return True\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    #O(n) time and space\n    i, j = 0, n-1\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j -= 1\n        else:\n            i += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    neg = []\n    pos = []\n    \n    for element in arr:\n        if element < 0:\n            neg.append(element)\n        else:\n            pos.append(element)\n            \n    return neg + pos\n    \ndef test_function(test_case):\n    arr = test_case[0]\n    solution = test_case[1]\n    \n    output = re_arrange_array(arr, n)\n    for index, element in enumerate(output):\n        if element!= solution[index]:\n            print(\"Fail\")\n            return\n    print(\"Pass\")\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i < len(arr)-1:\n        if arr[i] < 0:\n            if arr[j] >= 0:\n                arr[i], arr[j] = arr[j], arr[i]\n                i += 1\n                j -= 1\n        else:\n            i += 1\n    return arr\n    \ndef re_arrange_array_two_pointer(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i] < 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        elif arr[i] > 0:\n            j -= 1\n        else:\n            i += 1\n    return arr\n        \ndef missing_number(arr):\n    '''\n    Given an array of n distinct numbers, where each number is between 1 and n, inclusive, find the one that is missing from the array.\n    '''\n    for i in range(len(arr)):\n        if arr[abs(arr[i])-1] > 0:\n            arr[abs(arr[i])-1] = -arr[abs(arr[i])-1]\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            return i + 1\n    return len(arr) + 1\n    \ndef missing_number_brute_force(arr):\n    '''\n    Given an array of n distinct numbers, where each number is between 1 and n, inclusive, find the one that is missing from the array.\n    '''\n    arr_set = set(arr)\n    n = len(arr)\n    for i in range(1, n+1):\n        if i not in arr_set:\n            return i\n    \ndef missing_number_sort(arr):\n    '''\n    Given an array of n distinct numbers, where each number is between 1 and n, inclusive, find the one that is missing from the array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if i!= arr[i]:\n            return i\n    return len(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # for i in range(n):\n    #     if arr[i] < 0:\n    #         arr[i], arr[i+n] = arr[i+n], arr[i]\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Write your code here\n    if n == 0:\n        return arr\n    for i in range(n, len(arr)):\n        for j in range(i, n, -1):\n            if arr[j] < 0:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n            else:\n                break\n    return arr\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    print(arr)\n    j = 0\n    while j < len(arr):\n        if arr[j] >= 0:\n            for i in range(len(arr)):\n                if arr[i] < 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    j = j + 1\n                    break\n        else:\n            j = j + 1\n    print(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # split array into negative and positive numbers\n    positive_nums = []\n    negative_nums = []\n    for num in arr:\n        if num > 0:\n            positive_nums.append(num)\n        elif num < 0:\n            negative_nums.append(num)\n    # reassign array values to rearrange\n    for i in range(n):\n        arr[i] = positive_nums[i]\n    for i in range(n, len(arr)):\n        arr[i] = negative_nums[i-n]\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    return [x for x in arr if x < 0][::-1] + [x for x in arr if x >= 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    first_half = []\n    second_half = []\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Given a string, return a new string where the blank spaces in the original string have been replaced with the character.\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\"+char+\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char =='':\n            new_str += char\n        else:\n            new_str += char\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    result = str1.replace(' ','%s')\n    return result\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\"%char)\nprint(replace_blank(\"This is a test\", '-'))\nprint(replace_blank(\"We came, we saw, we conquered...then we ate Bill's (huge) cake.\",'*'))\nprint(replace_blank(\"We're gonna need a bigger boat.\",\"&\"))\nprint(replace_blank(\"Beep boop beer!\",\"*\"))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"{}\".format(char))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for char in str1:\n        if char.isspace():\n            str1=str1.replace(\" \",\"\")\n    return str1\nprint(replace_blank(\"dfsdfsdfd gggg   \",\"-\"))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in str1:\n        if i =='':\n            str1 = str1.replace(' ','%s')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # list1 = [3,6,8,9,10,1,2,4,5]\n    # n = 3\n    if n > len(list1):\n        return list1\n    list2 = []\n    for i in range(n):\n        list2.append(max(list1))\n        list1.remove(max(list1))\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    return new_list\ndef larg_nnum_xor(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n        list1.remove(large)\n    for i in range(len(new_list)):\n        if new_list[i] in list1:\n            list1.remove(new_list[i])\n    return new_list\ndef larg_nnum_xor3(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list, but returns a list with the n largest items appearing exactly once.\n    '''\n    new_list=[]\n    for i in range(n):\n        large=max(list1)\n        new_list.append(large)\n    "
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #create a copy of the list\n    copy=list1[:]\n    #sort the list\n    copy.sort()\n    #return the top n\n    return copy[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n, list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    def custom_sort(list1):\n        list1.sort()\n        return list1[-n:]\n    print(custom_sort(list1))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list1.reverse()\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    new_list=[]\n    for i in range(n):\n        new_list.append(max(list1))\n        list1.remove(max(list1))\n    return new_list\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return heapq.nlargest(n,list1)\n    \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if n > len(list1):\n        return list1\n    else:\n        return sorted(list1)[-n:]\n        \n    \n    \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    i"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        num = heapq.nlargest(1,list1)[0]\n        list1.remove(num)\n        list2.append(num)\n    return list2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s=2*pi*r*h+2*pi*r**2\n    return s\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(2*3.14*r*h)\nlateralsuface_cylinder(2,3)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    result = 2 * pi * r * h + 2 * pi * r ** 2\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(h+r)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    \n    surface_area = 2*math.pi*r*(r+h) + 2*math.pi*r**2\n    return surface_area\n    \n    \ndef print_spiral_print_drinks(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral.\n    '''\n    \n    max_letters = len(max(drinks,key=len))\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{max_letters}}\",drinks[-i])\n    return\n    \ndef print_spiral_print_drinks_long(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names.\n    '''\n    max_letters = len(max(drinks,key=len))\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{max_letters}}\",drinks[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \n    \ndef print_spiral_print_drinks_ordered_long(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \n    \ndef print_spiral_print_drinks_ordered_long(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \n    \ndef print_spiral_print_drinks_ordered_long_strings(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \n    \ndef print_spiral_print_drinks_ordered_long_strings(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered_long_strings(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:>{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:>{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:>{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:>{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:>{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but with long names and ordered.\n    '''\n    \n    drinks_ordered = []\n    for drink in drinks:\n        drinks_ordered.append(drink)\n    drinks_ordered.sort()\n    for i in range(1,len(drinks)+1):\n        print(f\"{i:>{len(max(drinks,key=len))}}\",drinks_ordered[-i])\n    return\n    \ndef print_spiral_print_drinks_ordered_long_strings_padded(drinks):\n    '''\n    Write a function to print the name of the drinks in a spiral, but wit"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_square(l):\n    '''\n    Write a function to find the lateral surface area of a rectangle.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_parallelogram(l,w):\n    '''\n    Write a function to find the lateral surface area of a parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_trapezoid(l1,l2,w):\n    '''\n    Write a function to find the lateral surface area of a trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rhombus(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a rhombus.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_kite(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a kite.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_kite_parallelogram(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a kite and parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_kite_trapezoid(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a kite and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_spiral(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_curve(l1,l2):\n    '''\n    Write a function to find the lateral surface area of a curve.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_parallelogram(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_trapezoid(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_trapezoid(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_spiral(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite_parallelogram(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite and parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite_trapezoid(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite_spiral(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite and spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_spiral(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_curve(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and curve.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_kite(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and kite.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_kite_parallelogram(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and kite and parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_kite_trapezoid(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and kite and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcone_kite_spiral(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cone and kite and spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_spiral(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_curve(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and curve.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite_parallelogram(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite and parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite_trapezoid(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_kite_spiral(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and kite and spiral.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_curve_parallelogram(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and curve and parallelogram.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_curve_trapezoid(r):\n    '''\n    Write a function to find the lateral surface area of a right circular cylinder and curve and trapezoid.\n    '''\n    pass #remove this line\n    return 0\ndef lateralsurface_rightcircularcylinder_curve_spiral(r):\n    '''\n    Write a function to find the latera"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h+2*3.14*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*r*pi*h\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    s_cylinder = math.pi*r*r*h\n    return s_cylinder\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    print(volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    #Check if the length of the sides is a positive integer.\n    if (isinstance(l, int) == False):\n        raise ValueError('Length must be an integer.')\n    elif (l < 0):\n        raise ValueError('Length must be a positive integer.')\n    return (l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA # Set all even bits of a given number.\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0,32):\n        if n & (1<<i)!= 0:\n            if i%2 == 0:\n                n &= ~(1<<i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n ^ ((n >> 1) & 0x55555555)\n    n = n ^ ((n >> 2) & 0x33333333)\n    n = n ^ ((n >> 4) & 0x0f0f0f0f)\n    n = n ^ ((n >> 8) & 0x00ff00ff)\n    n = n ^ ((n >> 16) & 0x0000ffff)\n    n = n ^ ((n >> 32) & 0x00000000)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0, n + 1):\n        for j in range(0, 32):\n            if i & (1 << j):\n                print(\"1\", end=\"\")\n            else:\n                print(\"0\", end=\"\")\n        print()\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n % 2!= 0:\n        return n & ~1\n    else:\n        return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0xAAAAAAAA\n    \n    \ndef set_all_bits_in_integer(n):\n    '''\n    Write a python function to set all bits of a given number.\n    '''\n    return n & 0xFFFFFFFF\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(0,32):\n        if n & (1 << i):\n            if i % 2 == 0:\n                n = n & ~(1 << i)\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n&0xAAAAAAAA)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if not isinstance(test_list,list) or len(test_list) < 1:\n        return None\n    new_dict = {}\n    for num in test_list:\n        if num not in new_dict:\n            new_dict[num] = 1\n        else:\n            new_dict[num] += 1\n    return new_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [1,2,3,4,5,3,2,4,2,3,1,1,2,3,1,2,3,1]\n    \n    dict_of_occurences = {}\n    \n    for tuple_ in test_list:\n        if tuple_ not in dict_of_occurences:\n            dict_of_occurences[tuple_] = 1\n        else:\n            dict_of_occurences[tuple_] = dict_of_occurences[tuple_] + 1\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # init empty dictionary\n    dict_of_occurrences = {}\n    # iterate over input list\n    for item in test_list:\n        # if the item is in dict_of_occurrences, add 1 to the current occurrence value\n        if item in dict_of_occurrences:\n            dict_of_occurrences[item] += 1\n        # if item is not in dict_of_occurrences, add it and initialize occurrence value to 1\n        else:\n            dict_of_occurrences[item] = 1\n    # return dictionary\n    return dict_of_occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print('\\ncheck_occurences')\n    print('\\n===== list =====')\n    print(test_list)\n    \n    #write your code here\n    \n    #convert list to tuple\n    tuple_list = []\n    for index in range(len(test_list)):\n        tuple_list.append(tuple(test_list[index]))\n    #convert tuple to set to remove duplicates\n    tuple_set = list(set(tuple_list))\n    print('\\n===== set =====')\n    print(tuple_set)\n    \n    #create dictionary\n    occurences_dict = {}\n    for index in range(len(tuple_set)):\n        occurences_dict[tuple_set[index]] = tuple_list.count(tuple_set[index])\n    print('\\n===== dict =====')\n    print(occurences_dict)\n    \n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #check_occurences([('a', 1), ('b', 2), ('c', 3), ('a', 3)])\n    print(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_dict = {}\n    for item in test_list:\n        if item not in test_dict:\n            test_dict[item] = 1\n        else:\n            test_dict[item] += 1\n    return test_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {item: test_list.count(item) for item in test_list}\n    # return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    result = {}\n    for i in unique_tuples:\n        result[i] = test_list.count(i)\n    return result\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = {}\n    count = 0\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            substring = str[i:j+1]\n            if substring not in substrings:\n                if len(substring)!= 0:\n                    substrings[substring] = 1\n                    count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    if length == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(0, length-1):\n            for j in range(i, length):\n                if(j-i >= 3):\n                    if(str[i:j+1]):\n                        count += 1\n                    # print(str[i:j+1])\n        return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    def helper(s, start, end, res):\n        if start >= end:\n            return\n        elif s[start: end+1] == '':\n            return\n        elif s[start: end+1] not in res:\n            res.append(s[start: end+1])\n            helper(s, start+1, end, res)\n        else:\n            return\n        return res\n        \n    res = []\n    helper(str, 0, len(str)-1, res)\n    return len(res)\n    \ndef number_of_substrings(str):\n    n = len(str)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if str[i] == '0':\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + 1\n        if i > 1 and str[i-1: i+1] <= '26' and str[i-1: i+1] >= '10':\n            dp[i] = min(dp[i], dp[i-2] + 1)\n    return dp[-1]\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def is_valid_string(str):\n        if len(str) == 1 or str == '':\n            return False\n        else:\n            return True\n    substrings = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if is_valid_string(substring):\n                substrings.append(substring)\n    print(len(substrings))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    total = 0\n    for i in range(0, len(str)): \n        for j in range(i, len(str)): \n            substring = str[i:j+1]\n            if len(substring) > 0: \n                total += 1\n    return total \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if not str: return 0\n    if len(str) == 1: return 1\n    substrs = []\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substrs.append(str[i:j+1])\n    return len(substrs)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #using list comprehension\n    #input_string=input(\"Enter string: \")\n    output_string=[]\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            output_string.append(str[i:j+1])\n    return len(output_string)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    return length - (str.count(\"\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    def count_substring(string):\n        length=len(string)\n        count=0\n        for i in range(0,length):\n            j=i\n            while j<length:\n                substring=string[i:j+1]\n                if substring:\n                    count=count+1\n                j=j+1\n        return count\n    return count_substring(str)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    # Create list of substrings\n    substrings = [str[x:y] for x, y in zip(range(len(str) + 1), range(1, len(str) + 1))]\n    # print (substrings)\n    # Count the non-empty substrings\n    for sub in substrings:\n        if (sub!= \"\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def factorial(n):\n        '''\n        Write a function that takes in an integer n and returns the value of n!\n        '''\n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    #Base cases:\n    #m == 0 and n == 1: 0 possible sequences\n    #m == 0 and n == 2: 0 possible sequences\n    #m == 0 and n == 3: 0 possible sequences\n    #m == 1 and n == 1: 1 possible sequence\n    #m == 1 and n == 2: 1 possible sequence\n    #m == 1 and n == 3: 0 possible sequences\n    #m == 2 and n == 2: 2 possible sequences\n    #m == 2 and n == 3: 0 possible sequences\n    #m == 3 and n == 3: 6 possible sequences\n    #m == 4 and n == 3: 0 possible sequences\n    #m == 5 and n == 3: 0 possible sequences\n    #m == 6 and n == 3: 0 possible sequences\n    \n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return 2*m\n    if n == 3:\n        return m + (m**2)*(m-1)/2\n    return m*(get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for x in range(m, n+1):\n        total_number_of_sequences += get_number_of_sequences(x)\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n<=1:\n        return 1\n    elif n>1:\n        return get_total_number_of_sequences(m,n-1)+get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    num_sequences = 0\n    for i in range(1,m):\n        for j in range(2,n):\n            if i*j > m:\n                break\n            else:\n                num_sequences += (m - i*j + 1)/(i+1)\n    return int(num_sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #use the binomial coefficient function, since we can construct any given sequence from all possible ways of selecting k elements from n elements, n! / (n-k)!k!\n    def factorial(n):\n        factorial = 1\n        for x in range(2, n+1):\n            factorial = factorial * x\n        return factorial\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    s = [0 for _ in range(n)]\n    s[0] = m\n    for i in range(1,n):\n        if i == 1:\n            s[i] = m - 1\n        else:\n            s[i] = (s[i-1] * (m - 1))\n    return s[n-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Solution\n    # Store the total number of permutations of m, n in a variable\n    total_permutations = math.factorial(m) / (math.factorial(n) * math.factorial(m - n))\n    return total_permutations\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return (m**n) // (m-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    # your code here\n    for i in range(1, m-n+1):\n        #print(i)\n        for j in range(i+1, m+1):\n            #print(j)\n            if j >= 2*i:\n                total_number_of_sequences +=1\n                #print(total_number_of_sequences)\n    return total_number_of_sequences\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:], list2 = list2, list1[-1:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[0:-1] + list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:]=list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:]=list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list = []\n    new_list.extend(list1)\n    new_list[len(list1)-1] = list2\n    return new_list\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list2)):\n        list1[-1] = list2[i]\n        list2.remove(list2[i])\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    counter = 0\n    for i in str1:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1 is None:\n        return None\n    count = 0\n    for i in str1:\n        count+=1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    print(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1 == '':\n        return 0\n    else:\n        return 1 + count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \ndef count_words(str1):\n    '''\n    Write a function to count the number of words in a sentence.\n    Note: Words are separated by white spaces.\n    '''\n    return len(str1.split())\n    \ndef string_concatenation(str1,str2,n):\n    '''\n    Write a function to return the nth string from the concatenation of two strings.\n    Note: The strings are separated by a space and n is in range of the length of both strings.\n    '''\n    return str1+str2[n-1]\n    \ndef count_str(str1,target_str):\n    '''\n    Write a function to return the number of times a target string is present in another string.\n    '''\n    return str1.count(target_str)\n    \ndef count_digits(str1):\n    '''\n    Write a function to count the total number of digits in a string.\n    Note: Digits are numbers from 0-9.\n    '''\n    return len([c for c in str1 if c.isdigit()])\n    \ndef remove_char(str1,char_to_remove):\n    '''\n    Write a function to remove all the occurrence of a specified character in a string.\n    '''\n    return str1.replace(char_to_remove, '')\n    \ndef check_char(str1,target_ch):\n    '''\n    Write a function to check if a string contains a target character.\n    '''\n    return str1.find(target_ch)==0\n    \ndef is_substring(str1,str2):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return str1 in str2\n    \ndef word_search(str1, target_word):\n    '''\n    Write a function to check if a string is a substring of another string.\n    '''\n    return target_word in str1\n    \ndef left_justify(str1):\n    '''\n    Write a function to display a string in the left justified format.\n    The function should display the string in the required format.\n    In case of strings having multiple lines, display the string in the format such that it is completely left justified.\n    Note: Total length of the string should not be more than 80 characters.\n    '''\n    return''.join([str1[i:i+15] for i in range(0, len(str1), 15)])\n    \ndef remove_duplicates(str1):\n    '''\n    Write a function to remove all the duplicate characters from a given string.\n    Note: You cannot use any string methods and the function should not take any input.\n    '''\n    return ''.join(sorted(set(str1), key=str1.index))\n    \ndef format_strings(str1):\n    '''\n    Write a function to perform the following operations:\n    (i)    Remove all the leading and trailing spaces of a string.\n    (ii)    Convert all the uppercase characters to lowercase and vice versa.\n    (iii)    Reverse the order of the string.\n    '''\n    return str1.strip().swapcase()[::-1]\n    \ndef find_uppercase_iterative(str1):\n    '''\n    Write a function to find the index of the first non-repeating character in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            return i\n    return -1\n    \ndef find_uppercase_recursive(str1, i=0):\n    '''\n    Write a function to find the index of the first non-repeating character in a string.\n    '''\n    if i < len(str1):\n        if str1[i].isupper():\n            return i\n        return find_uppercase_recursive(str1, i+1)\n    return -1\n    \ndef word_count(str1):\n    '''\n    Write a function to count the number of times a specified word occurs in a string.\n    '''\n    return len([c for c in str1.split() if c.lower()=='the'])\n    \ndef check_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    Permutation means that both the strings have same set of characters and same frequency of each character.\n    '''\n    return sorted(str1)==sorted(str2)\n    \ndef check_anagram(str1,str2):\n    '''\n    Write a function to check if two strings are anagrams of each other.\n    '''\n    return sorted(str1)==sorted(str2)\n    \ndef get_unique_char(str1):\n    '''\n    Write a function to get a string made of unique characters of a given string.\n    '''\n    return ''.join(set(str1))\n    \ndef count_substring(str1, target_str):\n    '''\n    Write a function to count the number of occurrences of a substring in a string.\n    '''\n    return str1.count(target_str)\n    \ndef is_valid_str(str1):\n    '''\n    Write a function to check if a given string is a valid string.\n    A string is valid if all the characters in the string are alphanumeric (A-Z, a-z, and 0-9).\n    '''\n    return str1.isalnum()\n    \ndef remove_spaces(str1):\n    '''\n    Write a function to remove all the white spaces in a string.\n    '''\n    return str1.replace(' ','')\n    \ndef replace_str(str1,char1,char2):\n    '''\n    Write a function to replace all occurrences of a character in a string with another character.\n    '''\n    return str1.replace(char1,char2)\n    \ndef find_index(str1,target_str):\n    '''\n    Write a function to find the index of the first occurrence of a substring in a string.\n    '''\n    return str1.find(target_str)\n    \ndef get_max_char(str1):\n    '''\n    Write a function to get a string made of maximum length from a given string.\n    '''\n    return ''.join(sorted(set(str1), key=str1.index)[-1])\n    \ndef remove_chars(str1,chars):\n    '''\n    Write a function to remove all the characters from a given string.\n    '''\n    return ''.join([c for c in str1 if c not in chars])\n    \ndef reverse_string(str1):\n    '''\n    Write a function to reverse a string.\n    '''\n    return str1[::-1]\n    \ndef remove_vowels(str1):\n    '''\n    Write a function to remove all the vowels in a string.\n    '''\n    return ''.join([c for c in str1 if c.lower() not in ('a','e','i','o','u')])\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is palindrome or not.\n    '''\n    return str1.lower()==reverse_string(str1).lower()\n    \ndef find_palidrome_str(str1):\n    '''\n    Write a function to find the longest palindrome in a string.\n    Note: The input string may contain uppercase and lowercase alphabets.\n    '''\n    return max([s for s in str1 if s.lower()==reverse_string(s).lower()],key=len)\n    \ndef find_common_prefix(str1,str2):\n    '''\n    Write a function to find the longest common prefix in a given array of strings.\n    '''\n    return ''.join([c for c in str1[0:min(len(str1),len(str2))] if c in str2[0:min(len(str1),len(str2))]])\n    \ndef count_unique_char(str1):\n    '''\n    Write a function to count the total number of unique characters in a given string.\n    '''\n    return len(set(str1))\n    \ndef make_pattern(st"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count = count+1\n    print(count)\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 1\n    while True:\n        if count * count <= N: \n            count += 1\n            continue\n        return count * count \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = math.ceil(math.sqrt(N))\n    return (x*x)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N) \n    if int(root + 1)**2 == N: \n        return int((int(root + 1))**2) \n    else: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (int(math.sqrt(N)) == math.sqrt(N)): \n        return (int(math.sqrt(N))+1)**2\n    else: \n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find if the given number N is a perfect square\n    sqrt = int(N**0.5)\n    if sqrt * sqrt == N:\n        return (sqrt+1)**2\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while(True): \n        if(math.sqrt(N) % 1 == 0): \n            return N \n            break\n        N += 1"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = math.sqrt(N)\n    if int(root+0.5) ** 2 == N:\n        return (int(root+0.5) ** 2)\n    else:\n        return -1\ndef next_Perfect_Square_V2(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return -1 if N < 0 else (int(math.sqrt(N)+1)**2)\n    \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ##Your code here\n    if N == 0:\n        return 1\n    if N <= 1:\n        return 2\n    else:\n        return next_Perfect_Square(math.floor(math.sqrt(N)))**2\n    \n    \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #start writing your code here\n    if(N==0):\n        return 0\n    \n    while(math.sqrt(N)==int(math.sqrt(N))):\n        return (math.sqrt(N)+1)**2\n    return 0\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ans=0\n    while ans*ans<=N:\n        ans=ans+1\n    return ans*ans\nprint(next_Perfect_Square(0))\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sum_bitonic_array(arr): \n        # j and i to traverse through the array\n        j = 0 \n        i = 0\n        global_max = float(\"-inf\")\n        current_max = 0\n        while i < len(arr) and j < len(arr):\n            if i == 0 or arr[i] >= arr[i - 1]:\n                current_max += arr[i]\n                i += 1\n                if current_max > global_max:\n                    global_max = current_max\n            else:\n                current_max -= arr[i]\n                j = i\n                i += 1\n                \n        while j < len(arr):\n            current_max += arr[j]\n            if current_max > global_max:\n                global_max = current_max\n            j += 1\n        return global_max\n    return max_sum_bitonic_array(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # find the maximum increasing subsequence\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Bitonic subarray is defined as one that is first increasing and then decreasing. We want to find the largest sum of increasing subarray, then the largest sum of decreasing subarray. \n    # Proof for bitonic subarray: https://www.geeksforgeeks.org/bitonic-subarray-2/\n    # Find largest increasing subarray first:\n    # 1. Find the largest increasing subarray in O(n) time\n    # 2. Find the largest decreasing subarray in O(n) time. \n    # 3. If we find the second largest increasing subarray, we have found the first largest decreasing subarray. \n    # 4. Repeat step 2, for every element in the array. \n    # 5. Return the maximum of all the sums of all the possible decreasing subarrays. \n    \n    max_inc_sum = 0\n    max_dec_sum = 0\n    inc_sum = 0\n    dec_sum = 0\n    start = 0\n    end = 0\n    for i in range(0, len(arr) - 1): \n        if arr[i] < arr[i+1]:\n            inc_sum += arr[i]\n            if inc_sum > max_inc_sum:\n                max_inc_sum = inc_sum\n                start = i\n        if arr[i] > arr[i+1]:\n            dec_sum += arr[i]\n            if dec_sum > max_dec_sum:\n                max_dec_sum = dec_sum\n                end = i\n    return max_inc_sum + max_dec_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    size = len(arr) \n    summ = sum(arr)\n    max_sum = 0\n    if size < 3:\n        return 0\n    max_sum = max(summ, arr[0])\n    min_sum = summ\n    # calculating min sum\n    for i in range(1, size-1):\n        min_sum = min(min_sum, arr[i])\n        max_sum = max(max_sum, summ - min_sum)\n    return max_sum "
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Traverse through every element of the array.\n    # If element is greater than previous element, then it must be increasing sequence.\n    # Find the maximum increasing subarray ending at the current element.\n    # Find the maximum decreasing subarray starting from the current element.\n    # Return the maximum of the two values.\n    # Time complexity is O(n^2)\n    # Auxiliary Space: O(1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sub(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    \n    return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # This problem has multiple solutions, and I will only write one. So, try to write the simplest solution possible.\n    # The idea is to do a two pointer approach. We will have two pointers, left and right. At every step, we will check if the sum of the subarray from left to right is greater than the sum of the subarray from right to left. If the sum of the right part is greater, then we will shift the left pointer to the right. Otherwise, shift the right pointer to the left.\n    # Time complexity: O(n), space complexity: O(1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    length = len(arr)\n    s = [0] * length\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr, 0, len(arr) - 1)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    precision = 0.01\n    while True:\n        new_x = (x + (number / x)) / 2\n        if abs(new_x - x) < precision:\n            break\n        x = new_x\n    return new_x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x=number\n    estimate = 1.0\n    while True:\n        estimate = 0.5 * (estimate + (number/estimate))\n        difference = abs(number-estimate**2)\n        if difference <= 0.001:\n            break\n    return estimate\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    prev_guess = number / 2\n    cur_guess = (prev_guess + number / prev_guess) / 2\n    while abs(cur_guess - prev_guess) >= 0.00001:\n        prev_guess = cur_guess\n        cur_guess = (prev_guess + number / prev_guess) / 2\n    return cur_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    epsilon = 0.01\n    guess = x/2.0\n    difference = guess**2 - number\n    while difference >= epsilon:\n        guess = guess - difference/ (2*guess)\n        difference = guess**2 - number\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    precision = 1000\n    guess = number / 2\n    difference = guess ** 2 - number\n    while(abs(difference) > 0.1):\n        guess = (guess + number / guess) / 2\n        difference = guess ** 2 - number\n        print(\"guess: {}, difference: {}\".format(guess, difference))\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    initial_guess = number/2\n    for i in range(1000):\n        new_guess = (initial_guess + number/initial_guess)/2\n        if abs(new_guess - initial_guess) < 1e-10:\n            return new_guess\n        initial_guess = new_guess\n    return new_guess\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    last_guess = x/2\n    guess = (last_guess + x/last_guess)/2\n    if abs(guess-last_guess) < 10 ** -5:\n        return guess\n    else:\n        return babylonian_squareroot(guess)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if not isinstance(number, int) or number < 0:\n        return None\n    x = number\n    x0 = 1\n    x1 = x/2\n    while abs(x1 - x0) > 0.000000001:\n        x0 = x1\n        x1 = ((x0 + x/x0)/2)\n    return x1\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while True:\n        y = (x + number/x) / 2\n        if y == x:\n            return y\n        x = y\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n==1:\n        return 1\n    t = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i]==str[j]:\n                t[i][j] = t[i+1][j-1]+2\n            else:\n                t[i][j] = max(t[i+1][j], t[i][j-1])\n    return t[0][n-1]\ndef lcs(str1,str2):\n    '''\n    Write a function to find the length of longest common subsequence in the given two strings.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n==0 or m==0:\n        return 0\n    t = [[0 for i in range(m+1)] for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                t[i][j] = t[i-1][j-1]+1\n            else:\n                t[i][j] = max(t[i-1][j], t[i][j-1])\n    return t[n][m]\ndef longest_common_subsequence(str1, str2):\n    '''\n    Write a function to find the longest common subsequence in the given two strings.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n==0 or m==0:\n        return 0\n    t = [[0 for i in range(m+1)] for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            if str1[i-1]==str2[j-1]:\n                t[i][j] = t[i-1][j-1]+1\n            else:\n                t[i][j] = max(t[i-1][j], t[i][j-1])\n    return t[n][m]\ndef find_permutation(str1,str2):\n    '''\n    Write a function to find if one string is a permutation of the other.\n    '''\n    n = len(str1)\n    m = len(str2)\n    if n!=m:\n        return False\n    t = [0 for i in range(128)]\n    for i in range(n):\n        t[ord(str1[i])]+=1\n    for i in range(n):\n        if t[ord(str2[i])]==0:\n            return False\n        else:\n            t[ord(str2[i])]-=1\n    return True\ndef longest_palindromic_subsequence(str):\n    '''\n    Write a function to find the length of longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i]==str[j]:\n                t[i][j] = t[i+1][j-1]+2\n            else:\n                t[i][j] = max(t[i+1][j], t[i][j-1])\n    return t[0][n-1]\ndef longest_palindromic_substring(str):\n    '''\n    Write a function to find the longest palindromic substring in the given string.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i]==str[j]:\n                t[i][j] = t[i+1][j-1]+2\n            else:\n                t[i][j] = max(t[i+1][j], t[i][j-1])\n    return t[0][n-1]\ndef longest_increasing_subsequence(str):\n    '''\n    Write a function to find the length of longest increasing subsequence in the given string.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [[0 for i in range(n)] for i in range(n)]\n    for i in range(n):\n        t[i][i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i]<str[j]:\n                t[i][j] = t[i+1][j]+1\n            else:\n                t[i][j] = max(t[i+1][j], t[i][j-1])\n    return t[0][n-1]\ndef longest_increasing_subsequence_dp(str):\n    '''\n    Write a function to find the length of longest increasing subsequence in the given string.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [0 for i in range(n)]\n    for i in range(n):\n        t[i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i]<str[j]:\n                t[j] = max(t[j], t[i]+1)\n    return t[n-1]\ndef longest_decreasing_subsequence_dp(str):\n    '''\n    Write a function to find the length of longest decreasing subsequence in the given string.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [0 for i in range(n)]\n    for i in range(n):\n        t[i] = 1\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            if str[i]>str[j]:\n                t[j] = max(t[j], t[i]+1)\n    return t[n-1]\ndef longest_increasing_subsequence_dp_optimal(str):\n    '''\n    Write a function to find the length of longest increasing subsequence in the given string.\n    Optimized version of the above function.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [0 for i in range(n)]\n    t[0] = 1\n    for i in range(1, n):\n        t[i] = 1\n        for j in range(i):\n            if str[j]<str[i]:\n                t[i] = max(t[i], t[j]+1)\n    return t[n-1]\ndef longest_decreasing_subsequence_dp_optimal(str):\n    '''\n    Write a function to find the length of longest decreasing subsequence in the given string.\n    Optimized version of the above function.\n    '''\n    n = len(str)\n    if n==0:\n        return 0\n    t = [0 for i in range(n)]\n    t[0] = 1\n    for i in range(1, n):\n        t[i] = 1\n        for j in range(i):\n            if str[i]<str[j]:\n                t[i] = max(t[i], t[j]+1)\n    return t[n-1]\ndef longest_subsequence_dp_optimal(str):\n    '''\n    Write a function to find the length of longest subsequence in the given string"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    lps = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return lps_tab(str)\n    \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for sub_len in range(2,n+1):\n        for i in range(n-sub_len+1):\n            j = i+sub_len-1\n            if str[i] == str[j] and sub_len == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2,n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if str[i] == str[j] and length == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    return dp[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for i in range(n - 1): \n        if str[i] == str[i + 1]: \n            L[i][i + 1] = 2\n        else: \n            L[i][i + 1] = 0\n    for substring_length in range(3, n + 1): \n        for i in range(n - substring_length + 1): \n            j = i + substring_length - 1\n            if str[i] == str[j] and L[i + 1][j - 1]!= 0: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]) \n    return L[0][n - 1] "
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n    \n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)]for y in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]); \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n,0,-1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return(1/(n-1)) + sum([1/num for num in range(2, n)])\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    return 1 / n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # base case: if n == 1, the sum is 1\n    if n == 1:\n        return 1\n    # if n > 1, return n + the sum of the recursive function\n    return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    x = 1\n    y = 0\n    while n > 0:\n        x = x * (n - 1)\n        y += 1\n        n -= 1\n    return x, y\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n - 1)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    i,j=0,0\n    intersection_array=[]\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]==array_nums2[j]:\n            intersection_array.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i]>array_nums2[j]:\n            j+=1\n        else:\n            i+=1\n    return intersection_array\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    s1 = set(array_nums1)\n    s2 = set(array_nums2)\n    return list(s1 & s2)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    len1 = len(array_nums1)\n    len2 = len(array_nums2)\n    if array_nums1[-1]<array_nums2[0]:\n        return []\n    if array_nums1[0]>array_nums2[-1]:\n        return []\n    j=0\n    i=0\n    result = []\n    while j<len1 and i<len2:\n        if array_nums1[j]==array_nums2[i]:\n            result.append(array_nums1[j])\n            j+=1\n            i+=1\n        elif array_nums1[j]<array_nums2[i]:\n            j+=1\n        elif array_nums1[j]>array_nums2[i]:\n            i+=1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    i1 = 0\n    i2 = 0\n    result = []\n    while i1 < len(array_nums1) and i2 < len(array_nums2):\n        if array_nums1[i1] < array_nums2[i2]:\n            i1 += 1\n        elif array_nums1[i1] > array_nums2[i2]:\n            i2 += 1\n        else:\n            result.append(array_nums1[i1])\n            i1 += 1\n            i2 += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    answer_set = set(array_nums1).intersection(set(array_nums2))\n    answer_list = list(answer_set)\n    return answer_list\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    res = []\n    hashmap = dict()\n    for num in array_nums1:\n        if num in hashmap:\n            hashmap[num] = True\n        else:\n            hashmap[num] = False\n    for num in array_nums2:\n        if num in hashmap and hashmap[num] == False:\n            hashmap[num] = True\n            res.append(num)\n    return res\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n    return list(intersection_set)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Approach 1: Using set.intersection()\n    '''\n    for num in set(array_nums1):\n        if num in set(array_nums2):\n            print(num)\n    '''\n    # Approach 2: Using built-in function.\n    '''\n    result = list(set(array_nums1).intersection(array_nums2))\n    return result\n    '''\n    # Approach 3: Using enumerate and list comprehension.\n    '''\n    result = []\n    for i, num in enumerate(array_nums1):\n        if num in array_nums2:\n            result.append(num)\n    return result\n    '''\n    # Approach 4: Using set.\n    '''\n    result = list(set(array_nums1) & set(array_nums2))\n    return result\n    '''\n    # Approach 5: Using built-in function.\n    result = list(set(array_nums1) & set(array_nums2))\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1_dict = {}\n    array_nums2_dict = {}\n    intersection_array = []\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count\n    \n    \n    \ndef remove_x(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple with all occurences of the element removed.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in tup:\n        if i!=x:\n            s=s+(i,)\n    return s\n    \n    \n    \ndef concatenate_tuples(tup1, tup2): \n    '''\n    Write a python function that takes in two tuples and returns a tuple that is the concatenation of the two tuples.\n    '''\n    # WRITE YOUR CODE HERE\n    s=tup1+(tup2,)\n    return s\n    \n    \n    \ndef multiply_tuples(tup, x): \n    '''\n    Write a python function that takes in a tuple and an integer and returns a tuple that is the result of multiplying the tuple by the integer.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in tup:\n        s=s+(i*x,)\n    return s\n    \n    \n    \ndef find_max(tup): \n    '''\n    Write a python function that takes in a tuple and returns the element with the highest value.\n    '''\n    # WRITE YOUR CODE HERE\n    s=tup[0]\n    for i in tup:\n        if s<i:\n            s=i\n    return s\n    \n    \n    \ndef sort_tuple(tup): \n    '''\n    Write a python function that takes in a tuple and returns a sorted tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    tup=sorted(tup)\n    return tup\n    \n    \n    \ndef find_x(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple with the index of the first occurrence of the element in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in range(0,len(tup)):\n        if x==tup[i]:\n            s=s+(i,)\n    return s\n    \n    \n    \ndef find_smallest(tup): \n    '''\n    Write a python function that takes in a tuple and returns the smallest element in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=tup[0]\n    for i in tup:\n        if s>i:\n            s=i\n    return s\n    \n    \n    \ndef count_even(tup): \n    '''\n    Write a python function that takes in a tuple and returns the number of even numbers in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    count=0\n    for i in tup:\n        if i%2==0:\n            count+=1\n    return count\n    \n    \n    \ndef reverse_tuple(tup): \n    '''\n    Write a python function that takes in a tuple and returns a tuple that is the result of reversing the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in range(len(tup)-1, -1, -1):\n        s=s+(tup[i],)\n    return s\n    \n    \n    \ndef remove_negative(tup): \n    '''\n    Write a python function that takes in a tuple and returns a tuple that does not contain any negative numbers.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in tup:\n        if i>=0:\n            s=s+(i,)\n    return s\n    \n    \n    \ndef max_product(tup): \n    '''\n    Write a python function that takes in a tuple and returns the maximum product of any three numbers in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=0\n    for i in tup:\n        for j in tup:\n            if i*j>s:\n                s=i*j\n    return s\n    \n    \n    \ndef sum_tuples(tup1, tup2): \n    '''\n    Write a python function that takes in two tuples and returns a tuple that is the sum of the two tuples.\n    '''\n    # WRITE YOUR CODE HERE\n    s=tup1+(tup2,)\n    return s\n    \n    \n    \ndef sum_tuples_without_repetition(tup1, tup2): \n    '''\n    Write a python function that takes in two tuples and returns a tuple with all the elements that appear in either tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in tup1:\n        if i not in s:\n            s=s+(i,)\n    for i in tup2:\n        if i not in s:\n            s=s+(i,)\n    return s\n    \n    \n    \ndef tuple_to_list(tup): \n    '''\n    Write a python function that takes in a tuple and returns a list that is the result of converting the tuple into a list.\n    '''\n    # WRITE YOUR CODE HERE\n    s=list(tup)\n    return s\n    \n    \n    \ndef list_to_tuple(lst): \n    '''\n    Write a python function that takes in a list and returns a tuple that is the result of converting the list into a tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=tuple(lst)\n    return s\n    \n    \n    \ndef max_tuple_length(tup): \n    '''\n    Write a python function that takes in a tuple and returns the maximum length of tuple in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=0\n    for i in tup:\n        if len(i)>s:\n            s=len(i)\n    return s\n    \n    \n    \ndef add_tuple_elements(tup): \n    '''\n    Write a python function that takes in a tuple and returns a tuple that is the result of adding all the elements in the tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=0\n    for i in tup:\n        s+=i\n    return s\n    \n    \n    \ndef flatten_list(lst): \n    '''\n    Write a python function that takes in a list and returns a tuple that is the result of flattening the list.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in lst:\n        s=s+(i,)\n    return s\n    \n    \n    \ndef create_empty_list(size): \n    '''\n    Write a python function that takes in an integer and returns a list of that many empty strings.\n    '''\n    # WRITE YOUR CODE HERE\n    s=()\n    for i in range(size):\n        s+=' '\n    return s\n    \n    \n    \ndef convert_list_to_tuple(lst): \n    '''\n    Write a python function that takes in a list and returns a tuple that is the result of converting the list into a tuple.\n    '''\n    # WRITE YOUR CODE HERE\n    s=tuple(lst)\n    return s\n    \n    \n    \ndef convert_tuple_to_list(tup): \n    '''\n    Write a python function that takes in a tuple and returns a list that is the result of converting the tuple into a list.\n    '''\n    # WRITE YOUR CODE HERE\n    s=list(tup)\n    return s\n    \n    \n    \ndef convert_list_to_dictionary(lst, x): \n    '''\n    Write a python function that takes in a list and an element and returns a dictionary with the element as a key and the count of the element in the list as the value.\n    '''\n    # WRITE YOUR CODE HERE\n    dic={}\n    for i in lst:\n        if i not in dic:\n            dic[i]=1\n        else:\n            dic[i]+=1\n    if x not in dic:\n        dic[x]=0\n    return dic\n    \n    \n    \nde"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef sum_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and sums the occurences of the element in the tuple.\n    '''\n    return tup.count(x)\n    \ndef find_greater_than(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and finds the number of elements in the tuple that are greater than the given element.\n    '''\n    count = 0\n    for i in tup:\n        if i > x:\n            count = count + 1\n    return count\n    \ndef find_less_than(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and finds the number of elements in the tuple that are less than the given element.\n    '''\n    count = 0\n    for i in tup:\n        if i < x:\n            count = count + 1\n    return count\n    \ndef join_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple containing only the elements in the tuple that are less than the given element.\n    '''\n    lst = []\n    for i in tup:\n        if i < x:\n            lst.append(i)\n    return tuple(lst)\n    \ndef split_x(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and returns a tuple containing only the elements in the tuple that are greater than the given element.\n    '''\n    lst = []\n    for i in tup:\n        if i > x:\n            lst.append(i)\n    return tuple(lst)\n    \ndef first_and_last(tup):\n    '''\n    Write a python function that takes in a tuple and returns a tuple with the first and last elements of the tuple.\n    '''\n    first = tup[0]\n    last = tup[-1]\n    return (first, last)\n    \ndef middle(tup):\n    '''\n    Write a python function that takes in a tuple and returns a tuple with all the elements except the first and last elements of the tuple.\n    '''\n    return tup[1:-1]\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    tup_list = list(tup)\n    count = 0\n    for i in range(len(tup_list)):\n        if tup_list[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    total = 0\n    for i in tup:\n        if i == x:\n            total += 1\n    return total\n    \n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for elem in tup:\n        if elem==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    index = 0\n    length = len(list)\n    for i in range(length):\n        if list[i] == element:\n            list.insert(i, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    \n    # Time: O(n)\n    # Space: O(n)\n    \n    newList = []\n    for i in range(0,len(list)):\n        if list[i] == element:\n            newList.append(element)\n        newList.append(list[i])\n    return newList\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(list[i])\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(0,len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for item in list:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if element in list:\n        list.insert(list.index(element)+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your function definition goes here\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0, element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = numbers.real\n    i = numbers.imag\n    p = cmath.polar(complex(r,i))\n    return str(p[0]) + \"|\" + str(p[1])\n    \n    \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    z = complex(numbers)\n    polar = cmath.polar(z)\n    print(z)\n    print(polar)\n    print(polar[0])\n    print(polar[1])\n    return polar\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1 = []\n    for i in numbers:\n        a = i.real\n        b = i.imag\n        d = cmath.polar(complex(a,b))\n        list1.append(d)\n    return list1\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    \n    '''\n    convert(numbers)\n    This function converts a complex number to a polar complex number.\n    The function expects a list of complex numbers.\n    The function should return the list of polar complex numbers.\n    '''\n    # You can use the cmath module.\n    # The cmath module provides access to mathematical functions for complex numbers.\n    # Define the function here.\n    # The function should accept a list of complex numbers and return the list of complex numbers in polar coordinates.\n    \n    return cmath.polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_list = []\n    for num in numbers:\n        mag = cmath.polar(num)[0]\n        phase = cmath.polar(num)[1]\n        polar_list.append([mag, phase])\n    return(polar_list)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers_list = list(numbers)\n    real = numbers_list[0]\n    imag = numbers_list[1]\n    mod = (real**2 + imag**2)**0.5\n    ang = cmath.phase(complex(real,imag))\n    return mod,ang\n    \ndef main():\n    '''\n    Write a python program to check if the given number is a perfect square or not.\n    '''\n    number = int(input('Enter the number: '))\n    if number >= 0:\n        print(f'The number {number} is positive.')\n    else:\n        print(f'The number {number} is negative.')\n    square = (number ** 0.5)\n    if (square - int(square)) == 0:\n        print(f'The number {number} is a perfect square.')\n    else:\n        print(f'The number {number} is not a perfect square.')\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        polar_numbers.append(cmath.polar(number))\n    return polar_numbers\ndef test_convert():\n    '''\n    Test Function\n    '''\n    polar_numbers = convert([1 + 2j, 2.5 + 2j])\n    assert polar_numbers == [(3.141592653589793, 3.141592653589793), (3.141592653589793, 2.6123724356957945)]\n    return\ndef convert_complex(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_numbers = []\n    for number in numbers:\n        r = number.real\n        i = number.imag\n        a = cmath.polar(number)\n        polar_numbers.append((r, i, a))\n    return polar_numbers\ndef test_convert_complex():\n    '''\n    Test Function\n    '''\n    polar_numbers = convert_complex([1 + 2j, 2.5 + 2j])\n    assert polar_numbers == [(3.141592653589793, 3.141592653589793, (3.141592653589793, 2.6123724356957945))]\n    return\ndef average(numbers):\n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    total = sum(numbers)\n    average = total / len(numbers)\n    return average\ndef test_average():\n    '''\n    Test Function\n    '''\n    average = average([1, 2, 3, 4, 5])\n    assert average == 3\n    return\ndef average_complex(numbers):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    total = 0\n    for number in numbers:\n        total += number\n    average = total / len(numbers)\n    return average\ndef test_average_complex():\n    '''\n    Test Function\n    '''\n    average = average_complex([1 + 2j, 2.5 + 2j])\n    assert average == (1 + 2j)\n    return\ndef average_complex_recursive(numbers):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    average = 0\n    for number in numbers:\n        average += number\n    average /= len(numbers)\n    return average\ndef test_average_complex_recursive():\n    '''\n    Test Function\n    '''\n    average = average_complex_recursive([1 + 2j, 2.5 + 2j])\n    assert average == (1 + 2j)\n    return\ndef average_complex_recursive_no_add(numbers):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    average = None\n    for number in numbers:\n        average = number if average is None else average + number\n    average /= len(numbers)\n    return average\ndef test_average_complex_recursive_no_add():\n    '''\n    Test Function\n    '''\n    average = average_complex_recursive_no_add([1 + 2j, 2.5 + 2j])\n    assert average == (1 + 2j)\n    return\ndef find_average_complex_recursive(numbers, index):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    average = None\n    if index < len(numbers):\n        average = numbers[index]\n    else:\n        average = 0\n    average = average if average is not None else average + numbers[index]\n    average /= 2\n    return average\ndef test_find_average_complex_recursive():\n    '''\n    Test Function\n    '''\n    average = find_average_complex_recursive([1 + 2j, 2.5 + 2j], 0)\n    assert average == (1 + 2j)\n    average = find_average_complex_recursive([1 + 2j, 2.5 + 2j], 1)\n    assert average == (2.5 + 2j)\n    return\ndef find_average_complex_recursive_no_add(numbers, index):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    average = None\n    if index < len(numbers):\n        average = numbers[index]\n    else:\n        average = 0\n    average = average if average is not None else numbers[index]\n    average /= 2\n    return average\ndef test_find_average_complex_recursive_no_add():\n    '''\n    Test Function\n    '''\n    average = find_average_complex_recursive_no_add([1 + 2j, 2.5 + 2j], 0)\n    assert average == (1 + 2j)\n    average = find_average_complex_recursive_no_add([1 + 2j, 2.5 + 2j], 1)\n    assert average == (2.5 + 2j)\n    return\ndef find_average_complex_recursive_previous(numbers, index):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    average = None\n    if index < len(numbers):\n        average = numbers[index]\n    else:\n        average = 0\n    average = average if average is not None else average + numbers[index - 1]\n    average /= 2\n    return average\ndef test_find_average_complex_recursive_previous():\n    '''\n    Test Function\n    '''\n    average = find_average_complex_recursive_previous([1 + 2j, 2.5 + 2j], 0)\n    assert average == (1 + 2j)\n    average = find_average_complex_recursive_previous([1 + 2j, 2.5 + 2j], 1)\n    assert average == (2.5 + 2j)\n    return\ndef find_average_complex_recursive_previous_no_add(numbers, index):\n    '''\n    Write a python function to find the average of a list of complex numbers.\n    '''\n    average = None\n    if index < len(numbers):\n        average = numbers[index]\n    else:\n        average = 0\n    average = average if average is not None else numbers[index - 1]\n    average /= 2\n    return average\ndef test_find_average_complex_recursive_previous_no_add():\n    '''\n    Test Function\n    '''\n    average = find_average_complex_recursive_previous_no_add([1 + 2j, 2.5 + 2j], 0)\n    assert average == (1 + 2j)\n    average = find_average_complex_recursive_previous_no_add([1 + 2j, 2.5 + 2j], 1)\n    assert average == (2.5 + 2j)\n    return\ndef is_power(a, b):\n    '''\n    Write a python function to determine if a number is a power of another.\n    '''\n    if a == 1:\n        return True\n    elif a % b == 0:\n        return is_power(a / b, b)\n    else:\n        return False\ndef test_is_power():\n    '''\n    Test Function\n    '''\n    assert is_power(0, 2) == False\n    assert is_power(1, 2) == False\n    assert is_power(2, 2) == True\n    assert is_power(2, 4) == True\n    assert is_power(27, 3) == True\n    assert is_power(1, 1) == True\n    assert is_power(3, 3) == True\n    assert is_power(100, 10) == True\n    return\ndef is_power_recursive(a, b):\n    '''\n    Write a python function to determine if a number is a power of another.\n    '''\n    if a == 1:\n        return True\n    elif a % b == 0:\n        return is_power_recursive(a / b, b)\n    else:\n        return False\ndef test_is_power_recursive():\n    '''\n    Test Function\n    '''\n    assert is_powe"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def convert_polar(complex_number):\n        return cmath.polar(complex_number)\n    if type(numbers) is list:\n        return list(map(convert_polar, numbers))\n    else:\n        return convert_polar(numbers)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    res = []\n    for i in range(len(numbers)):\n        res.append(cmath.polar(numbers[i]))\n    return res\n    \ndef magnitude(numbers):\n    '''\n    Write a python function to compute magnitude of the complex number\n    '''\n    res = []\n    for i in range(len(numbers)):\n        res.append(round(numbers[i][0],2))\n    return res\n    \ndef phase(numbers):\n    '''\n    Write a python function to compute phase of the complex number\n    '''\n    res = []\n    for i in range(len(numbers)):\n        res.append(round(numbers[i][1],2))\n    return res\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar(a):\n        r = float(cmath.polar(a)[0])\n        theta = float(cmath.polar(a)[1])\n        return r, theta\n        \n        \n    return [polar(complex(numbers[i][0], numbers[i][1])) for i in range(len(numbers))]\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if isinstance(i,int):\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n    \nprint(count_integer(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for element in list1:\n        if type(element) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for i in list1:\n        if type(i) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    number_of_integer = 0\n    for element in list1:\n        if isinstance(element, int):\n            number_of_integer += 1\n    return number_of_integer\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i)==int:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if type(x) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    c=0\n    for i in list1:\n        if(isinstance(i,int)):\n            c+=1\n    return c\n    \nprint(count_integer([1,2,3,4,5]))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    cnt = 0\n    for i in list1:\n        if isinstance(i,int):\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    list_colors = []\n    list_combinations = []\n    for i in range(len(l)):\n        for j in range(len(l)):\n            for x in range(len(l)):\n                list_colors.append(l[i]+l[j]+l[x])\n    list_combinations = list(combinations_with_replacement(list_colors, n))\n    return list_combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return \"n exceeds the length of the list\"\n    combos = combinations_with_replacement(l, n)\n    print(list(combos))\n    return [list(combo) for combo in combos]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # l = [1, 2, 3, 4, 5, 6]\n    # n = 3\n    # ['(1, 1, 1)', '(1, 1, 2)', '(1, 1, 3)', '(1, 2, 2)', '(1, 2, 3)', '(1, 3, 3)', '(2, 2, 2)', '(2, 2, 3)', '(2, 3, 3)', '(3, 3, 3)']\n    return [f'({i[0]}, {i[1]}, {i[2]})' for i in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    from itertools import combinations \n    l = list(l)\n    return [tuple(combination) for combination in combinations(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l,n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    res = list(combinations_with_replacement(l, n))\n    res = [ tuple(i) for i in res ]\n    print(res)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = [i for i in l]\n    combos = combinations_with_replacement(l,n)\n    combos = [tuple(i) for i in combos]\n    return combos\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # add all combinations of length n to a list\n    l = list(combinations_with_replacement(l,n))\n    # remove combinations that have duplicates\n    unique = []\n    for item in l:\n        if item not in unique:\n            unique.append(item)\n    return unique\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 0:\n        return 0\n    elif n == 1:\n        return 0\n    else:\n        cnt = 0\n        for num in range(1, n + 1):\n            if (num > 1):\n                for i in range(2, num):\n                    if (num % i) == 0:\n                        break\n                else:\n                    cnt += 1\n        return cnt\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_primes = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            num_primes += 1\n    return num_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 1\n        count = 2\n        num_range = range(2,n)\n        for num in num_range:\n            if is_prime(num):\n                count += 1\n        return count\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer and returns a boolean value True if the input integer is prime, and False if the input integer is not prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for num in range(3, n):\n                if n % num == 0:\n                    return False\n    return True\n    \ndef count_Primes_loops(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        count = 1\n        num_range = range(2,n)\n        for num in num_range:\n            if is_prime(num):\n                count += 1\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in a positive integer and returns a boolean value True if the input integer is prime, and False if the input integer is not prime.\n    '''\n    if n < 2:\n        return False\n    elif n == 2:\n        return True\n    else:\n        if n % 2 == 0:\n            return False\n        else:\n            for num in range(3, n, 2):\n                if n % num == 0:\n                    return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    isPrime = [True for i in range(n+1)]\n    isPrime[0] = isPrime[1] = False\n    for i in range(2,n+1):\n        if isPrime[i]:\n            for j in range(i*i,n+1,i):\n                isPrime[j] = False\n    return isPrime.count(True)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n<2:\n        return 0\n    else:\n        prime_nums=2\n        for i in range(2, n):\n            prime_flag=True\n            for j in range(2, i):\n                if i%j==0:\n                    prime_flag=False\n            if prime_flag==True:\n                prime_nums+=1\n    return prime_nums\ndef is_palindrome(num):\n    '''\n    Write a python function that takes in a number and returns True if the number is a palindrome and False if the number is not a palindrome.\n    '''\n    if num<0:\n        return False\n    else:\n        temp=num\n        rev_num=0\n        while num>0:\n            rem=num%10\n            rev_num=(rev_num*10)+rem\n            num=num//10\n        if temp==rev_num:\n            return True\n        else:\n            return False\ndef count_digits(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the number of digits the non-negative integer has.\n    '''\n    count=0\n    while n>0:\n        count+=1\n        n=n//10\n    return count\ndef is_Power(n):\n    '''\n    Write a python function that takes in two non-negative integers and returns True if the smaller number is a power of the larger number and False if the smaller number is not a power of the larger number.\n    '''\n    if n==0:\n        return False\n    else:\n        num=2\n        while num*num<=n:\n            if n%num==0:\n                return True\n            num+=1\n        return False\ndef count_occurences(num, target):\n    '''\n    Write a python function that takes in two non-negative integers and returns the number of times the smaller number occurs in the larger number.\n    '''\n    count=0\n    while num>0:\n        if num%10==target:\n            count+=1\n        num=num//10\n    return count\ndef add_or_subtract(x, y):\n    '''\n    Write a python function that takes in two non-negative integers and returns True if the smaller number is the additive inverse of the larger number and False if the smaller number is not the additive inverse of the larger number.\n    '''\n    while x>0:\n        if x%10+y==10:\n            return True\n        x=x//10\n    return False\ndef count_upper_case(s):\n    '''\n    Write a python function that takes in a string and returns the number of upper-case characters in the string.\n    '''\n    count=0\n    for i in s:\n        if i.isupper():\n            count+=1\n    return count\ndef count_lower_case(s):\n    '''\n    Write a python function that takes in a string and returns the number of lower-case characters in the string.\n    '''\n    count=0\n    for i in s:\n        if i.islower():\n            count+=1\n    return count\ndef count_even_numbers(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the number of even digits the non-negative integer has.\n    '''\n    count=0\n    while n>0:\n        if n%2==0:\n            count+=1\n        n=n//10\n    return count\ndef factorial(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the factorial of that number.\n    '''\n    result=1\n    for i in range(1, n+1):\n        result*=i\n    return result\ndef sum_of_digits(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the digits of the integer.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef sum_of_squares(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the squares of the digits of the integer.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10**2\n        n=n//10\n    return sum\ndef multiply_even_numbers(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the product of the even digits of the integer.\n    '''\n    result=1\n    for i in range(1, n+1):\n        if i%2==0:\n            result*=i\n    return result\ndef sum_all_digits(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the digits of the integer.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    return sum\ndef sum_all_odd_digits(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the odd digits of the integer.\n    '''\n    sum=0\n    while n>0:\n        if n%2==1:\n            sum+=n%10\n        n=n//10\n    return sum\ndef max_and_min_numbers(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the maximum and minimum digits of the integer.\n    '''\n    max=0\n    min=0\n    while n>0:\n        if n%10>max:\n            max=n%10\n        if n%10<min:\n            min=n%10\n        n=n//10\n    return max, min\ndef sum_all_digits_recursive(n, result):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the digits of the integer.\n    '''\n    if n==0:\n        return result\n    else:\n        return sum_all_digits_recursive(n//10, result+n%10)\ndef sum_all_even_digits_recursive(n, result):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the even digits of the integer.\n    '''\n    if n==0:\n        return result\n    else:\n        if n%2==0:\n            return sum_all_even_digits_recursive(n//10, result+n%10)\n        else:\n            return sum_all_even_digits_recursive(n//10, result)\ndef sum_all_odd_digits_recursive(n, result):\n    '''\n    Write a python function that takes in a non-negative integer and returns the sum of the odd digits of the integer.\n    '''\n    if n==0:\n        return result\n    else:\n        if n%2==1:\n            return sum_all_odd_digits_recursive(n//10, result+n%10)\n        else:\n            return sum_all_odd_digits_recursive(n//10, result)\ndef factorial_recursive(n, result):\n    '''\n    Write a python function that takes in a non-negative integer and returns the factorial of that number.\n    '''\n    if n==1:\n        return result\n    else:\n        return factorial_recursive(n-1, result*n)\ndef number_of_divisors_recursive(n):\n    '''\n    Write a python function that takes in a non-negative integer and returns the number of divisors the integer has.\n    '''\n    if n==0:\n        return 1\n    else:\n        return 1+number_of_divisors_recursive(n//10)\ndef is_palindrome_recursive(num, result):\n    '''\n    Write a python function that takes in a non-negative integer and returns True if the number is a palindrome and False if the number is not a palindrome.\n    '''\n    if num==0:\n        return result\n    else:\n        return is_palindrome_recursive(num//10, result+num%10==10)\ndef sum_of_digits_recursive"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def isPrime(n):\n        if n<=1:\n            return False\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if check_prime(i):\n            count+=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_prime(n):\n        if n < 2:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2, n):\n                if n % i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime = [True] * n\n    i = 2\n    while i < int(n**0.5)+1:\n        if prime[i]:\n            j = i*i\n            while j < n:\n                prime[j] = False\n                j += i\n        i += 1\n    return prime.count(True)-2\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return None\n    a, b = b, a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if type(a) == int and type(b) == int:\n        return (b,a)\n    else:\n        return \"Error: Inputs not integers\"\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    a = b\n    b = c\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    (a,b) = (b,a)\n    return a, b\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    maximum_tuple = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            maximum_tuple.append(test_tup1[i])\n        else:\n            maximum_tuple.append(test_tup2[i])\n    return tuple(maximum_tuple)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        raise Exception('Both parameters should be tuples.')\n    else:\n        max_elem = max(test_tup1)\n        index_max_elem = test_tup1.index(max_elem)\n        max_elem2 = max(test_tup2)\n        index_max_elem2 = test_tup2.index(max_elem2)\n        if index_max_elem == index_max_elem2:\n            return test_tup1[index_max_elem] + test_tup2[index_max_elem2]\n        elif index_max_elem > index_max_elem2:\n            return test_tup1[index_max_elem]\n        else:\n            return test_tup2[index_max_elem2]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def max_in_tuple(tup1, tup2):\n        return max(tup1) if tup1 > tup2 else max(tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return tuple(max(tup1, tup2) for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if isinstance(test_tup1, tuple) and isinstance(test_tup2, tuple):\n        if len(test_tup1) == len(test_tup2):\n            #maximum_tuple = max(test_tup1, test_tup2)\n            # return maximum_tuple\n            l = []\n            for i in range(0, len(test_tup1)):\n                max_tup = max(test_tup1[i], test_tup2[i])\n                l.append(max_tup)\n            return tuple(l)\n    return \"Input is not a tuple\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    def maximize_two_tuples(test_tup1, test_tup2):\n        if test_tup1[0] < test_tup2[0]:\n            return test_tup2\n        elif test_tup1[0] == test_tup2[0]:\n            if test_tup1[1] < test_tup2[1]:\n                return test_tup2\n            elif test_tup1[1] == test_tup2[1]:\n                return test_tup1\n        else:\n            return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    final_tup = ()\n    list_tup1 = list(test_tup1)\n    list_tup2 = list(test_tup2)\n    tup_tup = ()\n    if len(list_tup1) == len(list_tup2):\n        for i in range(len(list_tup1)):\n            if list_tup1[i] >= list_tup2[i]:\n                list_tup2[i] = list_tup1[i]\n            else:\n                list_tup1[i] = list_tup2[i]\n        tup_tup = tuple(list_tup1)\n    else:\n        for i in range(len(list_tup1)):\n            if i < len(list_tup2):\n                if list_tup1[i] >= list_tup2[i]:\n                    tup_tup += (list_tup1[i],)\n                else:\n                    tup_tup += (list_tup2[i],)\n            else:\n                tup_tup += (list_tup2[i],)\n    return tup_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_max = max(test_tup1)\n    tup2_max = max(test_tup2)\n    max_tup = (tup1_max, tup2_max)\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #test_tup1 = (1, 2, 3, 4, 5, 6)\n    #test_tup2 = (2, 3, 4, 5, 6, 7)\n    \n    #print(test_tup1, test_tup2)\n    \n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n    \n    return (max_tup1, max_tup2)\n    \nmaximize_elements((1, 2, 3, 4, 5, 6), (2, 3, 4, 5, 6, 7))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    if len(l1) == len(l2):\n        tup_max = []\n        for i in range(0, len(l1)):\n            tup_max.append(max(l1[i], l2[i]))\n        return tuple(tup_max)\n    else:\n        print(\"Unable to maximize the tuples\")\n        return\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = random.randint(1, n-1)\n    x = nth_root_modulo(a, n)\n    return x\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def next_prime(n):\n        '''\n        Find the next prime number using Sieve of Eratosthenes\n        '''\n        if n > 1:\n            sieve = [True] * n\n            for i in range(2, int(n**0.5 + 1)):\n                if sieve[i]:\n                    sieve[i*i :: i] = [False] * len(sieve[i*i :: i])\n            return [i for i in range(n) if sieve[i]][n-1]\n        return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n==1:\n        return 2\n    if n==2:\n        return 3\n    elif n==3:\n        return 5\n    else:\n        pass\n    p = 1\n    q = 2\n    while q < n:\n        p = p+1\n        q = newman_shanks_williams_prime(p)\n        \n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def is_prime(n): \n        '''\n        Return True if n is prime and False if n is not prime.\n        '''\n        if n == 2: \n            return True\n        elif (n <= 1) or (n % 2 == 0): \n            return False\n        else: \n            for i in range(3, int(n ** 0.5) + 1, 2): \n                if n % i == 0: \n                    return False\n            return True\n    \n    def sum_prime(n): \n        '''\n        Find the sum of the nth prime numbers.\n        '''\n        if is_prime(n): \n            return n\n        else: \n            return n + sum_prime(n + 1)\n    \n    def nth_prime(n): \n        '''\n        Find the nth newman\u2013shanks\u2013williams prime number.\n        '''\n        if n == 1: \n            return 2\n        elif n == 2: \n            return 3\n        else: \n            return ((sum_prime(n) + 1) // 2)\n    \n    return nth_prime(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    a = 2\n    while n!= 0:\n        a = next_prime(a)\n        n -= 1\n    return a\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return 2 * n + 1 + (n**2 - (n + 1)**2) // (2 * n + 1)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # if n == 1:\n    #     return 2\n    # elif n == 2:\n    #     return 3\n    # elif n == 3:\n    #     return 5\n    # else:\n    #     return newman_prime(n-1) + 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from itertools import permutations as per\n    primes = [1]*n\n    primes[0] = 0\n    for i in range(3, n+1, 2):\n        if primes[i//2]:\n            primes[(i*i)//2::i] = [0]*((n-i*i-1)//(2*i)+1)\n    return [2] + [i for i in range(3, n+1, 2) if primes[i//2]]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = sympy.randprime(n+1, n+2)\n    while not sympy.isprime(p):\n        p = sympy.randprime(n+1, n+2)\n    return p\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Two tuples should have the same length')\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += ((test_tup1[i] / test_tup2[i]), )\n    return new_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([tup1[i]/tup2[i] for i in range(len(tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1], test_tup1[2] / test_tup2[2])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuples have different length')\n    else:\n        return tuple(a/b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) < len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += ((test_tup1[i] / test_tup2[i]),)\n        for i in range(len(test_tup2) - len(test_tup1)):\n            result_tup += (0,)\n    else:\n        for i in range(len(test_tup2)):\n            result_tup += ((test_tup1[i] / test_tup2[i]),)\n        for i in range(len(test_tup1) - len(test_tup2)):\n            result_tup += (0,)\n    return result_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x:x[0]/x[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print(\"\\n\"+str(test_tup1) +\"\\n/\"+str(test_tup2)+\"\\n\")\n    if len(test_tup1) == len(test_tup2):\n        # print(\"Passed Length Test!\")\n        for i in range(len(test_tup1)):\n            print(str(test_tup1[i])+\"/\"+str(test_tup2[i]))\n    else:\n        print(\"Length Mismatch!\")\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    list1_split = [list1[i:i+L] for i in range(0,len(list1),L)]\n    return list1_split[0], list1_split[1]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return ([list1[0:L], list1[L:]])\n    "
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = []\n    second_part = []\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return_list1 = []\n    return_list2 = []\n    i = 0\n    while i < L:\n        return_list1.append(list1[i])\n        i += 1\n    while i < len(list1):\n        return_list2.append(list1[i])\n        i += 1\n    return (return_list1, return_list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # L = int(input('Please enter the length of the first part of the list you wish to split: '))\n    list_1 = []\n    list_2 = []\n    for item in list1:\n        if len(list_1) < L:\n            list_1.append(item)\n        else:\n            list_2.append(item)\n    return list_1, list_2\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return(list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1.sort()\n    list2 = []\n    list3 = []\n    count = 0\n    while count < L:\n        list2.append(list1[count])\n        count += 1\n    while count < len(list1):\n        list3.append(list1[count])\n        count += 1\n    return (list2, list3)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    size = len(list1)\n    split1 = list1[:L]\n    split2 = list1[L:]\n    return (split1, split2)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) == float and h_age > 0:\n        return h_age * 15\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 10.5\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = 0\n    age_in_dog_years += h_age * 5.25\n    return age_in_dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 1:\n        return 15\n    else:\n        return (15 + (10 * h_age))\nprint(dog_age(8))\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        raise ValueError('Age cannot be negative')\n    else:\n        if h_age < 2:\n            return h_age * 10.5\n        else:\n            return 20 + (h_age - 2) * 4\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == 1:\n        dog_years = 15\n    elif h_age == 2:\n        dog_years = 24\n    elif h_age >= 3:\n        dog_years = h_age * 4 + 6\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Age in dog's years = 10.5 x human's age in years\n    return 10.5 * h_age\n    \ndef main():\n    human_age = int(input('Enter a dog\\'s age in human\\'s years: '))\n    print('That\\'s ', dog_age(human_age), 'in dog\\'s years!')\n    "
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) is not int:\n        raise TypeError('Please enter an integer')\n    if h_age <= 0:\n        raise ValueError('Please enter a positive number')\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = ((h_age * 7.0) / 4.0)\n    print(dog_age)\n    return dog_age\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_result = []\n    for i in range(0, len(S), step):\n        list_result.append(S[i:i+step])\n    return list_result\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[x:x + step] for x in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # There is probably a way to do this using a while loop with a slice variable\n    return [S[n::step] for n in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # The following is one option, using while loop.\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # we can use the split function for this\n    l = S.split(',')\n    l = [elem.strip() for elem in l]\n    return l[::step]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    side_length = l\n    surf_area = side_length ** 2 * 6\n    print(f\"The lateral surface area of the cube is {surf_area}.\")\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a=l**2\n    return a\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int and type(l)!= float:\n        raise TypeError(\"Side length must be a number\")\n    if l < 0:\n        raise ValueError(\"Side length must be positive\")\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # If n is even, the sum of squares of first n odd natural numbers is always zero. \n    if n % 2 == 0:  \n        return 0 \n    # If n is odd, sum of the squares of first n odd natural numbers is 2*(n/2)^2+n/2. \n    else:  \n        return 2*((n//2)**2)+n//2\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1,2):\n        sum+=i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Get the sum of the squares of the first n odd natural numbers.\n    return sum(i ** 2 for i in range(1, n, 2))\n    \ndef cumsum(a):\n    '''\n    Write a python function that takes in a list a and returns the cumulative sum of the elements in list a.\n    '''\n    # Get the cumulative sum of the elements in list a.\n    return [sum(a[:i]) for i in range(len(a) + 1)]\n    \ndef cumsum_list(a):\n    '''\n    Write a python function that takes in a list and returns a list with the cumulative sum of each element in the list.\n    '''\n    # Get the cumulative sum of each element in the list.\n    return list(cumsum(a))\n    \ndef is_consecutive(a):\n    '''\n    Write a python function that takes in a list and returns True if the elements in the list are consecutive and False otherwise.\n    '''\n    # Check if the elements in the list are consecutive.\n    if len(set(a)) < len(a):\n        return False\n    for i in range(len(a) - 1):\n        if a[i] + 1!= a[i + 1]:\n            return False\n    return True\n    \ndef is_consecutive_alternative(a):\n    '''\n    Write a python function that takes in a list and returns True if the elements in the list are consecutive and False otherwise.\n    '''\n    # Check if the elements in the list are consecutive.\n    a = sorted(a)\n    if len(a) < 2:\n        return True\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1]!= 1:\n            return False\n    return True\n    \ndef is_consecutive_alternative_2(a):\n    '''\n    Write a python function that takes in a list and returns True if the elements in the list are consecutive and False otherwise.\n    '''\n    # Check if the elements in the list are consecutive.\n    a = sorted(a)\n    if len(a) < 2:\n        return True\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1]!= 1:\n            return False\n    return True\n    \ndef main():\n    '''\n    Write a main function that tests the functions square_Sum, is_consecutive, and cumsum_list.\n    '''\n    # Test square_sum.\n    assert square_Sum(4) == 30\n    assert square_Sum(8) == 476\n    assert square_Sum(7) == 75\n    assert square_Sum(10) == 385\n    \n    # Test is_consecutive.\n    assert is_consecutive([1,2,3,4,5,6,7,8,9])\n    assert is_consecutive([1,2,3,4,5,6])\n    assert is_consecutive([1,2,3,4])\n    assert not is_consecutive([1,2,3,5,6,7,8,9])\n    assert not is_consecutive([1,2,3,4,5,6,7,8,10])\n    assert not is_consecutive([1,2,3,4,5,6,7,8,9])\n    assert not is_consecutive([1,2,3,4,5,6])\n    assert not is_consecutive([1,2,3,4])\n    \n    # Test cumsum_list.\n    assert cumsum_list([1,2,3,4,5]) == [1,3,6,10,15]\n    assert cumsum_list([1,1,1,1,1]) == [1,2,3,4,5]\n    assert cumsum_list([1,2,3,4,5]) == [1,3,6,10,15]\n    \ndef get_square_sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Get the sum of the squares of the first n odd natural numbers.\n    return sum(i ** 2 for i in range(1, n, 2))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n) == int and n >= 1:\n        return sum([(i**2) for i in range(1,n+1,2)])\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += (i ** 2)\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([i**2 for i in range(n) if i%2!=0])\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # your code here\n    return sum(pow(i, 2) for i in range(1, n, 2))\n    \n    \ndef square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # your code here\n    return sum(pow(i, 2) for i in range(1, n, 2))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    #base case\n    if n == 0:\n        return 0\n    #recursive case\n    return n**2 + square_Sum(n-1)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for x in range(1,n+1):\n        sum+=x*x\n    return sum\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def star_num(n):\n        if n == 1:\n            return 1\n        else:\n            return n * star_num(n - 1)\n    return star_num(n)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    length = len(str(n))\n    for i in range(length,length+1):\n        print(length, i)\n    return\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # The 0th star number is 1\n    if n == 0:\n        return 1\n    # The 1st star number is the number of stars \n    # that the 0th star number has\n    if n == 1:\n        return 2\n    # The 2nd star number is the number of stars\n    # that the 1st star number has\n    if n == 2:\n        return 5\n    # The 3rd star number is the number of stars\n    # that the 2nd star number has\n    if n == 3:\n        return 11\n    # The 4th star number is the number of stars\n    # that the 3rd star number has\n    if n == 4:\n        return 19\n    # The 5th star number is the number of stars\n    # that the 4th star number has\n    if n == 5:\n        return 37\n    # The 6th star number is the number of stars\n    # that the 5th star number has\n    if n == 6:\n        return 61\n    # The 7th star number is the number of stars\n    # that the 6th star number has\n    if n == 7:\n        return 97\n    # The 8th star number is the number of stars\n    # that the 7th star number has\n    if n == 8:\n        return 169\n    # The 9th star number is the number of stars\n    # that the 8th star number has\n    if n == 9:\n        return 679\n    # The 10th star number is the number of stars\n    # that the 9th star number has\n    if n == 10:\n        return 919\n    # The 11th star number is the number of stars\n    # that the 10th star number has\n    if n == 11:\n        return 1321\n    # The 12th star number is the number of stars\n    # that the 11th star number has\n    if n == 12:\n        return 2309\n    # The 13th star number is the number of stars\n    # that the 12th star number has\n    if n == 13:\n        return 2877\n    # The 14th star number is the number of stars\n    # that the 13th star number has\n    if n == 14:\n        return 3767\n    # The 15th star number is the number of stars\n    # that the 14th star number has\n    if n == 15:\n        return 4779\n    # The 16th star number is the number of stars\n    # that the 15th star number has\n    if n == 16:\n        return 6689\n    # The 17th star number is the number of stars\n    # that the 16th star number has\n    if n == 17:\n        return 9799\n    # The 18th star number is the number of stars\n    # that the 17th star number has\n    if n == 18:\n        return 11976\n    # The 19th star number is the number of stars\n    # that the 18th star number has\n    if n == 19:\n        return 14863\n    # The 20th star number is the number of stars\n    # that the 19th star number has\n    if n == 20:\n        return 17891\n    # The 21st star number is the number of stars\n    # that the 20th star number has\n    if n == 21:\n        return 21197\n    # The 22nd star number is the number of stars\n    # that the 21st star number has\n    if n == 22:\n        return 25015\n    # The 23rd star number is the number of stars\n    # that the 22nd star number has\n    if n == 23:\n        return 29061\n    # The 24th star number is the number of stars\n    # that the 23rd star number has\n    if n == 24:\n        return 32121\n    # The 25th star number is the number of stars\n    # that the 24th star number has\n    if n == 25:\n        return 36623\n    # The 26th star number is the number of stars\n    # that the 25th star number has\n    if n == 26:\n        return 41183\n    # The 27th star number is the number of stars\n    # that the 26th star number has\n    if n == 27:\n        return 49077\n    # The 28th star number is the number of stars\n    # that the 27th star number has\n    if n == 28:\n        return 58473\n    # The 29th star number is the number of stars\n    # that the 28th star number has\n    if n == 29:\n        return 68389\n    # The 30th star number is the number of stars\n    # that the 29th star number has\n    if n == 30:\n        return 79683\n    # The 31st star number is the number of stars\n    # that the 30th star number has\n    if n == 31:\n        return 91283\n    # The 32nd star number is the number of stars\n    # that the 31st star number has\n    if n == 32:\n        return 104421\n    # The 33th star number is the number of stars\n    # that the 32nd star number has\n    if n == 33:\n        return 116887\n    # The 34th star number is the number of stars\n    # that the 33th star number has\n    if n == 34:\n        return 131113\n    # The 35th star number is the number of stars\n    # that the 34th star number has\n    if n == 35:\n        return 152909\n    # The 36th star number is the number of stars\n    # that the 35th star number has\n    if n == 36:\n        return 183531\n    # The 37th star number is the number of stars\n    # that the 36th star number has\n    if n == 37:\n        return 220181\n    # The 38th star number is the number of stars\n    # that the 37th star number has\n    if n == 38:\n        return 257639\n    # The 39th star number is the number of stars\n    # that the 38th star number has\n    if n == 39:\n        return 303973\n    # The 40th star number is the number of stars\n    # that the 39th star number has\n    if n == 40:\n        return 361241\n    # The 41st star number is the number of stars\n    # that the 40th star number has\n    if n == 41:\n        return 418611\n    # The 42nd star number is the number of stars\n    # that the 41st star number has\n    if n == 42:\n        return 523187\n    # The 43rd star number is the number of stars\n    # that the 42nd star number has\n    if n == 43:\n        return 665771\n    # The 44th star number is the number of stars\n    # that the 43rd star number has\n    if n == 44:\n        return 796457\n    # The 45th star number is the number of stars\n    # that the 44th star number has\n    if n == 45:\n        return 914361\n    # The 46th star number is the number of stars\n    # that the 45th star number has\n    if n == 46:\n        return 1130991\n    # The 47th star number is the number of stars\n    # that the 46th star number has\n    if n == 47:\n        return 1344937\n    # The 48th star number is the number of stars\n    # that the 47th star number has\n    if n == 48:\n        return 1577891\n    # The 49th star number is the number of stars\n    # that the 48th star number has\n    if n == 49:\n        return 1969923\n    # The 50th star number is the number of stars\n    # that the 49th star number has\n    if n == 50:\n        return 2228751\n    # The 51st star number is the number of stars\n    # that the 50th star number has\n    if n == 51:\n        return 273643\n    # The 52nd star number is the number of stars\n    # that the 51st star number has\n    if n == 52:\n        return 330851\n    # The 53rd star number is the number of stars\n    # that the 52nd star number has\n    if n == 53:\n        return 391061\n    # The 54th star number is the number of stars\n    # that the 53rd star number has\n    if n == 54:\n        return 457139\n    # The 55th star number is the number of stars\n    # that the 54th star number has\n    if n == 55:\n        return 557213\n    # The 56th star number is the number of stars\n    # that the 55th star number has\n    if n == 56:\n        return 659151\n    # The 57th star number is the numbe"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n=int(n)\n    if n<=0:\n        return \"Enter a positive integer\"\n    elif n==1:\n        return \"1\"\n    else:\n        m = n*(n+1)\n        return m-1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def get_pattern(n):\n        return n*'*'\n    \n    def get_center_line(n):\n        return (n//2)*'*'+n*'*'+(n//2)*'*'\n    \n    def get_stars_at_center(n):\n        return n*'*'+n*'*'\n    \n    def get_pattern(n):\n        return n*'*'\n    \n    def get_stars_at_center(n):\n        return n*'*'\n        \n    def find_center_index(s):\n        return len(s)//2\n    \n    def calculate_stars_at_center(s):\n        return s.count('*')\n    \n    def replace_stars_at_center(s,n):\n        center_index = find_center_index(s)\n        return s[:center_index]+n+s[center_index+1:]\n    \n    def create_patern_n_times(p,n):\n        return p*n\n    \n    def find_pattern_count(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i]=='*':\n                count+=1\n        return count\n    \n    def create_spaces_at_index(s,i):\n        return s[:i] +'' + s[i+1:]\n    \n    def find_star_in_center(s):\n        return s.find('*')\n    \n    def get_stars_before_and_after_star_at_center(s):\n        star_at_center = find_star_in_center(s)\n        star_before_center = star_at_center - 1\n        return star_before_center,star_at_center,star_at_center+1\n    \n    def calculate_stars_at_one_side(s):\n        stars_before_center,star_at_center,star_after_center = get_stars_before_and_after_star_at_center(s)\n        return (stars_before_center + star_after_center + 1)\n    \n    def create_pattern_n_times(p,n):\n        return p*n\n    \n    def find_stars_at_one_side(s):\n        return s.count('*')\n    \n    def create_spaces_before_and_after_star_at_center(s):\n        star_before_center,star_at_center,star_after_center = get_stars_before_and_after_star_at_center(s)\n        return star_before_center,star_at_center,star_after_center\n    \n    def replace_star_with_spaces(s):\n        star_before_center,star_at_center,star_after_center = get_stars_before_and_after_star_at_center(s)\n        s = create_spaces_before_and_after_star_at_center(s)\n        s = replace_stars_at_center(s,star_at_center)\n        return s\n    \n    def add_star_to_center(s):\n        star_before_center,star_at_center,star_after_center = get_stars_before_and_after_star_at_center(s)\n        star_at_center = find_center_index(s)\n        s = replace_stars_at_center(s,star_at_center)\n        s = create_spaces_before_and_after_star_at_center(s)\n        s = replace_stars_at_center(s,star_at_center)\n        return s\n    \n    def number_of_stars_on_one_side(s):\n        return find_stars_at_one_side(s) + find_stars_at_one_side(replace_star_with_spaces(s)) + 1\n    \n    def number_of_stars_on_both_sides(s):\n        s = add_star_to_center(s)\n        return find_stars_at_one_side(s) + find_stars_at_one_side(replace_star_with_spaces(s)) + 1\n    \n    def get_nth_star_number(s,n):\n        s = create_pattern_n_times(s,n)\n        s = replace_star_with_spaces(s)\n        return number_of_stars_on_both_sides(s)\n    return get_nth_star_number(get_pattern(n),n)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    list = []\n    x = 1\n    while len(list) < n:\n        list.extend(list + str(x))\n        x += 1\n    return int(list[n - 1])\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # 1 star #\n    star_num = 1\n    i = 1\n    while star_num < n:\n        star_num += 5 * i\n        i += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    print('This is the n-th star number.')\n    n = int(input('Enter the number of star: '))\n    num = 1\n    for i in range(n):\n        num = num * 3\n    return num\n    \nfind_star_num(2)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    while True:\n        count += 1\n        if n < 3:\n            return n\n        if count % 3 == 0:\n            n -= 1\n        n -= 1\n        \nprint(find_star_num(50))"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = n\n    # calculatingn'th star number \n    star_num = n * (4 * n - 1) / 2\n    return star_num\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isalpha():\n        return ord(k)\n    else:\n        return ord(k)-96\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n    \ndef encrypt(plain, key):\n    '''\n    Write a function to encrypt a plain text with a key using the atbash cipher.\n    '''\n    encrypted_text = ''\n    \n    for char in plain:\n        if char.isalpha():\n            \n            if ascii_value(char) + key > ord('z'):\n                encrypted_text += chr(ascii_value(char) + key - 26)\n            else:\n                encrypted_text += chr(ascii_value(char) + key)\n        else:\n            encrypted_text += char\n    \n    return encrypted_text\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= '0' and k <= '9':\n        return ord(k)-ord('0')\n    elif k >= 'a' and k <= 'z':\n        return ord(k)-ord('a') + 10\n    elif k >= 'A' and k <= 'Z':\n        return ord(k)-ord('A') + 36\n    else:\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n    \ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n    \ndef sum_odd_and_even_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1 and i % 2 == 0:\n            odd_sum += arr[i]\n    return odd_sum\n    \ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    odd_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 1 and i % 2 == 1:\n            odd_sum += arr[i]\n    return odd_sum\n    \n    \ndef sum_all_even_and_all_odd_index(arr):\n    '''\n    Write a python function to find the sum of all even numbers and all odd numbers in a list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            even_sum += arr[i]\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            odd_sum += arr[i]\n    return even_sum,odd_sum\n    \ndef sum_all_even_and_all_odd_index_only(arr):\n    '''\n    Write a python function to find the sum of all even numbers and all odd numbers in a list.\n    '''\n    odd_sum = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            even_sum += arr[i]\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            odd_sum += arr[i]\n    return even_sum,odd_sum\n    \n    \ndef max_even_and_odd_index(arr):\n    '''\n    Write a python function to find the maximum even number and the maximum odd number in a list.\n    '''\n    max_even_num = 0\n    max_odd_num = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            max_even_num = arr[i]\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            max_odd_num = arr[i]\n    return max_even_num,max_odd_num\n    \ndef max_even_and_odd_index_only(arr):\n    '''\n    Write a python function to find the maximum even number and the maximum odd number in a list.\n    '''\n    max_even_num = 0\n    max_odd_num = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            max_even_num = arr[i]\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            max_odd_num = arr[i]\n    return max_even_num,max_odd_num\n    \n    \ndef max_even_and_odd_index_only_if_even_odd_both_exist(arr):\n    '''\n    Write a python function to find the maximum even number and the maximum odd number in a list.\n    '''\n    max_even_num = 0\n    max_odd_num = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            max_even_num = arr[i]\n            if max_odd_num > arr[i]:\n                max_even_num = max_odd_num\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            max_odd_num = arr[i]\n            if max_even_num > arr[i]:\n                max_odd_num = max_even_num\n    return max_even_num,max_odd_num\n    \n    \ndef max_even_and_odd_index_only_if_even_odd_both_exist_only(arr):\n    '''\n    Write a python function to find the maximum even number and the maximum odd number in a list.\n    '''\n    max_even_num = 0\n    max_odd_num = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            max_even_num = arr[i]\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            max_odd_num = arr[i]\n    return max_even_num,max_odd_num\n    \n    \ndef sum_max_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of maximum even and maximum odd numbers in a list.\n    '''\n    even_max_num = 0\n    odd_max_num = 0\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            even_max_num = arr[i]\n            if even_max_num > even_sum:\n                even_sum = even_max_num\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            odd_max_num = arr[i]\n            if odd_max_num > odd_sum:\n                odd_sum = odd_max_num\n    return even_sum,odd_sum\n    \ndef sum_max_even_and_odd_index_only(arr):\n    '''\n    Write a python function to find the sum of maximum even and maximum odd numbers in a list.\n    '''\n    even_max_num = 0\n    odd_max_num = 0\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            even_max_num = arr[i]\n            if even_max_num > even_sum:\n                even_sum = even_max_num\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            odd_max_num = arr[i]\n            if odd_max_num > odd_sum:\n                odd_sum = odd_max_num\n    return even_sum,odd_sum\n    \n    \ndef sum_max_even_and_odd_index_only_if_even_odd_both_exist(arr):\n    '''\n    Write a python function to find the sum of maximum even and maximum odd numbers in a list.\n    '''\n    even_max_num = 0\n    odd_max_num = 0\n    even_sum = 0\n    odd_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 1:\n            even_max_num = arr[i]\n            if even_max_num > even_sum:\n                even_sum = even_max_num\n        elif arr[i] % 2 == 1 and i % 2 == 0:\n            odd_max_num = arr[i]\n            if odd_max_num > odd_sum:\n                odd_sum = odd_max_num\n    return even_sum,odd_sum\n    \n    \ndef sum_max_even_and_odd_index_only_if_even_odd_both_exist_only(arr):\n    ''"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_pos = 0\n    sum_even_neg = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even_pos += arr[i]\n        elif arr[i] % 2 == 0 and i % 2!= 0:\n            sum_even_neg += arr[i]\n    return sum_even_pos + sum_even_neg\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if arr == None or len(arr) == 0:\n        return 0\n    even_sum = 0\n    for i in range(0, len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if (i % 2 == 0) and (arr[i] % 2 == 0):\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_and_even_index = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            sum_even_and_even_index = sum_even_and_even_index + arr[i]\n    return sum_even_and_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i % 2 == 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    new_arr = []\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            new_arr.append(arr[i])\n    return sum(new_arr)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_and_even_index = 0\n    for x in range(0, len(arr)):\n        if x % 2 == 0:\n            if arr[x] % 2 == 0:\n                sum_even_and_even_index = sum_even_and_even_index + arr[x]\n    return sum_even_and_even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # code here\n    even = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if(arr[i]%2==0):\n            even = even + arr[i]\n            if(i%2==0):\n                even_index = even_index + arr[i]\n    return even_index\n    \n    \nif __name__ == '__main__':\n    # n = int(input())\n    arr = list(map(int, input().split()))\n    print(sum_even_and_even_index(arr))\n    \n    "
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # code goes here\n    count = 0\n    for i in arr:\n        if i%2==0 and count%2 == 0:\n            count += i\n    return count\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code here\n    \n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even = 0\n    for x in range(n):\n        if (x**5) % 2 == 0:\n            even += x**5\n    return even\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    def power(x):\n        return x**5\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    powersum = 0\n    for i in range(0, n + 1):\n        if i**5 % 2 == 0:\n            powersum += i**5\n    return powersum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = sum([i**5 for i in range(n) if i % 2 == 0])\n    return result\n    \nprint(even_Power_Sum(5)) # prints 12"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    powers = []\n    for i in range(1,n+1):\n        powers.append(i**5)\n    return sum(powers)\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Implement Function\n    rear_elements = []\n    for i in test_list:\n        rear_elements.append(i[1])\n    return rear_elements\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for each in test_list:\n        rear_list.append(each[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Write your function here\n    new_list = []\n    for tup in test_list:\n        new_list.append(tup[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    if test_list == []:\n        return []\n    else:\n        return test_list[1:]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_list = [(1,2,3,4),(4,3,2,1)]\n    return [item[-1] for item in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    test_output = []\n    for tup in test_list:\n        test_output.append(tup[1])\n    return test_output\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result_list = []\n    for tuples in test_list:\n        result_list.append(tuples[-1])\n    return result_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #new_list = []\n    for t in test_list:\n        #new_list.append(t[1])\n        print(t[1])\n    #return new_list\n    \n    #using lambda\n    #return list(map(lambda x: x[1], test_list))\n    \n    #or\n    \n    return [t[1] for t in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    print('test_tup1 =', test_tup1)\n    print('test_tup2 =', test_tup2)\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    print('result_tup =', result_tup)\n    return result_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Write your code here\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple([x - y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for index in range(len(test_tup1)):\n        new_tup += (test_tup1[index] - test_tup2[index], )\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuples are not of equal length!\"\n    return tuple(map(lambda ele1, ele2: ele1 - ele2, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # result = ()\n    # for i in range(0,len(test_tup1)):\n    #     result += (test_tup1[i] - test_tup2[i],)\n    # print(result)\n    return tuple(el1-el2 for el1, el2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    tup3 = ()\n    \n    for i in range(0, len(test_tup1)):\n        tup3 += (test_tup1[i] - test_tup2[i],)\n    \n    return tup3\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuples must have the same length')\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return None\n    else:\n        binomial_coeff_sum = 0\n        for i in range(0, n+1):\n            if i%2 == 0:\n                binomial_coeff_sum += math.comb(n, i)\n        return binomial_coeff_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum([math.factorial(n) // (math.factorial(n - 2*i) * math.factorial(i)) for i in range(0, n//2 + 1)])\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff(n, k):\n        if k == 0 or k == n: \n            return 1\n        elif k > n:\n            return 0\n        else:\n            return math.factorial(n) // (math.factorial(k) * math.factorial(n-k))\n    coeff_sum = 0\n    for i in range(0,n+1):\n        coeff_sum += binomial_coeff(n,i)\n    return coeff_sum\nprint(even_binomial_Coeff_Sum(10))"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(((n/2)*(n+1))/2)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(0, n + 1) if i % 2 == 0)\ndef find_sum_odd_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)) for i in range(1, n + 1) if i % 2!= 0)\ndef find_sum_even_index_binomial_coefficients(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return sum(math.factorial(n) / (math.fac"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==1:\n        return 1\n    else:\n        return n*even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\ndef even_binomial_Coeff_Sum_Recursive( n, sum): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==1:\n        return sum + 1\n    else:\n        return even_binomial_Coeff_Sum_Recursive(n-1, sum + n) + even_binomial_Coeff_Sum_Recursive(n-2, sum + n)\ndef even_binomial_Coeff_Sum_1( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(math.floor(even_binomial_Coeff_Sum_Recursive(n,0)/2))\ndef find_nth_even_binomial_coefficient_sum_1(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = even_binomial_Coeff_Sum_1(n)\n    print(sum)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    #Initialize the variable\n    Coeff_Sum = 0\n    for i in range(0,n+1):\n        if(i%2 ==0):\n            Coeff_Sum += math.factorial(i)/math.factorial(2*i)\n    return Coeff_Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += binomial_coefficient(i, n)\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def get_binomial_coeff(n,k):\n        if k==0 or k==n:\n            return 1\n        elif k==1:\n            return n\n        elif k==2:\n            return n*(n-1)\n        return get_binomial_coeff(n-1,k-1) + get_binomial_coeff(n-1,k)\n    \n    binomial_coeff = get_binomial_coeff(n,n)//math.factorial(n)\n    if binomial_coeff % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    odd_sum=0\n    even_sum=0\n    for i in range(0,n+1):\n        if i%2==0:\n            even_sum+=math.factorial(i)/(math.factorial(2)*(math.factorial(i-2)))\n        else:\n            odd_sum+=math.factorial(i)/(math.factorial(2)*(math.factorial(i-2)))\n    print(\"Odd Coefficients sum: \",odd_sum)\n    print(\"Even Coefficients sum: \",even_sum)\n    \ndef add_it_up(n):\n    '''\n    Write a python function that takes in a positive integer n and prints the sum of all squares from 1 to n.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**2\n    print(\"Sum: \",sum)\n    \ndef reverse_str(s):\n    '''\n    Write a python function that takes in a string s and prints the reversed version of that string.\n    '''\n    print(s[::-1])\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume=3.14*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    V = math.pi*(r**2)*h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi * (r**2) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * (r**2) * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    #volume = pi * r**2 * h\n    volume = 3.14 * r**2 * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    return pi*r**2*h\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return { key:value for key,value in dict.items() if value>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new = {i:dict[i] for i in dict if dict[i] >= n}\n    return new\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:value for key, value in dict.items() if value >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key,val in dict.items() if val>=n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Initialize an empty list\n    filtered_dict = {}\n    # For each entry in the dictionary\n    for key in dict:\n        # If the value is greater than or equal to n\n        if dict[key] >= n:\n            # Add the entry to the filtered dictionary\n            filtered_dict[key] = dict[key]\n    # Return the filtered dictionary\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key,val in dict.items() if val >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,val in dict.items():\n        if val >= n:\n            new_dict[key] = val\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    for k,v in dict.items():\n        if v<n:\n            dict.pop(k)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    \n    return {k:v for k,v in dict.items() if v>=n}\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    new_list = []\n    for i in range(len(test_tup)):\n        new_list.append(test_tup[:i])\n    return len([i for i in new_list if test_tup[0] in i])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        new_list.append(item)\n    first_element = new_list[0]\n    counter = 0\n    for item in test_tup:\n        if item == first_element:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    \n    result_list = []\n    for i in range(len(test_tup)):\n        j = i + 1\n        while j < len(test_tup):\n            if test_tup[j] == test_tup[i]:\n                break\n            j += 1\n        result_list.append(j - i)\n    return result_list\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    total_count = 0\n    for i in range(len(test_tup)):\n        count = 0\n        for j in range(i):\n            if test_tup[i] == test_tup[j]:\n                count += 1\n        total_count += count\n        if count > 1:\n            return total_count\n        else:\n            continue\n    return total_count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count_dict = {}\n    \n    for element in test_tup:\n        if type(element) is list:\n            if element[0] in count_dict:\n                count_dict[element[0]] += 1\n            else:\n                count_dict[element[0]] = 1\n    \n    return count_dict\n        \ntest_tup = (12, (\"a\", \"b\", \"c\"), 12.4, [3,4,5], (\"a\", \"b\", \"c\"))\nprint(count_first_elements(test_tup))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n    else:\n        return 1 + count_first_elements(test_tup[1:])\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    tuple_list = [(\"a\",), (\"a\",\"b\"), (\"a\",\"b\",\"c\"), (\"a\",\"b\",\"c\",\"d\")]\n    print(count_first_elements(tuple_list))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    test_tup = (1, 4, 4, 5, 1, 3, 4, 2, 1, 2, 3)\n    test_tup = sorted(test_tup)\n    print(test_tup)\n    count = 0\n    for i in range(1, len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count+=1\n    print(\"Number of elements before the element is: \", count)\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #test_tup = (5, 1, 3, 2, 3, 4, 1, 5, 5, 5, 6, 7, 1, 3, 1)\n    elements = {}\n    for element in test_tup:\n        if element in elements:\n            elements[element] += 1\n        else:\n            elements[element] = 1\n    print(elements)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    l = []\n    for i in range(len(test_tup)):\n        if test_tup[i] == '(' or test_tup[i] == ')':\n            continue\n        else:\n            l.append(test_tup[i])\n    return len(l)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+9))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n_diag = (n * (n + 1)) // 2\n    return n_diag\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    def is_decagonal(n):\n        return int(n*(10*n - 9*n**2 + 21*n**3 - 15*n**4 + 10*n**5 - n**6))\n    dec = is_decagonal(n)\n    return dec == n\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(round(0.5 * n * (3 * n - 1) + 1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n == int(0.5*n*(8*n + 1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(n+9)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+9)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def get_num(n):\n        return int(n*(10*n-9)/2)\n    return lambda x: get_num(x+1) - get_num(x)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    decimal = n * (10*n - 9)\n    return decimal\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    dec_nums = [i * (10 * i - 9) for i in range(1, 21)]\n    return dec_nums[n - 1]\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return(True, i)\n    return(False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    if dlist is None or len(dlist) < 1:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    for index in range(0, len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    if found:\n        return (True, pos)\n    else:\n        return (False, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # return tuple with boolean and index position\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position += 1\n    return (found, position)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index_pos = -1\n    for index in range(0, len(dlist)):\n        if dlist[index] == item:\n            index_pos = index\n            break\n    return (True, index_pos)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    sorted_list = sorted(test_list)\n    if sorted_list == test_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i)>1:\n            print(\"False\")\n            break\n    else:\n        print(\"True\")\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) > len(set(test_list)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = [1,2,3,4]\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = []\n    for item in test_list:\n        if item in new_list:\n            return False\n        else:\n            new_list.append(item)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(\"The given list is: \",test_list)\n    return len(set(test_list)) == len(test_list)\n    \ndef main():\n    print(all_unique([1,2,3,4,5,5,6,7]))\n    print(all_unique([1,2,3,4,5,6,7,7]))\n    print(all_unique([]))\n    print(all_unique([1]))\n    print(all_unique([0,1,2,3,4,5,6,7,8,9,10]))\nmain()"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    mylist = list(set(test_list))\n    if len(mylist) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if not isinstance(nums1,list):\n        print(\"Not a valid list\")\n    elif not isinstance(nums2,list):\n        print(\"Not a valid list\")\n    elif len(nums1)!=len(nums2):\n        print(\"Not a valid list\")\n    else:\n        new_list = []\n        for i in range(0,len(nums1)):\n            new_list.append(nums1[i]-nums2[i])\n        return new_list\n    \ndef add_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    if not isinstance(nums1,list):\n        print(\"Not a valid list\")\n    elif not isinstance(nums2,list):\n        print(\"Not a valid list\")\n    elif len(nums1)!=len(nums2):\n        print(\"Not a valid list\")\n    else:\n        new_list = []\n        for i in range(0,len(nums1)):\n            new_list.append(nums1[i]+nums2[i])\n        return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) >= len(nums2):\n        nums = nums1\n    else:\n        nums = nums2\n    result = []\n    for i in range(0,len(nums)):\n        result.append(nums[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x - y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i-j for i,j in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtract = []\n    for x in nums1:\n        if x in nums2:\n            subtract.append(x)\n    return subtract\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    s1 = len(nums1)\n    s2 = len(nums2)\n    \n    if s1 >= s2:\n        new_list = [i for i in range(s1) if i not in nums2]\n        return new_list\n    else:\n        new_list = [i for i in range(s2) if i not in nums1]\n        return new_list\n    \ndef sub_list2(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i for i in nums1 if i not in nums2]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]-nums2[i])\n    return new_list\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_copy=nums1.copy()\n    for i in range(len(nums1)):\n        nums1_copy[i] = nums1[i] - nums2[i]\n    return nums1_copy\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [nums1[i]-nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    count = [0] * 10\n    for i in s:\n        count[int(i)] += 1\n    for i in range(len(count)):\n        if count[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # define an empty dict for later\n    dict_ = {}\n    # use a loop to iterate through each digit of the number\n    for i in str(n):\n        # check if the digit is in dict_\n        if i in dict_:\n            # if it is, increase the frequency by 1\n            dict_[i] += 1\n        else:\n            # if it is not, initialize it to 1\n            dict_[i] = 1\n    # declare a list to store all the numbers of the dict_\n    result = []\n    # declare a variable to check whether all the digits have a frequency less than or equal to itself\n    flag = True\n    # declare a variable to store the number of digits that exceed their frequency\n    count = 0\n    # loop through all the keys of the dict_\n    for key in dict_:\n        # if the value is greater than 1, the number of digits that exceed their frequency\n        if dict_[key] > 1:\n            # add it to count\n            count += dict_[key]\n            # set the flag to False\n            flag = False\n    # check if the number of digits that exceed their frequency is zero\n    if count == 0:\n        # return True\n        return True\n    # if it is not zero, then return False\n    else:\n        # return False\n        return False"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i < max(arr):\n            return False\n    return True\ndef isRational(n):\n    '''\n    Write a function takes in an integer and returns if the integer is rational.\n    '''\n    if n == 1:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef isObtuseAngle(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is an obtuse angle in a triangle.\n    '''\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef is_square(n):\n    '''\n    Write a function takes in an integer and returns if the integer is square number.\n    '''\n    if n == 0:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef isInrange(n,start,end):\n    '''\n    Write a function takes in an integer and returns if the integer is between start and end.\n    '''\n    if n == start:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef is_special(n):\n    '''\n    Write a function takes in an integer and returns if the integer is special.\n    '''\n    if n == 1:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef max_occurence(n):\n    '''\n    Write a function that takes in an integer and returns the most frequent digit in the integer.\n    '''\n    if n == 1:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef digits_occurence(n):\n    '''\n    Write a function that takes in an integer and returns the number of times each digit in the integer appears in the integer.\n    '''\n    arr = [int(i) for i in str(n)]\n    return {i:arr.count(i) for i in arr}\ndef print_numbers_occurence(n):\n    '''\n    Write a function that takes in an integer and prints all numbers between 1 and n, inclusive, that are divisible by n.\n    '''\n    arr = []\n    for i in range(1,n+1):\n        if i % n == 0:\n            arr.append(i)\n    return arr\ndef is_prime(n):\n    '''\n    Write a function takes in an integer and returns if the integer is prime.\n    '''\n    if n == 0 or n == 1:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n % i == 0:\n            return False\n    return True\ndef is_palindrome(n):\n    '''\n    Write a function takes in an integer and returns if the integer is palindrome.\n    '''\n    arr = [int(i) for i in str(n)]\n    arr.reverse()\n    if arr == [int(i) for i in str(n)]:\n        return True\n    else:\n        return False\ndef is_pentagonal(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is pentagonal.\n    '''\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef is_hexagonal(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is hexagonal.\n    '''\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef is_heptagonal(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is heptagonal.\n    '''\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef is_octagonal(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is octagonal.\n    '''\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return True\ndef is_nonagonl_prime(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is nonagonal prime.\n    '''\n    if n == 1:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    return is_prime(n)\ndef is_abundant(n):\n    '''\n    Write a function takes in an integer and returns if the integer is abundant.\n    '''\n    if n == 1:\n        return False\n    arr = [int(i) for i in str(n)]\n    for i in arr:\n        if i == max(arr):\n            return False\n    if sum(digits_occurence(n).values()) > n:\n        return True\n    return False\ndef num_abundant_summands(n):\n    '''\n    Write a function takes in an integer and returns the number of abundant numbers that can sum to n.\n    '''\n    abundant_nums = []\n    for i in range(1,n+1):\n        if is_abundant(i):\n            abundant_nums.append(i)\n    return len([i for i in range(1,n+1) if n-i in abundant_nums])\ndef factorial_digit_sum(n):\n    '''\n    Write a function that takes in an integer and returns the sum of the factorial of each digit in the integer.\n    '''\n    arr = [int(i) for i in str(n)]\n    return sum([math.factorial(i) for i in arr])\ndef find_right_triangle_num(a,b,c):\n    '''\n    Write a function takes in three integers and returns if the three integers can be the sides of a right triangle.\n    '''\n    if max(a,b,c) < (a+b+c-max(a,b,c)):\n        return False\n    if a**2 + b**2 == c**2:\n        return True\n    if a**2 + c**2 == b**2:\n        return True\n    if b**2 + c**2 == a**2:\n        return True\n    return False\ndef reverse_num(n):\n    '''\n    Write a function that takes in an integer and returns the integer reversed.\n    '''\n    return int(str(n)[::-1])\ndef is_factor_of_another(n):\n    '''\n    Write a function that takes in an integer and returns if the integer is a factor of another.\n    '''\n    arr = [i for i in range(1,n+1) if n%i == 0]\n    return len(arr) > 1\ndef find_smallest_number(n):\n    '''\n    Write a function that takes in an integer n and returns the smallest number that is evenly divisible by all the numbers from 1 to n.\n    '''\n    arr = [i for i in range(1,n+1) if n%i == 0]\n    return int(n/min(arr))\ndef find_next_palindrome(n):\n    '''\n    Write a function that takes in an integer n and returns the next palindromic number greater than n.\n    '''\n    whil"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for digit in s:\n        if int(digit) > int(s.count(digit)):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_frequency = [0 for i in range(10)]\n    while(n):\n        digit_frequency[n%10] += 1\n        n //= 10\n    for i in range(1,10):\n        if digit_frequency[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(n) == 1:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    dict={}\n    l=[]\n    if n<0:\n        return False\n    while n>0:\n        l.append(n%10)\n        n//=10\n    for i in l:\n        if i in dict:\n            dict[i]+=1\n        else:\n            dict[i]=1\n    print(dict)\n    for i in dict:\n        if dict[i]>i:\n            return False\n    return True\ndef sum_of_digits(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given positive integer n.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n//=10\n    return sum\ndef is_prime(n):\n    '''\n    Write a python function which checks whether a given positive integer is a prime number or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\ndef is_square(n):\n    '''\n    Write a python function to check whether a given positive integer is a perfect square or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    if n<0:\n        return False\n    for i in range(1,int(n**0.5)+1):\n        if i**2==n:\n            return True\n    return False\ndef is_palindrome(n):\n    '''\n    Write a python function to check whether a given positive integer is a palindrome or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    return str(n)==str(n)[::-1]\ndef is_leap(n):\n    '''\n    Write a python function to check whether a given year is a leap year or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    if n%4==0:\n        return True if n%100==0 else False\n    else:\n        return False\ndef is_perfect(n):\n    '''\n    Write a python function to check whether a given positive integer is perfect or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    l=[]\n    s=0\n    for i in range(1,n):\n        if n%i==0:\n            s+=i\n            l.append(i)\n    return s==n and len(l)==n-1\ndef decimal_to_octal(n):\n    '''\n    Write a python function to convert a given decimal number to its octal equivalent. Return the octal number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(oct(n))[2:]\ndef decimal_to_binary(n):\n    '''\n    Write a python function to convert a given decimal number to its binary equivalent. Return the binary number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(bin(n))[2:]\ndef decimal_to_hexadecimal(n):\n    '''\n    Write a python function to convert a given decimal number to its hexadecimal equivalent. Return the hexadecimal number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(hex(n))[2:]\ndef sum_of_digits_prime(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given positive integer n. if the sum of the digits is a prime number return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    s=0\n    while n>0:\n        s+=n%10\n        n//=10\n    return s==2 or is_prime(s)\ndef fibonacci(n):\n    '''\n    Write a python function to calculate the nth Fibonacci number. Return the nth Fibonacci number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    a=0\n    b=1\n    if n==0:\n        return 0\n    elif n==1:\n        return b\n    for i in range(2,n+1):\n        a,b=b,a+b\n    return b\ndef sum_digits_prime(n):\n    '''\n    Write a python function to calculate the sum of the digits of a given positive integer n. if the sum of the digits is prime return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    return is_prime(sum_of_digits(n))\ndef find_reverse(n):\n    '''\n    Write a python function which reverses the digits of a given positive integer. Return the reversed number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(n)[::-1]\ndef compare_string(str1,str2):\n    '''\n    Write a python function which takes two strings as input and compares them lexicographically. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    return str1<str2 or str2==str2[::-1]\ndef reverse_a_number(n):\n    '''\n    Write a python function to reverse a given number. Return the number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(n)[::-1]\ndef convert_to_octal(n):\n    '''\n    Write a python function to convert a given number to its octal equivalent. Return the octal number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(oct(n))[2:]\ndef convert_to_binary(n):\n    '''\n    Write a python function to convert a given number to its binary equivalent. Return the binary number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(bin(n))[2:]\ndef convert_to_hexadecimal(n):\n    '''\n    Write a python function to convert a given number to its hexadecimal equivalent. Return the hexadecimal number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(hex(n))[2:]\ndef convert_to_octal_prime(n):\n    '''\n    Write a python function to convert a given number to its octal equivalent and check whether the sum of the digits is a prime number or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    return is_prime(sum_of_digits(oct(n)))\ndef find_missing_number(n):\n    '''\n    Write a python function to find the missing number in a given integer array. Return the missing number as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return str(sum(range(1,n+1))-sum(set(n)))\ndef sort_array_of_0_1(n):\n    '''\n    Write a python function to sort a given integer array. Return the sorted array as a string.\n    You have to use the functions written in previous problems. \n    '''\n    return sorted(n)\ndef is_leap_year(n):\n    '''\n    Write a python function to check whether a given year is a leap year or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '''\n    return n%4==0\ndef gcd(a,b):\n    '''\n    Write a python function which takes two numbers as input and returns the GCD(Greatest Common Divisor) of the two numbers.\n    '''\n    if b==0:\n        return a\n    else:\n        return gcd(b,a%b)\ndef is_armstrong(n):\n    '''\n    Write a python function to check whether a given integer is armstrong or not. Return true or false.\n    You have to use the functions written in previous problems. \n    '"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if len(str(n)) == 1:\n        return True\n    freq = {}\n    for i in str(n):\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for i in freq:\n        if freq[i] > int(i):\n            return False\n    return True\n        \n    \n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count_dict = {}\n    for digit in str(n):\n        if digit in digit_count_dict:\n            digit_count_dict[digit] += 1\n        else:\n            digit_count_dict[digit] = 1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n)\n    for i in range(0, 10):\n        if str(i) in s and s.count(str(i)) > i:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]==element:\n            count+=1\n    if count==len(list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!=element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 1:\n        for i in range(len(list)-1):\n            if list[i]!= list[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    return all([i==element for i in list])\n    # write your code here\n    #return list.count(element) == len(list)\n    \ndef check_all_elements(list,element):\n    '''\n    Write a function that takes in a list and element and returns a boolean based on whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    return all([i==element for i in list])\n    # write your code here\n    #return list.count(element) == len(list)\n    \ndef check_not_equal(list,element):\n    '''\n    Write a function that takes in a list and element and returns a boolean based on whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    return any([i==element for i in list])\n    # write your code here\n    #return list.count(element) == len(list)\n    \ndef check_equal(list,element):\n    '''\n    Write a function that takes in a list and element and returns a boolean based on whether all items in the list are equal to the given element.\n    '''\n    if len(list)==0:\n        return False\n    return all([i==element for i in list])\n    # write your code here\n    #return list.count(element) == len(list)\n    \ndef every_three_nums(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of every third number.\n    '''\n    if len(list)<3:\n        return []\n    else:\n        new_list=[]\n        for i in range(len(list)):\n            if i%3==0:\n                new_list.append(list[i])\n        return new_list\n        \ndef sum_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the numbers in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return sum(list)\n    \ndef every_second_num(list):\n    '''\n    Write a function that takes in a list of numbers and returns a list of every second number.\n    '''\n    if len(list)<2:\n        return []\n    else:\n        new_list=[]\n        for i in range(len(list)):\n            if i%2==1:\n                new_list.append(list[i])\n        return new_list\n        \ndef sum_of_even_nums(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the even numbers in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return sum([i for i in list if i%2==0])\n    \ndef sum_of_odd_nums(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the odd numbers in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return sum([i for i in list if i%2==1])\n    \ndef sum_floats(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the floats in the list.\n    '''\n    if len(list)==0:\n        return 0.0\n    return sum([i for i in list if isinstance(i,float)])\n    \ndef sum_floats_in_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the sum of all the floats in the list.\n    '''\n    if len(list)==0:\n        return 0.0\n    return sum([i for i in list if isinstance(i,float)])\n    \ndef product_of_even_nums(list):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the even numbers in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return reduce(lambda x,y:x*y, [i for i in list if i%2==0])\n    \ndef product_of_odd_nums(list):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the odd numbers in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return reduce(lambda x,y:x*y, [i for i in list if i%2==1])\n    \ndef product_of_odd_nums_in_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the odd numbers in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return reduce(lambda x,y:x*y, [i for i in list if i%2==1])\n    \ndef product_of_floats(list):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the floats in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return reduce(lambda x,y:x*y, [i for i in list if isinstance(i,float)])\n    \ndef product_of_floats_in_list(list):\n    '''\n    Write a function that takes in a list of numbers and returns the product of all the floats in the list.\n    '''\n    if len(list)==0:\n        return 0\n    return reduce(lambda x,y:x*y, [i for i in list if isinstance(i,float)])\n    \ndef return_max(list):\n    '''\n    Write a function that takes in a list of numbers and returns the max value in the list. If the list is empty, have the function return False.\n    '''\n    if len(list)==0:\n        return False\n    return max(list)\n    \ndef return_min(list):\n    '''\n    Write a function that takes in a list of numbers and returns the min value in the list. If the list is empty, have the function return False.\n    '''\n    if len(list)==0:\n        return False\n    return min(list)\n    \ndef ultimate_analysis(list):\n    '''\n    Write a function that takes in a list of numbers and returns a dictionary that has the sumTotal, average, minimum, maximum and length of the list.\n    '''\n    return {'sumTotal':sum(list),'average':sum(list)/len(list),'minimum':min(list),'maximum':max(list),'length':len(list)}\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and returns the reverse of that list. Do this without creating a second list.\n    '''\n    if len(list)==0:\n        return []\n    return list[::-1]\n    \ndef reverse_list_in_place(list):\n    '''\n    Write a function that takes in a list and returns the reverse of that list. Do this without creating a second list.\n    '''\n    if len(list)==0:\n        return []\n    i=0\n    j=len(list)-1\n    while i<j:\n        temp=list[j]\n        list[j]=list[i]\n        list[i]=temp\n        i+=1\n        j-=1\n    return list\n    \ndef reverse_list_in_place2(list):\n    '''\n    Write a function that takes in a list and returns the reverse of that list. Do this without creating a second list.\n    '''\n    if len(list)==0:\n        return []\n    i=0\n    j=len(list)-1\n    while i<j:\n        list[i],list[j]=list[j],list[i]\n        i+=1\n        j-=1\n    return list\n    \ndef reverse_list_in_place3(list):\n    '''\n    Write a function that takes in a list and returns the reverse of that list. Do this without creating a second list.\n    '''\n    if len(list)==0:\n    "
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.findall(\"ab{2,3}\", text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if \"a\" in text:\n        if re.findall(r\"ab{2}\",text):\n            return True\n        elif re.findall(r\"ab{3}\",text):\n            return True\n        else:\n            return False\n    else:\n        return False\ndef text_match_two_four(text):\n    '''\n    Write a function that checks whether a string contains an 'a' character followed by two or four 'b' characters.\n    '''\n    if \"a\" in text:\n        if re.findall(r\"ab{2}\",text):\n            return True\n        elif re.findall(r\"ab{4}\",text):\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # pass\n    # pattern = 'ab{2,3}'\n    # pattern = 'ab{2,3}a'\n    # if re.findall(pattern, text):\n    #     return True\n    # else:\n    #     return False\n    return re.search(r'ab{2,3}a', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if \"ab\" in text:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text = str(text)\n    pattern = 'a.'*2 + '|' + 'a.'*3\n    if bool(re.search(pattern, text)):\n        return True\n    else:\n        return False\n    \ndef text_match_four_six(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by four or six 'b' characters.\n    '''\n    text = str(text)\n    pattern = 'a.'*4 + '|' + 'a.'*6\n    if bool(re.search(pattern, text)):\n        return True\n    else:\n        return False\n    \ndef text_match_seven_nine(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by seven or nine 'b' characters.\n    '''\n    text = str(text)\n    pattern = 'a.'*7 + '|' + 'a.'*9\n    if bool(re.search(pattern, text)):\n        return True\n    else:\n        return False\n    \ndef text_match_three_five(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by three or five 'b' characters.\n    '''\n    text = str(text)\n    pattern = 'a.'*3 + '|' + 'a.'*5\n    if bool(re.search(pattern, text)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r\"ab{2,3}\", text):\n        return True\n    else:\n        return False\nprint(text_match_two_three(\"acbbc\"))\nprint(text_match_two_three(\"abc\"))\nprint(text_match_two_three(\"aaabbb\"))\nprint(text_match_two_three(\"abbc\"))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'ab{2,3}', text)\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    \n    pattern = re.compile('a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        print(\"Match found: \", match.group())\n    else:\n        print(\"No match\")\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}a', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('ab{2,3}', text)\n    return bool(match)\n    \n    "
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if k == 1:\n        return max_sub_array_sum_k(a, n)\n    if n == 1:\n        return a[0]\n    if k == 2:\n        return max_sub_array_sum_k(a, n)\n    max_sum = 0\n    for i in range(0, k):\n        sum = 0\n        for j in range(0, n):\n            sum += a[j]\n            if i!= k-1:\n                sum = sum + a[j]\n            if sum > max_sum:\n                max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if k == 1:\n        return max(a)\n    max_value = max(a)\n    sum_subarrays = 0\n    sub_array_sum = 0\n    for i in range(n):\n        sub_array_sum += a[i]\n        sum_subarrays += a[i]\n        sub_array_sum = sub_array_sum % k\n        if sub_array_sum == 0:\n            max_value = max(max_value, sum_subarrays)\n        elif sub_array_sum < k:\n            continue\n        else:\n            sub_array_sum = 0\n    return max_value\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0:\n        return 0\n    \n    max_sum=0\n    max_sum_with_k=0\n    \n    for i in range(0, n):\n        max_sum+=a[i]\n    \n    for i in range(0, n+1):\n        for j in range(0, k):\n            if i+j < n+1:\n                max_sum_with_k+=a[i+j-1]\n    \n    if max_sum_with_k>max_sum:\n        return max_sum_with_k\n    else:\n        return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(k):\n        max_sum += max(a)\n        a = [sum(a) for a in zip(a, a)]\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # To store the largest sum of a contiguous array\n    max_sum = 0\n    # To store the maximum sum of the k subarrays\n    temp_sum = 0\n    # To store the maximum sum\n    max_temp_sum = 0\n    # Traverse the given array\n    for i in range(n):\n        # If the element is not present in the set, add it to the set\n        if a[i] not in temp_set:\n            temp_set.add(a[i])\n        # Update the maximum sum of the k subarrays\n        if i + 1 == k:\n            max_temp_sum = max(max_temp_sum, temp_sum)\n            temp_sum = 0\n        # Update the value of the current element in the set\n        temp_sum += a[i]\n        # If the current sum is greater than the maximum sum, then update the maximum sum\n        if temp_sum > max_temp_sum:\n            max_temp_sum = temp_sum\n    # Update the maximum sum of the k subarrays\n    max_sum = max(max_sum, max_temp_sum)\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ma = 0\n    for i in range(n):\n        ma += a[i]\n    ms = ma // k\n    # print(ms)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    sum, maxsum = 0, 0\n    for i in range(n): \n        sum = sum + a[i] \n        if (sum == 0): \n            sum = 0\n        elif (sum > maxsum): \n            maxsum = sum \n        sum = sum - a[i] \n    sum = maxsum\n    for i in range(n): \n        sum = sum + a[i] \n        if (sum == maxsum): \n            return (sum) \n        sum = sum - a[i] \n    return (sum) \n    \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize result\n    max_sum = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum += a[i]\n        if i+1 < n and i+1+k-1 < n:\n            max_sum += a[i+1+k-1] - a[i+1]\n        if max_sum < 0:\n            max_sum = 0\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # If k is smaller than n, we can always pick all elements from the given array. \n    # So if there are n elements and k is smaller than n, then max sum will be the sum of all the elements. \n    if (k <= n): \n        max_sum = sum(a)\n    # If k is greater than n, then we need to find the max sum of the subarrays of size n. \n    # Do this recursively for all subarrays of size n. \n    else: \n        max_sum = max_sub_array_sum_repeated(a, n, n) \n        \n        for i in range(n, (n * k) + 1): \n            current_sum = 0\n            for j in range(i, (i + n)): \n                current_sum += a[j % i] \n                # if we have a better sum, update it\n                if current_sum > max_sum: \n                    max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Method 1: Brute Force\n    # Method 2: Using formula: sum of squares of first n natural numbers = (n*(n+1))/2\n    # Method 3: Using formula: sum of squares of first n natural numbers = ((n*(n+1)*(2n+1))/6)\n    # Note: 1+2+3+...+n = (n*(n+1))/2\n    sum_of_squares = (n*(n+1))/2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    n = int(n)\n    sum_of_n_even_numbers = 0\n    for x in range(0,n):\n        if x % 2 == 0:\n            sum_of_n_even_numbers += x*x\n    return sum_of_n_even_numbers\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    num = int(n)\n    sum = 0\n    for i in range(0,num):\n        if (i % 2 == 0):\n            sum = sum + (i**2)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if type(n) == int and n>=1:\n        return n*(n+1) * (2*n+1) / 6\n    else:\n        raise Exception(\"Not valid number\")\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n):\n        if(i%2 == 0):\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for x in range(n):\n        sum+=x*x\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for x in range(1, n+1):\n        if x%2==0:\n            result += x*x\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_of_squares(n):\n        #initialize variables\n        sum_sq = 0\n        \n        #loop through the range\n        for i in range(1, n + 1):\n            if i % 2 == 0: #check if even number\n                sum_sq += i * i\n        \n        return sum_sq\n    return sum_of_squares(n)\n    "
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) >= max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    l = []\n    for i in list1:\n        if len(i) > len(l):\n            l = i\n    return l\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(list1) for list1 in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = []\n    for each_list in list1:\n        if len(each_list) > len(max_length):\n            max_length = each_list\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 1:\n        return list1\n    elif list1 == []:\n        return []\n    else:\n        sub_list = list1[0]\n        max_length = max_length(list1[1:])\n        if len(sub_list) >= len(max_length):\n            return sub_list\n        else:\n            return max_length\n        \n        \n        \ndef remove_duplicates(l1):\n    '''\n    Write a function that takes a list of numbers and removes all duplicates. \n    Hint: use a dictionary to store the results.\n    '''\n    d = {}\n    for i in l1:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            pass\n    return list(d.keys())\n    \n    \ndef valid_tickets(tickets, rules):\n    '''\n    Write a function that checks to see if any tickets are invalid. \n    Each ticket should be 6 numbers, one for each field.\n    Each number should be in the range of the corresponding field.\n    The six numbers on a ticket form a unique sequence beginning with the \n    departure location.\n    '''\n    count = 0\n    if type(tickets) == list:\n        for i in tickets:\n            if type(i) == list:\n                count += 1\n            else:\n                pass\n    if count!= 0:\n        tickets = tickets[0]\n        for i in tickets:\n            if type(i)!= int:\n                return False\n            else:\n                pass\n    else:\n        pass\n    for i in tickets:\n        for j in rules:\n            if i >= j[0] and i <= j[1]:\n                pass\n            else:\n                return False\n    return True\n                \n                \ndef detect_invalid_values(ticket, rules):\n    '''\n    Write a function that checks if a ticket is valid. \n    If all tickets are valid, return True.\n    Otherwise, return False.\n    '''\n    count = 0\n    for i in ticket:\n        for j in rules:\n            if i >= j[0] and i <= j[1]:\n                pass\n            else:\n                count += 1\n    if count == len(ticket):\n        return True\n    else:\n        return False\n        \n        \ndef get_ticket_value(ticket, rules):\n    '''\n    Write a function that will return the value of the ticket.\n    The function should return the departure location.\n    '''\n    for i in ticket:\n        for j in rules:\n            if i >= j[0] and i <= j[1]:\n                return i\n            else:\n                pass\n    \n                \ndef detect_rule(n, tickets, rules):\n    '''\n    Write a function that checks for the ticket scanning error rate.\n    The function should take a list of tickets, a list of rules, and a \n    ticket number and should return the ticket scanning error rate.\n    The ticket scanning error rate is defined as the number of tickets \n    that do not contain the correct field for that rule divided by the total \n    number of tickets.\n    '''\n    count = 0\n    for i in tickets:\n        if detect_invalid_values(i, rules) == False:\n            count += 1\n    return (count/len(tickets))\n            \n                \ndef find_error_rate(tickets, rules):\n    '''\n    Write a function that checks for the ticket scanning error rate.\n    The function should take a list of tickets, a list of rules, and a \n    ticket number and should return the ticket scanning error rate.\n    The ticket scanning error rate is defined as the number of tickets \n    that do not contain the correct field for that rule divided by the total \n    number of tickets.\n    '''\n    count = 0\n    for i in tickets:\n        if detect_invalid_values(i, rules) == False:\n            count += 1\n    return (count/len(tickets))\n        \n        \ndef match_rules(tickets, rules):\n    '''\n    Write a function that maps a rule to each ticket.\n    Each ticket should be able to map to only one rule.\n    The function should take a list of tickets, a list of rules, \n    and return a dictionary of rules mapped to tickets.\n    '''\n    d = {}\n    for i in rules:\n        count = 0\n        for j in tickets:\n            if i[0] <= j <= i[1]:\n                count += 1\n            else:\n                pass\n        d[i] = count\n    return d\n        \n        \ndef find_matching_rules(tickets, rules):\n    '''\n    Write a function that maps a rule to each ticket.\n    Each ticket should be able to map to only one rule.\n    The function should take a list of tickets, a list of rules, \n    and return a dictionary of rules mapped to tickets.\n    '''\n    d = {}\n    for i in rules:\n        count = 0\n        for j in tickets:\n            if i[0] <= j <= i[1]:\n                count += 1\n            else:\n                pass\n        d[i] = count\n    max = 0\n    for i in d.keys():\n        if d[i] > max:\n            max = d[i]\n            max_key = i\n        else:\n            pass\n    return max_key\n        \n        \ndef find_order(rules, tickets):\n    '''\n    Write a function that matches a rule to each ticket.\n    Each ticket should be able to map to only one rule.\n    The function should take a list of rules, a list of tickets, \n    and return the correct order of the rules.\n    '''\n    d = match_rules(tickets, rules)\n    order = []\n    for i in range(len(d)):\n        for j in d.keys():\n            if d[j] == i:\n                order.append(j)\n            else:\n                pass\n    return order\n        \n        \ndef ticket_scanning_error_rate(rules, my_ticket, nearby_tickets):\n    '''\n    Write a function that returns the total number of ticket scanning \n    error rates for the group of tickets.\n    The ticket scanning error rate is defined as the number of tickets \n    that do not contain the correct field for that rule divided by the total \n    number of tickets.\n    The function should take a list of rules, a nearby ticket, and a my \n    ticket and should return the total ticket scanning error rate.\n    '''\n    count = 0\n    for i in nearby_tickets:\n        if detect_invalid_values(i, rules) == True:\n            count += 1\n        else:\n            pass\n    return count/len(nearby_tickets)\n        \n        \ndef field_position(rules, my_ticket, nearby_tickets):\n    '''\n    Write a function that returns the position of a given field from \n    the list of rules.\n    The function should take a list of rules, a nearby ticket, and a my \n    ticket and should return the position of a given field.\n    '''\n    d = match_rules(nearby_tickets, rules)\n    order = find_order(rules, nearby_tickets)\n    \n    for i in d.keys():\n        if i[0] == my_ticket[0] or i[0] == my_ticket[1] or i[0] == my_ticket[2] or i[0] == my_ticket[3] or i[0] == my_ticket[4] or i[0] == my_ticket[5]:\n            pos1 = order.index(i)\n            \n        if i[1] == my_ticket[0] or i[1] == my_ticket[1] or i[1] == my_ticket[2] or i[1] == my_ticket[3] or i[1] == my_ticket[4] or i[1] == my_ticket[5]:\n            pos2 = order.index(i)\n            \n        if i[2] == my_ticket[0] or i[2] == my_ticket[1] or i[2] == my_ticket[2] or i[2] == my_ticket[3] or i[2] == my_ticket[4] or i[2] == my_ticket[5]:\n            pos3 = order.index(i)\n            \n        if i[3] == my_ticket[0] or i"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maximum_list = []\n    for x in list1:\n        if len(x) > len(maximum_list):\n            maximum_list = x\n    return maximum_list\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return(max(list1,key=len))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(i) for i in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max(list1,key=len)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Table to store the number of ways for painting the fence. \n    # Table will have n+1 rows as there are n posts and 0th row stores the number of ways for painting the fence with 0 posts.\n    # Thus, table will have 2n rows as we need to store the number of ways for painting the fence with 1 post, 2 posts, 3 posts,... n posts.\n    table = [[0 for i in range(k)] for j in range(n+1)] \n    \n    # Base cases \n    # First column stores the number of ways of painting the fence with 0 posts. \n    for i in range(k): \n        table[0][i] = 1\n    # First row stores the number of ways of painting the fence with only 0 posts possible. \n    # Second row stores the number of ways of painting the fence with 1 post possible. \n    # Third row stores the number of ways of painting the fence with 2 posts possible. \n    for i in range(1, n+1): \n        for j in range(k): \n            if j == 0: \n                table[i][j] = table[i-1][j+1]\n            elif j == k-1: \n                table[i][j] = table[i-1][j-1]\n            else: \n                table[i][j] = table[i-1][j-1] + table[i-1][j+1]\n    \n    # Table to store the number of ways for painting the fence. \n    # Table will have n+1 rows as there are n posts and 0th row stores the number of ways for painting the fence with 0 posts. \n    # Thus, table will have 2n rows as we need to store the number of ways for painting the fence with 1 post, 2 posts, 3 posts,... n posts.\n    #num_of_ways = [[0 for i in range(k)] for j in range(n+1)] \n    \n    # Return number of ways for painting the fence. \n    # for i in range(n+1): \n    #     num_of_ways[i][0] = 1\n    # for i in range(1, n+1): \n    #     for j in range(k): \n    #         if j == 0: \n    #             num_of_ways[i][j] = num_of_ways[i-1][j+1]\n    #         elif j == k-1: \n    #             num_of_ways[i][j] = num_of_ways[i-1][j-1]\n    #         else: \n    #             num_of_ways[i][j] = num_of_ways[i-1][j-1] + num_of_ways[i-1][j+1]\n    return table[n][0] + table[n][1] \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < 1 or n < k:\n        return 0\n    return count_no_of_ways_recursive(n, k)\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(n):\n        count += count_no_of_ways_helper(n-i, k)\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or n == 1: \n        return 1\n    if n == 2: \n        return 1\n    if n == 3: \n        if k == 2: \n            return 2\n        elif k == 3: \n            return 3\n    if k == 2: \n        return 2\n    return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-2, k-1) + count_no_of_ways(n-3, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    for i in range(n + 1):\n        for j in range(k + 1): \n            if j == 0: \n                dp[i][j] = 1\n            else: \n                if i == 0:\n                    dp[i][j] = 0\n                else:\n                    if j == 1:\n                        dp[i][j] = dp[i - 1][j]\n                    elif j > 1:\n                        dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or n == 2:\n        return n\n    \n    dp = [[0 for x in range(k+1)] for y in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = j\n            elif i == 2:\n                dp[i][j] = 1 if j == 1 else j\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-2][j-1]\n                \n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k)] for j in range(n+1)]\n    # base case initialization\n    for i in range(k):\n        dp[0][i] = 1\n    for i in range(n):\n        dp[i+1][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    print(dp[n][k-1])\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k < 2:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    dp = [0] * k\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        for j in range(k):\n            if j == 0:\n                dp[j] = dp[j]\n            else:\n                dp[j] = dp[j-1] + dp[j]\n    return dp[-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    global cache\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if (n, k) not in cache:\n        if k == 1:\n            cache[(n, k)] = n\n            return cache[(n, k)]\n        if k == 2:\n            cache[(n, k)] = n\n            return cache[(n, k)]\n        else:\n            cache[(n, k)] = count_no_of_ways(n - 1, k - 1) + count_no_of_ways(n - 1, k)\n    return cache[(n, k)]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(k+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # Code here\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # (base) D:\\>python q2.py\n    # Enter first number: 3\n    # Enter second number: 4\n    # The quotient is 1\n    print(\"The quotient is\",m//n)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n < m:\n        quot = n / m\n    else:\n        quot = m / n\n    return int(quot)\n    \ndef find_remainder(n,m):\n    '''\n    Write a python function to find remainder of two numbers.\n    '''\n    if n < m:\n        rem = n % m\n    else:\n        rem = m % n\n    return rem\n    \ndef find_sum(n,m):\n    '''\n    Write a python function to find sum of two numbers.\n    '''\n    return n + m\n    \ndef find_difference(n,m):\n    '''\n    Write a python function to find difference of two numbers.\n    '''\n    return n - m\n    \ndef find_product(n,m):\n    '''\n    Write a python function to find product of two numbers.\n    '''\n    return n * m\n    \ndef find_quotient(n,m):\n    '''\n    Write a python function to find quotient of two numbers.\n    '''\n    if n < m:\n        quot = n / m\n    else:\n        quot = m / n\n    return int(quot)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\nprint(find(6,5))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a=n//m\n    return a\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if m == 0:\n        return None\n    else:\n        return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # 1. Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    # Quotient should be greater than or equal to 0.\n    def quotient(n,m):\n        #print(n//m)\n        if m==0:\n            return 0\n        if n<m:\n            return 0\n        if n%m==0:\n            return n//m\n        else:\n            return n//m+1\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==m:\n        return 0\n    if m>n:\n        n,m=m,n\n    if m%2==0:\n        return (find(n,m/2)+find(n,m/2))\n    else:\n        return (find(n,(m-1)/2)+find(n,(m-1)/2)+n)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2 + h**2\ndef rightangle_triangle(side1,side2,side3):\n    '''\n    Write a function to check if all sides of a triangle are equal to one another.\n    '''\n    if side1 == side2 and side2 == side3:\n        return True\n    else:\n        return False\ndef rightangle_triangle_area(side1,side2,side3):\n    '''\n    Write a function to check if a triangle is a right angled triangle.\n    '''\n    if side1 == side2 and side2 == side3:\n        return side1*2\n    else:\n        return 0\ndef rightangle_triangle_isosceles(side1,side2,side3):\n    '''\n    Write a function to check if a triangle is an isosceles triangle.\n    '''\n    if side1 == side2 or side1 == side3:\n        return True\n    else:\n        return False\ndef rightangle_triangle_sceles(side1,side2,side3):\n    '''\n    Write a function to check if a triangle is a sceles triangle.\n    '''\n    if side1 == side2 or side1 == side3 or side2 == side3:\n        return True\n    else:\n        return False\ndef rightangle_triangle_equilateral(side1,side2,side3):\n    '''\n    Write a function to check if a triangle is equilateral.\n    '''\n    if side1 == side2 and side2 == side3:\n        return True\n    else:\n        return False\ndef rightangle_triangle_congruent(side1,side2,side3):\n    '''\n    Write a function to check if three sides of a triangle have equal values.\n    '''\n    if side1 == side2 and side2 == side3:\n        return True\n    else:\n        return False\ndef rightangle_triangle_paralell(side1,side2,side3):\n    '''\n    Write a function to check if three sides of a triangle are parallel.\n    '''\n    if side1 == side2 == side3:\n        return True\n    else:\n        return False\ndef rightangle_triangle_perpendicular(side1,side2,side3):\n    '''\n    Write a function to check if three sides of a triangle are perpendicular.\n    '''\n    if side1*side2 == side3 or side2*side3 == side1 or side3*side1 == side2:\n        return True\n    else:\n        return False\ndef rightangle_triangle_isosceles_area(side1,side2,side3):\n    '''\n    Write a function to find the area of a isosceles triangle.\n    '''\n    if side1 == side2 or side1 == side3:\n        return (side1*math.sqrt(2))/4\n    else:\n        return 0\ndef rightangle_triangle_sceles_area(side1,side2,side3):\n    '''\n    Write a function to find the area of a sceles triangle.\n    '''\n    if side1 == side2 or side1 == side3:\n        return (side1*math.sqrt(2))/2\n    else:\n        return 0\ndef rightangle_triangle_equilateral_area(side1,side2,side3):\n    '''\n    Write a function to find the area of a equilateral triangle.\n    '''\n    return (math.sqrt(3)*side1)/4\ndef rightangle_triangle_congruent_area(side1,side2,side3):\n    '''\n    Write a function to find the area of a congruent triangle.\n    '''\n    return side1*math.sqrt(3)\ndef rightangle_triangle_paralell_area(side1,side2,side3):\n    '''\n    Write a function to find the area of a parallell triangle.\n    '''\n    return (side1*side2)/2\ndef rightangle_triangle_perpendicular_area(side1,side2,side3):\n    '''\n    Write a function to find the area of a perpendicular triangle.\n    '''\n    return (side1*side2)/2\ndef rightangle_triangle_area_sides(side1,side2,side3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return side1*side2/2\ndef rightangle_triangle_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    return side1+side2+side3\ndef rightangle_triangle_area_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area and perimeter of a triangle.\n    '''\n    return (side1+side2+side3)/2\ndef rightangle_triangle_area_equilateral_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an equilateral triangle.\n    '''\n    return ((3*side1**2)/4)+side1\ndef rightangle_triangle_area_sceles_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of a sceles triangle.\n    '''\n    return (math.sqrt(3)*side1)+side1\ndef rightangle_triangle_area_isosceles_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an isosceles triangle.\n    '''\n    return (side1*math.sqrt(2))+side1\ndef rightangle_triangle_area_equilateral_sides(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an equilateral triangle.\n    '''\n    return (math.sqrt(3)*side1)/2\ndef rightangle_triangle_area_sceles_sides(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of a sceles triangle.\n    '''\n    return (side1*math.sqrt(2))/2\ndef rightangle_triangle_area_isosceles_sides(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an isosceles triangle.\n    '''\n    return (math.sqrt(3)*side1)/2\ndef rightangle_triangle_area_isosceles_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an isosceles triangle.\n    '''\n    return (math.sqrt(3)*side1)/2+side1\ndef rightangle_triangle_area_equilateral_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an equilateral triangle.\n    '''\n    return (math.sqrt(3)*side1)/2\ndef rightangle_triangle_area_isosceles_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an isosceles triangle.\n    '''\n    return (math.sqrt(3)*side1)/2\ndef rightangle_triangle_area_equilateral_sides(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an equilateral triangle.\n    '''\n    return (math.sqrt(3)*side1)/2\ndef rightangle_triangle_area_sceles_sides(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of a sceles triangle.\n    '''\n    return (side1*math.sqrt(2))/2\ndef rightangle_triangle_area_isosceles_sides(side1,side2,side3):\n    '''\n    Write a function to find the area, perimeter, and sides of an isosceles triangle.\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p = math.sqrt(w**2 + h**2)\n    return p\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # if w==h:\n    #     return 0.0\n    # else:\n    #     return(math.sqrt(w**2+h**2)-math.sqrt(w**2+h**2-w*h))\n    return math.sqrt(w**2+h**2)-math.sqrt(w**2+h**2-w*h)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    thirdside = math.sqrt(h**2 + w**2)\n    return thirdside\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # using Pythagorean Theorem\n    return math.sqrt(w**2+h**2)\nprint(otherside_rightangle(3,4))\nprint(otherside_rightangle(5,12))\nprint(otherside_rightangle(8,15))\nprint(otherside_rightangle(10,22))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return ((w**2)+(h**2))**0.5\ndef thirdside_rightangle(a,b,c):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return ((a**2)+(b**2))**0.5\ndef thirdside_rightangle2(a,b):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return ((a**2)+(b**2))**0.5\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area2(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area3(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area4(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area5(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area6(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area7(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area8(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area9(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area10(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area11(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area12(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area13(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area14(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area15(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area16(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area17(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area18(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area19(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area20(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area21(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area22(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area23(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area24(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area25(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area26(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\ndef triangle_area27(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    s=(a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print('The third side of a right angled triangle is ',round(math.sqrt(w*w+h*h),2))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    print(w**2+h**2-math.sqrt(w**2+h**2))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return 2 * w * h / math.sqrt((w ** 2) + (h ** 2))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval.sort()\n    print(listval[-1])\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]>maxval:\n            maxval=listval[i]\n    return maxval\nprint(max_val([1,2,3,4,5]))\nprint(max_val([5,4,3,2,1]))\nprint(max_val([3.14,1.2,2.2,5.0]))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    for i in range(len(listval)):\n        for j in range(len(listval[i])):\n            if(listval[i][j]>max_val):\n                max_val=listval[i][j]\n    return max_val\nprint(max_val([[1,2,3],[4,5],[6,7,8,9],[10,11,12,13,14,15,16]]))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for element in listval:\n        if element > maxval:\n            maxval = element\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for val in listval:\n        if val > max:\n            max = val\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxvalue = listval[0]\n        for item in listval:\n            if item > maxvalue:\n                maxvalue = item\n    return maxvalue\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(0, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    listval = [10, 10.0,'string', False, [1, 2, 3], (2, 3, 4), {1, 2, 3}, {'a': 1, 'b': 2, 'c': 3}]\n    return(max(listval))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # The sum of all divisors of a number is the product of its factors.\n    #\n    # We can iterate through the range of numbers from 2 to the square root of the\n    # input number to calculate the sum.\n    #\n    # The range will only include the number itself, so we will have to\n    # multiply by 2 and subtract the number to calculate all divisors.\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    numbers = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            numbers.append(i)\n    return sum(numbers)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for x in range(1, number):\n        if number % x == 0:\n            sum += x\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for div in range(1,number):\n        if number % div == 0:\n            div_sum += div\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n    \ndef sum_div_list(list):\n    '''\n    Write a function to return the sum of all divisors of a list.\n    '''\n    sum_of_divisors = 0\n    for i in list:\n        for j in range(1, i):\n            if i % j == 0:\n                sum_of_divisors += j\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for divisor in range(1, number + 1):\n        if number % divisor == 0:\n            sum_divisors += divisor\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_divisors += i\n    return sum_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    s = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            s += i\n    return s\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([i for i in range(1,number) if number % i == 0])\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # Function to Use Inversion Count \n    def mergeSort(arr, n): \n        # A temp_arr is created to store \n        # sorted array in merge function \n        temp_arr = [0]*n\n        return _mergeSort(arr, temp_arr, 0, n-1) \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    merge_sort(arr)\n    return arr[len(arr)-1]\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return sort_and_count_inv(arr)[1]\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def merge(arr, temp_arr, left, mid, right): \n        i = left     # Starting index of left subarray \n        j = mid + 1 # Starting index of right subarray \n        k = left     # Starting index of to be sorted subarray \n        count = 0\n        while i <= mid and j <= right: \n            if arr[i] <= arr[j]: \n                temp_arr[k] = arr[i] \n                k += 1\n                i += 1\n            else: \n                count += mid-i + 1\n                temp_arr[k] = arr[j] \n                k += 1\n                j += 1\n        \n        # Copy the remaining elements of left subarray \n        # (if there are any) \n        while i <= mid: \n            temp_arr[k] = arr[i] \n            k += 1\n            i += 1\n        \n        # Copy the remaining elements of right subarray \n        # (if there are any) \n        while j <= right: \n            temp_arr[k] = arr[j] \n            k += 1\n            j += 1\n        \n        # Copy the sorted subarray into Original array \n        for loop_var in range(left, right + 1): \n            arr[loop_var] = temp_arr[loop_var] \n            \n        return count \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] > arr[j]): \n                res += 1\n    return res"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] > arr[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # arr = [1, 20, 6, 4, 5]\n    # Your code goes here\n    def mergeSort(arr): \n        #print(\"Splitting \",arr)\n        if len(arr) > 1: \n            mid = len(arr)//2\n            L = arr[:mid]\n            R = arr[mid:]\n      \n            mergeSort(L) \n            mergeSort(R) \n      \n            i = j = k = 0\n      \n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                k+=1\n      \n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n              \n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n        #print(\"Merging \",arr)\n      \n    def countInversions(arr): \n        '''\n        Write a python function to count inversions in an array.\n        '''\n        # Your code goes here\n        n = len(arr) \n        inv_count = 0\n      \n        if n > 1: \n            mid = n//2\n            L = arr[:mid] \n            R = arr[mid:] \n      \n            inv_count += countInversions(L) \n            inv_count += countInversions(R) \n      \n            i = j = k = 0\n      \n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                    inv_count+=1\n                k+=1\n      \n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n              \n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n        return inv_count \n      \n    def countInversions(arr): \n        '''\n        Write a python function to count inversions in an array.\n        '''\n        # Your code goes here\n        n = len(arr) \n        inv_count = 0\n      \n        if n > 1: \n            mid = n//2\n            L = arr[:mid] \n            R = arr[mid:] \n      \n            inv_count += countInversions(L) \n            inv_count += countInversions(R) \n      \n            i = j = k = 0\n      \n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                    inv_count+=1\n                k+=1\n      \n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n              \n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n        return inv_count \n      \n    def countInversions(arr): \n        '''\n        Write a python function to count inversions in an array.\n        '''\n        # Your code goes here\n        n = len(arr) \n        inv_count = 0\n      \n        if n > 1: \n            mid = n//2\n            L = arr[:mid] \n            R = arr[mid:] \n      \n            inv_count += countInversions(L) \n            inv_count += countInversions(R) \n      \n            i = j = k = 0\n      \n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                    inv_count+=1\n                k+=1\n      \n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n              \n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n        return inv_count \n      \n    def countInversions(arr): \n        '''\n        Write a python function to count inversions in an array.\n        '''\n        # Your code goes here\n        n = len(arr) \n        inv_count = 0\n      \n        if n > 1: \n            mid = n//2\n            L = arr[:mid] \n            R = arr[mid:] \n      \n            inv_count += countInversions(L) \n            inv_count += countInversions(R) \n      \n            i = j = k = 0\n      \n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                    inv_count+=1\n                k+=1\n      \n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n              \n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n        return inv_count \n      \n    def countInversions(arr): \n        '''\n        Write a python function to count inversions in an array.\n        '''\n        # Your code goes here\n        n = len(arr) \n        inv_count = 0\n      \n        if n > 1: \n            mid = n//2\n            L = arr[:mid] \n            R = arr[mid:] \n      \n            inv_count += countInversions(L) \n            inv_count += countInversions(R) \n      \n            i = j = k = 0\n      \n            while i < len(L) and j < len(R): \n                if L[i] < R[j]: \n                    arr[k] = L[i] \n                    i+=1\n                else: \n                    arr[k] = R[j] \n                    j+=1\n                    inv_count+=1\n                k+=1\n      \n            while i < len(L): \n                arr[k] = L[i] \n                i+=1\n                k+=1\n              \n            while j < len(R): \n                arr[k] = R[j] \n                j+=1\n                k+=1\n        return inv_count \n      \n    def countInversions(arr): \n        '''\n        Write a python function to count inversions in an array.\n        '''\n        # Your code goes here\n        n = len(arr) \n        inv_count = 0\n      \n        if n > 1: \n            mid "
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr)[1]\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    '''\n    Expected Output:\n    Input: arr = [8, 4, 2, 1]\n    Output: 3\n    Explanation: arr is [4, 8, 2, 1], [8, 4, 2, 1], [8, 4, 2, 1]\n    '''\n    arr_len = len(arr)\n    count = 0\n    i = 0\n    j = 0\n    while i < arr_len:\n        j = i\n        while j < arr_len:\n            if arr[i] > arr[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for sublist in list1:\n        for item in sublist:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if type(item) == list:\n            new_list.extend(flatten_list(item))\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result += flatten_list(item)\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for l in list1:\n        if isinstance(l, list):\n            output += flatten_list(l)\n        else:\n            output.append(l)\n    return output"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if type(item) == type([]):\n            for item in item:\n                flat_list.append(item)\n        else:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for element in list1:\n        if type(element) is list:\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return [str(item) for sublist in list1 for item in sublist]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    def flatten(list1, list2):\n        for i in list1:\n            if type(i) is list:\n                flatten(i, list2)\n            else:\n                list2.append(i)\n        return list2\n    return flatten(list1, result)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    c, m = defaultdict(list), max\n    for i, j, k in stdata:\n        c[i].append(j)\n    for i in c:\n        m[i] = max(c[i])\n    return dict(m)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    dict_ = {}\n    for st in stdata:\n        if st[1] not in dict_:\n            dict_[st[1]] = int(st[0])\n        else:\n            dict_[st[1]] += int(st[0])\n    return max(dict_.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_dict.update({key: value for key,value in stdata.items() if value == max(stdata.values())})\n    return max_dict\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Write your code here.\n    stdata.sort(key=lambda x: x[1], reverse=True)\n    dic = defaultdict(lambda: 0)\n    for i in stdata:\n        dic[i[0]] += i[1]\n    return max(dic.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for x in stdata:\n        for y in x:\n            if int(y[0]) > max_aggregate:\n                max_aggregate = int(y[0])\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for key, val in stdata.items():\n        if val > max_agg:\n            max_agg = val\n    return max_agg\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #return max(stdata, key=lambda x: x[2])[2]\n    return max(stdata, key=lambda x: x[2])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    l = []\n    for x,y in stdata:\n        l.append(y)\n    return max(l)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Your code goes here\n    dic = defaultdict(lambda :0)\n    \n    for i in stdata:\n        for j in i:\n            dic[j] += 1\n    \n    return max(dic, key=dic.get)\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = lambda st:max([v for k,v in st])\n    #print(list(map(max_aggregate,stdata)))\n    #print(max(map(max_aggregate,stdata)))\n    return max(map(max_aggregate,stdata))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    return count_binary_seq(n-1) + 2**(n-1)\n    \ndef binary_sum(n):\n    '''\n    Find the number of ways to sum n using the above definition of binary sequences\n    '''\n    if n == 0:\n        return 1\n    return binary_sum(n-1) + binary_sum(n-2) + 2*(n-1)\n    \ndef find_largest_in_tree(root):\n    '''\n    Given a binary tree, find the node with the largest value.\n    '''\n    if root.right == None and root.left == None:\n        return root.val\n    if root.right == None:\n        return max(root.val, find_largest_in_tree(root.left))\n    if root.left == None:\n        return max(root.val, find_largest_in_tree(root.right))\n    return max(root.val, find_largest_in_tree(root.left), find_largest_in_tree(root.right))\n        \n        \ndef count_unique_subtree(root):\n    if root == None:\n        return 0\n    count = 1\n    count += count_unique_subtree(root.left)\n    count += count_unique_subtree(root.right)\n    count += count_unique_subtree(root.left) + count_unique_subtree(root.right)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    return count_binary_seq(n-1) + 2**(n-1)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    d={}\n    d[0]=1\n    d[1]=2\n    for i in range(2,2*n+1):\n        if i==2*n:\n            d[i]=(d[i-1]*(2*n-i+1))%1000000007\n        elif i==2*n-1:\n            d[i]=(d[i-1]*(2*n-i))%1000000007\n        else:\n            d[i]=(d[i-1]+(d[i-2]*2))%1000000007\n    return d[2*n]\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int(factorial(2*n)/(factorial(n)*factorial(n)))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    return count_binary_seq_helper(n, 0, 0, memo)\n    \ndef count_binary_seq_helper(n, curr, sum1, memo):\n    if (n, curr) in memo:\n        return memo[(n, curr)]\n    if curr == n:\n        memo[(n, curr)] = 1\n        return 1\n    \n    if curr == n - 1:\n        ans = 0\n        for i in range(0, 2):\n            ans += count_binary_seq_helper(n, curr + 1, sum1 + i, memo)\n        memo[(n, curr)] = ans\n        return ans\n    \n    ans = 0\n    for i in range(0, 2):\n        ans += count_binary_seq_helper(n, curr + 1, sum1 + i, memo)\n    memo[(n, curr)] = ans\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # since there are 2^(2n) binary sequences of length 2n\n    # there is a relation between them\n    # i.e. 2^(2n - 1) + 2^(2n - 1) + 2^(2n - 1) +... + 2^(2n - 1) = 2^(2n)\n    # where, 2^(2n) = 2^(n) * 2^(n)\n    \n    # NOTE: We know that the sum of bits of an even length binary sequence is even\n    \n    def dp(n):\n        # we have a base case where n = 1\n        # for n = 1, we have 2^(1) = 1\n        if n == 1:\n            return 1\n        \n        # we have a base case where n == 2\n        # for n == 2, we have 2^(2) = 2^(1) + 2^(1) + 2^(1) = 2 + 2 + 2 = 6\n        if n == 2:\n            return 6\n        \n        # we have a recursive case where n > 2\n        return 2 * dp(n-1) + 2 * dp(n-2)\n    \n    return dp(n)\n    \nif __name__ == '__main__':\n    print(count_binary_seq(1))\n    print(count_binary_seq(2))\n    print(count_binary_seq(3))\n    print(count_binary_seq(4))\n    print(count_binary_seq(5))"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)*(2**n + 2**n - 1)//(2*2**n)"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    print(\"The count is : \", pow(2, 2*n)*(pow(2, n) - 1)//(pow(2, 2*n) - 1))\n    return pow(2, 2*n)*(pow(2, n) - 1)//(pow(2, 2*n) - 1)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_recursive(n): \n        if n == 0: \n            return 1\n        if n == 1: \n            return 2\n        return 2 * count_binary_seq_recursive(n - 1)\n    \n    def count_binary_seq_iterative(n): \n        sum_of_bits = 0\n        sum_of_bits_inverse = 0\n        for i in range(1, 2 ** n): \n            binary_representation = bin(i)\n            sum_of_bits = sum_of_bits + int(binary_representation[2:][-n:], 2)\n            sum_of_bits_inverse = sum_of_bits_inverse + int(binary_representation[2:][:n], 2)\n        return (2 ** n) * sum_of_bits - sum_of_bits_inverse\n    \n    print(\"Iteratively:\", count_binary_seq_iterative(n))\n    print(\"Recursively:\", count_binary_seq_recursive(n))\n    \nif __name__ == '__main__':\n    count_binary_seq(4"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return helper(n,n)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = dict_depth(value)\n        else:\n            depth = 0\n        if depth > max_depth:\n            max_depth = depth\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return 0\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    maxDepth = 0\n    for key in d.keys():\n        if isinstance(d[key], dict):\n            curDepth = dict_depth(d[key])\n        else:\n            curDepth = 0\n        if curDepth > maxDepth:\n            maxDepth = curDepth\n    return maxDepth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            deeper = dict_depth(v)\n            if deeper > max_depth:\n                max_depth = deeper\n        elif isinstance(v, list):\n            for item in v:\n                if isinstance(item, dict):\n                    deeper = dict_depth(item)\n                    if deeper > max_depth:\n                        max_depth = deeper\n    return max_depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return max(map(dict_depth, d.values())) + 1\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depths = []\n    \n    for key in d:\n        if isinstance(d[key], dict):\n            depths.append(dict_depth(d[key]))\n        else:\n            depths.append(1)\n    \n    return max(depths)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            max_depth = max(max_depth, dict_depth(v))\n        else:\n            if depth > max_depth:\n                max_depth = depth\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr.sort()\n    l=[]\n    for i in ranges :\n        l.append(arr[rotations[i]])\n    print(l)\n    l.sort()\n    if l[index]!=arr[index]:\n        return l[index]\n    else:\n        return arr[index]\n        "
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(index,len(arr),1) :\n        if arr[i] in ranges :\n            return arr[i]\n    return arr[0]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in ranges :\n        if(ranges[i]==rotations) :\n            count += 1\n            if(count==1) :\n                return arr[i]\n                break\n        else :\n            return False\n            break\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    ranges = [ranges[0]%len(arr),ranges[1]%len(arr)]\n    rotations = min(rotations,ranges[1]-ranges[0]+1)\n    print(ranges,rotations)\n    for i in range(rotations) :\n        if (ranges[1]-ranges[0])==1 :\n            return arr[ranges[0]]\n        arr = arr[1:]+arr[0:1]\n        ranges[0] += 1\n        ranges[1] += 1\n    print(arr,ranges,rotations)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Range is 1-based\n    # Rotations is zero based.\n    # The input is an array, ranges, number of rotations and index.\n    # The output is the value of element at index after rotations.\n    \n    for i in range(rotations):\n        ranges[i+1]=ranges[i]\n    return ranges[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #print(\"Range in find_Element: \",ranges,rotations,index)\n    #print(\"Input: \",arr)\n    if index >= len(arr) :\n        index = index % len(arr)\n    #print(\"Index: \",index)\n    #print(\"Arr: \",arr,arr[index])\n    for i in range(0,rotations) :\n        temp = arr[index]\n        arr[index] = arr[index-1]\n        arr[index-1] = temp\n        index += 1\n        index = index % len(arr)\n    #print(\"New Arr: \",arr)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations) :\n        temp = arr[0]\n        for j in range(len(arr)-1) :\n            arr[j] = arr[j+1]\n        arr[len(arr)-1] = temp\n    if index < len(arr) :\n        return arr[index]\n    return None\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index < rotations) : \n        return arr[index]\n    else : \n        return find_Element(arr,ranges,rotations,index%ranges)\n        \n    \n        \narr = [1,2,3,4,5]\nindex = int(input(\"Enter a index : \"))\nprint(\"Element at index : \",find_Element(arr,len(arr),index,0))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print(rotations)\n    # print(ranges)\n    # print(\"rotations\",rotations)\n    # print(\"ranges\",ranges)\n    lst=[]\n    for i in range(ranges[0],ranges[1]) : \n        lst.append(arr[i])\n    if rotations==0 :\n        return lst[index]\n    else :\n        lst_index=index%len(lst)\n        return lst[lst_index]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define the regular expression\n    pattern = re.compile(r'^p\\w+')\n    # Find all matches of the regular expression in the file\n    match = pattern.findall(words)\n    #print(match)\n    return match\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [i for i in words if i[0] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    match = re.match('^p', words[0])\n    match2 = re.match('^p', words[1])\n    if match and match2:\n        return words[0], words[1]\n    else:\n        return \"None found\"\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # words=['hello','goodbye','pigeon']\n    # list=[]\n    # for i in words:\n    #     if i[0]=='p':\n    #         list.append(i)\n    # print(list)\n    words=['hello','goodbye','pigeon']\n    result=list(filter(lambda x:x[0]=='p',words))\n    print(result)\nstart_withp(['hello','goodbye','pigeon'])\ndef start_withp_using_re(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words=['hello','goodbye','pigeon']\n    # list=[]\n    # for i in words:\n    #     if i[0]=='p':\n    #         list.append(i)\n    # print(list)\n    result=re.findall(r'\\bp[a-z]*',words)\n    print(result)\nstart_withp_using_re(['hello','goodbye','pigeon'])\ndef start_withp_using_re2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words=['hello','goodbye','pigeon']\n    # list=[]\n    # for i in words:\n    #     if i[0]=='p':\n    #         list.append(i)\n    # print(list)\n    result=re.findall(r'\\bp[a-z]*',words)\n    print(result)\nstart_withp_using_re2(['hello','goodbye','pigeon'])\ndef start_withp_using_map():\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words=['hello','goodbye','pigeon']\n    list=list(map(lambda x:x[0],words))\n    print(list)\nstart_withp_using_map()\ndef start_withp_using_map2():\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    words=['hello','goodbye','pigeon']\n    result=list(filter(lambda x:x[0]=='p',words))\n    print(result)\nstart_withp_using_map2()\ndef even_numbers(lst):\n    return list(filter(lambda x:x%2==0,lst))\nprint(even_numbers([1,2,3,4,5,6,7,8,9,10]))\ndef even_numbers_using_re(lst):\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    result=re.findall(r'\\d+?(?=\\d+?\\b)',lst)\n    print(result)\neven_numbers_using_re('1234567890')\ndef even_numbers_using_re2(lst):\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    result=re.findall(r'\\d+?(?=[0-9][0-9]\\b)',lst)\n    print(result)\neven_numbers_using_re2('1234567890')\ndef even_numbers_using_map():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(map(lambda x:x%2==0,lst))\n    print(result)\neven_numbers_using_map()\ndef even_numbers_using_map2():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:x%2==0,lst))\n    print(result)\neven_numbers_using_map2()\ndef even_numbers_using_map3():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:True if x%2==0 else False,lst))\n    print(result)\neven_numbers_using_map3()\ndef even_numbers_using_map4():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:x,lst))\n    print(result)\neven_numbers_using_map4()\ndef even_numbers_using_map5():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:x%2==0,lst))\n    print(result)\neven_numbers_using_map5()\ndef even_numbers_using_map6():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:True if x%2==0 else False,lst))\n    print(result)\neven_numbers_using_map6()\ndef even_numbers_using_map7():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:True if x%2==0 else False,lst))\n    print(result)\neven_numbers_using_map7()\ndef even_numbers_using_map8():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:x,lst))\n    print(result)\neven_numbers_using_map8()\ndef even_numbers_using_map9():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambda x:x%2==0,lst))\n    lst=[1,2,3,4,5,6,7,8,9,10]\n    result=list(filter(lambda x:x,lst))\n    print(result)\neven_numbers_using_map9()\ndef even_numbers_using_map10():\n    # lst=[1,2,3,4,5,6,7,8,9,10]\n    # return list(filter(lambd"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    with_p = list()\n    for word in words:\n        if re.match(\"^p.*\", word):\n            with_p.append(word)\n    return with_p\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    ans=[]\n    for word in words:\n        if word.startswith('p') and len(ans)<2:\n            ans.append(word)\n    return ans\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    test =[]\n    for i in words:\n        if re.match(r'^p[a-z]*',i):\n            test.append(i)\n    return test\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = []\n    for i in words:\n        if i[0] == 'p':\n            a.append(i)\n    return a\ndef start_withp2(words):\n    return [i for i in words if i[0] == 'p']\ndef start_withp3(words):\n    return [i for i in words if re.match('^p',i)]\ndef start_withp4(words):\n    return list(filter(lambda x: re.match('^p', x), words))\ndef start_withp5(words):\n    return [i for i in words if re.match('^p',i).group(0)]\ndef start_withp6(words):\n    return list(map(lambda x: re.match('^p', x), words))\ndef start_withp7(words):\n    return [i for i in words if re.match('^p', i,re.I)]"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = \"^p.*\"\n    result = re.search(pattern, words)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    regex = r\"\\b[pP]\\w+\"\n    mo = re.findall(regex, words, re.M|re.I)\n    return mo[:2]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < n:\n        for j in range(index + 1, n):\n            if a[j] > a[index] and a[j] <= k:\n                a[j], a[index] = a[index], a[j]\n                max_sum_increasing_subseq(a, n, index + 1, k)\n                a[j], a[index] = a[index], a[j]\n    else:\n        for j in range(0, k + 1):\n            if a[j] >= a[k]:\n                a[j], a[k] = a[k], a[j]\n                max_sum_increasing_subseq(a, n, 0, k - 1)\n                a[j], a[k] = a[k], a[j]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max = -1\n    \n    for i in range(index, n):\n        if a[i] >= a[index]:\n            a[i] += a[index]\n            if a[i] >= a[max]:\n                max = i\n    return max\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index > k:\n        return 0\n    if k == 0:\n        return 0\n    if index == k:\n        return a[k]\n    # return max(a[k] + max_sum_increasing_subseq(a, n, index+1, k-1), max_sum_increasing_subseq(a, n, index+1, k))\n    # return max(a[k] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1))\n    return max(a[k] + max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k-1))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or index > n:\n        return 0\n    if index == n - 1 and k > index:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # dp[i][j] is the maximum sum of increasing subsequence that ends at jth index and includes i\n    # The idea is to process every element in order, and for every element, we take the maximum of dp[i][j - 1] and dp[i - 1][j] and use them to update the dp[i][j]\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i][j - 1] + a[j]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + a[j])\n    \n    res = 0\n    for i in range(n):\n        if k > i:\n            res = max(res, dp[0][i])\n        else:\n            res = max(res, dp[0][i] - dp[i - k + 1][i])\n    return res\n    \n    \ndef main():\n    a = [1, 100, 2, 50, 3]\n    print(max_sum_increasing_subseq(a, 5, 1, 3))\n    \n    \nmain()\n'''\nTime Complexity: O(n^2)\nSpace Complexity: O(n)\n'''"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # DP[i][j] stores maximum sum of increasing subsequence of array a\n    # from index 0 to j\n    DP = [[0 for _ in range(k + 1)] for _ in range(n)]\n    # Increase all i to k-1 by 1\n    for i in range(k):\n        DP[i][1] = a[i]\n    # i=k to n-1\n    for i in range(k, n):\n        # j = 0\n        DP[i][0] = 0\n        # j = 1 to k-1\n        for j in range(1, k):\n            # if a[i] > a[j] then add a[i] to DP[i][j]\n            DP[i][j] = a[i] if a[i] > DP[i][j - 1] else DP[i][j - 1]\n            # if a[j] > a[i] then a[j] to DP[i][j]\n            DP[i][j] = a[j] + DP[i][j] if a[j] > DP[i][j - 1] else DP[i][j - 1]\n    # return the last element of DP[n-1][k-1]\n    return DP[n - 1][k - 1]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 1:\n        return a[0]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # if index < k:\n    #     return 0\n    dp = [0]*(n+1)\n    # print(dp)\n    for i in range(1,n+1):\n        dp[i] = max(dp[i-1],dp[i-1]+a[i-1])\n        if i >= k:\n            dp[i] = max(dp[i-1],dp[i-1]+a[i-1],dp[i-k]+a[i-k])\n        # if i < k:\n        #     dp[i] = dp[i-1]\n    return dp[n]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    max_sum = -1\n    for i in range(index, n):\n        curr_sum = 0\n        for j in range(i, k):\n            curr_sum += a[j]\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(k == 0):\n        return 0\n    if(index == n):\n        return 0\n    if(k == 1):\n        return max(a[index], a[k])\n    # memo[index][k] represents max sum of subseq ending with index and kth element\n    if(memo[index][k]!= -1):\n        return memo[index][k]\n    max_sum = max_sum_increasing_subseq(a, n, index+1, k)\n    if(a[index] + max_sum_increasing_subseq(a, n, k, k) > a[k] + max_sum_increasing_subseq(a, n, k, k+1)):\n        memo[index][k] = a[index] + max_sum_increasing_subseq(a, n, k, k)\n        return memo[index][k]\n    else:\n        memo[index][k] = a[k] + max_sum_increasing_subseq(a, n, index+1, k-1)\n        return memo[index][k]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex=tuplex[m-1:n]\n    return(new_tuplex)\ndef deep_tuplex(tuplex,i,j):\n    '''\n    Write a function to get a deep copy of a tuple.\n    '''\n    new_tuplex=tuplex[0:i]+tuplex[j:]\n    return(new_tuplex)\ndef tuplex_iteration(tuplex):\n    '''\n    Write a function to get a deep copy of a tuple.\n    '''\n    new_tuplex=tuple([x for x in tuplex])\n    return(new_tuplex)\ndef tuplex_concatenation(tuplex1,tuplex2):\n    '''\n    Write a function to concatenate two tuple.\n    '''\n    new_tuplex=tuplex1+tuplex2\n    return(new_tuplex)\ndef tuplex_sum(tuplex1,tuplex2):\n    '''\n    Write a function to sum two tuple.\n    '''\n    new_tuplex=tuplex1+tuplex2\n    return(sum(new_tuplex))\ndef tuplex_multiply(tuplex1,tuplex2):\n    '''\n    Write a function to multiply two tuple.\n    '''\n    new_tuplex=tuplex1*tuplex2\n    return(new_tuplex)\ndef tuplex_division(tuplex1,tuplex2):\n    '''\n    Write a function to divide two tuple.\n    '''\n    new_tuplex=tuplex1/tuplex2\n    return(new_tuplex)\ndef tuplex_mod(tuplex1,tuplex2):\n    '''\n    Write a function to get modulo of two tuple.\n    '''\n    new_tuplex=tuplex1%tuplex2\n    return(new_tuplex)\ndef tuplex_iteration(tuplex1):\n    '''\n    Write a function to get an iterable tuple.\n    '''\n    new_tuplex=tuple([x for x in tuplex1])\n    return(new_tuplex)\ndef tuplex_range(tuplex1,tuplex2):\n    '''\n    Write a function to get a range tuple.\n    '''\n    new_tuplex=tuplex1[tuplex2[0]:tuplex2[1]]\n    return(new_tuplex)\ndef tuplex_element_assignment(tuplex1,tuplex2,tuplex3):\n    '''\n    Write a function to element wise assignment.\n    '''\n    new_tuplex=list(tuplex1)\n    new_tuplex[tuplex2]=tuplex3\n    new_tuplex=tuple(new_tuplex)\n    return(new_tuplex)\ndef tuplex_delete_one_element(tuplex,index):\n    '''\n    Write a function to delete an element in tuple.\n    '''\n    new_tuplex=tuple([x for x in tuplex if x!=tuplex[index]])\n    return(new_tuplex)\ndef tuplex_delete_range_element(tuplex,index1,index2):\n    '''\n    Write a function to delete an range of element in tuple.\n    '''\n    new_tuplex=tuple([x for x in tuplex if x not in tuplex[index1:index2]])\n    return(new_tuplex)\ndef tuplex_search(tuplex,value):\n    '''\n    Write a function to search for a value in tuple.\n    '''\n    if value in tuplex:\n        return(True)\n    else:\n        return(False)\ndef tuplex_reverse(tuplex):\n    '''\n    Write a function to reverse a tuple.\n    '''\n    new_tuplex=tuplex[::-1]\n    return(new_tuplex)\ndef tuplex_sort(tuplex):\n    '''\n    Write a function to sort a tuple.\n    '''\n    new_tuplex=tuple(sorted(tuplex))\n    return(new_tuplex)\ndef tuplex_sorted(tuplex):\n    '''\n    Write a function to sort a tuple in a descending order.\n    '''\n    new_tuplex=tuple(sorted(tuplex,reverse=True))\n    return(new_tuplex)\ndef tuplex_sorted_reverse(tuplex):\n    '''\n    Write a function to sort a tuple in a descending order and reverse the order.\n    '''\n    new_tuplex=tuple(sorted(tuplex,reverse=True))\n    return(new_tuplex)\ndef tuplex_max(tuplex):\n    '''\n    Write a function to get the max value of a tuple.\n    '''\n    new_tuplex=max(tuplex)\n    return(new_tuplex)\ndef tuplex_min(tuplex):\n    '''\n    Write a function to get the minimum value of a tuple.\n    '''\n    new_tuplex=min(tuplex)\n    return(new_tuplex)\ndef tuplex_slice(tuplex):\n    '''\n    Write a function to get a deep copy of a slice.\n    '''\n    new_tuplex=tuple(tuplex[0:3])\n    return(new_tuplex)\ndef tuplex_list(tuplex):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    new_list=list(tuplex)\n    return(new_list)\ndef tuplex_dict(tuplex):\n    '''\n    Write a function to get a dictionary of a tuple.\n    '''\n    new_dict={}\n    for i in range(len(tuplex)):\n        new_dict[i]=tuplex[i]\n    return(new_dict)\ndef tuplex_tuple(tuplex):\n    '''\n    Write a function to get a tuple of a tuple.\n    '''\n    new_tuplex=tuple(tuplex)\n    return(new_tuplex)\ndef tuplex_dictionary(tuplex):\n    '''\n    Write a function to convert a tuple of tuples to a dictionary.\n    '''\n    new_dict={}\n    for i in range(len(tuplex)):\n        new_dict[i]=tuplex[i]\n    return(new_dict)\ndef tuplex_count(tuplex,value):\n    '''\n    Write a function to count the number of times a value is in tuple.\n    '''\n    new_dict={}\n    for i in range(len(tuplex)):\n        if tuplex[i] in new_dict:\n            new_dict[tuplex[i]]=new_dict[tuplex[i]]+1\n        else:\n            new_dict[tuplex[i]]=1\n    if value in new_dict:\n        return(new_dict[value])\n    else:\n        return(0)\ndef tuplex_update(tuplex,value,index):\n    '''\n    Write a function to update a tuple in a tuple.\n    '''\n    new_tuplex=list(tuplex)\n    new_tuplex[index]=value\n    new_tuplex=tuple(new_tuplex)\n    return(new_tuplex)\ndef tuplex_in_operator(tuplex1,tuplex2):\n    '''\n    Write a function to check if a tuple exists in another tuple.\n    '''\n    if tuplex1 in tuplex2:\n        return(True)\n    else:\n        return(False)\ndef tuplex_len(tuplex):\n    '''\n    Write a function to get the length of tuple.\n    '''\n    new_tuplex=len(tu"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m):\n        result.append(tuplex[i*n:(i+1)*n])\n    return result\ndef index_colon_tuplex(tuplex,colon):\n    '''\n    Write a function to get an index of a colon of a tuple.\n    '''\n    result = []\n    for i in range(len(colon)):\n        result.append(tuplex.index(colon[i]))\n    return result\ndef add_tuple(tuplex1,tuplex2):\n    '''\n    Write a function to get the sum of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]+tuplex2[i])\n    return tuple(result)\ndef div_tuple(tuplex1,tuplex2):\n    '''\n    Write a function to get the division of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]/tuplex2[i])\n    return tuple(result)\ndef mul_tuple(tuplex1,tuplex2):\n    '''\n    Write a function to get the multiplication of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]*tuplex2[i])\n    return tuple(result)\ndef sub_tuple(tuplex1,tuplex2):\n    '''\n    Write a function to get the subtraction of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]-tuplex2[i])\n    return tuple(result)\ndef sum_tuple(tuplex1,tuplex2):\n    '''\n    Write a function to get the sum of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]+tuplex2[i])\n    return result\ndef sub_tuplex_point(tuplex1,tuplex2):\n    '''\n    Write a function to get the subtraction of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]-tuplex2[i])\n    return tuple(result)\ndef div_tuplex_point(tuplex1,tuplex2):\n    '''\n    Write a function to get the division of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]/tuplex2[i])\n    return tuple(result)\ndef mul_tuplex_point(tuplex1,tuplex2):\n    '''\n    Write a function to get the multiplication of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]*tuplex2[i])\n    return tuple(result)\ndef idiv_tuplex_point(tuplex1,tuplex2):\n    '''\n    Write a function to get the division of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]//tuplex2[i])\n    return tuple(result)\ndef divide_tuplex(tuplex1,tuplex2):\n    '''\n    Write a function to get the division of two tuples.\n    '''\n    result = []\n    for i in range(len(tuplex1)):\n        result.append(tuplex1[i]/tuplex2[i])\n    return result\ndef reduce_tuplex(tuplex):\n    '''\n    Write a function to get the tuple whose values are reduced.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        result.append(tuplex[i] % tuplex[i])\n    return tuple(result)\ndef abs_tuplex(tuplex):\n    '''\n    Write a function to get the tuple of absolute values.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        result.append(abs(tuplex[i]))\n    return tuple(result)\ndef trans_tuplex(tuplex):\n    '''\n    Write a function to get the tuple of the transposed form.\n    '''\n    result = []\n    for i in range(len(tuplex[0])):\n        result.append(tuple([tuplex[j][i] for j in range(len(tuplex))]))\n    return tuple(result)\ndef sum_list(tuplex):\n    '''\n    Write a function to sum the tuples of the list.\n    '''\n    return tuple(sum(tuplex,()))\ndef sum_tuplex(tuplex):\n    '''\n    Write a function to get the sum of a tuple.\n    '''\n    result = 0\n    for i in range(len(tuplex)):\n        result += tuplex[i]\n    return result\ndef get_index_tuplex(tuplex,value):\n    '''\n    Write a function to get the index of a value in a tuple.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        if tuplex[i] == value:\n            result.append(i)\n    return result\ndef get_index_tuplex_strict(tuplex,value):\n    '''\n    Write a function to get the index of a value in a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == value:\n            return i\ndef get_value_tuplex(tuplex,index):\n    '''\n    Write a function to get the value of the tuple at the index.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        result.append(tuplex[i][index])\n    return result\ndef replace_tuple_element(tuplex,index,value):\n    '''\n    Write a function to replace the value in the tuple at the index.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        result.append(tuplex[i][:index] + (value,) + tuplex[i][index+1:])\n    return tuple(result)\ndef replace_list_element(listx,index,value):\n    '''\n    Write a function to replace the value in the list at the index.\n    '''\n    result = []\n    for i in range(len(listx)):\n        result.append(listx[i][:index] + (value,) + listx[i][index+1:])\n    return result\ndef delete_tuple_element(tuplex,index):\n    '''\n    Write a function to delete the value in the tuple at the index.\n    '''\n    result = []\n    for i in range(len(tuplex)):\n        result.append(tuplex[i][:index] + tuplex[i][index+1:])\n    return tuple(result)\ndef delete_list_element(listx,index):\n    '''\n    Write a function to delete the value in the list at the index.\n    '''\n    result = []\n    for i in range(len(listx)):\n        result.append(listx[i][:index] + listx[i][index+1:])\n    return result\ndef get_tuple_element(tuplex,index):\n    '''\n    Write a function to get the value of the tuple at the index.\n    '''\n    return tuplex[index]\ndef get_list_element"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = tuple(tuplex[m:n+1])\n    return colon\ndef colon_tuplexs(tuplexs,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = list(tuplexs[m:n+1])\n    return colon\ndef l_insert_tuplexs(tuplexs,x,y):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.insert(x,y)\n    return tuplexs\ndef r_insert_tuplexs(tuplexs,x,y):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.append(y)\n    return tuplexs\ndef l_pop_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.pop(x)\n    return tuplexs\ndef r_pop_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.pop(x)\n    return tuplexs\ndef l_del_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.remove(x)\n    return tuplexs\ndef r_del_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.remove(x)\n    return tuplexs\ndef l_count_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.count(x)\ndef r_count_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.count(x)\ndef l_reverse_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.reverse()\n    return tuplexs\ndef r_reverse_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.reverse()\n    return tuplexs\ndef l_clear_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.clear()\n    return tuplexs\ndef r_clear_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.clear()\n    return tuplexs\ndef l_copy_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs_copy = tuplexs.copy()\n    return tuplexs_copy\ndef r_copy_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs_copy = tuplexs.copy()\n    return tuplexs_copy\ndef l_index_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.index(x)\ndef r_index_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.index(x)\ndef l_sort_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.sort()\n    return tuplexs\ndef r_sort_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.sort()\n    return tuplexs\ndef l_reverse_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.sort()\n    return tuplexs\ndef r_reverse_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplexs.sort()\n    return tuplexs\ndef l_pop_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.pop()\ndef r_pop_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.pop()\ndef l_insert_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.insert(x)\ndef r_insert_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.insert(x)\ndef l_count_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.count(x)\ndef r_count_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.count(x)\ndef l_index_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.index(x)\ndef r_index_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.index(x)\ndef l_sort_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.sort()\ndef r_sort_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.sort()\ndef l_reverse_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.sort()\ndef r_reverse_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.sort()\ndef l_pop_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.pop()\ndef r_pop_tuplexs(tuplexs):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.pop()\ndef l_insert_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.insert(x)\ndef r_insert_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplexs.insert(x)\ndef l_count_tuplexs(tuplexs,x):\n    '''\n    Write a function to get a colon of a tuple.\n    '''"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 1:\n        print(tuplex[0])\n    elif m == 2:\n        print(tuplex[0],tuplex[1])\n    else:\n        print(tuplex[0],tuplex[1],end=':')\n        colon_tuplex(tuplex[2:],m-1,n)\ndef size_tuple(tuplex):\n    '''\n    Write a function to return the size of the tuple\n    '''\n    return len(tuplex)\ndef is_empty_tuple(tuplex):\n    '''\n    Write a function to return if the tuple is empty\n    '''\n    if len(tuplex) == 0:\n        return True\n    else:\n        return False\ndef concatenate_tuple(tuplex1,tuplex2):\n    '''\n    Write a function to concatenate two tuples\n    '''\n    return tuplex1 + tuplex2\ndef split_tuple(tuplex):\n    '''\n    Write a function to split a tuple into three parts\n    '''\n    return tuplex[:2],tuplex[2:],len(tuplex)\ndef index_of_item(tuplex,item):\n    '''\n    Write a function to get the index of an item in a tuple\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == item:\n            return i\ndef count_item(tuplex,item):\n    '''\n    Write a function to count how many items in the tuple\n    '''\n    count = 0\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == item:\n            count += 1\n    return count\ndef count_item_recursion(tuplex,item):\n    '''\n    Write a function to count how many items in the tuple using recursion\n    '''\n    if tuplex == ():\n        return 0\n    else:\n        if tuplex[0] == item:\n            return 1 + count_item_recursion(tuplex[1:],item)\n        else:\n            return count_item_recursion(tuplex[1:],item)\ndef slice_tuple(tuplex,start_index,end_index):\n    '''\n    Write a function to slice a tuple\n    '''\n    if len(tuplex) == 0:\n        return ()\n    elif start_index >= end_index:\n        return ()\n    else:\n        return tuplex[start_index:end_index]\ndef remove_item(tuplex,item):\n    '''\n    Write a function to remove an item in a tuple\n    '''\n    if len(tuplex) == 0:\n        return ()\n    elif tuplex[0] == item:\n        return tuplex[1:]\n    else:\n        return tuplex[0],remove_item(tuplex[1:],item)\ndef remove_item_recursion(tuplex,item):\n    '''\n    Write a function to remove an item in a tuple using recursion\n    '''\n    if tuplex == ():\n        return ()\n    else:\n        if tuplex[0] == item:\n            return remove_item_recursion(tuplex[1:],item)\n        else:\n            return tuplex[0],remove_item_recursion(tuplex[1:],item)\ndef remove_item_index(tuplex,index):\n    '''\n    Write a function to remove an item in a tuple\n    '''\n    if index == 0:\n        return tuplex[1:]\n    elif len(tuplex) == 1:\n        return ()\n    else:\n        return tuplex[0],remove_item_index(tuplex[1:],index-1)\ndef remove_item_index_recursion(tuplex,index):\n    '''\n    Write a function to remove an item in a tuple using recursion\n    '''\n    if index == 0:\n        return tuplex[1:]\n    elif len(tuplex) == 1:\n        return ()\n    else:\n        return tuplex[0],remove_item_index_recursion(tuplex[1:],index-1)\ndef find_item(tuplex,item):\n    '''\n    Write a function to find an item in a tuple\n    '''\n    if len(tuplex) == 0:\n        return False\n    elif tuplex[0] == item:\n        return True\n    else:\n        return find_item(tuplex[1:],item)\ndef find_item_recursion(tuplex,item):\n    '''\n    Write a function to find an item in a tuple using recursion\n    '''\n    if tuplex == ():\n        return False\n    else:\n        if tuplex[0] == item:\n            return True\n        else:\n            return find_item_recursion(tuplex[1:],item)\ndef find_index(tuplex,item):\n    '''\n    Write a function to find the index of an item in a tuple\n    '''\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == item:\n            return i\ndef find_index_recursion(tuplex,item):\n    '''\n    Write a function to find the index of an item in a tuple using recursion\n    '''\n    if tuplex == ():\n        return False\n    else:\n        if tuplex[0] == item:\n            return True\n        else:\n            return find_index_recursion(tuplex[1:],item)\ndef max_item(tuplex):\n    '''\n    Write a function to get the max item in a tuple\n    '''\n    if len(tuplex) == 1:\n        return tuplex[0]\n    elif len(tuplex) == 0:\n        return None\n    else:\n        if tuplex[0] > max_item(tuplex[1:]):\n            return tuplex[0]\n        else:\n            return max_item(tuplex[1:])\ndef min_item(tuplex):\n    '''\n    Write a function to get the min item in a tuple\n    '''\n    if len(tuplex) == 1:\n        return tuplex[0]\n    elif len(tuplex) == 0:\n        return None\n    else:\n        if tuplex[0] < min_item(tuplex[1:]):\n            return tuplex[0]\n        else:\n            return min_item(tuplex[1:])\ndef max_recursion(tuplex):\n    '''\n    Write a function to get the max item in a tuple using recursion\n    '''\n    if len(tuplex) == 1:\n        return tuplex[0]\n    elif len(tuplex) == 0:\n        return None\n    else:\n        if tuplex[0] > max_recursion(tuplex[1:]):\n            return tuplex[0]\n        else:\n            return max_recursion(tuplex[1:])\ndef min_recursion(tuplex):\n    '''\n    Write a function to get the min item in a tuple using recursion\n    '''\n    if len(tuplex) == 1:\n        return tuplex[0]\n    elif len(tuplex) == 0:\n        return None\n    else:\n        if tuplex[0] < min_recursion(tuplex[1:]):\n            return tuplex[0]\n        else:\n            return min_recursion(tuplex[1:])\ndef tuple_not_equal(tuplex,tuplex2):\n    '''\n    Write a function to compare two tuples\n    '''\n    if len(tuplex)!= len(tuplex2):\n        return True\n    else:\n        for i in range(0,len(tuplex)):\n            if tuplex[i]!= tuplex2[i]:\n                return True\n    return False\ndef tuple_greater_equal(tuplex,tuplex2):\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = []\n    for i in range(len(tuplex)):\n        new_tuplex.append(tuplex[i])\n    for j in range(m,n):\n        new_tuplex.append(tuplex[j])\n    return tuple(new_tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list=[]\n    for i in range(m):\n        list.append([])\n    for j in range(n):\n        for i in range(m):\n            list[i].append(tuplex[i][j])\n    return list\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m:m+n]\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (n,) + tuplex[m+1:]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<m:\n        return []\n    else:\n        new_tuplex=tuplex[:m]+tuplex[-n:]\n        return new_tuplex\ndef list_index_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a list of index of a tuple.\n    '''\n    if len(tuplex)<m:\n        return []\n    else:\n        index_list=[i for i in range(len(tuplex)) if i>=m and i<=m+n-1]\n        return index_list\ndef list_value_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a list of value of a tuple.\n    '''\n    if len(tuplex)<m:\n        return []\n    else:\n        list_value=[tuplex[i] for i in range(len(tuplex)) if i>=m and i<=m+n-1]\n        return list_value\ndef list_tuplex_slice(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of slice a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i])\n    return list_tuplex\ndef list_tuplex_reverse(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of reverse a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i][::-1])\n    return list_tuplex\ndef list_tuplex_copy(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of copy a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i].copy())\n    return list_tuplex\ndef list_tuplex_deepcopy(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of deepcopy a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(deepcopy(tuplex[i]))\n    return list_tuplex\ndef list_tuplex_add(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of add a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i]+tuplex[i+n])\n    return list_tuplex\ndef list_tuplex_multiply(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of multiply a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i]*tuplex[i+n])\n    return list_tuplex\ndef list_tuplex_tuplex_product(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of product of two tuples.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i]*tuplex[i+n])\n    return list_tuplex\ndef list_tuplex_tuplex_sum(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of sum of two tuples.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(tuplex[i]+tuplex[i+n])\n    return list_tuplex\ndef list_tuplex_tuplex_dictionary(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of dictionary a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append({tuplex[i][0]:tuplex[i][1]})\n    return list_tuplex\ndef list_tuplex_list_index_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of list of index of a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(list_index_tuplex(tuplex[i],0,n))\n    return list_tuplex\ndef list_tuplex_tuplex_colon(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of colon of a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(colon_tuplex(tuplex[i],0,n))\n    return list_tuplex\ndef list_tuplex_list_value_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of list of value of a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(list_value_tuplex(tuplex[i],0,n))\n    return list_tuplex\ndef list_tuplex_list_tuplex_slice(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of list of slice a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(list_tuplex_slice(tuplex[i],0,n))\n    return list_tuplex\ndef list_tuplex_tuplex_reverse(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of list of reverse a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tuplex.append(list_tuplex_reverse(tuplex[i],0,n))\n    return list_tuplex\ndef list_tuplex_tuplex_copy(tuplex,m,n):\n    '''\n    Write a function to get a list of tuple of list of copy a tuple.\n    '''\n    list_tuplex=[]\n    for i in range(len(tuplex)):\n        if i>=m and i<=m+n-1:\n            list_tu"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[m],tuplex[n])\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return -1\n    max_product = -1\n    for i in range(0, N):\n        max_product = max(max_product, nums1[i] * nums2[i])\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n    else:\n        result = []\n        # for each num in nums1, find the num in nums2 with the largest factor, add the product of both to result\n        for num in nums1:\n            nums2_factors = []\n            for num2 in nums2:\n                nums2_factors.append(num2 * num)\n            result.append(max(nums2_factors))\n        return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # TODO: Fill in the missing code\n    # def large_product(nums1, nums2, N):\n    #     num1, num2 = [], []\n    #     for num in nums1:\n    #         num1.append(num) if num > nums2[0] else num1.append(nums2[0])\n    #     for num in nums2:\n    #         num2.append(num) if num > nums1[0] else num2.append(nums1[0])\n    #     return max([num1[i]*num2[j] for i in range(N) for j in range(N)])\n    \n    # return large_product(nums1, nums2, N)\n    # def large_product(nums1, nums2, N):\n    #     if len(nums1) > len(nums2):\n    #         nums1, nums2 = nums2, nums1\n    #     if len(nums2) == 1 or len(nums1) == 1:\n    #         return nums1[0] * nums2[0]\n    #     max_product = float(\"-inf\")\n    #     i, j = 0, 0\n    #     while i < len(nums1) and j < len(nums2):\n    #         max_product = max(max_product, nums1[i]*nums2[j])\n    #         if nums1[i] > nums2[j]:\n    #             j += 1\n    #         else:\n    #             i += 1\n    #     return max_product\n    # return large_product(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    from functools import reduce\n    from operator import mul\n    result = []\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    for i in range(N):\n        result.append(reduce(mul, nums1[i:i+2] + nums2[i:i+2]))\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                product = nums1[i] * nums2[j]\n                if product > max_product:\n                    max_product = product\n    return max_product\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return 0\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    import heapq\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    max_products = []\n    for i in range(N):\n        max_products.append(nums1[-1]*nums2[-1])\n        nums1.pop()\n        nums2.pop()\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pairs = list(itertools.product(nums1, nums2))\n    #print(pairs)\n    def multiply(pair):\n        return pair[0]*pair[1]\n    mul_pairs = list(map(multiply, pairs))\n    #print(mul_pairs)\n    max_pairs = heapq.nlargest(N, mul_pairs)\n    return max_pairs\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #sort the two lists and slice it to product_size\n    def sort_slice(nums):\n        nums.sort()\n        return nums[:N]\n    \n    def select_slices(nums1, nums2):\n        #slice the lists in the same way and concat them\n        return sort_slice(nums1) + sort_slice(nums2)\n        \n    \n    return max(select_slices(nums1, nums2))\n    \nif __name__ == \"__main__\":\n    nums1 = [0, 1, 3, 2]\n    nums2 = [1, 2, 3]\n    N = 4\n    \n    print(large_product(nums1, nums2, N))\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = list()\n    for i in range(N):\n        prod = nums1[i] * nums2[i]\n        products.append(prod)\n    products.sort(reverse = True)\n    return products[0:N]\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"{} is greater than {}\".format(a,b))\n    else:\n        print(\"{} is greater than {}\".format(b,a))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\nmaximum(3,8)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a <= b:\n        return a\n    else:\n        return b\ndef abs(x):\n    '''\n    Write a python function to find the absolute value of a number.\n    '''\n    if x >= 0:\n        return x\n    else:\n        return -x\ndef square(x):\n    '''\n    Write a python function to find the square of a number.\n    '''\n    return x * x\ndef power(x,n):\n    '''\n    Write a python function to find nth power of a number.\n    '''\n    return x * x * x * x * x\ndef factorial(x):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef odd(x):\n    '''\n    Write a python function to check if a number is odd or not.\n    '''\n    if x % 2 == 1:\n        return True\n    else:\n        return False\ndef even(x):\n    '''\n    Write a python function to check if a number is even or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\ndef divisible(a,b):\n    '''\n    Write a python function to check if a number is divisible by another number.\n    '''\n    if a % b == 0:\n        return True\n    else:\n        return False\ndef divisibleby(a,b):\n    '''\n    Write a python function to check if a number is divisible by another number.\n    '''\n    if a % b == 0:\n        return b\n    else:\n        return a\ndef prime(x):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    for i in range(2,x):\n        if x % i == 0:\n            return False\n    return True\ndef primefactors(x):\n    '''\n    Write a python function to find all the prime factors of a number.\n    '''\n    for i in range(2,x):\n        if x % i == 0:\n            return i\n    return x\ndef sine(x):\n    '''\n    Write a python function to find the sine of an angle.\n    '''\n    return x / 180 * math.pi\ndef cosine(x):\n    '''\n    Write a python function to find the cosine of an angle.\n    '''\n    return x / 180 * math.pi\ndef tangent(x):\n    '''\n    Write a python function to find the tangent of an angle.\n    '''\n    return x / 180 * math.pi\ndef arctangent(x):\n    '''\n    Write a python function to find the arctangent of an angle.\n    '''\n    return x / 180 * math.pi\ndef arccosine(x):\n    '''\n    Write a python function to find the arccosine of an angle.\n    '''\n    return x / 180 * math.pi\ndef arctangent(x):\n    '''\n    Write a python function to find the arctangent of an angle.\n    '''\n    return x / 180 * math.pi\ndef arccosine(x):\n    '''\n    Write a python function to find the arccosine of an angle.\n    '''\n    return x / 180 * math.pi\ndef cube(x):\n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return x * x * x\ndef cuberoot(x):\n    '''\n    Write a python function to find the cube root of a number.\n    '''\n    return x ** (1 / 3)\ndef log(x, base):\n    '''\n    Write a python function to find the log of a number to a base.\n    '''\n    return math.log(x, base)\ndef log10(x):\n    '''\n    Write a python function to find the log base 10 of a number.\n    '''\n    return math.log10(x)\ndef log2(x):\n    '''\n    Write a python function to find the log base 2 of a number.\n    '''\n    return math.log2(x)\ndef power(x,y):\n    '''\n    Write a python function to find the power of a number to a base.\n    '''\n    return x ** y\ndef quadratic(a,b,c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\ndef cube(x):\n    '''\n    Write a python function to find the cube of a number.\n    '''\n    return x * x * x\ndef cuberoot(x):\n    '''\n    Write a python function to find the cube root of a number.\n    '''\n    return x ** (1 / 3)\ndef quadratic(a,b,c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\ndef quadratic(a,b,c):\n    '''\n    Write a python function to solve a quadratic equation.\n    '''\n    return (-b + math.sqrt(b ** 2 - 4 * a * c)) / (2 * a)\ndef summation(a,b,c,d):\n    '''\n    Write a python function to calculate the summation of a series.\n    '''\n    return ((a / 1 + b) + c) * d\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python function to calculate the factorial of a number.\n    '''\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\ndef factorial(x):\n    '''\n    Write a python functio"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a)\n    else:\n        print(b)\nmaximum(2,6)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a > b else b \n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\ndef greater_than(a,b):   \n    '''\n    Write a python function to find the number greater than a given number.\n    '''\n    return a if a>b else b\ndef less_than(a,b):   \n    '''\n    Write a python function to find the number lesser than a given number.\n    '''\n    return a if a<b else b\ndef greater_than_equal_to(a,b):   \n    '''\n    Write a python function to find the number greater than or equal to a given number.\n    '''\n    return a if a>=b else b\ndef less_than_equal_to(a,b):   \n    '''\n    Write a python function to find the number lesser than or equal to a given number.\n    '''\n    return a if a<=b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a<b):\n        return a\n    else:\n        return b    \ndef add(a,b):   \n    '''\n    Write a python function to add two numbers.\n    '''\n    return a+b    \ndef subtract(a,b):   \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    return a-b    \ndef multiply(a,b):   \n    '''\n    Write a python function to multiply two numbers.\n    '''\n    return a*b    \ndef divide(a,b):   \n    '''\n    Write a python function to divide two numbers.\n    '''\n    if(b==0):\n        return \"Division by zero error!\"\n    return a/b    \ndef modulus(a,b):   \n    '''\n    Write a python function to find the modulus of two numbers.\n    '''\n    if(b==0):\n        return \"Division by zero error!\"\n    return a%b    \ndef exponent(a,b):   \n    '''\n    Write a python function to find the exponent of two numbers.\n    '''\n    return a**b    \n    \ndef main():\n    a=int(input(\"Enter the first number:\"))\n    b=int(input(\"Enter the second number:\"))\n    add_function=add(a,b)\n    subtract_function=subtract(a,b)\n    multiply_function=multiply(a,b)\n    divide_function=divide(a,b)\n    modulus_function=modulus(a,b)\n    exponent_function=exponent(a,b)\n    maximum_function=maximum(a,b)\n    minimum_function=minimum(a,b)\n    print(\"The addition of two numbers is:\",add_function)\n    print(\"The subtraction of two numbers is:\",subtract_function)\n    print(\"The multiplication of two numbers is:\",multiply_function)\n    print(\"The division of two numbers is:\",divide_function)\n    print(\"The modulus of two numbers is:\",modulus_function)\n    print(\"The exponent of two numbers is:\",exponent_function)\n    print(\"The maximum of two numbers is:\",maximum_function)\n    print(\"The minimum of two numbers is:\",minimum_function)\n    \nmain()"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # This is the shorter method for making tuples.\n    # Converting a string to a tuple is like converting the string to a list and then using the list's.tuple() function.\n    tup = tuple(str1)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = list(str1)\n    t = tuple(lst)\n    return t\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    b = (n & -n).bit_length() - 1\n    return (1 << b)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if (n == 0):\n        return 0\n    mask = 1\n    while mask <= n:\n        mask = mask << 1\n    return mask - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n ^= (n - 1) \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n % 2 == 0:\n        return n + 1\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1 \n    while (1):\n        if ((n & i) == 0):\n            return i\n        i = i << 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(''.join(['1' if n & (1<<i) else '0' for i in range(0,n.bit_length())]))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(bin(n))\n    print(bin(n & (n-1)))\n    print(bin(n | -(n & (n-1))))\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n & ~(n-1)\n    return x \n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n << 1\n    return x\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    x = n\n    while x & (x-1)!= 0:\n        x &= x-1\n    return x\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # r is the radius and h is the height\n    # pi = math.pi\n    # volume = (1/3) * pi * (r**2) * (h)\n    # return volume\n    return (1/3)*math.pi*(r**2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    \n    return ((math.pi * r * r * h) / 3)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # V=pi*r^2*h/3\n    v=math.pi*(r**2)*h/3\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return ((1/3)*math.pi*r**2*h)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14\n    r=float(r)\n    h=float(h)\n    volume = pi * r ** 2 * h / 3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #find the volume of a cone\n    #radius r and height h\n    return (math.pi*r*r*h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * (h/3)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r*r*h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 0\n    i = 0\n    while True:\n        if 2**i <= n:\n            highest = 2**i\n            i += 1\n        else:\n            break\n    return highest\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(1 << i <= n):\n        i += 1\n    return i-1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # All values of 2 to the power of 51 are less than or equal to 2**51.\n    # Return the highest power of 2 that is less than or equal to n.\n    return math.floor(math.log(n,2))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return int(n ** 0.5)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1;\n    while(power <= n): \n        power *= 2\n    return power/2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # res = 0\n    # if n == 0:\n    #     return 0\n    # if n < 0:\n    #     return None\n    # for i in range(0, n+1):\n    #     if (2 ** i <= n):\n    #         res = 2 ** i\n    # return res\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return highest_Power_of_2(n/2) + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if (n < 0): \n        return 0\n    else: \n        return 1 << (int(math.log(n, 2)) + 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # function to find the highest power of 2 that is less than or equal to n\n    if n < 0: \n        return -1\n    i = 1\n    while i < n: \n        i *= 2\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    i = 0\n    while 2**i <= n:\n        i += 1\n    highest_power_of_2 = 2**(i-1)\n    return highest_power_of_2\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Base case \n    if (n == 0): \n        return 0\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    # Fill this in.\n    \n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    numbers = [2, 1]\n    for i in range(n - 2):\n        new = numbers[i] + numbers[i - 1]\n        numbers.append(new)\n    return numbers[n - 1]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return(find_lucas(n-1) + find_lucas(n-2))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = [2,1]\n    n_lucas = 0\n    for x in range(0,n):\n        n_lucas = lucas_list[0]+lucas_list[1]\n        lucas_list.append(n_lucas)\n    return n_lucas\n    \ndef find_sum_series(n,n0 = 0,n1 = 1):\n    '''\n    Write a function to find then'th sum series number.\n    '''\n    sum_series_list = [n0,n1]\n    n_sum_series = 0\n    for x in range(0,n):\n        n_sum_series = sum_series_list[0]+sum_series_list[1]\n        sum_series_list.append(n_sum_series)\n    return n_sum_series\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # then'th Lucas number is defined by:\n    #   L_n = 4n^2 - 4n + 2\n    \n    # first define a function for generating the lucas numbers\n    # in the first place we will take the lucas number for n = 0\n    # and n = 1 to get the base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    # we will then define a function for generating the lucas numbers\n    # recursively\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 2) + find_lucas(n - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return n * lucas_seq(n - 1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # Base cases \n    if (n == 0):\n        return 2\n    elif (n == 1):\n        return 1\n    # Recursive cases\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    print('Input list:')\n    print(list_)\n    print('Input string:')\n    print(string)\n    return [string.format(el) for el in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = []\n    for i in range(3):\n        list_ = list_ + [string]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(item) for item in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = string.join(list_)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_str = [str(x) for x in list_]\n    list_str = ''.join(list_str)\n    return string.format(list_str)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for string in list_:\n        new_list.append(string.format(string))\n    return new_list\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_ = [string.format(i) for i in list_]\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    length = len(string)\n    for i in range(0, len(list_)):\n        list_[i] = list_[i].rjust(length)\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # TODO : complete the code\n    # Need to get each item from each list. \n    # Convert those to a dictionary.\n    # Then convert dictionary to list.\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    output = {}\n    for i, j, k in zip(l1, l2, l3):\n        output[i] = {j: k}\n    return output\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_1 = {}\n    dict_2 = {}\n    dict_3 = {}\n    for i in range(len(l1)):\n        dict_1.update({l1[i]:l2[i]})\n    for i in range(len(l1)):\n        dict_2.update({l1[i]:l3[i]})\n    dict_3.update(dict_1, dict_2)\n    return dict_3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in l1:\n        d[i] = {}\n        for j in l2:\n            d[i][j] = l3[l2.index(j)]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return dict(zip(l1, zip(l2, l3)))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # l1 = [1, 2, 3, 4]\n    # l2 = [5, 6, 7, 8]\n    # l3 = [9, 10, 11, 12]\n    # output = {1: {5: {9: {1: 5, 2: 6, 3: 7, 4: 8}}, 10: {1: 9, 2: 10, 3: 11, 4: 12}}, 2: {5: {9: {1: 5, 2: 6, 3: 7, 4: 8}}, 10: {1: 9, 2: 10, 3: 11, 4: 12}}, 3: {5: {9: {1: 5, 2: 6, 3: 7, 4: 8}}, 10: {1: 9, 2: 10, 3: 11, 4: 12}}, 4: {5: {9: {1: 5, 2: 6, 3: 7, 4: 8}}, 10: {1: 9, 2: 10, 3: 11, 4: 12}}}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = {}\n    dict2 = {}\n    dict3 = {}\n    for i in range(len(l1)):\n        dict1[l1[i]] = l2[i]\n    for j in range(len(l3)):\n        dict2[l3[j]] = l2[j]\n    dict3[l1[0]] = dict1\n    dict3[l1[1]] = dict2\n    return dict3\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    final_dict = []\n    for i in range(len(l1)):\n        temp_dict = {l1[i]: {l2[i]: l3[i]}}\n        final_dict.append(temp_dict)\n    return final_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        d[l1[i]] = {}\n        for j in range(len(l2[i])):\n            d[l1[i]][l2[i][j]] = l3[i][j]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = {}\n    for i in range(len(l1)):\n        res[l1[i]] = {l2[i]: l3[i]}\n    return res\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    x = 0\n    for i in range(1, n):\n        x = max((x + max(i/2, i/3, i/4, i/5)), i)\n    return x\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    #base case\n    if n == 1:\n        return 1\n    \n    #find max(f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    #recursive call\n    else:\n        \n        #first try\n        f_n_2 = get_max_sum(n/2)\n        f_n_3 = get_max_sum(n/3)\n        f_n_4 = get_max_sum(n/4)\n        f_n_5 = get_max_sum(n/5)\n        \n        #return max(f(n/2) + f(n/3) + f(n/4) + f(n/5), n)\n        return max((f_n_2 + f_n_3 + f_n_4 + f_n_5), n)\n        \n        \n    \n    \n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1, n):\n        current_sum = (get_max_sum(i / 2) + get_max_sum(i / 3) + get_max_sum(i / 4) + get_max_sum(i / 5))\n        if current_sum > max_sum:\n            max_sum = current_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max = n\n    while n > 1:\n        #find all factors of n and keep track of largest\n        if n % 2 == 0:\n            if n/2 > max:\n                max = n/2\n        if n % 3 == 0:\n            if n/3 > max:\n                max = n/3\n        if n % 4 == 0:\n            if n/4 > max:\n                max = n/4\n        if n % 5 == 0:\n            if n/5 > max:\n                max = n/5\n        n = n - 1\n    return max\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # base case: if n is less than 2, it cannot be represented as a product of two numbers so return -1.\n    if n < 2:\n        return -1\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_2 (n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return max((get_max_sum_2(n//2) + get_max_sum_2(n//3) + get_max_sum_2(n//4) + get_max_sum_2(n//5)), n)\n    return get_max_sum_2(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if n < 2:\n        return n\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    max_sum = [0,2,4,6,8]\n    for i in range(9, n+1):\n        max_sum.append(max(max_sum[-4] + i, max_sum[-3] + i, max_sum[-2] + i, max_sum[-1] + i))\n    return max_sum[-1]\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    # The return value is either the maximum sum possible or the maximum sum possible at the given number.\n    max_sum = max( (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 2 or n == 3:\n        return n\n    elif n == 4:\n        return 5\n    elif n == 5:\n        return 6\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 5 == 0:\n        return n\n    elif n % 3 == 0:\n        return n\n    elif n % 2 == 0:\n        return n\n    elif n % 2 == 1:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if(max_length<len(input_list[i])):\n            max_length=len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for list in input_list:\n        if len(list) > max_length:\n            max_length = len(list)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    for i in input_list:\n        if len(i) > length:\n            length = len(i)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    maximum = 0\n    \n    for i in input_list:\n        if len(i) > maximum:\n            maximum = len(i)\n    \n    return maximum\n        \ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    minimum = len(input_list[0])\n    \n    for i in input_list:\n        if len(i) < minimum:\n            minimum = len(i)\n    \n    return minimum\n    \n    \ndef list_to_string(input_list):\n    '''\n    Write a function that changes the list passed in into a string\n    '''\n    result = \"\"\n    \n    for i in input_list:\n        result += str(i)\n    \n    return result\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for elem in input_list:\n        if len(elem) > max_length:\n            max_length = len(elem)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = []\n    max_length = 0\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            longest_list = input_list[i]\n    return longest_list\n    "
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max(input_list, key=len)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in input_list:\n        if max_length < len(i):\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    my_set = set()\n    for ele in test_tup:\n        if ele in my_set:\n            return False\n        my_set.add(ele)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n    # Add code here\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = list(test_tup)\n    return len(lst) == len(set(lst))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = tuple(test_tup)\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    \n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if test_tup[0]!= test_tup[1]:\n        if test_tup[1]!= test_tup[2]:\n            if test_tup[2]!= test_tup[3]:\n                if test_tup[3]!= test_tup[4]:\n                    return True\n    return False\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for character in str1:\n        if str1.count(character) == 1:\n            return character\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    string = []\n    for i in str1:\n        string.append(i)\n    for i in range(len(string)):\n        if string.count(string[i]) == 1:\n            return str1[i]\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for char in str1:\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    d={}\n    for i in str1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in str1:\n        if d[i]==1:\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] not in str1[i+1:]:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None\nprint(first_non_repeating_character('abccba'))\nprint(first_non_repeating_character('abccde'))\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = input(\"Please enter a string: \")\n    mylist = [item for item in str1]\n    freq = {}\n    for i in mylist:\n        if i not in freq.keys():\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for key, value in freq.items():\n        if value == 1:\n            print(key)\n            break\n        else:\n            print(\"No non-repeating character found!\")\n            break\nfirst_non_repeating_character('abcd')\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] = dict[char] + 1\n        else:\n            dict[char] = 1\n    for key in dict:\n        if dict[key] == 1:\n            return key\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict_char = {}\n    for char in str1:\n        if char in dict_char:\n            dict_char[char] += 1\n        else:\n            dict_char[char] = 1\n    for index, char in enumerate(str1):\n        if dict_char[char] == 1:\n            return char, index\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if not str1:\n        return None\n    chars = {}\n    for c in str1:\n        if c in chars:\n            chars[c] += 1\n        else:\n            chars[c] = 1\n    for c in str1:\n        if chars[c] == 1:\n            return c\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # return True if s starts and ends with the same character. Otherwise, return False\n    return string[0] == string[len(string)-1]\ndef check_palindrome(string): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    # remove the space and return the reverse string\n    return string.replace(\" \",\"\").lower() == string.replace(\" \",\"\").lower()[::-1]\ndef check_regex(string): \n    '''\n    Write a function to check whether the given string matches the given regex or not.\n    '''\n    # return True if s matches the regex. Otherwise, return False\n    return re.match(regex,string)!= None\ndef check_value(string): \n    '''\n    Write a function to check whether the given string is a valid value or not.\n    '''\n    # return True if s is a valid value. Otherwise, return False\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\ndef check_substring(string, sub_string): \n    '''\n    Write a function to check whether the given string contains the given sub-string or not.\n    '''\n    # return True if s contains the given sub-string. Otherwise, return False\n    return sub_string in string\ndef check_isbn(string): \n    '''\n    Write a function to check whether the given string is an ISBN or not.\n    '''\n    # return True if the string is a valid ISBN. Otherwise, return False\n    isbn = re.match(r'^(?:(?:3[\\d]{3})\\D)?(?:[0-9]{3})\\D[0-9]{3}\\D[0-9X]{1}\\D[0-9]{4}\\D$',string)\n    if isbn:\n        return True\n    return False\ndef check_height(string): \n    '''\n    Write a function to check whether the given string is a valid height or not.\n    '''\n    # return True if the string is a valid height. Otherwise, return False\n    return string[-2:] in ['cm','in'] and check_value(string[:-2])\ndef check_hexcolor(string): \n    '''\n    Write a function to check whether the given string is a valid hexcolor or not.\n    '''\n    # return True if the string is a valid hexcolor. Otherwise, return False\n    return (len(string) == 7 or len(string) == 9) and string[0] == '#' and check_value(string[1:])\ndef check_creditcard(string): \n    '''\n    Write a function to check whether the given string is a valid credit card or not.\n    '''\n    # return True if the string is a valid credit card. Otherwise, return False\n    # string should have 16 digits and should start with 3, 4 or 5.\n    return (len(string) == 16 and check_value(string) and int(string[0]) in [3,4,5])\ndef check_email(string): \n    '''\n    Write a function to check whether the given string is a valid email or not.\n    '''\n    # return True if the string is a valid email. Otherwise, return False\n    # string should have one '@' character and ending with '.com' or '.org' or '.net' or '.io' or '.eu'\n    return len(string) > 6 and string.count('@') == 1 and string[-4:] in ['.com','org','net','io','eu']\ndef check_ipaddress(string): \n    '''\n    Write a function to check whether the given string is a valid ipaddress or not.\n    '''\n    # return True if the string is a valid ipaddress. Otherwise, return False\n    # string should have four integers like: '255.255.255.0' or '192.168.0.1' or '10.0.0.1'\n    return len(string) > 7 and string.count('.') == 3 and check_value(string)\ndef check_date(string): \n    '''\n    Write a function to check whether the given string is a valid date or not.\n    '''\n    # return True if the string is a valid date. Otherwise, return False\n    # date should be in the format of 'YYYY-MM-DD'\n    return len(string) == 10 and string.count('-') == 2 and check_value(string)\ndef check_time(string): \n    '''\n    Write a function to check whether the given string is a valid time or not.\n    '''\n    # return True if the string is a valid time. Otherwise, return False\n    # time should be in the format of 'HH:MM:SS'\n    return len(string) == 8 and string.count(':') == 2 and check_value(string)\ndef check_datetime(string): \n    '''\n    Write a function to check whether the given string is a valid datetime or not.\n    '''\n    # return True if the string is a valid datetime. Otherwise, return False\n    # datetime should be in the format of 'YYYY-MM-DD HH:MM:SS'\n    return len(string) == 19 and string.count('-') == 2 and string.count(':') == 2 and check_value(string)\ndef check_timezone(string): \n    '''\n    Write a function to check whether the given string is a valid timezone or not.\n    '''\n    # return True if the string is a valid timezone. Otherwise, return False\n    # string should be in the format of '\u00b1HH:MM'\n    return len(string) == 6 and string[0] == '\u00b1' and string[1:].count(':') == 1 and check_value(string[1:])\ndef check_color(string): \n    '''\n    Write a function to check whether the given string is a valid color or not.\n    '''\n    # return True if the string is a valid color. Otherwise, return False\n    # string should be in the format of '#RRGGBB' or '#RGB' or '#RRR'\n    return len(string) == 7 and string[0] == '#' and check_hexcolor(string[1:])\ndef check_currency(string): \n    '''\n    Write a function to check whether the given string is a valid currency or not.\n    '''\n    # return True if the string is a valid currency. Otherwise, return False\n    # string should have 3 characters and all of them should be from [0-9]\n    return len(string) == 3 and check_value(string)\ndef check_phone_number(string): \n    '''\n    Write a function to check whether the given string is a valid phone number or not.\n    '''\n    # return True if the string is a valid phone number. Otherwise, return False\n    # string should be in the format of '+91-123-45-6789'\n    return len(string) == 12 and string[0] == '+' and string[1:].count('-') == 1 and string[1:].count('-') == 2 and string[1:].count(' ') == 1 and check_value(string[1:])\ndef check_url(string): \n    '''\n    Write a function to check whether the given string is a valid url or not.\n    '''\n    # return True if the string is a valid url. Otherwise, return False\n    # string should be in the format of 'http(s)://www.example.com'\n    return len(string) > 7 and string.count('://') == 1 and string.count('.') >= 1 and string.count(' ') == 0\ndef check_filepath(string): \n    '''\n    Write a function to check whether the given string is a valid filepath or not.\n    '''\n    # return True if the string is a valid filepath. Otherwise, return False\n    # string should be a valid path starting from root directory\n    return len(string) > 1 and string.count('\\\\') == len(string.split('\\\\')) - 1\ndef check_uuid(string): \n    '''\n    Write a function to check whether the given string is a valid uuid or not.\n    '''\n    # return True if the string is a valid uuid. Otherwise, return Fals"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string[0] == string[-1]\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))\nprint(check_char('a')) \nprint(check_char('ab'))\nprint(check_char('abb')) \nprint(check_char('abc'))\nprint(check_char('abbc'))\nprint(check_char('aabbc'))\nprint(check_char('aabbcc'))"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        print(\"Match\")\n    else:\n        print(\"Not a match\")\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return (string[0] == string[-1]) \n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    try: \n        if (string[0] == string[-1]):\n            return True\n        else: \n            return False\n    except:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string)>=1:\n        if(string[0] == string[len(string)-1]):\n            return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string.isalpha() and len(string)>1): \n        return True\n    return False\ndef check_char_match(string):\n    match = re.findall(regex, string)\n    if match:\n        return True\n    return False\nprint(check_char('abc'))\nprint(check_char('abbc'))\nprint(check_char('abbbc'))\nprint(check_char('abcde'))\nprint(check_char('abcdef'))\nprint('==========')\nprint(check_char_match('abc'))\nprint(check_char_match('abbc'))\nprint(check_char_match('abbbc'))\nprint(check_char_match('abcde'))\nprint(check_char_match('abcdef'))\nprint('==========')"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return string.endswith(string[0]) and string.startswith(string[0])\nprint(check_char(\"vioxxyz\"))\nprint(check_char(\"piiig\"))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = [a,b,c]\n    sorted_list.sort()\n    if len(sorted_list)%2 == 0:\n        median = (sorted_list[len(sorted_list)//2 -1] + sorted_list[len(sorted_list)//2])/2\n    else:\n        median = sorted_list[len(sorted_list)//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers=[a,b,c]\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if b>c:\n            return b\n        elif a<c:\n            return a\n        else:\n            return c\n    else:\n        if a>c:\n            return a\n        elif b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n    if b > c:\n        temp = b\n        b = c\n        c = temp\n    if a > b:\n        temp = a\n        a = b\n        b = temp\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b < c:\n        return b\n    elif c < b < a:\n        return b\n    elif c < a < b:\n        return a\n    elif b < a < c:\n        return a\n    elif b < c < a:\n        return c\n    elif a < c < b:\n        return c\n    elif a == b == c:\n        return a\n    else:\n        return False\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            if b>c:\n                return c\n            else:\n                return b\n        else:\n            return a\n    else:\n        if a>c:\n            return a\n        else:\n            if b>c:\n                return c\n            else:\n                return b\n            \ndef main():\n    '''\n    Calls the functions median_numbers().\n    '''\n    print('The median of the numbers is',median_numbers(1,2,3))\n    print('The median of the numbers is',median_numbers(1,2,2))\n    print('The median of the numbers is',median_numbers(1,1,2))\n    print('The median of the numbers is',median_numbers(3,2,1))\n    print('The median of the numbers is',median_numbers(1,3,2))\n    print('The median of the numbers is',median_numbers(1,2,3))\n    print('The median of the numbers is',median_numbers(2,1,3))\n    print('The median of the numbers is',median_numbers(2,3,1))\n    print('The median of the numbers is',median_numbers(3,1,2))\n    print('The median of the numbers is',median_numbers(3,2,1))\n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            median = b\n        elif a < c:\n            median = c\n        else:\n            median = a\n    else:\n        if a < c:\n            median = a\n        elif b < c:\n            median = c\n        else:\n            median = b\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    def med(a,b,c):\n        return a+b+c-max(a,b,c)-min(a,b,c)\n    return med(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_numbers = [a,b,c]\n    list_numbers.sort()\n    if len(list_numbers) % 2 == 0:\n        return (list_numbers[int(len(list_numbers)/2)] + list_numbers[int(len(list_numbers)/2)-1])/2\n    return list_numbers[int((len(list_numbers)-1)/2)]\n    \nprint(median_numbers(4,12,6))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a,b,c]\n    numbers.sort()\n    print(numbers)\n    if numbers[1] == numbers[0]:\n        median = numbers[1]\n    else:\n        median = numbers[1] - 0.5\n    return median\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not isinstance(nums,list):\n        raise Exception(\"nums must be a list\")\n    if len(nums)==0:\n        raise Exception(\"nums must be a list with at least one element\")\n    s=0\n    for num in nums:\n        s+=int(num)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for n in nums:\n        sum = sum + int(str(n)[0]) + int(str(n)[1])\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(map(int, str(num)))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_each_number = []\n    for number in nums:\n        digits = []\n        while number > 0:\n            digits.append(number % 10)\n            number = number // 10\n        sum_of_each_number.append(sum(digits))\n    return sum_of_each_number\n    \ndef sum_of_each_number_recursive(nums):\n    def helper(nums, index, current_sum):\n        if index == len(nums):\n            return current_sum\n        else:\n            return helper(nums, index + 1, current_sum + nums[index])\n    return helper(nums, 0, 0)\n    \n    \n    \ndef num_islands(grid):\n    def helper(grid, x, y):\n        if 0 <= x < len(grid) and 0 <= y < len(grid[0]):\n            if grid[x][y] == \"1\":\n                grid[x][y] = \"0\"\n                helper(grid, x + 1, y)\n                helper(grid, x, y + 1)\n                helper(grid, x - 1, y)\n                helper(grid, x, y - 1)\n            else:\n                return\n        else:\n            return\n    if not grid:\n        return 0\n    islands = 0\n    for x in range(len(grid)):\n        for y in range(len(grid[0])):\n            if grid[x][y] == \"1\":\n                islands += 1\n                helper(grid, x, y)\n    return islands\n    \n    \ndef sort_nums(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        return merge_sort(nums)\n    \ndef merge_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    else:\n        left = merge_sort(nums[:len(nums) // 2])\n        right = merge_sort(nums[len(nums) // 2:])\n        return merge(left, right)\n    \ndef merge(left, right):\n    if not left or not right:\n        return left or right\n    elif left[0] < right[0]:\n        return [left[0]] + merge(left[1:], right)\n    else:\n        return [right[0]] + merge(left, right[1:])\n    \n    \ndef binary_search(nums, x):\n    if not nums:\n        return False\n    else:\n        mid = len(nums) // 2\n        if nums[mid] == x:\n            return True\n        elif nums[mid] < x:\n            return binary_search(nums[mid + 1:], x)\n        else:\n            return binary_search(nums[:mid], x)\n    \ndef binary_search_recursive(nums, low, high, x):\n    if not nums:\n        return False\n    elif high >= low:\n        mid = low + (high - low) // 2\n        if nums[mid] == x:\n            return True\n        elif nums[mid] < x:\n            return binary_search_recursive(nums, mid + 1, high, x)\n        else:\n            return binary_search_recursive(nums, low, mid - 1, x)\n    else:\n        return False\n    \n    \ndef climb_stairs(n):\n    if n <= 2:\n        return n\n    else:\n        return climb_stairs(n - 1) + climb_stairs(n - 2)\n    \n    \ndef climb_stairs_memo(n, memo):\n    if n <= 2:\n        return n\n    else:\n        if memo[n]!= None:\n            return memo[n]\n        else:\n            memo[n] = climb_stairs_memo(n - 1, memo) + climb_stairs_memo(n - 2, memo)\n            return memo[n]\n    \ndef climb_stairs_memo_bottom_up(n):\n    memo = [0, 1, 2]\n    for i in range(3, n + 1):\n        memo[i % 3] = memo[(i - 1) % 3] + memo[(i - 2) % 3]\n    return memo[n % 3]\n    \ndef climb_stairs_top_down(n):\n    memo = [0, 1, 2]\n    if n <= 2:\n        return n\n    else:\n        for i in range(3, n + 1):\n            memo.append(memo[i % 3] + memo[(i - 1) % 3])\n        return memo[n % 3]\n    \n    \ndef search(nums, target):\n    def helper(nums, low, high, target):\n        if not nums:\n            return False\n        if low <= high:\n            mid = low + (high - low) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                return helper(nums, low, mid - 1, target)\n            else:\n                return helper(nums, mid + 1, high, target)\n        else:\n            return False\n    return helper(nums, 0, len(nums) - 1, target)\n    \ndef search_recursive(nums, low, high, target):\n    if low <= high:\n        mid = low + (high - low) // 2\n        if nums[mid] == target:\n            return True\n        elif nums[mid] > target:\n            return search_recursive(nums, low, mid - 1, target)\n        else:\n            return search_recursive(nums, mid + 1, high, target)\n    else:\n        return False\n    \n    \ndef print_binary_search_tree(nums):\n    if not nums:\n        return\n    mid = len(nums) // 2\n    root = TreeNode(nums[mid])\n    root.left = print_binary_search_tree(nums[:mid])\n    root.right = print_binary_search_tree(nums[mid + 1:])\n    return root\n    \nclass TreeNode:\n    def __init__(self, x):\n        self.val = x\n        self.left = None\n        self.right = None\n        \ndef is_subtree(t1, t2):\n    def is_same(t1, t2):\n        if not t1 and not t2:\n            return True\n        elif not t1 or not t2:\n            return False\n        else:\n            if t1.val!= t2.val:\n                return False\n            return is_same(t1.left, t2.left) and is_same(t1.right, t2.right)\n    \n    def preorder(t1, t2):\n        if not t1:\n            return False\n        if t1.val == t2.val and is_same(t1, t2):\n            return True\n        else:\n            return preorder(t1.left, t2) or preorder(t1.right, t2)\n    return preorder(t1, t2)\n    \ndef inorder(t):\n    if not t:\n        return\n    inorder(t.left)\n    print(t.val, end = \" \")\n    inorder(t.right)\n    \ndef preorder(t):\n    if not t:\n        return\n    print(t.val, end = \" \")\n    preorder(t.left)\n    preorder(t.right)\n    \n    \ndef postorder(t):\n    if not t:\n        return\n    postorder(t.left)\n    postorder(t.right)\n    print(t.val, end = \" \")\n    \n    \ndef inorder_iterative(t):\n    if not t:\n        return\n    s = []\n    node = t\n    while node or s:\n        while node:\n            s.append(node)\n            node = node.left\n        node = s.pop()\n        print(node.val, end = \" \")\n        node = node.right\n    \n    \n    \ndef postorder_iterative(t):\n    if not t:\n        return\n    s = []\n    node = t\n    while nod"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(digit) for digit in str(num)])\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total = total + num_sum(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = 0\n    for num in nums:\n        res += sum([int(x) for x in str(num)])\n    return res\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    output_list = []\n    for i,j in zip(test_tup1,test_tup2):\n        output_list.append(i^j)\n    return tuple(output_list)\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if not (len(test_tup1) == len(test_tup2)):\n        raise ValueError(\"Tuples must be of the same size.\")\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return [i^j for i, j in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        xor_tup += (i ^ j,)\n    return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(a ^ b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple([x ^ y for x, y in zip(test_tup1, test_tup2)])\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i], )\n    return result_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([a^b for a,b in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    s = list()\n    for x, y in zip(test_tup1, test_tup2):\n        s.append(x^y)\n    return tuple(s)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # initializing an empty dictionary\n    freq = {}\n    # traversing the list\n    for x in test_list:\n        # check if the tuple exists in the dictionary\n        if x in freq:\n            # increment the count of the tuple in the dictionary\n            freq[x] += 1\n        else:\n            # if the tuple is not present in the dictionary then add it with count 1\n            freq[x] = 1\n    # return the dictionary with tuples as keys and their counts as values\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    unique_list = []\n    for i in range(len(test_list)):\n        if i == 0:\n            unique_list.append(test_list[i])\n        elif test_list[i]!= test_list[i-1]:\n            unique_list.append(test_list[i])\n        else:\n            continue\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result = []\n    for sublist in test_list:\n        result.append(len(set(sublist)))\n    return result\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i] == test_list[i + 1]:\n            count += 1\n        else:\n            continue\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = []\n    for i in test_list:\n        if i not in freq:\n            freq.append(i)\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    result_list = []\n    for i in test_list:\n        if i not in result_list:\n            result_list.append(i)\n    return len(result_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    def freq_tuple(test_list):\n        '''\n        Write a function that counts the number of unique tuples in the given list.\n        '''\n        def count_tuple(test_list):\n            '''\n            Write a function that counts the number of times a specific tuple occurs in the given list.\n            '''\n            test_list = tuple(test_list)\n            test_set = set(test_list)\n            print(f'Number of unique tuples: {len(test_set)}')\n            for tup in test_set:\n                print(f'The tuple {tup} occurs {test_list.count(tup)} times')\n            return test_set\n        def list_freq(test_list):\n            '''\n            Write a function that counts the number of times a specific tuple occurs in the given list.\n            '''\n            print(f'Number of unique tuples: {len(test_list)}')\n            for item in test_list:\n                print(f'The tuple {item} occurs {test_list.count(item)} times')\n            return test_list\n        if type(test_list) == list:\n            return count_tuple(test_list)\n        else:\n            return list_freq(test_list)\n    return freq_tuple(test_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = []\n    for i in range(len(test_list)):\n        t = tuple(test_list[i])\n        if t not in unique_tuple:\n            unique_tuple.append(t)\n    return len(unique_tuple)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return list(map(lambda i: sum(i), zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # print(test_tup1)\n    # print(test_tup2)\n    # print(test_tup1[0][0] + test_tup2[0][0])\n    return [a + b for a, b in zip(test_tup1, test_tup2)]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for tup in test_tup1:\n        if type(tup) == tuple:\n            result.append(add_nested_tuples(tup, test_tup2))\n        else:\n            result.append(tup + test_tup2[0])\n    for tup in test_tup2:\n        if type(tup) == tuple:\n            result.append(add_nested_tuples(test_tup1, tup))\n        else:\n            result.append(tup + test_tup1[0])\n    return tuple(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i]+test_tup2[i])\n    return tuple(result_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([t1 + t2 for t1, t2 in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    sum_tup = []\n    for i in range(0, len(test_tup1)):\n        sum_tup.append(test_tup1[i] + test_tup2[i])\n    return tuple(sum_tup)\n    \ndef add_two_tuples_with_list_comprehension(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples using list comprehension.\n    '''\n    return tuple([test_tup1[i] + test_tup2[i] for i in range(len(test_tup1))])\n    \ndef add_two_tuples_using_loop(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples using loops.\n    '''\n    sum_tup = ()\n    for i in range(0, len(test_tup1)):\n        sum_tup = sum_tup + (test_tup1[i] + test_tup2[i],)\n    return sum_tup\n    \nif __name__ == '__main__':\n    \n    test_tup1 = (1, 2, 3)\n    test_tup2 = (4, 5, 6)\n    \n    print(add_two_tuples(test_tup1, test_tup2))\n    print(add_two_tuples_with_list_comprehension(test_tup1, test_tup2))\n    print(add_two_tuples_using_loop(test_tup1, test_tup2))\n    \n    "
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i in range(len(test_tup1)):\n        res.append(test_tup1[i] + test_tup2[i])\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = list()\n    for i in range(0,len(test_tup1)):\n        res.append(tuple(map(sum,zip(test_tup1[i],test_tup2[i]))))\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # if test_tup1 and test_tup2 are not None and type(test_tup1) == tuple and type(test_tup2) == tuple and len(test_tup1) == len(test_tup2):\n    #     return tuple([x+y for x,y in zip(test_tup1,test_tup2)])\n    # else:\n    #     return None\n    if test_tup1 and test_tup2 and type(test_tup1) == tuple and type(test_tup2) == tuple and len(test_tup1) == len(test_tup2):\n        return tuple([x+y for x,y in zip(test_tup1,test_tup2)])\n    else:\n        return None\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a < b):\n        return a\n    else:\n        return b\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a>b):\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \n    \ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint('minimum of numbers')\nprint(minimum(2,4))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if (a < b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\ndef minimum_maximum(a,b):\n    '''\n    Write a python function to find the minimum and maximum of two numbers.\n    '''\n    return (minimum(a,b), maximum(a,b))\ndef greater_than(a,b):\n    '''\n    Write a python function to check if number a is greater than number b. Return True if a > b and False otherwise. \n    '''\n    if a > b:\n        return True\n    else:\n        return False\ndef less_than(a,b):\n    '''\n    Write a python function to check if number a is less than number b. Return True if a < b and False otherwise. \n    '''\n    if a < b:\n        return True\n    else:\n        return False\ndef less_than_or_equal_to(a,b):\n    '''\n    Write a python function to check if number a is less than or equal to number b. Return True if a <= b and False otherwise. \n    '''\n    if a <= b:\n        return True\n    else:\n        return False\ndef greater_than_or_equal_to(a,b):\n    '''\n    Write a python function to check if number a is greater than or equal to number b. Return True if a >= b and False otherwise. \n    '''\n    if a >= b:\n        return True\n    else:\n        return False\ndef equal_to(a,b):\n    '''\n    Write a python function to check if number a is equal to number b. Return True if a == b and False otherwise. \n    '''\n    if a == b:\n        return True\n    else:\n        return False\ndef not_equal_to(a,b):\n    '''\n    Write a python function to check if number a is not equal to number b. Return True if a!= b and False otherwise. \n    '''\n    if a!= b:\n        return True\n    else:\n        return False\ndef average(a,b):\n    '''\n    Write a python function to find the average of two numbers. Your function will accept two parameters, a and b. You function should return the average of a and b.\n    '''\n    return (a+b)/2\ndef number_to_words(n):\n    '''\n    Write a python function to convert a number n to its word representation. \n    You should convert the number into words using the following table:\n    Number    Word\n    0    zero\n    1    one\n    2    two\n    3    three\n    4    four\n    5    five\n    6    six\n    7    seven\n    8    eight\n    9    nine\n    For example, number_to_words(5) should return \"five\"\n    '''\n    word_dict = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6:'six', 7:'seven', 8: 'eight', 9: 'nine'}\n    if n in word_dict:\n        return word_dict[n]\n    else:\n        return \"The number is not in the dictionary\"\ndef temperature_in_fahrenheit(c):\n    '''\n    Write a python function to convert celsius to fahrenheit. \n    The formula for celsius to fahrenheit is (9/5)*c + 32\n    For example, if c = 20, then 20*(9/5)+32 = 68. \n    Your function should accept a parameter c, and return the temperature in fahrenheit. \n    '''\n    return (9/5)*c + 32\ndef temperature_in_kelvin(c):\n    '''\n    Write a python function to convert celsius to kelvin. \n    The formula for celsius to kelvin is c + 273.15\n    For example, if c = 20, then 20+273.15 = 272.15\n    Your function should accept a parameter c, and return the temperature in kelvin. \n    '''\n    return c + 273.15\ndef convert_temperature(c,k=0,f=0):\n    '''\n    Write a python function to convert temperature from celsius to fahrenheit or from fahrenheit to kelvin.\n    Your function should accept either a parameter c or both a parameter c and k (f is optional). \n    If you do not pass in a parameter, you should prompt the user for one. \n    If you pass in a parameter for c, it will be used as the temperature in celsius, and your function should return the temperature in fahrenheit and kelvin. \n    If you pass in both a parameter for c and a parameter for k, both values will be used for the calculations. \n    The formula for celsius to fahrenheit is (9/5)*c + 32\n    The formula for celsius to kelvin is c + 273.15\n    The formula for fahrenheit to kelvin is (9/5)*f + 32 + 273.15\n    '''\n    if c == 0:\n        f = int(input(\"Enter the temperature in fahrenheit: \"))\n        k = (f - 32) * 5/9\n    elif k == 0:\n        c = int(input(\"Enter the temperature in celsius: \"))\n        k = c + 273.15\n    elif f == 0:\n        f = int(input(\"Enter the temperature in fahrenheit: \"))\n        k = (f - 32) * 5/9 + 273.15\n    print(\"The temperature in fahrenheit is\", f)\n    print(\"The temperature in kelvin is\", k)\n    return(f,k)\ndef is_member(a,b):\n    '''\n    Write a python function to check if element a is a member of list b. \n    Your function should accept a parameter a and b, and it should return True if a is a member of b, and False otherwise. \n    For example, if a is 3 and b = [1,2,3], then your function should return True, because 3 is in list b. \n    If a is 4 and b = [1,2,3], then your function should return False, because 4 is not in list b.\n    '''\n    if a in b:\n        return True\n    else:\n        return False\ndef is_member_v2(a,b):\n    '''\n    Write a python function to check if element a is a member of list b. \n    Your function should accept a parameter a and b, and it should return True if a is a member of b, and False otherwise. \n    For example, if a is 3 and b = [1,2,3], then your function should return True, because 3 is in list b. \n    If a is 4 and b = [1,2,3], then your function should return False, because 4 is not in list b.\n    '''\n    if a not in b:\n        return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to check if a number n is prime.\n    Your function should return True if n is a prime number and False otherwise. \n    For example, if n is 17, then your function should return True, because 17 is a prime number. \n    If n is 4, then your function should return False, because 4 is not a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_v2(n):\n    '''\n    Write a python function to check if a number n is prime.\n    Your function should return True if n is a prime number and False otherwise. \n    For example, if n is 17, then your function should return True, because 17 is a prime number. \n    If n is 4, then your function should return False, because 4 is not a prime number.\n    '''\n    if n < 2:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime_v3(n):\n    '''\n    Write a python function to check if a number n is prime.\n    Your function should return True if n is a prime number and False otherwise. \n    Fo"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a > b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n    \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum_maximum(a,b):   \n    '''\n    Write a python function to find the minimum and maximum of two numbers.\n    '''\n    return (minimum(a,b), maximum(a,b))\n    \ndef minimum_maximum_list(lst):   \n    '''\n    Write a python function to find the minimum and maximum of all the numbers in a list.\n    '''\n    if lst:\n        a=lst[0]\n        b=lst[0]\n        for i in range(len(lst)):\n            if a>lst[i]:\n                a=lst[i]\n            if b<lst[i]:\n                b=lst[i]\n    return (a,b)\n    \ndef replace_list_element(lst,old_val,new_val):\n    '''\n    Write a python function to replace all the elements in a list with a new value.\n    '''\n    for i in range(len(lst)):\n        if lst[i]==old_val:\n            lst[i]=new_val\n    return lst\n    \ndef replace_list_element_list(lst,old_val,new_val):\n    '''\n    Write a python function to replace all the elements in a list with a new value.\n    '''\n    for i in range(len(lst)):\n        if lst[i]==old_val:\n            lst.pop(i)\n            lst.insert(i,new_val)\n    return lst\n    \ndef divisible_by_7_and_5_list(lst):\n    '''\n    Write a python function to find all the numbers in a list that are divisible by 7 and 5.\n    '''\n    for i in range(len(lst)):\n        if (lst[i]%7==0) and (lst[i]%5==0):\n            print(lst[i])\n    return lst\n    \ndef divisible_by_7_and_5_list_new(lst):\n    '''\n    Write a python function to find all the numbers in a list that are divisible by 7 and 5.\n    '''\n    i=0\n    while i<len(lst):\n        if (lst[i]%7==0) and (lst[i]%5==0):\n            print(lst[i])\n            lst.pop(i)\n        else:\n            i+=1\n    return lst\n    \ndef length_list(lst):\n    '''\n    Write a python function to find the length of a list.\n    '''\n    return len(lst)\n    \ndef length_list_new(lst):\n    '''\n    Write a python function to find the length of a list.\n    '''\n    i=0\n    while i<len(lst):\n        i+=1\n    return i\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.count(tuple1) > 0:\n        return True\n    else:\n        return False\n    \n    \ndef main():\n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = ('a')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = ('b')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = ('c')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = ('d')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0)\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (1)\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (2)\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (1,'b')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'a')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','a')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','d')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','d','e')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n','o')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n','o','p')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n','o','p','q')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s')\n    print(check_tuplex(tuplex,tuple1))\n    \n    tuplex = ('a',0,'b',1,'c',2)\n    tuple1 = (0,'b','c','a','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t')\n    print(check_tuplex(tuplex,"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    result = False\n    for element in tuplex:\n        if element == tuple1:\n            result = True\n    return result\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1[0] in tuplex else False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag=False\n    for i in range(0,len(tuple1)):\n        if tuplex==tuple1[i]:\n            flag=True\n    return flag\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print('The element',tuplex,' exists within the tuple.')\n    else:\n        print('The element',tuplex,' does not exists within the tuple.')\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    tuplex = sorted(tuplex)\n    tuple1 = sorted(tuple1)\n    for i in tuplex:\n        if i not in tuple1:\n            return 0\n    return 1\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # Write your code here\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of a number is even\")\n    else:\n        print(\"The parity of a number is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = []\n    for i in range(1,x+1):\n        if x%i == 0:\n            y.append(i)\n    par = 0\n    for j in y:\n        if j%2 == 0:\n            par = 1\n    if par == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    num = x\n    result = num % 2\n    if result == 0:\n        return 'even'\n    else:\n        return 'odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The parity of {} is {}'.format(x, 'Even')\n    else:\n        return 'The parity of {} is {}'.format(x, 'Odd')\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x:\n        parity = ~parity\n        x = x & (x-1)\n    return(parity)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\"\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Parity of a number is 1 if number is odd\n    # and 0 if number is even.\n    # A number is even if there are no odd digits in the number.\n    # For example, the parity of 8 is 0, because the number 0 has even parity.\n    # The parity of the number 7 is 1, because the number 7 has odd parity.\n    # You need to write a function to find the parity of a given number.\n    # A parity of 1 represents an odd number, and a parity of 0 represents an even number.\n    # If the number is odd, then its parity is 1. \n    # If the number is even, then its parity is 0.\n    # You need to write a function to find the parity of a given number.\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n == None or len(n) == 0:\n        return None\n    elif len(n) == 1:\n        return n\n    elif len(n) == 2:\n        if n[0] == n[1]:\n            return '0' + n[0] + '0'\n        else:\n            return n[1] + n[0]\n    else:\n        return rearrange_bigger(str(int(n) + 1))\n        \n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted([i for i in str(n)],reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    l = list(str_n)\n    l.sort()\n    l.reverse()\n    ans = ''\n    for char in l:\n        ans += char\n    return int(ans)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # code here\n    n = [int(x) for x in str(n)]\n    n = sorted(n, reverse = True)\n    i = 0\n    while n[i] < n[i+1]:\n        i += 1\n    n[i], n[i+1] = n[i+1], n[i]\n    result = []\n    for i in range(len(n)):\n        result.append(n[i])\n    result = int(''.join(str(x) for x in result))\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if not n or len(n) == 1:\n        return -1\n    result = ''\n    i = len(n) - 1\n    while i >= 0:\n        result += n[i]\n        i -= 1\n    i = 0\n    j = 0\n    while i < len(result):\n        if int(result[i]) > int(result[j]):\n            i += 1\n        else:\n            j += 1\n            if j == len(result) - 1:\n                break\n    temp = result[:j]\n    temp += result[j:i+1][::-1] + result[i+1:]\n    result = temp\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    arr = list(map(int, str(n)))\n    stack = []\n    for i in arr:\n        while stack and stack[-1] < i:\n            stack.pop()\n        stack.append(i)\n    return int(\"\".join(list(map(str, stack))))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def swap(list, i, j):\n        tmp = list[i]\n        list[i] = list[j]\n        list[j] = tmp\n    \n    def print_list(list):\n        print(''.join(list))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    if len(digits) == 1:\n        return n\n    a = []\n    for i in range(1, len(digits)):\n        if int(digits[i]) > int(digits[i-1]):\n            a.append(i)\n    b = a[::-1]\n    if len(b) == 1:\n        return int(''.join(digits[:b[0]] + digits[b[0]:][::-1]))\n    if len(b) > 1:\n        digits[b[0]] = str(int(digits[b[0]]) - 1)\n        for j in range(1, len(b)):\n            digits[b[j]] = str(int(digits[b[j]]) - 1)\n        return int(''.join(digits[:b[0]] + digits[b[0]:][::-1]))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(\"\".join(sorted(str(n), reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    print(n)\n    n_copy = n\n    n_copy = str(n_copy)\n    n_copy_arr = [i for i in n_copy]\n    n_copy_arr_sorted = n_copy_arr.sort()\n    n_copy_arr_sorted.reverse()\n    print(n_copy_arr_sorted)\n    n_copy_arr_sorted_str = ''.join(n_copy_arr_sorted)\n    print(n_copy_arr_sorted_str)\n    next_bigger = int(n_copy_arr_sorted_str)\n    print(next_bigger)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    result = set()\n    if len(nums1)!= len(nums2):\n        return []\n    if k > len(nums1) * len(nums2):\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialise heap to contain the first k pairs,\n    # each pair is a tuple of the index of the two arrays\n    # and the corresponding value from the two arrays\n    pairs = []\n    for i in range(k):\n        heapq.heappush(pairs, (nums1[i]+nums2[0], (i, 0)))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) < len(nums2):\n        return get_k_pairs(nums1, nums2, k)\n    else:\n        return get_k_pairs(nums2, nums1, k)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def k_smallest_pairs(self, nums1, nums2, k):\n        if not nums1 or not nums2:\n            return []\n        hp = []\n        for i, n1 in enumerate(nums1):\n            for j, n2 in enumerate(nums2):\n                if i == 0 or j == 0:\n                    heapq.heappush(hp, (n1 + n2, i, j))\n                else:\n                    if -hp[0][0] > n1 + n2:\n                        heapq.heappush(hp, (n1 + n2, i, j))\n                    if len(hp) > k:\n                        heapq.heappop(hp)\n        result = []\n        while hp:\n            result.append([nums1[hp[0][1]], nums2[hp[0][2]]])\n            heapq.heappop(hp)\n        return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for x, y in zip(nums1, nums2):\n        heapq.heappush(heap, (x+y, x, y))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    result = []\n    for i in nums1:\n        for j in nums2:\n            if len(result) < k:\n                result.append([i, j])\n            else:\n                heapq.heappushpop(result, [i, j])\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) * len(nums2) < k:\n        return None\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    m = len(nums1)\n    n = len(nums2)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1+num2, (num1, num2)))\n            else:\n                heapq.heappushpop(heap, (num1+num2, (num1, num2)))\n    return [x[1] for x in heap]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    for num1 in nums1:\n        for num2 in nums2:\n            # find the sum and add it to the heap\n            heapq.heappush(heap, (-(num1+num2), num1, num2))\n    # print(heap)\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(i[1])\n    min_val = min(list2)\n    for i in range(len(list2)):\n        if list2[i] == min_val:\n            return list1[i]\n    \n    \nl = [(2, 4), (3, 6), (5, 7), (4, 8), (6, 9), (9, 10)]\nprint(min_product_tuple(l))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            list2.append(list1[i]*list1[j])\n    return list2[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for x in list1:\n        if type(x) == tuple:\n            tuple_list.append(x)\n    if len(tuple_list) == 1:\n        return tuple_list[0]\n    tuple_list.sort()\n    return tuple_list[0] * tuple_list[1]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = []\n    for i in list1:\n        for j in list1:\n            if(i!= j and i not in list2 and j not in list2):\n                list2.append(i)\n                list2.append(j)\n    print(\"The minimum product of the tuples within the list is:\", min(list2))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list2 = list(list1)\n    a = list2[0]\n    for i in range(len(list1)):\n        if list1[i] < a:\n            a = list1[i]\n    return a\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #your code here\n    list1.sort(key = lambda x: x[1])\n    return list1[0][0] * list1[1][0]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Method 1\n    # return min([a*b for (a,b) in list1])\n    # Method 2\n    # return min(list(map(lambda x: x[0]*x[1], list1)))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return 'List is empty'\n    list1.sort(key=lambda x: x[0]*x[1])\n    return list1[0][0]*list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    import itertools\n    new_list = []\n    for x in list1:\n        new_list.append(x[0])\n        new_list.append(x[1])\n    new_list = sorted(new_list)\n    new_list = list(dict.fromkeys(new_list))\n    for y in itertools.combinations(new_list,2):\n        prod = y[0]*y[1]\n    return prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = list1[0][0]*list1[0][1]\n    for tup in list1:\n        if min_prod > tup[0]*tup[1]:\n            min_prod = tup[0]*tup[1]\n    return min_prod\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = 0\n    for i in range(0, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef string_join(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return ''.join(listval)\n    \ndef list_split(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.split()\n    \ndef unique(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return set(listval)\n    \ndef check_occurrences(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [i for i in listval if listval.count(i) >= 2]\n    \ndef sum_of_values(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sum(listval)\n    \ndef sublist(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[:3]\n    \ndef remove_duplicates(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return list(dict.fromkeys(listval))\n    \ndef remove_values_from_list(listval, val):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [i for i in listval if i!= val]\n    \ndef list_check(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return any(type(i) == list for i in listval)\n    \ndef append_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.append([2,3,4])\n    \ndef multiple_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval * 2\n    \ndef list_insert(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.insert(0,5)\n    \ndef remove_from_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.pop(0)\n    \ndef min_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef reverse_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval[::-1]\n    \ndef sort_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sorted(listval)\n    \ndef sort_list_in_descending(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sorted(listval, reverse=True)\n    \ndef sort_list_without_sorting(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.sort()\n    \ndef remove_from_list_by_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.pop(0)\n    \ndef remove_from_list_by_index_in_descending(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return listval.pop(0)\n    \ndef max_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef max_in_list_without_using_max_function(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [i for i in listval if i == max(listval)]\n    \ndef remove_item_from_list_by_index(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [listval.pop(0)]\n    \ndef remove_item_from_list_by_index_in_descending(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [listval.pop(0)]\n    \ndef check_item_exists(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if [i for i in listval if i == 6]:\n        return True\n    else:\n        return False\n    \ndef sum_of_all_items(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sum(listval)\n    \ndef sum_of_all_items_in_descending(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sum(listval[::-1])\n    \ndef maximum_number_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \ndef minimum_number_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return min(listval)\n    \ndef multiply_all_numbers_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sum(listval)\n    \ndef multiply_all_numbers_in_list_in_descending(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return sum(listval[::-1])\n    \ndef list_reversed(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return list(reversed(listval))\n    \ndef remove_item_from_list_by_value(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [listval.pop(0)]\n    \ndef remove_item_from_list_by_value_in_descending(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [listval.pop(0)]\n    \ndef check_item_exists_in_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [i for i in listval if i == 6]\n    \ndef list_of_strings_to_int_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [int(i) for i in listval]\n    \ndef list_of_strings_to_float_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return [float(i) for i in listval]\n    \ndef list_of_strings_to_bool_list(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = 0\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    smallest = listval[0]\n    for i in range(1, len(listval)):\n        if smallest > listval[i]:\n            smallest = listval[i]\n    return smallest\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in listval:\n        if i < min:\n            min = i\n    return min\nprint(min_val([1,2,3,4,5]))\nprint(min_val([1,2,3,4,5,0]))\nprint(min_val([1,2,3,4,0]))\nprint(min_val([0,2,3,0,5]))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # if listval is a heterogeneous list\n    if len(listval) == 0:\n        return None\n    else:\n        # initialize min as the first element in the list\n        min = listval[0]\n        # loop through the rest of the elements\n        for i in listval[1:]:\n            if i < min:\n                min = i\n    return min\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # if listval is a heterogeneous list\n    if len(listval) == 0:\n        return None\n    else:\n        # initialize max as the first element in the list\n        max = listval[0]\n        # loop through the rest of the elements\n        for i in listval[1:]:\n            if i > max:\n                max = i\n    return max\n    \ndef min_index(listval):\n    '''\n    Write a function to find the minimum index in a given heterogeneous list.\n    '''\n    # if listval is a heterogeneous list\n    if len(listval) == 0:\n        return None\n    else:\n        # initialize min_idx as the first element in the list\n        min_idx = 0\n        # loop through the rest of the elements\n        for i in listval[1:]:\n            if i < listval[min_idx]:\n                min_idx = listval.index(i)\n    return min_idx\n    \ndef max_index(listval):\n    '''\n    Write a function to find the maximum index in a given heterogeneous list.\n    '''\n    # if listval is a heterogeneous list\n    if len(listval) == 0:\n        return None\n    else:\n        # initialize max_idx as the first element in the list\n        max_idx = 0\n        # loop through the rest of the elements\n        for i in listval[1:]:\n            if i > listval[max_idx]:\n                max_idx = listval.index(i)\n    return max_idx\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split words\n    words = re.split('_', word)\n    \n    # capitalize first letters\n    words[0] = words[0].title()\n    \n    # join words\n    return ''.join(words)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    s = re.sub(r'(_\\w)',lambda x:x.group(1)[1].upper(),word)\n    return s[0].lower()+s[1:]\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    s = re.sub(r'(\\w{1}[A-Z])',lambda x:x.group(1).lower(),word)\n    return s[0].upper()+s[1:]\ndef convert_to_lowercase(word):\n    '''\n    Write a function to convert the given string to lowercase letters.\n    '''\n    s = re.sub(r'[A-Z]',lambda x:x.group(0).lower(),word)\n    return s\ndef convert_to_uppercase(word):\n    '''\n    Write a function to convert the given string to uppercase letters.\n    '''\n    s = re.sub(r'[a-z]',lambda x:x.group(0).upper(),word)\n    return s\ndef capitalize(word):\n    '''\n    Write a function to capitalize first letter of every word in a string.\n    '''\n    s = re.sub(r'\\w{1}',lambda x:x.group(0).upper(),word)\n    return s\ndef urlify(word):\n    '''\n    Write a function to replace all spaces in a string with '%20'.\n    '''\n    s = re.sub(r' ',lambda x:('%20').upper(),word)\n    return s\ndef title_case(word):\n    '''\n    Write a function to convert the first character of each word to uppercase and remaining characters to lowercase in a string.\n    '''\n    s = re.sub(r'(\\w{1})',lambda x:x.group(1).capitalize(),word)\n    return s\ndef urlify(word):\n    '''\n    Write a function to replace all spaces in a string with '%20'.\n    '''\n    s = re.sub(r' ',lambda x:('%20').upper(),word)\n    return s\ndef remove_char_at_index(word,index):\n    '''\n    Write a function to remove a character from a string at given index and return the new string.\n    '''\n    s = re.sub(r'[a-z]',lambda x:x.group(0)[:index]+x.group(0)[index+1:],word)\n    return s\ndef remove_all_occurences_of_char(word,char):\n    '''\n    Write a function to remove all occurences of given character in a string and return the new string.\n    '''\n    s = re.sub(r'[a-z]',lambda x:x.group(0).replace(char,''),word)\n    return s\ndef remove_all_occurences_of_char_in_word(word,char):\n    '''\n    Write a function to remove all occurences of given character in a word and return the new word.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{1}'+char+')',lambda x:x.group(0).replace(char,''),word)\n    return s\ndef move_character_at_index_to_front(word,index):\n    '''\n    Write a function to move all occurences of given character to the front and return the new string.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{1}'+index+')',index,word)\n    return s\ndef move_all_occurences_of_char_to_front(word,char):\n    '''\n    Write a function to move all occurences of given character to the front and return the new string.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{1}'+char+')',lambda x:x.group(0).replace(char,''),word)\n    return s\ndef reverse_string(word):\n    '''\n    Write a function to reverse a string.\n    '''\n    s = re.sub(r'[a-z]',lambda x:x.group(0)[::-1],word)\n    return s\ndef replace_character_at_index(word,index,replacement_char):\n    '''\n    Write a function to replace a given character at a given index with given character and return the new string.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{1}'+index+')',replacement_char,word)\n    return s\ndef replace_all_occurences_of_char(word,char,replacement_char):\n    '''\n    Write a function to replace all occurences of given character in a string with given replacement character and return the new string.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{1}'+char+')',replacement_char,word)\n    return s\ndef replace_all_occurences_of_char_in_word(word,char,replacement_char):\n    '''\n    Write a function to replace all occurences of given character in a word with given replacement character and return the new word.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{1}'+char+')',replacement_char,word)\n    return s\ndef find_first_non_consecutive_char(word):\n    '''\n    Write a function to find first non-consecutive character in a string and return the index of it. If there is no such character, return -1.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{2}$)',lambda x:x.group(0),word)\n    return s\ndef find_first_non_consecutive_char(word):\n    '''\n    Write a function to find first non-consecutive character in a string and return the index of it. If there is no such character, return -1.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{2}$)',lambda x:x.group(0),word)\n    return s\ndef find_first_non_consecutive_char(word):\n    '''\n    Write a function to find first non-consecutive character in a string and return the index of it. If there is no such character, return -1.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{2}$)',lambda x:x.group(0),word)\n    return s\ndef find_all_non_consecutive_chars(word):\n    '''\n    Write a function to find all non-consecutive characters in a string and return their index in list. If there is no such character, return an empty list.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{2}$)',lambda x:x.group(0),word)\n    return s\ndef find_all_non_consecutive_chars(word):\n    '''\n    Write a function to find all non-consecutive characters in a string and return their index in list. If there is no such character, return an empty list.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{2}$)',lambda x:x.group(0),word)\n    return s\ndef find_first_non_consecutive_char(word):\n    '''\n    Write a function to find first non-consecutive character in a string and return the index of it. If there is no such character, return -1.\n    '''\n    s = re.sub(r'(?<!^)(?=[a-z]{2}$)',lambda x:x.group(0),word)\n    return s\ndef find_first_non_consecutive_char(word):\n    '''\n    Write a function to find first non-consecutive character in a string and return the index of it. If there is n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n    # return re.sub('(_\\w)',lambda m:m.group(1)[1].upper(),word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word:\n        return re.sub('([^A-Za-z0-9]+)(?=[A-Z])', r'\\1', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # return ''.join(x.capitalize() or '_' for x in word.split('_'))\n    word = re.sub('_','', word)\n    return word.title().replace(\" \", \"\")\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for i, letter in enumerate(word):\n        if i == 0:\n            result = letter.upper()\n        else:\n            result += letter\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    return re.sub(r'(_\\w)', lambda m: m.group(1)[1].upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # list(l) creates a copy of l\n    new_list = [i for i in list(l) if i % 2 == 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [value for value in l if value % 2!= 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = list(filter(lambda n: n%2==0,l))\n    return l2\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [item for item in l if item % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i % 2!= 0:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.sort()\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = [x for x in l if x % 2 == 0]\n    return res\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    n=0\n    while n<len(l):\n        if l[n]%2!=0:\n            l.remove(l[n])\n        else:\n            n+=1\n    return l\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n < 0:\n        return None\n    if n >= len(list1):\n        return None\n    for tup in list1:\n        if n == 0:\n            return tup[n]\n        n = n - 1\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [i[n] for i in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list(list1[n - 1])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    for tup in list1:\n        return tup[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    new_list = []\n    for tuple in list1:\n        new_list.append(tuple[n])\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [item[n] for item in list1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n    \ndef get_input():\n    '''\n    Write a function that takes a list of numbers and returns a list of tuples with each tuple containing two elements. The first element should be the \"floor\" of the input number, and the second element should be the \"ceiling\" of the input number.\n    '''\n    list_of_nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    output = []\n    for number in list_of_nums:\n        output.append((number - 1, number + 1))\n    return output\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    try:\n        for i in list1:\n            for j in list2:\n                if i==j:\n                    return True\n    except TypeError as e:\n        return e\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list1) < len(list2):\n        return overlapping(list2,list1)\n    elif len(list1) == 0:\n        return True\n    elif list1[0] in list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n    \ndef duplicate_num(list):\n    '''\n    Write a python function to check whether a list contains any duplicate values in it or not.\n    '''\n    list_set = set(list)\n    if len(list_set) == len(list):\n        return False\n    else:\n        return True\n    \ndef remove_duplicate(list):\n    '''\n    Write a python function to check whether a list contains any duplicate values in it or not.\n    '''\n    return list\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(value in list1 for value in list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return list(set(list1) & set(list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for num1 in list1:\n        for num2 in list2:\n            if num1 == num2:\n                return True\n    return False\nprint(overlapping([5,2,3,1,4],[1,5,2,3,4]))"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(item in list2 for item in list1)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if any(num in list1 for num in list2):\n        return True\n    else:\n        return False\n    #return [num for num in list1 if num in list2] \n    \n    #print (a)\n    \n    \n    \n    \ndef reverse_number(n):\n    return int(n[::-1])\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        raise Exception(\"Minimum array length should be 2\")\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    if n < 2:\n        print (\"Invalid Input\")\n        return\n    arr.sort() \n    max_product = arr[n-1] * arr[n-2]\n    print (max_product)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return -1\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    result = []\n    if len(arr) < 2:\n        return result\n    arr.sort()\n    highest_product = arr[-1] * arr[-2]\n    result.append(arr[-1])\n    result.append(arr[-2])\n    return result\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Create a empty dictionary \n    d = dict() \n    \n    # Traverse the array. \n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            product = arr[i] * arr[j] \n            if product in d: \n                d[product].append((arr[i],arr[j])) \n            else: \n                d[product] = [(arr[i],arr[j])] \n    #print(d)\n    result = list(d.values())\n    #print(result)\n    for i in result:\n        for j in range(len(i)):\n            if i[j][0] > i[j][1]:\n                i[j] = (i[j][1],i[j][0])\n    #print(result)\n    answer = max(result,key=lambda x:x[0])\n    #print(answer)\n    return answer[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if (len(arr) == 1): \n        return [arr[0], arr[0]] \n    max_product = -99999999\n    max_pair = [] \n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            product = arr[i] * arr[j] \n            if (product > max_product): \n                max_product = product \n                max_pair = [arr[i], arr[j]] \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return None\n    \n    left, right = 0, len(arr)-1\n    left_val, right_val = arr[left], arr[right]\n    max_prod = left_val*right_val\n    while left<right:\n        if left_val < right_val:\n            left += 1\n            if left_val*arr[left] > max_prod:\n                max_prod = left_val*arr[left]\n            left_val = max(left_val, arr[left])\n        else:\n            right -= 1\n            if right_val*arr[right] > max_prod:\n                max_prod = right_val*arr[right]\n            right_val = max(right_val, arr[right])\n    return max_prod\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    high = arr[-1] * arr[-2]\n    low = arr[0] * arr[1]\n    return high,low"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if (len(arr) == 0):\n        return False\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n                max_product_arr = [arr[i], arr[j]]\n    return max_product_arr\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input = sorted(Input, key = lambda x:x[0])\n    list_temp = [Input[0]]\n    for index in range(len(Input)):\n        if Input[index][0] == list_temp[-1][0]:\n            list_temp.append(Input[index])\n        else:\n            print(Input[index][0])\n            list_temp = [Input[index]]\n    print(list_temp)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input = [('Geeks', 1), ('for', 2), ('Geeks', 3), ('Geeks', 4), ('is', 5), ('best', 6)]\n    # Output = ('Geeks', 1), ('is', 5), ('best', 6)\n    Output = []\n    temp = {}\n    for t in Input:\n        # print(type(t))\n        if t[0] not in temp.keys():\n            temp[t[0]] = [t]\n        else:\n            temp[t[0]].append(t)\n    for k in temp.keys():\n        Output.append(temp[k][0])\n        # print(temp[k][0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in range(len(Input)): \n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]: \n                Output.append(Input[i])\n                break\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                if i not in Output:\n                    Output.append(i)\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print('Given list is: ', Input)\n    Output = []\n    for i in Input:\n        if i[0] in Output:\n            continue\n        else:\n            Output.append(i[0])\n    return Output\n    \ndef main():\n    Input = [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n    print('Output is: ', group_tuples(Input))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    lst=[]\n    for i in Input: \n        for j in i:\n            lst.append(j)\n    lst=sorted(lst)\n    \n    return lst[0]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    maxcount = 0\n    maxkey = None\n    for key, value in Input.items():\n        if len(value) > maxcount:\n            maxcount = len(value)\n            maxkey = key\n    return maxkey\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # to add a list of tuples to a list\n    listOfTuples = list(Input)\n    \n    # creating a new empty list\n    list1 = []\n    \n    # loop to add elements to the list\n    for x in listOfTuples:\n        list1.append(x[0])\n        \n    # sort the list\n    list1.sort()\n    \n    # checking whether two elements are equal or not\n    for i in range(0, len(list1) - 1):\n        if list1[i] == list1[i + 1]:\n            continue\n        else:\n            return list1[i]\n        \n    # return the last element of the list\n    return list1[-1]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = []\n    # your code here\n    for i in range(len(Input)):\n        Output.append(Input[i][0])\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort(key = lambda x : x[0])\n    \n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i][0])\n        if Input[i]!= Input[i-1]:\n            break\n    return Output\n    \ndef group_list(Input): \n    '''\n    Write a function to find common first element in given list of list.\n    '''\n    Input.sort(key = lambda x : x[0])\n    Output = []\n    for i in range(len(Input)):\n        Output.append(Input[i][0])\n        if Input[i]!= Input[i-1]:\n            break\n    return Output\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len = []\n    for item in lst:\n        lst_len.append(len(item))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n            max_item = lst[i]\n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\nprint(Find_Max([\"adnan\", \"mohammad\", \"tammoz\", \"hussan\"]))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Base Case\n    if len(lst) == 0:\n        return -1\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = len(lst[0])\n    max_item = lst[0]\n    for i in range(len(lst)): \n        if max_len < len(lst[i]): \n            max_len = len(lst[i]) \n            max_item = lst[i] \n    return max_item\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if max_len < len(i):\n            max_len = len(i)\n    print(lst[0])\n    for i in range(len(lst)):\n        if max_len == len(lst[i]):\n            print(lst[i])\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst2=[]\n    for i in range(0,len(lst)):\n        for j in range(0,len(lst[i])):\n            lst2.append(lst[i][j])\n    print(lst2)\n    lst3=[]\n    for i in range(0,len(lst2)):\n        lst3.append(lst2[i])\n    lst4=[]\n    for i in range(0,len(lst3)):\n        if lst3[i] not in lst4:\n            lst4.append(lst3[i])\n    print(lst4)\n    maxlen=0\n    for i in range(0,len(lst)):\n        if len(lst[i])>maxlen:\n            maxlen=len(lst[i])\n    for i in range(0,len(lst)):\n        if len(lst[i])==maxlen:\n            return lst[i]\n    return \"Unable to determine the element\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst)==0:\n        return 0\n    max_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n    for i in range(len(lst)):\n        if len(lst[i]) == max_len:\n            print(i+1, end ='')\n    return max_len\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = len(lst[0])\n    for i in range(1,len(lst)):\n        if(len(lst[i]) > max):\n            max = len(lst[i])\n    return max\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total += i\n    return total*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [1,2,3,4,5]\n    newlist = []\n    for i in list1:\n        i = round(i)\n        newlist.append(i)\n    print(newlist)\n    \n    total = sum(newlist) * len(newlist)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded = [round(i) for i in list1]\n    print(sum(rounded)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_list = 0\n    for i in list1:\n        if type(i) == int:\n            i = round(i)\n            sum_of_list += i\n    print(sum_of_list*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    s=0\n    l=[]\n    for i in list1:\n        i=round(i)\n        l.append(i)\n        s=s+i\n    print(\"Total Sum:\",s)\n    print(\"List of numbers after rounding:\",l)\n    print(\"Length of the list is:\",len(list1))\n    return\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    return sum(map(round, list1)) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    round_list=[]\n    for i in list1:\n        round_list.append(round(i))\n    print(sum(round_list)*len(list1))\n    return round_list\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        sum += list1[i]\n    return sum * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        i = round(i, 1)\n        sum += i\n    print(sum * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            sum += i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(2,n+1,2))\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i=0\n    sum=0\n    while(i<n):\n        sum=sum+(i*i*i)\n        i+=2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Return the sum of the first n natural numbers.\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n+1):\n        sum+=i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if (i%2==0):\n            sum+=i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 2\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total_sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total_sum += i**3\n    return total_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Cube sum of 1..n = n(n+1)/2^2\n    # Cube sum of n+1..2n = (n+1)(n+2)/2^2 - n*(n+1)/2^2\n    return int(((n+1)+(n+2))/2)**2 - int((n*(n+1))/2)**2\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    output = ''\n    for i in test_tup:\n        output += i\n    return output\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return_str = ''\n    for idx in test_tup:\n        return_str += str(idx) +''\n    return return_str[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    # Declare a list\n    list_1 = []\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # TODO: complete this\n    # You can use a for loop to iterate over a tuple\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_string = ''\n    for element in test_tup:\n        new_string +='' + str(element)\n    return new_string\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(\"Original tuple:\")\n    print(test_tup)\n    print(\"\\nConcatenated tuple:\")\n    return ''.join(test_tup)\n    \ndef is_odd(num):\n    '''\n    Write a function to determine if the number is odd or even.\n    '''\n    if num % 2 == 0:\n        print(\"The number is even\")\n    else:\n        print(\"The number is odd\")\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    print(test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3])\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for t in test_tup:\n        result += t + '&'\n    return result[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    str_tup = \" \".join(test_tup)\n    return str_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result_tup = ''\n    for elem in test_tup:\n        result_tup += elem\n        result_tup += ','\n    result_tup = result_tup[:-1]\n    return result_tup\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # Iterate through the loop and add 1 to the current number. \n    # After the loop, calculate the average.\n    total_sum = 0\n    for i in range(1, n+1): \n        total_sum += i**3\n    return total_sum / n\n        \n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg_Of_Cubes = (n * (n + 1) * (n + 2) * (n + 3)) / 4\n    return avg_Of_Cubes\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    res = n * (n + 1) * (2 * n + 1) / 6\n    return res\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    return sum([i**3 for i in range(1,n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i ** 3\n    return sum\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + i**3\n    return(sum/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**3\n    return sum/(n**3)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0;\n    for i in range(1, n+1):\n        sum += i**3;\n    return sum/n;\n    \n    \ndef find_Average_Of_Cube_Using_Sum():\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0;\n    n = int(input(\"Enter the Number:\"));\n    for i in range(1, n+1):\n        sum += i**3;\n    return sum/n;\n    \n    "
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if(n>=0):\n        sum=0\n        for i in range(1,n+1):\n            sum=sum+i*i*i\n        print(\"average of cubes of first n natural numbers: \",sum/(n*n*n))\n    else:\n        print(\"please enter a positive value.\")\n        \n    \nfind_Average_Of_Cube(10)\nfind_Average_Of_Cube(11)\nfind_Average_Of_Cube(1)\nfind_Average_Of_Cube(0)\nfind_Average_Of_Cube(-1)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # solution 2\n    rear = []\n    for i in test_tuple:\n        rear.append(i[-1])\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(word[::-1] for word in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print (test_tuple)\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(test_tuple[1])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    list_rear = []\n    for i in test_tuple:\n        list_rear.append(i[-1])\n    return list_rear\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        result.append(i[::-1])\n    return tuple(result)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if type(list1[i]) == list: \n            count = count + count_element_in_list(list1[i], x) \n        elif list1[i] == x: \n            count = count + 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # return len([i for i in list1 if x in i])\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count+1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == type([]):\n            if x in i:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        list2 = list1[i]\n        for j in range(len(list2)):\n            if list2[j] == x:\n                count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    evennums = []\n    for n in nums:\n        if n % 2 == 0:\n            evennums.append(n)\n    return evennums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x % 2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = []\n    for n in nums:\n        if n % 2!= 0:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    if nums%2==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_nums = []\n    for n in nums:\n        if n % 2 == 1:\n            new_nums.append(n)\n    return new_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = []\n    for num in nums:\n        if num%2!= 0:\n            odd_nums.append(num)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new_list = []\n    for i in nums:\n        if i % 2 == 1:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Your code here\n    return list(filter(lambda n: n%2, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    #d = int(dt[8:10])\n    #m = int(dt[5:7])\n    #y = int(dt[0:4])\n    #date = str(d)+'-'+str(m)+'-'+str(y)\n    #print(date)\n    #return date\n    return '{}-{}-{}'.format(dt[8:10], dt[5:7], dt[0:4])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt[0], dt[2] = dt[2], dt[0]\n    dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    m = re.match('(\\d{4})-(\\d{2})-(\\d{2})', dt)\n    dt = m.group(1) + '-' + m.group(2) + '-' + m.group(3)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt[:4]+'-'+dt[5:7]+'-'+dt[8:]\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(\"[-]\", \"\", dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return dt[8:10]+'-'+dt[5:7]+'-'+dt[:4]\ndef count_all_freq(lst):\n    '''\n    Write a function that counts the number of times each element in a list occurs.\n    '''\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] +=1\n        else:\n            count[i] =1\n    return count\ndef check_if_string_is_palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome and False otherwise.\n    '''\n    s1 = s.lower()\n    s2 = s1[::-1]\n    if s1 == s2:\n        return True\n    else:\n        return False\ndef check_if_string_is_pangram(s):\n    '''\n    Write a function that returns True if a string contains every letter of the alphabet.\n    '''\n    #s = \"The quick brown fox jumps over the lazy dog\"\n    d = {}\n    for i in range(ord('a'), ord('z')+1):\n        d[chr(i)] = 0\n    for i in s:\n        if i in d:\n            d[i] += 1\n    for i in d:\n        if d[i] == 0:\n            return False\n    return True\ndef count_substring(s, sub):\n    '''\n    Write a function that returns the number of occurrences of a substring in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(sub)] == sub:\n            count += 1\n    return count\ndef is_valid_ipv4(ip):\n    '''\n    Write a function that checks if a string is a valid IPv4 address.\n    '''\n    pattern = re.compile(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$\")\n    if pattern.match(ip):\n        return True\n    return False\ndef find_longest_word(lst):\n    '''\n    Write a function that returns the longest word in a list of words.\n    '''\n    longest_word = ''\n    for i in lst:\n        if len(i) > len(longest_word):\n            longest_word = i\n    return longest_word\ndef is_valid_email(s):\n    '''\n    Write a function that checks if a string is a valid email address.\n    '''\n    pattern = re.compile(\"(^[a-zA-Z0-9_+]+)@([a-zA-Z0-9]+).([a-zA-Z0-9]+)\")\n    if pattern.match(s):\n        return True\n    return False\ndef find_common_characters(s1, s2):\n    '''\n    Write a function that returns a list of common characters between two strings.\n    '''\n    common = []\n    for i in s1:\n        if i in s2 and i not in common:\n            common.append(i)\n    return common\ndef decimal_to_binary(num):\n    '''\n    Write a function that converts decimal to binary.\n    '''\n    decimal_num = int(num)\n    binary_num = bin(decimal_num).replace(\"0b\", \"\")\n    return binary_num\ndef binary_to_decimal(num):\n    '''\n    Write a function that converts binary to decimal.\n    '''\n    binary_num = str(num)\n    decimal_num = 0\n    for i in range(0, len(binary_num)):\n        decimal_num += int(binary_num[i])*(2**(len(binary_num)-i-1))\n    return decimal_num\ndef find_missing_number(lst):\n    '''\n    Write a function that finds the missing number in a list of consecutive numbers.\n    '''\n    lst.sort()\n    count = 0\n    for i in range(0, len(lst)):\n        if i == 0:\n            if lst[i]!= lst[i+1]:\n                missing_num = lst[i] + 1\n        elif i == len(lst)-1:\n            if lst[i]!= lst[i-1]:\n                missing_num = lst[i] - 1\n        else:\n            if lst[i]!= lst[i+1] and lst[i]!= lst[i-1]:\n                missing_num = lst[i] + 1\n        count += 1\n    return missing_num\ndef is_unique_chars(s):\n    '''\n    Write a function that checks if a string has all unique characters.\n    '''\n    s = s.lower()\n    chars = []\n    for i in s:\n        if i not in chars:\n            chars.append(i)\n    if len(chars) == len(s):\n        return True\n    else:\n        return False\ndef encrypt_sentence(s):\n    '''\n    Write a function that takes a string as input and returns the encrypted string for it.\n    '''\n    lst = []\n    s = s.lower()\n    for i in s:\n        if i =='':\n            lst.append(' ')\n        elif i == 'a':\n            lst.append('.')\n        elif i == 'b':\n            lst.append('-')\n        elif i == 'c':\n            lst.append('!')\n        elif i == 'd':\n            lst.append('\"')\n        elif i == 'e':\n            lst.append('&')\n        elif i == 'f':\n            lst.append('?')\n        elif i == 'g':\n            lst.append('%')\n        elif i == 'h':\n            lst.append('$')\n        elif i == 'i':\n            lst.append('+')\n        elif i == 'j':\n            lst.append('*')\n        elif i == 'k':\n            lst.append('/')\n        elif i == 'l':\n            lst.append('\\\\')\n        elif i =='m':\n            lst.append('@')\n        elif i == 'n':\n            lst.append('(')\n        elif i == 'o':\n            lst.append(')')\n        elif i == 'p':\n            lst.append('#')\n        elif i == 'q':\n            lst.append('|')\n        elif i == 'r':\n            lst.append(' ')\n        elif i =='s':\n            lst.append('_')\n        elif i == 't':\n            lst.append(')')\n        elif i == 'u':\n            lst.append('=')\n        elif i == 'v':\n            lst.append('~')\n        elif i == 'w':\n            lst.append('^')\n        elif i == 'x':\n            lst.append('{')\n        elif i == 'y':\n            lst.append('}')\n        elif i == 'z':\n            lst.append('`')\n        else:\n            lst.append(i)\n    return lst\ndef remove_duplicate(lst):\n    '''\n    Write a function that removes all duplicates from a list.\n    '''\n    return list(dict.fromkeys(lst))\ndef find_smallest_and_largest(lst):\n    '''\n    Write a function that finds the smallest and largest elements in a list.\n    '''\n    smallest_num = lst[0]\n    largest_num = lst[0]\n    for i in lst:\n        if i < smallest_num:\n            smallest_num = i\n        elif i > largest_num:\n            largest_num = i\n    retur"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if type(dt)!= str:\n        raise TypeError('Incorrect format for the date.')\n    if re.search(r'\\d{4}-\\d{2}-\\d{2}',dt):\n        dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})','\\\\3-\\\\2-\\\\1',dt)\n        return dt\n    raise TypeError('Incorrect format for the date.')\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months_dict = {'01':'Jan', '02':'Feb', '03':'Mar', '04':'Apr', '05':'May', '06':'Jun', '07':'Jul', '08':'Aug', '09':'Sep', '10':'Oct', '11':'Nov', '12':'Dec'}\n    return (dt[8:]+'-'+months_dict[dt[5:7]]+'-'+dt[:4])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = re.findall(r'\\d+', dt)\n    date_format = '-'.join(date_format[1:3]) + '-' + date_format[0] + '-' + date_format[3:]\n    return date_format\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if isinstance(dt, str):\n        dt = dt.split('-')\n        return '-'.join(dt[::-1])\n    return \"Date should be in yyyy-mm-dd format.\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sub_list_count = len(my_list) // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        i = gap\n        while i < len(my_list):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n            i += 1\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            while i >= gap and my_list[i] < my_list[i - gap]:\n                my_list[i], my_list[i - gap] = my_list[i - gap], my_list[i]\n                i -= gap\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # assume that the list is an array with integers\n    # code your function here\n    # start with the biggest gap (length of array)\n    gap = len(my_list)//2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            # compare each element with its neighbours, move to right if it is greater\n            # also keep track of the original position of each element, swap the element with its original position\n            # if the original position is greater than the current position, swap again\n            while my_list[i] < my_list[i-gap]:\n                temp = my_list[i]\n                my_list[i] = my_list[i-gap]\n                my_list[i-gap] = temp\n                i = i-gap\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = size // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # start with a big gap, then reduce the gap\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            # shift items greater than temp, to the right\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            # place temp in its correct location\n            my_list[j] = temp\n        # prepare to do next iteration\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([i & j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n    \ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    return tuple(x | y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        tup_result = ()\n        for i in range(len(test_tup1)):\n            if type(test_tup1[i]) == type(test_tup2[i]) == int:\n                tup_result += (test_tup1[i] & test_tup2[i],)\n            elif type(test_tup1[i]) == type(test_tup2[i]) == tuple:\n                tup_result += (and_tuples(test_tup1[i], test_tup2[i]),)\n        return tup_result\n    else:\n        raise ValueError('Input tuples must have the same length')\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (lambda x,y: x and y) (test_tup1, test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(item1 & item2 for item1, item2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    test_tup1 = (1, 0, 5, 6, 0, 1)\n    test_tup2 = (0, 3, 0, 4, 0, 1)\n    test_tup1, test_tup2\n    result = tuple(set(test_tup1).intersection(test_tup2))\n    print(result)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] & test_tup2[0]), (test_tup1[1] & test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    res_tup = ()\n    for ele1, ele2 in zip(test_tup1, test_tup2):\n        res_tup = res_tup + (ele1 & ele2,)\n    return res_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([tuple([i, j]) for i, j in zip(test_tup1, test_tup2) if i == j])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    def f(x):\n        return a*x**2 + b*x + c\n    return f\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0: \n        return 'the function is not a parabola'\n    else:\n        return ((3*b**2-9*a*c)/(27*a**2))**(1/3)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if not (isinstance(a, (int, float)) and isinstance(b, (int, float)) and isinstance(c, (int, float))):\n        return 'Invalid input.'\n    if a == 0:\n        return 'Not a parabola.'\n    else:\n        return c/a\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if (b ** 2 - 4 * a * c) >= 0:\n        x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a) \n        x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a) \n        return (x1, x2)\n    else:\n        return 'No directrix'\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    \n    D = b*b - 4*a*c \n    if D>0:\n        return ((-b+math.sqrt(D))/(2*a)), ((-b-math.sqrt(D))/(2*a))\n    elif D == 0:\n        return (-b/(2*a))\n    else:\n        return \"Not defined\"\n        \n    \ndef parabola_vertex(a, b, c): \n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    import math\n    \n    D = b*b - 4*a*c \n    if D>0:\n        return ((-b-math.sqrt(D))/(2*a)), ((-b+math.sqrt(D))/(2*a))\n    elif D == 0:\n        return (-b/(2*a))\n    else:\n        return \"Not defined\"\n        \n        \ndef parabola_focus(a, b, c): \n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    import math\n    \n    D = b*b - 4*a*c \n    if D>0:\n        return (-b+math.sqrt(D))/(2*a), (-b-math.sqrt(D))/(2*a)\n    elif D == 0:\n        return (-b/(2*a)), None\n    else:\n        return \"Not defined\"\n        \n        \ndef parabola_vertex_function(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    \n    return a*(x*x)+b*x+c\n    \n    \ndef parabola_focal_length(a, b, c): \n    '''\n    Write a function to find the focal length of a parabola.\n    '''\n    \n    if b!= 0:\n        return -c/b\n    elif a!= 0:\n        return c*c/a\n    else:\n        return \"Not defined\"\n        \n        \ndef parabola_vertex_function_part1(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (x*x*x+a*x*x+b*x+c)/(x*x)\n    \n    \ndef parabola_vertex_function_part2(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (x*x*x+a*x+b+c)/(x)\n    \n    \ndef parabola_vertex_function_part3(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part4(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (a*x*x+b*x+c)/(x*x)\n    \n    \ndef parabola_vertex_function_part5(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part6(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x*x)\n    \n    \ndef parabola_vertex_function_part7(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part8(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part9(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part10(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part11(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part12(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part13(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part14(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part15(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part16(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part17(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part18(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part19(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part20(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+b*x+c)/(x)\n    \n    \ndef parabola_vertex_function_part21(x, a, b, c):\n    '''\n    Write a function to find the vertex of a parabola using its function.\n    '''\n    return (-a*x*x+"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # There are three parameters, so:\n    # if a = -c, then the directrix is the point\n    # at which the perpendicular line to the equation x^2 + a*x + b crosses the x axis. \n    # a < 0 and b < 0, so the directrix is between the x axis and the point (a, 0). \n    # Find that point.\n    # If a = c, then the directrix is the point at which the y axis crosses the parabola.\n    # If a > c, then the directrix is the point at which the y axis crosses the negative of the parabola.\n    # If a = b = c, then the directrix is the point at which the parabola intersects the y axis.\n    # If a < b < c, then the directrix is the point at which the parabola intersects the x axis.\n    # If a = b > c, then the directrix is the point at which the parabola intersects the y axis.\n    if a < 0 and b < 0:\n        x = -a\n        y = 0\n    elif a == 0 and b < 0:\n        x = 0\n        y = b\n    elif a > 0 and b < 0:\n        x = 0\n        y = -b/a\n    elif a < 0 and b == 0 and c < 0:\n        x = -a\n        y = 0\n    elif a < 0 and b == 0 and c > 0:\n        x = 0\n        y = -c/a\n    elif a > 0 and b == 0 and c < 0:\n        x = 0\n        y = -c/a\n    elif a == 0 and b == 0 and c > 0:\n        x = 0\n        y = c\n    elif a < b and a < c:\n        x = 0\n        y = -b/a\n    elif a > b and a > c:\n        x = 0\n        y = -c/a\n    elif a == b and a > c:\n        x = 0\n        y = -a/c\n    elif a == b and a < c:\n        x = 0\n        y = -a/c\n    return (x,y)\n    \n    \ndef parabola_focus(a, b, c):\n    '''\n    Write a function to find the focus of a parabola.\n    '''\n    # If a = 0, then the directrix is the point at which the y axis crosses the parabola.\n    # If a < 0, then the directrix is the point at which the y axis crosses the negative of the parabola.\n    # If a > 0, then the directrix is the point at which the y axis crosses the parabola.\n    if a == 0:\n        x = 0\n        y = -c/b\n    elif a > 0:\n        x = -(b/(2*a))\n        y = -((b*b/(4*a*a)) - c)**0.5\n    elif a < 0:\n        x = -(b/(2*a))\n        y = -((b*b/(4*a*a)) - c)**0.5\n    return (x,y)\n    \ndef parabola_vertex(a, b, c):\n    '''\n    Write a function to find the vertex of a parabola.\n    '''\n    # If a < 0, then the vertex is the point at which the y axis crosses the negative of the parabola.\n    # If a > 0, then the vertex is the point at which the y axis crosses the parabola.\n    if a < 0:\n        x = -b/(2*a)\n        y = (-(b*b/(4*a*a)) - c)**0.5\n    elif a > 0:\n        x = -b/(2*a)\n        y = (-(b*b/(4*a*a)) - c)**0.5\n    return (x,y)\n    \ndef parabola_line_intersection(m, b, c):\n    '''\n    Write a function to find the point at which two lines intersect.\n    '''\n    # If a < 0, then the point of intersection is the point at which the y axis crosses the negative of the parabola.\n    # If a > 0, then the point of intersection is the point at which the y axis crosses the parabola.\n    if m > 0:\n        x = 0\n        y = -b/(m*m) + c\n    elif m < 0:\n        x = -b/(2*m)\n        y = (-(b*b/(4*m*m)) - c)**0.5\n    return (x,y)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # We know that a parabola x^2 + ax + c = 0 can be represented by y = -x^2 -ax -c / 2a.\n    # Therefore, x = -c / 2a, and y = -x^2 -ax -c / 2a.\n    # We can verify by solving the quadratic formula.\n    # What is the discriminant?\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        print(\"The parabola does not have a directrix.\")\n    elif disc == 0:\n        print(\"The parabola has a directrix.\")\n        x = -b / 2*a\n        print(\"x = \" + str(x))\n    else:\n        print(\"The parabola has a directrix.\")\n        x1 = (-b + math.sqrt(disc)) / (2*a)\n        x2 = (-b - math.sqrt(disc)) / (2*a)\n        print(\"x1 = \" + str(x1))\n        print(\"x2 = \" + str(x2))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                print('The parabola is the unit circle.')\n                return\n            else:\n                print('The equation of the parabola is the line x=%s.' %c)\n                return\n        else:\n            print('The equation of the parabola is the line y=%sx+%s.' %(b, c))\n            return\n    else:\n        d = b**2-4*a*c\n        if d < 0:\n            print('The parabola does not have any directrix.')\n            return\n        elif d == 0:\n            x = -b/(2*a)\n            print('The parabola has one directrix at x=%s.' %x)\n            return\n        else:\n            x1 = (-b+(d**(1/2)))/(2*a)\n            x2 = (-b-(d**(1/2)))/(2*a)\n            print('The parabola has two directrix at x=%s and x=%s.' %(x1, x2))\n            return\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Let the parabola have the form: ax^2 + bx + c = 0.\n    # The directrix is the line given by: x = -b/2a.\n    return -b/(2*a)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1).intersection(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not (list1 or list2):\n        return False\n    else:\n        if list1 and list2:\n            for i in list1:\n                for j in list2:\n                    if i == j:\n                        return True\n                    else:\n                        continue\n        else:\n            return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if set(list1) & set(list2)!= set():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        shorter = list1\n        longer = list2\n    else:\n        shorter = list2\n        longer = list1\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < 0 or base2 < 0:\n        raise ValueError('Base cannot be negative')\n    area = ((base1 + base2) * height) / 2\n    return area\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) * height / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_total = base1 + base2\n    base_total_square = base_total**2\n    height_total = height * 2\n    median = base_total_square / height_total\n    median = median**(1/2)\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\ndef area_of_trapezium(base1,base2,height):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return base1*base2*height\ndef perimeter_of_trapezium(base1,base2,height):\n    '''\n    Write a function to find the perimeter of a trapezium.\n    '''\n    return 2*(base1+base2)\ndef volume_of_trapezium(base1,base2,height):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    return 0.5*base1*base2*height\ndef surface_area_of_trapezium(base1,base2,height):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    return 2*base1*base2+2*base1*height+2*base2*height\ndef rectangular_prism_surface_area(base,height):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*base*height\ndef rectangular_prism_volume(base,height):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return base*height\ndef volume_of_rectangular_prism_using_semi_perimeter(base,height):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return base*height\ndef area_of_rectangular_prism_using_diagonal(base,height):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return base*height\ndef area_of_rectangular_prism_using_perimeter(base,height):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return base*height\ndef perimeter_of_rectangular_prism_using_diagonal(base,height):\n    '''\n    Write a function to find the perimeter of a rectangular prism.\n    '''\n    return 2*(base+height)\ndef surface_area_of_rectangular_prism_using_diagonal(base,height):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    return 2*base*(base+height)\ndef volume_of_rectangular_prism_using_area(base,height):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return base*height\ndef volume_of_rectangular_prism_using_diagonal(base,height):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    return base*height\ndef area_of_rectangular_prism_using_perimeter(base,height):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return base*height\ndef area_of_sphere(radius):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*radius*radius*pi\ndef volume_of_sphere(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4*radius*radius*pi\ndef volume_of_sphere_using_semi_perimeter(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*radius*radius*pi\ndef volume_of_sphere_using_diagonal(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*pi*radius*radius*radius\ndef volume_of_sphere_using_area(radius):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*pi*radius*radius*radius\ndef area_of_sphere_using_radius(radius):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*radius*radius*pi\ndef area_of_cylinder(radius,height):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*pi*radius*radius+2*pi*radius*height\ndef volume_of_cylinder(radius,height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi*radius*radius*height\ndef volume_of_cylinder_using_semi_perimeter(radius,height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi*radius*radius*height\ndef volume_of_cylinder_using_diagonal(radius,height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return pi*radius*radius*height\ndef area_of_cylinder_using_radius(radius,height):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return pi*radius*radius+pi*radius*height\ndef area_of_cone(radius,height):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return pi*radius*radius+pi*radius*height\ndef volume_of_cone(radius,height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*radius*radius*height/3\ndef volume_of_cone_using_semi_perimeter(radius,height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*radius*radius*height/3\ndef volume_of_cone_using_diagonal(radius,height):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return pi*radius*radius*height/3\ndef area_of_cone_using_radius(radius,height):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return pi*radius*radius+pi*radius*height\ndef volume_of_prism(base,height):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return base*height\ndef volume_of_prism_using_semi_perimeter(base,height):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return base*height\ndef volume_of_prism_using_diagonal(base,height):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return base*height\ndef area_of_prism_using_side(base,height):\n    '''\n    Write a function to find the area of a prism.\n    '''\n    return base*height\ndef volume_of_pyramid(base,height):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 0.5*base*base*height\ndef volume_of_pyramid_using_semi_perimeter(base,height):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 0.5*base*base*height\ndef volume_of_pyramid_using_diagonal(base,height):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return (base*base+base*height)/3\ndef area_of_pyramid_using_side(base,height):\n    '''\n    Write a function to find the area of a pyramid.\n    '''\n    return base*base+base*height\ndef area_of_triangle(side1,side2,side3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*side1*side2\ndef area_of_triangle_using_perimeter(side1,side2,side3):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*side1*side2\ndef area_of_triangle_usin"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    median_length = 0.5 * (base1 + base2) * height\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 > base2:\n        base1, base2 = base2, base1\n    if height <= 0:\n        return 0\n    if base1 == base2 and height == 1:\n        return 1\n    return 0.5 * (base1 + base2) + 0.5 * height * ((base1 - base2) / height) ** 2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_total = base1 + base2\n    base_average = base_total/2\n    median = (base_average * height)/2\n    print(median)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_area = (base1 + base2)/2 * height\n    trapezium_perimeter = base1 + base2 + height\n    return trapezium_area, trapezium_perimeter\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium = 0.5 * (base1 + base2) * height\n    return trapezium\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n        else:\n            return False\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if (number > arr[0]):\n        return \"Number is greater than array elements\"\n    else:\n        return \"Number is less than array elements\"\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number < arr[0]:\n        print(f\"Number {number} is less than {arr[0]}\")\n    else:\n        for i in range(len(arr)):\n            if number > arr[i]:\n                continue\n            else:\n                print(f\"Number {number} is greater than {arr[i]}\")\n                break\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number < num:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return any(number > arr_item for arr_item in arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if number > arr[0] else False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    result = re.findall(r'ab+', text)\n    return result!= []\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.+?b')\n    if pattern.search(text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = re.compile(r'(.)\\1*')\n    m = p.search(text)\n    if m:\n        print(m.group(1))\n    else:\n        print(None)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match_object = re.search('ab*', text)\n    if match_object:\n        return match_object.group()\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text_match = re.search(r'ab+', text)\n    if text_match is not None:\n        print('String matched')\n    else:\n        print('String not matched')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat = 'a.+b*'\n    result = re.search(pat, text)\n    if result:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # return bool(re.search(r'ab+', text))\n    return bool(re.search(r'ab*', text))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = 'this is a test'\n    return re.search(r'ab+', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = re.compile(r'ab*')\n    # pattern = re.compile(r'ab*', re.IGNORECASE)\n    # pattern = re.compile(r'ab+')\n    # pattern = re.compile(r'ab+', re.IGNORECASE)\n    # pattern = re.compile(r'ab{3,}')\n    # pattern = re.compile(r'ab{2,}')\n    # pattern = re.compile(r'ab{2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'ab{1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'ab{1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'ab{0,1}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){1,3}')\n    # pattern = re.compile(r'a(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab)*', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}')\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){1,3}')\n    # pattern = re.compile(r'a(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'a(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){3,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){0,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){1,3}', re.IGNORECASE)\n    # pattern = re.compile(r'(ab){2,3}', re.IGNORE"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = re.search(r'a.*?b', text)\n    if text:\n        print(text.group())\n    else:\n        print('No match!')\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    num = n%10\n    return num\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n % 10)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n >= 10:\n        n = n/10\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n    \n    \ndef sum_of_digits(n) :\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    return sum(map(int, str(n)))\n    \n    \ndef sort_strings(s) :\n    '''\n    Write a python function to sort the strings in the list based on their first character. \n    '''\n    return sorted(s, key = lambda x : x[0])\n    \n    \ndef list_of_unique_strings(s) :\n    '''\n    Write a python function to print unique strings in a list.\n    '''\n    return sorted(set(s))\n    \n    \ndef list_of_integers(s) :\n    '''\n    Write a python function to convert the strings in a list into integers and print the integers.\n    '''\n    return list(map(int, s))\n    \n    \ndef rotate_list(l, n) :\n    '''\n    Write a python function to rotate the list by n elements.\n    '''\n    return l[n:] + l[:n]\n    \n    \ndef remove_duplicates(s) :\n    '''\n    Write a python function to remove duplicate strings from the given list of strings.\n    '''\n    return list(dict.fromkeys(s))\n    \n    \ndef reverse_string(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \n    \ndef find_missing_number(l) :\n    '''\n    Write a python function to print the missing number in the given list of integers.\n    '''\n    l.sort()\n    for i in range(len(l)) :\n        if i!= l[i] :\n            return i\n    return len(l)\n    \n    \ndef find_missing_number2(l) :\n    '''\n    Write a python function to print the missing number in the given list of integers.\n    '''\n    return sum(range(1, len(l)+1)) - sum(l)\n    \n    \ndef find_missing_number3(l) :\n    '''\n    Write a python function to print the missing number in the given list of integers.\n    '''\n    return (1 + len(l)) * len(l) / 2 - sum(l)\n    \n    \ndef find_missing_number4(l) :\n    '''\n    Write a python function to print the missing number in the given list of integers.\n    '''\n    return sum([i*i for i in range(1, len(l)+1)]) - sum([l[i] for i in range(len(l))])\n    \n    \ndef find_missing_number5(l) :\n    '''\n    Write a python function to print the missing number in the given list of integers.\n    '''\n    return sum([1+i for i in range(len(l))]) - sum(l)\n    \n    \ndef reverse_each_word(s) :\n    '''\n    Write a python function to reverse each word in the given string.\n    '''\n    return''.join([word[::-1] for word in s.split(' ')])\n    \n    \ndef count_vowels(s) :\n    '''\n    Write a python function to count the vowels in the given string.\n    '''\n    return len([ch for ch in s if ch in 'aeiou'])\n    \n    \ndef count_vowels2(s) :\n    '''\n    Write a python function to count the vowels in the given string.\n    '''\n    return len([ch for ch in s if ch in 'aeiou'])\n    \n    \ndef count_vowels3(s) :\n    '''\n    Write a python function to count the vowels in the given string.\n    '''\n    return len([ch for ch in s.lower() if ch in 'aeiou'])\n    \n    \ndef vowel_count_with_range(s, a, b) :\n    '''\n    Write a python function to count the vowels in the given string with the range a and b.\n    '''\n    return len([ch for ch in s[a:b] if ch in 'aeiou'])\n    \n    \ndef vowel_count_with_range2(s, a, b) :\n    '''\n    Write a python function to count the vowels in the given string with the range a and b.\n    '''\n    return len([ch for ch in s[a:b] if ch in 'aeiou'])\n    \n    \ndef find_in_list(l, n) :\n    '''\n    Write a python function to print the index of the given number in the list if the number is present. \n    Otherwise, print \"Not Found\".\n    '''\n    return [i for i, e in enumerate(l) if e == n]\n    \n    \ndef find_in_list2(l, n) :\n    '''\n    Write a python function to print the index of the given number in the list if the number is present. \n    Otherwise, print \"Not Found\".\n    '''\n    try :\n        return l.index(n)\n    except ValueError :\n        return 'Not Found'\n    \n    \ndef sum_of_squares(l) :\n    '''\n    Write a python function to print the sum of squares of all the elements in the list.\n    '''\n    return sum([n**2 for n in l])\n    \n    \ndef sum_of_squares2(l) :\n    '''\n    Write a python function to print the sum of squares of all the elements in the list.\n    '''\n    return sum(map(lambda x : x*x, l))\n    \n    \ndef print_stars(n) :\n    '''\n    Write a python function to print the star pattern of the given number.\n    '''\n    for i in range(n) :\n        for j in range(i+1) :\n            print('*', end = '')\n        print()\n    \n    \ndef print_stars2(n) :\n    '''\n    Write a python function to print the star pattern of the given number.\n    '''\n    i = 1\n    while i <= n :\n        for j in range(i) :\n            print('*', end = '')\n        print()\n        i += 1\n    \n    \ndef sum_all_digits_of_string(s) :\n    '''\n    Write a python function to print the sum of all digits of a given string.\n    '''\n    return sum([int(i) for i in s if i.isdigit()])\n    \n    \ndef sum_all_digits_of_string2(s) :\n    '''\n    Write a python function to print the sum of all digits of a given string.\n    '''\n    return sum(map(int, s))\n    \n    \ndef count_substring(s, sub) :\n    '''\n    Write a python function to print the number of times the given substring occurs in the given string.\n    '''\n    return s.count(sub)\n    \n    \ndef count_substring2(s, sub) :\n    '''\n    Write a python function to print the number of times the given substring occurs in the given string.\n    '''\n    return sum([1 for i in range(len(s)-len(sub)+1) if s[i:i+len(sub)] == sub])\n    \n    \ndef string_rotation(s1, s2) :\n    '''\n    Write a python function to print whether the first string is a rotation of the second string or not.\n    '''\n    return s2 in s1+s1\n    \n    \ndef string_rotation2(s1, s2) :\n    '''\n    Write a python function to print whether the first string is a rotation of the second string or not.\n    '''\n    return len(s1) == len(s2) and s2 in s1*2\n    \n    \ndef find_missing_letter(s) :\n    '''\n    Write a python function to find the missing letter in the given string.\n    '''\n    l = [ch for ch in s]\n    return [i for i in range(len(l)) if ord(l[i])!= ord(l[i-1])+1]["
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    while n >= 10:\n        n = sum([int(i) for i in str(n)])\n    return n\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0:\n        return -1\n    elif n < 10:\n        return n\n    else:\n        return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    print(\"last_Digit(\",n,\")\")\n    if n >= 0 and n < 10 :\n        return n\n    else:\n        return (n%10)\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for item in list1:\n        if item < 0:\n            neg_list.append(item)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    for i in list1:\n        if i<0:\n            print(i, end=\" \")\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    i=0\n    list2=[]\n    while i<len(list1):\n        if list1[i]<0:\n            list2.append(list1[i])\n        i=i+1\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res = [x for x in list1 if x < 0]\n    return res\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2 = [i for i in list1 if i < 0]\n    print(list2)\n    return\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos=[]\n    for i in list1:\n        if i<0:\n            neg_nos.append(i)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for x in list1:\n        if x < 0:\n            neg_list.append(x)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [i for i in list1 if i < 0]\n    \nprint(neg_nos([1, -2, -3, 4, -5, 6, -7]))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([x for x in str1 if x%2==0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i not in new_str:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.translate(str1.maketrans('', '', '13579'))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([c for c in str1 if not c % 2])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    import string\n    str2 = ''\n    for i in range(len(str1)):\n        if (i+1)%2 == 0:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    #Remove the Odd Character\n    #:type str: object\n    #:rtype: object\n    #str = \"hello\"\n    #str = list(str)\n    #print(str)\n    #for i in str:\n    #    if i % 2!= 0:\n    #        str.remove(i)\n    #print(str)\n    #return str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join([i for i in str1 if ord(i) % 2 == 0])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([ch for ch in str1 if ch.isdigit()])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(str1[::2])\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = input(\"Enter a string: \")\n    newstr = \"\".join(s for s in str1 if not s%2)\n    print(newstr)\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    total = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            total += 1\n    return total\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == test_list[i][1] and test_list[i][0]!= test_list[i-1][1] and test_list[i-1][0]!= test_list[i][0]:\n            count += 1\n    return count\n    \n    \ndef triples_count_bidirectional(test_list):\n    '''\n    Write a function to count triples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0] and test_list[i][0]!= test_list[i-1][1] and test_list[i-1][0]!= test_list[i][0]:\n                count += 1\n    return count\n    \n    \ndef find_longest_substring(test_string):\n    '''\n    Write a function to find the longest substring in a string.\n    '''\n    substring = ''\n    for i in range(len(test_string)):\n        for j in range(i,len(test_string)):\n            if j-i+1 > len(substring):\n                substring = test_string[i:j+1]\n    return substring\n    \n    \ndef find_longest_palindrome(test_string):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    #Use Manachers Algorithm\n    def manacher_algorithm(string):\n        #find the longest palindrome on the input string\n        string = '#' + '#'.join(string) + '#'\n        #store the longest palindrome's length\n        result = 0\n        #store the longest palindrome's center index\n        center = 0\n        #store the longest palindrome's center index' previous index\n        previous_center = 0\n        #store the longest palindrome's right index\n        right = 0\n        #store the longest palindrome's center index' right index\n        previous_right = 0\n        #store the current string's center index\n        current_center = 0\n        #store the center's previous index\n        current_previous_center = 0\n        #store the center's right index\n        current_right = 0\n        #store the center's previous right index\n        current_previous_right = 0\n        #store the center's previous index\n        current_previous_center = 0\n        #store the center's previous right index\n        current_previous_right = 0\n        #store the center's left index\n        current_left = 0\n        #store the center's previous index\n        current_previous_center = 0\n        #store the center's previous right index\n        current_previous_right = 0\n        #loop each character\n        for i in range(len(string)):\n            #check if current character's left index equals to current center's index\n            if i == current_center:\n                #set current center's left index\n                current_left = current_center\n                #set current center's previous index\n                current_previous_center = current_center\n            #check if current character's right index equals to current center's index\n            if i == current_right:\n                #set current center's right index\n                current_right = current_center\n                #set current center's previous right index\n                current_previous_right = current_center\n            #check if current character is a palindrome\n            if string[i] == string[current_previous_right + current_previous_center - current_left]:\n                #set current center's previous right index\n                current_previous_right = current_right\n                #set current center's previous right index\n                current_previous_center = current_center\n                #move current center's previous right index to current center's right index\n                current_center = current_right\n                #move current center's previous right index to current center's right index\n                current_previous_right = current_right\n            #move current center's left index to current center's previous right index\n            current_left = current_previous_right\n            #move current center's right index to current center's previous left index\n            current_right = current_previous_center\n            #move current center's left index to current center's right index\n            current_center = current_right\n            #move current center's left index to current center's previous left index\n            current_previous_left = current_center\n            #move current center's right index to current center's previous right index\n            current_previous_right = current_center\n            #set current center's previous index\n            current_previous_center = current_center\n            #set current center's previous right index\n            current_previous_right = current_center\n            #set current center's previous left index\n            current_previous_left = current_center\n            #set current center's left index\n            current_left = i\n            #set current center's right index\n            current_right = i\n            #check if current character's left index equals to current center's index\n            if i == current_center:\n                #set current center's left index\n                current_left = current_center\n                #set current center's previous index\n                current_previous_center = current_center\n            #check if current character's right index equals to current center's index\n            if i == current_right:\n                #set current center's right index\n                current_right = current_center\n                #set current center's previous right index\n                current_previous_right = current_center\n            #check if the character is a palindrome\n            if string[i] == string[current_previous_right + current_previous_center - current_left]:\n                #set current center's previous right index\n                current_previous_right = current_right\n                #set current center's previous right index\n                current_previous_center = current_center\n                #set current center's right index\n                current_center = current_right\n                #move current center's previous right index to current center's right index\n                current_previous_right = current_right\n            #move current center's left index to current center's previous right index\n            current_left = current_previous_right\n            #move current center's right index to current center's previous left index\n            current_right = current_previous_center\n            #move current center's left index to current center's right index\n            current_center = current_right\n            #move current center's left index to current center's previous left index\n            current_previous_left = current_center\n            #move current center's right index to current center's previous right index\n            current_previous_right = current_center\n            #move current center's left index to current center's previous left index\n            current_previous_left = current_center\n            #set current center's previous index\n            current_previous_center = current_center\n            #set current center's previous right index\n            current_previous_right = current_center\n            #set current center's previous left index\n            current_previous_left = current_center\n            #set current center's left index\n            current_left = i\n            #set current center's right index\n            current_right = i\n            #set current center's left index\n            current_left = i\n            #set current center's right index\n            current_right = i\n            #set current center's previous left index\n            current_previous_left = i\n            #set current center's previous right index\n            current_previous_right = i\n            #set current center's left index\n            current_left = i\n            #set current center's right index\n            current_right = i\n            #set current center's previous left index\n            current_previous_left = i\n            #set current center's previous right index\n            current_previous_right = i\n            #set current center's left index\n            current_left = i\n            #set current center's right index\n            current_right = i\n            #set current center's previous left index\n            current_previous_left = i\n            #set current center's previous right index\n            current_previous_right = i\n            #set current center's left index\n            current_left = i\n            #set current center's right index\n            current_right = i\n            #set current center's previous left index\n            current_pr"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count=0\n    for i in range(0,len(test_list)):\n        for j in range(i,len(test_list)):\n            if test_list[i][0]==test_list[j][1] and test_list[i][1]==test_list[j][0]:\n                count+=1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i] == test_list[j - 1]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = [0,0,0,0]\n    for i in range(len(test_list)):\n        # check if the numbers in the tuple are equal\n        if test_list[i][0] == test_list[i][1]:\n            bidirectional[0] += 1\n        # check if the numbers in the tuple are positive or negative\n        elif test_list[i][0] < 0 and test_list[i][1] < 0:\n            bidirectional[1] += 1\n        elif test_list[i][0] > 0 and test_list[i][1] > 0:\n            bidirectional[2] += 1\n        elif test_list[i][0] < 0 and test_list[i][1] > 0:\n            bidirectional[3] += 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    from collections import Counter\n    list_all_dict = {}\n    for index_1 in range(len(test_list)):\n        list_first_dict = {}\n        for index_2 in range(len(test_list)):\n            if index_1 == index_2:\n                continue\n            else:\n                if test_list[index_1] == test_list[index_2]:\n                    try:\n                        list_first_dict[test_list[index_1]].append(test_list[index_2])\n                    except:\n                        list_first_dict[test_list[index_1]] = [test_list[index_2]]\n        list_all_dict[test_list[index_1]] = list_first_dict\n    return len(list_all_dict.items())\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional = 0\n    for i in range(len(test_list)-1):\n        for j in range(len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                bidirectional = bidirectional + 1\n    return bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    sum = 0\n    for item in test_list:\n        if item == item[::-1]:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                counter+=1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if not isinstance(test_list, list):\n        return\n    if len(test_list) < 2:\n        return 0\n    count = 0\n    for i in range(len(test_list)):\n        if test_list[i] > test_list[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 1\n    sum = 0\n    while i < len(L):\n        sum = sum + L[i]\n        i = i + 2\n    sum = sum + L[0]\n    return sum\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    new_L = \"\"\n    for i in L:\n        new_L += str(i)\n    return int(new_L)\n    \n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum = 0\n    for i in L:\n        sum = sum*10 + i\n    return sum\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(i) for i in L]\n    L = ''.join(L)\n    return int(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L.sort()\n    for i in range(0, len(L)-1):\n        L[i+1] = L[i] + L[i+1]\n    print(L)\n    return(L[len(L)-1])\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    i = 0\n    a = 0\n    while i < len(L):\n        a = a + (10 ** i) * L[i]\n        i = i + 1\n    return a\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(l) for l in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(n) for n in L]))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    verb = []\n    adverb = []\n    for word, pos in nltk.pos_tag(nltk.word_tokenize(text)):\n        if pos == 'RB' or pos == 'RBR' or pos == 'RBS':\n            adverb.append(word)\n        else:\n            verb.append(word)\n    return adverb[0], verb\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = {}\n    pattern = r'[\\w]+ly'\n    adverb = re.findall(pattern, text)\n    pattern1 = r'[\\w]+ness'\n    adverb_sub = re.findall(pattern1, text)\n    for i in adverb_sub:\n        text = text.replace(i, '')\n    pattern2 = r'[\\w]+est'\n    adverb_est = re.findall(pattern2, text)\n    for j in adverb_est:\n        text = text.replace(j, '')\n    adverb.extend(adverb_sub)\n    adverb.extend(adverb_est)\n    print(adverb)\n    adverb_set = set(adverb)\n    for adverb in adverb_set:\n        positions = [m.start() for m in re.finditer(adverb, text)]\n        adverb_position[adverb] = positions\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list_adverb = []\n    #positions = []\n    \n    list_adverb = re.findall(r'\\b(?<=adverb)\\w+\\b', text)\n    #print(list_adverb)\n    \n    for index, item in enumerate(text):\n        #print(index, item)\n        if item in list_adverb:\n            #print(index)\n            return index\n            \ndef find_adverb_position2(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    list_adverb = []\n    #positions = []\n    \n    list_adverb = re.findall(r'\\b(?<=adverb)\\w+\\b', text)\n    print(list_adverb)\n    \n    for index, item in enumerate(text):\n        #print(index, item)\n        if item in list_adverb:\n            print(index)\n            return index\n    \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    list_noun = []\n    #positions = []\n    \n    list_noun = re.findall(r'\\b(?<=noun)\\w+\\b', text)\n    print(list_noun)\n    \n    for index, item in enumerate(text):\n        #print(index, item)\n        if item in list_noun:\n            print(index)\n            return index\n            \ndef find_noun_position2(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    list_noun = []\n    #positions = []\n    \n    list_noun = re.findall(r'\\b(?<=noun)\\w+\\b', text)\n    print(list_noun)\n    \n    for index, item in enumerate(text):\n        #print(index, item)\n        if item in list_noun:\n            print(index)\n            return index\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return re.findall(\"ADVB\", text)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # return a list containing all adverbs and their positions in the text\n    # Note: adverb is defined as any sequence of English words ending in \"ly\".\n    # Note: position is defined as the index in the text, i.e. the first word has position 0.\n    # Note: if there is no adverb, return an empty list.\n    # Note: if there are multiple adverbs, return a list containing the first adverb and its position.\n    pattern = r\"\\w*ly$\"\n    adverb_list = []\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            adverb_list.append([i, text[i]])\n    return adverb_list\ndef find_adverb_sentiment(text):\n    '''\n    Write a function to find the sentiment of the adverb using Vader.\n    Note: Vader sentiment is defined as the compound sentiment score on a scale of -1 to +1\n    '''\n    # return the sentiment of the first adverb in the text\n    # Note: if there is no adverb, return an empty list\n    # Note: Vader sentiment is defined as the compound sentiment score on a scale of -1 to +1\n    from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n    analyzer = SentimentIntensityAnalyzer()\n    analyzer = analyzer.polarity_scores(text)\n    return analyzer['compound']\ndef is_question(text):\n    '''\n    Write a function to check whether the given text is a question.\n    '''\n    # return True if it is a question, return False otherwise\n    pattern = r\"\\w*\\?\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef find_verb(text):\n    '''\n    Write a function to find the verbs in the text.\n    '''\n    # return a list of verbs in the text\n    # Note: verb is defined as any sequence of English words ending in \"ed\", \"ing\", or a gerund.\n    # Note: if there is no verb, return an empty list.\n    # Note: if there are multiple verbs, return a list containing the first verb and its position.\n    pattern = r\"\\w*\\ed$|\\w*\\ing$|\\w*\\s\\w+ed$|\\w*\\s\\w+ing$|\\w*\\s\\w+s$|\\w*\\s\\w+ing\\s\\w+\\s\\w+ing$|\\w*\\s\\w+ing\\s\\w+s\\s\\w+ing$\"\n    verb_list = []\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            verb_list.append([i, text[i]])\n    return verb_list\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    # return a list containing all verbs and their positions in the text\n    # Note: verb is defined as any sequence of English words ending in \"ed\", \"ing\", or a gerund.\n    # Note: position is defined as the index in the text, i.e. the first word has position 0.\n    # Note: if there is no verb, return an empty list.\n    # Note: if there are multiple verbs, return a list containing the first verb and its position.\n    pattern = r\"\\w*\\ed$|\\w*\\ing$|\\w*\\s\\w+ed$|\\w*\\s\\w+ing$|\\w*\\s\\w+s$|\\w*\\s\\w+ing\\s\\w+\\s\\w+ing$|\\w*\\s\\w+ing\\s\\w+s\\s\\w+ing$\"\n    verb_list = []\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            verb_list.append([i, text[i]])\n    return verb_list\ndef find_verb_sentiment(text):\n    '''\n    Write a function to find the sentiment of the verb using Vader.\n    Note: Vader sentiment is defined as the compound sentiment score on a scale of -1 to +1\n    '''\n    # return the sentiment of the first verb in the text\n    # Note: if there is no verb, return an empty list\n    # Note: Vader sentiment is defined as the compound sentiment score on a scale of -1 to +1\n    from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n    analyzer = SentimentIntensityAnalyzer()\n    analyzer = analyzer.polarity_scores(text)\n    return analyzer['compound']\ndef is_question(text):\n    '''\n    Write a function to check whether the given text is a question.\n    '''\n    # return True if it is a question, return False otherwise\n    pattern = r\"\\w*\\?\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef find_noun(text):\n    '''\n    Write a function to find the nouns in the text.\n    '''\n    # return a list of nouns in the text\n    # Note: noun is defined as any sequence of English words ending in \"ly\".\n    # Note: if there is no noun, return an empty list.\n    # Note: if there are multiple nouns, return a list containing the first noun and its position.\n    pattern = r\"\\w*ly$\"\n    noun_list = []\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            noun_list.append([i, text[i]])\n    return noun_list\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    # return a list containing all nouns and their positions in the text\n    # Note: noun is defined as any sequence of English words ending in \"ly\".\n    # Note: position is defined as the index in the text, i.e. the first word has position 0.\n    # Note: if there is no noun, return an empty list.\n    # Note: if there are multiple nouns, return a list containing the first noun and its position.\n    pattern = r\"\\w*ly$\"\n    noun_list = []\n    for i in range(len(text)):\n        if re.search(pattern, text[i]):\n            noun_list.append([i, text[i]])\n    return noun_list\ndef find_noun_sentiment(text):\n    '''\n    Write a function to find the sentiment of the noun using Vader.\n    Note: Vader sentiment is defined as the compound sentiment score on a scale of -1 to +1\n    '''\n    # return the sentiment of the first noun in the text\n    # Note: if there is no noun, return an empty list\n    # Note: Vader sentiment is defined as the compound sentiment score on a scale of -1 to +1\n    from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n    analyzer = SentimentIntensityAnalyzer()\n    analyzer = analyzer.polarity_scores(text)\n    return analyzer['compound']\ndef is_question(text):\n    '''\n    Write a function to check whether the given text is a question.\n    '''\n    # return True if it is a question, return False otherwise\n    pattern = r\"\\w*\\?\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\ndef find_object(text):\n    '''\n    Write a function to find the objects in the text.\n    '''\n    # return a list of objects in the text\n    # Note: object is defined as any sequence of English words ending in \"ed\", \"ing\", or a gerund.\n    # Note: if there is no object, return an empty list.\n    # Note: if there are multiple objects, return a list containing the first object and its position.\n    pattern = r\"\\w*\\ed$|\\w*\\ing$|\\w*\\s\\w+ed$|\\w*\\s\\w+ing$|\\w*\\s\\w+s$|\\w*\\s\\w+ing\\s\\w+\\s\\w"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverbs_list = ['so','so far','so far as', 'apparently', 'appears', 'appear', 'appreciably', 'appreciate', 'appreciated', 'appreciating', 'appreciatingly', 'appreciative', 'appreciatively', 'approximately', 'aren', 'around', 'as', 'as a', 'as if', 'as soon as', 'as though', 'as though', 'as though', 'as well as', 'as well as', 'as though', 'as well', 'as though', 'as though', 'as well', 'as well as', 'as well as', 'as well as', 'as well as', 'as well', 'as well', 'as if', 'as if', 'as if', 'as though', 'as though', 'as though', 'as though', 'as well', 'as well', 'as well', 'as though', 'as though', 'as though', 'as though', 'as well', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', 'as well as', "
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = []\n    \n    pattern_noun = r'([a-z]|[A-Z])+\\s(is|was|are|were|am|wasn\u2019t|isn\u2019t|could|can|would|couldn\u2019t|can\u2019t|need|ought|shall|should|have|had|has|hadn\u2019t|haven\u2019t|have|hasn\u2019t|shouldn\u2019t|shouldn\u2019t|must|mustn\u2019t|shalln\u2019t|shouldn\u2019t|do|does|did|doesn\u2019t|doesn\u2019t|didn\u2019t|should|shouldn\u2019t|shouldn\u2019t|might|mightn\u2019t|mightn\u2019t|mustn\u2019t|mustn\u2019t|wouldn\u2019t|wouldn\u2019t|shall|shalln\u2019t|shouldn\u2019t|do|does|did|doesn\u2019t|doesn\u2019t|didn\u2019t|would|wouldn\u2019t|will|willn\u2019t|shall|shalln\u2019t|should|shouldn\u2019t|might|mightn\u2019t|mightn\u2019t|must|mustn\u2019t|mustn\u2019t|might|mightn\u2019t|mightn\u2019t|shall|shalln\u2019t|should|shouldn\u2019t|do|does|did|doesn\u2019t|doesn\u2019t|didn\u2019t)'\n    pattern_verb = r'(is|was|are|were|am|wasn\u2019t|isn\u2019t|could|can|would|couldn\u2019t|can\u2019t|need|ought|shall|should|have|had|has|hadn\u2019t|haven\u2019t|have|hasn\u2019t|shouldn\u2019t|shouldn\u2019t|must|mustn\u2019t|shalln\u2019t|shouldn\u2019t|do|does|did|doesn\u2019t|doesn\u2019t|didn\u2019t|should|shouldn\u2019t|shouldn\u2019t|might|mightn\u2019t|mightn\u2019t|mustn\u2019t|mustn\u2019t|wouldn\u2019t|wouldn\u2019t|shall|shalln\u2019t|shouldn\u2019t|do|does|did|doesn\u2019t|doesn\u2019t|didn\u2019t|will|willn\u2019t|shall|shalln\u2019t|should|shouldn\u2019t|might|mightn\u2019t|mightn\u2019t|must|mustn\u2019t|mustn\u2019t|wouldn\u2019t|wouldn\u2019t|shall|shalln\u2019t|should|shouldn\u2019t|do|does|did|doesn\u2019t|doesn\u2019t|didn\u2019t)'\n    pattern_adverb = r'(very|vary|few|much|many|a little bit|a little bit|a little|a little|almost|as much|almost|a lot|a lot|a bit|a bit|a couple of|a couple of|a little|a little|a lot of|a lot of|a couple of|a couple of|a lot of|a lot of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of|a couple of"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r\"([A-Z]\\w*)(?=\\s[a-z]+\\s)\", text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    text = text.replace(',','')\n    text = text.replace('.','')\n    words = text.split(' ')\n    nums = [str(num) for num in range(10)]\n    for i in words:\n        if i.isdigit() in nums:\n            if i == '1':\n                return''.join(words[words.index(i):])\n            else:\n                return''.join(words[words.index(i):words.index(i)+2])\n    return 'None'\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Your code here\n    a = \"Here are the Adverbs\"\n    b = \"Here are the Adverbs\"\n    if a in text:\n        text = text.replace(a, \"\")\n    if b in text:\n        text = text.replace(b, \"\")\n    #print(text)\n    for i in range(0,len(text)):\n        if text[i] == \" \":\n            #print(text[i])\n            #print(i)\n            #print(len(text))\n            break\n    #print(text[i])\n    #print(text[i+1])\n    #print(text[i+2])\n    #print(text[i+3])\n    #print(text[i+4])\n    #print(text[i+5])\n    #print(text[i+6])\n    #print(text[i+7])\n    adverbs = text[i+1:len(text)]\n    return adverbs\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    a = l ** 2\n    sa = 6 * a\n    return sa\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if type(l) == int:\n        return l ** 2 * 6\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_square(l):\n    '''\n    Write a function to find the surface area of a square of a given size.\n    '''\n    if type(l) == int:\n        return l ** 2 * 4\n    else:\n        return 'Input is not an integer'\n        \n        \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_rectangle(l, w):\n    '''\n    Write a function to find the surface area of a rectangle of a given length and width.\n    '''\n    if type(l) == int and type(w) == int:\n        return l * w * 2\n    else:\n        return 'Input is not an integer'\n        \n        \ndef surfacearea_triangle(l, w):\n    '''\n    Write a function to find the surface area of a triangle of a given base and height.\n    '''\n    if type(l) == int and type(w) == int:\n        return 0.5 * l * w\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_parallelogram(l, w):\n    '''\n    Write a function to find the surface area of a parallelogram of a given base and height.\n    '''\n    if type(l) == int and type(w) == int:\n        return l * w\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_trapezoid(l1, w1, l2, w2):\n    '''\n    Write a function to find the surface area of a trapezoid of a given base and two heights.\n    '''\n    if type(l1) == int and type(w1) == int and type(l2) == int and type(w2) == int:\n        return (l1 + l2) / 2 * w1\n    else:\n        return 'Input is not an integer'\n        \n        \ndef surfacearea_parallelogram(l1, w1, l2, w2):\n    '''\n    Write a function to find the surface area of a parallelogram of a given base and two heights.\n    '''\n    if type(l1) == int and type(w1) == int and type(l2) == int and type(w2) == int:\n        return (l1 * w1 + l2 * w2)\n    else:\n        return 'Input is not an integer'\n        \n        \ndef surfacearea_trapezoid(l1, w1, l2, w2):\n    '''\n    Write a function to find the surface area of a trapezoid of a given base and two heights.\n    '''\n    if type(l1) == int and type(w1) == int and type(l2) == int and type(w2) == int:\n        return (w1 + w2) * l1 / 2\n    else:\n        return 'Input is not an integer'\n        \n        \ndef surfacearea_skeleton(l1, w1, l2, w2):\n    '''\n    Write a function to find the surface area of a rectangle of a given length and width.\n    '''\n    if type(l1) == int and type(w1) == int and type(l2) == int and type(w2) == int:\n        return w1 * l1 + w2 * l2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_square(l):\n    '''\n    Write a function to find the surface area of a square of a given size.\n    '''\n    if type(l) == int:\n        return l ** 2 * 4\n    else:\n        return 'Input is not an integer'\n        \n        \ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if type(l) == int:\n        return l ** 2 * 6\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n    Write a function to find the surface area of a circle of a given radius.\n    '''\n    if type(r) == int:\n        return 3.14 * r ** 2\n    else:\n        return 'Input is not an integer'\n    \n    \ndef surfacearea_circle(r):\n    '''\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    a = (6*l**2)\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 6 * (l ** 2)\n    print('The surface area of the cube of size {} is {}'.format(l, s))\n    return s\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # l = float(input(\"Enter the length of a cube \"))\n    a = 6*l**2\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # define cube sides\n    l = int(l)\n    side = l**3\n    # surface area formula\n    surfacearea = 6*(l**2)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import sqrt\n    a = sqrt(3)*l**2\n    return a\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    pos_num = 0\n    neg_num = 0\n    for i in range(0,n):\n        if nums[i] > 0:\n            pos_num = pos_num + 1\n        elif nums[i] < 0:\n            neg_num = neg_num + 1\n    return pos_num/n\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (sum(n > 0 for n in nums)) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    for i in range(0, len(nums)):\n        if nums[i] >= 0:\n            cnt = cnt + 1\n    return cnt / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n    return positive / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    numbers = array('i',nums)\n    nums = [n for n in numbers if n >=0]\n    print(len(nums))\n    print(len(nums) / len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if nums is None or len(nums) == 0:\n        return -1\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count = count + 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums_len = len(nums)\n    positives = 0\n    for num in nums:\n        if num > 0:\n            positives += 1\n    return (positives/nums_len)*100\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    lst = []\n    for num in nums:\n        if num < 0:\n            continue\n        lst.append(num)\n    return len(lst) / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # count = 0\n    # for i in nums:\n    #     if i > 0:\n    #         count += 1\n    # return count / len(nums)\n    return sum(i > 0 for i in nums) / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # return the largest negative number\n    return sorted(list1)[::-1][0]"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    print(\"Largest negative number is: \", end ='')\n    list1.sort()\n    for i in list1:\n        if i < 0:\n            print(i, end ='')\n            return i\n            break\n    \n    \nlist1 = [-12, 5, -65, -24, -45, 86, 34]\nlargest_neg(list1)\nprint()\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Start with negative number \n    max_neg_num = -999999\n    # Loop through all the elements in the list \n    for i in list1: \n        # Check if element is a negative number \n        if i < 0: \n            # Check if the absolute value of the element is greater \n            if abs(i) > max_neg_num: \n                # Update the max negative number \n                max_neg_num = abs(i)\n    # Return the largest negative number \n    return max_neg_num \n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # list1 = [1, 3, -4, -5, -7, -3, -9, -10, -6]\n    # list1 = [-1, -2, -3, -4, -5]\n    # list1 = [-9, -8, -7, -6, -5]\n    neg_nums = []\n    for i in list1:\n        if i < 0:\n            neg_nums.append(i)\n    neg_nums.sort()\n    if len(neg_nums) > 0:\n        return neg_nums[-1]\n    else:\n        return -1\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    negative = [i for i in list1 if i < 0]\n    return max(negative)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Using max function \n    #max_num = max(list1) \n    #min_num = min(list1) \n    #print(\"Largest negative number is: \", max_num) \n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            max_num = max(max_num,list1[i])\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    print(neg_list)\n    print(max(neg_list))\n    \n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max([i for i in list1 if i < 0])\n    \ndef smallest_positive(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    return min([i for i in list1 if i > 0])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list_num = list(list1)\n    list_num.sort()\n    if list_num[0] < 0:\n        print(\"The largest negative number in the list is:\",list_num[0])\n    else:\n        print(\"There is no negative number in the list\")\n    return list_num[0]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    res = []\n    for item in test_list:\n        if len(item) > K:\n            item = item[:K]\n        res.append(item)\n    return res\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(lambda x: x[:K], test_list))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimed_list = []\n    for tup in test_list:\n        trim_tup = tuple(list(tup[:K]) + list(tup[K+1:]))\n        trimed_list.append(trim_tup)\n    return trimed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [i for i in test_list if len(i)>=K]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        if len(item) > K:\n            item = item[:K]\n        else:\n            continue\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [elem[0:K] for elem in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [(k1, k2) for k1, k2 in test_list if len(k1) <= K and len(k2) <= K]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Need to remove the first K elements of each tuple in the list.\n    #\n    # Use list comprehension to create a list of trimmed tuples.\n    #\n    # I believe this is a good hint for a similar problem.\n    # I believe it will involve looping through the list of tuples\n    # and using slicing to remove the first k elements from each tuple.\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    assert type(test_list) == list\n    assert type(K) == int\n    assert K > 0\n    res_list = []\n    for tuple in test_list:\n        assert type(tuple) == tuple\n        if len(tuple) > K:\n            res_list.append(tuple[:K])\n    return res_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple([elem for elem in test_tuple if elem not in test_tuple[:K]]) for test_tuple in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i*j for i,j in zip(test_tup1, test_tup2))\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i * j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    l = [i * j for i, j in zip(test_tup1, test_tup2)]\n    return tuple(l)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    product = list(test_tup1)\n    for i in range(len(test_tup2)):\n        product[i] = product[i] * test_tup2[i]\n    return tuple(product)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst = []\n    for index in range(0, len(test_tup1)):\n        lst.append(test_tup1[index] * test_tup2[index])\n    tup = tuple(lst)\n    return tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        raise Exception(\"Invalid type of input\")\n    index_mul = [0]*(len(test_tup1))\n    for i in range(len(test_tup1)):\n        index_mul[i] = test_tup1[i]*test_tup2[i]\n    return tuple(index_mul)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup=()\n    for idx in range(len(test_tup1)):\n        new_tup+=tuple([test_tup1[idx]*test_tup2[idx]])\n    return new_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = test_tup1[:]\n    test_tup2 = test_tup2[:]\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication = 1\n    for index in range(len(test_tup1)):\n        index_multiplication *= test_tup1[index]*test_tup2[index]\n    return index_multiplication\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] * test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    res = Counter(lst) \n    \n    for elem in tup: \n        if elem in res: \n            print('{} occurs {} times'.format(elem, res[elem])) \n        else: \n            print('Element does not exist in the tuple')\n            \ntup = (5, 9, 7, 6, 3, 1, 3, 2, 5, 6, 7, 6, 3) \nlst = [3, 5, 7, 9, 3]\ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Initialize dictionary\n    freq = {}\n    for item in lst:\n        freq[item] = 0\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # counter is a dictionary subclass which helps us count the frequency of the items in a list\n    #Counter() is a class that is used to provide advanced functionalities for dictionaries\n    #Counter(list) will count the frequency of elements in the list\n    #we pass the list to Counter() function\n    return Counter(lst).most_common(len(lst))\n    \n    \ndef print_Frequency(tup, lst):\n    '''\n    Write a python function that takes a tuple and a list as arguments and print\n    the frequency of elements of the list in the tuple.\n    '''\n    #Prints the most frequent items in a list\n    print(\"The most frequent item in the tuple is: \", end=\" \")\n    for i in tup:\n        if tup[0][1] == i[1]:\n            print(i[0], end=\" \")\n    print()\n    \n    \n    \n    \ndef tuple_to_list(tup):\n    '''\n    Write a python function to convert a tuple into a list.\n    '''\n    #returns a list containing all the items of a tuple.\n    lst = list(tup)\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_occurence = Counter(tup) \n    for elm in lst: \n        if elm in count_occurence: \n            print('Count of ', elm,'is : ', count_occurence[elm]) \n        else: \n            print('Count of ', elm,'is : ', 0) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    print(\"\\nTuple:\",tup)\n    print(\"List:\",lst)\n    d = Counter(lst)\n    for i,j in d.items():\n        print(i,\"occurs\",j,\"times\")\ntup = (10,2,3,3,4,2,5,2,3,2,6,2,8,9,4,3,3,2,4,5,6,7,8,2,2,2,2,3,3,3,3,4,4,2,3,3,2,4,2,3,2,6,7,3,3,3,2,5,4,5,2,5,2,4,2,5,6,7,8,9,9,2,4,2,3,3,2,2,3,5,3,3,3,3,4,4,4,4,5,4,5,3,3,2,2,4,3,4,5,5,6,5,2,4,3,2,5,2,3,2,2,5,6,5,7,8,9,9,9,3,4,3,3,3,5,4,5,5,2,2,3,4,3,3,4,3,4,2,2,4,2,4,4,4,4,2,2,2,2,3,3,3,3,2,2,2,2,3,4,5,5,5,5,3,2,3,2,4,4,4,3,2,5,5,4,5,5,2,2,4,5,2,3,5,3,5,5,2,2,4,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    c = Counter(lst) \n    for element in tup: \n        print(f'{element} = {c[element]}') \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_count = Counter(tup)\n    lst_count = Counter(lst)\n    \n    return tup_count, lst_count\n    \n    # Driver Code \n    tup = tuple(['a','b','a','a','b','a','b','b','a']) \n    lst = ['a','b','a','b','b']\n    \n    print(count_Occurrence(tup, lst))\n    \n    \ndef diff_List(l1, l2): \n    '''\n    Write a python program to find the difference between the two lists\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    return list(l1_set - l2_set)\n    \n    # Driver Code \n    l1 = [1,2,3,4,5] \n    l2 = [1,2,3,4]\n    \n    print(diff_List(l1, l2))\n    \ndef list_Filter(lst, filter_func): \n    '''\n    Write a python program to filter the elements of a list\n    '''\n    return list(filter(filter_func, lst))\n    \n    # Driver Code \n    lst = [1,2,3,4,5] \n    filter_func = lambda x: x%2 == 0\n    \n    print(list_Filter(lst, filter_func))\n    \ndef dict_Count(dict1): \n    '''\n    Write a Python program to count the occurrences of each character in a string and print it as a list of tuples\n    '''\n    return list(Counter(dict1).items())\n    \n    # Driver Code \n    dict1 = \"The quick brown fox jumps over the lazy dog\"\n    \n    print(dict_Count(dict1))\n    \ndef dict_Union(dict1, dict2): \n    '''\n    Write a Python program to get a union of two dictionaries.\n    '''\n    return dict(dict1.items() + dict2.items())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20} \n    dict2 = {3: 30, 4: 40}\n    \n    print(dict_Union(dict1, dict2))\n    \ndef dict_Intersection(dict1, dict2): \n    '''\n    Write a Python program to get the common items between two dictionaries\n    '''\n    return dict((key, val) for key, val in dict1.items() if key in dict2.keys())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30} \n    dict2 = {1: 100, 4: 40, 5: 30}\n    \n    print(dict_Intersection(dict1, dict2))\n    \ndef dict_Difference(dict1, dict2): \n    '''\n    Write a Python program to get all items in two dictionaries that are not common to both dictionaries\n    '''\n    return dict((key, val) for key, val in dict1.items() if key not in dict2.keys())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30} \n    dict2 = {1: 100, 4: 40, 5: 30}\n    \n    print(dict_Difference(dict1, dict2))\n    \ndef dict_List_Union(dict1, dict2): \n    '''\n    Write a Python program to get all keys from two dictionaries present in the first dictionary. \n    If one of the keys are not present in the first dictionary, it should be ignored.\n    '''\n    return list(dict1.keys() + dict2.keys())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30} \n    dict2 = {1: 100, 4: 40, 5: 30}\n    \n    print(dict_List_Union(dict1, dict2))\n    \ndef dict_List_Intersection(dict1, dict2): \n    '''\n    Write a Python program to get all keys from two dictionaries present in both the dictionaries\n    '''\n    return list(set(dict1.keys()) & set(dict2.keys()))\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30} \n    dict2 = {1: 100, 4: 40, 5: 30}\n    \n    print(dict_List_Intersection(dict1, dict2))\n    \ndef dict_List_Difference(dict1, dict2): \n    '''\n    Write a Python program to get all keys of both dictionaries that are not common to both dictionaries\n    '''\n    return list(set(dict1.keys()) ^ set(dict2.keys()))\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30} \n    dict2 = {1: 100, 4: 40, 5: 30}\n    \n    print(dict_List_Difference(dict1, dict2))\n    \ndef sort_Dict_by_Value(dict1): \n    '''\n    Write a Python program to sort a dictionary by value\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    \n    # Driver Code \n    dict1 = {'a': 10, 'b': 20, 'c': 30, 'd': 40}\n    \n    print(sort_Dict_by_Value(dict1))\n    \ndef dict_Dict_Constructor(dict1): \n    '''\n    Write a Python program to print the content of dictionary\n    '''\n    d = {k:dict1[k] for k in dict1.keys()}\n    print(d)\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30}\n    \n    print(dict_Dict_Constructor(dict1))\n    \ndef sort_Dict_by_Value(dict1): \n    '''\n    Write a Python program to sort a dictionary by its values\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}\n    \n    print(sort_Dict_by_Value(dict1))\n    \ndef dict_Key_Summation(dict1): \n    '''\n    Write a Python program to get the sum of all keys in a dictionary\n    '''\n    return sum(dict1.keys())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30}\n    \n    print(dict_Key_Summation(dict1))\n    \ndef dict_Merge(dict1, dict2): \n    '''\n    Write a Python program to merge two dictionaries\n    '''\n    return dict(dict1.items() + dict2.items())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}\n    dict2 = {1: 100, 2: 200, 3: 300}\n    \n    print(dict_Merge(dict1, dict2))\n    \ndef dict_Key_Value_Sums(dict1): \n    '''\n    Write a Python program to get all the key-value pairs of a dictionary in a list of two-element lists\n    '''\n    return list(list(zip(*dict1.items())))\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}\n    \n    print(dict_Key_Value_Sums(dict1))\n    \ndef dict_Val_Summation(dict1): \n    '''\n    Write a Python program to get the sum of all values in a dictionary\n    '''\n    return sum(dict1.values())\n    \n    # Driver Code \n    dict1 = {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}\n    \n    print(dict_Val_Summation(dict1))\n    \ndef dict_Sorted_dict_constructor(dict1): \n    '"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = list(lst)\n    freq = [] \n    for i in tup: \n        freq.append(lst.count(i)) \n    return freq\nprint(count_Occurrence((1, 2, 1, 4, 2, 1, 4, 1, 4, 2, 5), [1, 2, 1, 4, 2, 1, 4, 1, 4, 2, 5]))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst) \n    for tup in cnt:\n        print(tup, \" : \", cnt[tup]) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup1 = Counter(tup) \n    lst1 = Counter(lst) \n    print(tup1)\n    print(lst1)\n    return tup1.update(lst1) \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x ** 3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # return [i ** 3 for i in nums]\n    return list(map(lambda x: x ** 3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print(f'Cube of each element in the list: {[x ** 3 for x in nums]}')\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        yield num**3\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # output = []\n    # for num in nums:\n    #     output.append(num ** 3)\n    # return output\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    x = (n - 1) * (n + 1) * ((2 * n) - 1) // 6\n    return x\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n=int(input(\"Enter a number: \"))\n    print(cal_sum(n))\n    if n==1:\n        return 1\n    else:\n        return n+(n-2)*cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 3\n    else:\n        return 2 + cal_sum(n - 1) + 2 * (cal_sum(n - 2))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    res = 0\n    while n:\n        res += n % 10\n        n = n // 10\n    return res\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=1:\n        return n\n    elif n%2==0:\n        return 2+cal_sum(n//2)\n    else:\n        return 1+cal_sum(3*n+1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        raise ValueError('Please input a positive number.')\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 10\n    return (cal_sum(n-1)+cal_sum(n-2)+cal_sum(n-3))\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += cal_perrin(i)\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n + 1):\n        sum += i * (2 * i - 1)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n<=1:\n        return 0\n    else:\n        return n**2 + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 5\n    else:\n        return 2*cal_sum(n-1) + cal_sum(n-2)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[l] for i in str]\n    \n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    new_str = []\n    for x in str:\n        new_str.append(x[0:l])\n    return new_str\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    if len(str) > l:\n        for i in range(0, len(str), l):\n            result.append(str[i:i + l])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            print(str[i])\n        else:\n            continue\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # ret = []\n    # for s in str:\n    #     if len(s) == l:\n    #         ret.append(s)\n    # return ret\n    return [s for s in str if len(s) == l]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    \n    extracted_list = []\n    for item in l:\n        extracted_list.append(item[0:l])\n    return extracted_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[i:i+l] for i in range(0, len(str), l)]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    size = int(l)\n    s = []\n    for i in range(0,len(str),size):\n        s.append(str[i:i+size])\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[l:] for str in str]\n"
    }
]