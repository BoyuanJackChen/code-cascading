[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #You may assume that the lists contain only unique values.\n    if len(test_tup1) < len(test_tup2):\n        return similar_elements(test_tup2, test_tup1)\n    #https://stackoverflow.com/questions/9737193/python-list-comprehension-with-multiple-ifs\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            return_list.append(element)\n    return return_list\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return list(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_set = set(test_tup1).intersection(set(test_tup2))\n    return similar_set\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = []\n    for index, item in enumerate(test_tup1):\n        if item in test_tup2:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    similar_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            similar_elements.append(element)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # your code here\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    print('Tuples are similar if they contain the same elements, irrespective of their order:')\n    #return set(test_tup1) == set(test_tup2)\n    return len(set(test_tup1) - set(test_tup2)) == 0 and \\\n            len(set(test_tup2) - set(test_tup1)) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # for loop to compare the lists\n    for index in range(len(test_tup1)):\n        # if the items are equal then print the items\n        if test_tup1[index] == test_tup2[index]:\n            print(test_tup1[index])\n        else:\n            continue\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2, int(math.sqrt(n)+1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    else:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                print(\"Given number is not a prime number\")\n                break\n        else:\n            print(\"Given number is a prime number\")\n    else:\n        print(\"Given number is not a prime number\")"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==2:\n        return False\n    if n%2==0:\n        return True\n    for x in range(3,int(math.sqrt(n))+1,2):\n        if n%x==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n < 2 or n % 2 == 0:\n        return True\n    if n < 9:\n        return False\n    if n % 3 == 0:\n        return True\n    i = 5\n    while (i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return True\n        i = i + 6\n    return False\n    \ndef generate_prime_number(count):\n    '''\n    Write a python function to generate n prime numbers and print them in an list.\n    '''\n    num = []\n    prime_number = 2\n    while len(num) < count:\n        if is_not_prime(prime_number):\n            num.append(prime_number)\n            prime_number += 1\n        else:\n            prime_number += 1\n    return num\n    \ndef generate_prime_number_again(n):\n    '''\n    Write a python function to generate n prime numbers and print them in an list.\n    '''\n    num = []\n    prime_number = 2\n    while len(num) < n:\n        if is_not_prime(prime_number):\n            num.append(prime_number)\n            prime_number += 1\n        else:\n            prime_number += 1\n    return num\n    \ndef generate_prime_number_without_recursion(n):\n    '''\n    Write a python function to generate n prime numbers and print them in an list.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 2\n        prime_number = True\n        for i in range(2, math.ceil(math.sqrt(num))):\n            if num % i == 0:\n                prime_number = False\n                break\n        if prime_number:\n            count += 1\n    return num\n    \ndef is_prime(n):\n    '''\n    Write a python function to identify if a number is prime or not.\n    '''\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n < 2 or n % 2 == 0:\n        return False\n    if n < 9:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while (i * i <= n):\n        if (n % i == 0 or n % (i + 2) == 0):\n            return False\n        i = i + 6\n    return True\n    \ndef check_prime(n):\n    '''\n    Write a python function to print prime numbers in the range (0,n).\n    '''\n    for i in range(0, n+1):\n        if is_prime(i):\n            print(i)\n    \ndef generate_prime_number_without_recursion_with_list(n):\n    '''\n    Write a python function to generate n prime numbers and print them in an list.\n    '''\n    count = 0\n    num = 1\n    while count < n:\n        num += 2\n        prime_number = True\n        for i in range(2, math.ceil(math.sqrt(num))):\n            if num % i == 0:\n                prime_number = False\n                break\n        if prime_number:\n            count += 1\n            num_list.append(num)\n    return num_list\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums)<=n:\n        print(\"Enter more number\")\n        return\n    heap_list=[]\n    for i in range(n):\n        hq.heappush(heap_list, nums.pop())\n    return heap_list\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    l=len(nums)\n    if n>l:\n        return 'n is too large'\n    return [hq.heappop(nums)[1] for i in range(n)]\n    \nif __name__ == '__main__':\n    nums = [1, 3, 5, 7, 9, 2, 4, 6, 8, 0]\n    print(heap_queue_largest(nums, 2))\n    \n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\nprint(heap_queue_largest([8,5,2,9,7,6,3],3))\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq, append only the largest elements to a heap, return the heap.\n    #heapq allows us to keep the elements in ascending order.\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n    \ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq, append only the largest elements to a heap, return the heap.\n    #heapq allows us to keep the elements in ascending order.\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n    \ndef heap_queue_max(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq, append only the largest elements to a heap, return the heap.\n    #heapq allows us to keep the elements in ascending order.\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n    \ndef heap_queue_min(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq, append only the largest elements to a heap, return the heap.\n    #heapq allows us to keep the elements in ascending order.\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\n    \ndef k_largest(nums,k):\n    '''\n    Write a function to find the k largest integers from a given list of numbers, returned in descending order.\n    '''\n    #heapq allows us to keep the elements in ascending order.\n    #we need to keep only k largest elements.\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(k)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    print(\"The n largest integers from the given list are : \")\n    maxHeap=[]\n    for i in range(n):\n        if len(nums)==0:\n            break\n        else:\n            hq.heappush(maxHeap,-1*nums[0])\n            hq.heappop(nums)\n    \n    for i in range(len(maxHeap)):\n        print(-1*maxHeap[i],end=\" \")\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    res = []\n    if n == 0:\n        return []\n    for i in range(len(nums)):\n        if len(heap) < n:\n            hq.heappush(heap,nums[i])\n        else:\n            if nums[i] > heap[0]:\n                hq.heappop(heap)\n                hq.heappush(heap,nums[i])\n    while heap:\n        res.append(hq.heappop(heap))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    k=n\n    result=[]\n    for _ in range(k):\n        result.append(hq.heappop(nums))\n    return result[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    x = x - 1\n    while x % 2 == 0: \n        x = x / 2\n    if x == 1: \n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0): \n        return 0\n    while (x!= 1): \n        if ((x & 1) == 0 or (x == 3)): \n            return 0\n        else: \n            return 1\n        x = x >> 1\ndef is_Power_Of_Two_Optimised (x):\n    return ((x & (x - 1)) == 0)\ndef is_Power_Of_Two_Optimised_2 (x):\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    while x > 0:\n        if x & 1 == 0:\n            return False\n        x >>= 1\n    return True\ndef find_Max_In_Binary_Search_Tree (x, y):\n    '''\n    Write a Python program to find maximum number in Binary Search Tree. \n    '''\n    while x is not None:\n        if x.data > y.data:\n            y = x\n        x = x.right\n    return y\ndef find_Max_In_Binary_Search_Tree_Optimised (x):\n    while x is not None:\n        x = x.right\n    return x\ndef find_Max_In_Binary_Search_Tree_Iterative (x):\n    curr = x\n    while curr is not None:\n        if curr.right is None:\n            return curr\n        curr = curr.right\ndef find_Max_In_Binary_Search_Tree_Iterative_Optimised (x):\n    curr = x\n    while curr is not None:\n        curr = curr.right\n    return curr\ndef find_Min_In_Binary_Search_Tree (x, y):\n    '''\n    Write a Python program to find minimum number in Binary Search Tree. \n    '''\n    while x is not None:\n        if x.data < y.data:\n            y = x\n        x = x.left\n    return y\ndef find_Min_In_Binary_Search_Tree_Iterative (x):\n    curr = x\n    while curr is not None:\n        if curr.left is None:\n            return curr\n        curr = curr.left\ndef find_Min_In_Binary_Search_Tree_Iterative_Optimised (x):\n    curr = x\n    while curr is not None:\n        curr = curr.left\n    return curr\ndef find_Min_In_Binary_Search_Tree_Optimised (x):\n    while x is not None:\n        x = x.left\n    return x\ndef find_Max_In_Binary_Search_Tree_Optimised (x):\n    while x is not None:\n        x = x.right\n    return x\ndef find_Min_And_Max_In_Binary_Search_Tree (x, y, z):\n    '''\n    Write a Python program to find minimum and maximum number in Binary Search Tree. \n    '''\n    y = find_Max_In_Binary_Search_Tree(x)\n    z = find_Min_In_Binary_Search_Tree(x, y)\n    return y, z\ndef find_Min_And_Max_In_Binary_Search_Tree_Iterative (x):\n    y = find_Max_In_Binary_Search_Tree_Iterative(x)\n    z = find_Min_In_Binary_Search_Tree_Iterative(x, y)\n    return y, z\ndef find_Min_And_Max_In_Binary_Search_Tree_Iterative_Optimised (x):\n    y = find_Max_In_Binary_Search_Tree_Iterative_Optimised(x)\n    z = find_Min_In_Binary_Search_Tree_Iterative_Optimised(x, y)\n    return y, z\ndef find_Min_And_Max_In_Binary_Search_Tree_Optimised (x):\n    y = find_Max_In_Binary_Search_Tree_Optimised(x)\n    z = find_Min_In_Binary_Search_Tree_Optimised(x, y)\n    return y, z\ndef remove_From_Binary_Search_Tree (x, y):\n    '''\n    Write a Python program to remove a node from Binary Search Tree. \n    '''\n    if y.data < x.data:\n        if x.left is not None:\n            remove_From_Binary_Search_Tree(x.left, y)\n    else:\n        if x.right is not None:\n            remove_From_Binary_Search_Tree(x.right, y)\n    if y.data < x.data:\n        x.left = None\n    else:\n        x.right = None\ndef remove_From_Binary_Search_Tree_Iterative (x, y):\n    curr = x\n    while curr is not None:\n        if y.data < curr.data:\n            curr = curr.left\n        else:\n            if curr.left is None:\n                curr.left = curr.right\n                curr = curr.left\n            else:\n                curr.right = curr.left\n                curr = curr.right\n    return x\ndef remove_From_Binary_Search_Tree_Iterative_Optimised (x, y):\n    curr = x\n    while curr is not None:\n        if y.data < curr.data:\n            if curr.left is not None:\n                curr = curr.left\n            else:\n                curr = curr.right\n        else:\n            if curr.right is None:\n                curr = curr.left\n            else:\n                curr.right = curr.left\n                curr = curr.right\n    return x\ndef remove_From_Binary_Search_Tree_Optimised (x, y):\n    while x is not None:\n        if x.data > y.data:\n            if x.left is not None:\n                x = x.left\n            else:\n                x = x.right\n        else:\n            if x.left is None:\n                x.left = x.right\n                x = x.left\n            else:\n                x.right = x.left\n                x = x.right\n    return x\ndef find_Height_Of_Binary_Search_Tree (x):\n    '''\n    Write a Python program to find the height of a Binary Search Tree.\n    '''\n    if x is None:\n        return 0\n    else:\n        return 1 + max(find_Height_Of_Binary_Search_Tree(x.left), find_Height_Of_Binary_Search_Tree(x.right))\ndef find_Height_Of_Binary_Search_Tree_Iterative (x):\n    curr = x\n    height = 0\n    while curr is not None:\n        height += 1\n        curr = curr.left\n    return height\ndef find_Height_Of_Binary_Search_Tree_Iterative_Optimised (x):\n    curr = x\n    height = 0\n    while curr is not None:\n        curr = curr.left\n        height += 1\n    return height\ndef find_Height_Of_Binary_Search_Tree_Optimised (x):\n    curr = x\n    height = 0\n    while curr is not None:\n        height += 1\n        curr = curr.right\n    return height\ndef is_Complete_Binary_Search_Tree (x):\n    '''\n    Write a Python program to check whether a given Binary Search Tree is complete or not.\n    '''\n    if x is None:\n        return True\n    queue = [x]\n    while queue:\n        node = queue.pop(0)\n        if node.left is None:\n            queue.append(node.left)\n        if node.right is None:\n            queue.append(node.right)\n    if queue:\n        return False\n    else:\n        return True\ndef is_Complete_Binary_Search_Tree_Iterative (x):\n    queue = [x]\n    while queue:\n        node = queue.pop(0)\n        if node is None:\n            return False\n        queue.append(node.left)\n        queue.append(node.right)\n    return True\ndef is_Complete_Binary"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (-x)) == x\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return False\n    count = 0\n    while (x): \n        count+=1\n        x = x & (x - 1) \n    if count == 1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1:\n        return True\n    else:\n        if x%2 == 1 or x == 2:\n            return False\n        else:\n            return is_Power_Of_Two(x/2)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x > 0 and ((x & (x - 1)) == 0)) \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return ((x & (x-1)) == 0)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while (x!= 0):\n        if ((x & 1)!= 0):\n            break\n        x = x >> 1\n        if (x == 0):\n            print(True)\n            return True\n    else:\n        print(False)\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 0:\n        if x & 1 == 0:\n            return False\n        x = x >> 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words=[]\n    words=text.split(' ')\n    for word in words:\n        if len(word)>=4:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    char_list = re.findall(r'\\w{4,}',text)\n    return char_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex=re.compile(r\"\\w{4}\")\n    lst=regex.findall(text)\n    return lst\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    find = re.findall(r'\\b\\w{4,}\\b',text)\n    print(find)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\b[a-zA-Z]{4,}\\b', text)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return [x for x in text.split(' ') if len(x)>=4]\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) > 3:\n            char_len.append(i)\n    print(char_len)\n    \n    return char_len\n    \ndef find_char_long_2(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) > 3:\n            char_len.append(i)\n    print(char_len)\n    \n    return char_len\n    \ndef replace_char_long(text):\n    '''\n    Write a function to replace the vowels in a string with the letter x.\n    '''\n    text_1 = text.split()\n    new_text = []\n    for i in text_1:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            new_text.append('x')\n        else:\n            new_text.append(i)\n    print(new_text)\n    return new_text\n    \ndef replace_char_long_2(text):\n    '''\n    Write a function to replace the vowels in a string with the letter x.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    new_text = []\n    for i in text_1:\n        if i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u':\n            new_text.append('x')\n        else:\n            new_text.append(i)\n    print(new_text)\n    return new_text\n    \ndef find_long_words(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_2(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_3(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_4(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) > 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_5(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) > 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_6(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_7(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_8(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_9(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_10(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_11(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = re.split(' |,|?|.|-|!|:|#|_|&|[|]|@|{|}|(|)|$|%|^|&|*', text)\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find_long_words_12(text):\n    '''\n    Write a function to find all words that are at least 5 characters long in a string.\n    '''\n    text_1 = text.split()\n    char_len = []\n    for i in text_1:\n        if len(i) >= 5:\n            char_len.append(i)\n    print(char_len)\n    return char_len\n    \ndef find"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b',text)\n    return [word for word in words if len(word) >= 4]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        yield(i*i)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [n**2 for n in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num*num)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x**2 for x in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i*i)\n    return\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    if str == str[::-1]:\n        return 0\n    for i in range(1, len(str)):\n        if str[:i] == str[:i][::-1] and str[i:] == str[i:][::-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    first = str[0]\n    count = 0\n    for i in range(n-1):\n        if str[i] == first:\n            break\n        count += 1\n    if count == n:\n        return 0\n    return n - count - 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return len(str) - find_LCP(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str) \n    rotations = [] \n    temp = str\n    for i in range(n): \n        temp = temp[1:] + temp[0] \n        rotations.append(temp) \n    return rotations\ndef all_rotations(str): \n    '''\n    Write a python function to find all the rotations of a given string.\n    '''\n    rotations = [] \n    n = len(str) \n    for i in range(n): \n        temp = str[i: ] + str[ :i] \n        rotations.append(temp) \n    return rotations\ndef is_substring(str, sub): \n    '''\n    Write a python function to check if the sub string is a substring of the given string.\n    '''\n    return sub in str \ndef find_first_occurrence(str, sub): \n    '''\n    Write a python function to find the first occurrence of the sub string in the given string.\n    '''\n    return str.find(sub) \ndef find_all_occurrences(str, sub): \n    '''\n    Write a python function to find all the occurrences of the sub string in the given string.\n    '''\n    occur = [] \n    index = 0\n    while index >= 0: \n        index = str.find(sub, index)\n        if index == -1:\n            return occur\n        occur.append(index)\n        index += 1\ndef is_palindrome(str): \n    '''\n    Write a python function to check if a string is a palindrome.\n    '''\n    return str == str[::-1] \ndef reverse(str): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return str[::-1]\ndef is_rotation(str, sub): \n    '''\n    Write a python function to check if the sub string is a rotation of the given string.\n    '''\n    if len(str)!= len(sub) :\n        return False\n    return set(sub) <= set(str) \ndef all_substrings(str): \n    '''\n    Write a python function to get all the sub strings of the given string.\n    '''\n    substrings = [] \n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            sub = str[i:j] \n            substrings.append(sub) \n    return substrings \ndef remove_prefix(str, prefix): \n    '''\n    Write a python function to remove the prefix from the given string.\n    '''\n    if str.startswith(prefix): \n        return str[len(prefix):] \n    return str\ndef remove_suffix(str, suffix): \n    '''\n    Write a python function to remove the suffix from the given string.\n    '''\n    if str.endswith(suffix): \n        return str[:len(str)-len(suffix)]\n    return str\ndef sort_lexicographically(str): \n    '''\n    Write a python function to sort the given string.\n    '''\n    return ''.join(sorted(str)) \ndef sort_lexicographically_backwards(str): \n    '''\n    Write a python function to sort the given string in the reverse order.\n    '''\n    return ''.join(sorted(str, reverse=True)) \ndef is_unique(str): \n    '''\n    Write a python function to check if the given string is unique.\n    '''\n    return len(set(str)) == len(str) \ndef find_unique_index(str): \n    '''\n    Write a python function to find the index of the unique character in the given string.\n    '''\n    return [i for i in range(len(str)) if str.count(str[i]) == 1] \ndef rotate_string(str, rotation): \n    '''\n    Write a python function to rotate the given string by the given number of positions.\n    '''\n    return str[rotation:] + str[:rotation] \ndef count_vowels(str): \n    '''\n    Write a python function to count the number of vowels in the given string.\n    '''\n    vowels = 0\n    for i in range(len(str)): \n        if str[i] in \"aeiouAEIOU\": \n            vowels += 1\n    return vowels \ndef count_consonants(str): \n    '''\n    Write a python function to count the number of consonants in the given string.\n    '''\n    consonants = 0\n    for i in range(len(str)): \n        if str[i] not in \"aeiouAEIOU\": \n            consonants += 1\n    return consonants \ndef replace_vowels(str, old, new): \n    '''\n    Write a python function to replace all the vowels in the given string by the given new character.\n    '''\n    return str.replace(\"aeiouAEIOU\", new) \ndef replace_consonants(str, old, new): \n    '''\n    Write a python function to replace all the consonants in the given string by the given new character.\n    '''\n    return str.replace(\"bcdfghjklmnpqrstvwxz\", new) \ndef is_valid_pangram(str): \n    '''\n    Write a python function to check if the given string is a pangram.\n    '''\n    return set(str) >= set(\"abcdefghijklmnopqrstuvwxyz\") \ndef get_unique_nums(str): \n    '''\n    Write a python function to get all the unique numbers from the given string.\n    '''\n    return list(set(str))\ndef get_unique_nums_sorted(str): \n    '''\n    Write a python function to get all the unique numbers from the given string sorted in the ascending order.\n    '''\n    return sorted(list(set(str))) \ndef find_missing_numbers(str): \n    '''\n    Write a python function to find all the missing numbers from the given string.\n    '''\n    return [i for i in range(1, len(str)+1) if i not in str]\ndef find_missing_numbers_sorted(str): \n    '''\n    Write a python function to find all the missing numbers from the given string sorted in the ascending order.\n    '''\n    return [i for i in range(1, len(str)+1) if i not in str]\ndef is_anagram(str1, str2): \n    '''\n    Write a python function to check if the given strings are anagrams.\n    '''\n    return sorted(str1) == sorted(str2) \ndef all_anagrams(str): \n    '''\n    Write a python function to get all the anagrams of the given string.\n    '''\n    return [''.join(sorted(str)) for i in range(len(str))] \ndef is_binary(str): \n    '''\n    Write a python function to check if the given string is binary.\n    '''\n    return set(str) <= set(\"01\") \ndef count_binary_substrings(str): \n    '''\n    Write a python function to count the number of binary sub strings in the given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j] in \"01\": \n                count += 1\n    return count \ndef count_binary_substrings_with_mismatches(str, num_mismatches): \n    '''\n    Write a python function to count the number of binary sub strings with the specified number of mismatches in the given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if num_mismatches_with_str(str[i:j], num_mismatches) == 0: \n                count += 1\n    return count \ndef num_mismatches_with_st"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    import re\n    list_of_rotations = []\n    for i in range(len(str)):\n        str_len = len(str)\n        s1 = str[i:] + str[:i]\n        s2 = str[:str_len-i] + str[str_len-i:]\n        s3 = str[str_len-i:] + str[:str_len-i]\n        if re.match(str, s1):\n            list_of_rotations.append(s1)\n        elif re.match(str, s2):\n            list_of_rotations.append(s2)\n        elif re.match(str, s3):\n            list_of_rotations.append(s3)\n    return list_of_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    for i in range(0, len(str)): \n        rot = str[i:] + str[:i]\n        if rot == str:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    def str_comp(s1, s2): \n        n1 = len(s1) \n        n2 = len(s2) \n        count = 0 \n        for i in range(0, n1-n2+1): \n            j = 0\n            while (j < n2 and (s1[i+j] == s2[j])): \n                j += 1\n            count += 1\n        if (count >= 1): \n            print(\"The minimum number of rotations is :\", count) \n        else: \n            print(\"No rotations needed\") \n        \n    # Driver code \n    if __name__ == \"__main__\": \n        str = \"geeksforgeeks\"\n        str_comp(str, str) \n        \n        \n    # This code is contributed by Ryuga \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    start = 0\n    end = len(str) - 1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # l1 = len(str)\n    # l2 = len(str)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_rotation = str + str\n    index = 0\n    while str_rotation[:len(str)]!= str:\n        index += 1\n        str_rotation = str_rotation[1:]\n    return index\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = s.find(ch)\n    s = s[0:occ] + s[occ+1:]\n    occ1 = s.find(ch)\n    s = s[0:occ1] + s[occ1+1:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,\"\")\n    else:\n        print(\"Given character doesn't exist in the string\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s[:s.find(ch)]\n    s2 = s[s.rfind(ch)+1:]\n    return s1+s2\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    try:\n        new_s = s.replace(ch, '')\n        new_s = new_s.replace(ch, '')\n        return new_s\n    except Exception as e:\n        return e\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch not in s: \n        return s\n    return s.replace(ch, \"\", 1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch,'')\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return (s[:ch] + s[ch+1:]).replace(s[ch], \"\", 1) \n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\")\n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether the string is palindrome or not.\n    '''\n    return s == s[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        s = s.replace(ch,'')\n        s = s.replace(ch,'')\n    return s \n    \ns= input('Enter a string: ')\nch = input('Enter the character you want to remove: ')\nprint(remove_Occ(s,ch))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = s.split(ch)\n    return ''.join(l[0:len(l)-1])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    size = len(M)\n    new_M = [0]*size\n    for i in range(size):\n        new_M[i] = list(M[i])\n    for i in range(size):\n        for j in range(size):\n            if (j<size-1 and new_M[i][j] < new_M[i][j+1]) or (j == size-1 and new_M[i][j] < new_M[i][0]):\n                new_M[i][j], new_M[i][j+1] = new_M[i][j+1], new_M[i][j]\n    return new_M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M.sort(key=sum)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    result = []\n    for i in range(len(M)):\n        row = sorted([M[i][j] for j in range(len(M[i]))],reverse=True)\n        result.append(row)\n    return result\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        M[i] = sorted(M[i], key = lambda x: sum(x))\n    \n    return M\n    \nM = [\n    [1,2,3],\n    [4,5,6],\n    [7,8,9]\n]\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    return sorted(M, key = sum, reverse = True)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    return matrix_sum_of_rows(M).argsort()[::-1]\n    \n    \ndef matrix_sum_of_rows(M):\n    '''\n    Write a function to get the sum of each row of a given matrix.\n    '''\n    \n    if len(M) == 0:\n        return 0\n    \n    if len(M) == 1:\n        return np.sum(M, axis=1)\n    \n    return np.add(matrix_sum_of_rows(M[:-1]), M[-1])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for r in range(len(M)):\n        M[r] = sorted(M[r])\n    for c in range(len(M)):\n        M[c] = sorted(M[c])\n    M = sorted(M)\n    for r in range(len(M)):\n        M[r] = sorted(M[r])\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    def sort_row(M):\n        return sorted(M, key=sum)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = M.tolist()\n    S = sorted([sum(r) for r in M])\n    I = []\n    for s in S:\n        I.append([r for r in M if sum(r) == s][0])\n    return I"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula of a triangle can be used to calculate the volume of a prism\n    # Triangular prism formula\n    # V = 1/2 * b * h * l\n    # Volume of a prism can be found by subtracting the volume of a triangular prism\n    # and adding the volume of the base and the height of the prism.\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/6) * l * b * h\n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return ((1/2)*h*l*b)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print('The volume of the triangular prism is:',(l*b*h)/3)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"The volume of a triangular prism is : {}\".format(l*b*h/3))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h/3\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return int(0.5 * b * h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume\n    \ndef find_Surface_Area(b,h) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    surface_area = 2*b*h\n    return surface_area\n    \ndef find_Density(m,v) :\n    '''\n    Write a python function to find the density of a liquid.\n    '''\n    density = m / v\n    return density\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(l*b*h)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    def is_lower_and_underscore(t):\n        return t.isalpha() and t.islower() and '_' in t\n    return '_' in re.sub('[A-Z]+', '_', re.sub('\\W', '', text)).strip('_')\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if type(text)!= str:\n        raise TypeError('Input must be of type string.')\n    if re.search(r'\\d', text):\n        return False\n    return True if re.search(r'[a-z]_[a-z]', text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'[a-z]+_[a-z]+', text.lower()))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if not text:\n        return False\n    prev_char = text[0]\n    for char in text:\n        if char.islower() and prev_char.islower():\n            continue\n        elif char.isupper() and prev_char.isupper():\n            continue\n        elif char == '_' and prev_char == '_':\n            continue\n        else:\n            return False\n        prev_char = char\n    return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'(_+[a-z])',text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'^([a-z]+)_([a-z]+)$', text) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'_[a-z]', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    s = re.search(\"_[a-z]*\", text)\n    if s:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(r'_[a-z]*[a-z]', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return bool(re.search(\"_.*_\", text.lower()))\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = string.lower()\n    char_list = [x for x in string]\n    char_list = char_list[::-1]\n    index = 0\n    for ch in char_list:\n        if ch in char_list[index:]:\n            if ch =='':\n                string = string[index:]\n            else:\n                string = string[index:char_list.index(ch)]\n        index += 1\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lst = [0]*NO_OF_CHARS \n    for i in string: \n        lst[ord(i)] += 1\n    temp = \"\" \n    for i in string: \n        if lst[ord(i)] == 1: \n            temp += i \n    return temp \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    lis = list(string) \n    for i in lis: \n        if i in string_1: \n            lis.remove(i)\n    return ''.join(lis) \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string) \n    l2 = list(string) \n    for i in range(len(l2)): \n        for j in range(len(l1)): \n            if l2[i] == l1[j]: \n                l1[j] = '$'\n    res = \"\".join(l1) \n    return(res)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in string:\n        list1.append(i)\n    for j in string:\n        list2.append(j)\n    for k in list2:\n        if k in list1:\n            list1.remove(k)\n    return ''.join(list1)\n    "
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string[0]]\n    new_string = string[0]\n    for i in range(1,len(string)):\n        if string[i] not in new_string:\n            new_string += string[i]\n    return str_to_list(new_string)\nprint(str_to_list(\"python\"))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [character for character in string if character not in string]\n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    res = [char for char in string if char not in string] \n    return res\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    l1 = list(string) \n    l2 = list(string) \n    for i in l2: \n        if i in l1: \n            l1.remove(i)\n    return l1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    # list_str1 = []\n    # list_str2 = []\n    # for i in string:\n    #     list_str1.append(i)\n    # for i in list_str2:\n    #     list_str1.remove(i)\n    # return list_str1\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first = [i for i in string] \n    second = [] \n    for i in first: \n        if i not in second: \n            second.append(i) \n    return second \n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(arraynums) == len(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0, len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert duplicate(arraynums) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums) - 1):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                print(\"Duplicate found\", arraynums[i])\n                return True\n    print(\"No duplicates found\")\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert duplicate(arraynums) == False, 'Failed the test case'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert (has_duplicate(arraynums) == False)\n    # add code here\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert(duplicate(arraynums) == True)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    temp = []\n    for i in arraynums:\n        if i not in temp:\n            temp.append(i)\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(set(arraynums))!= len(arraynums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0\n    \n    #pass\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    d = {1:'woodball',2:'woodball',3:'woodball',4:'woodball',5:'woodball',6:'woodball'}\n    try:\n        return d[x]\n    except:\n        return 'The number is not a woodball number'\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%5==0 and x%7==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = list(str(x))\n    check = []\n    for n in num:\n        if n not in check:\n            check.append(n)\n    if len(check) == len(num):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    for i in str(x):\n        if i in '234': \n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    sum = 0\n    while x > 0:\n        sum += int(x % 10)\n        x = int(x/10)\n    return sum % 7 == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    while True:\n        try:\n            x = int(input('Please Enter the number: '))\n            break\n        except:\n            print('Please enter a valid number')\n            continue\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0:\n        print(x, 'is a woodball.')\n    elif x % 3 == 0:\n        print(x, 'is a woodball.')\n    elif x % 5 == 0:\n        print(x, 'is a woodball.')\n    else:\n        print(x, 'is not a woodball.')\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return 'wood' in x\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    rev = 0\n    for i in range(len(num)):\n        rev = rev*10+int(num[i])\n    print(num, rev)\n    return num == str(rev-1) and num!= str(rev/2)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    revNum = 0\n    while num:\n        revNum = revNum * 10 + num % 10\n        num //= 10\n    return (revNum+1 == 2*revNum)\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    num = int(num)\n    while num:\n        rem = num%10\n        rev = (rev * 10) + rem\n        num = num // 10\n    return rev\n    \nnum = input('Enter a number:')\nrev_num = rev(num)\nif int(num) == int(rev_num * 2 - 1):\n    print('{} is one less than twice its reverse'.format(num))\nelse:\n    print('{} is not one less than twice its reverse'.format(num))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return(num==(int(str(num)[::-1])))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    s = str(n)\n    rev_s = s[::-1]\n    rev_num = int(rev_s)\n    return n == (rev_num*2) - 1\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    def reverse(num):\n        rev = 0\n        while (num > 0):\n            dig = num % 10\n            rev = rev * 10 + dig\n            num = num // 10\n        return rev\n    if(num == reverse(num+1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    ss = s[::-1]\n    rev = int(ss)\n    if num == 2 * rev - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = str(num)[::-1]\n    if num > rev_num*2:\n        return False\n    return True\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == int(str(num)[::-1]):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num1 = num\n    num2 = 0\n    while num > 0:\n        remainder = num % 10\n        num2 = (num2 * 10) + remainder\n        num = num // 10\n    if num1 == num2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == [] :\n        return -1\n    num = ''\n    for i in arr :\n        num = num+str(i)\n    return int(num)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    sorted_list = [str(i) for i in sorted(arr, reverse=True)]\n    return int(''.join(sorted_list))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Method 1\n    #Max_Num = max(arr)\n    #print(\"Maximum Number:\", Max_Num)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[-1]\n    \ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    arr.sort()\n    return arr[0]\n    "
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = []\n    for i in range(0, len(arr)):\n        for j in range(0, len(arr)):\n            if i!= j:\n                x = str(int(arr[i]) + int(arr[j]))\n                if len(x) == 1:\n                    l.append(int(arr[i] + x))\n                if len(x) == 2:\n                    l.append(int(arr[j] + x))\n    return max(l)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Create a variable that will store the highest number.\n    highest_num = -1\n    # Create a variable that will store the highest number's permutation.\n    highest_num_perm = []\n    # Create a permutation of the given list using itertools.permutations() and store it in permutations_list.\n    permutations_list = list(itertools.permutations(arr))\n    # Create a variable that will store the index of the largest number's permutation.\n    highest_num_index = 0\n    # For each permutation in permutations_list.\n    for i in range(len(permutations_list)) :\n        # Create a variable that will store the sum of the permutation's digits.\n        permutation_num = 0\n        # For each digit in the permutation.\n        for digit in permutations_list[i] :\n            # Add the digit's value to the sum.\n            permutation_num += digit\n        # If the sum is greater than the highest_num.\n        if permutation_num > highest_num :\n            # Assign the new sum to highest_num.\n            highest_num = permutation_num\n            # Assign the new permutation to highest_num_perm.\n            highest_num_perm = permutations_list[i]\n            # Assign the new index to highest_num_index.\n            highest_num_index = i\n    # Return the highest_num, highest_num_perm, and highest_num_index.\n    return highest_num, highest_num_perm, highest_num_index\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in arr:\n        max_num = max(max_num,i)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = -1\n    for i in arr : \n        if m < i : \n            m = i\n    return m\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = int(''.join(str(i) for i in arr))\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Your code goes here\n    # You need to return a value\n    return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0: \n        print('The numbers have opposite signs')\n    elif x<0 and y<0: \n        print('The numbers have opposite signs')\n    else: \n        print('The numbers have same sign')\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0:\n        return True\n    elif x<0 and y>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y>0:\n        return True\n    if x>0 and y<0:\n        return True\n    return False\n    \n    \ndef check_Pattern(x,y,z):\n    '''\n    Write a python function to check whether the given three integers have same number of positive numbers or not.\n    '''\n    count = 0\n    if x>0:\n        count = count + 1\n    if y>0:\n        count = count + 1\n    if z>0:\n        count = count + 1\n    return count == 2\n    \ndef replace_values(d):\n    '''\n    Write a python function to replace values of a dictionary.\n    '''\n    d['a'] = 1\n    d['b'] = 2\n    d['c'] = 3\n    d['d'] = 4\n    d['e'] = 5\n    d['f'] = 6\n    return d\n    \ndef find_freq(s):\n    '''\n    Write a python function to count number of frequencies of the given character in the given string.\n    '''\n    count = 0\n    ch = 'a'\n    for i in s:\n        if i == ch:\n            count = count + 1\n        else:\n            ch = i\n    return count\n    \ndef anagrams(s1,s2):\n    '''\n    Write a python function to check whether the given two strings are anagrams or not.\n    '''\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    if s1 == s2:\n        return True\n    return False\n    \ndef get_unique(s):\n    '''\n    Write a python function to get unique characters from the given string.\n    '''\n    return sorted(set(s))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    def opposite_Signs(x,y): \n        '''\n        Write a python function to check whether the given two integers have opposite sign or not.\n        '''\n        #start writing your code here\n        z = (x*y)\n        return z\n    if opposite_Signs(x,y) < 0:\n        return True\n    else:\n        return False\n    #end of function\n    \nprint(opposite_Signs(-2,3))\nprint(opposite_Signs(2,3))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return ((x < 0 and y > 0) or (x > 0 and y < 0))\n    # return ((x < 0 and y < 0) or (x > 0 and y > 0))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    def factorial(n):\n        '''\n        return the factorial of the input n.\n        '''\n        \n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n        \n    return int(n * ((3*n) - 1))\n    \ndef is_factorial_of_octagonal(n):\n    '''\n    Write a function to check if a number is a factorial of an octagonal number.\n    '''\n    \n    return is_octagonal(n/2) if is_octagonal(n) else False\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # create a list\n    octagon = []\n    # loop through all octagon numbers\n    for i in range(1, 100):\n        # add the first octagonal number\n        if i == 1:\n            octagon.append(1)\n        # else calculate the current number as the sum of the previous number and the previous one\n        else:\n            octagon.append(octagon[-1] + octagon[-2])\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert n >= 0 and type(n) == int\n    n_oct = n * (3*n - 2) // 2\n    return n_oct\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n<0: return \"n must be positive\"\n    if n == 0: return 0\n    return n*(3*n-1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int((n * (3*n - 1))/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    # x = 0\n    # y = 1\n    # for i in range(n):\n    #     print(x)\n    #     x, y = y, x + y\n    # return x\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def nth_octagonal(n):\n        return int(n*(3*n-1)/2)\n    return nth_octagonal(n)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3*n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (3 * n - 1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_str = defaultdict(list)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1,n+1):\n            sub_str[j-i].append(s[i:j])\n    return len([s for s in sub_str.values() if sum(map(int,s))==len(s)])\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def find_SubString(s,l):\n        if len(s)==0 or len(s)==1:\n            return 1\n        \n        sum=0\n        for i in range(len(s)):\n            sum+=int(s[i])\n            if sum>l:\n                break\n        if sum==l:\n            return 1\n        else:\n            return 0\n            \n    sum=0\n    for i in range(len(s)):\n        sum+=int(s[i])\n    if sum==0:\n        return 1\n    for i in range(len(s)):\n        sum=sum-int(s[i])\n        if sum==0:\n            return 1\n        count=find_SubString(s[i+1:],sum)\n        if count==0:\n            return count\n        else:\n            return count+1\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # print(len(s))\n    if len(s)<=0:\n        return 0\n    dic = defaultdict(int)\n    count = 0\n    for i in range(len(s)):\n        dic[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            if dic[s[i]]>1 and s[i]==s[j-1]:\n                continue\n            if j-i>=2:\n                sum_digits = 0\n                for k in range(i,j):\n                    sum_digits += int(s[k])\n                if sum_digits==j-i:\n                    count += 1\n                    break\n            if j-i==1:\n                if s[i]==s[j-1]:\n                    count += 1\n                    break\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    str_len = len(s)\n    # if length of string is less than 2 return 0\n    if str_len < 2:\n        return 0\n    # if length is 2 it must be even so return 1\n    elif str_len == 2:\n        return 1\n    # if length is 3 then only one substrings is possible for length is 3\n    elif str_len == 3:\n        if s[0] + s[1] + s[2] == s[0] * 3:\n            return 1\n        else:\n            return 0\n    else:\n        dict_res = defaultdict(int)\n        # for loop to go through every substring length\n        for i in range(1, str_len):\n            dict_res[s[i - 1] + s[i]] += 1\n        for i in range(1, str_len):\n            if s[i - 1] + s[i] == str_len:\n                dict_res[s[i - 1] + s[i]] += 1\n        ans = 0\n        for key, val in dict_res.items():\n            ans += val * (val + 1) // 2\n        return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) < 3:\n        return len(s)\n    ans = 0\n    for i in range(len(s)):\n        total = 0\n        for j in range(i, len(s)):\n            total += int(s[j])\n            if total == j - i + 1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            sub = s[i:j]\n            # print(sub)\n            if len(sub)>1:\n                sub_sum = sum(map(int, sub))\n                if sub_sum == len(sub):\n                    sub_count+=1\n    return sub_count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]] += 1\n        for j in range(i+1, len(s)+1):\n            if sum(map(int, s[i:j])) == j-i:\n                count += d[s[i:j]]\n            if sum(map(int, s[i:j])) == j-i:\n                count += d[s[i:j]]\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # count = 0\n    # for i in range(len(s)):\n    #     for j in range(i+1, len(s)+1):\n    #         sum_sub = 0\n    #         for k in range(i, j):\n    #             sum_sub += int(s[k])\n    #         if sum_sub == j-i:\n    #             count += 1\n    # return count\n    count = 0\n    length = len(s)\n    left_sum = 0\n    right_sum = 0\n    for i in range(length):\n        left_sum += int(s[i])\n        right_sum += int(s[length-i-1])\n        if left_sum == right_sum:\n            count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if l == 2:\n                if int(s[i]) + int(s[j]) == l:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n            else:\n                if int(s[i]) + int(s[j]) == l:\n                    dp[i][j] = 1 + dp[i + 1][j - 1]\n                else:\n                    dp[i][j] = 0\n    # for i in range(n):\n    #     print(*dp[i])\n    return dp[0][n - 1]\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sub(s,i,j):\n        return len([x for x in range(i,j)])\n    def sum_char(s,i,j):\n        return sum([int(x) for x in s[i:j+1]])\n    def check(s,i,j):\n        if j-i+1<sum_char(s,i,j):\n            return False\n        else:\n            return True\n    return len([s for s in range(len(s)) if check(s,0,len(s)-1)])\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = None\n    for num in xs:\n        if not min_num:\n            min_num = num\n        if min_num > num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    min_value = xs[0]\n    for v in xs:\n        if v < min_value:\n            min_value = v\n    return min_value\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_val = xs[0]\n    for value in xs:\n        if value < min_val:\n            min_val = value\n    return min_val\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #return min(xs)\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Method 1\n    # return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_so_far = None\n    for x in xs:\n        if smallest_so_far is None:\n            smallest_so_far = x\n        elif x < smallest_so_far:\n            smallest_so_far = x\n    return smallest_so_far\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # handle edge case\n    if len(test_list) < 2:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max([abs(item_tuple[0]-item_tuple[1]) for item_tuple in test_list])\n    #Using built-in function for checking max value in a list\n    #return max(list(test_list))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # The function receives a tuple list and return the maximum difference between pairs in the list.\n    test_list.sort()\n    min_val = min(test_list[0], test_list[1])\n    max_val = max(test_list[0], test_list[1])\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        diff = test_list[i+1]-test_list[i]\n        if diff > max_diff:\n            max_diff = diff\n            max_diff_pair = (test_list[i], test_list[i+1])\n        if test_list[i] > test_list[i+1]:\n            test_list[i], test_list[i+1] = test_list[i+1], test_list[i]\n    return max_diff, max_diff_pair\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[i] - test_list[j]\n            if max_diff < diff:\n                max_diff = diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    import itertools\n    return max(abs(b-a) for a, b in itertools.combinations(test_list, 2))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    return max(abs(a - b) for a, b in zip(test_list, test_list[1:]))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    return max(test_list[i+1] - test_list[i] for i in range(len(test_list)-1))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    min_number = min(test_list)\n    max_number = max(test_list)\n    difference = max_number - min_number\n    return difference\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1], reverse = True)\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    print(sorted(subjectmarks,key=lambda x:x[1]))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    for i in range(len(subjectmarks)):\n        for j in range(len(subjectmarks)-1):\n            if(subjectmarks[j][1]>subjectmarks[j+1][1]):\n                (subjectmarks[j],subjectmarks[j+1]) = (subjectmarks[j+1],subjectmarks[j])\n    return subjectmarks\ndef marks_freq(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef frequency_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_marks.keys():\n            dict_of_marks[i[1]] = dict_of_marks[i[1]] + 1\n        else:\n            dict_of_marks[i[1]] = 1\n    return dict_of_marks\ndef most_freq_marks(dict_of_marks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    freq = 0\n    for k,v in dict_of_marks.items():\n        if v > freq:\n            freq = v\n            freq_marks = k\n    return freq_marks\ndef dict_of_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    dict_of_marks = { }\n    for i in subjectmarks:\n        if i[1] in dict_of_mark"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    def sort_marks(subj):\n        return subj[1]\n    subjectmarks.sort(key=sort_marks)\n    return subjectmarks\n    \nsubjects = ['Physics', 'Maths', 'History']\nmarks = [8, 5, 10, 7, 9]\nsubject_marks = zip(subjects, marks)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) == type([]):\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for element in data_list:\n        if type(element) is list:\n            sum += recursive_list_sum(element)\n        else:\n            sum += element\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, int):\n            result += item\n        else:\n            result += recursive_list_sum(item)\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    for i in data_list:\n        if type(i) == list:\n            sum = sum + recursive_list_sum(i)\n        else:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return recursive_list_sum(data_list[:-1]) + data_list[-1]\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n    for item in data_list:\n        if isinstance(item, list):\n            result += recursive_list_sum(item)\n        else:\n            result += item\n    return result\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return sum(data_list)\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >=0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    #count = 0\n    #for i in list:\n    #    if(i>0):\n    #        count = count + 1\n    #return count\n    return len([i for i in list if i>0])\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(True)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    counter = 0\n    for i in list:\n        if i > 0:\n            counter += 1\n    return counter\nprint(\"The number of positive numbers in the list is:\", pos_count([1,-1,2,3,4,-5,6]))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    \n    count=0\n    for i in list:\n        if(i>0):\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    bell_numbers = [0,1,1,2,5,15,52,203,846,4304,2307,10946,58915,370080,2540160,12641530]\n    \n    if n >= len(bell_numbers):\n        return bell_numbers[-1]\n    else:\n        return bell_numbers[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = {0:1, 1:1}\n    \n    def bell_number_helper(n, bell_numbers):\n        if n in bell_numbers:\n            return bell_numbers[n]\n        else:\n            bell_numbers[n] = bell_number_helper(n-1, bell_numbers) + bell_number_helper(n-2, bell_numbers)\n            return bell_numbers[n]\n    return bell_number_helper(n, bell_numbers)\n    \ndef power_set_n(n):\n    '''\n    Write a function to return a list of all possible subsets of a set of length n.\n    '''\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[0],[1]]\n    sets = [[0]]\n    for i in range(1, n):\n        new_sets = []\n        for set in sets:\n            for new_set in power_set_n(n-1):\n                new_sets.append(set+new_set)\n        sets = new_sets\n    return sets\n    \ndef power_set_n_set(n):\n    '''\n    Write a function to return a set of all possible subsets of a set of length n.\n    '''\n    sets = set()\n    for i in range(2**n):\n        subset = []\n        for j in range(n):\n            if i >> j & 1:\n                subset.append(j)\n        sets.add(tuple(subset))\n    return sets\n    \ndef power_set_n_helper(n, subset):\n    '''\n    Write a function to find all subsets of a set of length n.\n    '''\n    if n == 0:\n        return [subset]\n    subsets = []\n    for i in range(len(subset)):\n        subsets += power_set_n_helper(n-1, subset[:i] + subset[i+1:])\n    return subsets\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # n = len(bells)\n    # if n == 0:\n    #     return 0\n    # if n == 1:\n    #     return 1\n    # else:\n    #     return bell_number(n-1) + bell_number(n-2)\n    \n    # dp = [0] * (n+1)\n    # dp[0] = 1\n    # dp[1] = 1\n    # for i in range(2, n+1):\n    #     for j in range(i):\n    #         dp[i] += dp[j] * dp[i-j-1]\n    # return dp[n]\n    \n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(i):\n            dp[i] += dp[j] * dp[i-j-1]\n    return dp[n]\n    "
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    #Initialize the set of Bell numbers to be used \n    bell_numbers = {1:1, 2:1, 3:2, 4:5, 5:42, 6:132, 7:429, 8:1430, 9:4611, 10:17902, 11:63642, 12:263327, 13:807572, 14:400699, 15:1378537, 16:5246576, 17:2099479, 18:7526276, 19:3742378, 20:13358038, 21:50782054, 22:24290670, 23:86947710, 24:38255626, 25:14209322, 26:54034861, 27:24367742, 28:83836265, 29:37353781, 30:150320187, 31:499461221, 32:2238772272, 33:8593513160, 34:37698022194, 35:156877249309, 36:536744553426, 37:2289307864944, 38:88930666065012, 39:3762377478025, 40:16016348767052, 41:54802243003444, 42:24286077131664, 43:888537341826211, 44:375826494111322, 45:156953017535762, 46:538084469254456, 47:249082964172165, 48:867359975374748, 49:380107449162052, 50:160178276318552, 51:548717802111204, 52:251589019528602, 53:867379862535483, 54:3927170979163374, 55:16059290106673, 56:55856835194070, 57:25169800732967, 58:869433852369101, 59:3933895826335223, 60:160968151479308, 61:549857214134700, 62:2520288466772944, 63:868372850511299, 64:393424261207832, 65:1613576689338416, 66:549918475597785, 67:2524962587013458, 68:869443634208814, 69:393613432129905, 70:161566332230788, 71:550069593527516, 72:252693068163828, 73:869843709925961, 74:3938207989363724, 75:161712129734836, 76:54907914462480, 77:252889290102178, 78:869883166868291, 79:394014852819017, 80:1618243563296422, 81:550145976765879, 82:252948165469618, 83:869883606533904, 84:394097395090874, 85:1619308815636074, 86:550059953141675, 87:253205989758285, 88:869863705695816, 89:394309033952608, 90:1621149799815783, 91:550220606874078, 92:2533262657161104, 93:869777768737106, 94:394438651024075, 95:1622146868967376, 96:550050405501044, 97:253459890365168, 98:869823491681157, 99:394773275312255, 100:1624469913485978}\n    \n    #Initialize the array for the answer\n    answers = []\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    l = [[0 for i in range(n+1)] for j in range(n+1)]\n    l[0][0] = 1\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if i >= j:\n                l[i][j] = l[i-1][j] + l[i][j-1]\n            else:\n                l[i][j] = 0\n    print(l)\n    return l[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n < 2:\n        return 0\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i+1):\n            dp[i] = dp[i] + dp[i-j] * dp[j-1]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = [1 for i in range(n+1)]\n    bell[0] = 0\n    bell[1] = 1\n    for i in range(2,n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    if A[0] < A[1]:\n        flag = False\n    else:\n        flag = True\n    for i in range(1,len(A)-1):\n        if flag == False:\n            if A[i] < A[i+1]:\n                flag = False\n            else:\n                return False\n        else:\n            if A[i] > A[i+1]:\n                flag = True\n            else:\n                return False\n    if flag == True:\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #Compare every number in the array to the next number in the array\n    for i in range(len(A)-1):\n        if A[i]>A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n    "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\ndef is_Monotonic(A):\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\nA = [1,2,3,5,4]\nprint(is_Monotonic(A))"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in xrange(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in xrange(len(A) - 1)))\nA = [6, 5, 4, 4]\nprint(is_Monotonic(A))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1))) \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    flag = False\n    for item in l:\n        if set(item) == set(s):\n            flag = True\n            break\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s: return True\n    if not l: return False\n    def is_sub_list(l, s):\n        if len(l) >= len(s):\n            if l == s:\n                return True\n            elif is_sub_list(l[1:], s):\n                return True\n        return False\n    if is_sub_list(l, s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    res = False\n    if s == []:\n        res = True\n    elif s == l:\n        res = True\n    elif len(s) > len(l):\n        res = False\n    else:\n        for i in range(len(l)):\n            if l[i] == s[0]:\n                n = 1\n                while (n < len(s)) and (l[i+n] == s[n]):\n                    n += 1\n                if n == len(s):\n                    res = True\n                    break\n    return res\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    res = True\n    n = len(s)\n    if n == 0:\n        return True\n    for i in range(len(l)):\n        if n <= len(l[i]) and s == l[i][0:n]:\n            res = True\n        else:\n            res = False\n            break\n    return res\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_len = len(s)\n    if sub_len == 0:\n        return True\n    if len(l) < sub_len:\n        return False\n    for i in range(len(l)-sub_len+1):\n        if l[i] == s[0]:\n            flag = True\n            for j in range(1, sub_len):\n                if l[i+j]!= s[j]:\n                    flag = False\n                    break\n            if flag:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    flag = False\n    for i in range(len(l)):\n        if l[i] == s[0]:\n            if len(l) >= (i + len(s)):\n                if l[i:i+len(s)] == s:\n                    flag = True\n    return flag\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # base case: if the input list is empty, then we don't have any sublists.\n    if len(l) == 0:\n        return False\n    if len(l) < len(s):\n        return False\n    # base case: if sublist is empty, then we have a sublist.\n    if len(s) == 0:\n        return True\n    # base case: if last element of sublist does not match the first element of list, then sublist cannot be found in list.\n    if l[len(l) - 1]!= s[0]:\n        return False\n    # recursive case:\n    return is_sublist(l[0:len(l) - 1], s[1:])\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(Input)\n    if len(Input) < 2:\n        return True\n    else:\n        return Input[0] == Input[1]\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_list = Input.split(')')\n    tuple_list.pop()\n    if len(tuple_list) == 1:\n        return 1\n    else:\n        return 0\n    \ndef extract_col_from_csv_file(file_name):\n    '''\n    Write a function to extract certain column from a given csv file.\n    '''\n    import csv\n    column_number = int(input('Column Number: '))\n    data = []\n    with open(file_name, 'r') as csv_file:\n        csv_reader = csv.reader(csv_file)\n        for line in csv_reader:\n            data.append(line[column_number-1])\n    return data\n    \ndef print_all_characters(string):\n    '''\n    Write a function to print all the characters from a given string.\n    '''\n    for i in string:\n        print(i)\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!=len(Input[0]):\n            return False\n    return True\ndef multiply(Input):\n    '''\n    Write a function to multiply all numbers in the given tuple.\n    '''\n    return(reduce(lambda x,y: x*y, Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    a = set(map(len, Input))\n    print(a)\n    if len(a) > 1:\n        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input[0]) == len(Input[1]) == len(Input[2]) == len(Input[3]) == len(Input[4]) == len(Input[5]) == len(Input[6]) == len(Input[7]) == len(Input[8]) == len(Input[9]) == len(Input[10]) == len(Input[11]):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(Input) == len(set(len(item) for item in Input))\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(map(tuple,Input))\n    Result = []\n    # print(Input)\n    for i in Input:\n        Result.append(len(i))\n    # print(Result)\n    if len(set(Result)) == 1:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Input = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True\n    \ndef find_common_char(Input):\n    '''\n    Write a function to find the common characters in all the given tuples.\n    '''\n    #Input = [(1, 2, 3), (4, 5), (6, 7, 8, 9)]\n    common = []\n    for i in range(len(Input[0])):\n        for j in range(len(Input)):\n            if Input[0][i] == Input[j][i]:\n                common.append(Input[0][i])\n    return common\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        if len(Input) == len(Input[0]):\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input = list(Input)\n    n = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 0: return []\n    gap = len(nums)\n    swapped = True\n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1: gap = 1\n        swapped = False\n        for i in range(0, len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums, 0, len(nums) - 1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    #\n    gap = len(nums)\n    #print('gap = ', gap)\n    #\n    swapped = True\n    #\n    while gap > 1 or swapped:\n        #print('gap = ', gap)\n        gap = int(gap / 1.3)\n        #print('gap = ', gap)\n        if gap <= 1:\n            gap = 1\n        swapped = False\n        #\n        i = 0\n        while i < len(nums) - gap:\n            j = i + gap\n            if nums[i] > nums[j]:\n                swap(i, j)\n                swapped = True\n            i += 1\n    #\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.25))\n        print(\"Gap:\", gap)\n        swapped = False\n        for i in range(len(nums) - gap):\n            j = i + gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                swapped = True\n        print(nums)\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n    def isSorted(nums):\n        for i in range(1,len(nums)):\n            if nums[i-1] > nums[i]:\n                return False\n        return True\n    def partition(nums,p,r):\n        '''\n        partition is a function which takes in a list,\n        and a start index and end index, and splits the list\n        into a sublist which is sorted, and a sublist which is unsorted\n        '''\n        pivot = nums[r]\n        i = p - 1\n        for j in range(p,r):\n            if nums[j] < pivot:\n                i += 1\n                swap(i,j)\n        swap(i+1,r)\n        return i+1\n    def quicksort(nums,p,r):\n        if r - p <= 0:\n            return\n        q = partition(nums,p,r)\n        quicksort(nums,p,q-1)\n        quicksort(nums,q+1,r)\n    #quicksort(nums,0,len(nums)-1)\n    quicksort(nums,0,len(nums)-1)\n    if isSorted(nums):\n        return nums\n    else:\n        return comb_sort(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = int(input())\n    lst = []\n    for i in range(1,n+1):\n        if (n - i*i) in lst:\n            print(\"Yes\")\n            print(\"%d = %d^2 + %d^2\"%(n,i,n-i*i))\n            break\n        lst.append(i*i)\n    else:\n        print(\"No\")\n    \n    \ndef sq_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of two squares or not.\n    '''\n    n = int(input())\n    lst = []\n    for i in range(1,n+1):\n        if (n - i*i) in lst:\n            print(\"Yes\")\n            print(\"%d = %d^2 + %d^2\"%(n,i,n-i*i))\n            break\n        lst.append(i*i)\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x=n\n    l=[]\n    while x>0:\n        l.append(x%2)\n        x=x//2\n    print(l)\n    a,b,c,d=0,0,0,0\n    for i in range(0,len(l)):\n        if l[i]==1:\n            if i%2==0:\n                a+=1\n            else:\n                b+=1\n        else:\n            if i%2==0:\n                c+=1\n            else:\n                d+=1\n    if a%2==0 and b%2==0:\n        for i in range(0,len(l)):\n            if l[i]==1:\n                if i%2==0:\n                    a=a//2\n                    if a%2==0:\n                        print(\"1st Square is :\",a)\n                    else:\n                        print(\"1st Square is :\",a+1)\n                else:\n                    b=b//2\n                    if b%2==0:\n                        print(\"2nd Square is :\",b)\n                    else:\n                        print(\"2nd Square is :\",b+1)\n            else:\n                if i%2==0:\n                    c=c//2\n                    if c%2==0:\n                        print(\"3rd Square is :\",c)\n                    else:\n                        print(\"3rd Square is :\",c+1)\n                else:\n                    d=d//2\n                    if d%2==0:\n                        print(\"4th Square is :\",d)\n                    else:\n                        print(\"4th Square is :\",d+1)\n        print(\"The given number can be represented as the difference of two squares\")\n    else:\n        print(\"The given number can not be represented as the difference of two squares\")\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    flag = False\n    for i in range(n+1):\n        for j in range(n+1):\n            if (i*i + j*j) == n:\n                flag = True\n                break\n        if flag:\n            break\n    return flag\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sq1,sq2=0,0\n    for i in range(1,n):\n        if i*i<n:\n            sq1=i*i\n        if n-sq1>0:\n            sq2=n-sq1\n    if sq2!=0:\n        return(True)\n    return(False)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n ** 0.5) % 1 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if i**2 > n:\n            break\n        else:\n            for j in range(1,n):\n                if (i**2+j**2) == n:\n                    print(i,j)\n                    return 1\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if ((i*i+j*j)==n):\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 0:\n        return True\n    i = 1\n    while i*i <= n:\n        if (n-i*i)**0.5 == int((n-i*i)**0.5):\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n<0):\n        print(\"please enter positive number\")\n    elif (n==0):\n        return True\n    else:\n        for i in range(n):\n            for j in range(n):\n                if(i**2 + j**2 == n):\n                    return True\n                else:\n                    continue\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    isSquare = lambda n: n*n == n\n    for i in range(1, n//2):\n        if isSquare(i) and isSquare(n-i):\n            print(\"Yes! {} = {} - {}\".format(n, i, n-i))\n            return\n    print(\"No! {} = {} - {}\".format(n, -1, -1))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors) < len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    length = len(colors)\n    if length == len(patterns) and length >= 1:\n        i = 0\n        j = 1\n        while i < length-1:\n            if patterns[i]!= patterns[j] and i!= j:\n                return False\n            i+=2\n            j+=2\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (colors == [] or patterns == []):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i] not in patterns:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    for i in range(len(patterns)):\n        if patterns[i]!= colors[i]:\n            return False\n    return True\n    \ndef is_subsequence(colors, sequence):\n    '''\n    Write a function to check whether the colors in the sequence array follow the colors in the colors array.\n    '''\n    colors = list(colors)\n    if (len(colors)!= len(sequence)):\n        return False\n    for i in range(len(sequence)):\n        if sequence[i] not in colors:\n            return False\n        else:\n            colors.remove(sequence[i])\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # check if patterns is not a list\n    if not isinstance(patterns, list):\n        return False\n    \n    # check if every element in patterns is a list\n    for pattern in patterns:\n        if not isinstance(pattern, list):\n            return False\n    \n    # check if every element in patterns is a string\n    for pattern in patterns:\n        if not isinstance(pattern[0], str):\n            return False\n        \n    # check if every element in patterns is a unique string\n    for pattern in patterns:\n        if len(pattern)!= len(set(pattern)):\n            return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    num_patterns = len(patterns)\n    num_colors = len(colors)\n    if num_patterns!= num_colors:\n        return False\n    for i in range(num_patterns):\n        if not is_pattern(colors[i], patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(colors[i] == patterns[i] for i in range(len(colors)))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    res = []\n    for i in range(0, len(colors)):\n        if patterns[i] == '1':\n            res.append('0')\n        elif patterns[i] == '0':\n            res.append('1')\n    if res == colors:\n        return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # first index 0, then 1, then 2, etc\n    colors = list(colors)\n    # patterns = ['aaa', 'bbb', 'ccc', 'ddd']\n    \n    for i in range(len(patterns)):\n        if len(colors) < i+1:\n            return False\n        \n        if patterns[i] == colors[i]:\n            # pattern[0] == color[0]\n            # pattern[1] == color[1]\n            # pattern[2] == color[2]\n            # pattern[3] == color[3]\n            continue\n        else:\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(tup[0], tup[1]) for tup in test_list if (tup[0]%K)==0 and (tup[1]%K)==0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [(a, b) for a, b in test_list if (a % K == 0) & (b % K == 0)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    lst = []\n    for i in test_list:\n        if i[0] % K == 0 and i[1] % K == 0:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # return [t for t in test_list if all(i % K == 0 for i in t)]\n    return list(filter(lambda x: all(i % K == 0 for i in x), test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_list = []\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list)):\n            if test_list[i][0] % K == 0 and test_list[i][1] % K == 0 and test_list[i][2] % K == 0 and test_list[i][3] % K == 0 and test_list[i][4] % K == 0:\n                if test_list[i] not in result_list:\n                    result_list.append(test_list[i])\n    return result_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Approach 1:\n    # test_list = [(1,1), (2,6), (3,9), (4,12), (5,15), (6,18), (7,21), (8,24), (9,27), (10,30), (11,33), (12,36), (13,39), (14,42), (15,45), (16,48), (17,51), (18,54), (19,57), (20,60)]\n    # K = 6\n    # test_list = [(1, 1), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 30), (11, 33), (12, 36), (13, 39), (14, 42), (15, 45), (16, 48), (17, 51), (18, 54), (19, 57), (20, 60)]\n    # K = 2\n    # test_list = [(1, 1), (2, 6), (3, 9), (4, 12), (5, 15), (6, 18), (7, 21), (8, 24), (9, 27), (10, 30), (11, 33), (12, 36), (13, 39), (14, 42), (15, 45), (16, 48), (17, 51), (18, 54), (19, 57), (20, 60)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [tuple(t) for t in test_list if all([e % K == 0 for e in t])]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in test_list:\n        if i[0] % K == i[1] % K:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [sub for sub in test_list if all(i%K == 0 for i in sub)]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if K == 0:\n            if all([(int(i) % K) == 0 for i in tup]):\n                result.append(tup)\n        else:\n            if all([(int(i) % K) == 0 for i in tup]):\n                result.append(tup)\n    return result\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\nprint (is_Diff(51))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    # Return true if n is divisible by 11. \n    # otherwise return false. \n    if n % 11 == 0: \n        return True\n    return False\n    \n    # Driver code \n    n = 11\n    # Since 11 is divisible by 11. \n    print(is_Diff(n)) \n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\nprint(is_Diff(7))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\nprint(is_Diff(20))\nprint(is_Diff(44))\nprint(is_Diff(31))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n % 11 == 0): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    while n!= 0: \n        if n % 11 == 0: \n            return \"Yes\"\n        else: \n            return \"No\"\n        break\n    \ndef is_divisible(n): \n    '''\n    Write a Python function to check whether a number is divisible by another number. Accept two integers values\n    via cmdline (e.g. py app.py 2 4)\n    '''\n    x = int(input('Enter a number: '))\n    y = int(input('Enter a number: '))\n    if n % y == 0: \n        print('Number {} is divisible by number {}'.format(x, y))\n    else: \n        print('Number {} is not divisible by number {}'.format(x, y))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return \"The length of word: \" + s + \" is Even\"\n    else:\n        return \"The length of word: \" + s + \" is Odd\"\n    # code goes here \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if (len(s) % 2) == 0:\n        return False\n    else:\n        return True\n    \n    \ndef get_vowels(s): \n    '''\n    Write a python function to get the number of vowels and consonants in a string.\n    '''\n    count_vowels = 0\n    count_consonants = 0\n    for i in s:\n        if i in 'aeiou':\n            count_vowels += 1\n        elif i.isalpha():\n            count_consonants += 1\n    return count_vowels, count_consonants\n    \n    \ndef avg_vowels(word): \n    '''\n    Write a python function to get the average number of vowels and consonants in a string.\n    '''\n    count_vowels = 0\n    count_consonants = 0\n    total_vowels = 0\n    total_consonants = 0\n    for i in word:\n        if i in 'aeiou':\n            count_vowels += 1\n            total_vowels += 1\n        elif i.isalpha():\n            count_consonants += 1\n            total_consonants += 1\n    return (total_vowels/count_vowels), (total_consonants/count_consonants)\n    \n    \ndef palindrome_permutation(s): \n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    s = s.replace(' ', '')\n    s = s.lower()\n    d = {}\n    odd_count = 0\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for k, v in d.items():\n        if v % 2!= 0 and odd_count == 0:\n            odd_count += 1\n        elif v % 2!= 0 and odd_count!= 0:\n            return False\n    return True\n    \n    \ndef palindrome_permutation_hash(s): \n    '''\n    Write a python function to check whether a string is a permutation of a palindrome or not.\n    '''\n    s = s.replace(' ', '')\n    s = s.lower()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    odd_count = 0\n    for k, v in d.items():\n        if v % 2!= 0 and odd_count == 0:\n            odd_count += 1\n        elif v % 2!= 0 and odd_count!= 0:\n            return False\n    return True\n    \n    \ndef rotate_string(s, n): \n    '''\n    Write a python function to rotate a string by a given number of characters.\n    '''\n    return s[n:] + s[:n]\n    \n    \ndef encrypt(s):\n    '''\n    Write a python function to encrypt a string.\n    '''\n    r = ''\n    for i in s:\n        if i.isalpha():\n            r += str(ord(i)) +''\n        else:\n            r += i +''\n    return r.strip()\n    \n    \ndef decrypt(s):\n    '''\n    Write a python function to decrypt a string.\n    '''\n    r = ''\n    for i in s.split():\n        if i.isdigit():\n            r += chr(int(i))\n        else:\n            r += i\n    return r\n    \n    \ndef histogram(s):\n    '''\n    Write a python function to get the frequency of letters in a string.\n    '''\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n    \n    \ndef histogram_sort(s):\n    '''\n    Write a python function to sort the dictionary by frequency of letters in a string.\n    '''\n    d = histogram(s)\n    return dict(sorted(d.items(), key=lambda x: x[1], reverse=True))\n    \n    \ndef in_order(s): \n    '''\n    Write a python function to check whether a given string is a palindrome or not in the given order.\n    '''\n    return s == s[::-1]\n    \n    \ndef reverse_string(s): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\n    \n    \ndef reverse_string_in_place(s):\n    '''\n    Write a python function to reverse a string in place.\n    '''\n    s = s[::-1]\n    return s\n    \n    \ndef rotate_array(a, k): \n    '''\n    Write a python function to rotate the array by the given number of elements.\n    '''\n    return a[k:] + a[:k]\n    \n    \ndef array_sum(a): \n    '''\n    Write a python function to get the sum of all the elements in an array.\n    '''\n    return sum(a)\n    \n    \ndef array_sum_in_place(a):\n    '''\n    Write a python function to add the first element to the end and delete the last element of the array.\n    '''\n    a = a[:len(a)-1] + [a[0] + a[-1]]\n    return a\n    \n    \ndef array_length(a): \n    '''\n    Write a python function to get the length of the array.\n    '''\n    return len(a)\n    \n    \ndef array_max(a): \n    '''\n    Write a python function to get the maximum element of the array.\n    '''\n    return max(a)\n    \n    \ndef array_min(a): \n    '''\n    Write a python function to get the minimum element of the array.\n    '''\n    return min(a)\n    \n    \ndef is_sorted(a): \n    '''\n    Write a python function to check whether the array is sorted or not.\n    '''\n    return a == sorted(a)\n    \n    \ndef bubble_sort(a):\n    '''\n    Write a python function to sort the array in ascending order using bubble sort.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\n    \n    \ndef reverse_bubble_sort(a):\n    '''\n    Write a python function to sort the array in descending order using bubble sort.\n    '''\n    n = len(a)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if a[j] < a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\n    \n    \ndef selection_sort(a):\n    '''\n    Write a python function to sort the array in ascending order using selection sort.\n    '''\n    for i in range(len(a)):\n        min_index = i\n        for j in range(i+1, len(a)):\n            if a[j] < a[min_index]:\n                min_index = j\n        a[i], a[min_index] = a[min_index], a[i]\n    return a\n    \n    \ndef insertion_sort(a):\n    '''\n    Write a python function to sort the array in ascending order using insertion sort.\n    '''\n    for i in range(1, len(a)):\n        j = i\n        while j > 0 and a[j] < a[j-1]:\n            a[j], a[j-1] = a[j-1], a[j]\n            j -= 1\n    return a\n    \n    \ndef shell_sort(a):\n    '''\n    Write a python function to sort the array in ascending order using shell sort.\n    '''\n    h = 1\n    while h < len"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l%2==0:\n        print(l,': Even')\n    else:\n        print(l,': Odd')\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return(len(s)%2)\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"length of the word is even\"\n    else:\n        return \"length of the word is odd\""
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (3 * n - 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n - 1) * (n - 2) * (n - 3) // 24\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)*(n+3) / 6) \n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (n+2) / 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([i*(i+1) for i in range(1, n+1)])\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\n    # return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    pi = 3.1415926535897932384626433\n    radius = r\n    volume = (4/3) * pi * radius * radius * radius\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = int(input(\"Enter radius: \"))\n    vol = (4/3) * (3.14159265358979) * (r**3)\n    print(vol)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v=4/3*math.pi*r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * (math.pi * (r ** 3))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r<0:\n        raise ValueError(\"Negative radius\")\n    return (4.0/3.0)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=r**3\n    v=4/3*math.pi*r\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    r=r**2*math.pi\n    h=h*math.pi\n    v=r*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=r**2*math.pi\n    h=h*math.pi\n    v=1/3*r*h\n    return v\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    l=l*w*h\n    v=l\n    return v\ndef volume_prism(l,w,h):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    l=l*w*h\n    v=2*l+w*h+h*w\n    return v\ndef volume_hemisphere(r):\n    '''\n    Write a function to find the volume of a hemisphere.\n    '''\n    r=r**2*math.pi\n    v=1/3*math.pi*r**2\n    return v\ndef volume_triangle(s1,s2,s3):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s3=s3**2\n    s=s1+s2+s3\n    v=1/4*s*math.sqrt(s-(s1+s2+s3))\n    return v\ndef volume_parallelogram(s1,s2):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s=s1+s2\n    v=1/2*s*s1/s2\n    return v\ndef volume_trapezium(s1,s2,s3):\n    '''\n    Write a function to find the volume of a trapezium.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s3=s3**2\n    s=(s1+s2+s3)/2\n    v=1/3*s*(s1+s2+s3)/2\n    return v\ndef volume_simplify(a,b,c,d,e,f):\n    '''\n    Write a function to simplify an equation with three unknowns.\n    '''\n    d1=(b**2-4*a*c)\n    if d1>0:\n        d2=d1**0.5\n        x1=(-b+d2)/(2*a)\n        x2=(-b-d2)/(2*a)\n        if x1>=0 and x2>=0:\n            print('The first two solutions are: x=',x1,' and x=',x2)\n        elif x1>=0 and x2<0:\n            print('The first solution is: x=',x1)\n        elif x1<0 and x2>=0:\n            print('The first solution is: x=',x2)\n        elif x1<0 and x2<0:\n            print('There is no solution')\n    if d1==0:\n        x=-b/(2*a)\n        print('The solution is: x=',x)\n    if d1<0:\n        print('There is no solution')\ndef distance(x1,y1,z1,x2,y2,z2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    d=math.sqrt((x2-x1)**2+(y2-y1)**2+(z2-z1)**2)\n    return d\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    r=r**2\n    a=math.pi*r\n    return a\ndef area_hexagon(r):\n    '''\n    Write a function to calculate the area of a hexagon.\n    '''\n    r=r**2\n    a=1/2*r*math.sqrt(3)\n    return a\ndef area_rectangle(l,w):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    l=l*w\n    a=l\n    return a\ndef area_triangle(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s3=s3**2\n    s=s1+s2+s3\n    a=1/2*s*math.sqrt(s-(s1+s2+s3))\n    return a\ndef area_parallelogram(s1,s2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s=s1+s2\n    a=1/2*s*s1/s2\n    return a\ndef area_trapezium(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s3=s3**2\n    s=(s1+s2+s3)/2\n    a=1/2*s*(s1+s2+s3)/2\n    return a\ndef area_simplify(a,b,c,d,e,f):\n    '''\n    Write a function to simplify an equation with four unknowns.\n    '''\n    d1=(b**2-4*a*c)\n    if d1>0:\n        d2=d1**0.5\n        x1=(-b+d2)/(2*a)\n        x2=(-b-d2)/(2*a)\n        if x1>=0 and x2>=0:\n            print('The first two solutions are: x=',x1,' and x=',x2)\n        elif x1>=0 and x2<0:\n            print('The first solution is: x=',x1)\n        elif x1<0 and x2>=0:\n            print('The first solution is: x=',x2)\n        elif x1<0 and x2<0:\n            print('There is no solution')\n    if d1==0:\n        x=-b/(2*a)\n        print('The solution is: x=',x)\n    if d1<0:\n        print('There is no solution')\ndef area_triangle(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s3=s3**2\n    s=s1+s2+s3\n    a=1/2*s*math.sqrt(s-(s1+s2+s3))\n    return a\ndef area_parallelogram(s1,s2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s=s1+s2\n    a=1/2*s*s1/s2\n    return a\ndef area_trapezium(s1,s2,s3):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    s1=s1**2\n    s2=s2**2\n    s3=s3**2\n    s=(s1+s2+s3)/2\n    a=1/2*s*(s1+s2+s3)/2\n    return a\ndef area_simplify("
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #this will be the function called from print_sphere\n    #the function returns the volume of a sphere\n    return 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return(chr(sum%26))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    return chr(sum%26)\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    for i in range(len(strr)):\n        print(ord(strr[i]),end=\"\")\n    \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if not strr:\n        return 0\n    return(sum(list(map(ord, strr)))%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char=[]\n    for i in strr:\n        char.append(ord(i))\n    print(char)\n    temp=sum(char)\n    print(temp%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    result = 0 \n    for i in strr: \n        result += ord(i) \n    return result % 26\nprint(get_Char(\"I Love Python\")) \n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i)\n    ans = sum%26\n    return chr(ans)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(i) for i in strr]) % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 0\n    b = 1\n    for i in range(n):\n        a,b = b,(a+b)%10\n    return a\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 6\n    return sequence(n-1)+sequence(n-2)-sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    first = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7]\n    if n < len(first):\n        return first[n]\n    # Define a generator for the newman conway sequence\n    def newman(x, y, z): \n        '''\n        Write a function to generate the next term in the newman conway sequence.\n        '''\n        return (x * x + y * y + z * z) % 10\n    # find the sum of the digits of the first 7 numbers\n    total = 0\n    for i in range(len(first)):\n        total += first[i]\n    # Find the new number and update the sum\n    for i in range(len(first) - 1, n - 1):\n        new = newman(first[i], first[i + 1], total)\n        total = new\n    return new\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n        \n        \ndef move(n, m):\n    '''\n    Write a function that finds the nth number of the newman conway sequence\n    starting with m.\n    '''\n    \n    if n == 1:\n        return m\n    elif n == 2:\n        return 3 * m\n    else:\n        return move(n-1, m) + move(n-2, m)\n        \n        \ndef fibonacci(n):\n    '''\n    Write a function that finds the nth number in the fibonacci sequence\n    '''\n    \n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \n        \ndef power(x, n):\n    '''\n    Write a function that finds x to the nth power\n    '''\n    \n    if n == 1:\n        return x\n    elif n % 2 == 0:\n        return power(x, n//2) * power(x, n//2)\n    elif n % 2 == 1:\n        return x * power(x, n//2) * power(x, n//2)\n        \n        \ndef reverse(s):\n    '''\n    Write a function that reverses a string.\n    '''\n    \n    if len(s) <= 1:\n        return s\n    else:\n        return s[-1] + reverse(s[:-1])\n        \n        \ndef is_palindrome(s):\n    '''\n    Write a function that determines if a string is a palindrome\n    '''\n    \n    if len(s) <= 1:\n        return True\n    elif s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n        \n        \ndef remove_spaces(s):\n    '''\n    Write a function that removes all the spaces from a string\n    '''\n    \n    if len(s) <= 1:\n        return s\n    elif s[0] =='':\n        return remove_spaces(s[1:])\n    elif s[-1] =='':\n        return remove_spaces(s[:-1])\n    else:\n        return s[0] + remove_spaces(s[1:])\n        \n        \ndef is_power(a, b):\n    '''\n    Write a function that determines if a is a power of b\n    '''\n    \n    if b == 1:\n        return True\n    elif a % b == 0:\n        return is_power(a/b, b)\n    else:\n        return False\n        \n        \ndef gcd(a, b):\n    '''\n    Write a function that finds the greatest common divisor of two integers\n    '''\n    \n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n        \n        \ndef lcm(a, b):\n    '''\n    Write a function that finds the least common multiple of two integers\n    '''\n    \n    if b == 0:\n        return 0\n    elif a % b == 0:\n        return b * lcm(a, b - 1)\n    else:\n        return lcm(a, b - 1)\n        \n        \ndef sum_digits(n):\n    '''\n    Write a function that finds the sum of the digits of a nonnegative integer\n    '''\n    \n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n        \n        \ndef count_digits(n):\n    '''\n    Write a function that finds the number of digits in a nonnegative integer\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return 1 + count_digits(n // 10)\n        \n        \ndef is_prime(n):\n    '''\n    Write a function that determines if a number is prime\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        return is_prime(n - 1) + is_prime(n - 2)\n        \n        \ndef next_prime(n):\n    '''\n    Write a function that finds the next prime number after n\n    '''\n    \n    if is_prime(n) == True:\n        return n\n    else:\n        return next_prime(n + 1)\n        \n        \ndef make_readable(n):\n    '''\n    Write a function that converts an integer into a string that contains\n    spaces every three digits.\n    '''\n    \n    if n == 0:\n        return '0'\n    else:\n        return make_readable(n // 1000) +'' + str(n % 1000)\n        \n        \ndef find_string(s):\n    '''\n    Write a function that finds the smallest positive integer n that contains\n    every integer from 1 to n as a substring.\n    '''\n    \n    if s == '':\n        return 1\n    elif len(s) == 1:\n        return s\n    else:\n        if s[0]!= '1':\n            return '1'+ find_string(s[1:])\n        else:\n            return find_string(s[1:])\n        \n        \ndef find_subsets(s, n):\n    '''\n    Write a function that finds the number of subsets of a set with n elements\n    '''\n    \n    if n == 1:\n        return 2 ** len(s)\n    else:\n        if n % 2 == 0:\n            return find_subsets(s, n // 2) * find_subsets(s, n // 2)\n        else:\n            return find_subsets(s, n - 1) + find_subsets(s, n - 1)\n        \n        \ndef process_string(s):\n    '''\n    Write a function that returns the reverse of a string.\n    '''\n    \n    if len(s) == 1:\n        return s[0]\n    else:\n        return s[-1] + process_string(s[:-1])\n        \n        \ndef length_decomposition(s):\n    '''\n    Write a function that decomposes a string into its component lengths.\n    '''\n    \n    if len(s) == 1:\n        return [(1, s)]\n    elif len(s) == 2:\n        return [(1, s[0]), (1, s[1])]\n    else:\n        return length_decomposition(s[1:]) + [(len(s), s[0])] + length_decomposition(s[1:])\n        \n        \ndef find_maximum(a, b):\n    '''\n    Write a function that finds the maximum of two numbers\n    '''\n    \n    if a > b:\n        return a\n    else:\n        return b\n        \n        \ndef find_maximum_recursive(a, b):\n    '''\n    Write a function that finds the maximum of two numbers using recursion\n    '''\n    \n    if a > b:\n        return a\n    elif b > a:\n        return b\n    elif a == b:\n        return a\n    else:\n        return find_maximum(a, b)\n        \n        \ndef is_prime_recursive(n, i = 2):\n    '''\n    Write a function that determines if a number is prime\n    '''\n    \n    if n == 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % i == 0:\n        return False\n    elif i * i >= n:\n        return True\n    else:\n        return is_prime_recursive(n, i + 1)\n        \n        \ndef prime_factorization(n):\n    '''\n    Write a function that finds all the prime factors of a number\n    '''\n    \n    if is_prime(n) == True:\n        return [n]\n    else:\n        return [n] + prime_factorization(n - 1)\n        \n        \ndef find_prime_factors(n):"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 0: \n        print(\"invalid input\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # create a dictionary of previous numbers and the associated term\n    terms = {}\n    terms[0] = 0\n    terms[1] = 1\n    terms[2] = 2\n    terms[3] = 4\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 2:\n        return 1\n    else:\n        return sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    #Initialise list of numbers\n    numbers = [0, 1]\n    \n    #Add numbers 1 and 2\n    for i in range(0,n-2):\n        numbers.append(numbers[i] + numbers[i+1])\n    \n    return numbers[n-1]\n    \ndef collatz(number):\n    '''\n    A function to calculate the next number in the collatz sequence.\n    '''\n    \n    #Check if number is even\n    if number%2 == 0:\n        \n        #If number is even, divide by 2\n        next_number = number/2\n        \n    else:\n        \n        #If number is odd, triple and add 1\n        next_number = 3*number + 1\n        \n    return next_number\n    \ndef collatz_sequence(number):\n    '''\n    A function to create a collatz sequence up to a given number.\n    '''\n    \n    #Initialise list to store collatz sequence\n    collatz_list = []\n    \n    #Add number to collatz sequence\n    collatz_list.append(number)\n    \n    #Start cycling through collatz sequence\n    while collatz_list[-1]!= 1:\n        \n        #Calculate next number\n        collatz_list.append(collatz(collatz_list[-1]))\n    \n    #Reverse collatz sequence\n    collatz_list = collatz_list[::-1]\n    \n    return collatz_list\n    \ndef find_largest_collatz_sequence(n):\n    '''\n    A function to find the largest collatz sequence of length n.\n    '''\n    \n    #Initialise largest collatz sequence\n    largest_collatz_sequence = []\n    \n    #Check every collatz sequence for length n\n    for sequence in collatz_sequence(n):\n        \n        #If sequence is longer than current largest collatz sequence, replace\n        if len(largest_collatz_sequence) < len(sequence):\n            largest_collatz_sequence = sequence\n        \n    return largest_collatz_sequence\n    \n    "
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sequence(n-1) + sequence(n-2)\n    return number\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*(math.pi)*(r**3)\n    print(area)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI=math.pi\n    return 4*PI*r**2\ndef volume_sphere(r):\n    PI=math.pi\n    return 4/3*PI*r**3\ndef surfacearea_cylinder(r,h):\n    PI=math.pi\n    return 2*PI*r*(r+h)\ndef volume_cylinder(r,h):\n    PI=math.pi\n    return PI*r*r*h\ndef surfacearea_cone(r,h):\n    PI=math.pi\n    return PI*r*(r+math.sqrt(h**2+r**2))\ndef volume_cone(r,h):\n    PI=math.pi\n    return 1/3*PI*r*r*h\ndef surfacearea_cone_inclination(r,h,i):\n    PI=math.pi\n    return PI*r*r*(1+(i*h/r)**2)**0.5\ndef volume_cone_inclination(r,h,i):\n    PI=math.pi\n    return 1/3*PI*r*r*i*(1+(i*h/r)**2)**0.5\ndef surfacearea_rightcircularcone(r,h):\n    PI=math.pi\n    return PI*r*math.sqrt(h**2+r**2)\ndef volume_rightcircularcone(r,h):\n    PI=math.pi\n    return 1/3*PI*r*r*h\ndef surfacearea_rightcircularcylinder(r,h):\n    PI=math.pi\n    return 2*PI*r*math.sqrt(r**2+h**2)\ndef volume_rightcircularcylinder(r,h):\n    PI=math.pi\n    return PI*r*h\ndef surfacearea_squarepyramid(a,h):\n    PI=math.pi\n    return PI*a*h\ndef volume_squarepyramid(a,h):\n    PI=math.pi\n    return 1/3*PI*a*h**2\ndef surfacearea_cuboctahedron(r):\n    PI=math.pi\n    return 2*PI*(r**2+r*math.sqrt(8*(r**2)-1))\ndef volume_cuboctahedron(r):\n    PI=math.pi\n    return 1/3*PI*(r**2+r*math.sqrt(8*(r**2)-1))**3\ndef surfacearea_rectangularprism(a,b,c):\n    return 2*(a+b)*c\ndef volume_rectangularprism(a,b,c):\n    return a*b*c\ndef surfacearea_triangularprism(a,b,c):\n    return a*b*c/2\ndef volume_triangularprism(a,b,c):\n    return a*b*c/3\ndef surfacearea_rectangularprism_inclination(a,b,c,i):\n    return 2*(a+b)*c*(1+i**2)**0.5\ndef volume_rectangularprism_inclination(a,b,c,i):\n    return a*b*c*(1+i**2)**0.5\ndef surfacearea_pyramid(a,b,c,d):\n    return 2*(a+b)*c+a*d\ndef volume_pyramid(a,b,c,d):\n    return a*b*c*d/3\ndef surfacearea_rhombicuboctahedron(d):\n    return 4*math.sqrt(2)*d\ndef volume_rhombicuboctahedron(d):\n    return 1/3*math.sqrt(2)*d**3\ndef surfacearea_rhombus(a,b):\n    return math.sqrt(a**2+b**2)*2\ndef volume_rhombus(a,b):\n    return 1/3*a*b\ndef surfacearea_rhombicosidodecahedron(a):\n    return math.sqrt(3)*a**2\ndef volume_rhombicosidodecahedron(a):\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_squareheptagon(a):\n    return 5*a**2\ndef volume_squareheptagon(a):\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_cube(a):\n    return 6*a**2\ndef volume_cube(a):\n    return 1/3*a**3\ndef surfacearea_dodecahedron(a):\n    return 10*a**2\ndef volume_dodecahedron(a):\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_icosahedron(a):\n    return 20*a**2\ndef volume_icosahedron(a):\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_octahedron(a):\n    return 8*a**2\ndef volume_octahedron(a):\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_sodecahedron(a):\n    return 12*a**2\ndef volume_sodecahedron(a):\n    return 1/3*math.sqrt(3)*a**3\ndef surfacearea_truncatedoctahedron(a,b):\n    return 8*a*(a+b)\ndef volume_truncatedoctahedron(a,b):\n    return 1/3*math.sqrt(3)*a**3*(a+b)\ndef surfacearea_truncateddodecahedron(a,b):\n    return 12*a*(a+b)\ndef volume_truncateddodecahedron(a,b):\n    return 1/3*math.sqrt(3)*a**3*(a+b)\ndef surfacearea_truncatedicosahedron(a,b):\n    return 20*a*(a+b)\ndef volume_truncatedicosahedron(a,b):\n    return 1/3*math.sqrt(3)*a**3*(a+b)\ndef surfacearea_truncatedoctahedron_inclination(a,b,i):\n    return 8*a*(a+b)*(1+i**2)**0.5\ndef volume_truncatedoctahedron_inclination(a,b,i):\n    return 1/3*math.sqrt(3)*a**3*(a+b)*(1+i**2)**0.5\ndef surfacearea_truncateddodecahedron_inclination(a,b,i):\n    return 12*a*(a+b)*(1+i**2)**0.5\ndef volume_truncateddodecahedron_inclination(a,b,i):\n    return 1/3*math.sqrt(3)*a**3*(a+b)*(1+i**2)**0.5\ndef surfacearea_truncatedicosahedron_inclination(a,b,i):\n    return 20*a*(a+b)*(1+i**2)**0.5\ndef volume_truncatedicosahedron_inclination(a,b,i):\n    return 1/3*math.sqrt(3)*a**3*(a+b)*(1+i**2)**0.5\ndef surfacearea_cylinder_inclination(r,h,i):\n    PI=math.pi\n    return PI*r*(r+h*i)\ndef volume_cylinder_inclination(r,h,i):\n    PI=math.pi\n    return PI*r*r*(h+i*r)\ndef surfacearea_cone_inclination(r,h,i):\n    PI=math.pi\n    return PI*r*(r+math.sqrt(h**2+r**2))*(1+(i*h/r)**2)**0.5\ndef volume_cone_inclination(r,h,i):\n    PI=math.pi\n    return 1/3*PI*r*r*(h+i*r)*(1+(i*h/r)**2)**0.5\ndef surfacearea_elli"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r ** 2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    SA = 4 * math.pi * r ** 2\n    return SA\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError('n should be a non-negative integer')\n    else:\n        return int(n*(2*n-1)**.5)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = n-1\n    n_hex = n * (2*n + 1) / 2\n    return int(n_hex)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return 0\n    n = n + 1\n    init_val = n\n    curr_val = 2 * (n - 1)\n    i = 1\n    while curr_val <= n:\n        curr_val = curr_val + 2 * i\n        i = i + 1\n    diff = init_val - curr_val\n    return (n - diff)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal(n).center_in_window(14)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n) - pentagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return int(round(n*((1 + 1/3)**0.5)*((2*n) + 1))//2)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return \"INVALID INPUT\"\n    \n    if n == 1:\n        return 1\n    \n    num = [1, 2]\n    if n == 2:\n        return 3\n    else:\n        for i in range(n - 2):\n            num.append(6 * num[-1] - 3 * num[-2])\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 1\n    for i in range(1,n+1):\n        a,b = b,a+b\n    return a\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not n:\n        return 1\n    \n    if n == 1:\n        return 6\n    \n    return (n*(3*n-1))/2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # base case\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    dict4.update(dict3)\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Define a dictionary for the three dictionaries.\n    merged_dict = {}\n    # Use for loops to iterate through the three dictionaries.\n    for key in dict1:\n        # If the key from the dictionary 1 is not in the merged dictionary, then add it to the merged dictionary.\n        if key not in merged_dict:\n            merged_dict[key] = dict1[key]\n        # If the key from the dictionary 1 is in the merged dictionary, then add the dictionary 3 value to the merged dictionary.\n        if key in merged_dict:\n            merged_dict[key] += dict3[key]\n    for key in dict2:\n        # If the key from the dictionary 2 is not in the merged dictionary, then add it to the merged dictionary.\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n        # If the key from the dictionary 2 is in the merged dictionary, then add the dictionary 1 value to the merged dictionary.\n        if key in merged_dict:\n            merged_dict[key] += dict1[key]\n    for key in dict3:\n        # If the key from the dictionary 3 is not in the merged dictionary, then add it to the merged dictionary.\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict1.keys():\n        if key in dict2.keys():\n            if key in dict3.keys():\n                dict2[key].extend(dict3[key])\n    return dict2\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {**dict1, **dict2, **dict3}\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1\n    result.update(dict2)\n    result.update(dict3)\n    return result\ndef find_the_total_cost_of_ground_delivery(dist,budget):\n    return budget - dist\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #create new_dict\n    new_dict = {}\n    #get keys from dict1\n    keys1 = list(dict1.keys())\n    #get values from dict1\n    values1 = list(dict1.values())\n    #get keys from dict2\n    keys2 = list(dict2.keys())\n    #get values from dict2\n    values2 = list(dict2.values())\n    #get keys from dict3\n    keys3 = list(dict3.keys())\n    #get values from dict3\n    values3 = list(dict3.values())\n    #iterate through dict1\n    for key in keys1:\n        #append key:value1 to new_dict\n        new_dict[key] = dict1[key]\n        #iterate through dict2\n        for key2 in keys2:\n            #if key == key2, add key2:value2 to new_dict\n            if key == key2:\n                new_dict[key] = new_dict[key] + dict2[key2]\n            #if key2 not in dict1, add key2:value2 to new_dict\n            if key2 not in keys1:\n                new_dict[key2] = dict2[key2]\n        #iterate through dict3\n        for key3 in keys3:\n            #if key3 not in dict2, add key3:value3 to new_dict\n            if key3 not in keys2:\n                new_dict[key3] = dict3[key3]\n        return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict2:\n        if key not in dict3.keys():\n            dict3[key] = dict2[key]\n        else:\n            for i in range(len(dict2[key])):\n                if dict3[key][i]!= dict2[key][i]:\n                    dict3[key].append(dict2[key][i])\n    for key in dict1:\n        if key not in dict3.keys():\n            dict3[key] = dict1[key]\n        else:\n            for i in range(len(dict1[key])):\n                if dict3[key][i]!= dict1[key][i]:\n                    dict3[key].append(dict1[key][i])\n    return dict3\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key,value in dict3.items():\n        if key not in dict1.keys() and key not in dict2.keys():\n            dict1[key] = value\n        elif key in dict1.keys() and key in dict2.keys():\n            dict1[key] += dict2[key] + dict3[key]\n        elif key in dict1.keys() and key not in dict2.keys():\n            dict1[key] += dict3[key]\n        elif key not in dict1.keys() and key in dict2.keys():\n            dict1[key] += dict2[key]\n        elif key in dict1.keys() and key in dict2.keys():\n            dict1[key] += dict2[key] + dict3[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\nprint(freq_count([1, 2, 2, 3, 3, 3, 4, 5]))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    counts = {}\n    for item in list1:\n        counts[item] = list1.count(item)\n    return counts\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    my_dictionary = {}\n    for x in list1:\n        if x in my_dictionary:\n            my_dictionary[x] += 1\n        else:\n            my_dictionary[x] = 1\n    return my_dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for ele in list1:\n        if ele not in dic:\n            dic[ele] = 1\n        else:\n            dic[ele] += 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    for item in list1:\n        return collections.Counter(list1)\n        \ndef get_letter_count(string):\n    '''\n    Write a function to return the number of times each letter shows up in a string. \n    '''\n    for item in string:\n        if item!= '':\n            return collections.Counter(string)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    l = list1\n    d = {}\n    for i in range(len(l)):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    unique = []\n    for x in list1:\n        if x not in unique:\n            unique.append(x)\n    unique = sorted(unique)\n    unique = [x for x in unique if x!=None]\n    d = {}\n    for item in unique:\n        d[item] = list1.count(item)\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    new_dict = dict()\n    for element in list1:\n        if element not in new_dict:\n            new_dict[element] = 1\n        else:\n            new_dict[element] += 1\n    return new_dict\n    \ndef freq_count_v2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    new_dict = dict()\n    for element in list1:\n        new_dict[element] = new_dict.get(element, 0) + 1\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # dict1 = dict()\n    # for i in list1:\n    #     if i not in dict1:\n    #         dict1[i] = list1.count(i)\n    # return dict1\n    return collections.Counter(list1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        raise ValueError('number must be positive')\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create an empty list\n    my_list = []\n    # populate the list with the sequence of numbers, starting from zero\n    for num in range(N+1):\n        my_list.append(num)\n    # search the list for the first item that is not the closest smaller number\n    for num in my_list:\n        # if the first item in the list is not the closest smaller number, print the first item\n        if my_list[0]!= num:\n            # print the first item in the list\n            print(my_list[0])\n            break\n        # else, search the list for the next number in the sequence\n        else:\n            my_list.remove(num)\n            # if the list is empty, then there are no smaller numbers than the first number\n            if not my_list:\n                print('none')\n                break\n            else:\n                continue\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    for i in range(n):\n        if ((i + 1) < N):\n            print(i + 1)\n        else:\n            print(i)\nclosest_num(20)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return closest_num_helper(N, -1, 1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import math\n    n = N\n    while True:\n        n = n - 1\n        if n < 2:\n            return 2\n        sq = math.sqrt(n)\n        if int(sq + 0.5) ** 2 == n:\n            break\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N==1:\n        return -1\n    result = []\n    result.append(1)\n    result.append(1)\n    n = 2\n    while n < N:\n        if N % n == 0:\n            if result[n-1] < N:\n                result.append(n)\n            elif result[n-1] > N:\n                result.append(result[n-2])\n        n += 1\n    return result[-1]\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    my_dict = {i:i**2 for i in range(1,N+1)}\n    stack = []\n    stack.append(my_dict[1])\n    stack.append(my_dict[N])\n    min_diff = stack[0]\n    while stack:\n        num = stack.pop()\n        for key,value in my_dict.items():\n            if value>num:\n                if abs(value-num)<min_diff:\n                    min_diff = abs(value-num)\n                    stack.append(num)\n                    stack.append(value)\n                    break\n    print(min_diff)\n    return min_diff\nclosest_num(100)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if type(N)!= int:\n        return False\n    \n    digit_list = [int(d) for d in str(N)]\n    for i, d in enumerate(digit_list):\n        if d > 0:\n            digit_list[i] = -d\n    \n    sorted_digit_list = sorted(digit_list, reverse=True)\n    sorted_digit_list = [d for d in sorted_digit_list if d > 0]\n    \n    if len(sorted_digit_list) == 0:\n        return False\n    \n    return int(''.join([str(d) for d in sorted_digit_list]))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    import sys\n    import bisect\n    arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    print(bisect.bisect_left(arr, N))\n    # 1\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 2\n    \n    return closest_num(N - 1) + 1 if N % 2 == 0 else closest_num(N - 1)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    lst = []\n    for i in list1:\n        lst.append(len(i))\n    return max(lst)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    list1.sort(key = len)\n    return len(list1[-1])\n    \n    \n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max(list1, key=len)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = \"New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3\"\n    list1 = list1.split(\" \")\n    max=0\n    for x in list1:\n        if len(x)>max:\n            max=len(x)\n            word=x\n    return word,max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n    return max_length\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word=list1[0]\n    length=len(word)\n    for i in list1:\n        if(len(i)>length):\n            length=len(i)\n            word=i\n    print(word,\" : \",length)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return max([len(word) for word in list1])\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return(len(max(list1,key=len)))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    print(str1.find(sub_str))\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # return a list of all the index positions in the list\n    # for index in range(len(str1)):\n    #     for index2 in range(len(sub_str)):\n    #         if str1[index + index2]!= sub_str[index2]:\n    #             break\n    #     if index + index2 == len(sub_str):\n    #         return True\n    # return False\n    # using in\n    for x in str1:\n        if x in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) > len(str1):\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if sub_str in str1[i: i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    l = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return '2nd' if n % 2 else '1st'\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n):\n        if(not(is_undulating_number(i) and is_undulating_number(n - i))):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    x = n\n    s = 0\n    while x:\n        d = x%10\n        s += d**3\n        x = x//10\n    return s == n\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a = len(str(n))\n    t = int(str(n)[:a-2])\n    s = int(str(n)[a-2:])\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    l = [] \n    sum = 0\n    for i in range(1, n+1): \n        if (i % 2 == 0): \n            l.append(i ** 2) \n        else: \n            l.append(-1 * (i ** 2)) \n    for i in range(len(l)): \n        sum += l[i] \n    return (sum == 0) \nif __name__ == '__main__': \n    n = int(input())\n    if (is_undulating(n)): \n        print(\"Yes\") \n    else: \n        print(\"No\") "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return( (n % 100) - (n//100)%2 == 0)\n  \nif __name__ == '__main__': \n    n = int(input())\n    print(is_undulating(n))"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def get_digit(number, i):\n        return number%10**i\n    \n    def is_undulating_helper(number):\n        if get_digit(number, 0) == get_digit(number, 1):\n            return False\n        if get_digit(number, 1) == get_digit(number, 2):\n            return False\n        if get_digit(number, 0) == get_digit(number, 2):\n            return False\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(1, n + 1):\n        if i < n:\n            if i % 3 == 0:\n                print(i, end = \" \")\n            elif i % 3 == 1:\n                print(i, end = \" \")\n            else:\n                print(i, end = \" \")\n        else:\n            if i % 3 == 0:\n                print(i, end = \" \")\n            elif i % 3 == 1:\n                print(i, end = \" \")\n            else:\n                print(i, end = \" \")\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if len(n) % 2 == 0:\n        return False\n    else:\n        num = str(n)\n        if int(num[len(num) - 1]) > int(num[(len(num) - 1)//2]):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (sorted(str(n)) == list(str(n)) and any([str(n)[i] < str(n)[i + 1] for i in range(len(str(n)) - 1)]))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    a = int(a)\n    b = int(b)\n    a = a ** b\n    return a\nprint(power(2,3))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n    "
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n    \nprint(power(2,4))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if a>0 and b>0:\n        return a**b\n    else:\n        return -1\nprint(power(5,-4))\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    #base case:\n    if b == 0:\n        return 1\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    if b == -1:\n        return 1/a\n    if b % 2 == 1:\n        return a*power(a,b-1)\n    elif b % 2 == 0:\n        return power(a*a, b/2)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if not test_list:\n        return None\n    min_idx = 0\n    for idx in range(len(test_list)):\n        if test_list[idx][1] < test_list[min_idx][1]:\n            min_idx = idx\n    return min_idx\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #return min(test_list, key=itemgetter(1))[0]\n    min_value = test_list[0]\n    for x in range(len(test_list)):\n        if test_list[x][1] < min_value[1]:\n            min_value = test_list[x]\n    return min_value\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = test_list[0][1]\n    for i in test_list[1:]:\n        if i[1] < index:\n            index = i[1]\n    for j in test_list:\n        if j[1] == index:\n            return j[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (min(test_list, key=itemgetter(1))[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    print(f'\\ninput = {test_list}')\n    if len(test_list) == 0:\n        print('Returned -1')\n        return -1\n    else:\n        minimum_tuple = test_list[0]\n        for tup in test_list:\n            if tup[1] < minimum_tuple[1]:\n                minimum_tuple = tup\n        print(f'Returned {minimum_tuple[0]}')\n        return minimum_tuple[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    try:\n        return min(test_list, key=lambda x:x[1])[0]\n    except:\n        return None\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #returns the index of the smallest value\n    return test_list.index(min(test_list, key=itemgetter(1)))\n    \n    \ndef index_minimum_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #returns the index of the smallest value\n    return test_list.index(min(test_list))\n    \n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    #returns the index of the largest value\n    return test_list.index(max(test_list, key=itemgetter(1)))\n    \n    \ndef index_maximum_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    #returns the index of the largest value\n    return test_list.index(max(test_list))\n    \n    \ndef index_first_greater_than_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is larger than the second value. If no tuple is larger than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] > test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_greater_than_second_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is larger than the second value. If no tuple is larger than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index] > test_list[index+1]:\n            return index\n    return None\n    \n    \ndef index_first_greater_than_or_equal_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is larger than or equal to the second value. If no tuple is larger than or equal to the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] >= test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_greater_than_or_equal_second_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is larger than or equal to the second value. If no tuple is larger than or equal to the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index] >= test_list[index+1]:\n            return index\n    return None\n    \n    \ndef index_first_lesser_than_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is smaller than the second value. If no tuple is smaller than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] < test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_lesser_than_second_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is smaller than the second value. If no tuple is smaller than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index] < test_list[index+1]:\n            return index\n    return None\n    \n    \ndef index_first_lesser_than_or_equal_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is smaller than or equal to the second value. If no tuple is smaller than or equal to the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] <= test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_lesser_than_or_equal_second_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is smaller than or equal to the second value. If no tuple is smaller than or equal to the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index] <= test_list[index+1]:\n            return index\n    return None\n    \n    \ndef index_first_and_last_lesser_than_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first and last values are both smaller than the second value. If no tuple is smaller than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] <= test_list[index][1] and test_list[index][0] <= test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_and_last_lesser_than_second_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first and last values are both smaller than the second value. If no tuple is smaller than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] <= test_list[index][1] and test_list[index][0] <= test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_and_last_greater_than_second(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first and last values are both larger than the second value. If no tuple is larger than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] > test_list[index][1] and test_list[index][0] > test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_first_and_last_greater_than_second_no_key(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first and last values are both larger than the second value. If no tuple is larger than the second value, return None.\n    '''\n    #returns the index of the first larger value\n    for index in range(len(test_list)):\n        if test_list[index][0] > test_list[index][1] and test_list[index][0] > test_list[index][1]:\n            return index\n    return None\n    \n    \ndef index_greater_than_last_third(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple whose first value is greater than the last value of the third tuple. If no tuple satisfies this criterion, return None."
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n    return index_min[0]\ndef index_minimum_sorted(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n    return index_min\ndef index_minimum_map(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    index_min_map = {}\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n            index_min_map[i[0]] = i[1]\n    return index_min_map\ndef index_minimum_sort(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\ndef index_minimum_sorted_with_map(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    test_list.sort(key = itemgetter(1))\n    index_min_map = {}\n    index_min_map[test_list[0][0]] = test_list[0][1]\n    return index_min_map\ndef index_minimum_with_map(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    index_min_map = {}\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n            index_min_map[i[0]] = i[1]\n    return index_min_map\ndef index_minimum_zip(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n    return index_min\ndef index_minimum_sorted_zip(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\ndef index_minimum_map_zip(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    index_min_map = {}\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n            index_min_map[i[0]] = i[1]\n    return index_min_map\ndef index_minimum_zip_sorted(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    test_list.sort(key = itemgetter(1))\n    return test_list[0]\ndef index_minimum_with_map_zip(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    index_min_map = {}\n    for i in test_list:\n        if i[1] < index_min[1]:\n            index_min = i\n            index_min_map[i[0]] = i[1]\n    return index_min_map\ndef index_minimum_sorted_with_map_zip(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = test_list[0]\n    test_list.sort(key = itemgetter(1))\n    index_min_map = {}\n    index_min_map[test_list[0][0]] = test_list[0][1]\n    return index_min_map\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=itemgetter(1)))[0]\n    #print(min(test_list, key=itemgetter(1)))\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum2(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(sorted(test_list, key=itemgetter(1))[0])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum3(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[index_of_min][1]:\n            index_of_min = i\n    return(test_list[index_of_min])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum4(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=itemgetter(1)))\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum5(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(sorted(test_list, key=itemgetter(1))[0])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum6(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(test_list[min(test_list, key=itemgetter(1))])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum7(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=itemgetter(1)))\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum8(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=lambda tup:tup[1]))\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum9(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=lambda tup:tup[1]))\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum10(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=lambda tup:tup[1])[0])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum11(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=lambda tup:tup[1])[0])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum12(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[index_of_min][1]:\n            index_of_min = i\n    return(test_list[index_of_min][0])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum13(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[index_of_min][1]:\n            index_of_min = i\n    return(test_list[index_of_min])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum14(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[index_of_min][1]:\n            index_of_min = i\n    return(test_list[index_of_min])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum15(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_of_min = 0\n    for i in range(len(test_list)):\n        if test_list[i][1] < test_list[index_of_min][1]:\n            index_of_min = i\n    return(test_list[index_of_min])\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum16(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return(min(test_list, key=lambda tup:tup[1]))\n    #print(min(test_list, key=itemgetter(1))[0])\n    #return(min(test_list, key=itemgetter(1))[0])\ndef index_minimum17(test_list):\n    '''\n    Given a list of tuples, write a function that returns the firs"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length=[]\n    for x in lst:\n        length.append(len(x))\n    min_length = min(length)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    lst_len = []\n    for item in lst:\n        lst_len.append(len(item))\n    return min(lst_len)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst_len = []\n    for i in lst:\n        lst_len.append(len(i))\n    return min(lst_len)\n        \ndef Parse_List_Of_Dictionaries(lst, key):\n    '''\n    Write a function to parse a list of dictionaries to a single dictionary, \n    such that the values for a given key in all dictionaries are stored as a list. \n    '''\n    new_dict = {}\n    for i in range(0, len(lst)):\n        if key in lst[i]:\n            if lst[i][key] in new_dict:\n                new_dict[lst[i][key]].append(lst[i][key])\n            else:\n                new_dict[lst[i][key]] = [lst[i][key]]\n    return new_dict\n    \ndef Find_Nested_Keys(dictionary):\n    '''\n    Write a function to return all of the keys in a nested dictionary.\n    '''\n    key_lst = []\n    for key, value in dictionary.items():\n        for i in value:\n            key_lst.append(i)\n    return key_lst\n    \ndef Count_Occurrences_Of_Specific_Value(lst, val):\n    '''\n    Write a function to return the count of times a value appears in a list.\n    '''\n    count = 0\n    for i in lst:\n        if i == val:\n            count += 1\n    return count\n    \ndef Flatten_Dictionary(dictionary):\n    '''\n    Write a function to flatten a dictionary to a single level.\n    '''\n    flatten_dict = {}\n    for key, value in dictionary.items():\n        if type(value) == type([]):\n            for i in value:\n                flatten_dict[i] = i\n        else:\n            flatten_dict[value] = value\n    return flatten_dict\n    \ndef Find_Dict_Value_With_Max_Count(dictionary):\n    '''\n    Write a function to return the key corresponding to the max value in a dictionary.\n    '''\n    max_key = 0\n    max_count = 0\n    for key, value in dictionary.items():\n        if len(value) > max_count:\n            max_key = key\n            max_count = len(value)\n    return max_key\n    \ndef Dict_To_DataFrame(dictionary, index):\n    '''\n    Write a function to convert a dictionary to a dataframe.\n    '''\n    return pd.DataFrame.from_dict(dictionary, orient='index', columns=index)\n    \ndef List_Of_DataFrames_To_DataFrame(lst, index):\n    '''\n    Write a function to convert a list of dataframes to one dataframe.\n    '''\n    df_lst = []\n    for i in range(0, len(lst)):\n        df_lst.append(lst[i].iloc[:, 0])\n    return pd.DataFrame(df_lst, index=index)\n    \ndef Remove_Duplicates_From_List(lst):\n    '''\n    Write a function to remove duplicates from a list.\n    '''\n    return list(set(lst))\n    \ndef Remove_Duplicates_From_Dictionary(dictionary):\n    '''\n    Write a function to remove duplicates from a dictionary.\n    '''\n    return {key: value for key, value in dictionary.items() if key not in value}\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not isinstance(lst,list):\n        return \"Invalid Input\"\n    if len(lst)==0:\n        return \"Invalid Input\"\n    l=len(lst[0])\n    for i in lst:\n        if len(i)<l:\n            l=len(i)\n    return l\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for x in lst:\n        if len(x) < min_len:\n            min_len = len(x)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min(len(sublist) for sublist in lst)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=min(len(i) for i in lst)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    MIN_LEN = min(list(map(len, lst)))\n    print(MIN_LEN)\n    \n    \nFind_Min_Length([[1, 2, 3], [4], [1, 2, 3, 4], [1, 2, 3, 4, 5]])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = min(len(sublist) for sublist in lst)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m=0\n    for i in lst:\n        if len(i)<m:\n            m=len(i)\n    return m\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,int(n**0.5)+1):\n        if n%i==0:\n            count += 2\n    if n**0.5 == int(n**0.5):\n        count -= 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # divisor(24) -> 6 -> [1, 2, 3, 4, 6, 12]\n    divisor = [i for i in range(1,n+1) if n%i == 0]\n    return len(divisor)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*divisor(n-1)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    if n == 0:\n        return 0\n    # else\n    return divisor(n-1) + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        counter = 0\n        for i in range(1,n+1):\n            if n % i == 0:\n                counter += 1\n        return counter\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # if n < 0:\n    #     return 0\n    # if n == 0:\n    #     return 1\n    # if n == 1:\n    #     return 1\n    # if n == 2:\n    #     return 2\n    # res = 1\n    # for i in range(2, int(n**0.5) + 1):\n    #     if n % i == 0:\n    #         res += 2\n    # return res\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors=0\n    for i in range(1,n+1):\n        if n%i==0:\n            divisors+=1\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    cnt = 0\n    for i in range(1, n+1):\n        if n%i == 0:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    counter = 0\n    for i in range(1,n):\n        if n%i == 0:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        freq_dict[i] = list1.count(i)\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for item in list1:\n        if item not in frequency_dict:\n            frequency_dict[item] = 1\n        else:\n            frequency_dict[item] += 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for x in list1:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for el in list1:\n        if el in freq:\n            freq[el] += 1\n        else:\n            freq[el] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = [i for j in list1 for i in j]\n    list2 = list(set(list2))\n    dict1 = {}\n    for i in list2:\n        dict1[i] = list1.count(i)\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # You may want to use collections.Counter here\n    freq_dict = {}\n    for each_list in list1:\n        for element in each_list:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] = freq_dict[i] + 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for x in numbers:\n        product *= x\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    return reduce((lambda x, y: x * y), numbers, 1) / length\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    total = total / len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    sum = 1\n    for i in numbers:\n        sum = sum * i\n    return sum / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # multiply each number in the list and divide by the length of the list\n    result = 1\n    for num in numbers:\n        result = result * num\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = numbers.split()\n    total = 1\n    for num in numbers:\n        total *= int(num)\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result*i\n    return result/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    else:\n        return decimal_to_binary(n//2) + str(n%2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    if n == 0:\n        return '0'\n    while n!= 0:\n        binary += str(n % 2)\n        n = n // 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary += str(n % 2)\n        n //= 2\n    return binary[::-1]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = int(n)\n    if n == 0:\n        return '0'\n    res = ''\n    while n:\n        res = str(n % 2) + res\n        n = n // 2\n    return res\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<=0:\n        return 0\n    else:\n        return n%2 + 10*decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        n = n // 2\n        binary = str(remainder) + binary\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    while n > 0:\n        binary.append(n % 2)\n        n //= 2\n    return ''.join(map(str, binary[::-1]))\n  "
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    next_smallest = num - 1\n    while is_palindrome(next_smallest) == False:\n        next_smallest -= 1\n    return next_smallest\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    if num == 100:\n        return 99\n    last_digit = num % 10\n    num_from_right = num - last_digit\n    if last_digit < num_from_right:\n        return last_digit\n    else:\n        return num_from_right\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num > 0:\n        num = str(num)\n        num = int(num[::-1])\n        num += 1\n        while True:\n            num = str(num)\n            num = int(num[::-1])\n            if is_palindrome(num):\n                return num\n            num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if num < 10:\n        return num - 1\n    \n    is_odd = False\n    if num % 2 == 0:\n        num -= 1\n        is_odd = True\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    length = len(str(num))\n    if length == 1:\n        return int(num)\n    x = int(str(num)[:length//2])\n    y = int(str(num)[-length//2:])\n    if x < y:\n        x = int(''.join(reversed(str(x))))\n        return x + y\n    elif x > y:\n        y = int(''.join(reversed(str(y))))\n        return y + x\n    else:\n        return int(str(num) + str(num)[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = int(num)\n    if num < 10:\n        return None\n    num_str = str(num)\n    if len(num_str) == 1:\n        return int(num_str + num_str[-2::-1])\n    elif num_str[0] == '0':\n        return int(num_str[1:] + '9' + num_str[-2::-1])\n    elif num_str[0] == '1':\n        return int(num_str[1:] + '9' + num_str[-2::-1])\n    else:\n        return int(num_str[0:-1] + '9' + num_str[-2::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    if num_str == num_str[::-1]:\n        return -1\n    num = int(num_str[:-1])\n    while True:\n        num = num + 1\n        if num_str[::-1] == str(num):\n            return int(num_str + str(num))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pal = str(num)\n    if num < 10:\n        return num\n    if pal[0] == '9':\n        return int('1' + pal[1:])\n    pal_list = list(pal)\n    if pal_list[0] == '1':\n        pal_list[0] = '2'\n    else:\n        pal_list[0] = str(int(pal_list[0]) - 1)\n    pal = ''.join(pal_list)\n    return int(pal + pal[::-1][1:])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        temp = num\n        num = (num % 10)\n        num *= 10\n        num += (temp % 10)\n        num -= 1\n        num /= 10\n        num *= 10\n        num += (temp % 10)\n        num -= 1\n        num /= 10\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    n = num + 1\n    while True:\n        if is_palindrome(n):\n            return n\n        n += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr = [1,3,4,2,8,9,7]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        pivot = partition(arr, start, end)\n        if pivot + 1 == k:\n            return arr[pivot]\n        elif pivot + 1 < k:\n            start = pivot + 1\n        else:\n            end = pivot - 1\n    return arr[start]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # [1, 2, 3, 4, 5] k = 4,\n    # [1, 2, 3, 4, 5] k = 10,\n    # [1, 2, 3, 4, 5] k = 1\n    # [1, 2, 3, 4, 5] k = 2,\n    # [1, 2, 3, 4, 5] k = 3,\n    # [1, 2, 3, 4, 5] k = 4,\n    # [1, 2, 3, 4, 5] k = 5,\n    # [1, 2, 3, 4, 5] k = 6,\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # Your code here\n    \n    return arr[k]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(start, end):\n        pivot_index = start\n        pivot = arr[pivot_index]\n        while start < end:\n            if start < end and arr[end] < pivot:\n                arr[start] = arr[end]\n                start += 1\n            else:\n                arr[end] = arr[start]\n                end -= 1\n            arr[pivot_index] = arr[end]\n        return end\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    # Your code here\n    \n    # Use 2 pointer technique to find the kth element\n    \n    # If length of array is less than k\n    if (len(arr) < k):\n        return -1\n    \n    # If k is 0 or 1\n    if (k <= 1):\n        return arr[0]\n    \n    # If k is even\n    if (k % 2 == 0):\n        return kth_element(arr, k/2)\n    \n    # If k is odd\n    if (k % 2 == 1):\n        # If length of array is even\n        if (len(arr) % 2 == 0):\n            # If k is odd and (k/2) is even\n            if ((k % 2 == 1) and (k/2 % 2 == 0)):\n                return kth_element(arr, (k/2) + 1)\n            # If k is odd and (k/2) is odd\n            elif ((k % 2 == 1) and (k/2 % 2 == 1)):\n                return kth_element(arr, (k/2) + 1)\n            # If k is odd and (k/2) is even\n            elif ((k % 2 == 1) and (k/2 % 2 == 0)):\n                return kth_element(arr, (k/2) + 1)\n        # If length of array is odd\n        else:\n            # If k is odd and (k/2) is odd\n            if ((k % 2 == 1) and (k/2 % 2 == 1)):\n                return kth_element(arr, (k/2) + 1)\n            # If k is odd and (k/2) is even\n            elif ((k % 2 == 1) and (k/2 % 2 == 0)):\n                return kth_element(arr, (k/2) + 1)\n            # If k is odd and (k/2) is odd\n            elif ((k % 2 == 1) and (k/2 % 2 == 1)):\n                return kth_element(arr, (k/2) + 1)\n    \n    # If length of array is even and k is odd\n    elif (len(arr) % 2 == 0) and (k % 2 == 1):\n        # If k is odd and (k/2) is even\n        if ((k % 2 == 1) and (k/2 % 2 == 0)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is odd and (k/2) is odd\n        elif ((k % 2 == 1) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is odd and (k/2) is even\n        elif ((k % 2 == 1) and (k/2 % 2 == 0)):\n            return kth_element(arr, (k/2) + 1)\n    \n    # If length of array is even and k is even\n    elif (len(arr) % 2 == 0) and (k % 2 == 0):\n        # If k is even and (k/2) is even\n        if ((k % 2 == 0) and (k/2 % 2 == 0)):\n            return kth_element(arr, k/2)\n        # If k is even and (k/2) is odd\n        elif ((k % 2 == 0) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is even and (k/2) is even\n        elif ((k % 2 == 0) and (k/2 % 2 == 0)):\n            return kth_element(arr, (k/2) + 1)\n    \n    # If length of array is even and k is odd\n    elif (len(arr) % 2 == 0) and (k % 2 == 1):\n        # If k is odd and (k/2) is odd\n        if ((k % 2 == 1) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is odd and (k/2) is even\n        elif ((k % 2 == 1) and (k/2 % 2 == 0)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is odd and (k/2) is odd\n        elif ((k % 2 == 1) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n    \n    # If length of array is odd and k is even\n    elif (len(arr) % 2 == 1) and (k % 2 == 0):\n        # If k is even and (k/2) is odd\n        if ((k % 2 == 0) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is even and (k/2) is even\n        elif ((k % 2 == 0) and (k/2 % 2 == 0)):\n            return kth_element(arr, k/2)\n        # If k is even and (k/2) is odd\n        elif ((k % 2 == 0) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n    \n    # If length of array is odd and k is odd\n    elif (len(arr) % 2 == 1) and (k % 2 == 1):\n        # If k is odd and (k/2) is odd\n        if ((k % 2 == 1) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is odd and (k/2) is even\n        elif ((k % 2 == 1) and (k/2 % 2 == 0)):\n            return kth_element(arr, (k/2) + 1)\n        # If k is odd and (k/2) is odd\n        elif ((k % 2 == 1) and (k/2 % 2 == 1)):\n            return kth_element(arr, (k/2) + 1)\n        \n    return -1\n    \n    \nif __name__ == '__main__':\n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 2))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 3))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 4))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 5))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 6))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 7))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 8))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 9))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 10))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 11))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 12))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 13))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 14))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]\n    print(kth_element(arr, 15))\n    \n    arr = [1, 3, 2, 5, 4, 6, 7]"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    return arr[k - 1]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(map(str.capitalize, word.split('_')))\n    \n    # return ''.join([x.capitalize() for x in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title() if word.islower() else ''.join([x.title() for x in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    print(word)\n    camel_case = ''\n    for char in word:\n        if char.isupper() == True:\n            camel_case += char\n        elif char == '_':\n            camel_case +=''\n        else:\n            camel_case += char\n    print(camel_case)\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # split the word based on _\n    # join based on the first word\n    return ''.join([word.title() for word in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    return ''.join([word[i].capitalize() if i else word[i] for i in range(len(word))])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title().replace('_', '')\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if isinstance(word, str) and word.isalpha():\n        return \"\".join(word[0].upper() + word[1:].lower() if word else \"\")\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    split_word = word.split('_')\n    return split_word[0] + ''.join(map(lambda x: x.capitalize(), split_word[1:]))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # new = ''.join(word.title())\n    new = word.title().replace('_','')\n    print(new)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    x = word.split('_')\n    y = ''.join(i.capitalize() for i in x)\n    return y\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def find_eulerian_cycle(n, m, curr, out, graph):\n        if len(graph[curr]) == 1:\n            out.append(curr)\n            out.append(list(graph[curr])[0])\n            return\n        for i in graph[curr]:\n            if (curr, i) not in graph:\n                graph[(curr, i)] = set()\n            graph[(curr, i)].add(curr)\n            find_eulerian_cycle(n, m, i, out, graph)\n        return out\n    \n    def find_eulerian_path(n, m, curr, out, graph):\n        if len(graph[curr]) == 1:\n            out.append(curr)\n            return\n        for i in graph[curr]:\n            if (curr, i) not in graph:\n                graph[(curr, i)] = set()\n            graph[(curr, i)].add(curr)\n            find_eulerian_path(n, m, i, out, graph)\n        return out\n    \n    \n    graph = {}\n    graph[(0, 1)] = set()\n    graph[(0, 1)].add(1)\n    graph[(1, 2)] = set()\n    graph[(1, 2)].add(0)\n    graph[(2, 3)] = set()\n    graph[(2, 3)].add(0)\n    graph[(3, 4)] = set()\n    graph[(3, 4)].add(0)\n    graph[(4, 5)] = set()\n    graph[(4, 5)].add(0)\n    graph[(5, 6)] = set()\n    graph[(5, 6)].add(0)\n    \n    #print(graph)\n    return find_eulerian_cycle(n, m, 0, [], graph)[-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    #input : two non-negative integers n and m\n    #output : an Eulerian number (modulo 10^9 + 7)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 10\n    elif n == 6:\n        return 15\n    elif n == 7:\n        return 21\n    elif n == 8:\n        return 28\n    elif n == 9:\n        return 36\n    elif n == 10:\n        return 45\n    elif n == 11:\n        return 55\n    elif n == 12:\n        return 66\n    elif n == 13:\n        return 78\n    elif n == 14:\n        return 91\n    elif n == 15:\n        return 108\n    elif n == 16:\n        return 121\n    elif n == 17:\n        return 135\n    elif n == 18:\n        return 154\n    elif n == 19:\n        return 168\n    elif n == 20:\n        return 196\n    else:\n        return m*(n-2)*(2*n-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 0 and m == 0:\n        return 1\n    # recursive step\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    numbers = list(range(n+1))\n    a = 0\n    eulerian_num_count = 0\n    for i in range(m):\n        a = a + int(len(numbers) / 2)\n        numbers = numbers[1:] + [numbers[0]]\n        if i == 0:\n            eulerian_num_count = a\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    for i in range(n, m+1): \n        ans += (i-1)*i/2\n    return int(ans)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return m\n    else:\n        return eulerian_num(n-2, m*2) + eulerian_num(n-1, m)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def f(n, m):\n        '''\n        a(n, m) = a(n-1, m) - a(n, m-1)\n        a(n, m) = n(m-1)\n        '''\n        if (n == 0 and m == 0):\n            return 1\n        elif (n == 0 and m!= 0):\n            return f(n, m-1)\n        elif (n!= 0 and m == 0):\n            return f(n-1, m)\n        else:\n            return n * f(n-1, m) - f(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    global eulerian_num\n    eulerian_num = 0\n    eulerian_num_1(n, m)\n    return eulerian_num\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n == m):\n        return (2*(n-m))+1\n    elif (n > m):\n        return (2*(n-m))-1\n    else:\n        return (2*(m-n))\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (1 + n*(m - 1))/2\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    output_list = []\n    \n    for sublist in input_list:\n        # Insertion sort\n        for i in range(1, len(sublist)):\n            key = sublist[i]\n            j = i-1\n            while j >=0 and key < sublist[j]:\n                sublist[j+1] = sublist[j]\n                j -= 1\n            sublist[j+1] = key\n        output_list.append(sublist)\n        \n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for sublist in input_list:\n        sublist.sort()\n        result.append(sublist)\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        sorted_i = sorted(i)\n        output_list.append(sorted_i)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # COMPLETE ME\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Append each list to a sublist\n    # Create a list to hold the sorted sublists\n    output_list = []\n    for sublist in input_list:\n        output_list.append(sorted(sublist))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in input_list:\n        i.sort()\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        output_list.append(sorted(sublist))\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # if input_list is None:\n    #     return None\n    # if input_list == []:\n    #     return None\n    # if not isinstance(input_list, list):\n    #     return None\n    # if len(input_list) == 0:\n    #     return None\n    # if not isinstance(input_list[0], list):\n    #     return None\n    # if len(input_list[0]) == 0:\n    #     return None\n    # if not isinstance(input_list[0][0], str):\n    #     return None\n    # if len(input_list[0]) == 1:\n    #     return input_list\n    # for i in range(len(input_list)):\n    #     for j in range(len(input_list[i])-1):\n    #         for k in range(len(input_list[i])-1):\n    #             if input_list[i][k] > input_list[i][k+1]:\n    #                 input_list[i][k], input_list[i][k+1] = input_list[i][k+1], input_list[i][k]\n    # return input_list\n    if input_list is None:\n        return None\n    if input_list == []:\n        return None\n    if not isinstance(input_list, list):\n        return None\n    if len(input_list) == 0:\n        return None\n    if not isinstance(input_list[0], list):\n        return None\n    if len(input_list[0]) == 0:\n        return None\n    if not isinstance(input_list[0][0], str):\n        return None\n    if len(input_list[0]) == 1:\n        return input_list\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])-1):\n            for k in range(len(input_list[i])-1):\n                if input_list[i][k] > input_list[i][k+1]:\n                    input_list[i][k], input_list[i][k+1] = input_list[i][k+1], input_list[i][k]\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(bool(x) for x in lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    #Return 0 if the list is empty\n    if len(lst) == 0:\n        return 0\n    #Return the list length if it only contains true booleans\n    if len(lst) == 1:\n        if lst[0] == True:\n            return len(lst)\n    #Return the count of tue values if the list contains false values\n    if len(lst) > 1:\n        if lst[0] == False:\n            return count(lst[1:])\n        return 1 + count(lst[1:])\n        \n        \ndef common_elements(lst1, lst2):\n    '''\n    Write a python function to find the common elements in the two given lists.\n    '''\n    #Return an empty list if the two lists are of different length\n    if len(lst1)!= len(lst2):\n        return []\n    #Return the list of common elements if the two lists have the same length\n    if len(lst1) == len(lst2):\n        result = []\n        for num in lst1:\n            if num in lst2:\n                result.append(num)\n        return result\n        \n        \ndef sum_lists(lst1, lst2):\n    '''\n    Write a python function to find the sum of the two given lists.\n    '''\n    #Return an empty list if the two lists are of different length\n    if len(lst1)!= len(lst2):\n        return []\n    #Return the sum of the two lists if the two lists have the same length\n    if len(lst1) == len(lst2):\n        result = []\n        for num in lst1:\n            result.append(num + lst2[lst1.index(num)])\n        return result\n        \n        \ndef combine(lst1, lst2):\n    '''\n    Write a python function to combine two lists by alternating their elements.\n    '''\n    #Return an empty list if the two lists are of different length\n    if len(lst1)!= len(lst2):\n        return []\n    #Return the combined list if the two lists have the same length\n    if len(lst1) == len(lst2):\n        result = []\n        for num in range(len(lst1)):\n            result.append(lst1[num])\n            result.append(lst2[num])\n        return result\n        \n        \ndef del_sort(lst):\n    '''\n    Write a python function to remove and sort the duplicates in a list.\n    '''\n    #Return an empty list if the list is empty\n    if len(lst) == 0:\n        return []\n    #Return the sorted list if the list has only one element\n    if len(lst) == 1:\n        return [lst[0]]\n    #Return the sorted list if the list has two elements\n    if len(lst) == 2:\n        if lst[0] == lst[1]:\n            return [lst[0]]\n    #Return the sorted list if the list has three elements\n    if len(lst) == 3:\n        if lst[0] == lst[1]:\n            if lst[0] == lst[2]:\n                return [lst[0]]\n    #Return the sorted list if the list has four elements\n    if len(lst) == 4:\n        if lst[0] == lst[1]:\n            if lst[0] == lst[2]:\n                if lst[0] == lst[3]:\n                    return [lst[0]]\n    #Recursive call to sort the rest of the list\n    return [lst[0]] + del_sort(lst[1:])\n        \n        \ndef only_odd_nums(lst):\n    '''\n    Write a python function to check if all the items in the list are odd numbers.\n    '''\n    #Return False if the list is empty\n    if len(lst) == 0:\n        return False\n    #Return True if the list only contains one element\n    if len(lst) == 1:\n        if lst[0] % 2!= 0:\n            return True\n    #Return False if the list only contains two elements\n    if len(lst) == 2:\n        if lst[0] % 2!= 0:\n            if lst[1] % 2!= 0:\n                return True\n    #Return False if the list only contains three elements\n    if len(lst) == 3:\n        if lst[0] % 2!= 0:\n            if lst[1] % 2!= 0:\n                if lst[2] % 2!= 0:\n                    return True\n    #Return False if the list only contains four elements\n    if len(lst) == 4:\n        if lst[0] % 2!= 0:\n            if lst[1] % 2!= 0:\n                if lst[2] % 2!= 0:\n                    if lst[3] % 2!= 0:\n                        return True\n    #Recursive call to check if all the items are odd numbers\n    return only_odd_nums(lst[1:])\n        \n        \ndef max_min(lst):\n    '''\n    Write a python function to find the largest and smallest values in the given list.\n    '''\n    #Return None, None if the list is empty\n    if len(lst) == 0:\n        return None, None\n    #Return the largest and smallest values if the list contains only one element\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    #Return the largest and smallest values if the list contains two elements\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return lst[0], lst[1]\n        if lst[0] < lst[1]:\n            return lst[1], lst[0]\n    #Return the largest and smallest values if the list contains three elements\n    if len(lst) == 3:\n        if lst[0] > lst[1]:\n            if lst[0] > lst[2]:\n                return lst[0], lst[2]\n            if lst[0] < lst[2]:\n                return lst[0], lst[1]\n        if lst[1] > lst[0]:\n            if lst[1] > lst[2]:\n                return lst[1], lst[2]\n            if lst[1] < lst[2]:\n                return lst[1], lst[0]\n        if lst[2] > lst[0]:\n            if lst[2] > lst[1]:\n                return lst[2], lst[1]\n            if lst[2] < lst[1]:\n                return lst[2], lst[0]\n    #Recursive call to find the largest and smallest values\n    return max_min(lst[1:])\n        \n        \ndef make_sorted(lst):\n    '''\n    Write a python function to sort the list in ascending order.\n    '''\n    #Return the sorted list if the list is empty\n    if len(lst) == 0:\n        return []\n    #Return the sorted list if the list only contains one element\n    if len(lst) == 1:\n        return [lst[0]]\n    #Return the sorted list if the list only contains two elements\n    if len(lst) == 2:\n        if lst[0] > lst[1]:\n            return [lst[0], lst[1]]\n        if lst[0] < lst[1]:\n            return [lst[1], lst[0]]\n    #Return the sorted list if the list only contains three elements\n    if len(lst) == 3:\n        if lst[0] > lst[1]:\n            if lst[0] > lst[2]:\n                return [lst[0], lst[1], lst[2]]\n            if lst[0] < lst[2]:\n                return [lst[0], lst[2], lst[1]]\n        if lst[1] > lst[0]:\n            if lst[1] > lst[2]:\n                return [lst[1], lst[0], lst[2]]\n            if lst[1] "
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for ele in lst:\n        if(ele):\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return (test_list+test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(\"a\")\n    test_list.append(\"b\")\n    test_list.append(\"c\")\n    test_list.append(\"d\")\n    test_list.append(\"e\")\n    test_list.append(\"f\")\n    test_list.append(\"g\")\n    test_list.append(\"h\")\n    test_list.append(\"i\")\n    test_list.append(\"j\")\n    test_list.append(\"k\")\n    test_list.append(\"l\")\n    test_list.append(\"m\")\n    test_list.append(\"n\")\n    test_list.append(\"o\")\n    test_list.append(\"p\")\n    test_list.append(\"q\")\n    test_list.append(\"r\")\n    test_list.append(\"s\")\n    test_list.append(\"t\")\n    test_list.append(\"u\")\n    test_list.append(\"v\")\n    test_list.append(\"w\")\n    test_list.append(\"x\")\n    test_list.append(\"y\")\n    test_list.append(\"z\")\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    # Write your function here\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = [test_list]\n    return list(test_tup) + temp_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup.append(i)\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list += test_tup\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n    \n    \ndef add_tuples(test_tup, test_list):\n    '''\n    Write a function to concatenate tuples to a list.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n    \n    \ndef add_sets(test_set, test_set2):\n    '''\n    Write a function to concatenate sets to a set.\n    '''\n    test_set.union(test_set2)\n    return test_set\n    \n    \ndef intersection_sets(test_set, test_set2):\n    '''\n    Write a function to return the intersection of sets.\n    '''\n    return test_set.intersection(test_set2)\n    \n    \ndef union_sets(test_set, test_set2):\n    '''\n    Write a function to return the union of sets.\n    '''\n    return test_set.union(test_set2)\n    \n    \ndef intersection_set_to_list(test_set):\n    '''\n    Write a function to convert a set into a list.\n    '''\n    test_list = list(test_set)\n    return test_list\n    \n    \ndef union_set_to_list(test_set):\n    '''\n    Write a function to convert a set into a list.\n    '''\n    test_list = list(test_set)\n    return test_list\n    \n    \ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    test_list.sort()\n    test_list = list(test_list for test_list,_ in groupby(test_list))\n    return test_list\n    \n    \ndef remove_duplicates_2(test_list):\n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    new_list = []\n    for index in range(len(test_list)):\n        if test_list[index] not in new_list:\n            new_list.append(test_list[index])\n    return new_list\n    \n    \ndef check_duplicates(test_list):\n    '''\n    Write a function to check for duplicates in the given list.\n    '''\n    test_list.sort()\n    for index in range(len(test_list) - 1):\n        if test_list[index] == test_list[index + 1]:\n            return True\n    return False\n    \n    \ndef main():\n    # Test case 1\n    test_list1 = [1, 2, 4, 7, 1, 2, 3, 5, 2]\n    test_list2 = [2, 4, 6, 7, 9]\n    test_tup1 = (1, 2, 3, 5, 9)\n    test_tup2 = (2, 4, 5, 9)\n    test_set1 = {1, 2, 3, 5, 9}\n    test_set2 = {2, 4, 6, 7, 9}\n    \n    # Test case 1 output\n    print('Test 1 Results')\n    print('\\n')\n    print('Test 1:', 'add_lists(test_list1, test_list2)')\n    print('Expected: [1, 2, 4, 7, 1, 2, 3, 5, 2, 2, 4, 6, 7, 9]')\n    print('Actual:  ', add_lists(test_list1, test_list2))\n    print('\\n')\n    print('Test 1:', 'add_tuples(test_tup1, test_tup2)')\n    print('Expected: (1, 2, 3, 5, 9, 2, 4, 5, 9)')\n    print('Actual:  ', add_tuples(test_tup1, test_tup2))\n    print('\\n')\n    print('Test 1:', 'add_sets(test_set1, test_set2)')\n    print('Expected: {1, 2, 3, 5, 9, 2, 4, 6, 7, 9}')\n    print('Actual:  ', add_sets(test_set1, test_set2))\n    print('\\n')\n    print('Test 1:', 'intersection_sets(test_set1, test_set2)')\n    print('Expected: {2, 4, 9}')\n    print('Actual:  ', intersection_sets(test_set1, test_set2))\n    print('\\n')\n    print('Test 1:', 'union_sets(test_set1, test_set2)')\n    print('Expected: {1, 2, 3, 5, 9, 2, 4, 6, 7, 9}')\n    print('Actual:  ', union_sets(test_set1, test_set2))\n    print('\\n')\n    print('Test 1:', 'intersection_set_to_list(test_set1)')\n    print('Expected: [2, 4, 9]')\n    print('Actual:  ', intersection_set_to_list(test_set1))\n    print('\\n')\n    print('Test 1:', 'union_set_to_list(test_set1)')\n    print('Expected: [1, 2, 3, 5, 9]')\n    print('Actual:  ', union_set_to_list(test_set1))\n    print('\\n')\n    print('Test 1:','remove_duplicates(test_list1)')\n    print('Expected: [1, 2, 3, 4, 5, 7]')\n    print('Actual:  ', remove_duplicates(test_list1))\n    print('\\n')\n    print('Test 1:','remove_duplicates_2(test_list1)')\n    print('Expected: [1, 2, 3, 4, 5, 7]')\n    print('Actual:  ', remove_duplicates_2(test_list1))\n    print('\\n')\n    print('Test 1:', 'check_duplicates(test_list1)')\n    print('Expected: True')\n    print('Actual:  ', check_duplicates(test_list1))\n    print('\\n')\n    print('-' * 20)\n    print('\\n')\n    \n    \n    # Test case 2\n    test_list3 = [1, 2, 4, 7, 1, 2, 3, 5, 2]\n    test_list4 = [2, 4, 6, 7, 9]\n    test_tup3 = (1, 2, 3, 5, 9)\n    test_tup4 = (2, 4, 5, 9)\n    test_set3 = {1, 2, 3, 5, 9}\n    test_set4 = {2, 4, 6, 7, 9}\n    \n    # Test case 2 output\n    print('Test 2 Results')\n    print('\\n')\n    print('Test 2:', 'add_lists(test_list3, test_list4)')\n    print('Expected: [1, 2, 4, 7, 1, 2, 3, 5, 2, 2, 4, 6, 7, 9]')\n    print('Actual:  ', add_lists(test_list3, test_list4))\n    print('\\n')\n    print('Test 2:', 'add_tuples(test_tup3, test_tup4)')\n    print('Expected: (1, 2, 3, 5, 9, 2, 4, 5, 9)')\n    print('Actual:  ', add_tuples(test_tup3, test_tup4))\n    print('\\n')\n    print('Test 2:', 'add_sets(test_set3, test_set4)')\n    print('Expected: {1, 2, 3, 5, 9, 2, 4, 6, 7, 9}')\n    print('Actual:  ', add_sets(test_set3, test_set4))\n    print('\\n')\n    print('Test 2:', 'intersection_sets(test_set3, test_set4)')\n    print('Expected: {2, 4, 9}')\n    print('Actual:  ', intersection_set"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list=[]\n    for i in num1:\n        sorted_list.append(i)\n    for i in num2:\n        sorted_list.append(i)\n    for i in num3:\n        sorted_list.append(i)\n    sorted_list.sort()\n    return sorted_list\nprint(merge_sorted_list([2,4,6],[1,5,7],[1,2,3,5]))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    if num1 == []:\n        if num2 == []:\n            return num3\n        else:\n            sorted_list += num2\n    elif num2 == []:\n        if num3 == []:\n            return num1\n        else:\n            sorted_list += num1\n    else:\n        i = j = k = 0\n        while i < len(num1) and j < len(num2) and k < len(num3):\n            if num1[i] < num2[j] and num1[i] < num3[k]:\n                sorted_list.append(num1[i])\n                i += 1\n            elif num2[j] < num1[i] and num2[j] < num3[k]:\n                sorted_list.append(num2[j])\n                j += 1\n            else:\n                sorted_list.append(num3[k])\n                k += 1\n        while i < len(num1):\n            sorted_list.append(num1[i])\n            i += 1\n        while j < len(num2):\n            sorted_list.append(num2[j])\n            j += 1\n        while k < len(num3):\n            sorted_list.append(num3[k])\n            k += 1\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    i = j = k = 0\n    n1 = len(num1)\n    n2 = len(num2)\n    n3 = len(num3)\n    while i < n1 and j < n2 and k < n3:\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            result.append(num1[i])\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            result.append(num2[j])\n            j += 1\n        else:\n            result.append(num3[k])\n            k += 1\n    while i < n1:\n        result.append(num1[i])\n        i += 1\n    while j < n2:\n        result.append(num2[j])\n        j += 1\n    while k < n3:\n        result.append(num3[k])\n        k += 1\n    return result\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num_list = [num1,num2,num3]\n    if not num_list[0]:\n        return num_list[1]\n    if not num_list[1]:\n        return num_list[2]\n    if not num_list[2]:\n        return num_list[0]\n    if num_list[0][0] < num_list[1][0]:\n        if num_list[1][0] < num_list[2][0]:\n            return [num_list[0][0]] + merge_sorted_list(num_list[1],num_list[2],None)\n        else:\n            return [num_list[0][0]] + merge_sorted_list(num_list[1],None,num_list[2])\n    else:\n        if num_list[0][0] < num_list[2][0]:\n            return [num_list[1][0]] + merge_sorted_list(num_list[0],num_list[2],None)\n        else:\n            return [num_list[1][0]] + merge_sorted_list(num_list[0],None,num_list[2])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    combined_list=[]\n    new_list=[num1,num2,num3]\n    \n    heapq.heapify(new_list)\n    while len(new_list)>0:\n        smallest = heapq.heappop(new_list)\n        combined_list.append(smallest)\n    return combined_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    result = []\n    heapq.heappush(result,num1)\n    heapq.heappush(result,num2)\n    heapq.heappush(result,num3)\n    while(len(result)>1):\n        f = heapq.heappop(result)\n        s = heapq.heappop(result)\n        heapq.heappush(result,f+s)\n    return result[0]\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    n1 = len(num1)\n    n2 = len(num2)\n    n3 = len(num3)\n    l = []\n    i = 0\n    j = 0\n    k = 0\n    while i < n1 and j < n2 and k < n3:\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            l.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            l.append(num2[j])\n            j += 1\n        elif num3[k] < num1[i] and num3[k] < num2[j]:\n            l.append(num3[k])\n            k += 1\n        else:\n            l.append(num1[i])\n            i += 1\n    while i < n1:\n        l.append(num1[i])\n        i += 1\n    while j < n2:\n        l.append(num2[j])\n        j += 1\n    while k < n3:\n        l.append(num3[k])\n        k += 1\n    return l\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    count_1,count_2,count_3 = 0,0,0\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge sort is the easiest one to sort\n    # Use heapq and heapify to achieve O(n)\n    #  Time complexity: O(nlogn)\n    #  Space complexity: O(n)\n    if num1 == [] and num2 == [] and num3 == []:\n        return []\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1==[] and num2==[] and num3==[]:\n        return []\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count=0\n    for i in range(0,n):\n        if i%2!=0:\n            count=count+1\n    print(count)\n    return(count)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    '''\n    {\n        \"Input\":[\n            {\n                \"n\": 0\n            },\n            {\n                \"n\": 1\n            },\n            {\n                \"n\": 2\n            },\n            {\n                \"n\": 3\n            },\n            {\n                \"n\": 4\n            },\n            {\n                \"n\": 5\n            },\n            {\n                \"n\": 6\n            },\n            {\n                \"n\": 7\n            },\n            {\n                \"n\": 8\n            },\n            {\n                \"n\": 9\n            },\n            {\n                \"n\": 10\n            },\n            {\n                \"n\": 11\n            },\n            {\n                \"n\": 12\n            },\n            {\n                \"n\": 13\n            },\n            {\n                \"n\": 14\n            },\n            {\n                \"n\": 15\n            },\n            {\n                \"n\": 16\n            },\n            {\n                \"n\": 17\n            },\n            {\n                \"n\": 18\n            },\n            {\n                \"n\": 19\n            },\n            {\n                \"n\": 20\n            },\n            {\n                \"n\": 21\n            },\n            {\n                \"n\": 22\n            },\n            {\n                \"n\": 23\n            },\n            {\n                \"n\": 24\n            },\n            {\n                \"n\": 25\n            },\n            {\n                \"n\": 26\n            },\n            {\n                \"n\": 27\n            },\n            {\n                \"n\": 28\n            },\n            {\n                \"n\": 29\n            },\n            {\n                \"n\": 30\n            },\n            {\n                \"n\": 31\n            },\n            {\n                \"n\": 32\n            },\n            {\n                \"n\": 33\n            },\n            {\n                \"n\": 34\n            },\n            {\n                \"n\": 35\n            },\n            {\n                \"n\": 36\n            },\n            {\n                \"n\": 37\n            },\n            {\n                \"n\": 38\n            },\n            {\n                \"n\": 39\n            },\n            {\n                \"n\": 40\n            },\n            {\n                \"n\": 41\n            },\n            {\n                \"n\": 42\n            },\n            {\n                \"n\": 43\n            },\n            {\n                \"n\": 44\n            },\n            {\n                \"n\": 45\n            },\n            {\n                \"n\": 46\n            },\n            {\n                \"n\": 47\n            },\n            {\n                \"n\": 48\n            },\n            {\n                \"n\": 49\n            },\n            {\n                \"n\": 50\n            },\n            {\n                \"n\": 51\n            },\n            {\n                \"n\": 52\n            },\n            {\n                \"n\": 53\n            },\n            {\n                \"n\": 54\n            },\n            {\n                \"n\": 55\n            },\n            {\n                \"n\": 56\n            },\n            {\n                \"n\": 57\n            },\n            {\n                \"n\": 58\n            },\n            {\n                \"n\": 59\n            },\n            {\n                \"n\": 60\n            },\n            {\n                \"n\": 61\n            },\n            {\n                \"n\": 62\n            },\n            {\n                \"n\": 63\n            },\n            {\n                \"n\": 64\n            },\n            {\n                \"n\": 65\n            },\n            {\n                \"n\": 66\n            },\n            {\n                \"n\": 67\n            },\n            {\n                \"n\": 68\n            },\n            {\n                \"n\": 69\n            },\n            {\n                \"n\": 70\n            },\n            {\n                \"n\": 71\n            },\n            {\n                \"n\": 72\n            },\n            {\n                \"n\": 73\n            },\n            {\n                \"n\": 74\n            },\n            {\n                \"n\": 75\n            },\n            {\n                \"n\": 76\n            },\n            {\n                \"n\": 77\n            },\n            {\n                \"n\": 78\n            },\n            {\n                \"n\": 79\n            },\n            {\n                \"n\": 80\n            },\n            {\n                \"n\": 81\n            },\n            {\n                \"n\": 82\n            },\n            {\n                \"n\": 83\n            },\n            {\n                \"n\": 84\n            },\n            {\n                \"n\": 85\n            },\n            {\n                \"n\": 86\n            },\n            {\n                \"n\": 87\n            },\n            {\n                \"n\": 88\n            },\n            {\n                \"n\": 89\n            },\n            {\n                \"n\": 90\n            },\n            {\n                \"n\": 91\n            },\n            {\n                \"n\": 92\n            },\n            {\n                \"n\": 93\n            },\n            {\n                \"n\": 94\n            },\n            {\n                \"n\": 95\n            },\n            {\n                \"n\": 96\n            },\n            {\n                \"n\": 97\n            },\n            {\n                \"n\": 98\n            },\n            {\n                \"n\": 99\n            },\n            {\n                \"n\": 100\n            },\n            {\n                \"n\": 101\n            },\n            {\n                \"n\": 102\n            },\n            {\n                \"n\": 103\n            },\n            {\n                \"n\": 104\n            },\n            {\n                \"n\": 105\n            },\n            {\n                \"n\": 106\n            },\n            {\n                \"n\": 107\n            },\n            {\n                \"n\": 108\n            },\n            {\n                \"n\": 109\n            },\n            {\n                \"n\": 110\n            },\n            {\n                \"n\": 111\n            },\n            {\n                \"n\": 112\n            },\n            {\n                \"n\": 113\n            },\n            {\n                \"n\": 114\n            },\n            {\n                \"n\": 115\n            },\n            {\n                \"n\": 116\n            },\n            {\n                \"n\": 117\n            },\n            {\n                \"n\": 118\n            },\n            {\n                \"n\": 119\n            },\n            {\n                \"n\": 120\n            },\n            {\n                \"n\": 121\n            },\n            {\n                \"n\": 122\n            },\n            {\n                \"n\": 123\n            },\n            {\n                \"n\": 124\n            },\n            {\n                \"n\": 125\n            },\n            {\n                \"n\": 126\n            },\n            {\n                \"n\": 127\n            },\n            {\n                \"n\": 128\n            },\n            {\n                \"n\": 129\n            },\n            {\n                \"n\": 130\n            },\n            {\n                \"n\": 131\n            },\n            {\n                \""
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    c=0\n    for i in range(0,n):\n        st=s[0]+s[1:]\n        if int(st,2)%2==1:\n            c+=1\n        s=st\n    return c\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    # map function is used for mapping each character of the string to a number\n    # and store it in the dictionary\n    dict = {}\n    for i in range(len(s)):\n        dict[s[i]] = i\n    \n    # rotating the string by n places\n    # takes the character in string and \n    # maps the character to a new position depending on the current \n    # position and the number of times the string is rotated\n    # here n=3\n    rotated_string = ''.join([dict[c] for c in s[n:] + s[:n]])\n    \n    # loop to iterate through the rotated string to find the \n    # total number of occurances of numbers which are odd\n    total = 0\n    for i in range(len(s)):\n        if (rotated_string[i]!= '0' and int(rotated_string[i])%2!= 0):\n            total += 1\n    return total\n    \nprint(odd_Equivalent('010',1))"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    k=0\n    for i in range(0,n):\n        if s[i]=='1':\n            k=k+1\n    return k \ndef odd_value_after_rotation(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s+s\n    k=0\n    for i in range(0,n):\n        if s[i]=='1':\n            k=k+1\n    return k\ndef find_the_number_of_elements_from_sorted_rotated_array(s,k):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    length=len(s)\n    s=s+s\n    l=[]\n    for i in range(0,length):\n        if s[i]=='1':\n            l.append(i)\n    l.sort()\n    k=k%len(l)\n    return l[k]\ndef odd_value_after_rotation_concise(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s+s\n    k=0\n    for i in range(0,n):\n        if s[i]=='1':\n            k=k+1\n    return k\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    import collections\n    a = collections.Counter(s)\n    for i in a:\n        if a[i]%2!= 0:\n            n = n+1\n    return n\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    c=0\n    for i in range(n):\n        if s[i]=='1':\n            c+=1\n    return c\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if n == 0: \n        return 0\n    if s == \"\": \n        return 0\n    if n == 1: \n        if s == \"0\": \n            return 0\n        else: \n            return 1\n    if s[0] == \"1\": \n        return odd_Equivalent(s[1:]+s[0],n-1) + odd_Equivalent(s[1:],n)\n    return odd_Equivalent(s[1:]+s[0],n-1)\n    "
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    total = 0\n    while n:\n        if s[0] == '0':\n            n = n - 1\n            s = s[1:]\n        else:\n            n = n - 1\n            s = s[0] + s[1:]\n        total += 1\n    return total\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] == '0':\n            return 0\n        else:\n            return 1\n    if s[0] == '0':\n        return odd_Equivalent(s[1:],n)\n    if s[0] == '1':\n        return (odd_Equivalent(s[1:],n) + odd_Equivalent(s[2:],n)) % 1000000007\n    return 0\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #check the first list\n    nestedlist = [1, 2, 3]\n    #check the second list\n    nestedlist = [1, 2, 3, 4, 5, 6]\n    #check the third list\n    nestedlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    #check the fourth list\n    nestedlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    #check the fifth list\n    nestedlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n    #check the sixth list\n    nestedlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n    #check the seventh list\n    nestedlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400]\n    #check the eighth list\n    nestedlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 3"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in nestedlist:\n        for j in nestedlist[1:]:\n            if set(i).intersection(j)!= set():\n                common += [i]\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist)==1:\n        return set(nestedlist[0])\n    if len(nestedlist)==0:\n        return []\n    #print('common', common_in_nested_lists(nestedlist[0]))\n    return set(common_in_nested_lists(nestedlist[0])) & set(common_in_nested_lists(nestedlist[1:]))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for item in nestedlist:\n        common_elements = common_elements.intersection(item)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # write your function here\n    output=[]\n    count=0\n    for i in nestedlist:\n        for j in i:\n            if j not in output:\n                output.append(j)\n                count+=1\n    return output\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(sum(nestedlist,[])))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    res = []\n    for x in nestedlist:\n        for y in x:\n            if y in res:\n                continue\n            res.append(y)\n    return res\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(common_in_list(l) for l in nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    x=[]\n    for i in nestedlist:\n        for j in i:\n            x.append(j)\n    print(set(x))\n    return set(x)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #simple approach using set\n    #return len(set([item for sublist in nestedlist for item in sublist]))\n    \n    #using list comprehension to get unique values and then finding intersection\n    return len([item for sublist in nestedlist for item in sublist])\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        try:\n            int(text)\n            return True\n        except ValueError:\n            return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isnumeric()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.strip()\n    if text.isnumeric():\n        return True\n    else:\n        return False\n    # return text.isnumeric()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text) >= 0:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n    except TypeError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    \n    return text.replace('.', '', 1).isdigit()\n    # return text.isdigit()\n    \ndef check_length(text, length):\n    '''\n    Write a function to check if a string has exactly specified length or not.\n    '''\n    \n    if len(text) == length:\n        return True\n    return False\n    \ndef check_charset(text, charset):\n    '''\n    Write a function to check if a string contains any specified characters.\n    '''\n    \n    for i in text:\n        if i not in charset:\n            return False\n    return True\n    \ndef check_number_set(text, number_set):\n    '''\n    Write a function to check if a string contains any numbers from specified set.\n    '''\n    \n    for i in text:\n        if i in number_set:\n            return True\n    return False\n    \ndef check_string_set(text, string_set):\n    '''\n    Write a function to check if a string contains any strings from specified set.\n    '''\n    \n    for i in text:\n        if i in string_set:\n            return True\n    return False\n    \ndef check_charset_and_numberset(text, charset, number_set):\n    '''\n    Write a function to check if a string contains any specified characters and numbers.\n    '''\n    \n    for i in text:\n        if i not in charset and i not in number_set:\n            return False\n    return True\n    \ndef check_charset_and_stringset(text, charset, string_set):\n    '''\n    Write a function to check if a string contains any specified characters and strings.\n    '''\n    \n    for i in text:\n        if i not in charset and i not in string_set:\n            return False\n    return True\n    \ndef check_char_and_number_set(text, char, number_set):\n    '''\n    Write a function to check if a string contains any specified characters and numbers.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset(text, charset, number_set, string_set):\n    '''\n    Write a function to check if a string contains any specified characters, numbers and strings.\n    '''\n    \n    for i in text:\n        if i not in charset and i not in number_set and i not in string_set:\n            return False\n    return True\n    \ndef check_char_and_numberset_and_stringset(text, char, number_set, string_set):\n    '''\n    Write a function to check if a string contains any specified characters, numbers and strings.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_char(text, char, number_set, string_set, other_char):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i!= other_char:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset(text, char, number_set, string_set, other_charset):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i not in other_charset:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset_and_number_set(text, char, number_set, string_set, other_charset, other_number_set):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character and numbers.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i not in other_charset and i not in other_number_set:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset_and_other_number_set_and_string_set(text, char, number_set, string_set, other_charset, other_number_set, other_string_set):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character and numbers and strings.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i not in other_charset and i not in other_number_set and i not in other_string_set:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset_and_other_number_set_and_string_set_and_char(text, char, number_set, string_set, other_charset, other_number_set, other_string_set, other_char):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character and numbers and strings.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i not in other_charset and i not in other_number_set and i not in other_string_set and i!= other_char:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset_and_other_number_set_and_string_set_and_other_charset(text, char, number_set, string_set, other_charset, other_number_set, other_string_set, other_charset):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character and numbers and strings.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i not in other_charset and i not in other_number_set and i not in other_string_set and i not in other_charset:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset_and_other_number_set_and_string_set_and_other_charset_and_char(text, char, number_set, string_set, other_charset, other_number_set, other_string_set, other_charset, other_char):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character and numbers and strings.\n    '''\n    \n    for i in text:\n        if i == char and i not in number_set and i not in string_set and i not in other_charset and i not in other_number_set and i not in other_string_set and i not in other_charset and i!= other_char:\n            return False\n    return True\n    \ndef check_charset_and_number_set_and_stringset_and_other_charset_and_other_number_set_and_string_set_and_other_charset_and_other_number_set(text, char, number_set, string_set, other_charset, other_number_set, other_string_set, other_charset, other_number_set):\n    '''\n    Write a function to check if a string contains any specified characters, numbers, strings and other specified character and numbers and strings.\n    '''\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list = []\n    for dic in list1:\n        if not dic:\n            empty_list.append(True)\n        else:\n            empty_list.append(False)\n    if False in empty_list:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for i in list1:\n        if len(i)>0:\n            flag = False\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(0,len(list1)):\n        if bool(list1[i]) == True:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x)!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    flag = 0\n    for i in range(len(list1)):\n        if list1[i]:\n            flag = 1\n            break\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for i in range(len(list1)):\n            if len(list1[i]) == 0:\n                return False\n        return True\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res *= 10\n        res += i\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num1 = nums[0]\n    num2 = nums[1]\n    num3 = nums[2]\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Recursively\n    # Time: O(log n) where n is the total number of integers in the input\n    # Space: O(log n) since the space for function call is O(1)\n    # if not nums:\n    #     return 0\n    # return nums[0] + 10 * tuple_to_int(nums[1:])\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = str(nums[i])\n    nums = ''.join(nums)\n    nums = int(nums)\n    return nums\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # The easiest way to solve this problem is to use a loop to iterate through the numbers in the tuple.\n    # Then, after the loop has finished iterating through the tuple, convert the numbers to a single integer.\n    # We can start with a variable that will add all the numbers in the tuple together.\n    # Then, after the loop has finished iterating through the tuple, convert the numbers to a single integer.\n    # If there is only one number in the tuple, then we can just use that number to create our integer.\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for i in nums:\n        res *= 10\n        res += i\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join([str(x) for x in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if nums == tuple():\n        return 0\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_list = list(nums)\n    return int(\"\".join(map(str, num_list)))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if type(test_list[0]) == list:\n        return list_to_float(test_list[0])\n    else:\n        return float(test_list[0])\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    list_floats = []\n    for item in test_list:\n        for element in item:\n            try:\n                list_floats.append(float(element))\n            except ValueError:\n                continue\n    return list_floats\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(item) for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(e) for e in sublist] for sublist in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        float_list = [float(i) for i in test_list]\n    except ValueError:\n        float_list = None\n    return float_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if type(test_list) == list and len(test_list) > 0:\n        for i in range(len(test_list)):\n            if type(test_list[i]) == list:\n                list_to_float(test_list[i])\n            elif type(test_list[i]) == int or type(test_list[i]) == float:\n                test_list[i] = float(test_list[i])\n    else:\n        pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        converted_list = []\n        for sublist in test_list:\n            try:\n                converted_list.append(float(sublist))\n            except:\n                pass\n        return converted_list\n    except:\n        return None\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        if isinstance(sublist, list):\n            result.append(list_to_float(sublist))\n        else:\n            try:\n                result.append(float(sublist))\n            except ValueError:\n                pass\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list = [str(num) for num in test_list]\n    test_list = [float(num) for num in test_list]\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return list(string.split())\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    mid = len(arr)//2\n    left = arr[:mid]\n    right = arr[mid:]\n    \n    if arr[mid] == arr[mid+1]:\n        return search(right)\n    elif arr[mid] == arr[mid-1]:\n        return search(left)\n    else:\n        return arr[mid]\n        \nif __name__ == '__main__':\n    print(search([2,4,6,8,10,12,14,16,16,18,20]))"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    #base case\n    if arr == []:\n        return []\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    sorted_arr = sorted(arr)\n    start, end = 0, len(sorted_arr) - 1\n    \n    while start < end:\n        \n        mid = start + (end - start) // 2\n        \n        if sorted_arr[mid] == sorted_arr[mid + 1]:\n            start = mid + 2\n        else:\n            end = mid\n    \n    return sorted_arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # arr.sort()\n    # print(arr)\n    # for i in range(len(arr)):\n    #     if arr[i]!= arr[i+1]:\n    #         return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s = set()\n    for i in range(len(arr)):\n        if arr[i] in s:\n            s.remove(arr[i])\n        else:\n            s.add(arr[i])\n    return s.pop()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr == []:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) < 2:\n        return arr[0]\n    \n    # looking for unique number\n    i = 0\n    while i < len(arr):\n        unique = arr[i]\n        count = 0\n        for j in range(i,len(arr)):\n            if arr[j] == unique:\n                count += 1\n        if count == 1:\n            break\n        i += 1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while(start<=end):\n        mid = start + (end-start)//2\n        if(mid>0 and arr[mid-1]==arr[mid]):\n            if(arr[mid]==arr[mid+1]):\n                start = mid + 2\n            else:\n                end = mid - 1\n        elif(mid<len(arr)-1 and arr[mid]==arr[mid+1]):\n            if(arr[mid]==arr[mid-1]):\n                end = mid - 2\n            else:\n                start = mid + 1\n        else:\n            return arr[mid]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    # Your code here\n    \n    # using the fact that arr is a sorted list\n    # the algorithm would be\n    # we make the array of the length of 1, and increase the value of the last element by 1\n    # then we loop through the array from the beginning to the end\n    # if arr[i]!= arr[i+1] then the element at that index is the one that appears only once\n    # else if arr[i] == arr[i+1] then we set the value at the index to be 0\n    # this is to help us search for the next element\n    # so we keep track of the last non-zero index, and the last zero index\n    # we loop through the array and if arr[i] == arr[i+1] then we set the value at that index to be 0\n    # else we increase the value at that index by 1\n    # then we increase the index of the last non-zero element\n    # then we increase the index of the last zero element\n    \n    # the end of the algorithm would be\n    # we return the value at the last non-zero index\n    \n    # empty list\n    ret_val = []\n    \n    # last non-zero index\n    n_nz_idx = -1\n    \n    # last zero index\n    z_idx = -1\n    \n    # loop through array\n    for i in range(len(arr)):\n        \n        if arr[i] == arr[i+1]:\n            arr[i] = 0\n        else:\n            arr[i] += 1\n            \n            if arr[i] == 1:\n                z_idx = i\n            else:\n                n_nz_idx = i\n    \n    # return the value at the last non-zero index\n    ret_val.append(arr[n_nz_idx])\n    return ret_val\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # The O(n) solution is to use binary search to find the split point,\n    # then do a modified binary search to find the element in O(log n) time.\n    if len(arr) == 1:\n        return arr[0]\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    split = left\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def max_prod_tuple(tup1):\n        '''\n        Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n        '''\n        max_prod = tup1[0][0] * tup1[0][1]\n        if max_prod < tup1[1][0] * tup1[1][1]:\n            max_prod = tup1[1][0] * tup1[1][1]\n        return max_prod\n    return max(list(map(lambda tup1: max_prod_tuple(tup1), list1)))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #list1 = [(5, -3), (9, 1), (1, 4), (-5, 4), (2, -9), (-8, 5)]\n    return max(tuple1[0]*tuple1[1] for tuple1 in list1)\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    max_prod_tuples = ()\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # get max and min for each tuple in list\n    max_list = []\n    min_list = []\n    for lst in list1:\n        max_list.append(max(lst))\n        min_list.append(min(lst))\n    # compare maxes to mins in max_list\n    max_product_list = []\n    for max_item in max_list:\n        for min_item in min_list:\n            max_product_list.append(max_item * min_item)\n    max_product_list = list(set(max_product_list))\n    max_product_list.sort()\n    max_product_list = max_product_list[-1]\n    return max_product_list\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    list_length = len(list1)\n    result_list = []\n    max_product = 0\n    \n    for index in range(list_length-1):\n        for index2 in range(index+1, list_length):\n            if (list1[index][0]*list1[index2][0]) > max_product:\n                result_list = [(list1[index][0], list1[index2][0])]\n                max_product = list1[index][0]*list1[index2][0]\n            elif (list1[index][0]*list1[index2][0]) == max_product:\n                result_list.append((list1[index][0], list1[index2][0]))\n    \n    return result_list\n    "
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product_dict = {}\n    for x in range(len(list1)):\n        for y in range(1,len(list1)):\n            product = list1[x]*list1[y]\n            if product in product_dict:\n                product_dict[product].append([list1[x],list1[y]])\n            else:\n                product_dict[product] = [[list1[x],list1[y]]]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #your code here\n    max1=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if abs(list1[i][0]*list1[i][1]) > abs(list1[j][0]*list1[j][1]):\n                list1[i],list1[j] = list1[j],list1[i]\n    for i in range(len(list1)):\n        if abs(list1[i][0]*list1[i][1]) > max1:\n            max1 = abs(list1[i][0]*list1[i][1])\n    return max1\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    #list1 = [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]\n    \n    print(\"Original List:\", list1)\n    \n    list_tuple = []\n    \n    for i in list1:\n        list_tuple.append(i)\n        \n    list_product = []\n    list_min_max = []\n    \n    list_product.append(list_tuple[0][0]*list_tuple[0][1])\n    \n    for i in range(0, len(list1)-1):\n        if list1[i][0]*list1[i][1] > list_product[0]:\n            list_product.clear()\n            list_product.append(list1[i][0]*list1[i][1])\n        elif list1[i][0]*list1[i][1] == list_product[0]:\n            list_product.append(list1[i][0]*list1[i][1])\n            \n    #print(list_product)\n    \n    for i in range(0, len(list_product)-1):\n        list_min_max.append([list_product[i], list_product[i]])\n        \n    for i in range(1, len(list_product)):\n        if list_product[i] < list_min_max[0][0]:\n            list_min_max[0][0] = list_product[i]\n        elif list_product[i] < list_min_max[0][1]:\n            list_min_max[0][1] = list_product[i]\n    \n    print(\"Maximum product tuple:\", list_min_max[0])\n        \nmax_product_tuple([(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1 = [tuple(map(int,i.split('x'))) for i in list1]\n    def pair(list1):\n        list1 = sorted(list1)\n        n = len(list1)\n        i,j=0,1\n        while i < n-1:\n            while j < n:\n                k = i + j\n                if (list1[k][0]*list1[k][1]) > (list1[k-1][0]*list1[k-1][1]):\n                    list1[k-1], list1[k] = list1[k], list1[k-1]\n                j+=1\n            i+=1\n            j=i+1\n        return list1\n    list1 = pair(list1)\n    def max_pair(list1):\n        list1 = [(list1[i][0]*list1[i+1][1]),list1[i][1]*list1[i+1][0]]\n        for i in range(0,len(list1)):\n            if list1[i] == max(list1):\n                return list1[i]\n    return max_pair(list1)\nprint(max_product_tuple(['6x5x4','2x8x9x6','4x4x8x4','5x4x6x8','4x3x6x5','8x2x3x5x4','2x3x7x6x9x8','6x7x3x2x4x5','3x6x9x4x6x5','7x3x2x6x5x6']))\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([max([abs(t1[0]*t1[1]) for t1 in list1[i:i+2]]) for i in range(len(list1))])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for x in range(1, limit):\n        y = sum_factors(x)\n        if sum_factors(y) == x and x!= y:\n            s += x + y\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    amicable_sum = 0\n    for i in range(1, limit):\n        sum_divisors = sum_of_divisors(i)\n        \n        # amicable if divisor sum of number equals the number and divisor sum of\n        # sum of divisors equals the number\n        if i == sum_of_divisors(sum_of_divisors(i)) and i!= sum_of_divisors(i):\n            amicable_sum += i\n        \n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for x in range(1, limit):\n        y = sum_divisors(x)\n        if y == sum_divisors(y) and x!= y:\n            amicable_numbers.append(x)\n            amicable_numbers.append(y)\n    return sum(set(amicable_numbers))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # range up to limit\n    nums = list(range(1, limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    return sum(amicable_numbers(limit))\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        if i in amicable_numbers(i):\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_nums = []\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        j = sum_of_factors(i)\n        k = sum_of_factors(j)\n        if k == i and i!= j:\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(2, limit):\n        divisor_sum = sum_divisors(i)\n        if i == divisor_sum:\n            sum += i\n        else:\n            continue\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_number(n):\n        return sum(factor(n, factor_limit)) == sum(factor(factor(n, factor_limit), factor_limit)) and not factor_limit & {n}\n    amicable_numbers = sum(filter(amicable_number, range(1, limit+1)))\n    return amicable_numbers\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if b == 0:\n        return cmath.pi/2\n    elif a == 0:\n        return 0\n    else:\n        return cmath.atan(b/a)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    n=a**2+b**2\n    n=complex(n)\n    print(n)\n    n=n.real\n    print(n)\n    n=n**0.5\n    n=n.real\n    print(n)\n    return n\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return round(abs(cmath.phase(complex(a,b))),3)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z = a + b*1j\n    return cmath.phase(z)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        return cmath.phase(complex(a,b))\n    except:\n        return \"angle_complex() takes 2 arguments and an optional keyword argument\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (math.atan2(b,a))\ndef main():\n    print('Please input the complex number:')\n    a = int(input('real part:'))\n    b = int(input('imaginary part:'))\n    c = complex(a,b)\n    print(c,'\\n')\n    a = angle_complex(a,b)\n    print(a)\nif __name__ == '__main__':\n    main()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = (a.real**2+b.imag**2)**0.5\n    y = (b.real**2+a.imag**2)**0.5\n    print(cmath.phase(complex(x,y)))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a/b)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    real = a\n    imag = b\n    try:\n        angle = cmath.phase(complex(real,imag))\n    except ValueError:\n        angle = cmath.phase(complex(real,0))\n    return angle\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_len = 0\n    cur_len = 0\n    n = len(string)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if len(string)==0:\n        return 0\n    else:\n        maxi=0\n        cnt0=0\n        cnt1=0\n        for i in range(len(string)):\n            if string[i]=='0':\n                cnt0+=1\n            else:\n                cnt1+=1\n            if (abs(cnt0-cnt1))>maxi:\n                maxi=abs(cnt0-cnt1)\n        return maxi\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    \n    # result = 0\n    # for i in range(len(string)):\n    #     result = result ^ string[i]\n    \n    # result = result & 1\n    \n    for i in range(len(string)):\n        # count = count ^ result\n        if string[i] == \"0\":\n            max_diff = max(max_diff, len(string) - i - 1)\n        else:\n            max_diff = max(max_diff, i + 1)\n        \n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = 0\n    count1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count0 += 1\n        else:\n            count1 += 1\n        \n        max_diff = max(max_diff, abs(count0 - count1))\n        \n    return max_diff\n    \ndef find_length_v2(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count0 = [0]\n    count1 = [0]\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count0[-1] += 1\n        else:\n            count1[-1] += 1\n        \n        max_diff = max(max_diff, abs(count0[-1] - count1[-1]))\n        \n    return max_diff\n    \ndef is_palin(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    if len(string) <= 1:\n        return True\n        \n    if string[0] == string[-1]:\n        return is_palin(string[1:-1])\n        \n    return False\n    \ndef palindrome_index(string):\n    '''\n    Write a function to return the index of the first non-repeating character in a given string. Return -1 if there is no such character.\n    '''\n    d = dict()\n    for i in range(len(string)):\n        if string[i] not in d:\n            d[string[i]] = i\n        else:\n            d[string[i]] = -1\n            \n    return d[string[0]]\n    \ndef palindrome_index_v2(string):\n    '''\n    Write a function to return the index of the first non-repeating character in a given string. Return -1 if there is no such character.\n    '''\n    d = dict()\n    for i in range(len(string)):\n        if string[i] not in d:\n            d[string[i]] = 1\n        else:\n            d[string[i]] += 1\n            \n    for i in range(len(string)):\n        if d[string[i]] == 1:\n            return i\n        \n    return -1\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Traverse the string\n    # in case there is no 1 and 0 in the string\n    # return 0\n    # in case there is only 1, return 1\n    # in case there is only 0, return 1\n    # in case there is more 1 than 0, increment the count\n    # in case there is more 0 than 1, decrement the count\n    # return the difference between the two\n    # The code has a bug in the case there is more 0 than 1\n    # For example: string = \"11101\"\n    # The function will return 1, the first 1 is not counted\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    zeros = 0\n    ones = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    count1 = 0\n    for i in string:\n        if i == \"0\":\n            count += 1\n        else:\n            count1 += 1\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([(string.count('1'), string.count('0')) for string in [string[i: j] for i, j in zip([0] + list(range(len(string))), list(range(1, len(string) + 1)))]], key = lambda x: abs(x[0] - x[1]))[1]\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    for i in range(len(string)):\n        c = string[i]\n        if c == \"1\":\n            res += 1\n        else:\n            res -= 1\n        if res < 0:\n            res = 0\n    return res\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max_diff = 0\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n        if count > max_diff:\n            max_diff = count\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result = 1\n    for i in range(2, min(a, b)+1):\n        if a%i == 0 and b%i == 0:\n            result = result * i\n    return result\n    \ndef sum_of_divisors(num):\n    '''\n    Write a python function to find the sum of divisors of a number.\n    '''\n    return sum(range(1,num+1))\n    \ndef sum_of_divisors_list(numbers):\n    '''\n    Write a python function to find the sum of divisors of a list of numbers.\n    '''\n    result = 1\n    for i in numbers:\n        result = sum_of_divisors(i) * result\n    return result\n    \ndef prime_factors(num):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    result = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            result.append(i)\n            num = num / i\n        else:\n            i += 1\n    return result\n    \ndef is_prime(num):\n    '''\n    Write a python function to check if a number is a prime number.\n    '''\n    return len(prime_factors(num)) == 1\n    \ndef is_prime_list(numbers):\n    '''\n    Write a python function to check if a list of numbers is a prime number list.\n    '''\n    result = []\n    for i in numbers:\n        if is_prime(i):\n            result.append(i)\n    return result\n    \ndef is_palindrome(num):\n    '''\n    Write a python function to check if a number is palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n    \ndef is_palindrome_list(numbers):\n    '''\n    Write a python function to check if a list of numbers is palindrome.\n    '''\n    return list(filter(lambda x: is_palindrome(x), numbers))\n    \ndef factorial(num):\n    '''\n    Write a python function to compute the factorial of a number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n    \ndef factorial_list(numbers):\n    '''\n    Write a python function to compute the factorial of a list of numbers.\n    '''\n    result = 1\n    for i in numbers:\n        result = factorial(i) * result\n    return result\n    \ndef fibonacci_series(num):\n    '''\n    Write a python function to compute the fibonacci series of a number.\n    '''\n    a, b = 0, 1\n    if num == 0:\n        return 0\n    else:\n        for i in range(num-1):\n            a, b = b, a + b\n        return a\n    \ndef fibonacci_series_list(numbers):\n    '''\n    Write a python function to compute the fibonacci series of a list of numbers.\n    '''\n    result = [0]\n    if num == 1:\n        return [0]\n    else:\n        for i in range(num-1):\n            result.append(fibonacci_series(i+2) - fibonacci_series(i+1))\n        return result\n    \ndef reverse(num):\n    '''\n    Write a python function to reverse a number.\n    '''\n    return int(str(num)[::-1])\n    \ndef is_prime_number_list(numbers):\n    '''\n    Write a python function to check if a list of numbers is a prime number list.\n    '''\n    result = []\n    for i in numbers:\n        if is_prime(i):\n            result.append(i)\n    return result\n    \ndef product(numbers):\n    '''\n    Write a python function to compute the product of a list of numbers.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n    return result\n    \ndef product_list(numbers):\n    '''\n    Write a python function to compute the product of a list of numbers.\n    '''\n    result = [1]\n    for i in numbers:\n        result.append(i*result[-1])\n    return result[1:]\n    \ndef next_prime(num):\n    '''\n    Write a python function to compute the next prime number of a number.\n    '''\n    return next(filter(is_prime, range(num+1,1,-1)))\n    \ndef next_prime_list(numbers):\n    '''\n    Write a python function to compute the next prime number of a list of numbers.\n    '''\n    return list(filter(is_prime, range(numbers[0]+1,1,-1)))\n    \ndef next_prime_number_list(numbers):\n    '''\n    Write a python function to compute the next prime number of a list of numbers.\n    '''\n    result = []\n    for i in numbers:\n        result.append(next_prime(i))\n    return result\n    \ndef next_prime_factorial_list(numbers):\n    '''\n    Write a python function to compute the next prime factorial of a list of numbers.\n    '''\n    return list(filter(is_prime, map(factorial, range(numbers[0]+1,1,-1))))\n    \ndef prime_factors_of_factorial(num):\n    '''\n    Write a python function to compute the prime factors of the factorial of a number.\n    '''\n    result = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            result.append(i)\n            num = num / i\n        else:\n            i += 1\n    return result\n    \ndef factors_of_factorial_list(numbers):\n    '''\n    Write a python function to compute the prime factors of the factorial of a list of numbers.\n    '''\n    return list(map(prime_factors_of_factorial, range(numbers[0]+1,1,-1)))\n    \ndef sum_of_factorial_list(numbers):\n    '''\n    Write a python function to compute the sum of the factorial of a list of numbers.\n    '''\n    return sum(list(map(factorial, range(numbers[0]+1,1,-1))))\n    \ndef sum_of_prime_factors_list(numbers):\n    '''\n    Write a python function to compute the sum of the prime factors of a list of numbers.\n    '''\n    return sum(list(map(prime_factors, range(numbers[0]+1,1,-1))))\n    \ndef euler_phi_function(num):\n    '''\n    Write a python function to compute the euler phi function of a number.\n    '''\n    result = 1\n    for i in range(2,num):\n        if is_prime(i):\n            if num % i == 0:\n                result = result * i\n    return result\n    \ndef euler_phi_function_list(numbers):\n    '''\n    Write a python function to compute the euler phi function of a list of numbers.\n    '''\n    return list(map(euler_phi_function, range(numbers[0]+1,1,-1)))\n    \ndef sum_of_euler_phi_function_list(numbers):\n    '''\n    Write a python function to compute the sum of euler phi function of a list of numbers.\n    '''\n    return sum(list(map(euler_phi_function, range(numbers[0]+1,1,-1))))\n    \ndef amicable_numbers_list(numbers):\n    '''\n    Write a python function to compute the amicable numbers of a list of numbers.\n    '''\n    result = []\n    for i in numbers:\n        a = euler_phi_function(i)\n        b = sum_of_euler_phi_function_list(range(a,1,-1))\n        if i == sum_of_euler_phi_function_list(range(b,1,-1)) and a!= b:\n            result.append(i)\n    return result\n    \ndef amicable_numbers_list_su"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div=[]\n    for i in range(1,min(a,b)+1):\n        if(a%i==0 and b%i==0):\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    div = []\n    for i in range(1, min(a,b)+1):\n        if a%i == 0 and b%i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a, b):\n        while b: a, b = b, a%b\n        return a\n    return gcd(a, b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a>b:\n        a,b=b,a\n    if b==0:\n        return a\n    elif a==0:\n        return 0\n    elif a==1 or b==1:\n        return 1\n    elif a==b:\n        return a\n    else:\n        return sum(b,a%b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def gcd(a,b):\n        for i in range(1, min(a,b)+1):\n            if a % i == 0 and b % i == 0:\n                return i\n        return a + b\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # your code goes here\n    a = abs(a)\n    b = abs(b)\n    sum = 0\n    while a > 0:\n        if a > b:\n            a = a - b\n        else:\n            b = b - a\n        a = a\n    return sum\n    \n    \ndef sum_of_divisors(n):\n    '''\n    Write a python function to find the sum of all divisors of a number.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    # your code goes here\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef is_power(n):\n    '''\n    Write a python function to check whether the given number is a power of another given number.\n    '''\n    # your code goes here\n    for i in range(2,n):\n        if n % i == 0:\n            if i ** 2 == n:\n                return True\n            else:\n                return False\n    return False\n    \n    \ndef is_perfect(n):\n    '''\n    Write a python function to check whether the given number is perfect or not.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum == n\n    \n    \ndef is_fibonacci(n):\n    '''\n    Write a python function to check whether the given number is a part of fibonacci series or not.\n    '''\n    # your code goes here\n    a = 1\n    b = 1\n    while a < n:\n        c = a + b\n        a = b\n        b = c\n    return b == n\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check whether the given number is palindrome or not.\n    '''\n    # your code goes here\n    return str(n) == str(n)[::-1]\n    \n    \ndef is_Armstrong(n):\n    '''\n    Write a python function to check whether the given number is armstrong or not.\n    '''\n    # your code goes here\n    sum = 0\n    for i in range(len(str(n))):\n        sum += int(str(n)[i]) ** len(str(n))\n    return sum == n\n    \n    \ndef is_prime_in_list(lst):\n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    # your code goes here\n    prime_number = []\n    for i in lst:\n        if is_prime(i):\n            prime_number.append(i)\n    return prime_number\n    \n    \ndef get_prime_in_list(lst):\n    '''\n    Write a python function to get prime numbers from the given list.\n    '''\n    # your code goes here\n    prime_number = []\n    for i in lst:\n        if is_prime(i):\n            prime_number.append(i)\n    return prime_number\n    \n    \ndef get_fibonacci_in_list(lst):\n    '''\n    Write a python function to get fibonacci numbers from the given list.\n    '''\n    # your code goes here\n    fibonacci = []\n    for i in lst:\n        if is_fibonacci(i):\n            fibonacci.append(i)\n    return fibonacci\n    \n    \ndef sum_of_list(lst):\n    '''\n    Write a python function to get sum of all elements of the list.\n    '''\n    # your code goes here\n    sum = 0\n    for i in lst:\n        sum += i\n    return sum\n    \n    \ndef product_of_list(lst):\n    '''\n    Write a python function to get product of all elements of the list.\n    '''\n    # your code goes here\n    product = 1\n    for i in lst:\n        product *= i\n    return product\n    \n    \ndef check_armstrong_in_list(lst):\n    '''\n    Write a python function to check whether the given list contains armstrong numbers or not.\n    '''\n    # your code goes here\n    armstrong_number = []\n    for i in lst:\n        if is_Armstrong(i):\n            armstrong_number.append(i)\n    return armstrong_number\n    \n    \ndef check_prime_in_list(lst):\n    '''\n    Write a python function to check whether the given list contains prime numbers or not.\n    '''\n    # your code goes here\n    prime_number = []\n    for i in lst:\n        if is_prime(i):\n            prime_number.append(i)\n    return prime_number\n    \n    \ndef remove_duplicates_from_list(lst):\n    '''\n    Write a python function to remove duplicate numbers from the given list.\n    '''\n    # your code goes here\n    result = []\n    for i in lst:\n        if i not in result:\n            result.append(i)\n    return result\n    \n    \ndef remove_duplicate_from_list_using_set(lst):\n    '''\n    Write a python function to remove duplicate numbers from the given list using set.\n    '''\n    # your code goes here\n    result = list(set(lst))\n    return result\n    \n    \ndef remove_duplicate_from_list_without_set(lst):\n    '''\n    Write a python function to remove duplicate numbers from the given list without using set.\n    '''\n    # your code goes here\n    result = []\n    for i in lst:\n        if i not in result:\n            result.append(i)\n    return result\n    \n    \ndef find_max_number_in_list(lst):\n    '''\n    Write a python function to find the maximum number from the given list.\n    '''\n    # your code goes here\n    return max(lst)\n    \n    \ndef find_min_number_in_list(lst):\n    '''\n    Write a python function to find the minimum number from the given list.\n    '''\n    # your code goes here\n    return min(lst)\n    \n    \ndef check_greater_from_list(lst):\n    '''\n    Write a python function to check whether the given list contains number greater than 10 or not.\n    '''\n    # your code goes here\n    greater_than_10 = []\n    for i in lst:\n        if i > 10:\n            greater_than_10.append(i)\n    return greater_than_10\n    \n    \ndef check_less_than_from_list(lst):\n    '''\n    Write a python function to check whether the given list contains number less than 10 or not.\n    '''\n    # your code goes here\n    less_than_10 = []\n    for i in lst:\n        if i < 10:\n            less_than_10.append(i)\n    return less_than_10\n    \n    \ndef check_greater_than_or_equal_to_10(lst):\n    '''\n    Write a python function to check whether the given list contains number greater than or equal to 10 or not.\n    '''\n    # your code goes here\n    greater_than_or_equal_to_10 = []\n    for i in lst:\n        if i >= 10:\n            greater_than_or_equal_to_10.append(i)\n    return greater_than_or_equal_to_10\n    \n    \ndef check_less_than_or_equal_to_10(lst):\n    '''\n    Write a python function to check whether the given list contains number less than or equal to 10 or not.\n    '''\n    # your code goes here\n    less_than_or_equal_to_10 = []\n    for i in lst:\n        if i <= 10:"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n = a*b\n    for i in range(2, int(math.sqrt(n)+1)): \n        if (n % i == 0) : \n            if (n / i == i) : \n                return int(i) \n            else : \n                return int(i + n / i)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        greater = a\n    else:\n        greater = b\n    sum = 0\n    for i in range(1,greater+1):\n        if (a%i == 0) and (b%i == 0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    result=1\n    for i in range(2,min(a,b)+1):\n        if a%i==0 and b%i==0:\n            result=result*i\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass #TODO: complete function\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    new_list = []\n    for word in str:\n        if len(word) > n:\n            new_list.append(word)\n    return new_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n    # return ['this', 'is', 'a', 'list', 'of', 'words']\n    # return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str.split() if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst = str.split()\n    res = [word for word in lst if len(word) > n]\n    print(res)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split():\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str.split() if len(x) > n]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #my_matrix = [[4,9,2],[3,5,7],[8,1,6]]\n    magic_sum = 0\n    #magic_sum = sum([1,2,3,4,5,6,7,8,9])\n    magic_matrix = [[4,9,2],[3,5,7],[8,1,6]]\n    #print(magic_matrix[0][0]*magic_matrix[0][1]*magic_matrix[0][2] + magic_matrix[1][0]*magic_matrix[1][1]*magic_matrix[1][2] + magic_matrix[2][0]*magic_matrix[2][1]*magic_matrix[2][2])\n    #print(magic_matrix[0][0]*magic_matrix[1][0]*magic_matrix[2][0] + magic_matrix[0][1]*magic_matrix[1][1]*magic_matrix[2][1] + magic_matrix[0][2]*magic_matrix[1][2]*magic_matrix[2][2])\n    #print(magic_matrix[0][0]*magic_matrix[1][1]*magic_matrix[2][2] + magic_matrix[0][2]*magic_matrix[1][1]*magic_matrix[2][0] + magic_matrix[0][1]*magic_matrix[1][0]*magic_matrix[2][2])\n    #print(magic_matrix[0][0]*magic_matrix[1][1]*magic_matrix[2][2] + magic_matrix[2][0]*magic_matrix[1][1]*magic_matrix[0][2] + magic_matrix[2][2]*magic_matrix[1][1]*magic_matrix[0][0])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    sum = 0\n    for i in range(3):\n        for j in range(3):\n            sum += my_matrix[i][j]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # This function is not complete\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # Check if all rows have equal sum\n    for row in my_matrix:\n        if not row_sum_check(row):\n            return False\n    # Check if all columns have equal sum\n    for col in range(len(my_matrix)):\n        col_sum = 0\n        for row in my_matrix:\n            col_sum += row[col]\n        if not col_sum_check(col_sum):\n            return False\n    # Check if diagonal sum is equal to total sum\n    diag_sum = 0\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    if not diag_sum_check(diag_sum):\n        return False\n    # Check if opposite diagonal sum is equal to total sum\n    opp_diag_sum = 0\n    for i in range(len(my_matrix)):\n        opp_diag_sum += my_matrix[i][-1 - i]\n    if not diag_sum_check(opp_diag_sum):\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check the rows for even sum\n    for i in range(len(my_matrix)):\n        row_total = 0\n        for j in range(len(my_matrix)):\n            row_total += my_matrix[i][j]\n        if row_total % 2!= 0:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    s = 0\n    for i in range(0,len(my_matrix)):\n        for j in range(0,len(my_matrix[0])):\n            s+=my_matrix[i][j]\n    \n    s_i = 0\n    for i in range(0,len(my_matrix)):\n        s_i+=my_matrix[i][i]\n        \n    s_j = 0\n    for j in range(0,len(my_matrix[0])):\n        s_j+=my_matrix[j][j]\n    \n    s_i2 = 0\n    for i in range(0,len(my_matrix)):\n        s_i2+=my_matrix[len(my_matrix)-1-i][i]\n        \n    s_j2 = 0\n    for j in range(0,len(my_matrix[0])):\n        s_j2+=my_matrix[j][len(my_matrix[0])-1-j]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix_list = matrix_to_list(my_matrix)\n    my_rows = check_rows(my_matrix)\n    my_cols = check_cols(my_matrix)\n    my_diag = check_diag(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return len(my_matrix) == len(my_matrix[0])\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1. Check if the matrix is a square matrix\n    # 2. Check if the matrix has the same sum in each row, column and diagonal\n    # 3. Check if the sum of the row/columns/diagonals of the matrix is equal to the magic number\n    # 4. Check if the numbers from 1 to 9 are in the matrix and the number in the same row, column and diagonal are the same\n    # 5. Check if all the numbers in the matrix are unique\n    # 6. Check if the sum of the row/columns/diagonals is a multiple of the magic number (magic number is the sum of the sum of the row/columns/diagonals of the square)\n    magic_number = 0\n    diagonal_sum = 0\n    row_sum = 0\n    col_sum = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if it is a square matrix\n    if len(set([len(row) for row in my_matrix])) > 1:\n        print(\"The matrix is not a square matrix.\")\n        return False\n    # check if it is a magic matrix\n    if n == 1:\n        return False\n    else:\n        # if it is not a magic square, find out the biggest difference between 2 elements in each row,\n        # and return that number as the difference between rows and columns\n        # to make the matrix magic square\n        diff_in_row = [abs(sum(row)-sum(my_matrix[0])) for row in my_matrix]\n        diff_in_col = [abs(sum(col)-sum(my_matrix[0])) for col in zip(*my_matrix)]\n        if max(diff_in_row) > 1 or max(diff_in_col) > 1:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # if nums is None or len(nums) == 0:\n    #     return None\n    # num_count = dict()\n    # for num in nums:\n    #     if num in num_count:\n    #         num_count[num] += 1\n    #     else:\n    #         num_count[num] = 1\n    # max_item = max(num_count, key=num_count.get)\n    # return max_item\n    #     or\n    # num_count = {}\n    # for num in nums:\n    #     num_count[num] = num_count.get(num,0) + 1\n    # max_item = max(num_count, key=num_count.get)\n    # return max_item\n    #     or\n    # num_count = {}\n    # for num in nums:\n    #     num_count[num] = num_count.get(num,0) + 1\n    # return [k for k, v in num_count.items() if v == max(num_count.values())]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = {}\n    for i in range(len(nums)):\n        if nums[i] not in dict:\n            dict[nums[i]] = 1\n        else:\n            dict[nums[i]] += 1\n    res = []\n    max_freq = 0\n    for i in dict:\n        if dict[i] > max_freq:\n            max_freq = dict[i]\n    for i in dict:\n        if dict[i] == max_freq:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n    return max(freq, key=freq.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #map, set, defaultdict, counter\n    max_occurrences = 0\n    for num in nums:\n        occurrence = nums.count(num)\n        if occurrence > max_occurrences:\n            max_occurrences = occurrence\n    return max_occurrences\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    m = 0\n    for num in d:\n        if d[num] > m:\n            m = d[num]\n            res = num\n    return res\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_count = defaultdict(int)\n    for num in nums:\n        nums_count[num] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    hash_table = defaultdict(int)\n    for num in nums:\n        hash_table[num] += 1\n    max_value = 0\n    max_key = 0\n    for key, value in hash_table.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if not nums:\n        return None\n    d = defaultdict(int)\n    for num in nums:\n        d[num] += 1\n    max_key = max(d.items(), key=lambda x: x[1])\n    return max_key[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    return max(d, key=lambda k: d[k])\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    print(counts)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a','e','i','o','u','y')\n    vowels_list = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowels_list.append(str1[i])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u','A','E','I','O','U']\n    s=''\n    v=''\n    for i in str1:\n        if i in vowels:\n            v=v+i\n        else:\n            s=s+i\n    rev=s+v[::-1]\n    return rev\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    newstr=list(str1)\n    i=0\n    j=len(str1)-1\n    while(i<j):\n        if(str1[i] in vowels and str1[j] not in vowels):\n            newstr[i],newstr[j]=newstr[j],newstr[i]\n            i+=1\n            j-=1\n        elif(str1[i] not in vowels and str1[j] in vowels):\n            j-=1\n        elif(str1[i] not in vowels and str1[j] not in vowels):\n            i+=1\n            j-=1\n        else:\n            i+=1\n            j-=1\n    return(''.join(newstr))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    index = len(str1)\n    while index!= 0:\n        if str1[index-1] in vowels:\n            str1[index-1] = '$'\n            index -= 1\n        else:\n            str1[index-1] = '!'\n            index -= 1\n    str1 = ''.join(str1)\n    str1 = str1.replace('!', '')\n    str1 = str1.replace('$', '')\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiou\")\n    str1 = list(str1)\n    i = 0\n    j = len(str1) -1\n    while i < j:\n        if str1[i] not in vowels:\n            i += 1\n        elif str1[j] not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    str1 = str1.lower()\n    vowel_start = []\n    vowel_end = []\n    i = 0\n    while i < len(str1):\n        if str1[i] in vowels:\n            vowel_start.append(i)\n        i += 1\n    i = len(str1) - 1\n    while i >= 0:\n        if str1[i] in vowels:\n            vowel_end.append(i)\n        i -= 1\n    i = 0\n    while i < len(vowel_start):\n        str1 = str1[:vowel_start[i]] + str1[vowel_end[i]:]\n        i += 1\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    return str1[::-1].replace('a','a').replace('e','e').replace('i','i').replace('o','o').replace('u','u')\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # str1 = 'Mondy'\n    vowels = 'aeiou'\n    \n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i].lower() in vowels:\n            vowel_index.append(i)\n    # print(vowel_index)\n    \n    new_str = ''\n    for i in range(len(str1)):\n        if i in vowel_index:\n            new_str += str1[i]\n        else:\n            new_str += str1[i]\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    str1 = list(str1)\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            str1[i] = vowel_list.pop(0)\n    return ''.join(str1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = str(tup1)\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"({},{},{},{})\".format(tup1[0],tup1[1],tup1[2],tup1[3])\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # pass\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return_string = ''\n    for index, item in enumerate(tup1):\n        if index == (len(tup1) - 1):\n            return_string += str(item)\n        else:\n            return_string += str(item) + ', '\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = tuple(input().split())\n    print(' '.join(tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return('(' + str(tup1[0]) + ','+ str(tup1[1]) + ')')\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup_str = \"\"\n    for i in range(len(tup1)):\n        tup_str += tup1[i]\n    return tup_str\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = \",\".join(tup1)\n    return tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    new_str = ''.join(tup1)\n    return new_str\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_num = 0\n    for i in nums:\n        if i < 0:\n            negative_num += i\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negativenums = [i for i in nums if i<0]\n    print(negativenums)\n    return sum(negativenums)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += n\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negatives = [num for num in nums if num < 0]\n    sum = 0\n    for num in negatives:\n        sum += num\n    return sum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def is_hexagonal(num):\n        # if the sum of the hexagonal numbers is even, then the number is hexagonal\n        if num % 2 == 0:\n            return num in hex_nums\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        return None\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return hexagonal_num((n // 2) + 1) + hexagonal_num((n // 2) - 1) + 1\n    else:\n        return hexagonal_num((n // 2) + 1) - hexagonal_num((n // 2) - 1) + 1\n    # Your code her"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    x = n // 2\n    y = n // 2 - 1\n    z = n % 2\n    if z == 1:\n        return n * (2*x + 1)\n    else:\n        return n * (2*x + 2)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n ** 2 + n) * 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # formula n = 1/2(n+1)(3n+1)\n    # we want to solve for n given n+1\n    # n + 1 = (3/2)n + 1\n    # n + 1 = (3/2)n + 3/2\n    # n = 2n + 3/2 - 3/2\n    # n = 3n + 1 - 3\n    # n = 3n + 2 - 3\n    # n = 3n + 3 - 3\n    # n = 3n + 4 - 3\n    # n = 3n + 5 - 3\n    # n = 3n + 6 - 3\n    # n = 3n + 7 - 3\n    # n = 3n + 8 - 3\n    # n = 3n + 9 - 3\n    # n = 3n + 10 - 3\n    # n = 3n + 11 - 3\n    # n = 3n + 12 - 3\n    # n = 3n + 13 - 3\n    # n = 3n + 14 - 3\n    # n = 3n + 15 - 3\n    # n = 3n + 16 - 3\n    # n = 3n + 17 - 3\n    # n = 3n + 18 - 3\n    # n = 3n + 19 - 3\n    # n = 3n + 20 - 3\n    # n = 3n + 21 - 3\n    # n = 3n + 22 - 3\n    # n = 3n + 23 - 3\n    # n = 3n + 24 - 3\n    # n = 3n + 25 - 3\n    # n = 3n + 26 - 3\n    # n = 3n + 27 - 3\n    # n = 3n + 28 - 3\n    # n = 3n + 29 - 3\n    # n = 3n + 30 - 3\n    # n = 3n + 31 - 3\n    # n = 3n + 32 - 3\n    # n = 3n + 33 - 3\n    # n = 3n + 34 - 3\n    # n = 3n + 35 - 3\n    # n = 3n + 36 - 3\n    # n = 3n + 37 - 3\n    # n = 3n + 38 - 3\n    # n = 3n + 39 - 3\n    # n = 3n + 40 - 3\n    # n = 3n + 41 - 3\n    # n = 3n + 42 - 3\n    # n = 3n + 43 - 3\n    # n = 3n + 44 - 3\n    # n = 3n + 45 - 3\n    # n = 3n + 46 - 3\n    # n = 3n + 47 - 3\n    # n = 3n + 48 - 3\n    # n = 3n + 49 - 3\n    # n = 3n + 50 - 3\n    # n = 3n + 51 - 3\n    # n = 3n + 52 - 3\n    # n = 3n + 53 - 3\n    # n = 3n + 54 - 3\n    # n = 3n + 55 - 3\n    # n = 3n + 56 - 3\n    # n = 3n + 57 - 3\n    # n = 3n + 58 - 3\n    # n = 3n + 59 - 3\n    # n = 3n + 60 - 3\n    # n = 3n + 61 - 3\n    # n = 3n + 62 - 3\n    # n = 3n + 63 - 3\n    # n = 3n + 64 - 3\n    # n = 3n + 65 - 3\n    # n = 3n + 66 - 3\n    # n = 3n + 67 - 3\n    # n = 3n + 68 - 3\n    # n = 3n + 69 - 3\n    # n = 3n + 70 - 3\n    # n = 3n + 71 - 3\n    # n = 3n + 72 - 3\n    # n = 3n + 73 - 3\n    # n = 3n + 74 - 3\n    # n = 3n + 75 - 3\n    # n = 3n + 76 - 3\n    # n = 3n + 77 - 3\n    # n = 3n + 78 - 3\n    # n = 3n + 79 - 3\n    # n = 3n + 80 - 3\n    # n = 3n + 81 - 3\n    # n = 3n + 82 - 3\n    # n = 3n + 83 - 3\n    # n = 3n + 84 - 3\n    # n = 3n + 85 - 3\n    # n = 3n + 86 - 3\n    # n = 3n + 87 - 3\n    # n = 3n + 88 - 3\n    # n = 3n + 89 - 3\n    # n = 3n + 90 - 3\n    # n = 3n + 91 - 3\n    # n = 3n + 92 - 3\n    # n = 3n + 93 - 3\n    # n = 3n + 94 - 3\n    # n = 3n + 95 - 3\n    # n = 3n + 96 - 3\n    # n = 3n + 97 - 3\n    # n = 3n + 98 - 3\n    # n = 3n + 99 - 3\n    # n = 3n + 100 - 3\n    # n = 3n + 101 - 3\n    # n = 3n + 102 - 3\n    # n = 3n + 103 - 3\n    # n = 3n + 104 - 3\n    # n = 3n + 105 - 3\n    # n = 3n + 106 - 3\n    # n = 3n + 107 - 3\n    # n = 3n + 108 - 3\n    # n = 3n + 109 - 3\n    # n = 3n + 110 - 3\n    # n = 3n + 111 - 3\n    # n = 3n + 112 - 3\n    # n = 3n + 113 - 3\n    # n = 3n + 114 - 3\n    # n = 3n + 115 - 3\n    # n = 3n + 116 - 3\n    # n = 3n + 117 - 3\n    # n = 3n + 118 - 3\n    # n = 3n + 119 - 3\n    # n = 3n + 120 - 3\n    # n = 3n + 121 - 3\n    # n = 3n + 122 - 3\n    # n = 3n + 123 - 3\n    # n = 3n + 124 - 3\n    # n = 3n + 125 - 3\n    # n = 3n + 126 - 3\n    # n = 3n + 127 - 3\n    # n = 3n + 128 - 3\n    # n = 3n + 129 - 3\n    # n = 3n + 130 - 3\n    # n = 3n + 131 - 3\n    # n = 3n + 132 - 3\n    # n = 3n + 133 - 3\n    # n = 3n + 134 - 3\n    # n = 3n + 135 - 3\n    # n = 3n + 136 - 3\n    # n = 3n + 137 - 3\n    # n = 3n + 138 - 3\n    # n = 3n + 139 - 3\n    # n = 3n + 140 - 3\n    # n = 3n + 141 - 3\n    # n = 3n + 142 - 3\n    # n = 3n + 143 - 3\n    # n = 3n + 144 - 3\n    # n = 3n + 145 - 3\n    # n = 3n + 146 - 3\n    # n = 3n + 147 - 3\n    # n = 3n + 148 - 3\n    # n = 3n + 149 - 3\n    # n = 3n + 150 - 3\n    # n = 3n + 151 - 3\n    # n = 3n + 152 - 3\n    # n = 3n + 153 - 3\n    # n = 3n + 154 - 3\n    # n = 3n + 155 - 3\n    # n = 3n + 156 - 3\n    # n = 3n + 157 - 3\n    # n = 3n + 158 - 3\n    # n = 3n + 159 - 3\n    # n = 3n + 160 - 3\n    # n = 3n + 161 - 3\n    # n = 3n + 162 - 3\n    # n = 3n + 163 - 3\n    # n = 3n + 164 - 3\n    # n = 3n + 165 - 3\n    # n = 3n + 166 - 3\n    # n = 3n + 167 - 3\n    # n = 3n + 168 - 3\n    # n = 3n + 169 - 3\n    # n = 3n + 170 - 3\n    # n = 3n + 171 - 3\n    # n = 3n + 172 - 3\n    # n = 3n + 173 - 3\n    # n = 3n + 174 - 3\n    # n = 3n + 175 - 3\n    # n = 3n + 176 - 3\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Add 1 for the base case, so no actual math is done\n    # to determine nth hexagonal number is done in the function\n    return n*(2*n - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    for i in nums:\n        if i == 0:\n            zeros += 1\n    non_zeros = len(nums) - zeros\n    ratio = (zeros / non_zeros)\n    return ratio\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if nums == None:\n        return 0\n    \n    count = 0\n    for num in nums:\n        if num == 0:\n            count += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zc = 0\n    for i in nums:\n        if i == 0:\n            zc += 1\n    nzc = len(nums) - zc\n    return zc,nzc\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # import numpy as np\n    # nums = np.array(nums)\n    # # Return value is a ratio, so dividing by the total number of items in the array will get the fraction of zeroes in the array\n    # return 0 if nums.size==0 else nums.shape[0] - np.count_nonzero(nums) / nums.size\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_ones = 0\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_ones += 1\n    return (num_zeros, num_ones)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nz = 0\n    nz_count = 0\n    for i in nums:\n        if i == 0:\n            nz += 1\n        else:\n            nz_count += 1\n    return nz/nz_count\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return nums.count(0) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # print(nums)\n    # O(n) time complexity, O(1) space complexity\n    # if nums == [0]:\n    #     return 1\n    # if nums == []:\n    #     return 0\n    # if len(nums) == 1:\n    #     return 0\n    # counter = 0\n    # for item in nums:\n    #     if item == 0:\n    #         counter += 1\n    # # print(counter)\n    # if len(nums) == counter:\n    #     return 0\n    # return counter / len(nums)\n    # O(n) time complexity, O(1) space complexity\n    counter = 0\n    for item in nums:\n        if item == 0:\n            counter += 1\n    # print(counter)\n    if counter == len(nums):\n        return 0\n    return counter / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    nz = 0\n    nz_ind = []\n    for i, x in enumerate(nums):\n        if x == 0:\n            nz += 1\n            nz_ind.append(i)\n    nz_ratio = nz/len(nums)\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind[:nz]\n    nz_ind = nz_ind[::-1]\n    nz_ind = nz_ind["
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0): \n        return True\n    elif (n < 0): \n        return False\n    else: \n        power = 0\n        while (n >= 2**power): \n            if (n % 2**power == 0): \n                n = n / 2**power \n            else: \n                power += 1\n        return (n == 1) \ndef is_Sum_Of_Powers_Of_Two_Fast(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        if (n%2 == 0):\n            n = n//2\n        else:\n            break\n    return n==1\ndef is_Sum_Of_Powers_Of_Two_Xor(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        if (n&1):\n            res = res^1\n        else:\n            res = res^0\n        n = n >> 1\n    return res\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res = res^(n&1)\n        n = n>>1\n    return res\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res&1\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_2(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_4(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_8(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_16(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2|(res>>8&1)<<3\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_32(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2|(res>>8&1)<<3|(res>>16&1)<<4\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_64(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2|(res>>8&1)<<3|(res>>16&1)<<4|(res>>32&1)<<5\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_128(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2|(res>>8&1)<<3|(res>>16&1)<<4|(res>>32&1)<<5|(res>>64&1)<<6\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_256(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2|(res>>8&1)<<3|(res>>16&1)<<4|(res>>32&1)<<5|(res>>64&1)<<6|(res>>128&1)<<7\ndef is_Sum_Of_Powers_Of_Two_Fast_Xor_Cnt_2_Fast_1_512(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = 0\n    while n:\n        res+=n&1\n        n = n>>1\n    return res>>1&1|(res>>2&1)<<1|(res>>4&1)<<2|(res>>8&1)<<3|(res>>16&1)<<4|(res>>32&1)<<5|(res>>64&1)<<6|"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # If n = 0, then return False\n    if (n == 0):\n        return False\n    # If n == 1, then return True\n    if (n == 1):\n        return True\n    # If n == 2, then return True\n    if (n == 2):\n        return True\n    # Else return whether n can be represented as 2^x + y where x,y are not 0\n    if (n > 2):\n        return is_Sum_Of_Powers_Of_Two(n - 2)\n    else:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return True\n    elif n<0:\n        return False\n    else:\n        bin_n=str(bin(n))\n        return bin_n.count('1')==1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n > 0:\n        n1 = n % 2\n        n = n // 2\n        print (n1)\n        if n1 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return (bin(n).count('1') == 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return 1 == ((n & (n - 1)) and (n & 0x5555555555555555))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    powers = []\n    while(n!=0):\n        powers.append(n%2)\n        n//=2\n    \n    summ = 0\n    for power in powers:\n        summ+=power\n    \n    if summ!=0:\n        return False\n    else:\n        return True\n    \ndef is_Sum_Of_Powers_Of_Two_Efficient(n):\n    '''\n    Write an efficient python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n==0:\n        return False\n    \n    while n>1:\n        if n%2!=0:\n            return False\n        n//=2\n        \n    return True\n    \n    \nif __name__ == \"__main__\":\n    n=int(input())\n    print(is_Sum_Of_Powers_Of_Two(n))\n    print(is_Sum_Of_Powers_Of_Two_Efficient(n))\n    "
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        s = 0\n        while n:\n            r = n % 2\n            n = n // 2\n            if r == 1:\n                s += 1\n        return s == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    t=0\n    while(n>0):\n        t+=n%2\n        n=n//2\n    return t==1\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # 1. Calculate pi.\n    pi = 3.14\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        result_list.extend(sublist)\n    \n    return result_list\n    \ndef extract_doubly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        for element in sublist:\n            result_list.append(element)\n    \n    return result_list\n    \ndef extract_triply(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    result_list = []\n    for sublist in test_list:\n        for element in sublist:\n            for item in element:\n                result_list.append(item)\n    \n    return result_list\n    \nif __name__ == \"__main__\":\n    \n    '''\n    Given:\n    \n    singly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    doubly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    triply_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    \n    Expected output:\n    \n    singly_list = [1, 2, 3, 4, 5, 6, 7]\n    doubly_list = [1, 2, 3, 4, 5, 6, 7]\n    triply_list = [1, 2, 3, 4, 5, 6, 7]\n    \n    '''\n    \n    singly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    doubly_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    triply_nested_list = [[[1, 2], [3, 4]], [[5], [6, 7]]]\n    \n    print('Singly nested list:\\t', extract_singly(singly_nested_list))\n    print('Doubly nested list:\\t', extract_doubly(doubly_nested_list))\n    print('Triply nested list:\\t', extract_triply(triply_nested_list))\n    "
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for element in test_list:\n        if not isinstance(element, list):\n            result.append(element)\n        else:\n            result += extract_singly(element)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    test_list = [test_list[i] for i in range(len(test_list)) if i == len(test_list) - 1]\n    return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly = []\n    for i in test_list:\n        for j in i:\n            singly.append(j)\n    return singly\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return sum(test_list, [])\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for y in test_list for x in y]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    extracted_list = []\n    for list in test_list:\n        extracted_list += list\n    return extracted_list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums) - 1, 0, -1):\n        currMax = 0\n        for j in range(i + 1):\n            if nums[j] > currMax:\n                currMax = nums[j]\n                nums[j], nums[i] = nums[i], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # element_counts = {}\n    # for num in nums:\n    #     if num not in element_counts:\n    #         element_counts[num] = 1\n    #     else:\n    #         element_counts[num] += 1\n    #\n    # num_list = list(element_counts.keys())\n    # num_list.sort()\n    #\n    # return num_list[-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n < 2:\n        return nums\n    for i in range(n//2):\n        if nums[i] < nums[n-i-1]:\n            nums = swap(nums, i, n-i-1)\n            print(nums)\n        for j in range(n//2, n):\n            if nums[j] < nums[i]:\n                nums = swap(nums, i, j)\n                print(nums)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    result = []\n    for i in range(len(nums), 0, -1):\n        max_val = max(nums)\n        max_idx = nums.index(max_val)\n        result.append(max_idx + 1)\n        result.append(i)\n        nums = nums[:max_idx+1][::-1] + nums[max_idx+1:]\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(sub_list, pos):\n        '''\n        Flips the positions of the elements in a sub list.\n        '''\n        for i in range(len(sub_list)//2):\n            sub_list[i], sub_list[-i-1] = sub_list[-i-1], sub_list[i]\n        return sub_list\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    '''\n    Sort a list of elements by using Pancake-Sort.\n    '''\n    n = len(nums)\n    \n    # We will consider only half of the list\n    # Start with the first element, and continue\n    # the algorithm for n//2, n//2-1, n//2-2,..., 2, 1, 0\n    for i in range(n//2, 0, -1):\n        \n        # Here we have two pointers,\n        # one is at the beginning of the list,\n        # and the other is at i position\n        # we are going to keep the smallest one in the beginning\n        # and the largest one in the end\n        low = 0\n        high = i\n        \n        # We are iterating till the middle of the list,\n        # and swapping the elements\n        while high < n:\n            \n            # If we are on the right place, no need to swap\n            if nums[high] <= nums[i-1]:\n                high += 1\n                continue\n            \n            # The element at i-1 is greater than the one at i\n            # so we swap\n            nums[high], nums[i-1] = nums[i-1], nums[high]\n            \n            # Now we have swapped the element, so we can continue\n            # with the next element and continue swapping\n            # till the end of the list\n            nums[i:] = nums[i:][::-1]\n            \n            # And we have made the first element the smallest\n            # so we can continue from the next element\n            break\n    \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums) - 1\n    while i >= 0:\n        j = 0\n        while j < i:\n            if nums[j] > nums[i]:\n                nums = switch(nums, j, i)\n            j += 1\n        i -= 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize variables\n    curr_len = len(nums)\n    sorted_nums = []\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(lst, i, j):\n        temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Make a copy of the list\n    lst = nums[:]\n    # Get the length of the list\n    lst_len = len(lst)\n    # Get the list in reverse\n    lst_rev = lst[::-1]\n    # Get the length of the list in reverse\n    lst_rev_len = len(lst_rev)\n    # Find the maximum element of the list\n    max_elem = max(lst_rev)\n    # Find the minimum element of the list\n    min_elem = min(lst_rev)\n    # Check if the maximum element is greater than the minimum element. If yes, return the list.\n    if max_elem > min_elem:\n        #print(f\"max_elem is {max_elem} and min_elem is {min_elem}\")\n        #print(f\"lst_rev is {lst_rev}\")\n        # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n        if lst_len > 1:\n            # Loop from the 1st element to the 2nd to last element of the list\n            for i in range(1, lst_len):\n                #print(f\"lst_rev[{i}] is {lst_rev[i]}\")\n                # Check if the element is greater than the next element. If yes, swap the elements and decrement the index.\n                if lst_rev[i] > lst_rev[i-1]:\n                    #print(f\"lst_rev[{i}] is {lst_rev[i]} and lst_rev[{i-1}] is {lst_rev[i-1]}\")\n                    # Perform the swap of the elements\n                    lst_rev[i], lst_rev[i-1] = lst_rev[i-1], lst_rev[i]\n                    #print(f\"lst_rev is {lst_rev}\")\n                    # Perform the reverse of the list\n                    lst_rev = lst_rev[::-1]\n                    #print(f\"lst_rev is {lst_rev}\")\n                    # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n                    if lst_rev_len > 1:\n                        # Loop from the 1st element to the 2nd to last element of the list in reverse\n                        for j in range(1, lst_rev_len):\n                            # Check if the element is greater than the next element. If yes, swap the elements and decrement the index.\n                            if lst_rev[j] > lst_rev[j-1]:\n                                # Perform the swap of the elements\n                                lst_rev[j], lst_rev[j-1] = lst_rev[j-1], lst_rev[j]\n                                # Perform the reverse of the list\n                                lst_rev = lst_rev[::-1]\n                                #print(f\"lst_rev is {lst_rev}\")\n                                # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n                                if lst_len > 1:\n                                    # Loop from the 1st element to the 2nd to last element of the list\n                                    for k in range(1, lst_len):\n                                        # Check if the element is greater than the next element. If yes, swap the elements and decrement the index.\n                                        if lst[k] > lst[k-1]:\n                                            # Perform the swap of the elements\n                                            lst[k], lst[k-1] = lst[k-1], lst[k]\n                                            # Perform the reverse of the list\n                                            lst = lst[::-1]\n                                            #print(f\"lst is {lst}\")\n        # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n        if lst_len > 1:\n            # Find the minimum element of the list\n            min_elem = min(lst)\n            # Find the index of the minimum element of the list\n            min_elem_idx = lst.index(min_elem)\n            # Check if the minimum element is less than the next element. If yes, swap the elements and decrement the index.\n            if min_elem < lst[min_elem_idx-1]:\n                # Perform the swap of the elements\n                lst[min_elem_idx-1], lst[min_elem_idx] = lst[min_elem_idx], lst[min_elem_idx-1]\n                # Perform the reverse of the list\n                lst = lst[::-1]\n                #print(f\"lst is {lst}\")\n                # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n                if lst_len > 1:\n                    # Find the maximum element of the list\n                    max_elem = max(lst)\n                    # Find the index of the maximum element of the list\n                    max_elem_idx = lst.index(max_elem)\n                    # Check if the maximum element is less than the previous element. If yes, swap the elements and decrement the index.\n                    if max_elem > lst[max_elem_idx+1]:\n                        # Perform the swap of the elements\n                        lst[max_elem_idx], lst[max_elem_idx+1] = lst[max_elem_idx+1], lst[max_elem_idx]\n                        # Perform the reverse of the list\n                        lst = lst[::-1]\n                        #print(f\"lst is {lst}\")\n                        # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n                        if lst_len > 1:\n                            # Loop from the 1st element to the 2nd to last element of the list\n                            for m in range(1, lst_len):\n                                # Check if the element is greater than the previous element. If yes, swap the elements and decrement the index.\n                                if lst[m] > lst[m-1]:\n                                    # Perform the swap of the elements\n                                    lst[m], lst[m-1] = lst[m-1], lst[m]\n                                    # Perform the reverse of the list\n                                    lst = lst[::-1]\n                                    #print(f\"lst is {lst}\")\n            # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n            if lst_len > 1:\n                # Find the maximum element of the list\n                max_elem = max(lst)\n                # Find the index of the maximum element of the list\n                max_elem_idx = lst.index(max_elem)\n                # Check if the maximum element is less than the next element. If yes, swap the elements and decrement the index.\n                if max_elem > lst[max_elem_idx-1]:\n                    # Perform the swap of the elements\n                    lst[max_elem_idx-1], lst[max_elem_idx] = lst[max_elem_idx], lst[max_elem_idx-1]\n                    # Perform the reverse of the list\n                    lst = lst[::-1]\n                    #print(f\"lst is {lst}\")\n                    # Check if the length of the list is greater than one. If yes, continue to execute the next block of code.\n                    if lst_len > 1:\n                        # Find the minimum element of the list\n                        min_elem = min(lst)\n                        # Find the index of the minimum element of the list\n                        min_elem_idx = lst.index(min_elem)\n                        # Check if the minimum element is greater than the next element. If yes, swap the elements and decrement the index.\n                        if min_elem < lst[min_elem_idx-1]:\n                            # Perform the swap of the elements\n                            lst[min_elem_idx-1], lst[min_elem_idx] = lst[min_elem_idx], lst[min_elem_idx-1]\n                        "
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    n=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            n+=1\n    return n\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            samepair+=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1) == len(list2) == len(list3):\n        for i in range(len(list1)):\n            if list1[i] == list2[i] == list3[i]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for a in range(0,len(list1)):\n        if list1[a]==list2[a]==list3[a]:\n            count+=1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n    \nprint(count_samepair([1,2,3],[2,2,2],[3,2,3]))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List = list(Input)\n    count=0\n    for i in List:\n        if isinstance(i, list):\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        if type(Input[i]) == type([]):\n            result.append(Input[i])\n    return len(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = [str(x) for x in Input]\n    Input = \"\".join(Input)\n    count = 0\n    while True:\n        if Input.find(\"(\") == -1:\n            return count\n        else:\n            Input = Input[Input.find(\"(\")+1:]\n            count += 1\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if type(Input) == tuple:\n        return len([x for x in Input if type(x) == list])\n    else:\n        raise TypeError(\"Input should be of type tuple\")\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    res = list(filter(lambda x: isinstance(x, list), Input))\n    return len(res)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    for list_number in range(len(Input)):\n        count = 0\n        for i in range(len(Input[list_number])):\n            if type(Input[list_number][i]) == list:\n                count += 1\n        print(list_number, count)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(Input) \n    \n    list_count = 0\n    for list_ in Input: \n        if isinstance(list_, list): \n            list_count += 1\n    return list_count \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    list_len=[]\n    for i in range(0,len(Input)):\n        if type(Input[i])==list:\n            list_len.append(len(Input[i]))\n    return list_len\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = []\n    if (isinstance(Input, tuple)): \n        for i in range(0, len(Input)): \n            if (isinstance(Input[i], list)): \n                lists.append(Input[i]) \n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    return len(Input)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if not arr:\n        return\n    max_diff = arr[0] - arr[1]\n    for i in range(1,len(arr)-1):\n        max_diff = max(max_diff,arr[i]-arr[i+1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    arr = sorted(arr)\n    for i in range(0, len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max = -99999999999999999999999999999999999999999999999999\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] - arr[i] > Max:\n                Max = arr[j] - arr[i]\n    return Max\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    diff = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if abs(arr[i]-arr[j]) > 0:\n                diff.append(abs(arr[i]-arr[j]))\n    return max(diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr_max = 0\n    arr_min = 100\n    for i in range(0,len(arr)):\n        if abs(arr[i] - arr[i-1]) > arr_max:\n            arr_max = abs(arr[i] - arr[i-1])\n    for i in range(0,len(arr)):\n        if abs(arr[i]) < arr_min:\n            arr_min = abs(arr[i])\n    return (arr_max - arr_min)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(len(arr)-1):\n        if abs(arr[i]-arr[i+1]) > max_diff:\n            max_diff = abs(arr[i]-arr[i+1])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(i+1,len(arr)): \n            if(abs(arr[i] - arr[j]) > max_diff): \n                max_diff = abs(arr[i] - arr[j]) \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if (i!= j and abs(arr[i] - arr[j]) > max_diff):\n                max_diff = abs(arr[i] - arr[j])\n    print (\"The maximum difference between any two elements in a given array is : \", max_diff)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return max(arr)-min(arr)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        if a * i + b * n == n:\n            return (i, n - i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return (0, n/b)\n    elif b == 0:\n        return (0, n/a)\n    else:\n        return (-(n/b), -(n/a))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0:\n        return None, None\n    if n % a!= 0:\n        return None, None\n    x = n // a\n    y = b * x\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        if ((a * x) + b) == n:\n            return (x, n - x)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #your code here\n    for x in range(1,n):\n        for y in range(1,n):\n            if (a * x) + (b * y) == n:\n                return(x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # your code here\n    \n    # Check if the numbers are not too big. \n    if n > pow(10,100):\n        return None\n    # Check if the numbers are not too small. \n    if n < -pow(10,100):\n        return None\n    if a == 0:\n        return (0, n)\n    # Check if the equation is simple to solve. \n    if b % a == 0:\n        return (a, b // a)\n    else:\n        # The equation is not simple. \n        # Check if the equation is an impossible one to solve.\n        if a < 0 and b > 0:\n            if a < -n / b:\n                return None\n            else:\n                return (a, b)\n        if a < 0:\n            if b < 0:\n                if n > -a / b:\n                    return None\n                else:\n                    return (a, b)\n            if b > 0:\n                if n < a / b:\n                    return None\n                else:\n                    return (a, b)\n        if a > 0:\n            if b < 0:\n                if n > b / a:\n                    return None\n                else:\n                    return (a, b)\n            if b > 0:\n                if n < a * b:\n                    return None\n                else:\n                    return (a, b)\n        # If there is a solution. \n        # Check if the equation is not a very long one to solve. \n        if n > pow(10,100):\n            return None\n        if n > -a * b:\n            return None\n        # Calculate the solution. \n        x = n / (-b)\n        y = x * (-b)\n        return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        x = int(n/a)\n        y = n - (x*a)\n        return (x, y)\n    except ZeroDivisionError:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    g = gcd(a, n)\n    if g!= 1:\n        return None\n    else:\n        # solve for y\n        y = (n * b - a) // g\n        if a * y % g == 0:\n            return (a, y)\n        else:\n            return None\n    \n    \ndef gcd(a, b):\n    '''\n    Euclid's algorithm for finding the greatest common divisor of two integers.\n    '''\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if a*i + b*j == n:\n                return (i,j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    for i in range(n):\n        for j in range(n):\n            if i!= j and a*i + b*j == n:\n                return i, j\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    l = list1 + list2\n    for item in l:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result = []\n    for ele in list1:\n        if ele not in list2:\n            result.append(ele)\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    final_list = []\n    for element in list1:\n        if element not in list2:\n            final_list.append(element)\n    print(final_list)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list2.remove(i)\n    return list2\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    #list2.append(list1)\n    #list2.append(list2)\n    #print(list2)\n    #print(list1)\n    #list1 = list1[:10]\n    #print(list2)\n    #print(list1)\n    #print(list1[:10])\n    #print(list2[:10])\n    #return list1\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for x in list2:\n        while x in list1:\n            list1.remove(x)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    print(list(set(list1) - set(list2)))\n    return list(set(list1) - set(list2))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    i = 0\n    while i < len(list1):\n        if list1[i] in list2:\n            list1.pop(i)\n        else:\n            i+=1\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for x in range(n//2):\n        sum += (n - 2*x)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    numbers = []\n    for i in range(n // 2):\n        numbers.append(n - 2 * i)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    assert n >= 0, 'n must be a non-negative integer'\n    \n    sum_n = 0\n    i = 0\n    while (i <= n // 2):\n        if (n - 2*i) < 0:\n            break\n        sum_n = sum_n + (n - 2*i)\n        i += 1\n    return sum_n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum(range(0,n//2))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return n\n    else:\n        return sum_series(n-2) + sum_series(n-1)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n > 1:\n        return n + sum_series(n - 2)\n    else:\n        return n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n >= 0:\n        return n + sum_series(n-2)\n    else:\n        return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Get an input from the user\n    n = int(input(\"Enter a positive integer greater than 1: \"))\n    # Make sure input is positive and greater than 1\n    if n > 1:\n        # Create a list for the sum\n        sum_series = [n]\n        # While the sum is still greater than zero\n        while sum_series[-1] > 0:\n            # Take the last element in the list\n            x = sum_series[-1]\n            # Subtract 2 * i from the sum\n            sum_series.append(x - 2 * x)\n        # Return the sum\n        return sum_series\n    # If the input is not valid\n    else:\n        print(\"Please enter a positive integer greater than 1\")\n        n = int(input(\"Enter a positive integer greater than 1: \"))\n        return sum_series(n)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n    else:\n        return sum_series(n-2) + n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    if n < 1:\n        return 0\n    sum_n = 0\n    for i in range(n//2):\n        sum_n += n - 2*i\n    return sum_n\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if not l.isdigit() or not s.isdigit():\n        raise ValueError\n    l = int(l)\n    s = int(s)\n    if l < 3 or s < 3:\n        raise ValueError\n    if l == 3 and s == 3:\n        return (0.5*l*s*(0.5*s-tan(pi/3)))\n    return (0.5*l*s*(0.5*s-tan(pi/s)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2 * (tan(pi/l) + 1))/2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    if len(s) > 2:\n        sides = s\n        for i in sides:\n            area += s[0] * (tan(pi / sides[1]) / 2)\n    else:\n        sides = s\n        for i in sides:\n            area += (s[0] / 2) * (sides[1] / 2) * (tan(pi / sides[1]) / 2)\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (1/2)*s*l*(1-tan(pi/l))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l * 0.5 * (1/tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3 or s < 3:\n        return -1\n    else:\n        return s * l / 2 * (tan((pi * (s - 2) )/s) / tan((pi * (s - 2 )/ (s - 2))))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l/2\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = int(s)\n    l = int(l)\n    if l < 3:\n        return \"Polygon must have at least 3 sides.\"\n    else:\n        return round((s**2 * tan(pi/l)**2) / (4*tan(pi/l)), 2)\n    \ndef area_rectangle(l, w):\n    '''\n    Write a function to calculate the area of a rectangle given its length and width.\n    '''\n    l = int(l)\n    w = int(w)\n    if l < 1 or w < 1:\n        return \"Both length and width must be greater than 0.\"\n    else:\n        return l*w\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s**2/4)*l\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    return (b*h)/2\ndef area_trapezoid(a, b, h):\n    '''\n    Write a function to calculate the area of a trapezoid given the height, base, and side.\n    '''\n    return ((a+b)*h)/2\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    return (pi*r**2)\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the base and height.\n    '''\n    return a*b\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length and width.\n    '''\n    return a*b\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    return a**2\ndef area_kite(s, d):\n    '''\n    Write a function to calculate the area of a kite given the length of its sides and its diameter.\n    '''\n    return ((s/2)*d**2)/2\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the length of its major and minor axes.\n    '''\n    return (pi*(a*b))/4\ndef area_sphere(r):\n    '''\n    Write a function to calculate the area of a sphere given the radius.\n    '''\n    return (4*pi*r**2)\ndef area_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a cylinder given the radius and height.\n    '''\n    return 2*(pi*r**2) + 2*(pi*r*h)\ndef area_cone(r, h):\n    '''\n    Write a function to calculate the area of a cone given the radius and height.\n    '''\n    return (pi*r**2) + (pi*r*h)\ndef area_pyramid(b, h):\n    '''\n    Write a function to calculate the area of a pyramid given the base and height.\n    '''\n    return (b*h)/3\ndef area_prism(a, b, h):\n    '''\n    Write a function to calculate the area of a prism given the base, height, and side.\n    '''\n    return 2*(a*h) + (a*b)\ndef area_pyramid_using_heron(a, b, h):\n    '''\n    Write a function to calculate the area of a pyramid using heron's formula given the base, height, and side.\n    '''\n    s = (a+b+h)/2\n    return ((s*(s-a)*(s-b)*(s-h))**(1/2))\ndef area_right_circular_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a right circular cylinder given the radius and height.\n    '''\n    return (2*pi*r*(r+h))\ndef area_left_circular_cylinder(r, h):\n    '''\n    Write a function to calculate the area of a left circular cylinder given the radius and height.\n    '''\n    return (pi*(r**2) + 2*pi*r*h)\ndef area_ellipsoid(a, b, c):\n    '''\n    Write a function to calculate the area of an ellipsoid given the length of its three axes.\n    '''\n    return 4*pi*a*b*c\ndef area_hexagon(s, b):\n    '''\n    Write a function to calculate the area of a hexagon given the length of its side and one side of its base.\n    '''\n    return (3*s**2)/2 + (b**2)\ndef area_heptagon(s, b):\n    '''\n    Write a function to calculate the area of a heptagon given the length of its side and one side of its base.\n    '''\n    return (5*s**2)/2 + (b**2)\ndef area_octagon(s, b):\n    '''\n    Write a function to calculate the area of an octagon given the length of its side and one side of its base.\n    '''\n    return (8*s**2)/2 + (b**2)\ndef area_decagon(s, b):\n    '''\n    Write a function to calculate the area of a decagon given the length of its side and one side of its base.\n    '''\n    return (10*s**2)/2 + (b**2)\ndef area_rhombus(d, h):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its diagonals and one side of its base.\n    '''\n    return (d*h)/2\ndef area_trapezoid_using_sum_of_areas(s1, s2, h):\n    '''\n    Write a function to calculate the area of a trapezoid given the length of its sides and the height.\n    '''\n    return ((s1+s2)/2)*h\ndef area_triangle_using_heron(b, h):\n    '''\n    Write a function to calculate the area of a triangle using heron's formula given the base and height.\n    '''\n    return (h*(b**2))/2\ndef area_triangle_using_sides(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides.\n    '''\n    return (s1*s2*s3)/4\ndef area_triangle_using_bisection(s1, s2, s3):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides using the bisection method.\n    '''\n    return (s1*s2*s3)/2\ndef area_parallelogram_using_sum_of_areas(s1, s2):\n    '''\n    Write a function to calculate the area of a parallelogram using the sum of the areas of its sides.\n    '''\n    return (s1*s2)\ndef area_parallelogram_using_perimeter(l1, l2):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of its sides using the perimeter method.\n    '''\n    return (l1*l2)/2\ndef area_parallelogram_using_diagonals(d1, d2):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of its sides using the diagonal method.\n    '''\n    return (d1*d2)/2\ndef area_parallelogram_using_cross_prod(s1, s2):\n    '''\n    Write a function to calculate the area of a parallelogram given the cross product of its diagonals.\n    '''\n    return (s1*s2)/4\ndef area_kite_using_sum_of_areas(s1, s2, h):\n    '''\n    Write a function to calculate the area of a kite using the sum of the areas of its sides and the height.\n    '''\n    return ((s1*s2)/2)*h\ndef area_kite_using_perimeter(s1, s2, h):\n    '''\n    Write a function to calculate the area of a kite using the perimeter of its sides and the height.\n    '''\n    return (s1*s2 + 2*h*s1*s2)/2\ndef area_kite_using_diagonals(d1, d2, h):\n    '''\n    Write a function to calculate the area of a kite given the length of its diagonals and the height.\n    '''\n    return (h*(d1*d2)/2)\ndef area_kite_using_cross_prod(s1, s2, h):\n    '''\n    Write a function to calculate th"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    def area(s, l):\n        a = l * (s ** 2)\n        return a / (4 * tan(pi / 5))\n    return area(s, l)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a=int(n)\n    s=0\n    for i in range(1,a):\n        if a%i==0:\n            s+=i\n    if s==n:\n        return True\n    else:\n        return False\ndef div_sum1(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a=int(n)\n    s=0\n    for i in range(1,a):\n        if a%i==0:\n            s+=i\n    if s==a:\n        return True\n    else:\n        return False\ndef factors(n):\n    '''\n    Write a function to determine if the sum of the divisors of an integer is equal to that integer.\n    '''\n    if n==0:\n        return True\n    else:\n        a=int(n)\n        s=0\n        for i in range(1,a):\n            if a%i==0:\n                s+=i\n        if s==a:\n            return True\n        else:\n            return False\ndef is_prime(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    a=int(n)\n    if a==1:\n        return False\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\ndef is_prime1(n):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    a=int(n)\n    if a==1:\n        return False\n    elif a==2:\n        return True\n    else:\n        for i in range(2,a):\n            if a%i==0:\n                return False\n        return True\ndef is_palindrome(n):\n    '''\n    Write a function to determine if a given integer is a palindrome.\n    '''\n    a=int(n)\n    s=str(a)\n    if s==s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome1(n):\n    '''\n    Write a function to determine if a given integer is a palindrome.\n    '''\n    a=int(n)\n    b=a\n    if a==b:\n        return True\n    else:\n        return False\ndef is_power(a,b):\n    '''\n    Write a function to determine if a number is a power of another.\n    '''\n    a=int(a)\n    b=int(b)\n    if math.log(a,b)==0:\n        return True\n    else:\n        return False\ndef is_power1(a,b):\n    '''\n    Write a function to determine if a number is a power of another.\n    '''\n    a=int(a)\n    b=int(b)\n    if a/b==a//b:\n        return True\n    else:\n        return False\ndef is_power2(a,b):\n    '''\n    Write a function to determine if a number is a power of another.\n    '''\n    a=int(a)\n    b=int(b)\n    return (a>0 and b>0 and a**b==a and b**a==b)\ndef is_power3(a,b):\n    '''\n    Write a function to determine if a number is a power of another.\n    '''\n    a=int(a)\n    b=int(b)\n    return (a>0 and b>0 and a**b==a and b**a==b)\ndef is_power4(a,b):\n    '''\n    Write a function to determine if a number is a power of another.\n    '''\n    a=int(a)\n    b=int(b)\n    return (a>0 and b>0 and math.log(a,b)==math.log(a,b))\ndef is_power5(a,b):\n    '''\n    Write a function to determine if a number is a power of another.\n    '''\n    a=int(a)\n    b=int(b)\n    return (a>0 and b>0 and a**b==a and b**a==b)\ndef reverse(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse1(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse2(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse3(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse4(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse5(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse6(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse7(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse8(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse9(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse10(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse11(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse12(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse13(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse14(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse15(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse16(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse17(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse18(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse19(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse20(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse21(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse22(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse23(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n[::-1])\ndef reverse24(n):\n    '''\n    Write a function to return the reverse of an integer.\n    '''\n    return int(n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    s = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if n // i == i:\n                s += i\n            else:\n                s += i + (n // i)\n    return s\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n    \n    if sum(divisors) == n:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 1\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i == 0:\n            if n/i == i:\n                sum+=i\n            else:\n                sum+=i+n/i\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # convert to string to allow conversion to int \n    n = str(n)\n    # create an empty list \n    divisors = [] \n    # loop through the numbers from 1 to the number itself \n    for i in range(1, int(n)): \n        # if the number is divisible by the number itself then skip \n        if int(n) % i == 0: \n            # add the value to the list \n            divisors.append(i) \n    # return the sum of the divisors \n    return sum(divisors) \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum = 0\n    for i in range(1, int(n/2)+1):\n        if n % i == 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0): \n            if (n / i == i): \n                sum1 += i \n            else: \n                sum1 += i + n / i \n    for j in range(1, int(math.sqrt(n)) + 1): \n        if (n % j == 0): \n            if (n / j == j): \n                sum2 += j \n            else: \n                sum2 += j + n / j \n    if (sum1 == sum2): \n        return 1 \n    return 0\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0 or n == 1:\n        return False\n    else:\n        sum1 = 0\n        sum2 = 0\n        # Find the divisors of the number\n        for i in range(1,int(math.sqrt(n))+1):\n            if n % i == 0:\n                if n / i == i:\n                    sum1 += i\n                else:\n                    sum1 += i\n                    sum2 += n / i\n        if sum1 == sum2:\n            return True\n        else:\n            return False\ndef un_tri(n):\n    '''\n    Write a function that finds the integer with more digits than n.\n    '''\n    n_digits = len(str(n))\n    counter = 0\n    num = 0\n    while counter < n_digits:\n        num += 10**counter\n        counter += 1\n    return num\ndef is_un_tri(n):\n    '''\n    Write a function that determines whether a number is a unique integer.\n    '''\n    if str(n) == str(n)[::-1]:\n        return False\n    else:\n        return True\ndef is_pal(n):\n    '''\n    Write a function that determines whether a number is a palindrome.\n    '''\n    if str(n) == str(n)[::-1]:\n        return True\n    else:\n        return False\ndef is_p_tri(n):\n    '''\n    Write a function that determines whether a number is a perfect number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if n % counter == 0:\n            num += counter\n        counter += 1\n    if num == n:\n        return True\n    else:\n        return False\ndef is_p_penta(n):\n    '''\n    Write a function that determines whether a number is a pentagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_hex(n):\n    '''\n    Write a function that determines whether a number is a hexagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_hexa(n):\n    '''\n    Write a function that determines whether a number is a hextagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_hept(n):\n    '''\n    Write a function that determines whether a number is a heptagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_oct(n):\n    '''\n    Write a function that determines whether a number is an octagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_sept(n):\n    '''\n    Write a function that determines whether a number is a septagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_octa(n):\n    '''\n    Write a function that determines whether a number is a ocatagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_non(n):\n    '''\n    Write a function that determines whether a number is a nonagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_deca(n):\n    '''\n    Write a function that determines whether a number is a decagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_undeca(n):\n    '''\n    Write a function that determines whether a number is a undecagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_duodeca(n):\n    '''\n    Write a function that determines whether a number is a duodecagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_tredeca(n):\n    '''\n    Write a function that determines whether a number is a tredecagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_duodecta(n):\n    '''\n    Write a function that determines whether a number is a duodectagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < 0:\n            return False\n        if (n - num) / 2 % 1 == 0:\n            if n - num == 2 * (counter - 1):\n                return True\n        num += counter\n        counter += 1\n    return False\ndef is_p_tredecta(n):\n    '''\n    Write a function that determines whether a number is a tredectagonal number.\n    '''\n    counter = 1\n    num = 0\n    while num <= n:\n        if (n - num) / 2 < "
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Initialize two empty sets \n    sum_of_divisors = set() \n    # Initialize a sum variable \n    sum_of_numbers = 0 \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if (n%2==0):\n        return 0\n    i=3\n    div_sum=2\n    while(i<math.sqrt(n)):\n        if(n%i==0):\n            if((i%2==0) or (i%3==0)):\n                div_sum+=i\n            if((n//i)%2==0 or (n//i)%3==0):\n                div_sum+=n//i\n        i+=2\n    return div_sum\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)): \n        if str1[i] >= 'a' and str1[i] <= 'z': \n            count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = 0\n    for index, char in enumerate(str1):\n        if char == 'a':\n            counter += 1\n        elif char == 'b':\n            counter += 1\n        elif char == 'c':\n            counter += 1\n        elif char == 'd':\n            counter += 1\n        elif char == 'e':\n            counter += 1\n        elif char == 'f':\n            counter += 1\n        elif char == 'g':\n            counter += 1\n        elif char == 'h':\n            counter += 1\n        elif char == 'i':\n            counter += 1\n        elif char == 'j':\n            counter += 1\n        elif char == 'k':\n            counter += 1\n        elif char == 'l':\n            counter += 1\n        elif char =='m':\n            counter += 1\n        elif char == 'n':\n            counter += 1\n        elif char == 'o':\n            counter += 1\n        elif char == 'p':\n            counter += 1\n        elif char == 'q':\n            counter += 1\n        elif char == 'r':\n            counter += 1\n        elif char =='s':\n            counter += 1\n        elif char == 't':\n            counter += 1\n        elif char == 'u':\n            counter += 1\n        elif char == 'v':\n            counter += 1\n        elif char == 'w':\n            counter += 1\n        elif char == 'x':\n            counter += 1\n        elif char == 'y':\n            counter += 1\n        elif char == 'z':\n            counter += 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    n = len(str1)\n    num = 0\n    for i in range(n):\n        if str1[i].lower() in \"abcdefghijklmnopqrstuvwxyz\":\n            num += 1\n    return num\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # I'm going to assume the characters that we have are only those we can encounter in the alphabet, not any special characters\n    alphabet = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n    alphabet_lower = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str_list = [char for char in str1.lower()]\n    \n    number_of_char_position = 0\n    \n    for char in str_list:\n        if char not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        else:\n            number_of_char_position += str_list.count(char)\n            \n    print('The number of characters that occur at the same position in the string as in the English alphabet are {}'.format(number_of_char_position))\n    "
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    for i in range(0,len(str1)):\n        count=0\n        for j in range(i+1,len(str1)):\n            if str1[i].lower()==str1[j].lower():\n                count+=1\n        print('Number of characters that occur at the same position in the string as in the English alphabet is ',count)\ncount_char_position('hola pepito')"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(str1.count(i) for i in \"abcdefghijklmnopqrstuvwxyz\")\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    '''\n    Your function should return a dictionary with the keys as the positions (as strings) and the values as the counts.\n    '''\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    lower_case_str1 = str1.lower()\n    count = 0\n    for i in range(97, 123):\n        count += lower_case_str1.count(chr(i))\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] = char_dict[char] + 1\n        else:\n            char_dict[char] = 1\n    sum = 0\n    for key in char_dict:\n        sum = sum + char_dict[key]\n    return sum\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    # traverse the list\n    count = 0\n    for i in range(0, len(A)): \n        for j in range(i+1, len(A)): \n            if((A[i] ^ A[j]) % 2 == 0): \n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1, len(A)):\n            if(i^j)%2==0:\n                even_count+=1\n    return even_count\n    \ndef find_even_pair_v2(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1, len(A)):\n            if(A[i]^A[j])%2==0:\n                even_count+=1\n    return even_count\n    \ndef find_even_pair_v3(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0,len(A)):\n        for j in range(i+1, len(A)):\n            if((A[i]^A[j])%2==0):\n                even_count+=1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if not A:\n        return 0\n    num_evens = 0\n    xor = 0\n    for num in A:\n        xor ^= num\n    if xor & 1 == 0:\n        return num_evens\n    num_evens = 0\n    for num in A:\n        if xor ^ num & 1 == 0:\n            num_evens += 1\n    return num_evens\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor = 0\n    for i in A:\n        for j in A:\n            if i ^ j == 0:\n                even_xor += 1\n    return even_xor // 2\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i]^A[j]\n            if xor%2 == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return None\n    xor_sum = 0\n    for i in range(len(A)):\n        xor_sum ^= A[i]\n    for i in range(len(A)-1):\n        for j in range(i+1,len(A)):\n            if xor_sum ^ (A[i] ^ A[j]) == 0:\n                return (A[i],A[j])\n    return None\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    assert(A[0] < A[1])\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j] ) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    from collections import Counter\n    c = Counter()\n    for i in A:\n        c[i] += 1\n    return sum(k*(k-1)//2 for k, v in c.items() if v > 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**int(n>0) - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # we start off by initializing the variable \"i\" to 1\n    i = 1\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pow_2 = 1\n    while pow_2<n:\n        pow_2*=2\n    return pow_2\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=1\n    while (2**i<=n):\n        i+=1\n    return (2**i)\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 2**((n-1).bit_length())\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #Binary Search\n    #Base Case\n    if n == 0: \n        return 1\n    if n == 1:\n        return 2\n    #Set initial upper bound\n    upperBound = 2**n\n    #Set initial lower bound\n    lowerBound = 2**(n-1)\n    #Use binary search to determine next power of 2 greater than n\n    #Initialize smallest power of 2\n    smallestPower = 0\n    while upperBound > lowerBound: \n        #Determine mid point\n        mid = (upperBound + lowerBound)//2\n        #If mid is power of 2, return it\n        if isPowerOf2(mid) == True: \n            return mid\n        #If mid is not power of 2, update upper bound\n        elif isPowerOf2(mid) == False: \n            upperBound = mid\n        #If mid is not power of 2, update lower bound\n        elif isPowerOf2(mid) == False: \n            lowerBound = mid\n    #Return the lowest power of 2 greater than or equal to n\n    return lowerBound\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Return minimum of input, 1\n    return 1 if n < 1 else 2 ** int(n).bit_length()\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n==0 else 2**(n-1).bit_length()\ndef fibonacci_number_again(n, m):\n    '''\n    Write a python function which takes numbers n and m as parameters and check if the\n    number n is a repdigit of m, that is n and m have the same digits, ignoring order.\n    '''\n    # The number of digits of the number n is less than the number of digits of the number m if:\n    #   n < m\n    #   n and m have different lengths\n    #   n and m differ by one digit, and the remaining digits of m are the same as the remaining\n    #   digits of n.\n    # The function returns true if n is a repdigit of m, and it returns false in all other cases.\n    if n < m or len(str(n))!= len(str(m)) or n%10!= m%10 and n//10 == m//10:\n        return False\n    # At this point the number n is greater than or equal to the number m, and both numbers have the same length.\n    # Now we compare digits from left to right and return True if there is any pair of digits that are the same.\n    for i in range(len(str(m))):\n        if str(n)[i]!= str(m)[i]:\n            return False\n    return True\ndef binary_search(list, key):\n    '''\n    Write a python function which performs a binary search for a key in a sorted list.\n    '''\n    # The binary search algorithm works if and only if the list is sorted.\n    # The worst case complexity of the binary search algorithm is O(log n), where n is the length of the list.\n    if len(list) == 0:\n        return False\n    left = 0\n    right = len(list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if list[mid] == key:\n            return True\n        elif list[mid] < key:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\ndef jump_search(list, key):\n    '''\n    Write a python function which performs a jump search for a key in a sorted list.\n    '''\n    # The jump search algorithm works if and only if the list is sorted.\n    # The worst case complexity of the jump search algorithm is O(\u221an), where n is the length of the list.\n    # Note that we calculate the length of the list in binary search and then apply binary search to that length.\n    if len(list) == 0:\n        return False\n    left = 0\n    right = len(list) - 1\n    while right - left > 1:\n        mid = (right - left + 1) // 2 + left\n        if list[mid] < key:\n            left = mid\n        else:\n            right = mid - 1\n    if list[left] == key:\n        return True\n    if list[right] == key:\n        return True\n    return False\ndef insertion_sort_1(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        j = i\n        while j > 0 and list[j-1] > list[j]:\n            list[j-1], list[j] = list[j], list[j-1]\n            j -= 1\n    return list\ndef insertion_sort_2(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_3(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_4(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_5(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_6(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_7(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_8(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_9(list):\n    '''\n    Write a python function which sorts a list in ascending order using the insertion sort algorithm.\n    '''\n    # The insertion sort algorithm sorts a list by comparing pairs of adjacent elements.\n    # The complexity of the algorithm is O(n^2).\n    for i in range(1, len(list)):\n        value = list[i]\n        pos = i\n        while pos > 0 and list[pos-1] > value:\n            list[pos] = list[pos-1]\n            pos -= 1\n        list[pos] = value\n    return list\ndef insertion_sort_10(list):\n    '''\n    Write a python function which sorts a list in ascending orde"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power = 1\n    while (power < n): \n        power *= 2\n    return power \ndef is_power_of_2(n): \n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    return (n!= 0 and ((n & (n - 1)) == 0)) \ndef is_power_of_2_fast(n): \n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    '''\n    return n > 0 and ((n & n - 1) == 0) \n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 if n <= 0 else 2**(n-1).bit_length()\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if x in a:\n        return a.count(x)\n    else:\n        return -1\n        \nprint(frequency([1,1,2,3,4,5],2))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if(i == x):\n            count += 1\n    return count \n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in range(len(a)):\n        if x==a[i]:\n            c+=1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=0\n    for i in a:\n        if i==x:\n            c+=1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(0, len(a)):\n        if a[i] == x:\n            c += 1\n    return c\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count = count + 1\n    return count\n    \n    \n    \ndef sum_pairs(a,x):\n    '''\n    Write a function to find all the pairs in a list that sum up to a given value.\n    '''\n    c = []\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i] + a[j] == x:\n                c.append([a[i],a[j]])\n    return c\n    \n    \n    \ndef count_length_of_all_strings(a):\n    '''\n    Write a function that counts the number of times a given string appears in a list of strings.\n    '''\n    count = 0\n    for item in a:\n        if len(item) == len(a[0]):\n            count = count + 1\n    return count\n    \n    \n    \ndef is_list_palindromic(a):\n    '''\n    Write a function which takes as input a list of integers, and checks whether the list is palindromic. For the purposes of this question, we will define a palindromic list to be a list whose entries are all the same value. You can assume, in your solution, that a list passed to your function will always have at least one element in it.\n    '''\n    b = []\n    for item in a:\n        if item == a[0]:\n            b.append(1)\n        else:\n            b.append(0)\n    return b\n    \n    \n    \ndef merge_lists(a,b):\n    '''\n    Write a function which merges two lists into a single list, where each element in the output list is a list containing two elements, one from each of the input lists.\n    '''\n    c = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if i == j:\n                c.append([a[i],b[j]])\n    return c\n    \n    \n    \ndef flatten_a_given_list(a):\n    '''\n    Write a function which takes a list containing strings and returns a list containing all the letters from all the strings.\n    '''\n    b = []\n    for item in a:\n        for char in item:\n            b.append(char)\n    return b\n    \n    \n    \ndef double_elements_in_list(a):\n    '''\n    Write a function which doubles each element in a list.\n    '''\n    b = []\n    for i in range(len(a)):\n        b.append(a[i]*2)\n    return b\n    \n    \n    \ndef get_sum_of_all_odd_indices(a):\n    '''\n    Write a function which returns the sum of all odd indices in a list.\n    '''\n    summ = 0\n    for i in range(len(a)):\n        if i % 2 == 0:\n            summ = summ + a[i]\n    return summ\n    \n    \n    \ndef count_smaller_than_current_element(a):\n    '''\n    Write a function which takes a list as an input and returns the number of elements in the list which are smaller than the element at the current index.\n    '''\n    count = 0\n    for i in range(1,len(a)):\n        if a[i] < a[i-1]:\n            count = count + 1\n    return count\n    \n    \n    \ndef remove_duplicates_from_list(a):\n    '''\n    Write a function which takes a list as input and returns a new list with all the duplicates removed.\n    '''\n    b = []\n    for item in a:\n        if item not in b:\n            b.append(item)\n    return b\n    \n    \n    \ndef count_uppercase_and_lowercase_letters(a):\n    '''\n    Write a function which takes a string as input and returns the number of uppercase and lowercase letters in it.\n    '''\n    upper = 0\n    lower = 0\n    for char in a:\n        if char.isupper():\n            upper = upper + 1\n        else:\n            lower = lower + 1\n    return upper,lower\n    \n    \n    \ndef return_list_of_numbers_between_min_and_max(a):\n    '''\n    Write a function which returns a list of all the numbers in a given list which fall between the min and max values.\n    '''\n    b = []\n    min = a[0]\n    max = a[0]\n    for item in a:\n        if item < min:\n            min = item\n        if item > max:\n            max = item\n    for i in range(min,max+1):\n        b.append(i)\n    return b\n    \n    \n    \ndef sum_of_all_numbers_in_list_below_given_number(a,x):\n    '''\n    Write a function which takes a list of numbers and a number as input and returns the sum of all the numbers in the list which are below the given number.\n    '''\n    b = []\n    for item in a:\n        if item < x:\n            b.append(item)\n    return sum(b)\n    \n    \n    \ndef find_the_longest_word_in_a_sentence(a):\n    '''\n    Write a function which takes a sentence as input and returns the length of the longest word in the sentence.\n    '''\n    b = []\n    for item in a.split():\n        b.append(len(item))\n    return max(b)\n    \n    \n    \ndef replace_all_occurrences_of_a_character(a,x,y):\n    '''\n    Write a function which takes a string as input, and returns a new string where all occurrences of a character have been replaced with another character.\n    '''\n    b = \"\"\n    for item in a:\n        if item == x:\n            b = b + y\n        else:\n            b = b + item\n    return b\n    \n    \n    \ndef remove_every_other(a):\n    '''\n    Write a function which takes a list as input and returns a new list with every second element removed.\n    '''\n    b = []\n    for i in range(len(a)):\n        if i % 2 == 0:\n            b.append(a[i])\n    return b\n    \n    \n    \ndef remove_all_duplicates(a):\n    '''\n    Write a function which takes a list as input and returns a new list with all duplicates removed.\n    '''\n    b = []\n    for item in a:\n        if item not in b:\n            b.append(item)\n    return b\n    \n    \n    \ndef string_to_list(a):\n    '''\n    Write a function which takes a string as input and returns a list of all the characters in the string.\n    '''\n    b = []\n    for item in a:\n        b.append(item)\n    return b\n    \n    \n    \ndef list_to_string(a):\n    '''\n    Write a function which takes a list as input and returns a string by concatenating all the items in the list together.\n    '''\n    b = \"\"\n    for item in a:\n        b = b + str(item)\n    return b\n    \n    \n    \ndef remove_all_occurrences(a,x):\n    '''\n    Write a function which takes a list and an element and removes all instances of the given element from the list.\n    '''\n    b = []\n    for i in range(len(a)):\n        if a[i]!= x:\n            b.append(a[i])\n    return b\n    \n    \n    \ndef get_all_sublists(a):\n    '''\n    Write a function which takes a list as input and returns a list of all sublists in that list.\n    '''\n    b = []\n    for i in range(len(a)+1):\n        for j in range(i+1,len(a)+1):\n            b.append(a[i:j])\n    return b\n    \n    \n    \ndef get_all_sublists_with_given_sum(a,x):\n    '''\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for x in range(m, n+1):\n        sum += list1[x]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    #loop through the list\n    sum1 = 0\n    for i in range(m, n + 1):\n        sum1 += list1[i]\n    return sum1\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for num in list1:\n        if num >= m and num <= n:\n            total += num\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m <= n:\n        sum1 = 0\n        for i in list1[m:n+1]:\n            sum1 = sum1 + i\n        return sum1\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in list1:\n        if i >= m and i <= n:\n            sum += i\n    print(\"The sum of numbers between\", m, \"and\", n, \"is\", sum)\nsum_range_list([1, 3, 5, 7, 9], 5, 8)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    new_list = []\n    for i in list1:\n        if m <= i <= n:\n            new_list.append(i)\n    print(f'Sum of numbers in the range {m} to {n} is {sum(new_list)}')\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n])\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of the sides\n    side1 = a\n    side2 = side1 / math.cos(math.pi/5)\n    side3 = side2 * math.cos(math.pi/5)\n    side4 = side1 * math.sin(math.pi/5)\n    side5 = side2 * math.sin(math.pi/5)\n    # add them up and return the value\n    return side1 + side2 + side3 + side4 + side5\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #Expected: 36.0\n    #a = math.sqrt(25 - (math.sqrt(5) - 1)**2)\n    return(5*a)\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a < 0:\n        print('Incorrect length of the side!')\n    else:\n        return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if type(a)!=type(0) or a<=0:\n        return \"Invalid input. Input must be a positive integer.\"\n    else:\n        s=a*5\n        p=(s*(3*math.sqrt(5)))/2\n        return p\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (5 * a)\n    return perimeter\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its side.\n    '''\n    area = (5 * a**2) / (4 * math.tan(math.pi / 5))\n    return area\ndef circum_radius_pentagon(a):\n    '''\n    Write a function to find the radius of circumscribed circle of a regular pentagon from the length of its side.\n    '''\n    radius = (a**2 + (5*a)**2)**(1/2) / (2 * 5)\n    return radius\ndef area_of_triangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    area = (a * b) / 2\n    return area\ndef perimeter_of_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular triangle from the length of its sides.\n    '''\n    perimeter = a + b + math.sqrt(a**2 + b**2)\n    return perimeter\ndef radius_of_circumscribed_circle(a,b):\n    '''\n    Write a function to find the radius of circumscribed circle of a regular triangle from the length of its side.\n    '''\n    radius = ((a**2 + b**2) / 2)**(1/2)\n    return radius\ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a regular circle from the length of its radius.\n    '''\n    area = (math.pi * r**2)\n    return area\ndef circumference_of_circle(r):\n    '''\n    Write a function to find the circumference of a regular circle from the length of its radius.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference\ndef area_of_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its sides.\n    '''\n    area = a * b\n    return area\ndef perimeter_of_rectangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular rectangle from the length of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_of_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a regular trapezium from the length of its sides.\n    '''\n    area = (a + b) * h / 2\n    return area\ndef perimeter_of_trapezium(a,b,h):\n    '''\n    Write a function to find the perimeter of a regular trapezium from the length of its sides.\n    '''\n    perimeter = a + b + h\n    return perimeter\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function to find the area of a regular parallelogram from the length of its sides.\n    '''\n    area = a * b\n    return area\ndef perimeter_of_parallelogram(a,b):\n    '''\n    Write a function to find the perimeter of a regular parallelogram from the length of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_of_square(a):\n    '''\n    Write a function to find the area of a regular square from the length of its side.\n    '''\n    area = a**2\n    return area\ndef circumference_of_square(a):\n    '''\n    Write a function to find the circumference of a regular square from the length of its side.\n    '''\n    circumference = 4 * a\n    return circumference\ndef area_of_Rhombus(a,b):\n    '''\n    Write a function to find the area of a regular Rhombus from the length of its sides.\n    '''\n    area = a * b\n    return area\ndef perimeter_of_Rhombus(a,b):\n    '''\n    Write a function to find the perimeter of a regular Rhombus from the length of its sides.\n    '''\n    perimeter = 2 * (a + b)\n    return perimeter\ndef area_of_triangle_incline(a,b,angle):\n    '''\n    Write a function to find the area of a regular triangle incline from the length of its sides and inclination angle.\n    '''\n    area = (a * b * math.sin(math.radians(angle))) / 2\n    return area\ndef perimeter_of_triangle_incline(a,b,angle):\n    '''\n    Write a function to find the perimeter of a regular triangle incline from the length of its sides and inclination angle.\n    '''\n    perimeter = a + b + math.sqrt((a * math.sin(math.radians(angle)))**2 + (b * math.cos(math.radians(angle)))**2)\n    return perimeter\ndef area_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a regular trapezoid from the length of its sides and height.\n    '''\n    area = (a + b) * h / 2\n    return area\ndef perimeter_of_trapezoid(a,b,h):\n    '''\n    Write a function to find the perimeter of a regular trapezoid from the length of its sides and height.\n    '''\n    perimeter = a + b + h\n    return perimeter\ndef area_of_Trapezoid_incline(a,b,h,angle):\n    '''\n    Write a function to find the area of a regular trapezoid incline from the length of its sides and inclination angle and height.\n    '''\n    area = (a + b) * (h * math.sin(math.radians(angle))) / 2\n    return area\ndef perimeter_of_Trapezoid_incline(a,b,h,angle):\n    '''\n    Write a function to find the perimeter of a regular trapezoid incline from the length of its sides and inclination angle and height.\n    '''\n    perimeter = a + b + (h * math.sin(math.radians(angle))) + math.sqrt((a * math.sin(math.radians(angle)))**2 + (b * math.cos(math.radians(angle)))**2)\n    return perimeter\ndef area_of_parallelogram_incline(a,b,angle):\n    '''\n    Write a function to find the area of a regular parallelogram incline from the length of its sides and inclination angle.\n    '''\n    area = a * b * math.sin(math.radians(angle))\n    return area\ndef perimeter_of_parallelogram_incline(a,b,angle):\n    '''\n    Write a function to find the perimeter of a regular parallelogram incline from the length of its sides and inclination angle.\n    '''\n    perimeter = 2 * (a + b) * math.sin(math.radians(angle))\n    return perimeter\ndef area_of_kite(a,b,angle):\n    '''\n    Write a function to find the area of a regular kite from the length of its sides and inclination angle.\n    '''\n    area = a * b * math.sin(math.radians(angle))\n    return area\ndef perimeter_of_kite(a,b,angle):\n    '''\n    Write a function to find the perimeter of a regular kite from the length of its sides and inclination angle.\n    '''\n    perimeter = 2 * (a + b) * math.sin(math.radians(angle))\n    return perimeter\ndef area_of_dodecagon(a):\n    '''\n    Write a function to find the area of a regular dodecagon from the length of its side.\n    '''\n    area = (3 * math.sqrt(3) * a**2) / 2\n    return area\ndef perimeter_of_dodecagon(a):\n    '''\n    Write a function to find the perimeter of a regular dodecagon from the length of its side.\n    '''\n    perimeter = (13 * a)\n    return perimeter\ndef area_of_odecagon(a):\n    '''\n    Write a function to find the area o"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    string = \"std\"\n    count = 0\n    for i in range(len(s)):\n        if(s[i:i+len(string)]==string):\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in s:\n        if i =='std':\n            count = count + 1\n    return count\nprint(count_occurance('The quick brown fox jumps over the lazy dog'))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count=0\n    for i in s:\n        if i=='std':\n            count+=1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # count_std = 0\n    # for i in s:\n    #     if i =='std':\n    #         count_std += 1\n    # return count_std\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)-2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for i in test_tuple:\n        if type(i) == tuple:\n            count +=1\n    if count == 0:\n        return False\n    else:\n        return True\n    \ndef check_length(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same length or not.\n    '''\n    count = 0\n    for i in test_tuple:\n        if len(i) == len(test_tuple):\n            count +=1\n    if count == 0:\n        return False\n    else:\n        return True\n    \ndef swap(test_tuple):\n    '''\n    Write a function to swap first and last element of each element of tuple.\n    '''\n    swap_list = []\n    for i in test_tuple:\n        swap_list.append(i[-1:]+i[1:-1]+i[:1])\n    return tuple(swap_list)\n    \ndef rev_swap(test_tuple):\n    '''\n    Write a function to reverse every element of tuple.\n    '''\n    rev_list = []\n    for i in test_tuple:\n        rev_list.append(list(i[::-1]))\n    return tuple(rev_list)\n    \ndef flatten(test_tuple):\n    '''\n    Write a function to flatten nested tuples into one tuple.\n    '''\n    flat_list = []\n    for i in test_tuple:\n        for j in i:\n            flat_list.append(j)\n    return tuple(flat_list)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    def check_data_type(elem):\n        if not isinstance(elem, str):\n            raise ValueError('all elements of tuple should be of type string')\n        return True\n    return all([check_data_type(elem) for elem in test_tuple])\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        return False\n    if len(set([type(i) for i in test_tuple])) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) > 0:\n        types = set([type(i) for i in test_tuple])\n        if len(types) > 1:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    result = None\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return all(type(elem) == type(test_tuple[0]) for elem in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    try:\n        for i in test_tuple:\n            if isinstance(i, (list, tuple)):\n                check_type(i)\n            else:\n                return\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    else:\n        return type(test_tuple[0]) == type(test_tuple[1])\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    #test_tuple = [1, 2, 3, 4, 'a', 'b', 'c']\n    result = []\n    for i in test_tuple:\n        if type(i) not in result:\n            result.append(type(i))\n    if len(result) == 1:\n        print(\"All the elements in tuple have same data type\")\n    else:\n        print(\"All the elements in tuple have different data types\")\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    return test_tuple.type() == test_tuple[0].type()\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    #check if the element is the middle element\n    if x == arr[n//2]:\n        return True\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return arr[0] == x\n    else:\n        mid = n // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            return is_majority(arr[mid + 1:], n - mid - 1, x)\n        else:\n            return is_majority(arr[:mid], mid, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? This is a pretty straightforward algorithm.\n    #? This is a pretty straightforward algorithm.\n    #? This is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #? O(n) time\n    #? O(1) space\n    \n    #? Find the majority element using Binary Search\n    #? The majority element is the element that occurs more than n/2 times.\n    \n    #! There's probably a way to do this more efficiently by searching the array in O(n) time, but this is a pretty straightforward algorithm.\n    #! There's probably "
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 0:\n        return False\n    if arr[n-1] == x:\n        return True\n    if n == 1:\n        return False\n    if arr[0] == x:\n        return True\n    return is_majority(arr[1:], n-1, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(0, n):\n        if arr[i] == x:\n            count += 1\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) <= n//2:\n        return False\n    counter = 0\n    for i in arr:\n        if i == x:\n            counter += 1\n            if counter > n//2:\n                return True\n        else:\n            counter = 0\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr.sort()\n    if arr[0] == arr[n-1]:\n        return arr[0]\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # base case\n    if n == 1:\n        return arr[0] == x\n    # first half of array\n    elif arr[0] == x:\n        return True\n    # second half of array\n    elif arr[n-1] == x:\n        return True\n    else:\n        # split the array in half and return whether element is in first half\n        return is_majority(arr[:n//2], n//2, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(0,n):\n        if x == arr[i]:\n            count = count + 1\n    if count > n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr.append(x)\n    arr.sort()\n    return arr[len(arr)-2] == x"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    num_of_set_bits = 0; \n    while (n): \n        num_of_set_bits += n & 1; \n        n >>= 1; \n    return num_of_set_bits; \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \ndef count_Set_Bits_v2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += 1\n        n &= (n-1)\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count+= 1\n        n &= (n-1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c=0\n    while n:\n        c+=1\n        n&=n-1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = \"abracadabra\"\n    result = \"\"\n    for i in range(len(str)):\n        if i%2 == 0:\n            result = result + str[i]\n    return result\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    for i in str:\n        if int(str.index(i))%2 == 1:\n            print(i, end='')\n        else:\n            print('', end='')\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return [i for i in str if str.index(i)%2 == 0]\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result_list=[]\n    result_string=\"\"\n    for i in range(len(str)):\n        if(i%2==0):\n            result_list.append(str[i])\n    result_string=\"\".join(result_list)\n    return result_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(str[::2])\n    \n    #Code Challenge: Solve the FrequentWordsWithMismatches problem."
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string=list(str)\n    new_list=[]\n    for i in range(len(string)):\n        if i%2==0:\n            new_list.append(string[i])\n    new_string=''.join(new_list)\n    return new_string\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([str[i] for i in range(len(str)) if i%2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([i for i in str if str.index(i)%2==0])\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = \"\"\n    for index, value in enumerate(str):\n        if index % 2 == 0:\n            string += str[index]\n    print(string)\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\nprint(min_of_three(7,8,9))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    elif c < a and c < b:\n        return c\n    elif a == b:\n        return a\n    elif a == c:\n        return a\n    elif b == c:\n        return b\n    elif a == b == c:\n        return a\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\nprint(min_of_three(1,2,3))\nprint(min_of_three(-1,2,3))\nprint(min_of_three(10,2,3))\nprint(min_of_three(4,2,3))\nprint(min_of_three(-4,2,3))\nprint(min_of_three(4,4,3))\nprint(min_of_three(-4,4,3))\nprint(min_of_three(4,4,4))\nprint(min_of_three(4,4,4))\nprint(min_of_three(4,4,4))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c\ndef reverse_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minimum = a\n    if b<a:\n        minimum = b\n    if c<minimum:\n        minimum = c\n    return minimum\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if b < c:\n            print(f\"Min is {a}\")\n        else:\n            print(f\"Min is {c}\")\n    else:\n        if a < c:\n            print(f\"Min is {b}\")\n        else:\n            print(f\"Min is {c}\")\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if (a<b): \n        if (a<c): \n            return a \n        else: \n            return c \n    else: \n        if (b<c): \n            return b \n        else: \n            return c \n    return 0\ndef min_of_four(a,b,c,d): \n    '''\n    Write a function to find minimum of four numbers.\n    '''\n    return min_of_three(a,min_of_three(b,c,d)) \ndef min_of_five(a,b,c,d,e): \n    '''\n    Write a function to find minimum of five numbers.\n    '''\n    return min_of_four(a,min_of_four(b,c,d,e))\nprint(min_of_five(4,3,6,8,9))"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    elif c<=a and c<=b:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # First we check if first number is smaller than the next two\n    # if it is, then return the first number\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    # if second number is smaller than first number and smaller than the next number\n    # then return the second number\n    elif b<a:\n        if b<c:\n            return b\n        else:\n            return c\n    # if the third number is smaller than both of the first two, then return the third number\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1<<n)-1\n    mask = mask>>(n-r)\n    mask = mask<<(r)\n    return mask \n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(bin(n))\n    print(bin(l))\n    print(bin(r))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    bit = 1 \n    while bit <= n: \n        bit = bit << 1\n        bit = bit >> 1\n    \n    bit = l-1\n    \n    while bit <= r: \n        if bit & n == 1: \n            return False\n        bit = bit << 1\n        bit = bit >> 1\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def check_set_bits(n):\n        '''\n        Write a python function to check whether all the bits are unset in the given number or not.\n        '''\n        return (n&(n-1)) == 0\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    def binary_repr(n, width):\n        \"\"\"\n        Return the binary representation of the input number as a string.\n        \"\"\"\n        return format(n, 'b').zfill(width)\n    \n    def set_bit(x, i):\n        \"\"\"\n        Set the ith bit of x\n        \"\"\"\n        return x | (1 << i)\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return (2**n-1)&(~(2**l-1))\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #code here\n    def get_bit(n,i):\n        return n & (1<<i)\n    for i in range(l,r+1):\n        if get_bit(n,i)==0:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if ~(1<<i) & n:\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def is_set_in_range(n):\n        #print(n)\n        if(n & n>>1==0):\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    def count(n):\n        '''\n        Write a function to check whether the given number is odd or not.\n        '''\n        count = 0\n        while n:\n            count += 1\n            n = n & (n - 1)\n        return count\n    def setBits(n, i):\n        '''\n        Write a function to set a given number of bits in a given number.\n        '''\n        return (1 << i) - 1 | n\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        if arr[low] < 0 and arr[high] >= 0:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n        elif arr[low] >= 0 and arr[high] < 0:\n            low += 1\n        else:\n            high -= 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if arr is None or n > len(arr):\n        return\n    \n    # Check if the array is neg or pos\n    neg_pos = 0\n    for i in range(n):\n        if arr[i] < 0:\n            neg_pos += 1\n    \n    # If neg then shift to beginning\n    if neg_pos > 0:\n        for i in range(n):\n            if arr[i] < 0:\n                arr[i], arr[0] = arr[0], arr[i]\n                arr = arr[1:]\n    # If pos then shift to end\n    elif neg_pos < 0:\n        for i in range(n):\n            if arr[i] > 0:\n                arr[i], arr[n - 1] = arr[n - 1], arr[i]\n                arr = arr[:n - 1]\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(0,n):\n        for j in range(0,n):\n            if arr[i] < 0 and arr[j] < 0:\n                t = arr[i]\n                arr[i] = arr[j]\n                arr[j] = t\n                break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    start = 0\n    end = n-1\n    while start <= end:\n        while arr[start] < 0 and start < n and start <= end:\n            start += 1\n        while arr[end] >= 0 and start < n and start <= end:\n            end -= 1\n        if start < n and end >= 0:\n            arr[start], arr[end] = arr[end], arr[start]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        for j in range(n - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    low = 0\n    high = len(arr)-1\n    while(low <= high):\n        if arr[low] < 0 and arr[high] < 0:\n            low += 1\n        elif arr[low] >= 0 and arr[high] >= 0:\n            high -= 1\n        else:\n            arr[low], arr[high] = arr[high], arr[low]\n            low += 1\n            high -= 1\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Sort array based on whether or not value is negative or positive.\n    sorted_array = sorted(arr, key=lambda x: -1 if x < 0 else 1)\n    # Find the index of the first n elements.\n    start_idx = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            start_idx += 1\n        if start_idx == n:\n            break\n    # Swap the first n elements from the sorted array.\n    for i in range(n):\n        arr[i], sorted_array[i] = sorted_array[i], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    positive = []\n    negative = []\n    for i in arr:\n        if i < 0:\n            negative.append(i)\n        else:\n            positive.append(i)\n    return positive + negative\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    index = 0\n    while index < n:\n        if arr[index] < 0:\n            arr.pop(index)\n            arr.insert(0,arr[index])\n            index += 1\n        else:\n            index += 1\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # we need to create a counter that will move from beginning to end of the array\n    counter = 0\n    # we need to create an index that will be used to move the elements from beginning to end of the array\n    index = 0\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    #convert the string into a list of individual characters\n    str_list = list(str1)\n    #replace all the spaces with the character\n    for i in range(len(str_list)):\n        if str_list[i] =='':\n            str_list[i] = char\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s')\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in str1:\n        if i =='':\n            str1 = str1.replace(i,char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%char)\nprint(replace_blank('This is my test.','@'))\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s')\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # return str1.replace(\" \",\"#\")\n    # print(str1.replace(\" \",\"#\"))\n    # return str1.replace(\" \",\"#\")\n    return str1.replace(\" \",\"\"+char+\"\")\n    # str2 = list(str1)\n    # print(str2)\n    # for i in range(len(str2)):\n    #     if str2[i] == \" \":\n    #         str2[i] = char\n    #     # print(str2)\n    # return \"\".join(str2)\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = list(str1)\n    for i in range(len(str1)):\n        if str1[i] =='':\n            str1[i] = char\n    str1 = ''.join(str1)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"%s\") %char\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str1 = str1.replace(\" \",\"{}\")\n    return str1.format(char)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_n = []\n    list1 = sorted(list1)\n    for i in range(n):\n        largest_n.append(list1[-i-1])\n    return largest_n\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    heapq.heapify(list1)\n    for i in range(n):\n        list2.append(heapq.heappop(list1))\n    return list2\nlist1 = [34, 15, 21, 10, 19, 2, 20, 12, 3, 4, 6, 43, 32, 14, 21]\nprint(\"Largest number in a list:\")\nprint(larg_nnum(list1,2))\nprint(larg_nnum(list1,3))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    maxheap = []\n    for i in range(0,n):\n        heapq.heappush(maxheap,list1[i])\n    for i in range(n,len(list1)):\n        if maxheap[0]<list1[i]:\n            maxheap.pop()\n            heapq.heappush(maxheap,list1[i])\n    return maxheap\nprint(larg_nnum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],4))\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort()\n    list2=[]\n    for i in range(0,n):\n        list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #list1 = [6,7,8,1,4,2,3,5,4,3,6,8,7,5,4,3,2]\n    #n = 5\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #tuple1=tuple(list1)\n    #heapq.heapify(tuple1)\n    #return [tuple1[i] for i in range(0,n)]\n    return sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n,list1)\ndef first_n_num_squared(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of the first n numbers in the list that are square numbers.\n    '''\n    return list(filter(lambda x:x**0.5%1==0,list1[:n]))\ndef smallest_n_prime(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of the first n prime numbers.\n    '''\n    return list(filter(lambda x:not any(i%x==0 for i in range(2,x)),list1[:n]))\ndef sum_all_numbers(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the sum of the first n numbers in the list.\n    '''\n    return sum(list1[:n])\ndef all_dif_numbers(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of the first n numbers in the list that are different from each other.\n    '''\n    return list(set(list1[:n]))\ndef longest_same_div_num(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the longest list that is n elements long and contains no numbers that repeat.\n    '''\n    longest = []\n    l = []\n    for i in list1:\n        if i not in l:\n            l.append(i)\n        else:\n            longest = l\n    if len(longest)==n:\n        return longest\n    elif len(longest)<n:\n        return list1[:n]\n    else:\n        return longest\ndef all_multiples_of_n(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of all multiples of n in the list.\n    '''\n    return list(filter(lambda x:x%n==0,list1))\ndef all_even_numbers(list1):\n    '''\n    Write a function that takes in a list and returns a list of only the even numbers in the list.\n    '''\n    return list(filter(lambda x:x%2==0,list1))\ndef all_odd_numbers(list1):\n    '''\n    Write a function that takes in a list and returns a list of only the odd numbers in the list.\n    '''\n    return list(filter(lambda x:x%2!=0,list1))\ndef group_by(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a dictionary containing the number of times that each value occurs in the list.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i]+=1\n    return dict1\ndef check_anagram(word1, word2):\n    '''\n    Write a function that takes in two strings and returns True if they are anagrams.\n    '''\n    return sorted(word1)==sorted(word2)\ndef num_of_anagrams(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list of all the possible anagrams of the first n items in the list.\n    '''\n    d = {}\n    for i in list1:\n        s = ''.join(sorted(i))\n        if s in d:\n            d[s].append(i)\n        else:\n            d[s]=[i]\n    return list(d.values())\ndef multiply_even_numbers(list1):\n    '''\n    Write a function that takes in a list and returns the product of all the even numbers in the list.\n    '''\n    return reduce(lambda x,y:x*y,list(filter(lambda x:x%2==0,list1)))\ndef longest_cont_sum_is_prime(list1):\n    '''\n    Write a function that takes in a list of positive integers and returns the length of the longest contiguous sum of prime numbers in the list.\n    '''\n    longest = 0\n    current = 0\n    for i in list1:\n        if i%2==1:\n            current+=i\n        else:\n            current=0\n        longest = max(longest,current)\n    return longest\ndef avg_of_two_smallest_num(list1):\n    '''\n    Write a function that takes in a list and returns the average of the two smallest numbers in the list.\n    '''\n    return sum(sorted(list1)[:2])/2\ndef sum_of_all_numbers_divisible_by_k(list1, k):\n    '''\n    Write a function that takes in a list and an integer and returns the sum of all numbers in the list that are divisible by k.\n    '''\n    return sum(list(filter(lambda x:x%k==0,list1)))\ndef sum_of_n_digit_numbers(list1):\n    '''\n    Write a function that takes in a list and an integer and returns the sum of the numbers in the list that are n digits long.\n    '''\n    return sum(list(filter(lambda x:len(str(x))==5,list1)))\ndef sum_of_squares_of_divisors(list1):\n    '''\n    Write a function that takes in a list and returns the sum of the squares of the divisors of the numbers in the list.\n    '''\n    total = 0\n    for i in list1:\n        for j in range(2,int(i**0.5)+1):\n            if i%j==0:\n                total+=j**2\n                total+=i//j**2\n    return total\ndef sum_of_divisors_below(n):\n    '''\n    Write a function that takes in an integer and returns the sum of the divisors of the numbers between 1 and the input.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total+=sum(list(filter(lambda x:i%x==0,range(1,i+1))))\n    return total\ndef sum_of_divisors(n):\n    '''\n    Write a function that takes in an integer and returns the sum of the divisors of the number.\n    '''\n    total = 0\n    for i in range(1,n):\n        if n%i==0:\n            total+=i\n    return total\ndef sum_of_three_squares(n):\n    '''\n    Write a function that takes in an integer and returns the sum of the three squares of its digits.\n    '''\n    return sum(list(map(lambda x:x**2,list(map(lambda x:int(x),list(str(n)))))))\ndef gcd(n,m):\n    '''\n    Write a function that takes in two integers and returns the greatest common divisor of the two numbers.\n    '''\n    while n%m!=0:\n        old_n = n\n        old_m = m\n        n = old_m\n        m = old_n%old_m\n    return m\ndef double_factorial(n):\n    '''\n    Write a function that takes in an integer and returns the double factorial of the input.\n    '''\n    return reduce(lambda x,y:x*y,list(range(2,n+1)))\ndef digit_sum(n):\n    '''\n    Write a function that takes in an integer and returns the sum of the digits in the input.\n    '''\n    return reduce(lambda x,y:x+y,list(map(int,str(n))))\ndef palindrome_chain(start, end):\n    '''\n    Write a function that takes in two strings and returns the shortest palindrome chain between the two strings.\n    '''\n    if start==end:\n        return []\n    s = set()\n    s.add(start)\n    s.add(end)\n    current_min = 10000000000\n    while True:\n        for "
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return heapq.nlargest(n,list1)\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    result = []\n    for i in list1:\n        heapq.heappush(heap, -i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    for j in range(len(heap)):\n        result.append(-heapq.heappop(heap))\n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for i in range(len(list1)):\n        heapq.heappush(max_heap,-list1[i])\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    result = []\n    for i in range(len(max_heap)):\n        result.append(-1*heapq.heappop(max_heap))\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14*r*h) + (2*3.14*r**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r < 0 or h < 0:\n        print(\"Please enter a positive number\")\n    elif r == 0 or h == 0:\n        print(\"The area of a cylinder with a radius of 0 or height of 0 is 0\")\n    else:\n        area = 3.1415926535897932 * r * r\n        surf_area = 2 * 3.1415926535897932 * r * h + 2 * 3.1415926535897932 * r * r\n        print(\"The lateral surface area of a cylinder with a radius of \" + str(r) + \" and height of \" + str(h) + \" is \" + str(surf_area) + \".\")\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14*r*h) + (2*3.14*r**2)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import numpy as np\n    \n    a = 2*np.pi*r*h\n    return a\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral = 2 * pi * r * (r + h)\n    return lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral = 2*math.pi*r*h\n    return lateral\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    PI = 3.14159265359\n    SA = PI*(r**2)*h\n    return SA\ndef main():\n    print(lateralsuface_cylinder(3,4))\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    print(f\"The volume of a cube with side length {l} is {l ** 3} units.\")\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    print(volume)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l * l * l)\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l * l * l\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_set = n & 0xAAAAAAAA\n    return even_set\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n ^ (n>>1)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary = bin(n)\n    for i in range(len(binary)):\n        if i % 2 == 0:\n            n = n | 1 << i\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    \n    # Set all even bits of n \n    return n & 0xaaaaaaaa\n    \n    \ndef set_odd_bit_number(n): \n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    \n    # Set all odd bits of n \n    return n | 0x55555555\n    \n    \ndef clear_even_bit_number(n): \n    '''\n    Write a python function to clear all even bits of a given number.\n    '''\n    \n    # Clear all even bits of n \n    return n & 0x55555555\n    \n    \ndef clear_odd_bit_number(n): \n    '''\n    Write a python function to clear all odd bits of a given number.\n    '''\n    \n    # Clear all odd bits of n \n    return n & 0xaaaaaaaa\n    \n    \ndef flip_bit_number(n, i): \n    '''\n    Write a python function to flip the ith bit of a given number.\n    '''\n    \n    # Flip the ith bit of n \n    return n ^ (1 << i)\n    \n    \ndef set_bit_number(n, i): \n    '''\n    Write a python function to set the ith bit of a given number.\n    '''\n    \n    # Set the ith bit of n \n    return n | (1 << i)\n    \n    \ndef clear_bit_number(n, i): \n    '''\n    Write a python function to clear the ith bit of a given number.\n    '''\n    \n    # Clear the ith bit of n \n    return n & (~(1 << i))\n    \n    \ndef flip_nth_bit_number(n, i): \n    '''\n    Write a python function to flip the ith bit of a given number.\n    '''\n    \n    # Flip the ith bit of n \n    return n ^ (1 << i)\n    \n    \ndef is_power_of_two(n): \n    '''\n    Write a python function to check if a given number is a power of two.\n    '''\n    \n    # Check if n is a power of 2 \n    if n == 0: \n        return False\n    while n % 2 == 0: \n        n /= 2\n    return n == 1\n    \n    \ndef is_power_of_two_with_bit_manipulation(n): \n    '''\n    Write a python function to check if a given number is a power of two using bit manipulation.\n    '''\n    \n    # Check if n is a power of 2 \n    return n > 0 and (n & (n - 1)) == 0\n    \n    \ndef clear_all_bits_number(n): \n    '''\n    Write a python function to clear all bits of a given number.\n    '''\n    \n    # Clear all bits of n \n    return n & 0x00000000\n    \n    \ndef number_of_bits_set_in_n(n): \n    '''\n    Write a python function to count the number of bits set in a given number.\n    '''\n    \n    # Count the number of bits set in n \n    n = n\n    count = 0\n    while n: \n        count += n & 1\n        n = n >> 1\n    return count\n    \n    \ndef set_bit_number_in_n(n, i): \n    '''\n    Write a python function to set the ith bit of a given number.\n    '''\n    \n    # Set the ith bit of n \n    return n | (1 << i)\n    \n    \ndef clear_bit_number_in_n(n, i): \n    '''\n    Write a python function to clear the ith bit of a given number.\n    '''\n    \n    # Clear the ith bit of n \n    return n & (~(1 << i))\n    \n    \ndef toggle_bit_number_in_n(n, i): \n    '''\n    Write a python function to toggle the ith bit of a given number.\n    '''\n    \n    # Toggle the ith bit of n \n    return n ^ (1 << i)\n    \n    \ndef set_all_bits_number_in_n(n): \n    '''\n    Write a python function to set all bits of a given number.\n    '''\n    \n    # Set all bits of n \n    return n - n % 0x100000000\n    \n    \ndef number_of_bits_set_in_n_using_bit_manipulation(n): \n    '''\n    Write a python function to count the number of bits set in a given number using bit manipulation.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef clear_all_bits_number_in_n(n): \n    '''\n    Write a python function to clear all bits of a given number.\n    '''\n    \n    # Clear all bits of n \n    return n & 0x7FFFFFFF\n    \n    \ndef number_of_bits_set_in_n_using_bit_manipulation(n): \n    '''\n    Write a python function to count the number of bits set in a given number using bit manipulation.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef number_of_bits_set_in_n_using_bit_manipulation(n): \n    '''\n    Write a python function to count the number of bits set in a given number using bit manipulation.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef is_power_of_two_using_bit_manipulation(n): \n    '''\n    Write a python function to check if a given number is a power of two using bit manipulation.\n    '''\n    \n    # Check if n is a power of 2 \n    return (n & (n - 1)) == 0\n    \n    \ndef count_bits_in_n(n): \n    '''\n    Write a python function to count the number of bits set in a given number.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef count_bits_in_n_using_bit_manipulation(n): \n    '''\n    Write a python function to count the number of bits set in a given number using bit manipulation.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef count_bits_in_n(n): \n    '''\n    Write a python function to count the number of bits set in a given number.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef number_of_bits_set_in_n_using_bit_manipulation(n): \n    '''\n    Write a python function to count the number of bits set in a given number using bit manipulation.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef number_of_bits_set_in_n(n): \n    '''\n    Write a python function to count the number of bits set in a given number.\n    '''\n    \n    # Count the number of bits set in n \n    count = 0\n    while n: \n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \ndef i"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    mask = 0\n    while (n):\n        mask = mask ^ (1 & n)\n        n = n >> 1\n    return mask\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = n ^ (n >> 1) \n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Set all bits of n to 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [(\"a\", 1), (\"a\", 2), (\"b\", 2), (\"c\", 1)]\n    my_dict = {}\n    for tuple in test_list:\n        if tuple[0] in my_dict:\n            my_dict[tuple[0]] += 1\n        else:\n            my_dict[tuple[0]] = 1\n    return my_dict\n    \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    my_dict = {}\n    for tuple in test_list:\n        if tuple[0] in my_dict:\n            my_dict[tuple[0]] += 1\n        else:\n            my_dict[tuple[0]] = 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a', 'b', 'a'), ('c', 'b', 'a'), ('a', 'c', 'a')]\n    my_dict = {}\n    #print(Counter(test_list))\n    for i in test_list:\n        #print(i)\n        my_dict[i] = test_list.count(i)\n        #print(my_dict)\n        #print(my_dict.values())\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return dict(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    if not isinstance(test_list, list):\n        return 'Not a list'\n    elif not all(isinstance(item, tuple) for item in test_list):\n        return 'List of tuples'\n    elif not all(len(item) == 2 for item in test_list):\n        return 'List of tuples with 2 elements'\n    return dict(Counter(test_list))\n    \n    "
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # creating an empty dictionary \n    counts = Counter() \n    # for loop to iterate for each tuple in the list \n    for x in test_list: \n        # adds the count of each tuple to the dictionary \n        counts[x] += 1\n    return counts \n    \n    \n    \ndef double_list(l):\n    '''\n    Write a function that takes in a list and returns a new list with all the elements doubled\n    '''\n    return [x * 2 for x in l] \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # counter = dict()\n    # for item in test_list:\n    #     if item in counter:\n    #         counter[item] += 1\n    #     else:\n    #         counter[item] = 1\n    # print(counter)\n    \n    # return counter\n    counter = Counter(test_list)\n    return dict(counter)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    test_list = [('a', 1), ('b', 2), ('a', 3), ('a', 1), ('a', 4), ('c', 3)]\n    test_dict = {}\n    for i in test_list:\n        if i[0] not in test_dict:\n            test_dict[i[0]] = i[1]\n        else:\n            test_dict[i[0]] += i[1]\n    print(test_dict)\n    print(Counter(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #create empty dictionary\n    dict_ = {}\n    #create a for loop to iterate through the list of tuples\n    for i in test_list:\n        #try and except block to check if the key in the dictionary already exists, if it does increase the value\n        try:\n            dict_[i] += 1\n        #if the key does not exist, create a key with the value 1\n        except:\n            dict_[i] = 1\n    #return the dictionary\n    return dict_\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    print(test_list)\n    # Create a dictionary to keep track of how many times each tuple occurs in the list\n    occurrences_dict = Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Check for solution to the 1st task\n    check_occurences.count_occurences = {}\n    for tuple in test_list:\n        # Check for solution to the 2nd task\n        if tuple in check_occurences.count_occurences:\n            # Check for solution to the 3rd task\n            check_occurences.count_occurences[tuple] += 1\n        else:\n            # Check for solution to the 4th task\n            check_occurences.count_occurences[tuple] = 1\n    # Check for solution to the 5th task\n    return check_occurences.count_occurences\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    ans = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if len(substring) > 1:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Time complexity = O(n^2)\n    # Space complexity = O(n)\n    '''\n    def count(sub): \n        if len(sub) == 0: \n            return 0\n        else: \n            return 1 + count(sub[1:]) \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        for j in range(i, len(str)): \n            if(str[i:j+1]!= ''): \n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(set(str.split(' ')))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_string = str[i:j]\n            if len(sub_string) > 1:\n                if sub_string.isalpha():\n                    count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    return len(list(filter(None, str.split())))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        for j in range(i,l):\n            if len(str[i:j+1]) > 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    ans = 0\n    for i in range(n): \n        for j in range(i, n): \n            if isSubstring(str, i, j): \n                ans += 1\n    return ans \n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str) \n    ctr = 0\n    for i in range(n): \n        for j in range(i, n): \n            if len(str[i:j+1])>0: \n                ctr+=1\n    return ctr\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # base case: \n    if n == 1: \n        return m\n    # recursive case: \n    else: \n        return get_total_number_of_sequences(m,n-1) + get_total_number_of_sequences(m,n-2)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n*factorial(n-1)\n    return (factorial(m-2)/(factorial(m-1-n)*factorial(n)))\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Base case: n = 0\n    if n == 0: \n        return 1\n    # Base case: m < 2 * n\n    elif m < 2*n:\n        return 0\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_num_of_sequences = 0\n    for i in range(1, m):\n        if (n == 1):\n            total_num_of_sequences += i\n        elif (n == 2):\n            total_num_of_sequences += i + m - 1\n        else:\n            if (i >= 2 * m):\n                break\n            else:\n                total_num_of_sequences += i + m - 1\n    return total_num_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if n == 1:\n        return m\n    if n == 2:\n        return m + 1\n    return get_total_number_of_sequences(m,n-1) + m - n\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    I just solved this one by solving the equation 2^n >= m (2n >= m)\n    using the same logic as I did with the range() function\n    '''\n    return pow(2,n) >= m\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_total_number_of_sequences(m,n): \n        dp = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(1,m+1):\n            for j in range(n+1):\n                if j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = 0\n                elif j == i:\n                    dp[i][j] = 1\n                elif j == i+1:\n                    dp[i][j] = 1\n                elif i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i][j-1] + dp[i-1][j]\n        return dp[m][n]\n    return get_total_number_of_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # we have to find the number of ways to choose one element from all possible elements in m and n.\n    # there is one way to do this by taking an element from the first set of m, there is m-1 ways to do this, then take the second set of n-1 ways, and so on.\n    # the total number of ways is equal to the total number of ways to choose one element from the first set of m * the total number of ways to choose one element from the second set of n * and so on\n    # a recursive solution can be written as follows\n    # if n==0, then m must be 1, since there is only one way to choose 1 from m.\n    # if m==0, then there is no way to make an array of length n, so the number of sequences is 0.\n    # if n==1 and m!=1, then there is only one way to choose 1 element from m.\n    # if n==1 and m==1, then there are m ways to choose 1 element from m.\n    # if n>1 and m!=1, then there are m*(m-1)*...*(m-n+1) ways to choose 1 element from m.\n    # if n==1 and m==1, then there are m ways to choose 1 element from m.\n    # otherwise, then there are m*(m-1)*...*(m-n+1) ways to choose 1 element from m.\n    # so we have to choose the cases where n>1 and m!=1 and m==1\n    # number of ways to choose an element from all possible elements in m is m(m-1)(m-2)...(m-n+1)\n    # number of ways to choose an element from all possible elements in n is n(n-1)(n-2)...1\n    # and the total number of ways is then m(m-1)*...*(m-n+1)*n(n-1)*...*1\n    # m(m-1)*...*(m-n+1)*n(n-1)*...*1 = m(m-1)*...*(m-n+1)*(n*(n-1)*...*1)\n    # this is the base case\n    # then we have to consider cases where n>1 and m==1\n    # then the total number of ways is equal to m*(m-1)*...*(m-n+1)*(n*(n-1)*...*1)\n    # so the function returns m(m-1)*...*(m-n+1)*(n*(n-1)*...*1)\n    \n    def total_number_of_sequences(m,n):\n        '''\n        Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n        '''\n        if n==0:\n            return 1\n        if m==0:\n            return 0\n        if n==1 and m!=1:\n            return 1\n        if n==1 and m==1:\n            return 1\n        if n>1 and m!=1:\n            return m*(m-1)*(m-2)*...*(m-n+1)\n        if n==1 and m==1:\n            return m\n    \n    return total_number_of_sequences(m,n)\n    \ndef get_number_of_sequences_with_sum(m,n,k):\n    '''\n    Write a function that takes in positive integers m, n, and k and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m. The last element in the sequence must be greater than or equal to k.\n    '''\n    # the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # the number of possible sequences of length n-1, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1-1, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # the number of possible sequences of length n-1-1, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1-2, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # the number of possible sequences of length n-1-2, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1-3, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # the number of possible sequences of length n-1-3, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1-4, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # the number of possible sequences of length n-1-4, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1-5, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # the number of possible sequences of length n-1-5, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1-6, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # and so on until the last element in the sequence, which must be greater than or equal to k.\n    # the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m, is equal to the number of possible sequences of length n-1, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    # so we have to find the number of ways to choose one element from all possible elements in n-1 and n and then choose the last element from n+1, n+2, n+3...n+k+1\n    # then we have to find the number of ways to choose 1 element from all possible elements in m and n+1, n+2, n+3...n+k+1\n    # then we have to find the number of ways to choose 1 element from all possible elements in n and n+1, n+2, n+3...n+k+1\n    # the total number of ways is equal to the total number of ways to choose 1 element from all possible elements in n-1 and n and then choose the last element from n+1, n+2, n+3...n+k+1\n    # the total number of ways is equal to the total number of ways to choose 1 element from all possible elements in m and n+1, n+2, n+3...n+k+1\n    # the total number of ways is equal to the total number of ways to choose 1 element from all possible elements in n and n+1, n+2, n+3...n+k+1\n    # and so on\n    # but now we are dealing with sequences of length n+1, n+2, n+3...n+k+1\n    # so we have to find the number of ways to choose one element from all possible elements in n+1 and n+2, n+3...n+k+1\n    # then we have to find the number of ways to choose 1 element from all possible elements in n and n+1, "
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #Initialize the number of possible sequences to 0\n    number_of_possible_sequences = 0 \n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import numpy as np\n    import math\n    arr = []\n    for x in range(2,m+1):\n        if x > 2*math.ceil(x/2):\n            break\n        arr.append(x)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    return list1[:-1] + list2\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #make list2 the new list\n    list1[1:-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list2)!= 0:\n        list1[:-1] = list2\n    return list1\n    \n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:]\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Your code here\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #make a copy of list 1\n    list1 = list1.copy()\n    #get the length of the list\n    length = len(list1)\n    #remove the last element of list 1\n    list1.pop(length-1)\n    #add elements of list 2 to list 1\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==0:\n        return list2\n    else:\n        list1[-1]=list2.pop()\n        return list1\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that takes in a list and returns a new list that has all the elements of the input list reversed.\n    '''\n    if len(list1)==0:\n        return []\n    else:\n        return list1[::-1]\n    \n    \ndef delete_middle_element(list1):\n    '''\n    Write a function that takes in a list and removes the middle element of the list. If the list has less than 2 elements then return an empty list.\n    '''\n    if len(list1)<2:\n        return []\n    else:\n        return list1[:list1.index(list1[len(list1)//2])]+list1[list1.index(list1[len(list1)//2])+1:]\n    \n    \ndef remove_element(list1,number):\n    '''\n    Write a function that takes in a list and a number and returns a new list where all elements of the input list that are equal to the number parameter are removed.\n    '''\n    if len(list1)==0:\n        return []\n    else:\n        if number==list1[0]:\n            return list1[1:]\n        else:\n            return list1\n    \n    \ndef longest_list(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains only the elements that are common between the two lists. If no common elements, then the function should return an empty list.\n    '''\n    if len(list1)==0:\n        return list2\n    else:\n        return list(set(list1)&set(list2))\n    \n    \ndef join_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains all the elements of the first list followed by all the elements of the second list.\n    '''\n    if len(list1)==0:\n        return list2\n    else:\n        return list1+list2\n    \n    \ndef get_element_at(list1,index):\n    '''\n    Write a function that takes in a list and an index and returns the element at the given index of the list. If the index is invalid, return None.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        return list1[index]\n    \n    \ndef add_element_at(list1,element,index):\n    '''\n    Write a function that takes in a list, an element, and an index and returns a new list where the given element is added to the list at the given index. If the index is invalid, then the element is added to the end of the list.\n    '''\n    if len(list1)==0:\n        return [element]\n    else:\n        return list1[0:index]+[element]+list1[index:]\n    \n    \ndef length_list(list1):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        return len(list1)\n    \n    \ndef get_last_element(list1):\n    '''\n    Write a function that takes in a list and returns the last element of the list.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        return list1[-1]\n    \n    \ndef delete_last_element(list1):\n    '''\n    Write a function that takes in a list and deletes the last element of the list. If the list has less than 2 elements then return an empty list.\n    '''\n    if len(list1)<2:\n        return []\n    else:\n        return list1[0:len(list1)-1]\n    \n    \ndef get_nth_element(list1,index):\n    '''\n    Write a function that takes in a list and an index and returns the element at the given index of the list. If the index is invalid, return None.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        return list1[index]\n    \n    \ndef get_frequency(list1,number):\n    '''\n    Write a function that takes in a list and an element and returns the frequency of the given element in the list.\n    '''\n    return list1.count(number)\n    \n    \ndef get_index_of_element(list1,number):\n    '''\n    Write a function that takes in a list and an element and returns the index of the first occurrence of the element in the list. If the element does not appear in the list, then return -1.\n    '''\n    if len(list1)==0:\n        return -1\n    else:\n        return list1.index(number)\n    \n    \ndef get_index_of_last_element(list1,number):\n    '''\n    Write a function that takes in a list and an element and returns the index of the last occurrence of the element in the list. If the element does not appear in the list, then return -1.\n    '''\n    if len(list1)==0:\n        return -1\n    else:\n        return len(list1)-1-list1[::-1].index(number)\n    \n    \ndef get_middle_element(list1):\n    '''\n    Write a function that takes in a list and returns the middle element of the list. If the list has an odd number of elements, then return the middle element. If the list has an even number of elements, then return the average of the middle two elements.\n    '''\n    if len(list1)==0:\n        return None\n    elif len(list1)%2!=0:\n        return list1[len(list1)//2]\n    else:\n        return (list1[len(list1)//2]+list1[len(list1)//2-1])/2\n    \n    \ndef get_product_of_all_elements(list1):\n    '''\n    Write a function that takes in a list and returns the product of all the elements of the list.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        return reduce(lambda x,y:x*y,list1)\n    \n    \ndef get_sum_of_all_elements(list1):\n    '''\n    Write a function that takes in a list and returns the sum of all the elements of the list.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        return reduce(lambda x,y:x+y,list1)\n    \n    \ndef remove_element_at_index(list1,index):\n    '''\n    Write a function that takes in a list and an index and removes the element at the given index of the list. If the index is invalid, then the function should return None.\n    '''\n    if len(list1)==0:\n        return None\n    else:\n        if index<0 or index>len(list1)-1:\n            return None\n        else:\n            return list1[0:index]+list1[index+1:]\n    \n    \ndef insert_element_at(list1,element,index):\n    '''\n    Write a function that takes in a list, an element, and an index and returns a new list where the given element is inserted at the given index of the list. If the index is invalid, then the element should be added to the end of the list.\n    '''\n    if len(list1)==0:\n        return [element]\n    else:\n        return list1[0:index]+[element]+list1[index:]\n    \n    \ndef is_sublist(list1,list2):\n    '''\n    Write a function that takes in two lists and returns True if the list2 is a sublist of the list1, and False otherwise.\n    '''\n    return list2 in list1\n    \n    \ndef get_sublist(list1,index):\n    '''\n    Write a function that takes in a list and an index and returns a sublist of the list that includes all the elements tha"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop(-1)\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if len(str1) > 0:\n        return len(str1)\n    else:\n        return 0\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count+=1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    print(len(str1))\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_chars = 0\n    for ch in str1:\n        total_chars += 1\n    return total_chars\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    str1 = str1.lower()\n    rev_str = str1[::-1]\n    if str1 == rev_str:\n        return True\n    return False\n    \ndef common_char(str1, str2):\n    '''\n    Write a function to find the common characters between two strings.\n    '''\n    set1 = set(str1)\n    set2 = set(str2)\n    common_chars = set1.intersection(set2)\n    return common_chars\n    \ndef unique_char(str1):\n    '''\n    Write a function to find the total number of unique characters in a string.\n    '''\n    unique_chars = set(str1)\n    return len(unique_chars)\n    \ndef count_vowel_consonant(str1):\n    '''\n    Write a function to count the total number of vowels and consonants in a string.\n    '''\n    vowels = set('aeiouAEIOU')\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    count_vowels = 0\n    count_consonants = 0\n    for ch in str1:\n        if ch in vowels:\n            count_vowels += 1\n        elif ch in consonants:\n            count_consonants += 1\n        else:\n            pass\n    return count_vowels, count_consonants\n    \ndef is_pangram(str1):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    str1 = str1.lower()\n    charset = set(str1)\n    if len(charset) == 26:\n        return True\n    else:\n        return False\n        \ndef get_unique_words(str1):\n    '''\n    Write a function to get the unique words from a given sentence.\n    '''\n    str1 = str1.split()\n    unique_words = set(str1)\n    return unique_words\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1) == len(str2):\n        str1 = list(str1)\n        str2 = list(str2)\n        str1.sort()\n        str2.sort()\n        if str1 == str2:\n            return True\n        else:\n            return False\n    else:\n        return False\n        \ndef is_factorial(number):\n    '''\n    Write a function to check whether a number is a factorial or not.\n    '''\n    for i in range(1, number):\n        if i*(i+1) == number:\n            return True\n        else:\n            return False\n            \ndef get_factorial(number):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    if number == 1:\n        return number\n    else:\n        return number * get_factorial(number-1)\n    \ndef get_perfect_number(number):\n    '''\n    Write a function to return the perfect number which is the summation of its factors.\n    '''\n    sum_factors = 0\n    for i in range(1, number):\n        if number % i == 0:\n            sum_factors += i\n    return sum_factors\n    \ndef get_perfect_number_dict(number):\n    '''\n    Write a function to return the perfect number which is the summation of its factors.\n    '''\n    my_dict = {}\n    for i in range(1, number):\n        if number % i == 0:\n            my_dict[i] = i\n    return my_dict\n    \ndef is_prime(number):\n    '''\n    Write a function to check whether a number is a prime or not.\n    '''\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n    \ndef is_prime_dict(number):\n    '''\n    Write a function to check whether a number is a prime or not.\n    '''\n    my_dict = {}\n    for i in range(2, number):\n        if number % i == 0:\n            my_dict[i] = False\n    if False in my_dict.values():\n        return False\n    else:\n        return True\n    \ndef get_prime_factors(number):\n    '''\n    Write a function to get the prime factors of a number.\n    '''\n    my_list = []\n    for i in range(2, number):\n        if number % i == 0:\n            if is_prime(i):\n                my_list.append(i)\n    return my_list\n    \ndef get_prime_factors_dict(number):\n    '''\n    Write a function to get the prime factors of a number.\n    '''\n    my_dict = {}\n    for i in range(2, number):\n        if number % i == 0:\n            if is_prime(i):\n                my_dict[i] = True\n            else:\n                my_dict[i] = False\n    return my_dict\n    \ndef get_prime_factors_lists(number):\n    '''\n    Write a function to get the prime factors of a number.\n    '''\n    my_list = []\n    for i in range(2, number):\n        if number % i == 0:\n            if is_prime(i):\n                my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    d = {}\n    for char in str1:\n        d[char] = d.get(char, 0) + 1\n    return d\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1 == '':\n        return 0\n    return 1+count_charac(str1[1:])\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    cnt = 0\n    for i in str1:\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if not isinstance(str1, str):\n        raise TypeError(\"Invalid string. Please enter a string.\")\n    print(f\"The number of characters in this string is {len(str1)}\")\n    return\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    \n    x = int(math.sqrt(N))\n    while (x * x <= N):\n        x = x + 1\n    return x * x\ndef check_perfect_square(n): \n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    s = int(math.sqrt(n)) \n    return (s*s == n)"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # hint: Use the Babylonian method to find the next perfect square.\n    # N = 7\n    # 1. Find the greatest power of 2 that is less than N\n    # 2. Find the square root of the power\n    # 3. Find the next perfect square using the formula\n    # 4. Return the next perfect square\n    \n    if (N <= 1):\n        return 1\n    \n    # Check if N is a perfect square\n    if ((math.sqrt(N) % 1) == 0):\n        return (math.sqrt(N))\n    \n    # Find the greatest power of 2 that is less than N\n    i = 1\n    while((i * i) <= N):\n        i = i * 2\n    \n    # Find the square root of the power\n    p = i / 2\n    while (p * p) <= N:\n        p = p + 1\n    \n    # Find the next perfect square using the formula\n    return ((p * p) - N)\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if math.ceil(math.sqrt(N))**2 > N:\n        return math.ceil(math.sqrt(N))**2\n    else:\n        return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 2\n    if N < 1:\n        return 1\n    if int(math.sqrt(N)) ** 2 == N:\n        return (int(math.sqrt(N)) + 1) ** 2\n    return (int(math.sqrt(N)) + 1) ** 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(math.sqrt(N) - math.floor(math.sqrt(N)) == 0): \n        return (math.sqrt(N) + 1) * (math.sqrt(N) + 1) \n    else: \n        return (math.floor(math.sqrt(N)) + 1) * (math.floor(math.sqrt(N)) + 1) \ndef next_Perfect_Square_1(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    count = 0\n    while (((N >> count) & 1)!= 1): \n        count += 1\n    return (1 << (count + 1)) \n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N<=0:\n        return -1\n    ans = int(math.sqrt(N))\n    if ans**2 == N:\n        return (ans+1)**2\n    elif ans**2 < N:\n        return (ans+1)**2\n    else:\n        return ans**2\ndef Kth_Smallest_Prime_Number(K):\n    '''\n    Write a function to find the Kth smallest prime number.\n    '''\n    # Initialize the count of the number of primes.\n    count = 0\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # start with the next square greater than N\n    next_square = int(math.sqrt(N)) + 1\n    # now iterate over the squares between the next square and N\n    while True:\n        if (math.sqrt(next_square) == int(math.sqrt(next_square))):\n            return next_square\n        next_square += 1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0: \n        return -1\n    if N == 0: \n        return 1\n    Sqrt = math.sqrt(N) \n    if (Sqrt - math.floor(Sqrt)) == 0: \n        return (Sqrt + 1)**2\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    count = 0\n    while math.sqrt(N) - math.floor(math.sqrt(N))!= 0:\n        count = count + 1\n        N = N + 1\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N > 0:  \n        sq = math.sqrt(N)\n        if sq == int(sq): \n            return (int(sq) + 1)**2 \n        return -1\n    return -1\n  \ndef next_perfect_square(N): \n    '''\n    Write a python functio"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_recursive(arr,0,len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_aux(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = -1*sys.maxsize\n    for i in range(n):\n        temp = arr[i]\n        for j in range(i+1, n):\n            temp += arr[j]\n            for k in range(j+1, n):\n                temp += arr[k]\n                max_sum = max(max_sum, temp)\n                temp -= arr[k]\n            temp -= arr[j]\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr.sort()\n    i, j = 0, len(arr)-1\n    total = 0\n    while (i < j):\n        if (arr[i] < arr[j]):\n            total = max(total, arr[i] + arr[j])\n            i += 1\n        else:\n            total = max(total, arr[i] + arr[j])\n            j -= 1\n    return total\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # create a variable to store the maximum value\n    max = 0\n    # for each value in the array, compare the value to the maximum value so far\n    for i in range(len(arr)): \n        # if the value is greater than the maximum value, replace it as the maximum value\n        if arr[i] > max: \n            max = arr[i]\n    # if the value is less than the maximum value, compare the value to the minimum value so far. If it is less than the minimum, replace the minimum as the new minimum\n    for j in range(i, -1, -1): \n        if arr[j] < max: \n            min = arr[j]\n    # return the sum of the minimum and maximum values\n    return (min + max)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    return max_sum_helper(arr,0,len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    length = len(arr)\n    #base case\n    if length<=2:\n        return sum(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Traverse the array from left to right \n    # Find the maximum element in the array. \n    # Traverse the array again, this time from right to left, and \n    # find the maximum element in the array. \n    # Add the two elements together and return the sum. \n    # A subsequence that can be the start or end of a bitonic sequence \n    # is called a monotonic sequence. \n    # Time complexity = O(n)\n    # Space complexity = O(1)\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here + arr[i], arr[i])\n        max_so_far = max(max_ending_here, max_so_far)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr_len = len(arr)\n    if(arr_len <= 2):\n        return max(sum(arr), sum(arr[::-1]))\n    arr_sum = arr[:]\n    arr_sum.insert(0, 0)\n    arr_sum.append(0)\n    for i in range(1, arr_len+1):\n        arr_sum[i] = max(arr_sum[i-1], arr_sum[i]) + arr[i-1]\n    max_sum = arr[0] + arr[1]\n    for i in range(1, arr_len+1):\n        max_sum = max(max_sum, arr_sum[i] - arr_sum[i-1])\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = [None for x in arr]\n    max_so_far = [None for x in arr]\n    for i in range(len(arr)):\n        max_ending_here[i] = arr[i]\n        for j in range(i):\n            if max_ending_here[j] < arr[i]:\n                max_ending_here[i] = arr[i] + max_ending_here[j]\n    return max_ending_here[-1]\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert number > 0, 'Cannot compute a square root of a negative number.'\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    def is_even(number):\n        return number % 2 == 0\n    \n    # print(is_even(number))\n    \n    x = number\n    y = (number + 1) // 2\n    # print(y)\n    \n    def guess(x, y):\n        # print(x)\n        # print(y)\n        x = x + ((y - x) / (y + x)) * y\n        y = y - ((y - x) / (y + x)) * y\n        return x, y\n    \n    while True:\n        x, y = guess(x, y)\n        # print(x)\n        # print(y)\n        if is_even(y):\n            break\n    \n    return round(x, 3)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = 0\n    last = 1\n    guess = number / 2\n    while abs(last - result) > 0.0001:\n        result = guess\n        last = guess\n        guess = (number / result + result) / 2\n    return result\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number/2\n    while True:\n        y = (x + number/x) / 2\n        if y == x:\n            break\n        x = y\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    result = 0\n    for i in range(number):\n        result = result + ((1/(2 * i + 1)) * ((number/ (2 * i + 1)) - result))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + (number/x)) / 2\n    while abs(y-x) >= 0.001:\n        x = y\n        y = (x + (number/x))/2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    previous_x = 0\n    while x!= previous_x:\n        previous_x = x\n        x = (number / x + x) / 2\n        print(x)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = 1\n    while x > 1:\n        x = (number / x + x) / 2\n        y = (y + x) / 2\n    return y\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # The Babylonian Square root algorithm\n    # x = (x + b/x) / 2\n    # where b = 1.41421...\n    \n    # Initialise the output\n    output = 1\n    \n    # Compute the square root of the number\n    while output!= 0:\n        # Keep looping until the output is exactly equal to the number\n        output = (1 + number / output) / 2\n    \n    # Return the output\n    return output\n    \ndef improve_babylonian_squareroot(number):\n    '''\n    Improve the Babylonian Square root algorithm\n    '''\n    # The Babylonian Square root algorithm\n    # x = (x + b/x) / 2\n    # where b = 1.41421...\n    \n    # Initialise the output\n    output = 1\n    \n    # Compute the square root of the number\n    while output!= 0:\n        # Keep looping until the output is exactly equal to the number\n        output = (number / output + output) / 2\n    \n    # Return the output\n    return output\n    \ndef run_improve_babylonian_squareroot():\n    '''\n    Run the function to compute square roots\n    '''\n    # Compute the square root of various numbers\n    print(\"Improve Babylonian Square root algorithm\")\n    print(\"{:>6} {:>6} {:>6}\".format(\"Input\", \"Output\", \"Improvement\"))\n    for i in range(1, 11):\n        # Compute the square root using the improve method\n        improve_output = improve_babylonian_squareroot(i)\n        \n        # Compute the square root using the normal method\n        output = babylonian_squareroot(i)\n        \n        # Compute the square root using the Babylonian Square root algorithm\n        improve_improve_output = improve_babylonian_squareroot(i)\n        \n        # Display the results\n        print(\"{:>6d} {:>6d} {:>6d}\".format(i, output, improve_improve_output - output))\n    \nif __name__ == \"__main__\":\n    run_improve_babylonian_squareroot("
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Write a function for computing square roots using the babylonian method.\n    # This function should take in a non-negative number as an argument\n    # and return a tuple containing the square root of that number\n    # and the number of steps it took to compute the square root\n    # (hint: n ** 0.5 will compute the square root of n to a relative accuracy of 1e-15)\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n+1): \n        for i in range(n-cl+1): \n            j = i+cl-1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i+1][j-1] + 2\n            else: \n                L[i][j] = max(L[i][j-1], L[i+1][j]) \n    return L[0][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    dp = [[0 for x in range(n)] for y in range(n)] \n    \n    for i in range(n): \n        dp[i][i] = 1\n    \n    for i in range(n - 1): \n        if str[i] == str[i + 1]: \n            dp[i][i + 1] = 2\n        else: \n            dp[i][i + 1] = 1\n    \n    for length in range(2, n): \n        for i in range(n - length): \n            j = i + length \n            if str[i] == str[j] and str[i + 1] == str[j - 1]: \n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else: \n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) \n    return dp[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range( 2, n+1): \n        for i in range(n-cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n    return L[0][n - 1] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for i in range(n + 1)] \n            for i in range(n + 1)] \n    for i in range(1, n + 1): \n        for j in range(1, n + 1): \n            if (str[i - 1] == str[j - 1] and i!= j): \n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else: \n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) \n    return dp[n][n] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[False for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        l[i][i] = True\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(n): \n        L[i][i] = 1\n    for cl in range(2, n + 1): \n        for i in range(n - cl + 1): \n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2: \n                L[i][j] = 2\n            elif str[i] == str[j]: \n                L[i][j] = L[i + 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i][j - 1], L[i + 1][j]); \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    table = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    dp = [[0 for x in range(n)] for y in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    l = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        l[i][i] = 1\n    for i in range(n-1):\n        if str[i] == str[i+1]:\n            l[i][i+1] = 2\n    for substringLen in range(3, n+1):\n        for i in range(n-substringLen+1):\n            j = i + substringLen - 1\n            if str[i] == str[j] and l[i+1][j-1] >= substringLen-2:\n                l[i][j] = l[i+1][j-1] + 2\n            else:\n                l[i][j] = max(l[i][j-1], l[i+1][j])\n    print(l)\n    return l[0][n-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    lps = [[0 for x in range(n)]for y in range(n)]\n    # print(lps)\n    # Following steps build lps[n][n] in bottom up fashion. Note that lps[i][j] \n    # contains length of LCS of X[0..i-1] and Y[0..j-1] \n    for i in range(n): \n        for j in range(n): \n            if (i == 0 or j == 0): \n                lps[i][j] = 0\n            elif (str[i] == str[j]): \n                lps[i][j] = lps[i-1][j-1] + 1\n            else: \n                lps[i][j] = max(lps[i-1][j], lps[i][j-1]) \n      \n    print(lps)\n    return lps[n-1][n-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    a = n - 1\n    # For harmonic sum, we need to have n-1 > 0. So we'll take the absolute value\n    a = abs(a)\n    sum = 0\n    while a!= 0:\n        sum += 1/a\n        a -= 1\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 1\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1 / d for d in range(1, n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (n * (n - 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 - (n - 1))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1/n\n    for i in range(2, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(1, n):\n        total += 1/i\n    return total\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum = sum + 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    def sum_of_odd_factors(n):\n        return sum([i for i in range(1, n+1) if n % i == 0 and i % 2!= 0])\n    sum = 1\n    for i in range(3, n+1, 2):\n        sum += sum_of_odd_factors(i)\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 + sum(1/num for num in range(1, n))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) == 0 or len(array_nums2) == 0:\n        return []\n    # 2 pointers.\n    left = 0\n    right = 0\n    result = []\n    while left < len(array_nums1) and right < len(array_nums2):\n        if array_nums1[left] == array_nums2[right]:\n            result.append(array_nums1[left])\n            left += 1\n            right += 1\n        elif array_nums1[left] < array_nums2[right]:\n            left += 1\n        else:\n            right += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #new_array = []\n    #for item in array_nums1:\n    #    if item in array_nums2 and item not in new_array:\n    #        new_array.append(item)\n    #return new_array\n    return set(array_nums1) & set(array_nums2)\n        \n    \n    \n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    dict_nums = {}\n    output = []\n    for num in array_nums1:\n        if num not in dict_nums:\n            dict_nums[num] = 1\n        else:\n            dict_nums[num] += 1\n    for num in array_nums2:\n        if num in dict_nums and dict_nums[num]>0:\n            output.append(num)\n            dict_nums[num] -= 1\n    return output\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    array_nums1.sort()\n    array_nums2.sort()\n    pointer1 = 0\n    pointer2 = 0\n    while pointer1 < len(array_nums1) and pointer2 < len(array_nums2):\n        if array_nums1[pointer1] == array_nums2[pointer2]:\n            result.append(array_nums1[pointer1])\n            pointer1 += 1\n            pointer2 += 1\n        elif array_nums1[pointer1] < array_nums2[pointer2]:\n            pointer1 += 1\n        else:\n            pointer2 += 1\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in result:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) < len(array_nums2):\n        for i in array_nums1:\n            if i in array_nums2:\n                return i\n    else:\n        for i in array_nums2:\n            if i in array_nums1:\n                return i\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    s1 = set(array_nums1)\n    s2 = set(array_nums2)\n    return list(s1.intersection(s2))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # return set(array_nums1) & set(array_nums2)\n    # return set(array_nums1) - (set(array_nums1) - set(array_nums2))\n    return [i for i in array_nums1 if i in array_nums2]\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    hash_set = set()\n    for num in array_nums1:\n        hash_set.add(num)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    #return len([n for n in tup if n == x])\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in range(len(tup)):\n        if tup[i]==x:\n            count+=1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    x = x.lower()\n    count = 0\n    for i in tup:\n        if i.lower() == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup: \n        if e == x: \n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for t in tup:\n        if t == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # user_list = list(input('Enter list of numbers seperated by a comma: ').split(','))\n    # element = int(input('Enter element you want to insert: '))\n    # output = []\n    # for i in user_list:\n    #     output.append(i)\n    #     output.append(element)\n    # return output\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # list.insert(0,element)\n    # for index,item in enumerate(list):\n    #     list.insert(index,element)\n    # return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # list_1 = []\n    # for i in range(len(list)):\n    #     list_1.append(element)\n    #     list_1.append(list[i])\n    # print(list_1)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0,element)\n    return list\n    \ndef replace_element(list,element):\n    '''\n    Write a function that takes in a list and an element and replaces each element in the list with the element, and returns the resulting list.\n    '''\n    list.append(element)\n    list.insert(0,element)\n    return list\n    \ndef combine_elements(list,element):\n    '''\n    Write a function that takes in a list and an element and combines the element to each item in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    list.extend(element)\n    return list\n    \ndef sort_list(list):\n    '''\n    Write a function that takes in a list and sorts that list, and returns the resulting list.\n    '''\n    list.sort()\n    return list\n    \ndef sort_list_alphabetically(list):\n    '''\n    Write a function that takes in a list and sorts the list in alphabetical order, and returns the resulting list.\n    '''\n    list.sort()\n    return list\n    \ndef sort_list_reverse(list):\n    '''\n    Write a function that takes in a list and sorts the list in reverse order, and returns the resulting list.\n    '''\n    list.sort()\n    return list\n    \ndef sum_list(list):\n    '''\n    Write a function that takes in a list and adds each element in the list, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        total += number\n    return total\n    \ndef sum_list_even(list):\n    '''\n    Write a function that takes in a list and adds each element in the list that is even, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number % 2 == 0:\n            total += number\n    return total\n    \ndef sum_list_odd(list):\n    '''\n    Write a function that takes in a list and adds each element in the list that is odd, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number % 2!= 0:\n            total += number\n    return total\n    \ndef sum_list_greater_than(list,number):\n    '''\n    Write a function that takes in a list and a number and adds each element in the list that is greater than the number, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number > number:\n            total += number\n    return total\n    \ndef sum_list_greater_than_equal_to(list,number):\n    '''\n    Write a function that takes in a list and a number and adds each element in the list that is greater than or equal to the number, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number >= number:\n            total += number\n    return total\n    \ndef sum_list_less_than(list,number):\n    '''\n    Write a function that takes in a list and a number and adds each element in the list that is less than the number, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number < number:\n            total += number\n    return total\n    \ndef sum_list_less_than_equal_to(list,number):\n    '''\n    Write a function that takes in a list and a number and adds each element in the list that is less than or equal to the number, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number <= number:\n            total += number\n    return total\n    \ndef sum_list_multiply(list,number):\n    '''\n    Write a function that takes in a list and a number and adds each element in the list that is a multiple of the number, and returns the resulting list.\n    '''\n    total = 0\n    for number in list:\n        if number % number == 0:\n            total += number\n    return total\n    \ndef multiply_list(list,number):\n    '''\n    Write a function that takes in a list and a number and multiplies each element in the list by the number, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        total *= number\n    return total\n    \ndef multiply_list_even(list):\n    '''\n    Write a function that takes in a list and multiplies each element in the list that is even, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        if number % 2 == 0:\n            total *= number\n    return total\n    \ndef multiply_list_odd(list):\n    '''\n    Write a function that takes in a list and multiplies each element in the list that is odd, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        if number % 2!= 0:\n            total *= number\n    return total\n    \ndef multiply_list_greater_than(list,number):\n    '''\n    Write a function that takes in a list and a number and multiplies each element in the list that is greater than the number, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        if number > number:\n            total *= number\n    return total\n    \ndef multiply_list_greater_than_equal_to(list,number):\n    '''\n    Write a function that takes in a list and a number and multiplies each element in the list that is greater than or equal to the number, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        if number >= number:\n            total *= number\n    return total\n    \ndef multiply_list_less_than(list,number):\n    '''\n    Write a function that takes in a list and a number and multiplies each element in the list that is less than the number, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        if number < number:\n            total *= number\n    return total\n    \ndef multiply_list_less_than_equal_to(list,number):\n    '''\n    Write a function that takes in a list and a number and multiplies each element in the list that is less than or equal to the number, and returns the resulting list.\n    '''\n    total = 1\n    for number in list:\n        if number <= number:\n            total *= number\n    return total\n    \ndef last_element_list(list):\n    '''\n    Write a function that takes in a list and returns the last element in the list.\n    '''\n    last = len(list) - 1\n    return list[last]\n    \ndef reverse_list(list):\n    '''\n    Write a function that takes in a list and reverses the order of the list, and returns the resulting list.\n    '''\n    reverse = []\n    for number in range(len(list) - 1, -1, -1):\n        reverse.append(list[number])\n    return reverse\n    \ndef nth_element_list(list,number):\n    '''\n    Write a function that takes in a list and a number and returns the element in the list that is the number of the list.\n    '''\n    total = len(list) - 1\n    return list[number]\n    \ndef nth_element_list_2(list,number):\n    '''\n    Write a function that takes in a list and a number and returns the element in the list that is the number of the list.\n    '''\n    return list[number]\n    \ndef is_empty_list(list):\n    '''\n    Write a function that takes in a list and returns True if the list is empty. Otherwise return False.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        return False\n    \ndef concatenate_list(list_one,list_two):\n    '''\n    Write a function that takes in two lists and returns a new list that is the concatenation of the two lists.\n    '''\n    total = list_one + list_two\n    return total\n    \ndef remove_element_list(list,element):\n    '''\n    Write a function that takes in a list an"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for num in list:\n        new_list.append(num)\n        new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return [element]\n    else:\n        return [list[0]] + insert_element(list[1:],element)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list = list[:]\n    list.insert(0,element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real = float(input(\"Please enter the real part of the complex number: \"))\n    imag = float(input(\"Please enter the imaginary part of the complex number: \"))\n    z = complex(real,imag)\n    phase = cmath.phase(z)\n    mag = abs(z)\n    print(\"The complex number in polar coordinates is: \", phase, \", and the magnitude is: \", mag)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for i in numbers:\n        z = complex(i)\n        r = abs(z)\n        theta = cmath.phase(z)\n        polar_coordinates.append((r,theta))\n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('\\nConverting complex numbers to polar coordinates..')\n    for c in numbers:\n        real = c.real\n        imag = c.imag\n        if (real==0):\n            if(imag>0):\n                print(c,'=',cmath.pi,'+',imag,'i')\n            elif(imag<0):\n                print(c,'=',cmath.pi,'-',imag,'i')\n        elif(real>0):\n            if(imag>0):\n                print(c,'=',abs(c),'+',cmath.pi,'+',imag,'i')\n            elif(imag<0):\n                print(c,'=',abs(c),'+',cmath.pi,'-',imag,'i')\n        elif(real<0):\n            if(imag>0):\n                print(c,'=',abs(c),'+',cmath.pi,'-',imag,'i')\n            elif(imag<0):\n                print(c,'=',abs(c),'+',cmath.pi,'+',imag,'i')\n    print('\\nConversion complete.')\n    \ndef calculate_addition(numbers):\n    '''\n    Write a python function to calculate the sum of complex numbers.\n    '''\n    print('\\nSum of complex numbers..')\n    result = numbers[0]\n    for i in range(1,len(numbers)):\n        result+=numbers[i]\n    print(result)\n    print('\\n')\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def polar_convert(complex_num):\n        if isinstance(complex_num, complex):\n            return cmath.polar(complex_num)\n        else:\n            return \"Invalid input\"\n    \n    # print(polar_convert(complex(1,2)))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def cartesian(c):\n        return (c.real, c.imag)\n    return (sum((cmath.polar(complex(numbers[i]))[0] for i in range(len(numbers)))),sum((cmath.polar(complex(numbers[i]))[1] for i in range(len(numbers)))))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    real_part = numbers.real\n    imaginary_part = numbers.imag\n    polar_coordinates = complex(real_part, imaginary_part)\n    return cmath.polar(polar_coordinates)\nprint(convert(complex(1,2)))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        print(\"\\nInput:\",numbers[i])\n        a=str(numbers[i])\n        a=a.split(\"+\")\n        a1=a[0]\n        a2=a[1]\n        a3=a2.split(\"j\")\n        a4=a3[0]\n        a5=a3[1]\n        a6=int(a4)\n        a7=int(a5)\n        result=complex(a6,a7)\n        print(\"\\nOutput:\",result)\n        print(\"\\nPolar coordinates are:\",result.real,result.imag,result.phase)\n        print()\ndef ComplexMultiplication(a,b,c):\n    '''\n    Write a Python function to find the product of three given numbers\n    using the complex numbers and return the result as a tuple.\n    '''\n    result=complex(a,b)\n    result2=complex(a,b)\n    result3=complex(a,b)\n    result=result*result2\n    result2=result2*result3\n    print(result,result2)\n    print(\"\\nThe product of the given three numbers is:\",(result,result2))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"Type the third complex number:\",)\n    c=eval(input())\n    print(\"\\nProduct of the given three numbers:\",(a,b,c))\ndef SumOfTwo(a,b):\n    '''\n    Write a Python function to find the sum of two given numbers\n    and return the result as a tuple.\n    '''\n    result=complex(a,b)\n    result2=complex(a,b)\n    result=result+result2\n    print(\"\\nThe sum of the given two numbers is:\",(result))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"\\nSum of the given two numbers is:\",(a,b))\ndef ComplexDivision(a,b,c):\n    '''\n    Write a Python function to find the quotient of two given numbers\n    and return the result as a tuple.\n    '''\n    result=complex(a,b)\n    result2=complex(a,b)\n    result=result/result2\n    print(\"\\nThe quotient of the given two numbers is:\",(result))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"\\nQuotient of the given two numbers is:\",(a,b))\ndef Power(a,b,c):\n    '''\n    Write a Python function to find the power of a given number\n    and return the result as a tuple.\n    '''\n    result=complex(a,b)\n    result2=complex(a,b)\n    result=result**result2\n    print(\"\\nThe power of the given number is:\",(result))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"\\nPower of the given number is:\",(a,b))\ndef MultiplyByConstant(a,b):\n    '''\n    Write a Python function to multiply a given number by a constant\n    and return the result as a tuple.\n    '''\n    result=complex(a,b)\n    result2=complex(a,b)\n    result=result*3\n    print(\"\\nThe product of the given number by a constant is:\",(result))\n    print(\"\\nType the complex number:\",)\n    a=eval(input())\n    print(\"Type the constant:\",)\n    b=eval(input())\n    print(\"\\nProduct of the given number by a constant is:\",(a,b))\ndef AddByConstant(a,b):\n    '''\n    Write a Python function to add a given number to a constant\n    and return the result as a tuple.\n    '''\n    result=complex(a,b)\n    result2=complex(a,b)\n    result=result+3\n    print(\"\\nThe sum of the given number and a constant is:\",(result))\n    print(\"\\nType the complex number:\",)\n    a=eval(input())\n    print(\"Type the constant:\",)\n    b=eval(input())\n    print(\"\\nSum of the given number and a constant is:\",(a,b))\ndef Negative(a):\n    '''\n    Write a Python function to find the negative of a given number\n    and return the result as a tuple.\n    '''\n    result=complex(a,0)\n    result=result*(-1)\n    print(\"\\nThe negative of the given number is:\",(result))\n    print(\"\\nType the complex number:\",)\n    a=eval(input())\n    print(\"\\nThe negative of the given number is:\",(a))\ndef AbsoluteValue(a):\n    '''\n    Write a Python function to find the absolute value of a given number\n    and return the result as a tuple.\n    '''\n    result=complex(a,0)\n    result=result.real\n    print(\"\\nThe absolute value of the given number is:\",(result))\n    print(\"\\nType the complex number:\",)\n    a=eval(input())\n    print(\"\\nThe absolute value of the given number is:\",(a))\ndef Division(a,b):\n    '''\n    Write a Python function to divide two given numbers and return the result as a tuple.\n    '''\n    result=complex(a,0)\n    result2=complex(a,0)\n    result=result/result2\n    print(\"\\nThe quotient of the given two numbers is:\",(result))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"\\nQuotient of the given two numbers is:\",(a,b))\ndef ComplexAddition(a,b,c):\n    '''\n    Write a Python function to find the sum of two given complex numbers\n    and return the result as a tuple.\n    '''\n    result=complex(a,0)\n    result2=complex(a,0)\n    result=result+result2\n    print(\"\\nThe sum of the given two numbers is:\",(result))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"\\nSum of the given two numbers is:\",(a,b))\ndef ComplexMultiplication2(a,b):\n    '''\n    Write a Python function to find the product of two given complex numbers\n    and return the result as a tuple.\n    '''\n    result=complex(a,0)\n    result2=complex(a,0)\n    result=result*result2\n    print(\"\\nThe product of the given two numbers is:\",(result))\n    print(\"\\nType the first complex number:\",)\n    a=eval(input())\n    print(\"Type the second complex number:\",)\n    b=eval(input())\n    print(\"\\nProduct of the given two numbers is:\",(a,b))\ndef ConstantMultiplication(a,b):\n    '''\n    Write a Python function to multiply a given complex number by a constant\n    and return the result as a tuple.\n    '''\n    result=complex(a,0)\n    result2=complex(a,0)\n    result=result*3\n    print(\"\\nThe product of the given number by a constant is:\",(result))\n    print(\"\\nType the complex number:\",)\n    a=eval(input())\n    print(\"Type the constant:\",)\n    b=eval(input())\n    print(\"\\nProduct of the given number by a constant is:\",(a,b))\ndef ConstantAddition(a,b):\n    '''\n    Write a Python function to ad"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers, str):\n        numbers = complex(numbers)\n    if isinstance(numbers, complex):\n        return cmath.polar(numbers)\n    else:\n        return 'Input is not complex number'\nprint(convert(complex(5,6)))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a=complex(numbers[0],numbers[1])\n    b=complex(numbers[2],numbers[3])\n    p=math.sqrt(a*a+b*b)\n    t=math.atan2(b,a)\n    return [p,t]\ndef complex_to_polar(complex_numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c=complex(complex_numbers[0],complex_numbers[1])\n    p=math.sqrt(c.real**2+c.imag**2)\n    t=math.atan2(c.imag,c.real)\n    return [p,t]\ndef convert_list(numbers):\n    '''\n    Write a python function to convert a list of complex numbers to polar coordinates.\n    '''\n    p=[]\n    t=[]\n    for i in numbers:\n        r=math.sqrt(i.real**2+i.imag**2)\n        t.append(math.atan2(i.imag,i.real))\n        p.append(r)\n    return [p,t]\ndef convert_list_complex(numbers):\n    '''\n    Write a python function to convert a list of complex numbers to polar coordinates.\n    '''\n    p=[]\n    t=[]\n    for i in numbers:\n        r=math.sqrt(i.real**2+i.imag**2)\n        t.append(math.atan2(i.imag,i.real))\n        p.append(r)\n    return [p,t]\ndef sum_complex(a,b):\n    '''\n    Write a python function to sum two complex numbers.\n    '''\n    c=complex(a[0],a[1])\n    d=complex(b[0],b[1])\n    e=complex(c.real+d.real,c.imag+d.imag)\n    return e\ndef complex_sum_list(numbers):\n    '''\n    Write a python function to sum a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real+d.real,c.imag+d.imag)\n    return e\ndef complex_sum_list_complex(numbers):\n    '''\n    Write a python function to sum a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real+d.real,c.imag+d.imag)\n    return e\ndef mul_complex(a,b):\n    '''\n    Write a python function to multiply two complex numbers.\n    '''\n    c=complex(a[0],a[1])\n    d=complex(b[0],b[1])\n    e=complex(c.real*d.real-c.imag*d.imag,c.real*d.imag+c.imag*d.real)\n    return e\ndef complex_mul_list(numbers):\n    '''\n    Write a python function to multiply a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real*d.real-c.imag*d.imag,c.real*d.imag+c.imag*d.real)\n    return e\ndef complex_mul_list_complex(numbers):\n    '''\n    Write a python function to multiply a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real*d.real-c.imag*d.imag,c.real*d.imag+c.imag*d.real)\n    return e\ndef complex_div_complex(a,b):\n    '''\n    Write a python function to divide two complex numbers.\n    '''\n    c=complex(a[0],a[1])\n    d=complex(b[0],b[1])\n    e=complex(c.real/d.real,c.imag/d.imag)\n    return e\ndef complex_div_complex_list(numbers):\n    '''\n    Write a python function to divide a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real/d.real,c.imag/d.imag)\n    return e\ndef complex_div_complex_list_complex(numbers):\n    '''\n    Write a python function to divide a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real/d.real,c.imag/d.imag)\n    return e\ndef complex_mul_complex_list(numbers):\n    '''\n    Write a python function to multiply a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real*d.real-c.imag*d.imag,c.real*d.imag+c.imag*d.real)\n    return e\ndef complex_mul_complex_list_complex(numbers):\n    '''\n    Write a python function to multiply a list of complex numbers.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real*d.real-c.imag*d.imag,c.real*d.imag+c.imag*d.real)\n    return e\ndef complex_pow_complex(a,b):\n    '''\n    Write a python function to calculate b to the power of a.\n    '''\n    c=complex(a[0],a[1])\n    d=complex(b[0],b[1])\n    e=complex(c.real**d.real-c.imag**d.imag,c.real**d.imag+c.imag**d.real)\n    return e\ndef complex_pow_complex_list(numbers):\n    '''\n    Write a python function to calculate b to the power of a.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real**d.real-c.imag**d.imag,c.real**d.imag+c.imag**d.real)\n    return e\ndef complex_pow_complex_list_complex(numbers):\n    '''\n    Write a python function to calculate b to the power of a.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex(numbers[1][0],numbers[1][1])\n    e=complex(c.real**d.real-c.imag**d.imag,c.real**d.imag+c.imag**d.real)\n    return e\ndef complex_conj_complex(a):\n    '''\n    Write a python function to calculate the complex conjugate of a.\n    '''\n    c=complex(a[0],a[1])\n    d=complex(c.real,c.imag*-1)\n    return d\ndef complex_conj_complex_list(numbers):\n    '''\n    Write a python function to calculate the complex conjugate of a.\n    '''\n    c=complex(numbers[0][0],numbers[0][1])\n    d=complex"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates=[]\n    for i in numbers:\n        x=complex(i)\n        polar_coordinates.append(cmath.polar(x))\n    return(polar_coordinates)\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i,int)])\nprint(count_integer([1,2,3,4,1.0]))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    counter = 0\n    for x in list1:\n        if type(x) == int:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\nlist1 = [1,2,3,4,5]\nprint(count_integer(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([i for i in list1 if isinstance(i, int)])\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\nlist1 = [10, 20, 30, 40, 50, 'Python', 'Java', 'PHP']\nprint(\"Number of integers in list:\")\nprint(count_integer(list1))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: isinstance(x, int), list1)))\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return list1.count(int)\n    \nlist1=[]\nn=int(input(\"Enter the range of the list:\"))\nfor i in range(n):\n    a=int(input(\"Enter the values:\"))\n    list1.append(a)\nprint(\"List is:\",list1)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # create a combination of l of length n\n    comb = combinations_with_replacement(l, n)\n    # print(type(comb))\n    # for c in comb:\n    #     print(c)\n    # return comb\n    return [x for x in comb]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        raise ValueError(\"List is too short\")\n    if n < 1:\n        raise ValueError(\"Invalid number of combinations\")\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combo = combinations_with_replacement(l, n)\n    result = [combination for combination in combo]\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # if n == 0: return []\n    # if len(l) == 0: return []\n    # return [element + (n - 1) for element in l] + combinations_colors(l[1:], n - 1)\n    # if n == 0: return []\n    # if len(l) == 0: return []\n    # if len(l) == n: return [tuple(l)]\n    # return [tuple(l[0:i]) + (n - 1) for i in range(1, len(l) + 1)] + combinations_colors(l[1:], n - 1)\n    if n == 0: return []\n    if len(l) == 0: return []\n    if len(l) == n: return [tuple(l)]\n    # return [tuple(l[0:i]) + (n - 1) for i in range(1, len(l) + 1)] + combinations_colors(l[1:], n - 1)\n    # return [tuple(l[0:i]) + (n - 1) for i in range(1, len(l) + 1)]\n    return [tuple(l[0:i]) + (n - 1) for i in range(1, len(l) + 1)] + combinations_colors(l[1:], n - 1)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l.sort()\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    res = []\n    for i in list(comb):\n        res.append(tuple(sorted(i)))\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [list(x) for x in combinations_with_replacement(l, n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [tuple(s) for s in combinations_with_replacement(l,n)]\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = l.copy()\n    l.sort()\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        a = list(combinations_with_replacement(l, i+1))\n        for j in range(len(a)):\n            result.append(tuple(a[j]))\n    return result\nprint(combinations_colors([1,2,3,4], 2))\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    primes = [2]\n    i = 3\n    #sqrt(n)\n    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188\n    # https://stackoverflow.com/questions/19189779/sieve-of-eratosthenes-in-python\n    # using Sieve of Eratosthenes\n    sieve = [True] * (n+1)\n    for p in primes:\n        for i in range(p*p, n+1, p):\n            sieve[i] = False\n    return len([i for i in range(3, n+1, 2) if sieve[i] == True])\n    # using the Sieve of Eratosthenes\n    # for i in range(3, n+1, 2):\n    #     if sieve[i] == True:\n    #         primes.append(i)\n    #         for j in range(i*i, n+1, i):\n    #             sieve[j] = False\n    # return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Time complexity = O(n)\n    # Space complexity = O(n)\n    def isPrime(n):\n        if n == 1:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_Prime(n):\n        if n == 2:\n            return True\n        if n % 2 == 0 or n <= 1:\n            return False\n        sqr = int(n**0.5) + 1\n        for divisor in range(3, sqr, 2):\n            if n % divisor == 0:\n                return False\n        return True\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n    \n    #initialize count to 0\n    count = 0\n    \n    for i in range(2,n+1):\n        if(is_prime(i)):\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    prime_nums = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            prime_nums.append(i)\n    return len(prime_nums)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    num_list = list(range(1, n))\n    i = 2\n    prime_list = []\n    while i < n:\n        if i in num_list:\n            prime_list.append(i)\n            num_list = [num for num in num_list if num % i!= 0]\n            i += 1\n        else:\n            i += 1\n    return len(prime_list)\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(1, n+1):\n        if check_prime(num):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    if n < 2:\n        return 0\n    else:\n        for i in range(2,n+1):\n            if is_Prime(i) == True:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    else:\n        num_primes = 0\n        for i in range(2,n):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                num_primes += 1\n        return num_primes\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    def is_Prime(n):\n        if n < 2:\n            return False\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a,b = b,a\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a = a + b\n    b = a - b\n    a = a - b\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) >= len(test_tup2):\n        return max(test_tup1, test_tup2)\n    else:\n        return max(test_tup1, test_tup2)\n    \n    "
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    #return test_tup1 if sum(test_tup1) > sum(test_tup2) else test_tup2\n    return test_tup1 if len(test_tup1) > len(test_tup2) else test_tup2\n    #return (test_tup1, test_tup2)[sum(test_tup1) > sum(test_tup2)]\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_list1 = []\n    max_list2 = []\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    return (max1, max2)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0] * test_tup2[0], test_tup1[1] * test_tup2[1])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # raise NotImplementedError\n    return tuple([max(i, j) for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if test_tup1[0] > test_tup2[0] else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    max_list = []\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    list_tup1, list_tup2 = list(test_tup1), list(test_tup2)\n    if len(list_tup1) < len(list_tup2):\n        list_tup1, list_tup2 = list_tup2, list_tup1\n    list_tup1.sort(reverse = True)\n    for i in range(len(list_tup2)):\n        list_tup1[i] += list_tup2[i]\n    return tuple(list_tup1)\n    \nprint(maximize_elements(tuple1, tuple2))\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1[0] * test_tup2[1], test_tup1[1] * test_tup2[0])\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # a = (n**2 + 1) % (2**(n-1))\n    # b = n\n    # for j in range(n):\n    #     if a * (2*j-1) % (2**j) == b:\n    #         return 2*j-1\n    #     a = a * (2*j+1) % (2**(j+1))\n    #     b = b * (2*j+1) % (2**(j+1))\n    # return 2**j + 1\n    return 2**n + 1 - 2**(n-1)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def newman_prime_aux(n, p):\n        if n <= 1:\n            return p\n        else:\n            x = p + 1\n            while (prime(x) == False):\n                x += 1\n            return newman_prime_aux(n - 1, x)\n    return newman_prime_aux(n, 2)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    assert n > 0, 'n must be a positive integer'\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n=int(n)\n    primes=[]\n    prime=[2,3]\n    for num in range(5,10000000,2):\n        prime.append(num)\n    for prime_num in prime:\n        if prime_num!=2 and prime_num%2==0:\n            continue\n        for multiples in range(prime_num**2,n+1,prime_num*2):\n            if multiples in prime:\n                continue\n            prime.append(multiples)\n    return prime[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    import math\n    # Step 1. Take the input n and calculate the square root.\n    # Step 2. Find all the odd numbers between 1 and square root.\n    # Step 3. Remove the multiples of 2.\n    # Step 4. Remove the multiples of 3.\n    # Step 5. Remove the multiples of 5.\n    # Step 6. Remove the multiples of 7.\n    # Step 7. Remove the multiples of 11.\n    # Step 8. Remove the multiples of 13.\n    # Step 9. Check if the number is a prime number or not.\n    for i in range(1, n):\n        if math.sqrt(i).is_integer():\n            if i % 2 == 1 and i % 3!= 0 and i % 5!= 0 and i % 7!= 0 and i % 11!= 0 and i % 13!= 0:\n                print(i)\n        else:\n            pass\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 313\n    prime = 1\n    i = 1\n    while i < n:\n        prime = next_prime(prime)\n        i += 1\n    return prime\n    \ndef next_prime(p):\n    '''\n    Find the next prime after a given prime.\n    '''\n    if p <= 1:\n        raise ValueError(\"p must be a positive integer\")\n    if p == 2:\n        return 3\n    if p % 2 == 0:\n        p += 1\n    else:\n        p += 2\n    while not is_prime(p):\n        p += 2\n    return p\n    \ndef is_prime(p):\n    '''\n    Returns True if p is prime and False otherwise.\n    '''\n    if p <= 1:\n        raise ValueError(\"p must be a positive integer\")\n    if p <= 3:\n        return p > 1\n    if p % 2 == 0 or p % 3 == 0:\n        return False\n    i = 5\n    while i * i <= p:\n        if p % i == 0 or p % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n    \nif __name__ == \"__main__\":\n    '''\n    Entry point for the script\n    '''\n    print(newman_prime(10001))"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1: return 0\n    elif n < 2: return 2\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    newman_prime_list = [2,3]\n    while len(newman_prime_list) < n:\n        p = newman_prime_list[-1]\n        if all(p % d!= 0 for d in range(3, int(p**0.5)+1, 2)):\n            newman_prime_list.append(p)\n    return newman_prime_list[n-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    return newman_shanks_williams(n, 2)"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    \n    def factorial(n):\n        '''\n        Write a function to calculate the factorial of a positive integer.\n        '''\n        fact = 1\n        for i in range(1,n+1):\n            fact = fact*i\n        return fact\n    \n    def is_prime(n):\n        '''\n        Write a function to check whether a number is a prime.\n        '''\n        if n<2:\n            return False\n        elif n == 2:\n            return True\n        else:\n            for i in range(2,n):\n                if n%i == 0:\n                    return False\n            return True\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        #recap\n        # result = (num1//num2, num1%num2)\n        # num1//num2 = int(num1/num2)\n        # num1%num2 = int(num1%num2)\n        # test_tup1 = (5,3)\n        # test_tup2 = (2,6)\n        # print(division_elements(test_tup1,test_tup2))\n        # returned tuple should be: (2,2)\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # print('test_tup1: ', test_tup1)\n    # print('test_tup2: ', test_tup2)\n    # for i in range(len(test_tup1)):\n    #     if (test_tup1[i] == 0 or test_tup2[i] == 0):\n    #         return 0\n    #     else:\n    #         test_tup1[i] = test_tup1[i] / test_tup2[i]\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(element1/element2 for element1, element2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return(tuple(map(lambda x,y: x/y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([test_tup1[i]/test_tup2[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([i / j for i,j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = ()\n    for x, y in zip(test_tup1, test_tup2):\n        new_tup += (x / y,)\n    return new_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # validate input and assign to variables\n    test_tup1, test_tup2 = validate_input(test_tup1, test_tup2)\n    # return result of division\n    return tuple(test_tup1[i] / test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) == L:\n        return list1[:L], list1[L:]\n    else:\n        return None\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # write your function here\n    return ([list1[0:L]], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1_copy = list1.copy()\n    x = len(list1_copy)//2\n    first_list = list1_copy[:x]\n    second_list = list1_copy[x:]\n    return (first_list, second_list)\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a list of the list1 with length of L\n    # set a variable total_length to the length of the list1\n    # split the list1 into two parts with the length of L\n    # return the result\n    return (list1[0:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    l = len(list1)\n    if l < L:\n        return None\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1)//2\n    if half < L:\n        return list1[:L], list1[L:]\n    return list1[:half], list1[half:L+half]\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Your code here\n    if len(list1) <= L:\n        return [list1]\n    else:\n        sublist1 = list1[:L]\n        sublist2 = list1[L:]\n        return [sublist1,sublist2]\n    "
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #code starts here\n    l = L\n    half = int(len(list1) / 2)\n    first_list = list1[0:l]\n    second_list = list1[l:len(list1)]\n    return first_list, second_list\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #list1 = [10, 20, 30, 40, 50, 60, 70, 80]\n    #L = 4\n    #L = len(list1)//2\n    #print(list1[0:L], list1[L:])\n    #print(list1[0:4], list1[4:8])\n    return list1[0:L], list1[L:]\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 10.5)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Determine if the dog's age is positive.\n    if h_age > 0:\n        # Determine if the dog's age is an integer.\n        if h_age % 1 == 0:\n            return h_age * 7\n        else:\n            return (int(h_age * 7) + 1)\n    else:\n        return 0\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if type(h_age) == int:\n        if h_age <= 2:\n            print(f\"The dog's age in dog's years is {h_age * 10.5}.\")\n        else:\n            print(f\"The dog's age in dog's years is {20 + ((h_age - 2) * 4)}.\")\n    else:\n        print(\"Please input an integer.\")\n    return\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        return \"error\"\n    else:\n        return h_age * 6\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        dog_age = h_age * 10.5\n    else:\n        dog_age = 21 + 4 * (h_age - 2)\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age < 0:\n        print('Age must be positive.')\n    elif h_age == 0:\n        print('Dog age in dog\\'s years is equal to 0.')\n    else:\n        print('Dog age in dog\\'s years is equal to', int(h_age / 7), 'years.')\n    \n    return\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=2:\n        dog_age=h_age*10.5\n    else:\n        dog_age=21+((h_age-2)*4)\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # The dog's age in dog's years is equal to the difference between the current year and the birth year\n    # plus the difference between the current year and the start year, times the dog's age in human years.\n    # h_age = int(input('Enter the dog\\'s age in human years: '))\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # if step < 0:\n    #     return None\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = [S[i:i+step] for i in range(0, len(S), step)]\n    return result\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create a list to store the results\n    result = []\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create a list with step-sized chunks\n    chunks = []\n    for i in range(0, len(S), step):\n        chunks.append(S[i:i+step])\n    return chunks\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    newlist = []\n    S = list(S)\n    for i in range(0, len(S), step):\n        newlist.append(S[i:i+step])\n    return newlist\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split = S[::step]\n    # print(split)\n    # return split\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 1:\n        return S\n    else:\n        # Using list comprehension and slicing method\n        return [S[start:start+step] for start in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    #First I want to make sure the step is an interger\n    try:\n        step = int(step)\n    except ValueError:\n        print('Step must be an interger')\n    #Then I want to make sure the step is not zero\n    if step == 0:\n        print('Step cannot be zero')\n    else:\n        #Then I want to create a list to store the split lists\n        list_split = []\n        #Then I want to loop over the list using enumerate\n        for count, element in enumerate(S):\n            #Then I want to check to see if the index is divisible by step\n            if count % step == 0:\n                #Then I want to append the element of S to list_split\n                list_split.append(element)\n        #Then return list_split\n        return list_split\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int or l < 0:\n        raise ValueError(\"Please enter a positive integer for side length.\")\n    \n    surface = 6 * l ** 2\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def find_surface_area(side):\n        return 6 * side ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = (6*l**2)\n    return surface_area\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l ** 2 * 6\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    print(\"The lateral surface area of the cube is\",l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    else:\n        return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    if type(l)!= int and type(l)!= float:\n        return 'Invalid argument. Enter a valid positive number.'\n    elif l <= 0:\n        return 'Invalid argument. Enter a valid positive number.'\n    else:\n        return f'The lateral surface area of a cube with side length {l} is {l**2*6}.'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (2*l*l)\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    side = int(input(\"Enter the side of the cube: \"))\n    return 6 * side * side\n    \n    \ndef lateralsurface_rectangle(a, b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its width and length.\n    '''\n    from math import sqrt\n    a = int(input(\"Enter the width of the rectangle: \"))\n    b = int(input(\"Enter the length of the rectangle: \"))\n    return 2 * (a + b) * sqrt(a**2 + b**2)\n    \n    \ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given its radius.\n    '''\n    from math import pi\n    r = int(input(\"Enter the radius of the circle: \"))\n    return 2 * pi * r * r\n    \n    \ndef lateralvolume_cube(l):\n    '''\n    Write a function to find the lateral volume of a cube given its side length.\n    '''\n    from math import sqrt\n    side = int(input(\"Enter the side of the cube: \"))\n    return side * side * side\n    \n    \ndef lateralvolume_rectangle(a, b):\n    '''\n    Write a function to find the lateral volume of a rectangle given its width and length.\n    '''\n    from math import sqrt\n    a = int(input(\"Enter the width of the rectangle: \"))\n    b = int(input(\"Enter the length of the rectangle: \"))\n    return a * b * 2\n    \n    \ndef lateralvolume_circle(r):\n    '''\n    Write a function to find the lateral volume of a circle given its radius.\n    '''\n    from math import pi\n    r = int(input(\"Enter the radius of the circle: \"))\n    return pi * r**3\n    \n    \ndef volumefromlateral(a, b, c, d, e, f):\n    '''\n    Write a function to find the volume of a cuboid given the lateral surface area of each of its sides.\n    '''\n    lateral1 = a\n    lateral2 = b\n    lateral3 = c\n    lateral4 = d\n    lateral5 = e\n    lateral6 = f\n    return lateral1 + lateral2 + lateral3 + lateral4 + lateral5 + lateral6\n    \n    \ndef volumefromlateral_cube(l):\n    '''\n    Write a function to find the volume of a cube given the lateral surface area of its lateral faces.\n    '''\n    lateral1 = lateralsurface_cube(l)\n    return lateral1\n    \n    \ndef volumefromlateral_rectangle(a, b):\n    '''\n    Write a function to find the volume of a rectangle given the lateral surface area of its lateral faces.\n    '''\n    lateral1 = lateralsurface_rectangle(a, b)\n    return lateral1\n    \n    \ndef volumefromlateral_circle(r):\n    '''\n    Write a function to find the volume of a circle given the lateral surface area of its lateral faces.\n    '''\n    lateral1 = lateralsurface_circle(r)\n    return lateral1\n    \n    \ndef volumefromlateral_polygon(n, s):\n    '''\n    Write a function to find the volume of a regular polygon given its number of sides and the lateral surface area of its one of its lateral faces.\n    '''\n    from math import tan, pi\n    n = int(input(\"Enter the number of sides of the polygon: \"))\n    s = int(input(\"Enter the lateral surface area of one of its lateral faces: \"))\n    p = n * s / 2\n    b = s / (2 * tan((pi / n) / 2))\n    return p * b\n    \n    \ndef volumefromvolume(a, b, c, d, e, f):\n    '''\n    Write a function to find the volume of a cuboid given the lateral volume of each of its lateral faces.\n    '''\n    lateral1 = a\n    lateral2 = b\n    lateral3 = c\n    lateral4 = d\n    lateral5 = e\n    lateral6 = f\n    return lateral1 + lateral2 + lateral3 + lateral4 + lateral5 + lateral6\n    \n    \ndef volumefromvolume_cube(v):\n    '''\n    Write a function to find the volume of a cube given the lateral volume of its lateral faces.\n    '''\n    lateral1 = lateralvolume_cube(v)\n    return lateral1\n    \n    \ndef volumefromvolume_rectangle(a, b):\n    '''\n    Write a function to find the volume of a rectangle given the lateral volume of its lateral faces.\n    '''\n    lateral1 = lateralvolume_rectangle(a, b)\n    return lateral1\n    \n    \ndef volumefromvolume_circle(r):\n    '''\n    Write a function to find the volume of a circle given the lateral volume of its lateral faces.\n    '''\n    lateral1 = lateralvolume_circle(r)\n    return lateral1\n    \n    \ndef volumefromvolume_polygon(n, s):\n    '''\n    Write a function to find the volume of a regular polygon given its number of sides and the lateral volume of one of its lateral faces.\n    '''\n    from math import tan, pi\n    n = int(input(\"Enter the number of sides of the polygon: \"))\n    s = int(input(\"Enter the lateral volume of one of its lateral faces: \"))\n    p = n * s / 2\n    b = s / (2 * tan((pi / n) / 2))\n    return p * b\n    \n    \ndef volumemass(v, m):\n    '''\n    Write a function to find the volume-to-mass ratio given the volume and mass of a solid object.\n    '''\n    return v / m\n    \n    \ndef massvolumemass(m, v):\n    '''\n    Write a function to find the mass-to-volume ratio given the volume and mass of a solid object.\n    '''\n    return m / v\n    \n    \ndef volume_compaction(v, d):\n    '''\n    Write a function to find the volume after compaction of a cube given its volume and compacation distance.\n    '''\n    from math import sqrt\n    v = int(input(\"Enter the volume of the cube: \"))\n    d = int(input(\"Enter the compaction distance: \"))\n    return (1 + d / sqrt(3)) * v\n    \n    \ndef volumecube_compaction(v):\n    '''\n    Write a function to find the volume after compaction of a cube given its volume.\n    '''\n    from math import sqrt\n    v = int(input(\"Enter the volume of the cube: \"))\n    return (1 + sqrt(3) / 3) * v\n    \n    \ndef volume_string(v, w):\n    '''\n    Write a function to find the volume of a string after compaction given its volume and compacation distance.\n    '''\n    from math import sqrt\n    v = int(input(\"Enter the volume of the string: \"))\n    w = int(input(\"Enter the compaction distance: \"))\n    return (1 + w / sqrt(3)) * v\n    \n    \ndef volumestring_compaction(v):\n    '''\n    Write a function to find the volume after compaction of a string given its volume.\n    '''\n    from math import sqrt\n    v = int(input(\"Enter the volume of the string: \"))\n    return (1 + sqrt(3) / 3) * v\n    \n    \ndef surfacearea_cube(a):\n    '''\n    Write a function to find the surface area of a cube given its side length.\n    '''\n    from math import sqrt\n    a = int(input(\"Enter the side of the cube: \"))\n    return 6 * a**2\n    \n    \ndef surfacearea_rectangle(a, b):\n    '''\n    Write a function to find the surface area of a rectangle given its width and length.\n    '''\n    from math import sqrt\n    a = int(input(\"Enter the width of the rectangle: \"))\n    b = int(input(\"Enter the length of the rectangle: \"))\n    return 2 * (a + b) * s"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if type(n) == int:\n        return sum([i*i for i in range(1,n+1,2)])\n    else:\n        return 'N/A'\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1):\n        if i%2 == 1:\n            s += i**2\n    return s\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i % 2!= 0)\n  \n  \ndef sum_Square(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n*(n+1)**2/4\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    if n < 1:\n        return sum\n    else:\n        for i in range(n):\n            sum += (i+1)**2\n    return sum\n    \nprint(square_Sum(8))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1, 2):\n        result += i * i\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n**3 + 2*n**2 + 3*n + 1\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # n = int(input(\"Enter the number\"))\n    # Sum of squares of first n odd numbers:\n    # n*(n+1)*(2*n+1)/6\n    \n    # sum = (n*(n+1)*(2*n+1)/6)**0.5\n    # return sum\n    # print(n*(n+1)*(2*n+1)/6)\n    sum = (n*(n+1)*(2*n+1)/6)**0.5\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i * i for i in range(1, n+1, 2))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return int(n) * (n + 1) * (2 * n + 1) / 6\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1):\n        total += (i * i)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    def is_prime(n):\n        return n == 2 or n % 2 and all(n % i for i in range(3, int(n ** 0.5) + 1, 2))\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return find_star_num(n-1) * 2 - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0:\n        return 1\n    else:\n        return n * find_star_num(n-1)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    num = 0\n    i = 1\n    while True:\n        num += i\n        if len(str(num)) == n:\n            break\n        i += 1\n    return num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n+1):\n        star_num += i\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return 2 ** n + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n ** 2 + n + 2\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 2 * find_star_num(n-1) - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # base case: if n is 1, return 1\n    # if n is even, return the n//2+1'th star number\n    # if n is odd, return the (n//2+1)'th star number plus the (n//2+1)'th star number plus 1\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return find_star_num(n//2+1)\n    else:\n        return find_star_num(n//2+1) + find_star_num(n//2+1) + 1\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return find_num_from_star_num(n, 1)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    k = ord(k)\n    return k\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= '0' and k <= '9':\n        return ord(k) - ord('0')\n    elif k >= 'a' and k <= 'z':\n        return ord(k) - ord('a') + 10\n    elif k >= 'A' and k <= 'Z':\n        return ord(k) - ord('A') + 36\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str) and len(k) == 1:\n        return ord(k)\n    return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k >= '0' and k <= '9':\n        return ord(k)-48\n    if k >= 'A' and k <= 'Z':\n        return ord(k)-55\n    if k >= 'a' and k <= 'z':\n        return ord(k)-61\n    return -1\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    \n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for num in arr:\n        if num % 2 == 0 and arr.index(num) % 2 == 0:\n            sum += num\n    return sum\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_number = 0\n    even_index = 0\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_number = 0\n    for index in range(len(arr)):\n        if (index % 2 == 0) and (arr[index] % 2 == 0):\n            even_number += arr[index]\n    return even_number\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    \n    total = 0\n    for index,value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            total += value\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for index, value in enumerate(arr):\n        if (index % 2 == 0) and (value % 2 == 0):\n            even_sum = even_sum + value\n        else:\n            pass\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = []\n    for i in range(0,len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_index.append(arr[i])\n    print(\"Sum of Even and Even Indexed numbers of the list: \", sum(even_index))\n    return sum(even_index)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum([item for item in arr if item%2==0 and arr.index(item)%2==0])\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        if(i%2==0):\n            sum=sum+arr[i]\n    print(sum)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index_list = []\n    for index in range(len(arr)):\n        if arr[index] % 2 == 0:\n            even_index_list.append(index)\n    sum_even = 0\n    for even_index in even_index_list:\n        sum_even += arr[even_index]\n    return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_powers = []\n    for i in range(2, n):\n        if i % 2 == 0:\n            even_powers.append(i**5)\n    return sum(even_powers)\n    \neven_Power_Sum(10)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #initialize variables\n    power = 1\n    sum = 0\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum = sum + (i**5)\n        return sum\nprint(even_Power_Sum(100))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(pow(i, 5) % 2 == 0):\n            sum = sum + pow(i,5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # TODO: Implement function\n    result = 0\n    if n>0:\n        i = 0\n        while(i<=n):\n            result+=i**5\n            i+=1\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return sum(map(lambda x: x ** 5, range(n)))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    #defining the function \n    def power(x):\n        '''\n        takes in an integer x and returns x to the fifth power.\n        '''\n        return x ** 5\n    return sum(map(power, range(2, n+1)))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    if n == 0:\n        return Sum\n    for i in range(1,n+1):\n        Sum += i**5\n    return Sum\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i**5\n    return s\nprint(even_Power_Sum(5))\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(len(test_list)):\n        rear.append(test_list[i][1])\n    return rear\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [test_tuple[1] for test_tuple in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    \n    return [element[1] for element in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # Your code here\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [i[1] for i in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    list_of_lists = []\n    for i in test_list:\n        list_of_lists.append(i[1])\n    return list_of_lists\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        res_tup += (test_tup1[i] - test_tup2[i],)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(elem1 - elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = (1, 3, 5)\n    test_tup2 = (2, 4, 6)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1, tup2 = list(test_tup1), list(test_tup2)\n    for i in range(len(tup1)):\n        tup1[i] -= tup2[i]\n    return tuple(tup1)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result += (test_tup1[i] - test_tup2[i],)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    diff = tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n    return(diff)\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return (list(map(lambda x, y: x - y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if type(test_tup1) is tuple and type(test_tup2) is tuple:\n        return tuple(subtract_elements_helper(test_tup1, test_tup2))\n    else:\n        return \"Error: Arguments are not tuples\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    return tuple(test_tup1[i]-test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = tuple()\n    for i, j in zip(test_tup1, test_tup2):\n        new_tup += (i - j, )\n    return new_tup\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    def binomial_coeff(n, k): \n        if (k > n - k): \n            k = n - k \n        result = 1\n        for i in range(0, k): \n            result = result * (n - i) \n            result = result // (i + 1) \n        return result \n    if n < 0: \n        return -1\n    summ = 0\n    for i in range(0, n + 1, 2): \n        coeff = binomial_coeff(n, i) \n        summ = summ + coeff \n    return summ \n    \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 2\n    else: \n        return 2 * even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2) \n  \ndef even_binomial_Coeff_Sum_List( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return [0]\n    elif (n == 1): \n        return [2]\n    else: \n        list = [2, 2 * even_binomial_Coeff_Sum_List(n - 1) + even_binomial_Coeff_Sum_List(n - 2)]\n        return list\n  \ndef even_binomial_Coeff_Sum_Series( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 2\n    else: \n        return 2 * even_binomial_Coeff_Sum_Series(n - 1) + even_binomial_Coeff_Sum_Series(n - 2) \n  \ndef even_binomial_Coeff_Sum_Matrix( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return [[0]]\n    elif (n == 1): \n        return [[2]]\n    else: \n        list = [[2], [2, 2 * even_binomial_Coeff_Sum_Matrix(n - 1) + even_binomial_Coeff_Sum_Matrix(n - 2)]]\n        return list\n  \ndef even_binomial_Coeff_Sum_Tensor( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 2\n    else: \n        return 2 * even_binomial_Coeff_Sum_Tensor(n - 1) + even_binomial_Coeff_Sum_Tensor(n - 2) \n  \ndef fibonacci_list_to_fibonacci_series( list): \n    '''\n    Write a python function that takes in a list and finds the fibonacci number at the index.\n    '''\n    if (len(list) == 0): \n        return 0\n    elif (len(list) == 1): \n        return list[0]\n    else: \n        return list[0] + fibonacci_list_to_fibonacci_series(list[1:])\n    \ndef fibonacci_list_to_fibonacci_series_Series( list): \n    '''\n    Write a python function that takes in a list and finds the fibonacci number at the index.\n    '''\n    if (len(list) == 0): \n        return 0\n    elif (len(list) == 1): \n        return list[0]\n    else: \n        return list[0] + fibonacci_list_to_fibonacci_series_Series(list[1:])\n    \ndef fibonacci_series_to_fibonacci_list( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of fibonacci series.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return fibonacci_series_to_fibonacci_list(n - 1) + fibonacci_series_to_fibonacci_list(n - 2) \n    \ndef fibonacci_series_to_fibonacci_list_Series( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of fibonacci series.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return fibonacci_series_to_fibonacci_list_Series(n - 1) + fibonacci_series_to_fibonacci_list_Series(n - 2) \n    \ndef fibonacci_series_to_fibonacci_list_Matrix( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of fibonacci series.\n    '''\n    if (n == 0): \n        return [[0]]\n    elif (n == 1): \n        return [[1]]\n    else: \n        list = [[0], [1]]\n        for i in range(1, n): \n            list.append([list[i][0] + list[i][1], list[i][0]])\n        return list\n    \ndef fibonacci_series_to_fibonacci_list_Tensor( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of fibonacci series.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return fibonacci_series_to_fibonacci_list_Tensor(n - 1) + fibonacci_series_to_fibonacci_list_Tensor(n - 2) \n  \ndef fibonacci_series_to_fibonacci_list_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of fibonacci series.\n    '''\n    if (n == 0): \n        return 0\n    elif (n == 1): \n        return 1\n    else: \n        return fibonacci_series_to_fibonacci_list_Sum(n - 1) + fibonacci_series_to_fibonacci_list_Sum(n - 2) \n    \ndef fibonacci_list_to_fibonacci_list_Sum( list): \n    '''\n    Write a python function that takes in a list and finds the fibonacci number at the index.\n    '''\n    if (len(list) == 0): \n        return 0\n    elif (len(list) == 1): \n        return list[0]\n    else: \n        return list[0] + fibonacci_list_to_fibonacci_list_Sum(list[1:])\n    \ndef fibonacci_list_to_fibonacci_list_Sum_Series( list): \n    '''\n    Write a python function that takes in a list and finds the fibonacci number at the index.\n    '''\n    if (len(list) == 0): \n        return 0\n    elif (len(list) == 1): \n        return list[0]\n    else: \n        return list[0] + fibonacci_list_to_fibonacci_list_Sum_Series(list[1:])\n    \ndef fibonacci_list_to_fibonacci_list_Sum_Matrix( list): \n    '''\n    Write a python function that takes in a list and finds the fibonacci number at the index.\n    '''\n    if (len(list) == 0): \n        return 0\n    elif (len(list) == 1): \n        return list[0]\n    else: \n        list = [[0], [1]]\n        for i in range(1, len(list)): \n            list.append([list[i][0] + list[i][1], list[i][0]])\n        return list\n    \ndef fibonacci_list_to_fibonacci_list_Sum_Tensor( list): \n    '''\n    Write a python function that takes in a list and finds the fibonacci number at the index.\n    '''\n    if (len(list) == 0): \n    "
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n < 0):\n        return 0\n    if (n == 0):\n        return 1\n    return (((n)*(even_binomial_Coeff_Sum(n-2) + 2*even_binomial_Coeff_Sum(n-4))) + even_binomial_Coeff_Sum(n-6))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    binomial_coeff = [0 for i in range(n+1)]  \n    binomial_coeff[0] = 1\n    binomial_coeff[1] = 1\n    for i in range(2,n+1):  \n        binomial_coeff[i] = binomial_coeff[i-1] + binomial_coeff[i-2]\n        if(binomial_coeff[i] > 100):\n            break\n    return(binomial_coeff)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    a = 0\n    for i in range(n, -1, -2):\n        a = a + (n-i) * (2*i + 1) * (i+1)\n    return a\ndef binomial_coefficient( n, k): \n    '''\n    Write a python function that takes in a positive integer n and a positive integer k and finds the binomial coefficient C(n, k)\n    '''\n    if n == k:\n        return 1\n    if k > n:\n        return 0\n    if n - k > k:\n        return binomial_coefficient(n, n - k)\n    a = 1\n    for i in range(1, k + 1):\n        a = a * (n - k + i) // i\n    return a\ndef binomial_coefficient_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients less than or equal to n.\n    '''\n    a = 0\n    for i in range(n, -1, -1):\n        a = a + binomial_coefficient(n, i)\n    return a\ndef power_sum_of_squares( n):\n    '''\n    Write a python function that takes in a positive integer n and returns the sum of the squares of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + (i**2)\n    return a\ndef sum_of_binomial_coefficients( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all binomial coefficients less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + binomial_coefficient(n, i)\n    return a\ndef even_binomial_coefficient_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all even index binomial coefficients less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            a = a + binomial_coefficient(n, i)\n    return a\ndef power_sum_of_squares_sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + (i**2)\n    b = 0\n    for i in range(n+1):\n        b = b + i\n    return a + b*b\ndef power_sum_of_squares_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + (i**2)\n    b = 0\n    for i in range(1, n+1):\n        b = b + i\n    return a + b*b\ndef sum_of_power_sum_of_squares_sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    b = 0\n    for i in range(1, n+1):\n        b = b + i\n    c = 0\n    for i in range(1, n+1):\n        c = c + (i**2)\n    return a + b*b - c\ndef sum_of_squares( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    return a\ndef sum_of_squares_sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + (i**2)\n    return a\ndef sum_of_squares_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    b = 0\n    for i in range(1, n+1):\n        b = b + (i**2)\n    return a + b\ndef sum_of_powers( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    return a\ndef sum_of_powers_sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + (i**2)\n    return a\ndef sum_of_powers_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    b = 0\n    for i in range(1, n+1):\n        b = b + (i**2)\n    return a + b\ndef sum_of_powers_sum_sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    b = 0\n    for i in range(1, n+1):\n        b = b + (i**2)\n    return a + b\ndef sum_of_powers_sum_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + i\n    b = 0\n    for i in range(1, n+1):\n        b = b + i\n    c = 0\n    for i in range(1, n+1):\n        c = c + (i**2)\n    return a + b + c\ndef even_binomial_coefficient_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all even index binomial coefficients less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        if i%2 == 0:\n            a = a + binomial_coefficient(n, i)\n    return a\ndef power_sum_of_squares_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the squares of all positive integers less than or equal to n.\n    '''\n    a = 0\n    for i in range(n+1):\n        a = a + (i**2)\n    b = 0\n    for i in range(1, n+1):\n        b = b + i\n    return a + b*b\ndef sum_of_powers_sum_sum_alternate( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of all positive integers less than or equal to n.\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    res = 0\n    for i in range(n + 1): \n        res += math.factorial(i) / (math.factorial(2) * math.factorial(i - 2)) \n    return int(res) \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    res = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            res += math.comb(n, i)\n    return res \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n == 1):\n        return 2\n    if (n == 2):\n        return 5\n    s = 0\n    for i in range(0, n+1, 2):\n        s += ((math.factorial(n) // (math.factorial(i) * math.factorial(n-i))) * (2 ** i))\n    return s \n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # The first two terms are 1 and 2, so add them together\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return even_binomial_Coeff_Sum(n - 2) + even_binomial_Coeff_Sum(n - 1)\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += binomialCoeff(n, i)\n    return sum\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159265359*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.14\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*r*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    volume=math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    #volume = pi * (r**2) * h\n    volume = (pi * (r**2)) * h\n    return volume\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {k: v for (k, v) in dict.items() if v >= n}\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res={}\n    for k,v in dict.items():\n        if v>=n:\n            res[k]=v\n    return res\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result={}\n    for i in dict:\n        if dict[i]>=n:\n            result[i]=dict[i]\n    return result\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return { key:val for key,val in dict.items() if val >= n }\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_new = {}\n    for k, v in dict.items():\n        if v >= n:\n            dict_new[k] = v\n    return dict_new\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filter_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            filter_dict[key] = value\n    return filter_dict\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for t in test_tup:\n        if t.count(test_tup[0]) > count:\n            count = t.count(test_tup[0])\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.index(6)\n    # test_tup.index(6)\n    # return 6\n    \n    # num_of_elem_before_index = 0\n    # for i in test_tup:\n    #     if i == 6:\n    #         return num_of_elem_before_index\n    #     else:\n    #         num_of_elem_before_index += 1\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num = 0\n    for x in test_tup:\n        if num == 0:\n            num = x\n        else:\n            if num == x:\n                break\n            num += 1\n    return num\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    counter = 0\n    for i in test_tup:\n        if i == 'tuple':\n            break\n        else:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    #Code Here\n    lst=[]\n    lst_tup=[]\n    for i in test_tup:\n        lst_tup.append(i)\n    lst.append(lst_tup)\n    temp = []\n    for i in lst:\n        for j in i:\n            if j not in temp:\n                temp.append(j)\n    #print(len(temp))\n    return len(temp)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not test_tup:\n        return 0\n    count = 0\n    while test_tup:\n        count += 1\n        if count == len(test_tup):\n            return count\n        else:\n            test_tup = test_tup[1:]\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_tuple = []\n    for i in test_tup:\n        if type(i) == tuple:\n            first_tuple.append(i[0])\n        else:\n            first_tuple.append(i)\n    return len(set(first_tuple))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        count = 1\n        for j in range(len(test_tup)-i):\n            if test_tup[j] == test_tup[j+i]:\n                count += 1\n            else:\n                break\n        print(count)\ncount_first_elements(('a','b', 'c', 'a', 'b', 'c', 'a', 'c', 'b'))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    sum = 0\n    for elem in test_tup:\n        if type(elem) is tuple:\n            for el in elem:\n                sum += 1\n        else:\n            sum += 1\n    return sum\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    x = (n-1)//10\n    y = (n-1)%10\n    z = 10*x+y\n    return z\n    \ndef main():\n    n = input('Enter n: ')\n    n = int(n)\n    print(is_num_decagonal(n))\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(10*n-1)//9\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = int(n)\n    return int(n * (9*n - n + 1) / 2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return int(n*(9*n - 1)/2)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (int(n * (3 * n - 1) / 2))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    import numpy as np\n    n = np.array(n)\n    return sum(np.arange(1,11) * (10 ** np.arange(0, n.size)))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth_decimal = 0\n    for i in range(1, n+1):\n        nth_decimal += i * 10 - i\n    return nth_decimal\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (1 + (1 + 24 * n)**0.5) / 6\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n*(10*n-1))/2\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nth_dec = 0\n    for i in range(1, n+1):\n        nth_dec += i\n        if is_pentagonal(nth_dec) and is_hexagonal(nth_dec):\n            return nth_dec\n    return -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    position = 0\n    found = False\n    while position < len(dlist) and not found:\n        if dlist[position] == item:\n            found = True\n        else:\n            position = position + 1\n    return (found, position)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    pos = -1\n    for index, element in enumerate(dlist):\n        if element == item:\n            found = True\n            pos = index\n            break\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    list_len = len(dlist)\n    for i in range(0, list_len):\n        if dlist[i] == item:\n            return True, i\n    return False\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return (True, pos)\n    else:\n        return (False, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    n = len(dlist)\n    i = 0\n    while i < n:\n        if dlist[i] == item:\n            return True, i\n        i += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            pos = i\n            break\n    return (pos >= 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return (True, index)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    # return len(set(test_list)) == len(test_list)\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #if len(test_list)==len(set(test_list)):\n    #    return False\n    #else:\n    #    return True\n    return len(test_list)==len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        for y in test_list:\n            if x == y:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    s = set(test_list)\n    if len(s) == len(test_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    flag = False\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        flag = True\n    return flag\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    new_list = test_list.sort()\n    for i in range(len(test_list)):\n        if i+1 < len(test_list):\n            if test_list[i] == test_list[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                print(test_list[i])\n                return False\n    return True\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [n1-n2 for (n1,n2) in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    length=len(nums1) if len(nums1)<len(nums2) else len(nums2)\n    for i in range(length):\n        nums1[i]-=nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] - nums2[i]\n    return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]-nums2[i])\n    return res\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #list comprehension\n    #[expression for item in list if condition]\n    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1) > len(nums2):\n        for i in range(len(nums1)-len(nums2)):\n            nums2.append(0)\n    elif len(nums1) < len(nums2):\n        for i in range(len(nums2)-len(nums1)):\n            nums1.append(0)\n    return nums1,nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    for i in nums1:\n        nums2.remove(i)\n    return nums2\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1 = [1,2,3,4,5]\n    nums2 = [1,2,3]\n    \n    if len(nums1) == len(nums2):\n        sub = []\n        for i in range(len(nums1)):\n            sub.append(nums1[i] - nums2[i])\n        return sub\n    else:\n        print('The length of the lists do not match')\n    \n    \ndef inter_list(nums1,nums2):\n    '''\n    Write a function that accepts two lists and returns the intersection of the lists as a new list.\n    '''\n    nums1 = [1,2,3,4,5]\n    nums2 = [3,4,5]\n    inter = []\n    \n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            if nums1[i] in nums2:\n                inter.append(nums1[i])\n    \n        return inter\n    else:\n        print('The length of the lists do not match')\n        \n    \ndef unique_list(nums):\n    '''\n    Write a function that accepts a list and returns a new list that contains only the unique elements from the original list.\n    '''\n    nums = [1,1,2,2,3,3]\n    \n    unique = []\n    for i in nums:\n        if i not in unique:\n            unique.append(i)\n    return unique\n    \n    \n    \ndef multiply_list(nums):\n    '''\n    Write a function that accepts a list and returns a new list that is a multiplication of the original list.\n    '''\n    nums = [1,2,3,4,5]\n    multiply = []\n    for i in nums:\n        multiply.append(i * i)\n    return multiply\n    \n    \n    \ndef del_elm(nums, ind):\n    '''\n    Write a function that accepts a list and returns the list with the element at the specified index removed.\n    '''\n    nums = [1,2,3,4,5,6]\n    ind = 4\n    del nums[ind]\n    return nums\n    \n    \n    \ndef max_min_list(nums):\n    '''\n    Write a function that accepts a list and returns the list with all duplicates removed.\n    '''\n    nums = [1,2,3,4,5,5,6,7,8,9,10]\n    max_nums = []\n    min_nums = []\n    for i in nums:\n        if i not in max_nums:\n            max_nums.append(i)\n            \n    for j in max_nums:\n        if j not in min_nums:\n            min_nums.append(j)\n    return min_nums\n    \n    \n    \ndef mod_list(nums):\n    '''\n    Write a function that accepts a list of integers and returns a list of the first element and the last element of the original list.\n    '''\n    nums = [1,2,3,4,5]\n    \n    return [nums[0], nums[-1]]\n    \n    \n    \ndef del_list(nums):\n    '''\n    Write a function that accepts a list of numbers and returns a list with all the even numbers removed.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    \n    new_nums = []\n    \n    for i in nums:\n        if i % 2!= 0:\n            new_nums.append(i)\n    return new_nums\n    \n    \n    \ndef del_sub(nums):\n    '''\n    Write a function that accepts a list of numbers and returns a list with all the values that are greater than 5 removed.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    new_nums = []\n    \n    for i in nums:\n        if i >= 5:\n            new_nums.append(i)\n    return new_nums\n    \n    \n    \ndef sum_list(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the sum of all the values in the list.\n    '''\n    nums = [1,2,3,4,5]\n    sum = 0\n    \n    for i in nums:\n        sum += i\n    return sum\n    \n    \n    \ndef check_list(nums):\n    '''\n    Write a function that accepts a list and returns True if it contains 007 in order.\n    '''\n    nums = [1,2,4,0,0,7,5]\n    \n    if nums[0] == 0 and nums[1] == 0 and nums[2] == 7:\n        return True\n    elif nums[0] == 0 and nums[1] == 7 and nums[2] == 0:\n        return True\n    else:\n        return False\n        \n        \n    \ndef chk_odd_even(nums):\n    '''\n    Write a function that accepts a list of numbers and returns a list of the number of even and odd numbers from the original list.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10,11,12]\n    \n    even = 0\n    odd = 0\n    \n    for i in nums:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    \n    return [even, odd]\n    \n    \n    \ndef shuffle_list(nums):\n    '''\n    Write a function that accepts a list of numbers and returns a list of those numbers in random order.\n    '''\n    import random\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    new_nums = []\n    \n    for i in range(len(nums)):\n        rand_nums = random.randint(0, len(nums)-1)\n        new_nums.append(nums[rand_nums])\n        nums.pop(rand_nums)\n        \n    return new_nums\n    \n    \n    \ndef rev_list(nums):\n    '''\n    Write a function that accepts a list and returns a list with the original list in reverse order.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    \n    new_nums = []\n    \n    for i in range(len(nums)-1, -1, -1):\n        new_nums.append(nums[i])\n        \n    return new_nums\n    \n    \n    \ndef min_num_list(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the minimum value in the list.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    \n    min_num = nums[0]\n    \n    for i in range(len(nums)):\n        if nums[i] < min_num:\n            min_num = nums[i]\n            \n    return min_num\n    \n    \n    \ndef del_last_elm(nums):\n    '''\n    Write a function that accepts a list and returns a list with all the elements except for the last one.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    \n    new_nums = []\n    \n    for i in range(len(nums)-1):\n        new_nums.append(nums[i])\n        \n    return new_nums\n    \n    \n    \ndef max_num_list(nums):\n    '''\n    Write a function that accepts a list of numbers and returns the maximum value in the list.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9,10]\n    \n    max_num = nums[0]\n    \n    for i i"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0] * 10\n    while(n): \n        r = n % 10\n        count[r] += 1\n        n = n // 10\n    for i in range(10): \n        if(count[i] > i): \n            return 0\n    return 1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        if i in ['0','1','2','3','4','5','6','7','8','9']:\n            count += 1\n        elif i in ['1','3','5','7','9']:\n            count += 2\n        elif i in ['2','4','6','8']:\n            count += 3\n        elif i in ['0','1']:\n            count += 4\n        else:\n            return False\n    return True if count <= 9 else False\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    count = {}\n    for i in str_n:\n        if i not in count:\n            count[i] = 0\n        count[i] += 1\n    flag = 0\n    for key in count.keys():\n        if count[key] > int(key):\n            flag = 1\n    if flag == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    t = str(n)\n    for i in range(10):\n        if t.count(str(i)) > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp=str(n)\n    arr=[0]*10\n    for i in temp:\n        arr[int(i)]+=1\n    for i in range(len(arr)):\n        if arr[i]>i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    d = dict()\n    for i in n:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    \n    for i in d:\n        if d[i] > i:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    s = str(n) \n    l = [0]*10\n    for i in range(len(s)):\n        l[int(s[i])] += 1\n    for i in range(10): \n        if (l[i] > i): \n            return False\n    return True\n  \ndef validate(n):\n    return len(set([int(d) for d in str(n)])) == 10\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    x = str(n)\n    count = {}\n    for i in x:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in count:\n        if count[i] > int(i):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 0: \n        return False \n    digit_list = list() \n    while n!= 0: \n        digit = n % 10 \n        digit_list.append(digit) \n        n = n // 10 \n    digit_freq = {} \n    for digit in digit_list: \n        if digit not in digit_freq: \n            digit_freq[digit] = 1 \n        else: \n            digit_freq[digit] += 1 \n    for digit in digit_freq: \n        if digit > digit_freq[digit]: \n            return False \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return len(set(str(n))) == len(str(n))\n    \n    \ndef solve(arr):\n    n = len(arr)\n    if n < 4:\n        return 0\n    count = 0\n    # find the number of times each digit appears in the array\n    for i in range(n):\n        count += validate(arr[i])\n    return count\n    \nprint(solve([1,2,3,4,5,6,7,8,9,10]))"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\nprint(check_element([3,3,3],3))\nprint(check_element([3,2,3],3))\nprint(check_element([1,1,1],1))\nprint(check_element([1,2,3],2))\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return False\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list = [1, 1, 1, 1, 1]\n    element = 1\n    count = 0\n    for i in list:\n        if i == element:\n            count += 1\n    if count == 5:\n        return \"All items in the list are equal to \" + str(element)\n    else:\n        return \"All items in the list are not equal to \" + str(element)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    i = 0\n    for item in list:\n        if item!= element:\n            i += 1\n    if i == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(item == element for item in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # define regex pattern\n    pattern = r\"(ab)a(b){2,3}\"\n    # find all matches of regex pattern in text\n    matches = re.findall(pattern, text)\n    # print the matched strings\n    if len(matches) > 0:\n        print(\"The string contains an a followed by two or three bs.\")\n    else:\n        print(\"The string does not contain an a followed by two or three bs.\")\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'ab{2,3}', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.count(\"a\") < 2 and text.count(\"b\") < 3:\n        return False\n    elif text.count(\"a\") < 2:\n        return False\n    elif text.count(\"b\") < 3:\n        return False\n    elif text.count(\"b\") == 0:\n        return False\n    elif text.count(\"b\") > 3:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if not isinstance(text, str) or not text:\n        return False\n    pattern = re.compile(r\"ab{2,3}$\")\n    if pattern.match(text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    x = re.search(r'a.{2,3}b', text)\n    return x!= None\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'a\\bb{2,3}', text):\n        print('found pattern')\n    else:\n        print('did not find pattern')\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(\"ab{2,3}\",text):\n        return True\n    else:\n        return False\nprint(text_match_two_three(\"ab\"))\nprint(text_match_two_three(\"abb\"))\nprint(text_match_two_three(\"abbb\"))\nprint(text_match_two_three(\"abbbb\"))\nprint(text_match_two_three(\"abcb\"))\nprint(text_match_two_three(\"aabbb\"))\nprint(text_match_two_three(\"aabbbb\"))\nprint(text_match_two_three(\"abccb\"))\nprint(text_match_two_three(\"abbbc\"))\nprint(text_match_two_three(\"abbbb\"))\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result = re.match(r\".*ab{2,3}a?\", text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if \"abab\" in text:\n        return \"Matched\"\n    else:\n        return \"Not matched\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.{2,3}b', text))\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #Find the maximum subarray sum in the array that is formed by repeating the array k times\n    #If the maximum subarray sum in the array is less than 0 then return 0\n    #If the maximum subarray sum in the array is equal to 0 then return 0\n    max_sum = 0\n    for i in range(n):\n        sum = 0\n        for j in range(i, i+k):\n            if (j >= n):\n                break\n            sum += a[j]\n            if (sum > max_sum):\n                max_sum = sum\n    return max_sum\n    \ndef max_sum_contiguous_subarray(a, n): \n    '''\n    Write a function to find the maximum sum of the contiguous sub-array in the given array.\n    '''\n    #Find the maximum sum of the contiguous sub-array in the array\n    #If the array is empty then return 0\n    #If the array contains only one element then return the element\n    max_sum = 0\n    i = 0\n    j = 1\n    if n == 1:\n        return a[0]\n    while j < n:\n        sum = 0\n        for k in range(i, j):\n            sum += a[k]\n        if sum > max_sum:\n            max_sum = sum\n        i += 1\n        j += 1\n    return max_sum\n    \ndef min_sum_contiguous_subarray(a, n): \n    '''\n    Write a function to find the minimum sum of the contiguous sub-array in the given array.\n    '''\n    #Find the minimum sum of the contiguous sub-array in the array\n    #If the array is empty then return 0\n    #If the array contains only one element then return the element\n    min_sum = 0\n    i = 0\n    j = 1\n    if n == 1:\n        return a[0]\n    while j < n:\n        sum = 0\n        for k in range(i, j):\n            sum += a[k]\n        if sum < min_sum:\n            min_sum = sum\n        i += 1\n        j += 1\n    return min_sum\n    \ndef min_sum_contiguous_subarray_repeated(a, n, k): \n    '''\n    Write a function to find the minimum sum of the contiguous sub-array in the given array which is formed by repeating the given array k times.\n    '''\n    #Find the minimum sum of the contiguous sub-array in the array that is formed by repeating the array k times\n    #If the array contains only one element then return 0\n    #If the array is empty then return 0\n    if n == 1:\n        return a[0]\n    i = 0\n    j = k\n    if j >= n:\n        return 0\n    sum = 0\n    min_sum = 0\n    while j < n:\n        for m in range(i, j):\n            sum += a[m]\n        if (sum < min_sum):\n            min_sum = sum\n        i += 1\n        j += 1\n    return min_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    ma = [0 for i in range(n+1)]\n    for i in range(1, n+1):\n        ma[i] = max(ma[i-1] + a[i-1], a[i-1])\n    \n    # k = int(n/k)\n    s = [0 for i in range(k)]\n    for i in range(k):\n        s[i] = ma[i*k]\n    # for i in range(k, n+1):\n    #     s[i-k] = max(s[i-k], ma[i])\n    \n    print(ma)\n    print(s)\n    return max(s)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # maxm = 0\n    # for i in range(0, n): \n    #     for j in range(i, n):\n    #         sum = 0\n    #         for t in range(i, j + 1):\n    #             sum += a[t]\n    #         if sum > maxm and sum % k == 0:\n    #             maxm = sum\n    # return maxm \n    \n    # # Following is brute force approach \n    # # It has Time complexity of O(n3) \n    # maxm = 0\n    # for i in range(0, n): \n    #     for j in range(i, n):\n    #         for m in range(i, j): \n    #             sum = 0\n    #             for t in range(i, j):\n    #                 sum += a[t]\n    #             if sum % k == 0 and sum > maxm:\n    #                 maxm = sum\n    # return maxm \n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = sum(a)\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    s = 0\n    smax = 0\n    for i in range(0, n):\n        s = s + a[i]\n        if (s < 0):\n            s = 0\n        if (smax < s):\n            smax = s\n    i = 0\n    while i < n:\n        s = s + a[i]\n        if (s < 0):\n            s = 0\n        if (smax < s):\n            smax = s\n        if (smax < s + k * a[i]):\n            smax = s + k * a[i]\n        i = i + 1\n    return smax\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # k = 2\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n        if sum < 0:\n            sum = 0\n        if sum % k == 0 and sum > max:\n            max = sum\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max = 0\n    sum = 0\n    for i in range(n): \n        sum = sum + a[i]\n        if (sum == 0): \n            sum = 0\n        elif (sum > max): \n            max = sum\n    sum = 0\n    for i in range(n): \n        sum = sum + a[i]\n        a[i] = sum\n        if (sum < 0): \n            sum = 0\n        elif (sum > max): \n            max = sum\n    sum = 0\n    for i in range(n): \n        sum = sum + a[i]\n        a[i] = sum\n        if (sum < 0): \n            sum = 0\n        elif (sum > max): \n            max = sum\n    return max\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return -1\n    \n    # Calculate sum of first and last subarray.\n    for i in range(1,k):\n        if i < n:\n            a[i] = a[i-1] + a[i]\n        else:\n            a[i] = a[i-1]\n    \n    max_sum = a[0]\n    for i in range(1,k*n+1):\n        if i%n == 0:\n            max_sum = max(max_sum, a[i%n-1])\n        else:\n            max_sum = max(max_sum, a[i%n-1]+a[i%n])\n    return max_sum\n    \nif __name__ == \"__main__\":\n    a = [1, 2, -1, 3, 4, -1, 2]\n    n = len(a)\n    k = 3\n    print('The sum of the largest sum of the array formed by repeating the array k times is: ', max_sub_array_sum_repeated(a,n,k))\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    max_sum_s = 0\n    for i in range(n): \n        sum_s = 0\n        for j in range(i, i+k): \n            sum_s += a[j%n] \n        if (sum_s > max_sum_s):\n            max_sum_s = sum_s\n    return (max_sum_s) \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for x in range(0,n,2):\n        sum+=x*x\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #code here\n    sqr_sum = 0\n    for i in range(2,n+1):\n        if i%2==0:\n            sqr_sum+=i**2\n    return sqr_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return (n*(n+1)*(2*n+1))/6\n    \n    \ndef number_of_occurences(string, letter):  \n    '''\n    Write a python function takes in a string and a single character (i.e. a string of length 1). The function returns the number of times the character appears in the string. Use built-in string functions to solve this problem.\n    '''\n    return string.count(letter)\n    \n    \ndef number_of_even_digits(n):  \n    '''\n    Write a python function takes in an integer and returns the number of digits in n that are even.\n    '''\n    return len([num for num in str(n) if int(num)%2 == 0])\n    \n    \ndef string_interleave(str1, str2):  \n    '''\n    Write a python function takes in two strings and returns the string that is the interleaving of the two input strings.\n    '''\n    if (len(str1) == 0) or (len(str2) == 0):\n        return \"\"\n    elif (len(str1) == 1) and (len(str2) == 1):\n        return str1 + str2\n    else:\n        return (str1[0] + string_interleave(str1[1:], str2)) if (int(str1[0])%2 == 0) else (str2[0] + string_interleave(str1, str2[1:]))\n    \n    \ndef string_index(s, c):  \n    '''\n    Write a python function takes in a string and a character (i.e. a string of length 1). The function returns the index of the first occurrence of the character in the string.\n    '''\n    return s.find(c)\n    \n    \ndef string_Replace(s, char1, char2):  \n    '''\n    Write a python function takes in a string and two characters (i.e. a string of length 2). The function returns the string after replacing every occurrence of the first character by the second character.\n    '''\n    return s.replace(char1, char2)\n    \n    \ndef change_String(s):  \n    '''\n    Write a python function takes in a string. The function returns the string after appending \u201cing\u201d to the input string. If the string already ends with \u201cing\u201d then add \u201cly\u201d instead. If the string length is less than three then simply add \u201cing\u201d at the end.\n    '''\n    return \"ing\" if (len(s) >= 3 and (s[-3:] == \"ing\")) else s+(\"ly\" if s[-3:]!= \"ing\" else \"ing\")\n    \n    \ndef string_Reverse(s):  \n    '''\n    Write a python function takes in a string. The function returns the string after reversing the input string.\n    '''\n    return s[::-1]\n    \n    \ndef string_To_Number(s):  \n    '''\n    Write a python function takes in a string. The function returns the number converted from the string according to the following table:\n    '''\n    nums = {\n        \"zero\":0,\n        \"one\":1,\n        \"two\":2,\n        \"three\":3,\n        \"four\":4,\n        \"five\":5,\n        \"six\":6,\n        \"seven\":7,\n        \"eight\":8,\n        \"nine\":9,\n        \"ten\":10,\n        \"eleven\":11,\n        \"twelve\":12,\n        \"thirteen\":13,\n        \"fourteen\":14,\n        \"fifteen\":15,\n        \"sixteen\":16,\n        \"seventeen\":17,\n        \"eighteen\":18,\n        \"nineteen\":19,\n        \"twenty\":20,\n        \"thirty\":30,\n        \"forty\":40,\n        \"fifty\":50,\n        \"sixty\":60,\n        \"seventy\":70,\n        \"eighty\":80,\n        \"ninety\":90,\n        \"hundred\":100,\n        \"thousand\":1000,\n        \"million\":1000000,\n        \"billion\":1000000000,\n        \"trillion\":1000000000000,\n        \"quadrillion\":1000000000000000,\n        \"quintillion\":1000000000000000000,\n        \"sextillion\":1000000000000000000000,\n        \"septillion\":1000000000000000000000000,\n        \"octillion\":1000000000000000000000000000,\n        \"nonillion\":1000000000000000000000000000000,\n        \"decillion\":100000000000000000000000000000000,\n        \"undecillion\":1000000000000000000000000000000000,\n        \"duodecillion\":10000000000000000000000000000000000,\n        \"tredecillion\":10000000000000000000000000000000000000,\n        \"quattuordecillion\":100000000000000000000000000000000000000,\n        \"quindecillion\":1000000000000000000000000000000000000000,\n        \"sexdecillion\":1000000000000000000000000000000000000000000,\n        \"septendecillion\":1000000000000000000000000000000000000000000000,\n        \"octodecillion\":10000000000000000000000000000000000000000000000,\n        \"novemdecillion\":100000000000000000000000000000000000000000000000,\n        \"vigintillion\":10000000000000000000000000000000000000000000000000,\n        \"unvigintillion\":1000000000000000000000000000000000000000000000000,\n        \"duovigintillion\":100000000000000000000000000000000000000000000000000,\n        \"trevigintillion\":100000000000000000000000000000000000000000000000000000,\n        \"quattuorvigintillion\":1000000000000000000000000000000000000000000000000000000,\n        \"quinvigintillion\":10000000000000000000000000000000000000000000000000000000,\n        \"sexvigintillion\":10000000000000000000000000000000000000000000000000000000000,\n        \"septenvigintillion\":10000000000000000000000000000000000000000000000000000000000000,\n        \"octovigintillion\":100000000000000000000000000000000000000000000000000000000000000,\n        \"novemvigintillion\":1000000000000000000000000000000000000000000000000000000000000000,\n        \"trigintillion\":100000000000000000000000000000000000000000000000000000000000000000,\n        \"untrigintillion\":100000000000000000000000000000000000000000000000000000000000000000,\n        \"duotrigintillion\":100000000000000000000000000000000000000000000000000000000000000000,\n        \"tretrigintillion\":10000000000000000000000000000000000000000000000000000000000000000,\n        \"quattuortrigintillion\":1000000000000000000000000000000000000000000000000000000000000000,\n        \"quinvigintillion\":100000000000000000000000000000000000000000000000000000000000000000,\n        \"sexvigintillion\":1000000000000000000000000000000000000000000000000000000000000000000,\n        \"septenvigintillion\":1000000000000000000000000000000000000000000000000000000000000000,\n        \"octovigintillion\":1000000000000000000000000000000000000000000000000000000000000000000,\n        \"novemvigintillion\":100000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quadragintillion\":10000000000000000000000000000000000000000000000000000000000000000,\n        \"unquadragintillion\":1000000000000000000000000000000000000000000000000000000000000000000,\n        \"duoquadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000,\n        \"trequadragintillion\":100000000000000000000000000000000000000000000000000000000000000000000,\n        \"quattuorquadragintillion\":1000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quinquadragintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"sexquadragintillion\":100000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"septenquadragintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"octoquadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"novemquadragintillion\":100000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quadragintillion\":100000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"unquadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"duoququadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"treququadragintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quattuorquadragintillion\":100000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quinququadragintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"sexquadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"septenquadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"octoququadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"novemquadragintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"hectogintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"unhectogintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"duohectogintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"trehectogintillion\":1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quattuorhectogintillion\":100000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"quinhectogintillion\":10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000,\n        \"sexhecto"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    def sum_of_squares(n):\n        sum = 0\n        for i in range(2, n+1, 2):\n            sum = sum + i*i\n        return sum\n    return sum_of_squares(n)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if(i%2==0):\n            sum=sum+(i*i)\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n+1):\n        sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    #start writing your code here\n    s=0\n    for i in range(n):\n        if i%2==0:\n            s=s+i*i\n    return s\n    \n    \n    \n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # method 1\n    # n=int(input())\n    # n=n*(n+1)//2\n    # print(n)\n    # return n\n    # method 2\n    # n=int(input())\n    # return n**2+n+1\n    # method 3\n    # n=int(input())\n    # a=0\n    # for i in range(0,n+1):\n    #     if i%2==0:\n    #         a=a+i**2\n    # print(a)\n    # method 4\n    # n=int(input())\n    # a=0\n    # while n>0:\n    #     a=a+(n%10)**2\n    #     n=n//10\n    # print(a)\n    # method 5\n    # n=int(input())\n    # a=0\n    # while n>0:\n    #     a=a+(n%10)\n    #     n=n//10\n    # a=a**2\n    # print(a)\n    # method 6\n    n=int(input())\n    a=0\n    while n>0:\n        a=a+int(n%10)**2\n        n=n//10\n    print(a)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 0:\n        return \"Enter a positive integer\"\n    else:\n        sum = 0\n        for i in range(0,n):\n            if(i%2 == 0):\n                sum = sum + i*i\n        return sum\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l) > max_length:\n            max_length = len(l)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return len(max(list1, key = len))\n    \nprint(max_length([[1], [2], [1, 2]]))\nprint(max_length([[1], [2, 3, 1], [1, 3], [2]]))\nprint(max_length([[1], [2, 3, 1], [1, 3], [2, 3]]))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list_max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > list_max_len:\n            list_max_len = len(list1[i])\n    return list_max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        if len(l)>max_length:\n            max_length = len(l)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # print(list1)\n    length = []\n    for i in list1:\n        length.append(len(i))\n    return max(length)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length=[]\n    for i in range(len(list1)):\n        length.append(len(list1[i]))\n    return max(length)\n    \nlist1 = [['123', '456', '789'], [12,34,45], ['abc', 'xyz', 'pqr'], [132, 456, 890, 1]]\nprint(max_length(list1))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = item\n    print(max_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    def count_helper(n, k, current_color_index, next_color_index):\n        if n == 0:\n            return 1\n        else:\n            if current_color_index == next_color_index:\n                return count_helper(n-1, k, 0, next_color_index) + count_helper(n-1, k, next_color_index, k-1)\n            else:\n                return count_helper(n-1, k, current_color_index, next_color_index)\n    return count_helper(n, k, 0, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Base cases\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    \n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) * k\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if (n < 0): \n        return 0\n    if (n == 0): \n        return 1\n    if (k < 0): \n        return 0\n    if (k == 0): \n        return 0\n    same = 0\n    diff = 0\n    for i in range(1, n): \n        same = diff  \n        diff = (same + diff) * (k - 1) \n    return (same + diff) % 1000000007\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    memo = [[0 for _ in range(k+1)] for _ in range(n+1)] \n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create a table to store the number of ways for painting the fence\n    dp = [[0 for i in range(k+1)] for j in range(n+1)] \n    # Base case \n    for i in range(1, k+1): \n        dp[0][i] = 1\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for j in range(k+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = 1\n            elif j == 1:\n                dp[i][j] = i\n            else:\n                dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k*k\n    else:\n        ans = []\n        ans.append(0)\n        ans.append(k)\n        ans.append(k*k)\n        for i in range(3, n+1):\n            ans.append(ans[i-1] + k*(k-1))\n        return ans[-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1: \n        return 1\n    count = 0\n    for i in range(1, k + 1): \n        if i == 1 or i == k: \n            count = count + no_of_ways(n - 1, k) \n        else: \n            count = count + no_of_ways(n - 1, k - 1) \n    return count \n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    x = n // m\n    return x\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    remainder=m%n\n    return m//n if remainder==0 else m//n+1\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print((n/m)//1)\n    return\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        assert n > 0 and m > 0\n    except AssertionError:\n        raise AssertionError('both numbers should be positive')\n    quotient = n//m\n    return quotient\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    try:\n        div = n/m\n        print(div)\n    except ZeroDivisionError:\n        print(\"Cannot divide by zero.\")\n    return div\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \nn=int(input(\"Enter the first number:\"))\nm=int(input(\"Enter the second number:\"))\nprint(\"The quotient of\",n,\"and\",m,\"is\",find(n,m))\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # n, m = input().split()\n    # n = int(n)\n    # m = int(m)\n    # print (n//m)\n    # n = 10\n    # m = 3\n    # print(n//m)\n    # print(n/m)\n    \n    # n = 1\n    # m = 1\n    # print(n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    a = n // m\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    b = w**2 + h**2\n    c = w**2 + h**2\n    a = math.sqrt(b)\n    return a\n    \ndef perimeter_of_triangle(w,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    a = w + h\n    b = w + h\n    return a,b\n    \ndef area_of_triangle(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    return 0.5*w*h\n    \ndef area_of_rightangledtriangle(a,b):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    return math.sqrt(a**2 + b**2)\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\n    \ndef area_of_hexagon(s):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    return math.sqrt(3)*(3**0.5*s**2)/2\n    \ndef area_of_regularpolygon(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    return 0.25*n*s**2/(math.tan(math.pi/n))\n    \ndef area_of_triangle(w,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a = w + h\n    b = w + h\n    return 0.5*a*b\n    \ndef area_of_parallelogram(w,h):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    return w*h\n    \ndef area_of_trapezium(w,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    return w*h/2\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    return math.pi*(r**2)\n    \ndef area_of_square(s):\n    '''\n    Write a function to find the area of a square.\n    '''\n    return s*s\n    \ndef area_of_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return w*h\n    \ndef area_of_roundrectangle(r):\n    '''\n    Write a function to find the area of a roundrectangle.\n    '''\n    return 3.14*(r**2)\n    \ndef area_of_roundrectangle(r):\n    '''\n    Write a function to find the area of a roundrectangle.\n    '''\n    return 3.14*(r**2)\n    \ndef area_of_triangularprism(w,h,hg):\n    '''\n    Write a function to find the area of a triangular prism.\n    '''\n    return ((w+h)*hg)/2\n    \ndef area_of_rectangularprism(w,h,hg):\n    '''\n    Write a function to find the area of a rectangular prism.\n    '''\n    return w*h*hg\n    \ndef area_of_cylinder(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n    \ndef area_of_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n    \ndef area_of_sphere(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n    \ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n    \ndef volume_of_cuboid(w,h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_of_cuboid(w,h,d):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return w*h*d\n    \ndef volume_of_box(w,h,d):\n    '''\n    Write a function to find the volume of a box.\n    '''\n    return w*h*d\n    \ndef volume_of_triangle(w,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return (w*h)/2\n    \ndef volume_of_parallelepiped(w,h,d):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return w*h*d\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 1/3*math.pi*(r**2)*h\n    \ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r*r*h\n    \ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n    \ndef volume_of_cube(w):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return w**3\n    \ndef volume_of_cube(w):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return w**3\n    \ndef volume_of_cube(w):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return w**3\n    \ndef volume_of_cube(w):\n    '''\n    Write a functio"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2+h**2)\n    return a\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side_a=w**2+h**2\n    side_c=side_a**0.5\n    return side_c\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of the digits of a given number n.\n    '''\n    return sum(map(int,list(str(n))))\ndef sum_of_squares(n):\n    '''\n    Write a function that returns the sum of the squares of the digits of a given number n.\n    '''\n    return sum([(int(x)**2) for x in list(str(n))])\ndef digit_factorials(n):\n    '''\n    Write a function that returns the product of the factorial of the digits of a given number n.\n    '''\n    return math.prod([math.factorial(int(x)) for x in list(str(n))])\ndef word_info(word):\n    '''\n    Write a function that takes a word as an argument and returns a dictionary with the following key value pairs\n    1. Dictionary key is the word and the value is the number of letters in the word.\n    2. Dictionary key is the word and the value is the number of vowels in the word.\n    3. Dictionary key is the word and the value is the number of consonants in the word.\n    4. Dictionary key is the word and the value is the number of uppercase letters in the word.\n    5. Dictionary key is the word and the value is the number of lowercase letters in the word.\n    '''\n    d={}\n    vowels='aeiou'\n    vowel_count=0\n    consonant_count=0\n    uppercase_count=0\n    lowercase_count=0\n    for x in word:\n        if x in vowels:\n            vowel_count+=1\n        elif x not in vowels:\n            consonant_count+=1\n        if x.isupper():\n            uppercase_count+=1\n        else:\n            lowercase_count+=1\n    d['vowels']=vowel_count\n    d['consonants']=consonant_count\n    d['uppercase_letters']=uppercase_count\n    d['lowercase_letters']=lowercase_count\n    return d\ndef sum_of_numbers_and_squares(n):\n    '''\n    Write a function that returns the sum of the squares of the digits of a given number n, excluding the digits that are the result of \n    summing the squares of the digits of n.\n    '''\n    d=0\n    s=str(n)\n    for x in s:\n        d+=int(x)**2\n    return d\ndef rotations(s):\n    '''\n    Write a function that takes a string and returns a list of all the possible strings that are one letter away from the original string.\n    '''\n    s=list(s)\n    r=[]\n    for x in range(len(s)):\n        s.append(s.pop(0))\n        r.append(''.join(s))\n    return r\ndef palindrome_vowel(s):\n    '''\n    Write a function that returns the vowels of a string if they are present, or an empty string if they are not present.\n    '''\n    vowels='aeiou'\n    s=list(s)\n    vowels_lst=[]\n    for x in s:\n        if x in vowels:\n            vowels_lst.append(x)\n    return ''.join(vowels_lst)\ndef count_vowels(s):\n    '''\n    Write a function that takes a string and returns the number of vowels in the string.\n    '''\n    vowels='aeiou'\n    s=list(s)\n    vowel_count=0\n    for x in s:\n        if x in vowels:\n            vowel_count+=1\n    return vowel_count\ndef factor_counter(n):\n    '''\n    Write a function that takes a number and returns a dictionary with the following key value pairs\n    1. Dictionary key is the square root of the number.\n    2. Dictionary key is the number that the square root is equal to.\n    3. Dictionary key is the product of the factors of the number.\n    '''\n    d={}\n    root=int(n**0.5)\n    for x in range(1,root+1):\n        if n%x==0:\n            d[x]=n/x\n    return d\ndef string_fizzbuzz(n):\n    '''\n    Write a function that takes a number and returns a string according to the following conditions\n    1. If the number is divisible by 3, return \"fizz\".\n    2. If the number is divisible by 5, return \"buzz\".\n    3. If the number is divisible by 3 and 5, return \"fizz buzz\".\n    4. If the number is not divisible by 3 or 5, return the number.\n    '''\n    if n%3==0 and n%5==0:\n        return 'fizz buzz'\n    elif n%3==0:\n        return 'fizz'\n    elif n%5==0:\n        return 'buzz'\n    else:\n        return str(n)\ndef fizzbuzz_numbers(n):\n    '''\n    Write a function that takes a number and returns a list of all the numbers that are divisible by 3 or 5, but not by both.\n    '''\n    return [x for x in range(n+1) if x%3==0 or x%5==0 and x%3!=0 and x%5!=0]\ndef repeat_it(word,n):\n    '''\n    Write a function that takes a word and a number n, and returns the word repeated n times.\n    '''\n    return word*n\ndef pyramid_builder(n):\n    '''\n    Write a function that creates a pyramid of numbers.\n    '''\n    for x in range(1,n+1):\n        print((n-x)*' '+('*'*(x*2-1)))\ndef sum_of_cubes(n):\n    '''\n    Write a function that returns the sum of the cubes of all the natural numbers up to and including the given number n.\n    '''\n    return sum([x**3 for x in range(1,n+1)])\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns True if the number is prime, or False otherwise.\n    '''\n    for x in range(2,int(n**0.5)+1):\n        if n%x==0:\n            return False\n    return True\ndef prime_factors(n):\n    '''\n    Write a function that takes a number and returns a list of the prime factors of the number.\n    '''\n    lst=[]\n    for x in range(2,int(n**0.5)+1):\n        if n%x==0:\n            lst.append(x)\n    return lst\ndef count_transitions(s):\n    '''\n    Write a function that takes a string and returns the number of times there is a transition between two or more vowels.\n    '''\n    vowels='aeiou'\n    transitions=0\n    for x in range(len(s)-1):\n        if s[x] in vowels and s[x+1] in vowels:\n            transitions+=1\n    return transitions\ndef remove_vowels(s):\n    '''\n    Write a function that takes a string and returns a string with all the vowels removed.\n    '''\n    return s.replace('aeiou',' ')\ndef remove_spaces(s):\n    '''\n    Write a function that takes a string and returns a string with all the spaces removed.\n    '''\n    return s.replace(' ','')\ndef replace_with_spaces(s):\n    '''\n    Write a function that takes a string and returns a string with no vowels.\n    '''\n    vowels='aeiou'\n    return s.replace('aeiou',' ')\ndef string_reverser(s):\n    '''\n    Write a function that takes a string and returns a string with all the letters in reversed order.\n    '''\n    s=list(s)\n    s.revers"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    def otherside(a,b):\n        return math.sqrt(b**2+a**2)\n    return otherside(h,w)"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt((w**2)+(h**2)),1)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w == h:\n        side_a = h\n    elif w!= h:\n        side_a = int((math.sqrt(w**2 + h**2))/2)\n    return side_a\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #storing the values of w and h into new variables\n    hypotenuse=math.sqrt(w**2+h**2)\n    third_side=math.sqrt((hypotenuse**2)-(w**2))\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return round(math.sqrt((w**2)+(h**2)),4)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if (w**2+h**2)**(1/2) == w:\n        print('The third side is', w)\n    else:\n        print('The third side is', (w**2+h**2)**(1/2))\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #returns other side of a right angled triangle\n    return math.sqrt(w**2 + h**2)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for num in listval:\n        if num > max:\n            max = num\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 1:\n        return listval[0]\n    elif len(listval) == 0:\n        return \"No values in the list\"\n    else:\n        maxval = listval[0]\n        for val in listval:\n            if val > maxval:\n                maxval = val\n        return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # define a function to find the maximum value in a given heterogeneous list\n    def max_val(listval):\n        # use the built-in max function to return the maximum value from a given list\n        return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    listval.sort()\n    return listval[-1]\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for x in listval:\n        if x > maxval:\n            maxval = x\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    max_val = None\n    if len(listval) > 0:\n        max_val = listval[0]\n        for val in listval:\n            if val > max_val:\n                max_val = val\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in listval:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(2, number//2 + 1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 1\n    for i in range(2, number):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass #delete this line and replace with your code here\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = 0\n    for i in range(1,number):\n        if number % i == 0:\n            div += i\n    return div\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div = []\n    for i in range(1,number+1):\n        if number%i == 0:\n            div.append(i)\n    return sum(div)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_of_divisors = 1\n    for i in range(2, int(number/2)+1):\n        if number%i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([div for div in range(1, number) if number % div == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    total = 0\n    for i in range(1,number+1):\n        if number % i == 0:\n            total += i\n    return total\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #sorting the array to count the inversions\n    arr.sort()\n    #returning the inversions in the array\n    return(len(arr) - numInv(arr))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr)[1]\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr, 0, len(arr)) \n    \n    \ndef mergesort(arr, l, r): \n    '''\n    Write a python function to merge two sorted sublists and count inversions in merging them.\n    '''\n    if l < r: \n        mid = (l + r)//2\n        x = mergesort(arr, l, mid) \n        y = mergesort(arr, mid + 1, r) \n        z = merge(arr, l, mid, r) \n        return x + y + z \n    return 0\n    \ndef merge(arr, l, m, r): \n    '''\n    Write a python function to merge two subarrays and return count of inversions in merging them.\n    '''\n    n1 = m - l + 1\n    n2 = r - m \n    L = [0] * (n1) \n    R = [0] * (n2) \n    for i in range(0, n1): \n        L[i] = arr[l + i] \n    for j in range(0, n2): \n        R[j] = arr[m + 1 + j] \n    i = 0    \n    j = 0\n    inversions = 0\n    k = l    \n    while i < n1 and j < n2: \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n            inversions += n1 - i \n        k += 1\n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n    return inversions \n    \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i] > arr[j]):\n                inversion_count += 1\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergesort(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return mergeSort(arr) \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return merge_sort(arr) \n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    return MergeSort(arr)\n    \ndef MergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        MergeSort(L)\n        MergeSort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n                Inv_Count += (len(L)-i)\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return Inv_Count\n    \narr = [2,4,1,3,5]\nInv_Count = get_Inv_Count(arr)\nprint(Inv_Count)"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for i in list1:\n        if isinstance(i, list):\n            flat_list += flatten_list(i)\n        else:\n            flat_list.append(i)\n    return flat_list\n    "
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for elem in list1:\n        if type(elem) == list:\n            result += flatten_list(elem)\n        else:\n            result.append(elem)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for item in list1:\n        if isinstance(item, list):\n            for i in item:\n                new_list.append(i)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) is list:\n        if len(list1) == 1:\n            list1 = list1[0]\n        else:\n            list1 = flatten_list(list1[1:])\n    return list1\n    \n    \ndef list_of_depths(list1, depth=0):\n    '''\n    Write a function to return a list of the depths of each element in a given nested list.\n    '''\n    if type(list1) is list:\n        if len(list1) == 1:\n            list1 = list1[0]\n        else:\n            depth += 1\n            list1 = list_of_depths(list1[1:], depth)\n    return depth\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for sublist in list1:\n        for item in sublist:\n            flat_list.append(item)\n    return flat_list\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1)!= list:\n        return list1\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return list1[0]\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    if isinstance(list1[0], list):\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    return list1[:1] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    new_list = []\n    for i in list1:\n        if isinstance(i, list):\n            new_list.extend(flatten_list(i))\n        else:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_count = 0\n    max_aggregate = None\n    for t in stdata:\n        aggregate = t[0] * t[1]\n        if aggregate > max_count:\n            max_count = aggregate\n            max_aggregate = t[0]\n    return max_aggregate, max_count\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(map(lambda x:sum(x),stdata))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    lst=stdata.items()\n    stdict={}\n    for item in lst:\n        if item[0] not in stdict.keys():\n            stdict[item[0]]=int(item[1])\n        else:\n            stdict[item[0]]+=int(item[1])\n    return max(stdict.values())\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max = stdata[0]\n    for i in stdata:\n        if i[1] > max[1]:\n            max = i\n    return max\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    sum_list = []\n    for i in range(len(stdata)):\n        sum_list.append((stdata[i][0], stdata[i][1]))\n    sum_list.sort()\n    return sum_list[-1][1]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    def max_aggregate(tuples):\n        '''\n        Write a function to calculate the maximum aggregate from the list of tuples.\n        '''\n        aggregate_data = defaultdict(list)\n        for key, value in tuples:\n            aggregate_data[key].append(value)\n        return max(aggregate_data.values(), key = lambda x: sum(x))\n    print(max_aggregate(stdata))\nmax_aggregate([('A', 100), ('B', 200), ('C', 300), ('D', 400)])\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Declare the variables\n    max_sum = 0\n    # Calculate the maximum aggregate\n    # Get the sum of all the numbers in the list\n    # Iterate through the list of tuples\n    # check if the sum of all the numbers in the tuple is greater than the maximum sum\n    # If it is then the maximum sum is updated\n    for num in stdata:\n        max_sum = max(max_sum,sum(num))\n    return max_sum\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for st in stdata:\n        for tuples in st:\n            for data in tuples:\n                if max_aggregate <= data:\n                    max_aggregate = data\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = []\n    for st in stdata:\n        max_aggregate.append(max(st))\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    max_aggregate = [0] * len(stdata)\n    for i in range(len(stdata)):\n        max_agg += stdata[i]\n        if max_agg < stdata[i]:\n            max_agg = stdata[i]\n            max_aggregate[i] = max_agg\n    return max_agg, max_aggregate\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return int(factorial(2*n) / (factorial(n) * factorial(n)))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return (2*(count_binary_seq(n-1))) + (count_binary_seq(n-2))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [[0 for i in range(2*n+1)] for j in range(n+1)]\n    for i in range(1, 2*n+1): \n        dp[1][i] = 1\n    for i in range(2, n+1): \n        for j in range(1, 2*n+1): \n            dp[i][j] = dp[i][j-1] + dp[i-1][j] \n    return dp[n][n*2] \n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return 2**(2*n)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_helper(n, c): \n        if n == 0: \n            return 1\n        if n == 1: \n            return c\n        return count_binary_seq_helper(n-1, c) + count_binary_seq_helper(n-1, c+1)\n    return count_binary_seq_helper(n, 0)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        if ((i >> n) << n == i):\n            count += 1\n    return count\n    \n    \ndef count_binary_seq_efficient(n):\n    return 2**(2*n)\n    \n    \ndef count_binary_seq_count(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = [0 for i in range(n+1)]\n    count[0] = 1\n    for i in range(1,n+1):\n        count[i] += count[i-1]\n        if (i >= 2):\n            count[i] += count[i-2]\n    return count[n]\n    \n    \ndef count_binary_seq_memoization(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    memo = {}\n    def count_binary_seq(n):\n        if (n in memo):\n            return memo[n]\n        if (n == 0):\n            return 1\n        elif (n == 1):\n            return 2\n        else:\n            memo[n] = count_binary_seq(n-1) + count_binary_seq(n-2)\n            return memo[n]\n    return count_binary_seq(n)\n    \n    \ndef count_binary_seq_tabulation(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    tab = [0 for i in range(n+1)]\n    tab[0] = 1\n    tab[1] = 2\n    for i in range(2,n+1):\n        tab[i] = tab[i-1] + tab[i-2]\n    return tab[n]\n    \n    \ndef count_binary_seq_dp(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    dp = [0 for i in range(n+1)]\n    dp[0] = 1\n    dp[1] = 2\n    for i in range(2,n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[n]\n    \n    \nprint(count_binary_seq_dp(5))\nprint(count_binary_seq_dp(6))\nprint(count_binary_seq_dp(7))\nprint(count_binary_seq_dp(8))\nprint(count_binary_seq_dp(9))\nprint(count_binary_seq_dp(10))\nprint(count_binary_seq_dp(11))\nprint(count_binary_seq_dp(12))\nprint(count_binary_seq_dp(13))\nprint(count_binary_seq_dp(14))\nprint(count_binary_seq_dp(15))\nprint(count_binary_seq_dp(16))\nprint(count_binary_seq_dp(17))\nprint(count_binary_seq_dp(18))\nprint(count_binary_seq_dp(19))\nprint(count_binary_seq_dp(20))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 2**n\n    b = 2**n -1\n    # print(\"a =\",a)\n    # print(\"b =\",b)\n    return b\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_paths(n):\n        return (2 ** n) * (((2 ** n) - 1) // 2)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # '0' and '1' are the only characters to be used. \n    # If sum of n bits is 0, we print \"0\" and if sum of n bits is 1, we print \"1\" \n    \n    # Initialize list, the first element has '0' and the second element has '1'. \n    # The rest of the list will be appended with values returned by the recursive function \n    \n    \n    \n    result = []\n    \n    if n == 0:\n        result = ['0']\n    else:\n        result = ['0','1']\n    \n    return recurse(n-1,result)\n    \ndef recurse(n,arr):\n    \n    if n==0:\n        return []\n    \n    result = []\n    \n    # All even numbers are odd numbers, all odd numbers are even numbers. \n    # So we will iterate through all odd numbers. \n    \n    for num in range(1,2*n,2):\n        \n        first_half_seq = recurse(n-1,arr + [num])\n        \n        # For even numbers, we don't have to consider them. \n        # So we skip them.\n        if num == 2*n-1:\n            continue\n        \n        last_half_seq = recurse(n-1,arr + [num+1])\n        \n        # We will append the last_half_seq after every even num. \n        # This will help us in finding the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. \n        for seq in last_half_seq:\n            \n            if len(seq) == 2*n:\n                result.append(seq)\n                \n            # We append the first_half_seq after every even num. \n            # This will help us in finding the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits. \n            else:\n                result.append(seq + first_half_seq[0])\n                \n            \n    return result\n    \nprint(count_binary_seq(3))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + (max(map(dict_depth, d.values())) if d else 0)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d,dict):\n        return 1 + (max(map(dict_depth,d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def recursive_depth(d, depth=0):\n        for key in d:\n            if isinstance(d[key], dict):\n                depth = recursive_depth(d[key], depth+1)\n            else:\n                return depth\n        return depth\n    return recursive_depth(d)\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) is dict:\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == None:\n        return 0\n    if type(d) == list:\n        return 0\n    if type(d) == dict:\n        d = list(d.values())\n    return 1 + (max(map(dict_depth, d)))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Base case\n    if not d:\n        return 0\n    # Recursive case\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    if isinstance(d, dict):\n        for v in d.values():\n            count += dict_depth(v)\n    else:\n        count = 1\n    return count\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d == None:\n        return 0\n    elif isinstance(d,dict):\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\n    return 0\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(0,ranges,rotations) :\n        arr.append(arr[0])\n        arr.pop(0)\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    \n    for i in range(ranges) :\n        count += rotations[index]\n        index += 1\n        if count > len(arr) :\n            count = count - len(arr)\n    return arr[count]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index not in range(ranges[0],ranges[1]+1):\n        raise Exception(\"Invalid index for rotations\")\n    if rotations == 0 :\n        return arr[index]\n    else :\n        try :\n            return arr[ranges[0]+(index-ranges[0])%len(arr)]\n        except :\n            raise Exception(\"Invalid index for rotations\")\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    #{ \n    #Driver Code Starts\n    #Initial Template for Python 3\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    index=index-rotations\n    if index < 0 :\n        index=len(arr)+index\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    element = None\n    if index < len(ranges) :\n        if index == 0 :\n            element = arr[ranges[index]]\n        else :\n            element = find_Element(arr,ranges,rotations,index-1)\n    else :\n        element = arr[ranges[0]]\n    return element\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for j in range(rotations) :\n        temp = arr[ranges[index][1]]\n        for i in range(ranges[index][1],ranges[index][0]-1,-1) :\n            arr[i] = arr[i-1]\n        arr[ranges[index][0]] = temp\n    return arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    max=ranges[index]\n    min=ranges[index+1]\n    if(index==len(arr)-1) :\n        min=0\n    if(index==0) :\n        max=arr[len(arr)-1]\n    if(index%2==1) :\n        return min+((max-min)*rotations[index])\n    else :\n        return max-((max-min)*rotations[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    left_index = index \n    right_index = index \n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(arr)\n    rotations = rotations%n\n    if(ranges[0]==ranges[1]):\n        return arr[index]\n    else:\n        if(ranges[0]<=index and index<=ranges[1]):\n            return arr[index]\n        elif(rotations==0):\n            return arr[ranges[0] if(index<ranges[0]) else ranges[1]]\n        else:\n            return find_Element(arr,(ranges[0]+ranges[1])//2,rotations,index)\ndef find_Element_linear(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(arr)\n    if(ranges[0]==ranges[1]):\n        return arr[index]\n    else:\n        if(ranges[0]<=index and index<=ranges[1]):\n            return arr[index]\n        else:\n            if(rotations==0):\n                return arr[ranges[0]]\n            else:\n                return find_Element_linear(arr,(ranges[0]+ranges[1])//2,rotations-(ranges[1]-ranges[0])//2,index)\ndef find_Element_rotate_linear(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(arr)\n    if(ranges[0]==ranges[1]):\n        return arr[index]\n    else:\n        if(ranges[0]<=index and index<=ranges[1]):\n            return arr[index]\n        else:\n            if(rotations==0):\n                return arr[ranges[0]]\n            else:\n                return find_Element_rotate_linear(arr,(ranges[0]+ranges[1])//2,rotations-(ranges[1]-ranges[0])//2,index)\ndef find_Element_recursive(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n=len(arr)\n    if(ranges[0]==ranges[1]):\n        return arr[index]\n    else:\n        if(ranges[0]<=index and index<=ranges[1]):\n            return arr[index]\n        else:\n            if(rotations==0):\n                return arr[ranges[0]]\n            else:\n                return find_Element_recursive(arr,(ranges[0]+ranges[1])//2,rotations-(ranges[1]-ranges[0])//2,index)\nif __name__ == \"__main__\": \n    arr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    index = 0\n    print (\"Element at index 0 :\", find_Element(arr,0,2,index)) \n    index = 1\n    print (\"Element at index 1 :\", find_Element(arr,0,2,index)) \n    index = 2\n    print (\"Element at index 2 :\", find_Element(arr,0,2,index)) \n    index = 3\n    print (\"Element at index 3 :\", find_Element(arr,0,2,index)) \n    index = 4\n    print (\"Element at index 4 :\", find_Element(arr,0,2,index)) \n    index = 5\n    print (\"Element at index 5 :\", find_Element(arr,0,2,index)) \n    index = 6\n    print (\"Element at index 6 :\", find_Element(arr,0,2,index)) \n    index = 7\n    print (\"Element at index 7 :\", find_Element(arr,0,2,index)) \n    index = 8\n    print (\"Element at index 8 :\", find_Element(arr,0,2,index)) \n    index = 9\n    print (\"Element at index 9 :\", find_Element(arr,0,2,index)) \n    index = 10\n    print (\"Element at index 10 :\", find_Element(arr,0,2,index)) \n    print (\"\\n\")\n    arr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    index = 0\n    print (\"Element at index 0 :\", find_Element_linear(arr,0,2,index)) \n    index = 1\n    print (\"Element at index 1 :\", find_Element_linear(arr,0,2,index)) \n    index = 2\n    print (\"Element at index 2 :\", find_Element_linear(arr,0,2,index)) \n    index = 3\n    print (\"Element at index 3 :\", find_Element_linear(arr,0,2,index)) \n    index = 4\n    print (\"Element at index 4 :\", find_Element_linear(arr,0,2,index)) \n    index = 5\n    print (\"Element at index 5 :\", find_Element_linear(arr,0,2,index)) \n    index = 6\n    print (\"Element at index 6 :\", find_Element_linear(arr,0,2,index)) \n    index = 7\n    print (\"Element at index 7 :\", find_Element_linear(arr,0,2,index)) \n    index = 8\n    print (\"Element at index 8 :\", find_Element_linear(arr,0,2,index)) \n    index = 9\n    print (\"Element at index 9 :\", find_Element_linear(arr,0,2,index)) \n    index = 10\n    print (\"Element at index 10 :\", find_Element_linear(arr,0,2,index)) \n    print (\"\\n\")\n    arr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    index = 0\n    print (\"Element at index 0 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 1\n    print (\"Element at index 1 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 2\n    print (\"Element at index 2 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 3\n    print (\"Element at index 3 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 4\n    print (\"Element at index 4 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 5\n    print (\"Element at index 5 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 6\n    print (\"Element at index 6 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 7\n    print (\"Element at index 7 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 8\n    print (\"Element at index 8 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 9\n    print (\"Element at index 9 :\", find_Element_rotate_linear(arr,0,2,index)) \n    index = 10\n    print (\"Element at index 10 :\", find_Element_rotate_linear(arr,0,2,index)) \n    print (\"\\n\")\n    arr = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] \n    index = 0\n    print (\"Element at index 0 :\", find_Element_recursive(arr,0,2,index)) \n    index = 1\n    print (\"Element at index 1 :\", find_Element_recursive(arr,0,2,index)) \n    index = 2\n    print (\"Element at index 2 :\", find_Element_recursive(arr,0,2,index)) \n    index = 3\n    print (\"Element at index 3 :\", find_Element_recursive(arr,0,2,index)) \n    index = 4\n    print (\"Element at index 4 :\", find_Element_recursive(arr,0,2,index)) \n    index = 5\n    print (\"Element at index 5 :\", find_Element_recursiv"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    list = []\n    for i in words:\n        if i[0] == 'p':\n            list.append(i)\n    return list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    out_list = [x for x in words if x[0] == 'p']\n    return out_list\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words==[]:\n        return []\n    elif words[0][0]=='p':\n        return [words[0],words[1]]\n    else:\n        return start_withp(words[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    index = 0\n    for i in words:\n        if i[0] == 'p':\n            print(words[index])\n            index = index + 1\n            if index == len(words):\n                break\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [s for s in words if s[0] == 'p' and s[1] == 'p']\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x=[]\n    for word in words:\n        if re.search('^p',word):\n            x.append(word)\n    return x\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # write your code here\n    s1 = ''\n    s2 = ''\n    for word in words:\n        if word.startswith('p'):\n            s1 = word\n            if len(s1) == len(s2):\n                s2 = word\n            else:\n                s2 = word\n    print(s1,s2)\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return [word for word in words if word.startswith('p')]\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k:\n        print(0)\n    if index >= n:\n        print(0)\n    if index == k - 1:\n        print(a[k - 1])\n    \n    if index >= 1:\n        a[index] = max(a[index], a[index - 1] + a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        if k == 0:\n            return a[0]\n        else:\n            return 0\n    max_sum = 0\n    max_sum = max(max_sum, max_sum_increasing_subseq(a, n, index + 1, k))\n    if k == index + 1:\n        max_sum = max(max_sum, a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    if k > index:\n        return -1\n    max_value = -1\n    for i in range(0, index + 1):\n        if i == index:\n            max_value = max(a[i], max_value)\n        else:\n            max_value = max(max_value, max_sum_increasing_subseq(a, n, i, k))\n    return max_value\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == 0:\n        return a[0]\n    if k == 1:\n        return max(a[0], a[1])\n    include = a[index]\n    exclude = max_sum_increasing_subseq(a, n, index - 1, k)\n    return max(include, exclude)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    else:\n        max_sum = max(a[index], max_sum_increasing_subseq(a, n, index + 1, k) + a[index])\n        if k > index:\n            k = k - 1\n        return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global memo, T\n    if k in memo:\n        return memo[k]\n    if k > n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    global max_sum\n    global subseq_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    \n    if index < 0:\n        return -1e9\n    \n    if k > index:\n        return -1e9\n        \n    if k == index:\n        return a[k]\n    \n    return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k])\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k > n:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index+1, k+1), \\\n                    max_sum_increasing_subseq(a, n, index+1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    T = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(k+1):\n            if j == 0:\n                T[i][j] = 0\n            elif i == 0:\n                T[i][j] = -sys.maxsize\n            elif a[i-1] > j:\n                T[i][j] = T[i-1][j]\n            else:\n                T[i][j] = max(T[i-1][j], T[i-1][j-a[i-1]]+a[i-1])\n    print(T[n][k])\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0:m],tuplex[m:m+n])\n    \ndef build_puzzle(m,n):\n    '''\n    Write a function to build a puzzle.\n    '''\n    return [[j for j in range(n*i,n*i+n)] for i in range(m)]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    r = []\n    for i in range(len(tuplex)):\n        if i == 0:\n            r.append((tuplex[i] + 1) % m)\n        else:\n            r.append((tuplex[i] + n) % m)\n    return tuple(r)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list_of_tuples=list(tuplex)\n    list_of_colon=list(zip(*list_of_tuples))\n    new_list=[]\n    for element in list_of_colon:\n        new_list.append(list(element))\n    new_list2=[]\n    for i in range(n):\n        for j in range(m):\n            new_list2.append(new_list[i][j])\n    tuple_result=tuple(new_list2)\n    return tuple_result\n    \ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    list_of_lists=deepcopy(listx)\n    list_of_colon=list(zip(*list_of_lists))\n    new_list=[]\n    for element in list_of_colon:\n        new_list.append(list(element))\n    new_list2=[]\n    for i in range(n):\n        for j in range(m):\n            new_list2.append(new_list[i][j])\n    list_result=deepcopy(new_list2)\n    return list_result\n    \ndef transpose_colon(colon):\n    '''\n    Write a function to transpose a colon.\n    '''\n    list_of_tuples=deepcopy(list(colon))\n    list_of_colon=deepcopy(list(zip(*list_of_tuples)))\n    new_list=[]\n    for element in list_of_colon:\n        new_list.append(list(element))\n    new_list2=[]\n    for i in range(len(new_list[0])):\n        for j in range(len(new_list)):\n            new_list2.append(new_list[j][i])\n    tuple_result=tuple(new_list2)\n    return tuple_result\n    \ndef transpose_colon_tuple(colon):\n    '''\n    Write a function to transpose a colon.\n    '''\n    list_of_tuples=deepcopy(list(colon))\n    list_of_colon=deepcopy(list(zip(*list_of_tuples)))\n    new_list=[]\n    for element in list_of_colon:\n        new_list.append(list(element))\n    new_list2=[]\n    for i in range(len(new_list[0])):\n        for j in range(len(new_list)):\n            new_list2.append(new_list[j][i])\n    tuple_result=tuple(new_list2)\n    return tuple_result\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list_colon=[]\n    for i in range(m):\n        list_colon.append(tuplex[i][:n])\n    return tuple(list_colon)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Write your code here\n    tuplex = deepcopy(tuplex)\n    tuplex = sorted(tuplex,key = lambda x:x[1])\n    if m > n:\n        tuplex = reversed(tuplex)\n    i = 0\n    while i < m - n:\n        tuplex.pop()\n        i += 1\n    return tuple(tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    #step1:\n    colon = []\n    for i in range(len(tuplex)):\n        for j in range(len(tuplex[i])):\n            for k in range(len(tuplex[i][j])):\n                if len(tuplex[i][j][k])>m:\n                    colon.append(tuplex[i][j][k][m])\n    #step2:\n    set_colon = set(colon)\n    colon_tuplex = (list(set_colon))\n    return colon_tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return (tuplex[0]+tuplex[1]*m)+(tuplex[2]*n)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_x = deepcopy(tuplex)\n    tuplex_y = deepcopy(tuplex)\n    for i in range(len(tuplex)):\n        tuplex_x[i] = tuplex[i] + m\n        tuplex_y[i] = tuplex[i] + n\n    tuplex_x = tuple(tuplex_x)\n    tuplex_y = tuple(tuplex_y)\n    return tuplex_x,tuplex_y\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    result = []\n    for i in range(m,n+1):\n        result.append(tuplex[i])\n    return result\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == n:\n        return tuplex[n-1]\n    return (tuplex[m-1],tuplex[n-1])\ndef colon_listx(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == n:\n        return listx[n-1]\n    return [listx[m-1],listx[n-1]]\ndef colon_tuple(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == n:\n        return tuplex[n-1]\n    return (tuplex[m-1],tuplex[n-1])\ndef colon_list(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == n:\n        return listx[n-1]\n    return [listx[m-1],listx[n-1]]\ndef colon_set(setx,m,n):\n    '''\n    Write a function to get a colon of a set.\n    '''\n    if m == 0:\n        return setx[0]\n    if m == n:\n        return setx[n-1]\n    return (setx[m-1],setx[n-1])\ndef colon_dict(dictx,m,n):\n    '''\n    Write a function to get a colon of a dict.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == n:\n        return dictx[n-1]\n    return (dictx[m-1],dictx[n-1])\ndef colon_tuple_n1(tuplex,m):\n    '''\n    Write a function to get a colon of a tuple with n-1 items.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == len(tuplex)-1:\n        return tuplex[len(tuplex)-2]\n    return (tuplex[m-1],tuplex[len(tuplex)-2])\ndef colon_list_n1(listx,m):\n    '''\n    Write a function to get a colon of a list with n-1 items.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == len(listx)-1:\n        return listx[len(listx)-2]\n    return [listx[m-1],listx[len(listx)-2]]\ndef colon_tuple_n2(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple with n-2 items.\n    '''\n    if m == 0:\n        return tuplex[0]\n    if m == 1:\n        return tuplex[1]\n    if m == len(tuplex)-2:\n        return tuplex[len(tuplex)-1]\n    return (tuplex[m-1],tuplex[n-1])\ndef colon_list_n2(listx,m,n):\n    '''\n    Write a function to get a colon of a list with n-2 items.\n    '''\n    if m == 0:\n        return listx[0]\n    if m == 1:\n        return listx[1]\n    if m == len(listx)-2:\n        return listx[len(listx)-1]\n    return [listx[m-1],listx[n-1]]\ndef colon_set_n1(setx,m):\n    '''\n    Write a function to get a colon of a set with n-1 items.\n    '''\n    if m == 0:\n        return setx[0]\n    if m == len(setx)-1:\n        return setx[len(setx)-2]\n    return (setx[m-1],setx[len(setx)-2])\ndef colon_dict_n1(dictx,m):\n    '''\n    Write a function to get a colon of a dict with n-1 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == len(dictx)-1:\n        return dictx[len(dictx)-2]\n    return (dictx[m-1],dictx[len(dictx)-2])\ndef colon_dict_n2(dictx,m,n):\n    '''\n    Write a function to get a colon of a dict with n-2 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1])\ndef colon_dict_n3(dictx,m,n,p):\n    '''\n    Write a function to get a colon of a dict with n-3 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1])\ndef colon_dict_n4(dictx,m,n,p,q):\n    '''\n    Write a function to get a colon of a dict with n-4 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1])\ndef colon_dict_n5(dictx,m,n,p,q,r):\n    '''\n    Write a function to get a colon of a dict with n-5 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1],dictx[r-1])\ndef colon_dict_n6(dictx,m,n,p,q,r,s):\n    '''\n    Write a function to get a colon of a dict with n-6 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1],dictx[r-1],dictx[s-1])\ndef colon_dict_n7(dictx,m,n,p,q,r,s,t):\n    '''\n    Write a function to get a colon of a dict with n-7 items.\n    '''\n    if m == 0:\n        return dictx[0]\n    if m == 1:\n        return dictx[1]\n    if m == len(dictx)-2:\n        return dictx[len(dictx)-1]\n    return (dictx[m-1],dictx[n-1],dictx[p-1],dictx[q-1],dictx[r-1],dictx[s-1],dictx[t-1])\ndef colon_dict_n8(dictx,m,n,p,q,r,s,t,u):\n    '''\n    Write a function to get a colon of a dict with n-"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # set it up to return a list of tuples\n    p = [(nums1[i], nums2[i]) for i in range(N)]\n    # sort the list according to the product\n    p.sort(key=lambda x: x[0] * x[1], reverse=True)\n    # return the first N elements of the list\n    return p[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    l1, l2 = [], []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            l1.append(nums1[i])\n            l2.append(nums2[j])\n    l1.sort()\n    l2.sort()\n    l1.reverse()\n    l2.reverse()\n    return max(l1[N - 1] * l2[N - 1], l1[N] * l2[N])\n    \nif __name__ == '__main__':\n    nums1 = [2,4,5,6,3,5,3,7,8,9,1,9,8,3]\n    nums2 = [2,3,6,7,9,8,2,3,5,7,8,2,3]\n    N = 16\n    print(large_product(nums1, nums2, N))"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    p = []\n    for i in range(N):\n        p.append(nums1[i] * nums2[i])\n    #print(p)\n    p = sorted(p)\n    #print(p)\n    return p[len(p)-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    #Create an array to store the largest product numbers from each list\n    largest_product = [0] * N\n    \n    #Create an array to store the lists used for each product\n    product_lists = [[] for i in range(N)]\n    \n    #Get the index of the largest product\n    for i in range(N):\n        largest_product[i] = nums1[i] * nums2[i]\n        product_lists[i] = [nums1[i], nums2[i]]\n    \n    #Find the largest product number using the largest product array\n    largest_product_num = max(largest_product)\n    \n    #Find the index of the largest product\n    largest_product_index = largest_product.index(largest_product_num)\n    \n    #Return the index and product lists\n    return largest_product_index, product_lists\n    \ndef largest_product(nums1, nums2, N):\n    '''\n    Write a function to find the largest product of the two lists from the specified number of factors.\n    '''\n    #Get the largest product\n    largest_product_index, largest_product_lists = large_product(nums1, nums2, N)\n    \n    #Find the largest product numbers from the specified index\n    product1 = 1\n    product2 = 1\n    for i in range(largest_product_index):\n        product1 *= largest_product_lists[i][0]\n        product2 *= largest_product_lists[i][1]\n    \n    #Return the largest product number\n    return max(product1, product2)\n    \ndef largest_product_third_list(nums1, nums2, nums3, N):\n    '''\n    Write a function to find the largest product of the three lists from the specified number of factors.\n    '''\n    #Create an array to store the largest product numbers from each list\n    largest_product = [0] * N\n    \n    #Create an array to store the lists used for each product\n    product_lists = [[] for i in range(N)]\n    \n    #Get the index of the largest product\n    for i in range(N):\n        largest_product[i] = nums1[i] * nums2[i] * nums3[i]\n        product_lists[i] = [nums1[i], nums2[i], nums3[i]]\n    \n    #Find the largest product number using the largest product array\n    largest_product_num = max(largest_product)\n    \n    #Find the index of the largest product\n    largest_product_index = largest_product.index(largest_product_num)\n    \n    #Return the index and product lists\n    return largest_product_index, product_lists\n    \ndef largest_product_third_list(nums1, nums2, nums3, N):\n    '''\n    Write a function to find the largest product of the three lists from the specified number of factors.\n    '''\n    #Get the largest product\n    largest_product_index, largest_product_lists = largest_product_third_list(nums1, nums2, nums3, N)\n    \n    #Find the largest product numbers from the specified index\n    product1 = 1\n    product2 = 1\n    product3 = 1\n    for i in range(largest_product_index):\n        product1 *= largest_product_lists[i][0]\n        product2 *= largest_product_lists[i][1]\n        product3 *= largest_product_lists[i][2]\n    \n    #Return the largest product number\n    return max(product1, product2, product3)\n    \nif __name__ == '__main__':\n    #Get the inputs\n    num_numbers1 = int(input())\n    num_numbers2 = int(input())\n    \n    #Create the two arrays\n    array1 = input().split()\n    array2 = input().split()\n    \n    #Print the array\n    print(array1)\n    print(array2)\n    \n    #Print the largest product\n    print(largest_product(array1, array2, num_numbers1)"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_prod = 0\n    max_prod_ind = (None, None)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] * nums2[j] > max_prod:\n                max_prod = nums1[i] * nums2[j]\n                max_prod_ind = (nums1[i], nums2[j])\n    print('The largest product is', max_prod, 'found at indices', max_prod_ind)\n    return max_prod\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # We can loop through the lists until we have the N largest values\n    output = []\n    while len(output) < N:\n        # We can compute the products with a generator expression\n        p = [i*j for i in nums1 for j in nums2]\n        # We can sort the products and find the largest\n        largest = max(p)\n        # We can then remove the factors and append the largest to the output\n        output.append(largest)\n        # We can then compute the largest product of the remaining factors\n        # The output should only contain N largest values so we don't need to check for N\n        largest = max(p)\n    return output\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(nlogn + nlogn) time\n    # O(logn) space\n    return sorted(nums1) * sorted(nums2)[-N:]\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        raise Exception('The number of selected numbers must be less than the number of elements in the list')\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort(reverse=True)\n    #print(nums1)\n    #print(nums2)\n    largest = 0\n    for i in range(N):\n        product = nums1[i]*nums2[i]\n        if product > largest:\n            largest = product\n    return largest\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    products = []\n    nums1.sort()\n    nums2.sort()\n    for i in range(0, N):\n        products.append(nums1[i]*nums2[N-1-i])\n    return products\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    elif a == b:\n        return \"Both are equal\"\n    else:\n        return b\n    print(maximum(1,2))\n    print(maximum(9,3))\n    print(maximum(20,30))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return(a)\n    else:\n        return(b)"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if (a>b) else b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if (a<b) else b\n    \ndef capitalize(s):\n    '''\n    Write a python function to capitalize a string.\n    '''\n    return s.upper()\n    \ndef swapcase(s):\n    '''\n    Write a python function to swap the case of a string.\n    '''\n    return s.swapcase()\n    \ndef replace(s,to_be_replaced,replacement):\n    '''\n    Write a python function to replace a string with another string.\n    '''\n    return s.replace(to_be_replaced,replacement)\n    \ndef split(s,delimiter):\n    '''\n    Write a python function to split a string with multiple delimiters.\n    '''\n    return s.split(delimiter)\n    \ndef title(s):\n    '''\n    Write a python function to title case a string.\n    '''\n    return s.title()\n    \ndef strip(s,characters):\n    '''\n    Write a python function to strip a string of characters.\n    '''\n    return s.strip(characters)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(\"The maximum of two numbers is:\",a)\n    else:\n        print(\"The maximum of two numbers is:\",b)\n    \ndef average(a,b):\n    '''\n    Write a python function to calculate the average of two numbers.\n    '''\n    average = (a+b)/2\n    print(\"The average of two numbers is:\",average)\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(\"The minimum of two numbers is:\",a)\n    else:\n        print(\"The minimum of two numbers is:\",b)\n        \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    if a>b:\n        median = (a+b)/2\n    else:\n        median = (a+b)/2\n    print(\"The median of two numbers is:\",median)\n        \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    if a>b:\n        print(\"The mode of two numbers is:\",a)\n    else:\n        print(\"The mode of two numbers is:\",b)\n    \ndef main():\n    '''\n    Write a main function for the python program to call functions\n    '''\n    print(\"Please enter the first number:\")\n    a = int(input())\n    print(\"Please enter the second number:\")\n    b = int(input())\n    print(\"\")\n    print(\"Maximum number:\",maximum(a,b))\n    print(\"Average:\",average(a,b))\n    print(\"Minimum number:\",minimum(a,b))\n    print(\"Median:\",median(a,b))\n    print(\"Mode:\",mode(a,b))\n    \nmain("
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n        \n        \nprint(maximum(2,3))        \n        \n        \ndef even_number(a):\n    '''\n    Write a python function to check whether the number passed is even or not.\n    '''\n    if a % 2 == 0:\n        return True\n    else:\n        return False\n        \nprint(even_number(6))\n        \n        \ndef palindrome(a):\n    '''\n    Write a python function to check whether the given word is palindrome or not.\n    Palindrome: A word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.\n    '''\n    a=a.lower()\n    if a==a[::-1]:\n        return True\n    else:\n        return False\n        \nprint(palindrome('nurses'))\n        \n        \ndef check_even_number(list1):\n    '''\n    Write a python function to check whether the numbers in the list are even or not.\n    The numbers should be in the list and the function should return the count of even numbers.\n    '''\n    c=0\n    for i in list1:\n        if i % 2 == 0:\n            c+=1\n    return c\n        \nprint(check_even_number([2,6,9,10,15,17]))\n        \n        \ndef check_even_number(list1):\n    '''\n    Write a python function to check whether the numbers in the list are even or not.\n    The numbers should be in the list and the function should return the count of even numbers.\n    '''\n    c=0\n    for i in list1:\n        if i % 2 == 0:\n            c+=1\n    return c\n        \nprint(check_even_number([2,6,9,10,15,17]))\n        \n        \ndef smallest_number(list1):\n    '''\n    Write a python function to find the smallest number in the list.\n    '''\n    m=list1[0]\n    for i in list1:\n        if i<m:\n            m=i\n    return m\n        \nprint(smallest_number([2,6,9,10,15,17]))\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from the list.\n    You need to write the function without using the set() function.\n    '''\n    for i in list1:\n        if list1.count(i) > 1:\n            list1.remove(i)\n    return list1\n        \nprint(remove_duplicates([2,6,6,9,10,15,17,2]))\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from the list.\n    You need to write the function without using the set() function.\n    '''\n    for i in list1:\n        if list1.count(i) > 1:\n            list1.remove(i)\n    return list1\n        \nprint(remove_duplicates([2,6,6,9,10,15,17,2]))\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from the list.\n    You need to write the function without using the set() function.\n    '''\n    for i in list1:\n        if list1.count(i) > 1:\n            list1.remove(i)\n    return list1\n        \nprint(remove_duplicates([2,6,6,9,10,15,17,2]))\n        \n        \ndef check_duplicates(list1):\n    '''\n    Write a python function to check whether the number passed is already in the list or not.\n    '''\n    c=0\n    for i in list1:\n        if i not in list1:\n            c+=1\n    return c\n        \nprint(check_duplicates([1,2,3,4,5,5,6,7,8,9,10]))\n        \n        \ndef check_duplicates(list1):\n    '''\n    Write a python function to check whether the number passed is already in the list or not.\n    '''\n    c=0\n    for i in list1:\n        if i not in list1:\n            c+=1\n    return c\n        \nprint(check_duplicates([1,2,3,4,5,5,6,7,8,9,10]))\n        \n        \ndef count_numbers(list1):\n    '''\n    Write a python function to count the number of numbers in the list that are even or not.\n    '''\n    c=0\n    for i in list1:\n        if i % 2 == 0:\n            c+=1\n    return c\n        \nprint(count_numbers([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef count_numbers(list1):\n    '''\n    Write a python function to count the number of numbers in the list that are even or not.\n    '''\n    c=0\n    for i in list1:\n        if i % 2 == 0:\n            c+=1\n    return c\n        \nprint(count_numbers([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef max_numbers(list1):\n    '''\n    Write a python function to find the maximum number in the list.\n    '''\n    m=list1[0]\n    for i in list1:\n        if i>m:\n            m=i\n    return m\n        \nprint(max_numbers([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef max_numbers(list1):\n    '''\n    Write a python function to find the maximum number in the list.\n    '''\n    m=list1[0]\n    for i in list1:\n        if i>m:\n            m=i\n    return m\n        \nprint(max_numbers([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1.reverse()\n    return list1\n        \nprint(reverse_list([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1.reverse()\n    return list1\n        \nprint(reverse_list([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1=list1[::-1]\n    return list1\n        \nprint(reverse_list([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef reverse_list(list1):\n    '''\n    Write a python function to reverse the list.\n    '''\n    list1.reverse()\n    return list1\n        \nprint(reverse_list([1,2,3,4,5,6,7,8,9,10,11]))\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from the list.\n    '''\n    list1=list(dict.fromkeys(list1))\n    return list1\n        \nprint(remove_duplicates([1,2,3,4,5,6,7,8,9,10,11,11]))\n        \n        \ndef remove_duplicates(list1):\n    '''\n    Write a python function to remove duplicates from the list.\n    '''\n    list1=list(dict.fromkeys(list1))\n    return list1\n        \nprint(remove_duplicates([1,2,3,4,5,6,7,8,9,10,11,11])"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\nprint(maximum(100,200))\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str2 = str1[1:-1]\n    list1 = str2.split(',')\n    list2 = []\n    for i in list1:\n        list2.append(i[1:-1])\n    tuple1 = tuple(list2)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = []\n    for i in range(0, len(str1)):\n        list1.append(str1[i])\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ((n & -n) << 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0: return 1\n    if n & 1 == 0: return 2\n    if n & 2 == 0: return 4\n    if n & 4 == 0: return 8\n    if n & 8 == 0: return 16\n    if n & 16 == 0: return 32\n    if n & 32 == 0: return 64\n    if n & 64 == 0: return 128\n    if n & 128 == 0: return 256\n    if n & 256 == 0: return 512\n    if n & 512 == 0: return 1024\n    if n & 1024 == 0: return 2048\n    if n & 2048 == 0: return 4096\n    if n & 4096 == 0: return 8192\n    if n & 8192 == 0: return 16384\n    if n & 16384 == 0: return 32768\n    if n & 32768 == 0: return 65536\n    if n & 65536 == 0: return 131072\n    if n & 131072 == 0: return 262144\n    if n & 262144 == 0: return 524288\n    if n & 524288 == 0: return 1048576\n    if n & 1048576 == 0: return 2097152\n    if n & 2097152 == 0: return 4194304\n    if n & 4194304 == 0: return 8388608\n    if n & 8388608 == 0: return 16777216\n    if n & 16777216 == 0: return 33554432\n    if n & 33554432 == 0: return 67108864\n    if n & 67108864 == 0: return 134217728\n    if n & 134217728 == 0: return 268435456\n    if n & 268435456 == 0: return 536870912\n    if n & 536870912 == 0: return 1073741824\n    if n & 1073741824 == 0: return 2147483648\n    if n & 2147483648 == 0: return 4294967296\n    if n & 4294967296 == 0: return 8589934592\n    if n & 8589934592 == 0: return 17179869184\n    if n & 17179869184 == 0: return 34359738368\n    if n & 34359738368 == 0: return 68719476736\n    if n & 68719476736 == 0: return 137438953472\n    if n & 137438953472 == 0: return 274877906944\n    if n & 274877906944 == 0: return 549755813888\n    if n & 549755813888 == 0: return 1099511627776\n    if n & 1099511627776 == 0: return 2199023255552\n    if n & 2199023255552 == 0: return 4398046511104\n    if n & 4398046511104 == 0: return 8796093022208\n    if n & 8796093022208 == 0: return 17592186044416\n    if n & 17592186044416 == 0: return 35184372088832\n    if n & 35184372088832 == 0: return 70368744177648\n    if n & 70368744177648 == 0: return 140737488355328\n    if n & 140737488355328 == 0: return 281474976710656\n    if n & 281474976710656 == 0: return 562949953421312\n    if n & 562949953421312 == 0: return 1125899906842624\n    if n & 1125899906842624 == 0: return 2251799813685248\n    if n & 2251799813685248 == 0: return 4503599627370496\n    if n & 4503599627370496 == 0: return 9007199254740992\n    if n & 9007199254740992 == 0: return 18014398509481984\n    if n & 18014398509481984 == 0: return 36007080903808\n    if n & 36007080903808 == 0: return 72057594037927936\n    if n & 72057594037927936 == 0: return 144115188075855872\n    if n & 144115188075855872 == 0: return 288230376151711744\n    if n & 288230376151711744 == 0: return 562949953421312\n    if n & 562949953421312 == 0: return 1125899906842624\n    if n & 1125899906842624 == 0: return 2251799813685248\n    if n & 2251799813685248 == 0: return 4503599627370496\n    if n & 4503599627370496 == 0: return 9007199254740992\n    if n & 9007199254740992 == 0: return 18014398509481984\n    if n & 18014398509481984 == 0: return 36007080903808\n    if n & 36007080903808 == 0: return 72057594037927936\n    if n & 72057594037927936 == 0: return 144115188075855872\n    if n & 144115188075855872 == 0: return 288230376151711744\n    if n & 288230376151711744 == 0: return 562949953421312\n    if n & 562949953421312 == 0: return 1125899906842624\n    if n & 1125899906842624 == 0: return 2251799813685248\n    if n & 2251799813685248 == 0: return 4503599627370496\n    if n & 4503599627370496 == 0: return 9007199254740992\n    if n & 9007199254740992 == 0: return 18014398509481984\n    if n & 18014398509481984 == 0: return 36007080903808\n    if n & 36007080903808 == 0: return 72057594037927936\n    if n & 72057594037927936 == 0: return 144115188075855872\n    if n & 144115188075855872 == 0: return 288230376151711744\n    if n & 288230376151711744 == 0: return 562949953421312\n    if n & 562949953421312 == 0: return 1125899906842624\n    if n & 1125899906842624 == 0: return 2251799813685248\n    if n & 2251799813685248 == 0: return 4503599627370496\n    if n & 4503599627370496 == 0: return 9007199254740992\n    if n & 9007199254740992 == 0: return 18014398509481984\n    if n & 18014398509481984 == 0: return 36007080903808\n    if n & 36007080903808 == 0: return 72057594037927936\n    if n & 72057594037927936 == 0: return 144115188075855872\n    if n & 144115188075855872 == 0: return 288230376151711744\n    if n & 288230376151711744 == 0: return 562949953421312\n    if n & 562949953421312 == 0: return 1125899906842624\n    if n & 1125899906842624 == 0: return 2251799813685248\n    if n & 2251799813685248 == 0: return 4503599627370496\n    if n & 4503599627370496 == 0: return 9007199254740992\n    if n & 9007199254740992 == 0: return 18014398509481984\n    if n & 18014398509481984 == 0: return 36007080903808\n    if n & 36007080903808 == 0: return 72057594037927936\n    if n & 72057594037927936 == 0: return 144115188075855872\n    if n & 144115188075855872 == 0: return 288230376151711744\n    if n & 288230376151711744 == 0: return 562949953421312\n    if n & 562949953421312 == 0: return 1125899906842624\n    if n & 1125899906842624 == 0: return 2251799813685248\n    if n & 2251799813685248 == 0: return 4503599627370496\n    if n & 4503599627370496 == 0: return 9007199254740992\n    if n & 90"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while (mask < n):\n        mask = mask << 1\n    return mask >> 1\n    \ndef set_right_most_unset_bit(n): \n    '''\n    Write a python function to set the right most unset bit.\n    '''\n    return int('1' + '0'*(n+1), 2)\n    \ndef set_left_most_set_bit(n):\n    '''\n    Write a python function to set the left most set bit.\n    '''\n    return int('0'*(n+1), 2)\n    \ndef set_right_most_set_bit(n):\n    '''\n    Write a python function to set the right most set bit.\n    '''\n    return int('1' + '0'*(n+1), 2)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Return the binary representation of -1 - 1 \n    return 2**(len(bin(n))-1) - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | (n >> 1)\n    n = n | (n >> 2)\n    n = n | (n >> 4)\n    n = n | (n >> 8)\n    n = n | (n >> 16)\n    return n ^ (n >> 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # return 2**(n.bit_length()-1) if n else 1\n    return int((2**n.bit_length()) - 1) if n else 1\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    k = 0\n    while (n & 1 == 0):\n        k += 1\n        n = n >> 1\n    return n << k\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # 1 is the only valid bitwise number that isn't 0 or 1\n    n = n | 1\n    # Keep flipping all the bits to the right until a 0 is found\n    while n!= 0 and n & (n - 1)!= 0:\n        n -= 1\n    # Now set the leftmost bit to zero\n    return n ^ (n - 1)\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    num_of_bits = 0\n    while (n): \n        num_of_bits += 1\n        n &= (n-1)\n    return num_of_bits\n    "
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    assert n>=0\n    for i in range(0,n+1):\n        print(bin(i), bin(i).count('1'))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r>0 and h>0:\n        volume = (1/3) * math.pi * (r**2) * h\n        return volume\n    else:\n        return -1\ndef volume_pyramid(a,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    if a>0 and h>0:\n        volume = (1/3) * (math.pi * a**2) * h\n        return volume\n    else:\n        return -1\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    if a>0:\n        volume = (a**3)\n        return volume\n    else:\n        return -1\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    if r>0 and h>0:\n        volume = (math.pi * (r**2) * h)\n        return volume\n    else:\n        return -1\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    if r>0:\n        volume = (4/3) * (math.pi * (r**3))\n        return volume\n    else:\n        return -1\ndef volume_triangle(b,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    if b>0 and h>0:\n        volume = (1/2) * b * h\n        return volume\n    else:\n        return -1\ndef volume_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    if b1>0 and b2>0 and h>0:\n        volume = (1/2) * (b1+b2) * h\n        return volume\n    else:\n        return -1\ndef volume_rectangle(b,h):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    if b>0 and h>0:\n        volume = b * h\n        return volume\n    else:\n        return -1\ndef volume_parallelogram(b1,b2):\n    '''\n    Write a function to find the volume of a parallelogram.\n    '''\n    if b1>0 and b2>0:\n        volume = b1 * b2\n        return volume\n    else:\n        return -1\ndef volume_ellipse(b,h):\n    '''\n    Write a function to find the volume of an ellipse.\n    '''\n    if b>0 and h>0:\n        volume = (b/2) * (h/2) * math.pi\n        return volume\n    else:\n        return -1\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    if a>0:\n        volume = a**3\n        return volume\n    else:\n        return -1\ndef volume_rhombus(b1,b2):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    if b1>0 and b2>0:\n        volume = 1/2 * b1 * b2\n        return volume\n    else:\n        return -1\ndef volume_kite(b1,b2,h):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    if b1>0 and b2>0 and h>0:\n        volume = (1/2) * b1 * b2 * h\n        return volume\n    else:\n        return -1\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    if r>0 and h>0:\n        surface = (1/3) * math.pi * (r**2) + (2/3) * math.pi * (r*h)\n        return surface\n    else:\n        return -1\ndef area_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    if a>0 and h>0:\n        surface = (1/3) * (math.pi * a**2) + (2/3) * math.pi * (a*h)\n        return surface\n    else:\n        return -1\ndef area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    if a>0:\n        surface = (6 * (a**2))\n        return surface\n    else:\n        return -1\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r>0 and h>0:\n        surface = (2 * math.pi * r) + (2 * math.pi * r * h)\n        return surface\n    else:\n        return -1\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if r>0:\n        surface = 4 * (math.pi * (r**2))\n        return surface\n    else:\n        return -1\ndef area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    if b>0 and h>0:\n        surface = 1/2 * b * h\n        return surface\n    else:\n        return -1\ndef area_trapezoid(b1,b2,h):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    if b1>0 and b2>0 and h>0:\n        surface = ((b1+b2)/2) * h\n        return surface\n    else:\n        return -1\ndef area_rectangle(b,h):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    if b>0 and h>0:\n        surface = b * h\n        return surface\n    else:\n        return -1\ndef area_parallelogram(b1,b2):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    if b1>0 and b2>0:\n        surface = b1 * b2\n        return surface\n    else:\n        return -1\ndef area_ellipse(b,h):\n    '''\n    Write a function to find the surface area of an ellipse.\n    '''\n    if b>0 and h>0:\n        surface = (b/2) * (h/2) * math.pi\n        return surface\n    else:\n        return -1\ndef area_square(a):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    if a>0:\n        surface = a**2\n        return surface\n    else:\n        return -1\ndef area_rhombus(b1,b2):\n    '''\n    Write a function to find the surface area of a rhombus.\n    '''\n    if b1>0 and b2>0:\n        surface = 1/2 * b1 * b2\n        return surface\n    else:\n        return -1\ndef area_kite(b1,b2,h):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    if b1>0 and b2>0 and h>0:\n        surface = (1/2) * b1 * b2 + (1/2) * b1 * h\n        return surface\n    else:\n        return -1\ndef distance(x1,y1,x2,y2):\n    '''\n    Write a function to find the distance between two points.\n    '''\n    if x1>0 and y1>0 and x2>0 and y2>0:\n        dist = math.sqrt(((x1-x2)**2) + ((y1-y2)**2))\n        return dist\n    else:\n        return -1\ndef is_rightangled(a,b,"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #variables\n    pi=math.pi\n    v=pi*(r**2)*h\n    return v\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol_cone = 1/3 * math.pi * r * r * h\n    return vol_cone\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    vol_cylinder = math.pi * r * r * h\n    return vol_cylinder\ndef volume_cuboid(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    vol_cuboid = l * b * h\n    return vol_cuboid\ndef area_triangle(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area_triangle = b * h/2\n    return area_triangle\ndef area_square(b):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area_square = b * b\n    return area_square\ndef area_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area_rectangle = l * b\n    return area_rectangle\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area_circle = math.pi * r * r\n    return area_circle\ndef area_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area_parallelogram = l * b\n    return area_parallelogram\ndef area_trapezium(a,b,h):\n    '''\n    Write a function to find the area of a trapezium.\n    '''\n    area_trapezium = (a + b) / 2 * h\n    return area_trapezium\ndef area_kite(r1,r2):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area_kite = 1/2 * math.pi * r1 * r2\n    return area_kite\ndef volume_kite(r1,r2,h):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    vol_kite = 1/3 * math.pi * r1 * r2 * h\n    return vol_kite\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol_sphere = (4/3) * math.pi * r * r * r\n    return vol_sphere\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    vol_cube = l * l * l\n    return vol_cube\ndef volume_pyramid(b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    vol_pyramid = 1/3 * b * h * h\n    return vol_pyramid\ndef volume_rectangular_prism(l,b,h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    vol_rectangular_prism = l * b * h\n    return vol_rectangular_prism\ndef volume_circular_prism(r,h):\n    '''\n    Write a function to find the volume of a circular prism.\n    '''\n    vol_circular_prism = 1/3 * math.pi * r * r * h\n    return vol_circular_prism\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area_cone = 1/3 * math.pi * r * r + 1/2 * math.pi * r * h\n    return surface_area_cone\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area_cylinder = 2 * math.pi * r * (r + h)\n    return surface_area_cylinder\ndef surface_area_cuboid(l,b,h):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surface_area_cuboid = 2 * (l * b + b * h + l * h)\n    return surface_area_cuboid\ndef surface_area_rectangle(l,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    surface_area_rectangle = 2 * (l * b)\n    return surface_area_rectangle\ndef surface_area_square(b):\n    '''\n    Write a function to find the surface area of a square.\n    '''\n    surface_area_square = 4 * b\n    return surface_area_square\ndef surface_area_kite(r1,r2):\n    '''\n    Write a function to find the surface area of a kite.\n    '''\n    surface_area_kite = 1/2 * math.pi * (r1 * r1 + r2 * r2)\n    return surface_area_kite\ndef surface_area_circle(r):\n    '''\n    Write a function to find the surface area of a circle.\n    '''\n    surface_area_circle = 2 * math.pi * r\n    return surface_area_circle\ndef surface_area_triangle(b,h):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    surface_area_triangle = 1/2 * b * h\n    return surface_area_triangle\ndef surface_area_parallelogram(l,b):\n    '''\n    Write a function to find the surface area of a parallelogram.\n    '''\n    surface_area_parallelogram = 2 * l * b\n    return surface_area_parallelogram\ndef surface_area_trapezium(a,b,h):\n    '''\n    Write a function to find the surface area of a trapezium.\n    '''\n    surface_area_trapezium = ((a + b) / 2) * h\n    return surface_area_trapezium\ndef volume_and_surface_area(shape,*args):\n    '''\n    Write a function to find the volume and surface area of a shape.\n    The shape can be either 'cube', 'cylinder', 'cone', 'kite','rectangular prism', 'circular prism','square', 'triangle', 'parallelogram', 'trapezium', 'kite'.\n    You can enter the dimensions for any shape as many times as you want separated by a comma.\n    You can enter as many dimensions as you want for any shape separated by a comma.\n    You can enter as many dimensions as you want separated by a space.\n    The inputs for the volume and surface area of each shape are:\n    For a cube, you enter the length, breadth and height.\n    For a cone, you enter the radius of the base, the height and the slant height.\n    For a cylinder, you enter the radius and the height.\n    For a kite, you enter the two radii of the two sides.\n    For a rectangular prism, you enter the length, breadth and height.\n    For a circular prism, you enter the radius and the height.\n    For a square, you enter the side length.\n    For a triangle, you enter the base and the height.\n    For a parallelogram, you enter the length and the breadth.\n    For a trapezium, you enter the length of the shorter side, the length of the longer side, and the height.\n    The return value for each shape is a tuple of the volume and surface area for that shape.\n    For example, if you enter:\n    volume_and_surface_area('cube', 4, 4, 4)\n    You will get the return value (64, 256) for the cube.\n    '''\n    if shape == 'cube':\n        l,b,h = args\n        vol_cube = l * b * h\n        surface_area_cube = 6 * l * b\n        return (vol_cube, surface_area_cube)\n    if shape == 'cylinder':\n        r,h = args\n        vol_cylinder = math.pi * r * r * h\n        surface_area_cylinder = 2 * math.pi * r "
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r=float(r)\n    h=float(h)\n    return (math.pi*r*r*h)/3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*h/3\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #volume = math.pi*r*r*h/3\n    volume = math.pi*h*r*r/3\n    return volume\ndef volume_right_circular_cone(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    #volume = math.pi*r*r*h/3\n    volume = math.pi*h*r*r/3\n    return volume\ndef volume_right_circular_cone_precise(r,h):\n    '''\n    Write a function to find the volume of a right circular cone.\n    '''\n    #volume = math.pi*r*r*h/3\n    volume = math.pi*h*r*r/3\n    return volume\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    #surface_area = math.pi*r*r*h+math.pi*r*math.sqrt(r**2+h**2)\n    surface_area = math.pi*r*r*h\n    return surface_area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    #volume = math.pi*r*r*h\n    volume = math.pi*r*r*h\n    return volume\ndef area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #surface_area = 2*math.pi*r*(r+h)\n    surface_area = 2*math.pi*r*h\n    return surface_area\ndef volume_right_circular_cylinder(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    #volume = math.pi*r*r*h\n    volume = math.pi*h*r*r\n    return volume\ndef volume_right_circular_cylinder_precise(r,h):\n    '''\n    Write a function to find the volume of a right circular cylinder.\n    '''\n    #volume = math.pi*r*r*h\n    volume = math.pi*h*r*r\n    return volume\ndef area_cube(a):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    #surface_area = 6*a**2\n    surface_area = 6*a**2\n    return surface_area\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    #volume = a**3\n    volume = a**3\n    return volume\ndef area_square_pyramid(a,h):\n    '''\n    Write a function to find the surface area of a square pyramid.\n    '''\n    #surface_area = ((a**2)*math.sqrt(h**2+a**2))+2*a*math.sqrt(a**2+h**2)\n    surface_area = ((a**2)*math.sqrt(h**2+a**2))+2*a*math.sqrt(a**2+h**2)\n    return surface_area\ndef volume_square_pyramid(a,h):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    #volume = a**3*h/3\n    volume = a**3*h/3\n    return volume\ndef volume_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    #volume = a*b*c\n    volume = a*b*c\n    return volume\ndef area_rectangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a rectangular prism.\n    '''\n    #surface_area = 2*(a*b+a*c+b*c)\n    surface_area = 2*(a*b+a*c+b*c)\n    return surface_area\ndef area_triangular_prism(a,b,c):\n    '''\n    Write a function to find the surface area of a triangular prism.\n    '''\n    #surface_area = a*b+b*c+a*c\n    surface_area = a*b+b*c+a*c\n    return surface_area\ndef volume_triangular_prism(a,b,c):\n    '''\n    Write a function to find the volume of a triangular prism.\n    '''\n    #volume = 1/2*a*b*c\n    volume = 1/2*a*b*c\n    return volume\ndef area_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the surface area of a trapezoid.\n    '''\n    #surface_area = a+b+c+d\n    surface_area = a+b+c+d\n    return surface_area\ndef volume_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    #volume = 1/2*(a+b)*(c+d)\n    volume = 1/2*(a+b)*(c+d)\n    return volume\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    #volume = a*b*c\n    volume = a*b*c\n    return volume\ndef area_parallelepiped(a,b,c):\n    '''\n    Write a function to find the surface area of a parallelepiped.\n    '''\n    #surface_area = 2*(a*(b+c)+b*(a+c)+c*(a+b))\n    surface_area = 2*(a*(b+c)+b*(a+c)+c*(a+b))\n    return surface_area\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    #surface_area = 4*math.pi*r**2\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #volume = 4/3*math.pi*r**3\n    volume = 4/3*math.pi*r**3\n    return volume\ndef area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the surface area of an ellipsoid.\n    '''\n    #surface_area = 4*math.pi*a*b*c\n    surface_area = 4*math.pi*a*b*c\n    return surface_area\ndef volume_ellipsoid(a,b,c):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    #volume = (4/3)*math.pi*a*b*c\n    volume = (4/3)*math.pi*a*b*c\n    return volume\ndef volume_right_circular_pyramid(r,h):\n    '''\n    Write a function to find the volume of a right circular pyramid.\n    '''\n    #volume = math.pi*r*r*h/3\n    volume = math.pi*h*r*r/3\n    return volume\ndef volume_right_circular_pyramid_precise(r,h):\n    '''\n    Write a function to find the volume of a right circular pyramid.\n    '''\n    #volume = math.pi*r*r*h/3\n    volume = math.pi*h*r*r/3\n    return volume\ndef area_right_circular_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a right circular pyramid.\n    '''\n    #surface_area = math.pi*r*r*h+math.pi*r*math.sqrt(r**2+h**2)\n    surface_area = math.pi*r*r*h+math.pi*r*math.s"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=math.pi\n    return 1/3*pi*r*r*h\ndef volume_prism(a,b,c):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    return a*b*c\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=math.pi\n    return 4/3*pi*r**3\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return a**3\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=math.pi\n    return pi*r*r*h\ndef volume_parallelepiped(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    return a*b*c\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    return 1/2*a*b*c\ndef volume_trapezoid(a,b,h):\n    '''\n    Write a function to find the volume of a trapezoid.\n    '''\n    return 1/2*(a+b)*h\ndef volume_rhombus(a,h):\n    '''\n    Write a function to find the volume of a rhombus.\n    '''\n    return 1/2*a*h\ndef volume_kite(b,h):\n    '''\n    Write a function to find the volume of a kite.\n    '''\n    return 1/2*b*h\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    return a*b\ndef volume_square(a):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    return a**2\ndef volume_spheroid(a,b):\n    '''\n    Write a function to find the volume of a spheroid.\n    '''\n    return 4/3*math.pi*a*b\ndef volume_cube_sphere_intersection(r,h):\n    '''\n    Write a function to find the volume of a cube intersecting a sphere.\n    '''\n    return 4/3*3.14159*r*r*h\ndef volume_cone_sphere_intersection(r,h):\n    '''\n    Write a function to find the volume of a cone intersecting a sphere.\n    '''\n    return 4/3*3.14159*r*r*math.sqrt(h*h+r*r)\ndef volume_cube_cylinder_intersection(r,h):\n    '''\n    Write a function to find the volume of a cube intersecting a cylinder.\n    '''\n    return 4/3*3.14159*r*r*h\ndef volume_cube_parallelepiped_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a cube intersecting a parallelepiped.\n    '''\n    return (6*a*b*c-max(a,b,c)*min(a,b,c))/3\ndef volume_cube_triangle_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a cube intersecting a triangle.\n    '''\n    return (a*b*c)/2\ndef volume_cube_trapezoid_intersection(a,b,h):\n    '''\n    Write a function to find the volume of a cube intersecting a trapezoid.\n    '''\n    return 1/2*(a+b)*h\ndef volume_cube_rhombus_intersection(a,h):\n    '''\n    Write a function to find the volume of a cube intersecting a rhombus.\n    '''\n    return 1/2*a*h\ndef volume_cube_kite_intersection(b,h):\n    '''\n    Write a function to find the volume of a cube intersecting a kite.\n    '''\n    return 1/2*b*h\ndef volume_cube_rectangle_intersection(a,b):\n    '''\n    Write a function to find the volume of a cube intersecting a rectangle.\n    '''\n    return a*b\ndef volume_cube_square_intersection(a):\n    '''\n    Write a function to find the volume of a cube intersecting a square.\n    '''\n    return a**3\ndef volume_cube_spheroid_intersection(a,b):\n    '''\n    Write a function to find the volume of a cube intersecting a spheroid.\n    '''\n    return 4/3*math.pi*a*b\ndef volume_cylinder_sphere_intersection(r,h):\n    '''\n    Write a function to find the volume of a cylinder intersecting a sphere.\n    '''\n    return 4/3*3.14159*r*r*h\ndef volume_cylinder_cone_intersection(r,h):\n    '''\n    Write a function to find the volume of a cylinder intersecting a cone.\n    '''\n    return 4/3*3.14159*r*r*math.sqrt(h*h+r*r)\ndef volume_cylinder_parallelepiped_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a cylinder intersecting a parallelepiped.\n    '''\n    return (6*a*b*c-max(a,b,c)*min(a,b,c))/3\ndef volume_cylinder_triangle_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a cylinder intersecting a triangle.\n    '''\n    return (a*b*c)/2\ndef volume_cylinder_trapezoid_intersection(a,b,h):\n    '''\n    Write a function to find the volume of a cylinder intersecting a trapezoid.\n    '''\n    return 1/2*(a+b)*h\ndef volume_cylinder_rhombus_intersection(a,h):\n    '''\n    Write a function to find the volume of a cylinder intersecting a rhombus.\n    '''\n    return 1/2*a*h\ndef volume_cylinder_kite_intersection(b,h):\n    '''\n    Write a function to find the volume of a cylinder intersecting a kite.\n    '''\n    return 1/2*b*h\ndef volume_cylinder_rectangle_intersection(a,b):\n    '''\n    Write a function to find the volume of a cylinder intersecting a rectangle.\n    '''\n    return a*b\ndef volume_cylinder_square_intersection(a):\n    '''\n    Write a function to find the volume of a cylinder intersecting a square.\n    '''\n    return a**2\ndef volume_cylinder_spheroid_intersection(a,b):\n    '''\n    Write a function to find the volume of a cylinder intersecting a spheroid.\n    '''\n    return 4/3*math.pi*a*b\ndef volume_parallelepiped_sphere_intersection(a,b):\n    '''\n    Write a function to find the volume of a parallelepiped intersecting a sphere.\n    '''\n    return 6*a*b/3\ndef volume_parallelepiped_cylinder_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped intersecting a cylinder.\n    '''\n    return 6*a*b*c/3\ndef volume_parallelepiped_triangle_intersection(a,b,c):\n    '''\n    Write a function to find the volume of a parallelepiped intersecting a triangle.\n    '''\n    return a*b*c/2\ndef volume_parallelepiped_trapezoid_intersection(a,b,h):\n    '''\n    Write a function to find the volume of a parallelepiped intersecting a trapezoid.\n    '''\n    return (a+b)*h/2\ndef volume_parallelepiped_rhom"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h/3\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    r = float(r)\n    h = float(h)\n    volume = math.pi * (r ** 2) * (h / 3)\n    print(volume)\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = math.pi\n    volume = pi*r*r*h\n    print(round(volume,2))\n    return volume\ndef diff_temps(celsius):\n    '''\n    Write a function to find the temperature in Fahrenheit and Celsius of a given temperature in Celsius.\n    '''\n    #conversion rate\n    f = (9/5) + 32\n    print(round(f*celsius,2),'F',round(celsius,2),'C')\n    return f*celsius\ndef price_difference(x,y):\n    '''\n    Write a function to calculate the difference between two prices of an item.\n    '''\n    if x > y:\n        print(round(x-y,2))\n    elif y > x:\n        print(round(y-x,2))\n    else:\n        print('0')\ndef bmi_calculator(weight,height):\n    '''\n    Write a function to calculate Body Mass Index (BMI) of a person.\n    '''\n    bmi = weight/height**2\n    print(round(bmi,2))\n    if bmi < 18.5:\n        print('Underweight')\n    elif bmi < 25:\n        print('Normal')\n    elif bmi < 30:\n        print('Overweight')\n    else:\n        print('Obesity')\ndef cm_to_m(inch):\n    '''\n    Write a function to convert centimeter to meter.\n    '''\n    print(round(inch/100,2))\ndef m_to_cm(meter):\n    '''\n    Write a function to convert meter to centimeter.\n    '''\n    print(round(meter*100,2))\ndef miles_to_km(miles):\n    '''\n    Write a function to convert miles to kilometer.\n    '''\n    print(round(miles*1.6,2))\ndef km_to_miles(km):\n    '''\n    Write a function to convert kilometer to miles.\n    '''\n    print(round(km/1.6,2))\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = 4/3*pi*r**3\n    print(round(volume,2))\ndef distance_sphere(r):\n    '''\n    Write a function to calculate the distance between two points of a sphere.\n    '''\n    pi = math.pi\n    distance = 2*pi*r\n    print(round(distance,2))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to calculate the volume of a cylinder.\n    '''\n    pi = math.pi\n    volume = pi*r*r*h\n    print(round(volume,2))\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to calculate the surface area of a cylinder.\n    '''\n    pi = math.pi\n    surface_area = 2*pi*r*(r+h)\n    print(round(surface_area,2))\ndef change_money(dollars):\n    '''\n    Write a function to calculate the total amount of change in dollars that has to be given back to a customer who has returned a product.\n    '''\n    #this function is so much easier than it looks. This is the base case, no change\n    if dollars == 0:\n        print('0')\n    #first find the number of quarters that have to be returned\n    if dollars >=.25:\n        q = math.floor(dollars/.25)\n        dollars = dollars - q*.25\n        #then find the number of dimes that have to be returned\n        if dollars >=.10:\n            d = math.floor(dollars/.10)\n            dollars = dollars - d*.10\n            #then find the number of nickels that have to be returned\n            if dollars >=.05:\n                n = math.floor(dollars/.05)\n                dollars = dollars - n*.05\n                #then find the number of pennies that have to be returned\n                if dollars >=.01:\n                    p = math.floor(dollars/.01)\n                    dollars = dollars - p*.01\n                    print(q+d+n+p)\n                #find the number of pennies that have to be returned\n                else:\n                    print(q+d+n)\n            #find the number of dimes that have to be returned\n            else:\n                print(q+d)\n        #find the number of nickels that have to be returned\n        else:\n            print(q+d)\n    #find the number of quarters that have to be returned\n    else:\n        print(q)\ndef total_cashier_cost(base,f_cost,r_cost,t_cost):\n    '''\n    Write a function to calculate the total cost of a cashier shift.\n    '''\n    total = base+f_cost+r_cost+t_cost\n    print(round(total,2))\ndef total_cashier_sales(base,f_sales,r_sales,t_sales):\n    '''\n    Write a function to calculate the total sales of a cashier shift.\n    '''\n    total = base+f_sales+r_sales+t_sales\n    print(round(total,2))\ndef difference(num1,num2):\n    '''\n    Write a function to calculate the difference between two numbers.\n    '''\n    if num1 > num2:\n        print(round(num1-num2,2))\n    elif num2 > num1:\n        print(round(num2-num1,2))\n    else:\n        print('0')\ndef total_bills(d,m,y):\n    '''\n    Write a function to calculate the total amount of bills a customer must pay in a given month.\n    '''\n    print(round(d+m+y,2))\ndef average_grade(x):\n    '''\n    Write a function to calculate the average grade of a list of grades.\n    '''\n    grade_total = 0\n    for i in x:\n        grade_total = grade_total+i\n    avg_grade = grade_total/len(x)\n    print(round(avg_grade,2))\ndef calc_daily_average(x):\n    '''\n    Write a function to calculate the daily average of a list of grades.\n    '''\n    grade_total = 0\n    for i in x:\n        grade_total = grade_total+i\n    print(round(grade_total/len(x),2))\ndef tax_calculator(total):\n    '''\n    Write a function to calculate the total amount of taxes a person owes based on their income.\n    '''\n    #calculate taxes\n    if total < 50000:\n        tax = 0\n    elif total >= 50000 and total < 100000:\n        tax = 0.2*(total-50000)\n    elif total >= 100000 and total < 150000:\n        tax = 20000 + 0.4*(total-100000)\n    elif total >= 150000 and total < 200000:\n        tax = 20000 + 10000 + 0.6*(total-150000)\n    elif total >= 200000 and total < 300000:\n        tax = 20000 + 10000 + 20000 + 0.8*(total-200000)\n    elif total >= 300000:\n        tax = 20000 + 10000 + 20000 + 20000 + 0.9*(total-300000)\n    else:\n        tax = 0\n    print(round(tax,2))\ndef fahrenheit_to_celsius(fahrenheit):\n    '''\n    Write a function to convert temperature from fahrenheit to celsius.\n    '''\n    f = (9/5) + 32\n    print(round((fahrenheit-32)*(5/9),2))\ndef monthly_payment(principal,interest,periods):\n    '''\n    Write a function to calculate the amount that a customer has to pay in a given month.\n    '''\n    #calculate monthly payments\n    n = periods\n    r = interest\n    a = r/(12*100)\n    monthly_pay = round((principal*a*(1+a)**n)/((1+a"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n > 0:\n        return 1 << (n - 1).bit_length()\n    return -1\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    power_2 = 1\n    while power_2 <= n:\n        power_2 *= 2\n        i += 1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    j = 1\n    while (j<=n):\n        j = j*2\n        i+=1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return (1 << (n - 1).bit_length())\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    while n % 2 == 0: \n        n = n / 2\n    return int(n) \n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(1<<i <= n): \n        i += 1\n    return 1<<(i-1)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n):\n        if (2 ** i <= n):\n            return i\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    if n > 2:\n        return highest_Power_of_2(n / 2)\n    else:\n        return n\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(n):\n        if 2**i <= n:\n            max_power = i\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if(n==0):\n        return 0\n    else:\n        i=1\n        while(i<=n):\n            i=i*2\n    return i//2\ndef Palindrome(n): \n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    x=n\n    y=0\n    while(n>0):\n        x=n%10\n        y=y*10+x\n        n=n//10\n    if(x==y):\n        return True\n    else:\n        return False\ndef largest(a, b, c): \n    '''\n    Write a python function to return largest of 3 numbers.\n    '''\n    if(a>b and a>c):\n        return a\n    elif(b>a and b>c):\n        return b\n    else:\n        return c\ndef convert_dec_to_any_base(n, base): \n    '''\n    Write a python function to convert decimal number to any base.\n    '''\n    s = \"\"\n    while(n>0):\n        remainder=n%base\n        s=str(remainder)+s\n        n=n//base\n    return s\ndef check_vowel_or_consonant(char): \n    '''\n    Write a python function to check if a character is vowel or consonant.\n    '''\n    if(char.upper()=='A' or char.upper()=='E' or char.upper()=='I' or char.upper()=='O' or char.upper()=='U'):\n        return True\n    else:\n        return False\ndef Power_of_2(n): \n    '''\n    Write a python function to check if a number is power of 2 or not.\n    '''\n    if(n==0):\n        return False\n    elif(n==1):\n        return True\n    else:\n        if(n%2==0):\n            return Power_of_2(n//2)\n        else:\n            return False\ndef is_palindrome(n): \n    '''\n    Write a python function to check if a number is palindrome or not.\n    '''\n    if(str(n)==str(n)[::-1]):\n        return True\n    else:\n        return False\ndef longest_word(s): \n    '''\n    Write a python function to return longest word in a string.\n    '''\n    s1=\"\"\n    s2=\"\"\n    for i in s:\n        if(i==' '):\n            if(len(s1)>len(s2)):\n                s2=s1\n            elif(len(s1)==len(s2)):\n                s2=s1 if s1>s2 else s2\n            s1=\"\"\n        else:\n            s1=s1+i\n    if(len(s1)>len(s2)):\n        return s1\n    elif(len(s1)==len(s2)):\n        return s1 if s1>s2 else s2\n    else:\n        return s2\ndef check_int_float(n): \n    '''\n    Write a python function to check if a number is integer or float.\n    '''\n    if(n-int(n)==0):\n        return True\n    else:\n        return False\ndef smallest_power_of_2(n): \n    '''\n    Write a python function to return smallest power of 2 that is greater than or equal to n.\n    '''\n    if(n==0):\n        return 0\n    else:\n        i=0\n        while(1):\n            i=i+1\n            if(2**i>=n):\n                return (2**(i-1))\n            else:\n                continue\ndef is_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n<=1):\n        return False\n    for i in range(2,int(n**0.5)+1):\n        if(n%i==0):\n            return False\n    return True\ndef count_vowels_and_consonants(s): \n    '''\n    Write a python function to count number of vowels and consonants in a string.\n    '''\n    vowels=0\n    consonants=0\n    for i in range(len(s)):\n        if(s[i]=='a' or s[i]=='e' or s[i]=='i' or s[i]=='o' or s[i]=='u' or s[i]=='A' or s[i]=='E' or s[i]=='I' or s[i]=='O' or s[i]=='U'):\n            vowels=vowels+1\n        else:\n            consonants=consonants+1\n    print(\"Number of vowels in given string is\",vowels)\n    print(\"Number of consonants in given string is\",consonants)\ndef number_of_distinct_prime_factors(n): \n    '''\n    Write a python function to count number of distinct prime factors of a number.\n    '''\n    i=0\n    for j in range(2,n):\n        if(n%j==0):\n            i=i+1\n    return i\ndef print_prime_factors(n): \n    '''\n    Write a python function to print all distinct prime factors of a number.\n    '''\n    if(n<=0):\n        print(\"Invalid Input\")\n    else:\n        i=2\n        while(n>1):\n            if(n%i==0):\n                print(i)\n                n=n//i\n            else:\n                i=i+1\ndef check_perfect_number(n): \n    '''\n    Write a python function to check if a number is perfect or not.\n    '''\n    sum1=0\n    for i in range(1,n):\n        if(n%i==0):\n            sum1=sum1+i\n    if(sum1==n):\n        return True\n    else:\n        return False\ndef check_palindrome_permutation(s): \n    '''\n    Write a python function to check if a string is a permutation of palindrome or not.\n    '''\n    s=s.upper()\n    s=s.replace(' ','')\n    count=0\n    for i in range(len(s)):\n        if(s[i]!=s[len(s)-i-1]):\n            count=count+1\n    if(count==0 or count==1):\n        return True\n    else:\n        return False\ndef check_pangram(s): \n    '''\n    Write a python function to check if a string is a pangram or not.\n    '''\n    for i in range(97,123):\n        if(chr(i) in s):\n            continue\n        else:\n            return False\n    return True\ndef check_number_of_divisors(n): \n    '''\n    Write a python function to check if a number has only odd number of divisors or not.\n    '''\n    count=0\n    for i in range(1,n):\n        if(n%i==0):\n            count=count+1\n    if(count%2==0):\n        return False\n    else:\n        return True\ndef check_power_of_two(n): \n    '''\n    Write a python function to check if a number is power of two or not.\n    '''\n    i=0\n    while(2**i<=n):\n        i=i+1\n    if(i==1):\n        return True\n    else:\n        return False\ndef check_prime(n): \n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    if(n==1):\n        return False\n    elif(n==2):\n        return True\n    for i in range(2,int(n**0.5)+1):\n        if(n%i==0):\n            return False\n    return True\ndef check_strong_number(n): \n    '''\n    Write a python functio"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))\n    \ndef lucas_test():\n    '''\n    Test function for lucas function\n    '''\n    #Case 1\n    if lucas(1) == 2:\n        print(\"Case 1 Passed\")\n    else:\n        print(\"Case 1 Failed\")\n        \n    #Case 2\n    if lucas(3) == 4:\n        print(\"Case 2 Passed\")\n    else:\n        print(\"Case 2 Failed\")\n        \n    #Case 3\n    if lucas(2) == 1:\n        print(\"Case 3 Passed\")\n    else:\n        print(\"Case 3 Failed\")\n        \nlucas_test()\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_nums = [0, 2] \n    if n < 2: \n        return lucas_nums[n]\n    for i in range(2, n + 1): \n        lucas_nums.append(lucas_nums[i - 1] + lucas_nums[i - 2])\n    return lucas_nums[n]\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n    "
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    #base case\n    if n == 0: \n        return 2\n    #recursive call \n    elif n == 1: \n        return 1\n    #recursive call \n    else: \n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return -1\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # The nth lucas number is equal to 4*n^2 + n + 2. \n    # So the lucas function can be used to calculate the \n    # nth lucas number in O(n) time.\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # base case\n    if n == 0: return 2 \n    elif n == 1: return 1 \n    # recursion\n    else: return find_lucas(n - 1) + find_lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-2) + find_lucas(n-1)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return l(n)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_list = [2, 1]\n    for i in range(0, n):\n        if i > 0:\n            lucas_list.append(lucas_list[i] + lucas_list[i-1])\n    return lucas_list[-1]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    result = [f'{string}{item}' for item in list_]\n    return result\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x,string) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    \n    # your code here\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [f\"{string} {i}\" for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        if type(list_[i])!= str:\n            list_[i] = str(list_[i])\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] += string\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for element in list_:\n        new_list.append(string % element)\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {l1[i]: {l2[i]: l3[i] for i in range(len(l3))} for i in range(len(l1))}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    list_dictionary = {}\n    for i in range(len(l1)):\n        list_dictionary[l1[i]] = {}\n        list_dictionary[l1[i]][l2[i]] = l3[i]\n    return list_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    d1[l1[0]] = l2[0]\n    d1[l1[1]] = l2[1]\n    d1[l1[2]] = l2[2]\n    d2 = {}\n    d2[l3[0]] = d1\n    d2[l3[1]] = l2[3]\n    d2[l3[2]] = l2[4]\n    d2[l3[3]] = l2[5]\n    return d2\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = dict()\n    for i in range(len(l1)):\n        dictionary[l1[i]] = dict()\n        dictionary[l1[i]][l2[i]] = dict()\n        dictionary[l1[i]][l2[i]][l3[i]] = l3[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dictionary = {}\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    res = [{k1: {k2: v2 for k2, v2 in zip(l2, v1)} for k1, v1 in zip(l1, l3)} for l3 in l2]\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {l1[i]:{l2[j]:l3[k] for j, k in zip(range(len(l2)), range(len(l3)))} for i in range(len(l1))}\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    if len(l1) == len(l2) and len(l2) == len(l3):\n        for i in range(len(l1)):\n            d[l1[i]] = {l2[i]: l3[i]}\n        return d\n    else:\n        return 'Length of lists are different'\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return [{key:value} for key, value in zip(l1, l2, l3)]\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict(zip(l1, l2))\n    d1 = dict(zip(l1, l3))\n    d2 = {**d, **d1}\n    return d2\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    elif n==3:\n        return 4\n    elif n==4:\n        return 7\n    elif n==5:\n        return 11\n    elif n==6:\n        return 14\n    elif n==7:\n        return 17\n    elif n==8:\n        return 25\n    elif n==9:\n        return 33\n    elif n==10:\n        return 44\n    elif n==11:\n        return 52\n    elif n==12:\n        return 65\n    elif n==13:\n        return 78\n    elif n==14:\n        return 91\n    elif n==15:\n        return 105\n    elif n==16:\n        return 124\n    elif n==17:\n        return 139\n    elif n==18:\n        return 158\n    elif n==19:\n        return 175\n    elif n==20:\n        return 214\n    elif n==21:\n        return 245\n    elif n==22:\n        return 259\n    elif n==23:\n        return 284\n    elif n==24:\n        return 302\n    elif n==25:\n        return 336\n    elif n==26:\n        return 372\n    elif n==27:\n        return 395\n    elif n==28:\n        return 425\n    elif n==29:\n        return 457\n    elif n==30:\n        return 486\n    elif n==31:\n        return 508\n    elif n==32:\n        return 531\n    elif n==33:\n        return 562\n    elif n==34:\n        return 594\n    elif n==35:\n        return 616\n    elif n==36:\n        return 638\n    elif n==37:\n        return 659\n    elif n==38:\n        return 689\n    elif n==39:\n        return 710\n    elif n==40:\n        return 732\n    elif n==41:\n        return 764\n    elif n==42:\n        return 798\n    elif n==43:\n        return 821\n    elif n==44:\n        return 853\n    elif n==45:\n        return 886\n    elif n==46:\n        return 908\n    elif n==47:\n        return 940\n    elif n==48:\n        return 972\n    elif n==49:\n        return 1004\n    elif n==50:\n        return 1036\n    elif n==51:\n        return 1068\n    elif n==52:\n        return 1099\n    elif n==53:\n        return 1131\n    elif n==54:\n        return 1153\n    elif n==55:\n        return 1184\n    elif n==56:\n        return 1216\n    elif n==57:\n        return 1248\n    elif n==58:\n        return 1280\n    elif n==59:\n        return 1303\n    elif n==60:\n        return 1332\n    elif n==61:\n        return 1363\n    elif n==62:\n        return 1385\n    elif n==63:\n        return 1415\n    elif n==64:\n        return 1447\n    elif n==65:\n        return 1477\n    elif n==66:\n        return 1512\n    elif n==67:\n        return 1535\n    elif n==68:\n        return 1566\n    elif n==69:\n        return 1591\n    elif n==70:\n        return 1613\n    elif n==71:\n        return 1645\n    elif n==72:\n        return 1676\n    elif n==73:\n        return 1702\n    elif n==74:\n        return 1732\n    elif n==75:\n        return 1764\n    elif n==76:\n        return 1786\n    elif n==77:\n        return 1807\n    elif n==78:\n        return 1838\n    elif n==79:\n        return 1859\n    elif n==80:\n        return 1890\n    elif n==81:\n        return 1911\n    elif n==82:\n        return 1942\n    elif n==83:\n        return 1974\n    elif n==84:\n        return 2005\n    elif n==85:\n        return 2036\n    elif n==86:\n        return 2066\n    elif n==87:\n        return 2087\n    elif n==88:\n        return 2118\n    elif n==89:\n        return 2149\n    elif n==90:\n        return 2170\n    elif n==91:\n        return 2190\n    elif n==92:\n        return 2212\n    elif n==93:\n        return 2237\n    elif n==94:\n        return 2257\n    elif n==95:\n        return 2278\n    elif n==96:\n        return 2309\n    elif n==97:\n        return 2340\n    elif n==98:\n        return 2370\n    elif n==99:\n        return 2391\n    elif n==100:\n        return 2412\n    elif n==101:\n        return 2434\n    elif n==102:\n        return 2456\n    elif n==103:\n        return 2484\n    elif n==104:\n        return 2514\n    elif n==105:\n        return 2545\n    elif n==106:\n        return 2566\n    elif n==107:\n        return 2587\n    elif n==108:\n        return 2617\n    elif n==109:\n        return 2638\n    elif n==110:\n        return 2659\n    elif n==111:\n        return 2679\n    elif n==112:\n        return 2704\n    elif n==113:\n        return 2724\n    elif n==114:\n        return 2756\n    elif n==115:\n        return 2778\n    elif n==116:\n        return 2808\n    elif n==117:\n        return 2827\n    elif n==118:\n        return 2850\n    elif n==119:\n        return 2871\n    elif n==120:\n        return 2902\n    elif n==121:\n        return 2923\n    elif n==122:\n        return 2954\n    elif n==123:\n        return 2985\n    elif n==124:\n        return 3016\n    elif n==125:\n        return 3047\n    elif n==126:\n        return 3068\n    elif n==127:\n        return 3089\n    elif n==128:\n        return 3110\n    elif n==129:\n        return 3141\n    elif n==130:\n        return 3162\n    elif n==131:\n        return 3182\n    elif n==132:\n        return 3203\n    elif n==133:\n        return 3234\n    elif n==134:\n        return 3255\n    elif n==135:\n        return 3276\n    elif n==136:\n        return 3296\n    elif n==137:\n        return 3318\n    elif n==138:\n        return 3350\n    elif n==139:\n        return 3370\n    elif n==140:\n        return 3392\n    elif n==141:\n        return 3423\n    elif n==142:\n        return 3454\n    elif n==143:\n        return 3485\n    elif n==144:\n        return 3516\n    elif n==145:\n        return 3548\n    elif n==146:\n        return 3569\n    elif n==147:\n        return 3591\n    elif n==148:\n        return 3612\n    elif n==149:\n        return 3631\n    elif n==150:\n        return 3650\n    elif n==151:\n        return 3671\n    elif n==152:\n        return 3694\n    elif n==153:\n        return 3715\n    elif n==154:\n        return 3745\n    eli"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for n in range(1, n+1):\n        x = (n/2)\n        y = (n/3)\n        z = (n/4)\n        w = (n/5)\n        if x + y + z + w < n:\n            continue\n        else:\n            sum_ = x + y + z + w\n            if sum_ > max_sum:\n                max_sum = sum_\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 5 == 0:\n        return get_max_sum(n/5) + n/5\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + n/3\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + n/2\n    else:\n        return n\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    global max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max((get_max_sum(n-2) + get_max_sum(n-3) + get_max_sum(n-4) + get_max_sum(n-5)),n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    else:\n        return max( (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5)), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return get_max_sum_helper(n, {}, {})\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    return (max(n+1, (n+1)//2+1, (n+1)//3+1, (n+1)//4+1, (n+1)//5+1))\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def dp_f(n):\n        if n == 1:\n            return 1\n        if n in cache:\n            return cache[n]\n        if n%2 == 0 and n%3 == 0 and n%5 == 0:\n            ans = max( (dp_f(n/2) + dp_f(n/3) + dp_f(n/5) + dp_f(n/6)), n)\n        elif n%2 == 0 and n%3 == 0 and n%6 == 0:\n            ans = max( (dp_f(n/2) + dp_f(n/3) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%2 == 0 and n%3 == 0:\n            ans = max( (dp_f(n/2) + dp_f(n/3) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%2 == 0 and n%5 == 0:\n            ans = max( (dp_f(n/2) + dp_f(n/5) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%3 == 0 and n%5 == 0:\n            ans = max( (dp_f(n/3) + dp_f(n/5) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%2 == 0:\n            ans = max( (dp_f(n/2) + dp_f(n/3) + dp_f(n/4) + dp_f(n/5) + dp_f(n/6)), n)\n        elif n%3 == 0:\n            ans = max( (dp_f(n/3) + dp_f(n/4) + dp_f(n/5) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%4 == 0:\n            ans = max( (dp_f(n/4) + dp_f(n/5) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%5 == 0:\n            ans = max( (dp_f(n/5) + dp_f(n/6) + dp_f(n/7)), n)\n        elif n%6 == 0:\n            ans = max( (dp_f(n/6) + dp_f(n/7)), n)\n        elif n%7 == 0:\n            ans = dp_f(n/7)\n        else:\n            ans = n\n        cache[n] = ans\n        return ans\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    for i in range(1,n+1):\n        curr_sum = 0\n        if i % 2 == 0:\n            curr_sum += get_sum(i/2)\n        if i % 3 == 0:\n            curr_sum += get_sum(i/3)\n        if i % 4 == 0:\n            curr_sum += get_sum(i/4)\n        if i % 5 == 0:\n            curr_sum += get_sum(i/5)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    count = 0\n    max = 0\n    for i in input_list:\n        if type(i) == list:\n            count += max_length_list(i)\n        else:\n            count += 1\n            if count > max:\n                max = count\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    print(\"Original list: \" + str(input_list))\n    if input_list:\n        max_len_list = []\n        for x in input_list:\n            if type(x) == list:\n                new_list = x\n                if len(new_list) > len(max_len_list):\n                    max_len_list = new_list\n            else:\n                if len(x) > len(max_len_list):\n                    max_len_list = [x]\n    else:\n        return None\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = None\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_list = lst\n            max_len = len(lst)\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    list_with_max_length = []\n    for i in input_list:\n        if len(i) > max:\n            list_with_max_length = [i]\n            max = len(i)\n        elif len(i) == max:\n            list_with_max_length.append(i)\n    return list_with_max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    return max([len(lst) for lst in input_list])\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Start with a list containing the first item in the input_list\n    max_length_list = [input_list[0]]\n    # Loop through the input_list\n    for item in input_list:\n        # Find the list that is the longest\n        if len(max_length_list) < len(item):\n            max_length_list = item\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length_list = [len(x) for x in input_list]\n    return input_list[length_list.index(max(length_list))]\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    length_list = len(input_list[0])\n    for i in input_list:\n        if len(i) > length_list:\n            length_list = len(i)\n    return(length_list)\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in range(len(input_list)):\n        max = len(input_list[i]) if len(input_list[i]) > max else max\n    return max\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    #return len(test_tup) == len(set(test_tup))\n    #return len(set(test_tup)) == len(test_tup)\n    #return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    distinct_tup = []\n    for x in test_tup:\n        if x not in distinct_tup:\n            distinct_tup.append(x)\n        else:\n            return False\n    return True\n    \nif __name__ == \"__main__\":\n    # test 1\n    test_tup1 = (1,2,3,4,5)\n    print(test_tup1, \"is\", check_distinct(test_tup1))\n    \n    # test 2\n    test_tup2 = (1,2,3,4,5,1)\n    print(test_tup2, \"is\", check_distinct(test_tup2))\n    \n    # test 3\n    test_tup3 = (1,2,3,4,5,6,1)\n    print(test_tup3, \"is\", check_distinct(test_tup3))"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    my_set = set()\n    for i in test_tup:\n        if i in my_set:\n            return False\n        else:\n            my_set.add(i)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(i + 1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict1 = {}\n    for i in str1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    for j in dict1:\n        if dict1[j] == 1:\n            return j\n    return 'No unique character present'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a string\n    # assume str1 is a strin"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(0, len(str1)):\n        for j in range(i+1, len(str1)):\n            if str1[i] == str1[j] and str1[j]!= str1[i+1]:\n                return str1[i]\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = input(\"Enter the string\")\n    freq = {}\n    for c in str1:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = set(str1)\n    for i in chars:\n        if str1.count(i) == 1:\n            return i\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_list = list(str1)\n    char_dict = {}\n    for char in char_list:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for i in range(len(str1)):\n        if char_dict[str1[i]] == 1:\n            return str1[i]\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) < 1:\n        return\n    frequency_array = {}\n    for i in str1:\n        if i in frequency_array:\n            frequency_array[i] += 1\n        else:\n            frequency_array[i] = 1\n    for i in str1:\n        if frequency_array[i] == 1:\n            return i\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dic={}\n    for char in str1:\n        if char not in dic:\n            dic[char]=1\n        else:\n            dic[char]+=1\n    for char in str1:\n        if dic[char]==1:\n            return char\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    #return bool(re.match(r'^.{1,}[a-z]{1}$', string))\n    if (string[0] == string[len(string)-1]):\n        print(\"String starts and ends with the same character\")\n    else:\n        print(\"String doesn't starts and ends with the same character\")\n    return True\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (string[0] == string[len(string)-1]) and (string[0] == string[len(string)-1]):\n        print(\"True\")\n        return\n    print(\"False\")\n    return\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if len(string) < 1 or len(string) > 1:\n        return False\n    if string[0] == string[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_1(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_2(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_3(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_4(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_5(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_6(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_7(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_8(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_9(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_10(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_11(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_12(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_13(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_14(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_15(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_16(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_17(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_18(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_19(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_20(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_21(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code goes here\n    if(len(string) == 1):\n        return True\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\n    \ndef check_char_22(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or no"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass \n    if re.match(r'^[a-z]$|^([a-z]).*\\1$',string):\n        return True\n    else:\n        return False "
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if len(string) >= 2 and string[0] == string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string) \n    if match: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) is not None\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex, string))\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b:\n        if b<c:\n            return b\n        elif a<c:\n            return c\n        else:\n            return a\n    elif b<a:\n        if a<c:\n            return a\n        elif b<c:\n            return c\n        else:\n            return b\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        return(b)\n    elif b >= c and b >= a:\n        return(c)\n    elif c >= a and c >= b:\n        return(a)\n    elif a == b and a == c:\n        return(a)\n    else:\n        return(a)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b:\n        if b >= c:\n            return b\n        elif a <= c:\n            return a\n        else:\n            return c\n    elif a >= c:\n        return a\n    elif b >= c:\n        return c\n    else:\n        return b\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    \n    max_divisor = n ** 0.5\n    divisor = 3\n    while divisor <= max_divisor:\n        if n % divisor == 0:\n            return False\n        divisor += 2\n        \n    return True\n    \ndef largest_prime_factor(n):\n    '''\n    Write a function to return the largest prime factor of a number.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return n\n        \n    max_divisor = n ** 0.5\n    divisor = 3\n    \n    while divisor <= max_divisor:\n        if n % divisor == 0:\n            return divisor\n        divisor += 2\n        \n    return n\n    \ndef is_palindrome(n):\n    '''\n    Write a function to check whether a number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a<c:\n            return a\n        elif b>c:\n            return b\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        elif a>c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a < b < c) or (c < b < a):\n        median = b\n    elif (b < a < c) or (c < a < b):\n        median = a\n    else:\n        median = c\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Create a list of the 3 numbers\n    numbers = [a, b, c]\n    # Sort the list\n    numbers.sort()\n    # Get the length of the list\n    length = len(numbers)\n    # Find the middle index\n    middle_index = length / 2\n    # Find the middle element\n    middle_element = numbers[int(middle_index)]\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if (a>b and a>c):\n        if (b>c):\n            return c\n        else:\n            return b\n    elif (a>b and a<c):\n        if (b<c):\n            return c\n        else:\n            return b\n    elif (b>a and b>c):\n        if (a>c):\n            return c\n        else:\n            return a\n    elif (b>a and b<c):\n        if (a<c):\n            return c\n        else:\n            return a\n    elif (c>a and c>b):\n        if (b>a):\n            return a\n        else:\n            return b\n    elif (c>a and c<b):\n        if (a>b):\n            return b\n        else:\n            return a\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #your code here\n    print(median(a,b,c))\nmedian_numbers(1,2,3)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = []\n    median.append(a)\n    median.append(b)\n    median.append(c)\n    median.sort()\n    if len(median) % 2 == 0:\n        median.remove(median[1])\n        median.remove(median[0])\n    else:\n        median.remove(median[2])\n        median.remove(median[1])\n    median = median[0]\n    return median\ndef nametag(first_name,last_name):\n    '''\n    Write a function to create a nametag for a person.\n    The nametag should have their last name vertically followed by first name.\n    '''\n    nametag = []\n    name = [last_name,first_name]\n    nametag.append(name)\n    nametag = nametag[0]\n    nametag_string = \"\"\n    for i in range(0,len(nametag)):\n        nametag_string += nametag[i] + \" \"\n    return nametag_string.strip()\ndef if_this_not_that(i_list,this):\n    '''\n    Write a function to find if the element exists in a list or not.\n    '''\n    if this not in i_list:\n        return True\ndef greeter_bot():\n    '''\n    Create a greeting function.\n    The function takes a name as input and returns a greeting.\n    '''\n    name = input(\"What is your name?\\n\")\n    print(\"Hello\",name)\n    def greeter_bot():\n    '''\n    Write a function to find if a number is prime or not.\n    A prime number (or a prime) is a natural number greater than 1 and that has no positive divisors other than 1 and itself.\n    '''\n    def is_prime(number):\n        isPrime = True\n        for i in range(2,number):\n            if number % i == 0:\n                isPrime = False\n        return isPrime\n    print(is_prime(int(input(\"Input a number\\n\"))))\ndef prime_factors(num):\n    '''\n    Write a function to print all prime factors of a given number.\n    '''\n    prime_factors = []\n    for i in range(1,num + 1):\n        if num % i == 0:\n            if is_prime(i) == True:\n                prime_factors.append(i)\n    return prime_factors\ndef prime_factors_2(num):\n    '''\n    Write a function to print all prime factors of a given number.\n    '''\n    prime_factors = []\n    for i in range(1,num + 1):\n        if num % i == 0:\n            if is_prime(i) == True:\n                prime_factors.append(i)\n    return prime_factors\ndef is_prime(num):\n    '''\n    Write a function to check whether a given number is prime or not.\n    '''\n    isPrime = True\n    for i in range(2,num):\n        if num % i == 0:\n            isPrime = False\n            break\n    return isPrime\ndef print_big(letter):\n    '''\n    Write a function that takes in a single letter, and returns a 5x5 representation of that letter\n    '''\n    print(\"   *  \")\n    print(\"  ***  \")\n    print(\" ***** \")\n    print(\"*******\")\n    print(\"   *   \")\ndef print_big_2(letter):\n    '''\n    Write a function that takes in a single letter, and returns a 5x5 representation of that letter\n    '''\n    print(\"  _____\")\n    print(\" |     |\")\n    print(\" |     |\")\n    print(\" |     |\")\n    print(\" |     |\")\n    print(\" |_____|\")\ndef love6(n):\n    '''\n    Write a function that takes in a number n, and returns True if n is in the range 1-10 inclusive, and False otherwise.\n    '''\n    return n in range(1,11)\ndef love6_2(n):\n    '''\n    Write a function that takes in a number n, and returns True if n is in the range 1-10 inclusive, and False otherwise.\n    '''\n    return n in range(1,11)\ndef in1to10(n, outside_mode):\n    '''\n    Write a function that takes in a number n and checks whether n is in the range 1-10 inclusive.\n    If outside_mode is True, return whether n is less than or equal to 1, or greater than or equal to 10.\n    If outside_mode is False, return whether n is in the range 1-10 inclusive.\n    '''\n    if outside_mode:\n        return n <= 1 or n >= 10\n    else:\n        return n in range(1,11)\ndef love6_3(n):\n    '''\n    Write a function that takes in a number n, and returns True if n is in the range 1-10 inclusive, and False otherwise.\n    '''\n    return n in range(1,11)\ndef double_letters(string):\n    '''\n    Write a function to double each letter in a string.\n    '''\n    double_letters = []\n    for i in string:\n        double_letters.append(i*2)\n    return \"\".join(double_letters)\ndef double_letters_2(string):\n    '''\n    Write a function to double each letter in a string.\n    '''\n    double_letters = []\n    for i in string:\n        double_letters.append(i*2)\n    return \"\".join(double_letters)\ndef count_letters(string):\n    '''\n    Write a function to count the number of times a letter occurs in the input string.\n    '''\n    string = string.lower()\n    dic = {}\n    for i in string:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\ndef double_count(string):\n    '''\n    Write a function to count the number of times a non-overlapping pair of letters occurs in the input string.\n    '''\n    string = string.lower()\n    dic = {}\n    for i in range(len(string)-1):\n        if string[i:i+2] in dic:\n            dic[string[i:i+2]] += 1\n        else:\n            dic[string[i:i+2]] = 1\n    return dic\ndef count_letter_position(string):\n    '''\n    Write a function that returns a dictionary with the letters of the input string as keys,\n    and the positions where those letters appear as values.\n    '''\n    string = string.lower()\n    dic = {}\n    for i in range(len(string)):\n        if string[i] in dic:\n            dic[string[i]].append(i)\n        else:\n            dic[string[i]] = [i]\n    return dic\ndef find_letter_position(string):\n    '''\n    Write a function that returns a dictionary with the letters of the input string as keys,\n    and the positions where those letters appear as values.\n    '''\n    string = string.lower()\n    dic = {}\n    for i in range(len(string)):\n        if string[i] in dic:\n            dic[string[i]].append(i)\n        else:\n            dic[string[i]] = [i]\n    return dic\ndef word_flipper(word):\n    '''\n    Write a function that takes in a string and returns the string \"flipped\"\n    '''\n    word = word[::-1]\n    return word\ndef xyz_there(str):\n    '''\n    Write a function to replace all 'not' or 'bad' in a given string with 'good'.\n    '''\n    if \"not\" in str:\n        str = str.replace(\"not\",\"good\")\n    if \"bad\" in str:\n        str = str.replace(\"bad\",\"good\")\n    if \"not\" in str and \"bad\" in str:\n        str = str.replace(\"not\",\"good\").replace(\"bad\",\"good\")\n    return str\ndef count_char(string,char):\n    '''\n    Write a function to count th"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    return sorted_list[1]\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in nums])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if nums is None:\n        return None\n    total = 0\n    for num in nums:\n        total += sum_of_digits_helper(num)\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(i) for i in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for x in nums:\n        s += sum(int(i) for i in str(x))\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    if not nums:\n        return\n    sums = []\n    for num in nums:\n        sums.append(sum([int(i) for i in str(num)]))\n    return sums\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(list(str(num)))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits_list = []\n    for num in nums:\n        sum_of_digits_list.append(sum(int(i) for i in str(num)))\n    return sum_of_digits_list\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for n in nums:\n        total += sum([int(d) for d in str(n)])\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y:x^y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n    \n    return tuple(map(operator.xor, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (x^y for x,y in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple([test_tup1[i]^test_tup2[i] for i in range(0,len(test_tup1))])\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2)))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return test_tup1 ^ test_tup2\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(map(lambda x,y: x^y, test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bin(a ^ b)[2:] for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i, j in zip(test_tup1, test_tup2):\n        result += (i ^ j,)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1 = test_tup1\n    tup2 = test_tup2\n    xor = \"\"\n    for i in range(0, len(tup1)):\n        if tup1[i] == tup2[i]:\n            xor += \"0\"\n        else:\n            xor += \"1\"\n    return xor\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set\n    test_set = set(test_list)\n    # then convert the set back to list\n    return list(test_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = []\n    for i in range(len(test_list)):\n        if test_list[i] not in test_list[:i] and test_list[i] not in unique_tuples:\n            unique_tuples.append(test_list[i])\n    return unique_tuples\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(tuple(i) for i in test_list))\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # initialize a new list to hold the results\n    freq_list = []\n    \n    # loop through the list\n    for i in test_list:\n        \n        # for each tuple, compare it to the rest of the tuples in the list and only add it to the list if it is unique\n        if i not in freq_list:\n            freq_list.append(i)\n    \n    # return the list of tuples\n    return freq_list\n    "
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    #Method 1 - Using set\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [('a', 'b', 'c', 'd'), ('a', 'b', 'd'), ('a', 'b', 'd', 'c', 'e'), ('a', 'b', 'e'), ('a', 'b', 'e', 'f'), ('a', 'b', 'f')]\n    \n    return len(set(map(lambda x: tuple(sorted(x)), test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list = [tuple(sorted(sub)) for sub in test_list]\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    list_frequency_dict = {}\n    for element in test_list:\n        if element in list_frequency_dict:\n            list_frequency_dict[element] += 1\n        else:\n            list_frequency_dict[element] = 1\n    return list_frequency_dict\n    \ndef frequency_map(test_list):\n    '''\n    Write a function to extract the frequency map of the given list.\n    '''\n    frequency_dict = {}\n    for element in test_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n        \nif __name__ == '__main__':\n    test_list = [('a', 1), ('b', 1), ('a', 1), ('a', 1), ('b', 1), ('a', 1), ('b', 1)]\n    print(extract_freq(test_list))\n    print(frequency_map(test_list))"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    test_list.sort()\n    new_list = []\n    for x in test_list:\n        if not x in new_list:\n            new_list.append(x)\n    return new_list\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def nested_tuple(test_tup1, test_tup2):\n        return tuple(sum(each) for each in zip(test_tup1, test_tup2))\n    return nested_tuple(test_tup1, test_tup2)\n    \nprint(add_nested_tuples((1,2,3,4), (3,2,1,4)))\nprint(add_nested_tuples((2,4,3,5), (3,5,7,2)))\nprint(add_nested_tuples((1,2,3), (4,5,6)))\nprint(add_nested_tuples((6,5,4), (2,3,1)))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    def add_nested_tuples(tup1, tup2):\n        # base case\n        if len(tup1) == 1 and len(tup2) == 1:\n            return (tup1[0] + tup2[0],)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(i + j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = ()\n    for index in range(len(test_tup1)):\n        result_tup += (test_tup1[index] + test_tup2[index]),\n    return result_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1]\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    add_tup = ()\n    for x in range(len(test_tup1)):\n        add_tup = add_tup + (test_tup1[x] + test_tup2[x],)\n    return add_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(map(lambda x: tuple(map(lambda y: x[0]+y[0], zip(x,y))), zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res = []\n    for i, j in zip(test_tup1, test_tup2):\n        res.append(i+j)\n    return tuple(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = ()\n    for index in range(len(test_tup1)):\n        result += (test_tup1[index] + test_tup2[index],)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        min = a\n    else:\n        min = b\n    return min\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        max = a\n    else:\n        max = b\n    return max\n    \ndef minimum_of_three(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    return min\n    \ndef maximum_of_three(a,b,c):\n    '''\n    Write a python function to find the maximum of three numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    return max\n    \ndef minimum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the minimum of four numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    min = minimum(min,d)\n    return min\n    \ndef maximum_of_four(a,b,c,d):\n    '''\n    Write a python function to find the maximum of four numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    max = maximum(max,d)\n    return max\n    \ndef minimum_of_five(a,b,c,d,e):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    min = minimum(min,d)\n    min = minimum(min,e)\n    return min\n    \ndef maximum_of_five(a,b,c,d,e):\n    '''\n    Write a python function to find the maximum of five numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    max = maximum(max,d)\n    max = maximum(max,e)\n    return max\n    \ndef swap(a,b):\n    '''\n    Write a python function to swap two numbers.\n    '''\n    a = b\n    b = a\n    return a,b\n    \ndef swap_minimum_and_maximum(a,b,c):\n    '''\n    Write a python function to swap the minimum and maximum of three numbers.\n    '''\n    min = minimum(a,b)\n    max = maximum(a,b)\n    a = max\n    b = min\n    min = minimum(a,b)\n    max = maximum(a,b)\n    \n    c = minimum_of_three(a,b,c)\n    d = maximum_of_three(a,b,c)\n    a = c\n    b = d\n    c = minimum_of_three(a,b,c)\n    d = maximum_of_three(a,b,c)\n    \n    return a,b,c,d\n    \ndef minimum_of_n_numbers(a,b,c,d):\n    '''\n    Write a python function to find the minimum of n numbers.\n    '''\n    min = minimum(a,b)\n    min = minimum(min,c)\n    min = minimum(min,d)\n    return min\n    \ndef maximum_of_n_numbers(a,b,c,d):\n    '''\n    Write a python function to find the maximum of n numbers.\n    '''\n    max = maximum(a,b)\n    max = maximum(max,c)\n    max = maximum(max,d)\n    return max\n    \ndef swap_minimum_and_maximum_of_n_numbers(a,b,c,d):\n    '''\n    Write a python function to swap the minimum and maximum of n numbers.\n    '''\n    min = minimum_of_n_numbers(a,b,c,d)\n    max = maximum_of_n_numbers(a,b,c,d)\n    a = max\n    b = min\n    min = minimum_of_n_numbers(a,b,c,d)\n    max = maximum_of_n_numbers(a,b,c,d)\n    \n    return a,b,min,max\n    \ndef program_1():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    \n    print(\"Minimum of the two numbers: \", minimum(a,b))\n    print(\"Maximum of the two numbers: \", maximum(a,b))\n    \ndef program_2():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    \n    print(\"Minimum of the three numbers: \", minimum_of_three(a,b,c))\n    print(\"Maximum of the three numbers: \", maximum_of_three(a,b,c))\n    \ndef program_3():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    d = int(input(\"Enter the fourth number: \"))\n    \n    print(\"Minimum of the four numbers: \", minimum_of_four(a,b,c,d))\n    print(\"Maximum of the four numbers: \", maximum_of_four(a,b,c,d))\n    \ndef program_4():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    d = int(input(\"Enter the fourth number: \"))\n    e = int(input(\"Enter the fifth number: \"))\n    \n    print(\"Minimum of the five numbers: \", minimum_of_five(a,b,c,d,e))\n    print(\"Maximum of the five numbers: \", maximum_of_five(a,b,c,d,e))\n    \ndef program_5():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    d = int(input(\"Enter the fourth number: \"))\n    e = int(input(\"Enter the fifth number: \"))\n    \n    print(\"Minimum of the five numbers: \", minimum_of_five(a,b,c,d,e))\n    print(\"Maximum of the five numbers: \", maximum_of_five(a,b,c,d,e))\n    \n    a,b,c,d = swap_minimum_and_maximum(a,b,c)\n    print(\"Minimum of the five numbers after swapping: \", minimum_of_five(a,b,c,d,e))\n    print(\"Maximum of the five numbers after swapping: \", maximum_of_five(a,b,c,d,e))\n    \ndef program_6():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    \n    print(\"Minimum of the three numbers: \", minimum_of_three(a,b,c))\n    print(\"Maximum of the three numbers: \", maximum_of_three(a,b,c))\n    \n    a,b,c,d = swap_minimum_and_maximum(a,b,c)\n    print(\"Minimum of the three numbers after swapping: \", minimum_of_three(a,b,c))\n    print(\"Maximum of the three numbers after swapping: \", maximum_of_three(a,b,c))\n    \ndef program_7():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    c = int(input(\"Enter the third number: \"))\n    \n    print(\"Minimum of the four numbers: \", minimum_of_four(a,b,c,d))\n    print(\"Maximum of the four numbers: \", maximum_of_four(a,b,c,d))\n    \n    a,b,c,d = swap_minimum_an"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    #add code here\n    if a<b:\n        return a\n    elif a>b:\n        return b\n    else:\n        return a"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    elif a > b:\n        return b\n    else:\n        return a"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    elif a<b:\n        return a\n    else:\n        return a\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    elif a<b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=any(elem in tuplex for elem in tuple1)\n    return check \n    \ndef check_tuplex1(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=all(elem in tuplex for elem in tuple1)\n    return check \n    \ndef check_tuplex2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=set(tuple1).issubset(tuplex)\n    return check \n    \ndef check_tuplex3(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=set(tuplex).issuperset(tuple1)\n    return check \n    \ndef check_tuplex4(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=set(tuplex)-set(tuple1)\n    return check \n    \ndef check_tuplex5(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    check=set(tuple1)-set(tuplex)\n    return check \n    \ndef get_input(tuple_type): \n    '''\n    Write a function to get input from the user.\n    '''\n    tuplex=[]\n    if tuple_type=='string': \n        while True:\n            tuplex=input('enter a string')\n            if tuplex=='q' or tuplex=='Q': \n                break\n            else: \n                tuplex=list(tuplex)\n                tuplex.sort()\n                print(tuplex)\n    elif tuple_type=='int': \n        while True:\n            tuplex=input('enter a number')\n            if tuplex=='q' or tuplex=='Q': \n                break\n            elif tuplex.isdigit(): \n                tuplex=int(tuplex)\n                print(tuplex)\n            else: \n                print('please enter an integer')\n    return tuplex \n    \ndef get_input_tuplex(tuple_type): \n    '''\n    Write a function to get input from the user.\n    '''\n    tuplex=[]\n    if tuple_type=='string': \n        while True:\n            tuplex=input('enter a string')\n            if tuplex=='q' or tuplex=='Q': \n                break\n            else: \n                tuplex=tuple(list(tuplex))\n                print(tuplex)\n    elif tuple_type=='int': \n        while True:\n            tuplex=input('enter a number')\n            if tuplex=='q' or tuplex=='Q': \n                break\n            elif tuplex.isdigit(): \n                tuplex=int(tuplex)\n                print(tuplex)\n            else: \n                print('please enter an integer')\n    return tuplex \n    \ndef get_input_tuplex_in_list(tuple_type): \n    '''\n    Write a function to get input from the user.\n    '''\n    tuplex=[]\n    if tuple_type=='string': \n        while True:\n            tuplex=input('enter a string')\n            if tuplex=='q' or tuplex=='Q': \n                break\n            else: \n                tuplex=list(tuplex)\n                print(tuplex)\n    elif tuple_type=='int': \n        while True:\n            tuplex=input('enter a number')\n            if tuplex=='q' or tuplex=='Q': \n                break\n            elif tuplex.isdigit(): \n                tuplex=int(tuplex)\n                print(tuplex)\n            else: \n                print('please enter an integer')\n    return tuplex \n    \ndef delete_first_value_from_tuple(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    del tuplex[0]\n    return tuplex \n    \ndef delete_first_value_from_tuple1(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    del tuplex\n    return tuplex \n    \ndef delete_first_value_from_tuple2(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[1:]\n    return tuplex \n    \ndef delete_first_value_from_tuple3(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[1::2]\n    return tuplex \n    \ndef delete_first_value_from_tuple4(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[1::3]\n    return tuplex \n    \ndef delete_first_value_from_tuple5(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[2:2]\n    return tuplex \n    \ndef delete_first_value_from_tuple6(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[2::4]\n    return tuplex \n    \ndef delete_first_value_from_tuple7(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[-1:]\n    return tuplex \n    \ndef delete_first_value_from_tuple8(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[-2::-2]\n    return tuplex \n    \ndef delete_first_value_from_tuple9(tuplex): \n    '''\n    Write a function to delete the first value in a tuple.\n    '''\n    tuplex=tuplex[-3::-3]\n    return tuplex \n    \ndef check_if_tuplex_is_empty(tuplex): \n    '''\n    Write a function to check if a tuple is empty.\n    '''\n    if len(tuplex)==0: \n        return True \n    else: \n        return False \n    \ndef check_if_tuplex_is_empty1(tuplex): \n    '''\n    Write a function to check if a tuple is empty.\n    '''\n    if not tuplex: \n        return True \n    else: \n        return False \n    \ndef concatenate_tuples(tuple1,tuple2): \n    '''\n    Write a function to concatenate two tuples.\n    '''\n    tuplex=tuple1+tuple2\n    return tuplex \n    \ndef concatenate_tuples1(tuple1,tuple2): \n    '''\n    Write a function to concatenate two tuples.\n    '''\n    tuplex=tuple1.extend(tuple2)\n    return tuplex \n    \ndef copy_tuplex(tuplex): \n    '''\n    Write a function to copy a tuple.\n    '''\n    tuplex1=tuple(tuplex)\n    return tuplex1 \n    \ndef copy_tuplex1(tuplex): \n    '''\n    Write a functio"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex: \n        if x in tuple1: \n            return True\n        else:\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for t in tuplex:\n        if t == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex: \n        if i == tuple1: \n            return True \n        else: \n            continue \n    return False \n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuple1:\n        if x in tuplex:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1.count(tuplex) > 0 else False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for elem in tuplex:\n        if elem == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if type(tuplex)!= tuple:\n        return False\n    if type(tuple1)!= tuple:\n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x & 1)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    sum = 0\n    while (x): \n        sum = sum + 1\n        x = x & (x - 1) \n    if (sum % 2 == 0): \n        print(\"Given number\",  \n                x, \"is an even number\") \n    else: \n        print(\"Given number\",  \n                x, \"is an odd number\") \n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # x = int(input(\"Enter a number: \"))\n    # if (x % 2!= 0): \n    #     print(\"Number is odd\")\n    # else: \n    #     print(\"Number is even\")\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2 == 0)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # if x is even then\n    if x % 2 == 0: \n        print(x, \"is even\")\n    # else\n    else: \n        print(x, \"is odd\")\n    return None\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = bin(x)[2:]\n    x_count = 0\n    for i in range(len(x)):\n        if x[i] == '1':\n            x_count += 1\n    if x_count%2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = abs(x)\n    if x == 0:\n        return 0\n    while x:\n        x, mod = divmod(x, 2)\n        if mod == 1:\n            return 1\n    return 0\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x % 2\n    return x\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return \"odd\" if x%2!= 0 else \"even\"\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    res = []\n    n = list(str(n))\n    stack = []\n    index = 0\n    for c in n:\n        if index == 0 and int(c) > int(stack[0]):\n            stack.insert(0, c)\n            index += 1\n        elif index == 0 and int(c) < int(stack[0]):\n            stack.append(c)\n            index += 1\n        elif index > 0 and int(c) > int(stack[index - 1]):\n            stack.insert(index, c)\n            index += 1\n        elif index > 0 and int(c) < int(stack[index - 1]):\n            while index > 0 and int(c) < int(stack[index - 1]):\n                stack.pop(index)\n                index -= 1\n            stack.insert(index, c)\n            index += 1\n    while len(stack) > 1:\n        res.append(stack.pop())\n    res.append(stack.pop(0))\n    return int(\"\".join(res))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if len(str(n)) <= 1:\n        return None\n    else:\n        s = list(str(n))\n        i = len(s)-1\n        while i > 0 and s[i-1] <= s[i]:\n            i -= 1\n        if i == 0:\n            return None\n        else:\n            j = len(s) - 1\n            while s[j] <= s[i-1]:\n                j -= 1\n            s[i-1], s[j] = s[j], s[i-1]\n            s[i:] = s[len(s)-1:i-1:-1]\n            return int(\"\".join(s))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return \"\".join(sorted(str(n)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    import math\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n), reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # return str(int(''.join(sorted(str(n), reverse=True))))\n    n = str(n)\n    bigger = []\n    # create a list of each digit\n    for d in n:\n        bigger.append(int(d))\n    # sort the list of digits from biggest to smallest\n    bigger = sorted(bigger, reverse=True)\n    # convert the list of digits into a string\n    bigger = ''.join(str(d) for d in bigger)\n    # create the next biggest number\n    return bigger\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    bigger = sorted(digits, reverse=True)\n    bigger = list(map(str, bigger))\n    return int(\"\".join(bigger))\n    # n = str(n)\n    # lst = [int(d) for d in str(n)]\n    # lst.sort(reverse=True)\n    # return int(\"\".join(map(str, lst)))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    number = [int(i) for i in str(n)]\n    number.sort()\n    number = number[::-1]\n    result = ''.join([str(i) for i in number])\n    return int(result)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    i = 1\n    while i < len(n_str):\n        if n_str[i] < n_str[i-1]:\n            return int(''.join(sorted(n_str, reverse=True)))\n        else:\n            i += 1\n    return -1\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    i = len(n)-1\n    while i > 0 and n[i-1] >= n[i]:\n        i -= 1\n    if i == 0:\n        return -1\n    j = len(n)-1\n    while n[j] <= n[i-1]:\n        j -= 1\n    n[i-1],n[j] = n[j],n[i-1]\n    n[i:] = sorted(n[i:])\n    return int(''.join(n))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    dict_num1 = {}\n    dict_num2 = {}\n    min_heap = []\n    for i in nums1:\n        if i in dict_num1:\n            dict_num1[i] += 1\n        else:\n            dict_num1[i] = 1\n    for j in nums2:\n        if j in dict_num2:\n            dict_num2[j] += 1\n        else:\n            dict_num2[j] = 1\n    for m in dict_num1:\n        if m in dict_num2:\n            heapq.heappush(min_heap, (dict_num1[m], m, dict_num2[m]))\n    result = []\n    while len(result) < k and min_heap:\n        pair = heapq.heappop(min_heap)\n        result.append((pair[1], pair[2]))\n    return result\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    assert len(nums1)==len(nums2)\n    n = len(nums1)\n    pairs = []\n    h = []\n    for i in range(n):\n        for j in range(nums2[i]):\n            heapq.heappush(h,(nums1[i]+nums2[j],i,j))\n    for i in range(k):\n        pairs.append([nums1[heapq.heappop(h)[1]],nums2[heapq.heappop(h)[2]]])\n    return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    result = []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    heap = []\n    heapq.heapify(heap)\n    count = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if count < k:\n                heapq.heappush(heap, (num1 + num2, [num1, num2]))\n                count += 1\n            else:\n                heapq.heappushpop(heap, (num1 + num2, [num1, num2]))\n    return [pair[1] for pair in heap]\ndef find_k_smallest_pairs(nums1, nums2, k):\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    return heapq.nsmallest(k, ((nums1 + nums2)[i], (nums1 + nums2)[j], i, j) for i in range(len(nums1)) for j in range(len(nums2)))\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                result.append([nums1[i], nums2[j]])\n        result.sort(key = lambda x: x[0] + x[1])\n        return result[:k]\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    pairs = []\n    for num1 in nums1:\n        for num2 in nums2:\n            pairs.append((num1 + num2, num1, num2))\n    pairs.sort()\n    return [pairs[i][1:] for i in range(k)]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        result = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                result.append([nums1[i], nums2[j]])\n        result.sort(key = lambda x: x[0] + x[1])\n        return result[:k]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n                else:\n                    heapq.heappushpop(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n        return [pair[1:] for pair in heap]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n                else:\n                    if -(nums1[i] + nums2[j]) > heap[0][0]:\n                        heapq.heappushpop(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n        return [pair[1:] for pair in heap]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n                else:\n                    if -(nums1[i] + nums2[j]) > heap[0][0]:\n                        heapq.heappushpop(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n        return [pair[1:] for pair in heap]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n                else:\n                    if -(nums1[i] + nums2[j]) > heap[0][0]:\n                        heapq.heappushpop(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n        return [pair[1:] for pair in heap]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n                else:\n                    if -(nums1[i] + nums2[j]) > heap[0][0]:\n                        heapq.heappushpop(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n        return [pair[1:] for pair in heap]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n                else:\n                    if -(nums1[i] + nums2[j]) > heap[0][0]:\n                        heapq.heappushpop(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n        return [pair[1:] for pair in heap]\nclass Solution:\n    def kSmallestPairs(self, nums1, nums2, k):\n        if not nums1 or not nums2 or k <= 0:\n            return []\n        heap = []\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if len(heap) < k:\n                    heapq.heappush(heap, ("
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    p = []\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] + nums2[j] < -k:\n            j += 1\n        else:\n            p.append((nums1[i], nums2[j]))\n            i += 1\n            j += 1\n    print(p)\n    return p\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return\n    heap = []\n    heapq.heapify(heap)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        for j in range(min(k, len(nums2))):\n            if len(heap) < k:\n                heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n            else:\n                if nums1[i] + nums2[j] < -heap[0][0]:\n                    break\n                heapq.heappop(heap)\n                heapq.heappush(heap, (-(nums1[i] + nums2[j]), nums1[i], nums2[j]))\n    return [heapq.heappop(heap)[1:] for i in range(k)]\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    \n    if len(nums1) < len(nums2):\n        heapq.heappush(pq, (nums1[0] + nums2[0], [nums1[0], nums2[0]]))\n    else:\n        heapq.heappush(pq, (nums1[0] + nums2[0], [nums1[0], nums2[0]]))\n    \n    for i in range(1, len(nums1)):\n        if len(pq) < k:\n            if nums1[i] + nums2[0] < pq[0][0]:\n                continue\n            heapq.heappush(pq, (nums1[i] + nums2[0], [nums1[i], nums2[0]]))\n        else:\n            if nums1[i] + nums2[0] < pq[0][0]:\n                heapq.heappop(pq)\n                heapq.heappush(pq, (nums1[i] + nums2[0], [nums1[i], nums2[0]]))\n    \n    result = []\n    for pair in pq:\n        result.append(pair[1])\n    \n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 0\n    min_list = []\n    for item in list1:\n        if isinstance(item, tuple):\n            min_prod = item[0]*item[1]\n            min_list.append(min_prod)\n    min_list.sort()\n    return min_list[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return(min(i*j for i, j in list1))\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_prod = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if i!= j:\n                min_prod = min(min_prod, list1[i][0] * list1[j][1])\n    return min_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0] * list1[0][1]\n    for i in range(1,len(list1)):\n        if min_product > list1[i][0] * list1[i][1]:\n            min_product = list1[i][0] * list1[i][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #1st Approach: O(n)\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        result = min(list1[0]*list1[1],list1[0]*list1[2],list1[1]*list1[2])\n        return result\n    \n    #2nd Approach: O(nlog(n))\n    list1.sort()\n    return list1[0]*list1[1]\n    \n    #3rd Approach: O(n^2)\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        temp = list1[0]*list1[1]\n        for i in range(2,len(list1)):\n            temp = min(temp,list1[i]*list1[i-1])\n        return temp\n        \nif __name__ == '__main__':\n    list1 = [4, 2, 3]\n    list2 = [6, 7, 9]\n    list3 = [1, 4, 5, 8, 3, 6]\n    print(\"Minimum product of two tuples in a list is: \",min_product_tuple(list3)"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    return list1[0][0] * list1[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    def multiply(a, b):\n        return a * b\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tup = []\n    for i in list1:\n        for j in list1:\n            if i == j:\n                pass\n            else:\n                tup.append((i,j))\n    prod = 1\n    for k in tup:\n        prod = k[0]*k[1]\n    print(tup)\n    return prod\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort()\n    result = list1[0] * list1[-1]\n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #initialize a tuple and set min to be the first tuple\n    min_tup = tuple(list1[0])\n    min = list1[0]\n    #for every tuple in the list\n    for tup in list1:\n        #if the tuple is smaller than the min then it becomes the new min\n        if tup < min:\n            min = tup\n            #update the min tuple\n            min_tup = tup\n    #print the min tuple\n    print(min_tup)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # define min value here\n    min_val = listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    print(\"min_val is: \",min(listval))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    val = listval[0]\n    for i in listval:\n        if i < val:\n            val = i\n    return val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval=0\n    if listval:\n        minval=listval[0]\n        for i in range(0,len(listval)):\n            if listval[i]<minval:\n                minval=listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    m = listval[0]\n    for i in listval:\n        if i < m:\n            m = i\n    return m\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    assert type(listval) is list, \"Input is not a list\"\n    assert len(listval)!= 0, \"Input list is empty\"\n    minval = listval[0]\n    for i in range(len(listval)):\n        if minval > listval[i]:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\ndef fibonacci_num(num):\n    '''\n    Write a function to find the nth fibonacci number where n is a positive integer.\n    '''\n    pass\ndef palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    pass\ndef sum_all(listval):\n    '''\n    Write a function to find the sum of all the numbers in the list.\n    '''\n    pass\ndef fibonacci_sum(num):\n    '''\n    Write a function to calculate the sum of all the fibonacci numbers up to nth number.\n    '''\n    pass\ndef decimal_to_binary(num):\n    '''\n    Write a function to convert a decimal number to binary.\n    '''\n    pass\ndef binary_to_decimal(binary):\n    '''\n    Write a function to convert a binary number to decimal.\n    '''\n    pass\ndef multiply_matrix(mat1, mat2):\n    '''\n    Write a function to multiply two matrices using a list comprehension.\n    '''\n    pass\ndef test_mult_matrix():\n    '''\n    Write a function to test the multiply_matrix function.\n    '''\n    pass\ndef factorial(num):\n    '''\n    Write a function to find the factorial of a positive number.\n    '''\n    pass\ndef test_factorial():\n    '''\n    Write a function to test the factorial function.\n    '''\n    pass\ndef num_steps(num):\n    '''\n    Write a function to find the number of steps to reach 1 using the given number.\n    '''\n    pass\ndef test_num_steps():\n    '''\n    Write a function to test the num_steps function.\n    '''\n    pass\ndef is_prime(num):\n    '''\n    Write a function to determine whether a given number is prime or not.\n    '''\n    pass\ndef test_is_prime():\n    '''\n    Write a function to test the is_prime function.\n    '''\n    pass\ndef find_max_in_list(listval):\n    '''\n    Write a function to find the maximum element in a given list.\n    '''\n    pass\ndef test_find_max_in_list():\n    '''\n    Write a function to test the find_max_in_list function.\n    '''\n    pass\ndef is_even(num):\n    '''\n    Write a function to check whether the given number is even or not.\n    '''\n    pass\ndef test_is_even():\n    '''\n    Write a function to test the is_even function.\n    '''\n    pass\ndef is_pali(string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    pass\ndef test_is_pali():\n    '''\n    Write a function to test the is_pali function.\n    '''\n    pass\ndef is_power(num, base):\n    '''\n    Write a function to check whether a number is a power of a given base.\n    '''\n    pass\ndef test_is_power():\n    '''\n    Write a function to test the is_power function.\n    '''\n    pass\ndef find_longest_word(listval):\n    '''\n    Write a function to find the longest word in a given list of strings.\n    '''\n    pass\ndef test_find_longest_word():\n    '''\n    Write a function to test the find_longest_word function.\n    '''\n    pass\ndef sum_digits(num):\n    '''\n    Write a function to find the sum of the digits of a given number.\n    '''\n    pass\ndef test_sum_digits():\n    '''\n    Write a function to test the sum_digits function.\n    '''\n    pass\ndef remove_empty_strings(listval):\n    '''\n    Write a function to remove all the empty strings from the given list of strings.\n    '''\n    pass\ndef test_remove_empty_strings():\n    '''\n    Write a function to test the remove_empty_strings function.\n    '''\n    pass\ndef find_first_non_repeating_letter(string):\n    '''\n    Write a function to find the first non-repeating character in a given string.\n    '''\n    pass\ndef test_find_first_non_repeating_letter():\n    '''\n    Write a function to test the find_first_non_repeating_letter function.\n    '''\n    pass\ndef rev_list(listval):\n    '''\n    Write a function to reverse a given list.\n    '''\n    pass\ndef test_rev_list():\n    '''\n    Write a function to test the rev_list function.\n    '''\n    pass\ndef even_odd_count(listval):\n    '''\n    Write a function to count the even and odd numbers in a given list.\n    '''\n    pass\ndef test_even_odd_count():\n    '''\n    Write a function to test the even_odd_count function.\n    '''\n    pass\ndef remove_duplicates(listval):\n    '''\n    Write a function to remove all the duplicate elements from a given list.\n    '''\n    pass\ndef test_remove_duplicates():\n    '''\n    Write a function to test the remove_duplicates function.\n    '''\n    pass\ndef check_pangram(string):\n    '''\n    Write a function to check whether a given string is a pangram or not.\n    '''\n    pass\ndef test_check_pangram():\n    '''\n    Write a function to test the check_pangram function.\n    '''\n    pass\ndef check_anagram(string1, string2):\n    '''\n    Write a function to check whether two strings are anagrams or not.\n    '''\n    pass\ndef test_check_anagram():\n    '''\n    Write a function to test the check_anagram function.\n    '''\n    pass\ndef check_list_pangram(listval):\n    '''\n    Write a function to check whether a given list is a pangram or not.\n    '''\n    pass\ndef test_check_list_pangram():\n    '''\n    Write a function to test the check_list_pangram function.\n    '''\n    pass\ndef remove_duplicates_no_sort(listval):\n    '''\n    Write a function to remove all the duplicate elements in a given list.\n    '''\n    pass\ndef test_remove_duplicates_no_sort():\n    '''\n    Write a function to test the remove_duplicates_no_sort function.\n    '''\n    pass\ndef find_first_occurrence(listval, num):\n    '''\n    Write a function to find the first occurrence of a given number in a given list.\n    '''\n    pass\ndef test_find_first_occurrence():\n    '''\n    Write a function to test the find_first_occurrence function.\n    '''\n    pass\ndef find_last_occurrence(listval, num):\n    '''\n    Write a function to find the last occurrence of a given number in a given list.\n    '''\n    pass\ndef test_find_last_occurrence():\n    '''\n    Write a function to test the find_last_occurrence function.\n    '''\n    pass\ndef filter_list(listval, filter_func):\n    '''\n    Write a function to filter a given list of strings based on the filter function.\n    '''\n    pass\ndef test_filter_list():\n    '''\n    Write a function to test the filter_list function.\n    '''\n    pass\ndef filter_out_vowels(listval):\n    '''\n    Write a function to filter a given list of strings based on the filter function.\n    '''\n    pass\ndef test_filter_out_vowels():\n    '''\n    Write a function to test the filter_out_vowels function.\n    '''\n    pass\ndef numbers_to_strings(listval):\n    '''\n    Writ"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    return ''.join([i.title() for i in word.split('_')])\n    \n    \ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    \n    return re.sub('(?!^)([A-Z]+)', r'_\\1', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    snake_case_str = re.sub(r'(_\\w)',lambda match: match.group(1)[1].upper(),word)\n    snake_case_str = snake_case_str.title()\n    return snake_case_str\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = []\n    for index, char in enumerate(word):\n        if index == 0:\n            camel_case.append(char.upper())\n        elif char.isupper():\n            camel_case.append(char.lower())\n        else:\n            camel_case.append(char)\n    return \"\".join(camel_case)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'\\_([a-z])', lambda m: m.group(1).upper(), word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Concatenate words with _ between them\n    return ''.join([word.capitalize() for word in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # lower\n    # split\n    # first char lower\n    # rest of chars upper\n    # join\n    # return\n    return ''.join([word[0].lower()+word[1:].capitalize() for word in word.split('_')])\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # findall() has been used \n    # with valid conditions for urls in string \n    regex = r\"(?<!^)(?=[A-Z])\"\n    return re.sub(regex, '_', word).lower()\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    splited_word = list(word)\n    #print(splited_word)\n    splited_word.insert(0, splited_word.pop(splited_word.index('_')))\n    #print(splited_word)\n    return \"\".join(splited_word)\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #list_words = word.split(\"_\")\n    #print(list_words)\n    #print(word)\n    \n    #return ''.join(map(str.capitalize, list_words))\n    #return \"\".join(w.capitalize() for w in word.split(\"_\"))\n    #return \"\".join(map(str.capitalize, word.split(\"_\")))\n    return re.sub(r'(_\\w)',lambda x:x.group(1)[1].upper(), word)\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [n for n in l if n % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(filter(lambda x: (x % 2 == 0), l))\n    return l\n    \n    \ndef find_divisors(n):\n    '''\n    Write a python function to find the list of divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    r = []\n    for i in l:\n        if i%2 == 0:\n            r.append(i)\n    return r\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2==0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if i%2==1:\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # for i in l:\n    #     if i % 2!= 0:\n    #         l.remove(i)\n    # return l\n    return [i for i in l if i % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = [i for i in l if i%2 == 0]\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [i for i in l if i%2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i % 2 == 0:\n            l2.append(i)\n    return l2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    print(list1[n-1])\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 0:\n        return [list1[i][n] for i in range(len(list1))]\n    elif n == 1:\n        return [list1[i][n] for i in range(len(list1))]\n    else:\n        return [list1[i][n-1] for i in range(len(list1))]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    nth_element = list1[n]\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list2 = []\n    for element in list1:\n        list2.append(element[n])\n    return list2\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    #return [list1[n-1]]\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [list1[n]]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return [element[n] for element in list1]\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(element in list2 for element in list1) \nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7]))\nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7,8]))\nprint(overlapping([1,2,3,4,5],[2,3,4,5,6,7,9]))\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return (any(a in list2 for a in list1)) \n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list2:\n        if i in list1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(elem in list2 for elem in list1) \n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        for y in list2:\n            if x == y:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    if len(list2) < len(list1):\n        for i in range(len(list1)):\n            for j in range(len(list2)):\n                if list1[i] == list2[j]:\n                    print(list1[i], \"exists in the sequence list2\")\n                    return\n        print(\"element exists in the sequence list2\")\n    else:\n        print(\"element exists in the sequence list2\")\n    return\n    \nlist1=[1,2,3,4,5,6,7,8,9]\nlist2=[3,6,9,8]\noverlapping(list1,list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return i\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3=[]\n    for i in list1:\n        for j in list2:\n            if i==j:\n                list3.append(i)\n    if list3==[]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    a=len(arr)\n    arr=sorted(arr)\n    i=0\n    j=a-1\n    while(i<j):\n        if(arr[i]*arr[j]>arr[i]*arr[j-1]):\n            return arr[i],arr[j]\n        else:\n            i+=1\n        if(arr[i]*arr[j]>arr[i-1]*arr[j]):\n            return arr[i],arr[j]\n        else:\n            j-=1\n    return \"no such pair\"\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    return arr[len(arr) - 1] * arr[len(arr) - 2]\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    l = len(arr)\n    if l < 2:\n        return None\n    max_prod = arr[0] * arr[1]\n    for i in range(l):\n        for j in range(i+1, l):\n            prod = arr[i] * arr[j]\n            if prod > max_prod:\n                max_prod = prod\n                max_pair = (arr[i], arr[j])\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    if n < 2: \n        print(\"Please pass in an array with atleast two numbers.\")\n        return\n    max_product = 0\n    max_pair = ()\n    for i in range(n - 1): \n        for j in range(i + 1, n): \n            if (arr[i] * arr[j] > max_product): \n                max_product = arr[i] * arr[j] \n                max_pair = (arr[i], arr[j]) \n    print(max_pair) \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    if n < 2: \n        return None\n    max_product = arr[0] * arr[1] \n    i = 0\n    j = 0\n    for i in range(0, n-1): \n        for j in range(i + 1, n): \n            if (arr[i] * arr[j]) > max_product: \n                max_product = arr[i] * arr[j] \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = -1\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if (arr[i] * arr[j]) > max:\n                max = arr[i] * arr[j]\n                i1,j1 = i,j\n    print(i1,j1)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    highest_product = 0\n    first = 0\n    last = len(arr) - 1\n    while first < last:\n        product = arr[first] * arr[last]\n        if product > highest_product:\n            highest_product = product\n            first += 1\n        else:\n            last -= 1\n    return highest_product\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0] * arr[1]\n    \n    for i in range(0, n-1): \n        for j in range(i + 1, n): \n            if arr[i] * arr[j] > max_product: \n                max_product = arr[i] * arr[j] \n                \n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    return max(arr, key=lambda x: (x*(x+1), -x*(x-1)))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n=len(arr) \n    if n<2:\n        print('Array is too small')\n        return\n    \n    max1=arr[0]\n    max2=arr[1]\n    max1_index=0\n    max2_index=1\n    min1=arr[0]\n    min2=arr[1]\n    min1_index=0\n    min2_index=1\n    \n    for i in range(2,n): \n        if arr[i]>max1: \n            max2=max1\n            max1=arr[i]\n            max2_index=max1_index\n            max1_index=i\n            \n        elif arr[i]>max2: \n            max2=arr[i]\n            max2_index=i\n            \n        elif arr[i]<min1: \n            min2=min1\n            min1=arr[i]\n            min2_index=min1_index\n            min1_index=i\n            \n        elif arr[i]<min2: \n            min2=arr[i]\n            min2_index=i\n    \n    print('max1={}, max2={}'.format(max1,max2))\n    print('index of max1={}, max2={}'.format(max1_index,max2_index))\n    print('min1={}, min2={}'.format(min1,min2))\n    print('index of min1={}, min2={}'.format(min1_index,min2_index))\n    if (max1*max2)<(min1*min2):\n        print('No such pair')\n        return\n    \n    print('max1*max2={}, min1*min2={}'.format(max1*max2,min1*min2))\n    print('max1*max2={}, min1*min2={}'.format(max1*max2,min1*min2))\n    \n    if max1_index<=max2_index:\n        print('max1 is at index {} and max2 is at index {}'.format(max1_index,max2_index))\n        print('{} is at index {} and {} is at index {}'.format(max1,max1_index,max2,max2_index))\n    else:\n        print('max1 is at index {} and max2 is at index {}'.format(max2_index,max1_index))\n        print('{} is at index {} and {} is at index {}'.format(max2,max2_index,max1,max1_index))\n    \n    if min1_index<=min2_index:\n        print('min1 is at index {} and min2 is at index {}'.format(min1_index,min2_index))\n        print('{} is at index {} and {} is at index {}'.format(min1,min1_index,min2,min2_index))\n    else:\n        print('min1 is at index {} and min2 is at index {}'.format(min2_index,min1_index))\n        print('{} is at index {} and {} is at index {}'.format(min2,min2_index,min1,min1_index))\n    \n    return \n    \nif __name__ == \"__main__\": \n    arr=list(map(int,input().split()))\n    max_Product(arr)\n    \n    \n'''\nSample input and output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    #Input : \n    #list_of_tuple = [(2, 4, 1), (2, 4, 7), (3, 4, 1), (3, 4, 2)]\n    #Output : 2\n    #Explanation : The common first element in the given list of tuple is 2.\n    \n    list_of_tuple = Input\n    if list_of_tuple == []:\n        return \"Empty list\"\n    else:\n        list_of_tuple = set(list_of_tuple)\n        list_of_tuple = list(list_of_tuple)\n        list_of_tuple.sort()\n        if len(list_of_tuple) == 1:\n            return list_of_tuple[0]\n        else:\n            for i in range(0,len(list_of_tuple)-1):\n                if list_of_tuple[i] == list_of_tuple[i+1]:\n                    return list_of_tuple[i]\n                else:\n                    return list_of_tuple[i]\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Input: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]\n    # Output: [1, 2, 3]\n    Result = set()\n    for Element in Input:\n        Result.add(Element[0])\n    return Result\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    print('Enter the list of tuple')\n    input_list = Input\n    print('Your input list:', input_list)\n    \n    if not input_list: \n        return None\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return []\n    else:\n        l = []\n        for k in range(len(Input)):\n            for i in range(k + 1, len(Input)):\n                if Input[k][0] == Input[i][0]:\n                    l.append(Input[k])\n                    l.append(Input[i])\n        return l\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    dict = {}\n    for group in Input:\n        if group[0] in dict.keys():\n            dict[group[0]].append(group)\n        else:\n            dict[group[0]] = []\n            dict[group[0]].append(group)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    for tup in Input: \n        if tup[0] == Input[0][0]: \n            print (tup[0]) \n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    import numpy as np\n    Input = np.array(Input)\n    Input_list = Input[:,0]\n    Input_list = list(set(Input_list))\n    Output = []\n    for i in Input_list:\n        index = np.where(Input[:,0] == i)[0]\n        Output.append(Input[index[0]])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    count = 0\n    Input.sort()\n    Tuple=tuple(Input)\n    print(Tuple)\n    for i in range(0,len(Tuple)):\n        for j in range(i+1,len(Tuple)):\n            if Tuple[i][0] == Tuple[j][0]:\n                count = count+1\n                print(Tuple[i],Tuple[j])\n                print(\"count\",count)\n            else:\n                break\n    if count == 0:\n        print(\"No common first element in given list of tuple.\")\n    else:\n        print(\"Common first element in given list of tuple.\")\n        \nInput = [('b', 1), ('a', 3), ('c', 4), ('d', 5), ('a', 7), ('c', 9)]\ngroup_tuples(Input)"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output=[]\n    for x in range(len(Input)):\n        if Input[x][0] not in Output:\n            Output.append(Input[x][0])\n    print(\"Common first elements in the tuple is: \", Output)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initializing blank dictionary\n    dic = {}\n    for i in Input:\n        # Assigning tuple values to key\n        dic[i[0]] = i[1]\n    return dic\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    \n    max_len = len(lst[0])\n    for i in range(len(lst)):\n        if(len(lst[i]) > max_len):\n            max_len = len(lst[i])\n    \n    for i in range(len(lst)):\n        if(len(lst[i]) == max_len):\n            return i\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    a = max(lst, key = len)\n    return a\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for element in lst:\n        if(max<len(element)):\n            max = len(element)\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n    return max\nlst=['hello','world','coding']\nprint(Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_str = ''\n    for str1 in lst:\n        if len(str1) > max_len:\n            max_len = len(str1)\n            max_str = str1\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if lst==[]:\n        return -1\n    lst.sort(reverse=True)\n    length_list=len(lst)\n    i=0\n    max_length=0\n    while(i<length_list):\n        if(len(lst[i])>max_length):\n            max_length=len(lst[i])\n        i+=1\n    return max_length\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst.sort(key=len)\n    return lst[-1]\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # max_length = 0\n    # max_item = 0\n    # for item in lst:\n    #     if len(item) > max_length:\n    #         max_length = len(item)\n    #         max_item = item\n    # return max_item\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in lst:\n        if len(i) > max:\n            max = len(i)\n            res = i\n    return res\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum_of_round_numbers = 0\n    #print(\"Original list: \", list1)\n    rounded_list = []\n    for i in list1:\n        i = round(i, 1)\n        rounded_list.append(i)\n    #print(\"Rounded list: \", rounded_list)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i)\n        total += i\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    length = len(list1)\n    sum_of_list = sum(list1)\n    rounded_list = []\n    for x in list1:\n        rounded_list.append(round(x))\n    rounded_sum = sum(rounded_list)\n    print(length * rounded_sum)\nround_and_sum([0.3, 0.4, 0.5, 0.7, 0.9, 1.2, 1.4, 1.5, 1.7, 1.9])\nround_and_sum([0.3, 0.4, 0.5, 0.7, 0.9, 1.2, 1.4, 1.5, 1.7, 1.9, 10])\nround_and_sum([0.3, 0.4, 0.5, 0.7, 0.9, 1.2, 1.4, 1.5, 1.7, 1.9, 10, 4.3])"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        i = round(i,1)\n        total += i\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for n in list1:\n        n = round(n)\n        sum += n\n    print(f\"{sum} * {len(list1)}\")\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [1.4, 2.7, 3.8, 4.5, 1.3]\n    sum1 = 0\n    for x in list1:\n        list1[list1.index(x)] = round(x)\n        sum1 += list1[list1.index(x)]\n    print(sum1 * len(list1))\n    return None\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum = 0\n    for i in list1:\n        sum += round(i)\n    print(sum*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum1 = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        sum1 += list1[i]\n    print(sum1 * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_numbers = []\n    for num in list1:\n        rounded_num = round(num)\n        rounded_numbers.append(rounded_num)\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    if not list1:\n        return 0\n    total = 0\n    for x in list1:\n        total += round(x)\n    return total * len(list1)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n * (n+1) * (2*n + 1) // 6\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2==0):\n            sum=sum+i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(0,n):\n        if(i%2==0):\n            sum+=i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum+=i*i*i\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    \n    # return the sum of the cube of all the even numbers upto n.\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i ** 3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i**3 for i in range(1,n+1) if i%2==0)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum=0\n    for i in range(1,n+1):\n        if i%2==0:\n            cube_sum=cube_sum+i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n**3\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # cubes = [num**3 for num in range(1, n+1)]\n    # sum_of_cubes = sum(cubes)\n    # return sum_of_cubes\n    # using functions\n    def cube_Sum_1(n):\n        return sum(num**3 for num in range(2, n+1, 2))\n    return cube_Sum_1(n)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    returned_str = \"\"\n    for element in test_tup:\n        returned_str += str(element) + \",\"\n    return returned_str\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ()\n    for i in test_tup:\n        new_tup += (i, \",\")\n    return new_tup[:-1]\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ':'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_str = \"\"\n    for i in test_tup:\n        new_str = new_str + str(i) + \".\"\n    print(new_str)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    string_delimiter = '-'\n    new_string = string_delimiter.join(test_tup)\n    return new_string\n    \n    \n    \ndef test_concatenate_tuple():\n    assert concatenate_tuple(('Bekir','G\u00fclay','Cem')) == 'Bekir-G\u00fclay-Cem'\n    assert concatenate_tuple(('Lena','Vali','Veli')) == 'Lena-Vali-Veli'\n    \ntest_concatenate_tuple()\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \n    \ndef string_reverse(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    return string[::-1]\n    \n    \ndef list_concatenation(test_list):\n    '''\n    Write a function to concatenate two lists\n    '''\n    return test_list + test_list\n    \n    \ndef list_append(test_list, value):\n    '''\n    Write a function to append a value to the end of list.\n    '''\n    test_list.append(value)\n    return test_list\n    \n    \ndef list_length(test_list):\n    '''\n    Write a function to return the length of list.\n    '''\n    return len(test_list)\n    \n    \ndef list_delete(test_list, value):\n    '''\n    Write a function to delete the first occurrence of value from the list.\n    '''\n    test_list.remove(value)\n    return test_list\n    \n    \ndef list_insert(test_list, index, value):\n    '''\n    Write a function to insert a value at index in the list.\n    '''\n    test_list.insert(index, value)\n    return test_list\n    \n    \ndef list_pop(test_list):\n    '''\n    Write a function to delete the last element in the list.\n    '''\n    return test_list.pop()\n    \n    \ndef list_extend(test_list1, test_list2):\n    '''\n    Write a function to extend the list1 with elements of list2.\n    '''\n    test_list1.extend(test_list2)\n    return test_list1\n    \n    \ndef list_clear(test_list):\n    '''\n    Write a function to clear all elements of the list.\n    '''\n    test_list.clear()\n    return test_list\n    \n    \ndef list_index(test_list, value):\n    '''\n    Write a function to return the index of the first occurrence of value in the list.\n    '''\n    return test_list.index(value)\n    \n    \ndef list_count(test_list, value):\n    '''\n    Write a function to return the number of occurrences of value in the list.\n    '''\n    return test_list.count(value)\n    \n    \ndef list_sort(test_list, reverse = False):\n    '''\n    Write a function to sort the list.\n    '''\n    return sorted(test_list, reverse = reverse)\n    \n    \ndef list_reverse(test_list):\n    '''\n    Write a function to reverse the elements of list.\n    '''\n    return test_list[::-1]\n    \n    \ndef list_copy(test_list):\n    '''\n    Write a function to return a copy of list.\n    '''\n    return test_list[:]\n    \n    \ndef dict_conversion(test_dict):\n    '''\n    Write a function to convert dictionary to list of (key, value) tuples.\n    '''\n    return test_dict.items()\n    \n    \ndef dict_update(test_dict, test_dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    test_dict.update(test_dict2)\n    return test_dict\n    \n    \ndef dict_remove(test_dict, key):\n    '''\n    Write a function to remove key from the dictionary.\n    '''\n    test_dict.pop(key)\n    return test_dict\n    \n    \ndef dict_key_value_list(test_dict):\n    '''\n    Write a function to return the list of keys and values in the dictionary.\n    '''\n    return list(test_dict.items())\n    \n    \ndef dict_key_value_dict(test_dict):\n    '''\n    Write a function to return the dictionary of keys and values in the dictionary.\n    '''\n    return {key: test_dict[key] for key in test_dict}\n    \n    \ndef dict_value_key_list(test_dict):\n    '''\n    Write a function to return the list of values and keys in the dictionary.\n    '''\n    return list(test_dict.items())\n    \n    \ndef dict_value_key_dict(test_dict):\n    '''\n    Write a function to return the dictionary of values and keys in the dictionary.\n    '''\n    return {value: key for key, value in test_dict.items()}\n    \n    \ndef dict_key_value_dict_update(test_dict, test_dict2):\n    '''\n    Write a function to update the dictionary with keys and values from dict2.\n    '''\n    test_dict.update(test_dict2)\n    return test_dict\n    \n    \ndef dict_key_value_dict_remove(test_dict, key):\n    '''\n    Write a function to remove key and its value from the dictionary.\n    '''\n    test_dict.pop(key)\n    return test_dict\n    \n    \ndef dict_value_length(test_dict):\n    '''\n    Write a function to return the length of values in the dictionary.\n    '''\n    return len(test_dict.values())\n    \n    \ndef dict_value_count(test_dict, value):\n    '''\n    Write a function to return the count of values in the dictionary.\n    '''\n    return test_dict.values().count(value)\n    \n    \ndef dict_key_count(test_dict, key):\n    '''\n    Write a function to return the count of keys in the dictionary.\n    '''\n    return test_dict.keys().count(key)\n    \n    \ndef dict_pop_value(test_dict, key):\n    '''\n    Write a function to remove the key and its value from the dictionary.\n    '''\n    test_dict.pop(key)\n    return test_dict\n    \n    \ndef dict_pop_item(test_dict):\n    '''\n    Write a function to remove and return the last item from the dictionary.\n    '''\n    return test_dict.popitem()\n    \n    \ndef dict_pop_key(test_dict, key):\n    '''\n    Write a function to remove and return the value of the key from the dictionary.\n    '''\n    return test_dict.pop(key)\n    \n    \ndef dict_update_key(test_dict, key, value):\n    '''\n    Write a function to update the key with the value in the dictionary.\n    '''\n    test_dict[key] = value\n    return test_dict\n    \n    \ndef dict_update_value(test_dict, key, value):\n    '''\n    Write a function to update the value of the key in the dictionary.\n    '''\n    test_dict[key] = value\n    return test_dict\n    \n    \ndef dict_iterate(test_dict):\n    '''\n    Write a function to iterate over a dictionary.\n    '''\n    for key in test_dict:\n        print(key, ':', test_dict[key])\n        \n        \ndef dict_iterate_key(test_dict):\n    '''\n    Write a function to iterate over the keys of the dictionary.\n    '''\n    for key in test_dict.keys():\n        print(key)\n        \n        \ndef dict_iterate_value(test_dict):\n    '''\n    Write a function to iterate over the values of the dictionary.\n    '''\n    for value in test_dict.values():\n        print(value)\n        \n        \ndef dict_iterate_item(test_dict):\n    '''\n    Write a function to iterate over the items of the dictionary.\n    '''\n    for key, value in test_dict.items():\n        print(key, ':', value)\n        \n        \ndef dict_contains(test_dict, key):\n    '''\n    Write a function to check if the dictionary contains the key.\n    '''\n    return key in test_dict\n    \n    \ndef dict_contains_key(test_dict, key):\n    '''\n    Write a function to check if the dictionary contains the key.\n    '''\n    return key in test"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = ''\n    for i in range(len(test_tup)):\n        new_tup += test_tup[i]\n        if i!= len(test_tup)-1:\n            new_tup +=''\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    def average_of_cubes(n):\n        total = 0\n        for i in range(1, n + 1):\n            total += i**3\n        return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**3\n    return(sum)\n    \ndef find_Average_Of_Square(n):  \n    '''\n    Write a python function to find the average of squares of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum+=i**2\n    return(sum)\n    \ndef find_Average_Of_Cube_and_Square(n):  \n    '''\n    Write a python function to find the average of cubes and squares of first n natural numbers.\n    '''\n    return(find_Average_Of_Cube(n)/n)\n    \ndef find_Difference_Of_Square_Cube(n):  \n    '''\n    Write a python function to find the difference between average of squares and cubes of first n natural numbers.\n    '''\n    return(find_Average_Of_Square(n)-find_Average_Of_Cube(n))\n    \nprint('Cube: ',find_Average_Of_Cube(20))\nprint('Square: ',find_Average_Of_Square(20))\nprint('Cube and square: ',find_Average_Of_Cube_and_Square(20))\nprint('Difference: ',find_Difference_Of_Square_Cube(20)"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i**3)\n    return sum(lst)/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #  code here\n    i = 0\n    sum = 0\n    while i < n:\n        sum = sum + (i**3)\n        i = i + 1\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 0:\n        print(\"Sorry, the value of n should be positive\")\n    elif n == 0:\n        print(\"The average of cube of 0 is 0\")\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        average = sum/n\n        print(\"The average of cube of first n natural numbers is: \", average)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #Write your code here\n    res = 0\n    for i in range(n+1):\n        res = res + i**3\n    return res/n\n    \ndef find_Average_Of_Cube_Sum_Of_Digits(n):  \n    '''\n    Write a python function to find the average of sum of cubes of first n natural numbers.\n    '''\n    #Write your code here\n    res = 0\n    for i in range(n+1):\n        res = res + (i**3) + sum(int(j) for j in str(i**3))\n    return res/(n+1)\n    \ndef fibonacci_series(n):  \n    '''\n    Write a python function to generate a fibonacci series and return nth element in the series.\n    '''\n    #Write your code here\n    a,b = 1,1\n    for i in range(n):\n        a,b = b,a+b\n    return a\n    \ndef find_Sum_Of_Digits(n):  \n    '''\n    Write a python function to find the sum of digits of a factorial of n.\n    '''\n    #Write your code here\n    res = 1\n    for i in range(1,n+1):\n        res = res*i\n    return sum(int(j) for j in str(res))\n    \ndef print_Fibonacci_Sequence(n):  \n    '''\n    Write a python function to print the first n terms of fibonacci sequence.\n    '''\n    #Write your code here\n    print(*[i for i in range(1,n+1)],sep=\" \")\n    \ndef print_Fibonacci_Sequence_By_Recursion(n):  \n    '''\n    Write a python function to print the first n terms of fibonacci sequence.\n    '''\n    #Write your code here\n    if(n<=2):\n        return 1\n    else:\n        return (print_Fibonacci_Sequence_By_Recursion(n-1) + print_Fibonacci_Sequence_By_Recursion(n-2))\n        \ndef print_Fibonacci_Sequence_By_Recursion_With_Memoization(n,memoize):  \n    '''\n    Write a python function to print the first n terms of fibonacci sequence.\n    '''\n    #Write your code here\n    if(n<=2):\n        return 1\n    else:\n        if(n in memoize):\n            return memoize[n]\n        else:\n            res = print_Fibonacci_Sequence_By_Recursion_With_Memoization(n-1,memoize) + print_Fibonacci_Sequence_By_Recursion_With_Memoization(n-2,memoize)\n            memoize[n] = res\n            return memoize[n]\n            \ndef find_Number_of_Triangles_By_Recursion(n):  \n    '''\n    Write a python function to find the number of triangles formed by n points.\n    '''\n    #Write your code here\n    if(n<=2):\n        return n\n    else:\n        return find_Number_of_Triangles_By_Recursion(n-1) + find_Number_of_Triangles_By_Recursion(n-2)\n        \ndef find_Number_of_Triangles_By_Recursion_With_Memoization(n,memoize):  \n    '''\n    Write a python function to find the number of triangles formed by n points.\n    '''\n    #Write your code here\n    if(n<=2):\n        return n\n    else:\n        if(n in memoize):\n            return memoize[n]\n        else:\n            res = find_Number_of_Triangles_By_Recursion_With_Memoization(n-1,memoize) + find_Number_of_Triangles_By_Recursion_With_Memoization(n-2,memoize)\n            memoize[n] = res\n            return memoize[n]\n            \ndef find_Fractional_Part(n):  \n    '''\n    Write a python function to find the fractional part of a float.\n    '''\n    #Write your code here\n    return n - int(n)\n    \ndef find_GCD(a,b):  \n    '''\n    Write a python function to find the greatest common divisor of two numbers.\n    '''\n    #Write your code here\n    while(b):\n        a,b = b,a%b\n    return a\n    \ndef find_LCM(a,b):  \n    '''\n    Write a python function to find the least common multiple of two numbers.\n    '''\n    #Write your code here\n    return (a*b)//find_GCD(a,b)\n    \ndef find_LCM_for_Array(arr):  \n    '''\n    Write a python function to find the least common multiple of an array of numbers.\n    '''\n    #Write your code here\n    return reduce(lambda a,b : a*b//find_GCD(a,b),arr)\n    \ndef find_LCM_for_Array_With_Memoization(arr,memoize):  \n    '''\n    Write a python function to find the least common multiple of an array of numbers.\n    '''\n    #Write your code here\n    if(len(arr)==1):\n        return memoize[arr[0]]\n    else:\n        if(len(arr) in memoize):\n            return memoize[len(arr)]\n        else:\n            memoize[len(arr)] = reduce(lambda a,b : a*b//find_GCD(a,b),arr)\n            return memoize[len(arr)]\n            \ndef find_LCM_for_Array_With_Memoization_For_More_Elements(arr,memoize):  \n    '''\n    Write a python function to find the least common multiple of an array of numbers.\n    '''\n    #Write your code here\n    if(len(arr)==1):\n        return memoize[arr[0]]\n    else:\n        if(len(arr) in memoize):\n            return memoize[len(arr)]\n        else:\n            res = reduce(lambda a,b : a*b//find_GCD(a,b),arr)\n            for i in range(len(arr)+1,len(arr)+1+arr[-1]):\n                memoize[i] = res\n            return memoize[len(arr)]\n            \ndef find_LCM_for_Array_With_Memoization_For_More_Elements_With_For_Loop(arr,memoize):  \n    '''\n    Write a python function to find the least common multiple of an array of numbers.\n    '''\n    #Write your code here\n    if(len(arr)==1):\n        return memoize[arr[0]]\n    else:\n        if(len(arr) in memoize):\n            return memoize[len(arr)]\n        else:\n            res = reduce(lambda a,b : a*b//find_GCD(a,b),arr)\n            for i in range(len(arr)+1,len(arr)+1+arr[-1]):\n                memoize[i] = res\n            return memoize[len(arr)]\n            \ndef find_LCM_for_Array_With_Memoization_For_More_Elements_With_Recursion(arr,memoize):  \n    '''\n    Write a python function to find the least common multiple of an array of numbers.\n    '''\n    #Write your code here\n    if(len(arr)==1):\n        return memoize[arr[0]]\n    else:\n        if(len(arr) in memoize):\n            return memoize[len(arr)]\n        else:\n            res = reduce(lambda a,b : a*b//find_GCD(a,b),arr)\n            memoize[len(arr)] = res\n            return memoize[len(arr)]\n            \ndef find_LCM_For_Array_With_Recursion(arr):  \n    '''\n    Write a python function to find the least common multiple of an array of numbers.\n    '''\n    #Write your code here\n    def _find_LC"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #cube = lambda x: x**3\n    #return sum([cube(x) for x in range(n+1)])/n\n    return sum([x**3 for x in range(n+1)])/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        total += i ** 3\n    print(total / n)\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    # Code here\n    sum=0\n    for i in range(1,n+1):\n        sum+=i**3\n    return sum/n\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # test_tuple = ('I', 'am', 'a', 'test', 'tuple')\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return tuple(rear_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    lst = list(test_tuple)\n    for i in range(len(lst)):\n        print(lst[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    tuple_str = []\n    for i in test_tuple:\n        tuple_str.append(i[::-1])\n    return tuple_str\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # test_tuple = ('hello', 'world', 'tuple', 'items')\n    # return list(reversed(test_tuple))\n    return test_tuple[::-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n    \ndef test_extract_rear():\n    '''\n    Write a test function to test the above function.\n    '''\n    assert extract_rear(('Hello', 'World!')) == 'World!'\n    assert extract_rear(('Hello', 'Goodbye!')) == 'Goodbye!'\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(i[-1] for i in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1\n    return count\n    \nprint(count_element_in_list([[], [1], [2, 3, 4, 4, 5], [3], [3, 7, 8, 9], [3, 7, 8, 9], [5]], 3))"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count=0\n    for i in list1:\n        if x in i:\n            count+=1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(0, len(list1)):\n        sublist = list1[i]\n        if (x in sublist):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    \n    # mylist = []\n    # for i in nums:\n    #     if i % 2 == 0:\n    #         mylist.append(i)\n    # return mylist\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    res = []\n    for i in nums:\n        if i % 2!= 0:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    result = filter(lambda n : n % 2 == 1, nums)\n    return result\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # l = []\n    # for i in nums:\n    #     if i % 2!= 0:\n    #         l.append(i)\n    # return l\n    return [i for i in nums if i % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for n in nums:\n        if n % 2!= 0:\n            oddnumbers.append(n)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # new_list = []\n    # for i in nums:\n    #     if i % 2 == 0:\n    #         new_list.append(i)\n    # return new_list\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i%2!= 0]\n    \n    #Answer\n    # def is_even(num):\n    #     if num%2==0:\n    #         return True\n    #     return False\n    # return [i for i in nums if is_even(i)]\n    \nprint(filter_oddnumbers([1,2,3,4,5,6])) #[1,3,5]\nprint(filter_oddnumbers([10,11,12,13,14,15])) #[11,13,15]\nprint(filter_oddnumbers([1,2,3,4,5,6,7,8,9])) #[1,3,5,7,9]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda num: num%2==1, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    even_nums = []\n    for num in nums:\n        if num % 2 == 1:\n            even_nums.append(num)\n    return even_nums\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[::-1]\n    dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        a = re.split(r'\\D+', dt)\n        a[0] = str(int(a[0]))\n        a[1] = str(int(a[1]))\n        a[2] = str(int(a[2]))\n        dt = '-'.join(a)\n    except:\n        pass\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # make a copy of the date string\n    dt_new = dt[:]\n    # split date into 3 components\n    dt_list = dt_new.split('-')\n    # get the day, month, and year\n    d, m, y = dt_list[0], dt_list[1], dt_list[2]\n    # add zero padding\n    d = '0'+d if len(d)<2 else d\n    m = '0'+m if len(m)<2 else m\n    # make new date string\n    dt_new = '{}-{}-{}'.format(d, m, y)\n    return dt_new\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"\\d{4}-\\d{1,2}-\\d{1,2}\"\n    match = re.search(pattern, dt)\n    if match:\n        # print(match)\n        # print(dt[match.start():match.end()])\n        # print(dt[0:match.start()])\n        # print(dt[match.end():])\n        new_dt = dt[match.end():] + \"-\" + dt[0:match.start()] + \"-\" + dt[match.start():match.end()]\n        return new_dt\n    else:\n        return \"invalid\"\n    \ndt = \"2020-04-23\"\nprint(change_date_format(dt))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = list(dt)\n    if len(dt[0]) == 4:\n        dt[0] = dt[0][-2:]\n        dt[1] = dt[1][-2:]\n    if len(dt[1]) == 1:\n        dt[1] = dt[1].replace('0', '-')\n    if len(dt[2]) == 2:\n        dt[2] = dt[2][-2:]\n    return '-'.join(dt)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    print('dt:',dt)\n    dt[0],dt[1],dt[2] = dt[2],dt[1],dt[0]\n    dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt_list = dt.split('-')\n    date = dt_list[2]+'-'+dt_list[1]+'-'+dt_list[0]\n    return date\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    t = dt.split(\"-\")\n    return \"-\".join([t[2],t[1],t[0]])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    return \"-\".join(dt[::-1])\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = dt[::-1]\n    dt = '-'.join(dt)\n    return dt\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    if len(my_list) > 1:\n        n = len(my_list)\n        gap = n // 2\n        while gap > 0:\n            for i in range(gap, n):\n                tmp = my_list[i]\n                j = i\n                while j >= gap and my_list[j-gap] > tmp:\n                    my_list[j] = my_list[j-gap]\n                    j -= gap\n                my_list[j] = tmp\n            gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    import math\n    gap = len(my_list) // 2\n    while gap > 0:\n        for index in range(gap, len(my_list)):\n            current_value = my_list[index]\n            current_position = index\n            while current_position >= gap and my_list[current_position-gap] > current_value:\n                my_list[current_position] = my_list[current_position-gap]\n                current_position -= gap\n            my_list[current_position] = current_value\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    print(\"my list is {}\".format(my_list))\n    n = len(my_list)\n    gap = int(n / 2)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap >= 1:\n        for i in range(gap,n):\n            anchor = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > anchor:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = anchor\n        gap //= 2\n    return my_list\n    \ndef merge_sort(my_list):\n    '''\n    Write a function to sort the given array by using merge sort.\n    '''\n    if len(my_list) <= 1:\n        return my_list\n    \n    left_half = my_list[:len(my_list)//2]\n    right_half = my_list[len(my_list)//2:]\n    \n    left = merge_sort(left_half)\n    right = merge_sort(right_half)\n    return merge(left, right)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    my_list = my_list[:]\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > current_item:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = N//2\n    while gap > 0:\n        for i in range(gap,N):\n            current_item = my_list[i]\n            current_index = i\n            while current_index >= gap and my_list[current_index - gap] > current_item:\n                my_list[current_index] = my_list[current_index - gap]\n                current_index -= gap\n            my_list[current_index] = current_item\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    \n    # return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return tuple([t[0] and t[1] for t in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x[0] and x[1] for x in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(map(lambda x,y: x and y, test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    #TODO: complete this\n    result = ()\n    for t1, t2 in zip(test_tup1, test_tup2):\n        result = result + (t1 & t2,)\n    return result\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for x in test_tup1:\n            if x not in test_tup2:\n                print(x)\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([i and j for i, j in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tuple([x1 & x2 for (x1,x2) in zip(test_tup1,test_tup2)]))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(set(test_tup1) & set(test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return(test_tup1 & test_tup2)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (-b - math.sqrt(b**2 - 4 * a * c)) / (2 * a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    return (-b + discriminant**0.5)/(2*a), (-b - discriminant**0.5)/(2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    #if a = 0 then the parabola is vertical\n    if a == 0:\n        #return the x value for the y = 0\n        return -c/b\n    else:\n        #return the x value for y = 0\n        return (-b/2*a)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a**2 * b) / (4 * c)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # x = ax^2 + bx + c\n    # d = 2ax + b\n    # a, b, c = parabola\n    # d = directrix\n    # solve for x\n    x = (-b / 2 * a)\n    d = 2 * a * x + b\n    #print(d)\n    return d\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    try:\n        d = (b**2) - (4*a*c)\n        if d == 0:\n            return -1\n        else:\n            return ((-b) + math.sqrt(d)) / (2*a)\n    except ValueError:\n        return -1\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = (-b/(2*a))\n    y0 = (a*x0**2 + b*x0 + c)\n    return(x0, y0)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    D = (b ** 2) - (4 * a * c)\n    return D\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return []\n    elif discriminant == 0:\n        return [(-b)/(2*a)]\n    else:\n        x = (-b + discriminant**0.5)/(2*a)\n        y = (-b - discriminant**0.5)/(2*a)\n        return [x, y]\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = Symbol('x')\n    y = Symbol('y')\n    expr = -a*x**2 + b*x + c\n    expr_x, expr_y = expr.as_independent(x, y)\n    directrix = solve(expr_x, x)\n    return directrix\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    s1 = set(list1)\n    s2 = set(list2)\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1)!= len(list2):\n        return False\n    \n    for element in list1:\n        if element in list2:\n            return True\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # use a dictionary to keep track of how many times a number appears in list1. if the number appears once,\n    # it can be used as a key to a dictionary in list2\n    list1_occurances = {}\n    for item in list1:\n        if item in list1_occurances:\n            list1_occurances[item] += 1\n        else:\n            list1_occurances[item] = 1\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # iterate through the first list\n    for element in list1:\n        # iterate through the second list\n        for element2 in list2:\n            # if the element is found\n            if element == element2:\n                # return true\n                return True\n    # if it reaches here, return false\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for a in list1:\n        for b in list2:\n            if a == b:\n                return True\n    return False\n    \ndef get_key_of_min_value(dictionary):\n    '''\n    Write a function that takes a dictionary and returns a key with the minimum value.\n    '''\n    return min(dictionary, key = dictionary.get)\n    \ndef check_if_anagram(s1, s2):\n    '''\n    Write a function that takes two strings and returns True if they are anagrams, False otherwise.\n    '''\n    s1_char_count = {}\n    s2_char_count = {}\n    \n    for char in s1:\n        if char not in s1_char_count.keys():\n            s1_char_count[char] = 1\n        else:\n            s1_char_count[char] += 1\n            \n    for char in s2:\n        if char not in s2_char_count.keys():\n            s2_char_count[char] = 1\n        else:\n            s2_char_count[char] += 1\n            \n    return s1_char_count == s2_char_count\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    # print(set1)\n    # print(set2)\n    if len(set1.intersection(set2)) > 0:\n        return True\n    else:\n        return False\n    \ndef common_element_test():\n    assert common_element([1,2,3],[2,3]) == True\n    assert common_element([1,2,3],[1,2]) == True\n    assert common_element([1,2,3],[1,2,3,4]) == True\n    assert common_element([1,2,3],[1,4]) == False\n    assert common_element([1,2,3],[1,4,5]) == False\n    assert common_element([1,2,3],[4,5]) == False\n    print('All common element tests passed')\n    \ndef remove_elements(list1, list2):\n    '''\n    Write a function that takes two lists and returns a new list that contains all elements that are in list1 but not in list2.\n    '''\n    set1 = set(list1)\n    set2 = set(list2)\n    # print(set1)\n    # print(set2)\n    \n    # set3 = set1 - set2\n    # print(set3)\n    return set1.difference(set2)\n    \ndef remove_elements_test():\n    assert remove_elements([1,2,3],[1,2]) == [3]\n    assert remove_elements([1,2,3,4],[1,2,3]) == [4]\n    assert remove_elements([1,2,3,4],[1,2,3,4]) == []\n    assert remove_elements([1,2,3,4],[1,3,4]) == [2,3]\n    print('All remove elements test passed')\n    \n    \nif __name__ == \"__main__\":\n    list1 = [1,2,3,4,5]\n    list2 = [2,4,6,8]\n    print('common_element('+str(list1)+','+str(list2)+') =', common_element(list1,list2))\n    \n    list1 = [1,2,3,4,5]\n    list2 = [2,4,6,8]\n    print('remove_elements('+str(list1)+','+str(list2)+') =', remove_elements(list1,list2)"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return median(base1, base2) * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    if height >= 1 and base1 >= 1 and base2 >= 1:\n        if (base1 + base2) > height:\n            area = ((base1 + base2)/2) * height\n            print (area)\n        elif (base1 + base2) < height:\n            area = base1 * height + base2 * height\n            print (area)\n        else:\n            area = base1 * height\n            print (area)\n    else:\n        print (\"invalid input\")\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return base1 + base2 + height/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return(1/2*(base1+base2)*height)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if num < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i < number:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = 0\n    for i in range(len(arr)):\n        if number < arr[i]:\n            greater += 1\n    return greater\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return True if arr[-1] < number else False\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return all(number >= i for i in arr)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for num in arr:\n        if num > number:\n            count += 1\n    return count\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number > num:\n            return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    n = len(arr)\n    for i in range(0, n):\n        if arr[i] < number:\n            print(arr[i], end=\" \")\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    patterns = 'ab*?'\n    if re.search(patterns, text):\n        return 'found a match!'\n    else:\n        return('not matched!')\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = '[a-zA-Z]*b[a-zA-Z]*'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    reg = re.compile(r'ab*')\n    return reg.match(text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.search(r'ab*', text)\n    if match:\n        return match.group()\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search('a+b', text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r\"ab+\", text)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\ba+\\b', text)\n    return len(match)\n    \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\A\\w+\\b', text)\n    return len(match)\n    \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\b\\w+a\\b', text)\n    return len(match)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+\\sa\\w+', text)\n    return len(match)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[ab]+\\w+', text)\n    return len(match)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\b[a-zA-Z]*[0-9]*\\b', text)\n    return len(match)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+\\S\\w+', text)\n    return len(match)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[^0-9]+\\w+', text)\n    return len(match)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\b[a-zA-Z0-9]*a\\w+', text)\n    return len(match)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w+', text)\n    return len(match)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w*', text)\n    return len(match)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w*[a-zA-Z0-9]*a\\w+', text)\n    return len(match)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[^a-zA-Z0-9]*[a-zA-Z0-9]+', text)\n    return len(match)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\b[a-zA-Z0-9]*a\\w{1,2}\\b', text)\n    return len(match)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[ab]\\w+', text)\n    return len(match)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w+', text)\n    return len(match)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w*', text)\n    return len(match)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[^a-zA-Z0-9]*[a-zA-Z0-9]+', text)\n    return len(match)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[a-zA-Z0-9]*a\\w+', text)\n    return len(match)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[ab]+\\w+', text)\n    return len(match)\n    \ndef text_match_twenty_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[a-zA-Z0-9]*[a-zA-Z0-9]+\\w+', text)\n    return len(match)\n    \ndef text_match_twenty_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[a-zA-Z0-9]*a\\w+', text)\n    return len(match)\n    \ndef text_match_twenty_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w+[^a-zA-Z0-9]*[a-zA-Z0-9]+', text)\n    return len(match)\n    \ndef text_match_twenty_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w*[^a-zA-Z0-9]*[a-zA-Z0-9]+', text)\n    return len(match)\n    \ndef text_match_twenty_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+[a-zA-Z0-9]*[a-zA-Z0-9]+\\w+', text)\n    return len(match)\n    \ndef text_match_twenty_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall(r'\\w+a\\w+\\S\\w+', text)\n    return len(match)"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    x = re.compile(r'[ab]*[ab]+')\n    mo = x.search(text)\n    if mo!= None:\n        return mo.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = re.compile(r'a\\bb+')\n    pattern = re.compile(r'a\\b+')\n    mo = pattern.search(text)\n    if mo == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'(a.*)(b+)')\n    matches = pattern.finditer(text)\n    for match in matches:\n        print(match)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    try :\n        if(int(n)<0):\n            return 1\n        else:\n            return (n)%10\n    except Exception as e:\n        return (\"Provide valid input\")\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0:\n        last_digit = n%10\n    else:\n        last_digit = n%(-10)\n    return last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Your code goes here\n    if n < 0 :\n        n = n * -1\n    return int(str(n)[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -1\n    return n%10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = str(n)\n    return int(n[-1])\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return (n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n > 10):\n        return n % 10\n    return n\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # print(\"list1 = \", list1)\n    # ans = []\n    # for i in list1:\n    #     if i < 0:\n    #         ans.append(i)\n    # return ans\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # your code here\n    list_neg=[]\n    for i in list1:\n        if i<0:\n            list_neg.append(i)\n    return list_neg\n    \nprint(neg_nos([12, -7, 5, 64, -14])"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = list()\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list2=[]\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # list1=[]\n    # while True:\n    #     x=input(\"Enter a number: \")\n    #     if x==\"\":\n    #         break\n    #     else:\n    #         list1.append(int(x))\n    # print(list1)\n    list2=[]\n    for i in list1:\n        if i<0:\n            list2.append(i)\n    return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # list2 = [i for i in list1 if i < 0]\n    # return list2\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = [num for num in list1 if num < 0]\n    return list_neg\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_numbers = []\n    for i in list1:\n        if i < 0:\n            neg_numbers.append(i)\n    return neg_numbers\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i < 0:\n            count = count + 1\n    print(f\"The negative numbers in {list1} are {count}\")\n    print()\n    return\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for i in str1:\n        if not i in new_str:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(i for i in str1 if not i % 2)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2=\"\"\n    for i in str1:\n        if i in [str(j) for j in range(1,10)]:\n            str2+=i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str_list = list(str1)\n    final_str = []\n    for i in str_list:\n        if i not in final_str:\n            final_str.append(i)\n    final_str = ''.join(final_str)\n    return final_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in str1:\n        if i in str1[::2]:\n            str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    my_str = []\n    for x in str1:\n        if x%2 == 0:\n            my_str.append(x)\n    return my_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i%2 == 0:\n            new_str+=i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in str1:\n        if str1.index(i) % 2 == 0:\n            str2 += i\n    print(str2)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if not i in str1:\n            str2 = str2 + i\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if not char % 2])\n    # return str1[::2]\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if i + 1 < len(test_list):\n            if test_list[i] == test_list[i + 1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    x = len(test_list)\n    count = 0\n    for i in range(x):\n        for j in range(i + 1, x):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    result = set()\n    \n    for el in test_list:\n        if len(el) == 1:\n            if el[0] in result:\n                result.remove(el[0])\n        else:\n            if el[0] in result:\n                result.add(el[1])\n            if el[1] in result:\n                result.add(el[0])\n    return len(result)\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    # Start with zero\n    count = 0\n    \n    # Loop through the list\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Is the tuple a pair?\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                # If so, increment the counter\n                count += 1\n                \n    # Return the count\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1][::-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if (i[0] == i[1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    counter = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][0] == test_list[i + 1][1] and test_list[i][1] == test_list[i + 1][0]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for i in test_list:\n        if i[::-1] in test_list:\n            bidirectional_pairs.append(i)\n            test_list.pop(test_list.index(i))\n    return len(bidirectional_pairs)\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Your code goes here\n    count = 0\n    for i in test_list:\n        if i[0] == i[1]:\n            count += 1\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!= j:\n                count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return ''.join(map(str, L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #from functools import reduce\n    return int(''.join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    \n    #print(L)\n    i=0\n    x=0\n    L=list(reversed(L))\n    #print(L)\n    while i<len(L):\n        x=x+L[i]*(10**i)\n        i+=1\n    return x\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = str(L)\n    return int(L.replace('[','').replace(']',''))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join(str(l) for l in L))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = \"\"\n    for i in L:\n        s = s + str(i)\n    return int(s)\n    \nif __name__ == \"__main__\":\n    print(\"***** Task 1 *****\")\n    L = [1, 2, 3, 4]\n    print(\"List of multiple integers: \")\n    print(L)\n    print(\"\\n\" + \"Integer converted to single number: \" + str(multiple_to_single(L)))\n    \n    print(\"\\n***** Task 2 *****\")\n    L = [1, 2, 3, 4, 5, 6]\n    print(\"List of multiple integers: \")\n    print(L)\n    print(\"\\n\" + \"Integer converted to single number: \" + str(multiple_to_single(L)))"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(\"\".join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    '''\n    Input: L = [1, 2, 3, 4, 5, 6, 7, 8]\n    Output: 12345678\n    '''\n    # To store the sum of the digits\n    sum = 0\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for i in range(0,len(L)):\n        L[i] = str(L[i])\n    L = ''.join(L)\n    L = int(L)\n    return(L)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Write a regex to search for adverbial pattern:\n    pattern = r\"\\b((s(tud)|(do)|(rud)|(tsk)|(tik)|(tum)|(tsk)|(tok)|(tum))(\\'s)*)\\b\"\n    # Find the pattern in the text:\n    result = re.search(pattern, text)\n    # Print the result\n    print(result)\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = re.findall(\"ADVERB\", text)\n    adverb_index = []\n    for i in range(len(adverb)):\n        adverb_index.append(text.find(adverb[i]))\n    return adverb_index\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # find position of the first adverb in a sentence\n    text=text.split()\n    position_of_the_first_adverb=[]\n    adverb_list=['well','really','also','also','actually','really']\n    for i in text:\n        if i in adverb_list:\n            position_of_the_first_adverb.append(text.index(i))\n    return position_of_the_first_adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = []\n    text_list = text.split()\n    print(text_list)\n    for i in range(len(text_list)):\n        if text_list[i] in ['aboard', 'about', 'above', 'according', 'across', 'after', 'against', 'along', 'amid', 'among', 'anti', 'around', 'as', 'at', 'before', 'behind', 'below', 'beneath', 'beside', 'besides', 'between', 'beyond', 'but', 'by', 'concerning', 'considering', 'despite', 'down', 'during', 'except', 'excepting', 'excluding', 'following', 'for', 'from', 'in', 'inside', 'into', 'like','minus', 'near', 'of', 'off', 'on', 'onto', 'opposite', 'outside', 'over', 'past', 'per', 'plus','regarding', 'round','save','since', 'than', 'through', 'to', 'toward', 'towards', 'under', 'underneath', 'unlike', 'until', 'up', 'upon','versus', 'via', 'with', 'within', 'without']:\n            adverb_list.append(text_list[i])\n            print(text_list[i])\n    print(adverb_list)\n    print(len(adverb_list))\n    print(adverb_list[0])\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list=[\"so\",\"so far\",\"especially\",\"particularly\",\"particularly\",\"typically\",\"typically\",\"particularly\",\"particularly\",\"significantly\",\"significantly\",\"significantly\",\"significantly\",\"particularly\",\"particularly\",\"particularly\",\"particularly\",\"particularly\",\"significantly\",\"significantly\",\"significantly\",\"significantly\"]\n    adverb_position=[]\n    for x in adverb_list:\n        if re.search(r\"\\b\"+x+r\"\\b\",text):\n            adverb_position.append(re.search(r\"\\b\"+x+r\"\\b\",text).span())\n    return adverb_position\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    word = []\n    count = 0\n    for t in text:\n        if re.match(r'\\w+er', t):\n            word.append(t)\n            count += 1\n            break\n        else:\n            pass\n    # print(word)\n    return count\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    print(find_adverb_position(\"a day ahead of him who is not a nice guy\"))\n    print(find_adverb_position(\"I am at a home that is not near home\"))\n    print(find_adverb_position(\"I had a very nice, and safe, and easy day at the beach\"))\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb = []\n    regex = r\"\\b[A-Z]*[a-z]*[A-Z]+[a-z]*\\b\"\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #print(text)\n    #print(text.split())\n    #print(text.split()[0])\n    if \",\" in text:\n        text = text.replace(\",\",\"\")\n    if \":\" in text:\n        text = text.replace(\":\",\"\")\n    text = text.replace(\"?\",\"\")\n    text = text.replace(\".\",\"\")\n    if \"!\" in text:\n        text = text.replace(\"!\",\"\")\n    text = text.replace(\"-\",\"\")\n    text = text.replace(\"(\",\"\")\n    text = text.replace(\")\",\"\")\n    text = text.replace(\"/\",\"\")\n    text = text.replace(\"&\",\"\")\n    text = text.replace(\";\",\"\")\n    text = text.replace(\"-\",\"\")\n    text = text.replace(\" \",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n    text = text.replace(\"'s\",\"\")\n    text = text.replace(\"'ve\",\"\")\n    text = text.replace(\"'d\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'m\",\"\")\n    text = text.replace(\"'re\",\"\")\n    text = text.replace(\"'ll\",\"\")\n    text = text.replace(\"'t\",\"\")\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # ***\n    # Complete the function\n    # ***\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * l * l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    from math import sqrt\n    import math\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6 * (l**2))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surfacearea = 6 * l * l\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    import math\n    return 6*(l*l)\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count=0\n    for i in nums:\n        if i>0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos = sum(1 for i in nums if i > 0)\n    print(pos/len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_counter = 0\n    for num in nums:\n        if num > 0:\n            positive_counter += 1\n    return positive_counter / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_of_positive = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            num_of_positive += 1\n    ratio = num_of_positive/len(nums)\n    return ratio\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    num_positive = 0\n    for num in nums:\n        if num > 0:\n            num_positive += 1\n    return num_positive / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n    \ndef sort_nums(nums):\n    '''\n    Write a function to sort the array of integers.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_number = 0\n    for number in nums:\n        if number > 0:\n            positive_number += 1\n    return positive_number / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for n in nums:\n        if n > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max([i for i in list1 if i < 0]) \n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = [i for i in list1 if i < 0]\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = 0\n    for i in range(0, len(list1)): \n        if (list1[i] < 0) and (list1[i] > largest): \n            largest = list1[i] \n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(i for i in list1 if i < 0)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            if list1[i] >= max:\n                max = list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1, key = lambda x: x < 0)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    return max(list1, key=lambda x: -x)\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    for i in list1:\n        if i < 0:\n            return i\n    return False\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    nums = []\n    for i in list1:\n        nums.append(i)\n    nums.sort()\n    print(nums)\n    return nums[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    nums = []\n    for i in list1:\n        nums.append(i)\n    nums.sort()\n    print(nums)\n    if nums[0] < 0:\n        return nums[-1]\n    else:\n        return None\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in test_list:\n        trimmed_list.append(tuple(i[0:K]))\n    return trimmed_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for t in test_list:\n        if len(t) <= K:\n            new_list.append(t)\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return []\n    elif len(test_list) == 1:\n        if K <= 1:\n            return test_list\n        else:\n            return [test_list[0][:K]]\n    elif K < 0:\n        return []\n    else:\n        return [test_list[0][:K]] + trim_tuple(test_list[1:], K)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    print(test_list)\n    return [(k, *test_list[k:K]) for k in range(len(test_list))]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # trim the tuple\n    return [tuple(x[:K] + x[K + 1:] for x in test_list)]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if K > len(test_list):\n        return test_list\n    else:\n        return test_list[0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_tup_list = []\n    for i in test_list:\n        tup = i\n        while len(tup) > K:\n            tup = tup[:-1]\n        new_tup_list.append(tup)\n    return new_tup_list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    list = []\n    for element in test_list:\n        list.append(tuple([item for item in element if item not in element[0:K]]))\n    return list\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) <= K:\n        return test_list\n    else:\n        return test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    #return [t[0:K] for t in test_list]\n    return map(lambda x: x[0:K], test_list)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(tup1*tup2 for tup1,tup2 in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] * test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(i * j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\ndef pair_sum(tup1, tup2):\n    '''\n    Write a function to find the pair of elements in the given two tuples having sum as the given target sum.\n    '''\n    pass\ndef unique_tuples(tup, num):\n    '''\n    Write a function to find all unique tuples which have the given number of distinct elements in them.\n    '''\n    pass\ndef frequent_words(str1, k):\n    '''\n    Write a function to find the most frequent k-mers (words) in a given string.\n    '''\n    pass\ndef count_words(str1):\n    '''\n    Write a function to count the number of occurrences of each word in a string.\n    '''\n    pass\ndef min_distance(test_str1, test_str2):\n    '''\n    Write a function to calculate the minimum edit distance (minimum number of insertions, deletions and substitutions) between two strings.\n    '''\n    pass\ndef min_distance_rec(test_str1, test_str2, m, n):\n    '''\n    Write a recursive function to calculate the minimum edit distance (minimum number of insertions, deletions and substitutions) between two strings.\n    '''\n    pass\ndef min_distance_dp(test_str1, test_str2):\n    '''\n    Write a function to calculate the minimum edit distance (minimum number of insertions, deletions and substitutions) between two strings. Use dynamic programming to calculate minimum edit distance.\n    '''\n    pass\ndef max_product(test_str):\n    '''\n    Write a function to find the maximum product of the digits of a number.\n    '''\n    pass\ndef max_product_rec(test_str):\n    '''\n    Write a function to find the maximum product of the digits of a number. Use recursion to find maximum product of the digits of a number.\n    '''\n    pass\ndef max_product_dp(test_str):\n    '''\n    Write a function to find the maximum product of the digits of a number. Use dynamic programming to find maximum product of the digits of a number.\n    '''\n    pass\ndef max_product_subarray(nums):\n    '''\n    Write a function to find the maximum product of the contiguous subarray in a array of numbers.\n    '''\n    pass\ndef fizz_buzz_tree_traversal(root):\n    '''\n    Write a function to traverse the given tree in level order and print the node data values corresponding to the integers which are multiples of 3 and 5.\n    '''\n    pass\ndef insert_into_sorted_list(sorted_list, val):\n    '''\n    Write a function to insert a given number into the sorted list.\n    '''\n    pass\ndef binary_search(arr, val):\n    '''\n    Write a function to search a given value in the array using binary search.\n    '''\n    pass\ndef first_unique_character_index(test_str):\n    '''\n    Write a function to find the first non-repeating character in the given string and return its index. If all characters in the string appear more than once, return -1.\n    '''\n    pass\ndef next_greater_element(arr):\n    '''\n    Write a function to find the next greater element for each element in the array.\n    '''\n    pass\ndef next_greater_element_in_place(arr):\n    '''\n    Write a function to find the next greater element for each element in the array. Replace the values with their next greater element in the array.\n    '''\n    pass\ndef count_and_say(n):\n    '''\n    Write a function to return the nth term in the count-and-say sequence.\n    '''\n    pass\ndef count_and_say_dp(n):\n    '''\n    Write a function to return the nth term in the count-and-say sequence. Use dynamic programming to solve the problem.\n    '''\n    pass\ndef reverse_words_in_string(test_str):\n    '''\n    Write a function to reverse the words in a string in-place (ie. in the array itself).\n    '''\n    pass\ndef reverse_words_in_place(test_str):\n    '''\n    Write a function to reverse the words in a string in-place (ie. in the array itself).\n    '''\n    pass\ndef first_unique_char(test_str):\n    '''\n    Write a function to find the first non-repeating character in the given string.\n    '''\n    pass\ndef frequency_sort(test_str):\n    '''\n    Write a function to sort the given string by the frequency of characters.\n    '''\n    pass\ndef max_sub_array_sum_opt(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef k_largest_sum_subarrays(arr, k):\n    '''\n    Write a function to find the K largest subarrays (continuous subarrays) having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_brute_force(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_opt_2(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_opt_dp(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_opt_dp_improve(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef count_subarrays(arr, k):\n    '''\n    Write a function to count the number of contiguous subarrays having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_dp(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_dp_improve(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_dp_optimized(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_dp(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_dp_improve(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef max_sub_array_sum_dp_opt_2(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef min_sub_array_sum_brute_force(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef min_sub_array_sum_opt_1(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef min_sub_array_sum_opt_2(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef min_sub_array_sum_opt_3(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\ndef min_sub_array_sum_opt_4(test_arr):\n    '''\n    Write a function to find the contiguous subarray having the largest sum in the given array.\n    '''\n    pass\nde"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    print(test_tup1*test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Tuples are not of equal length\"\n    else:\n        tup3 = ()\n        for i in range(0,len(test_tup1)):\n            tup3 = tup3 + (test_tup1[i] * test_tup2[i],)\n    return tup3\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_result = []\n    for index1, val1 in enumerate(test_tup1):\n        for index2, val2 in enumerate(test_tup2):\n            index_result.append(val1*val2)\n    return tuple(index_result)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Input : tuple1 = (2, 3, 4) tuple2 = (5, 6)\n    # Output : tuple3 = (10, 18, 24)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i]),\n    return result_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    new_tup = ()\n    for index in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[index] * test_tup2[index],)\n    return new_tup\n    \ndef index_multiplication_alt(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    \ndef list_multiplication(test_list1, test_list2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [test_list1[i] * test_list2[i] for i in range(len(test_list1))]\n    \ndef list_multiplication_alt(test_list1, test_list2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return [test_list1[i] * test_list2[i] for i in range(len(test_list1))]\n    \ndef is_greater(tup1, tup2):\n    '''\n    Write a function to compare two tuples by number of items in them.\n    '''\n    if len(tup1) > len(tup2):\n        return True\n    elif len(tup1) == len(tup2):\n        for index in range(len(tup1)):\n            if tup1[index] > tup2[index]:\n                return True\n            elif tup1[index] == tup2[index]:\n                continue\n            else:\n                return False\n        return False\n    else:\n        return False\n    \ndef is_greater_alt(tup1, tup2):\n    '''\n    Write a function to compare two tuples by number of items in them.\n    '''\n    return len(tup1) > len(tup2) or (len(tup1) == len(tup2) and tup1 > tup2)\n    \ndef f(x):\n    '''\n    Write a function to calculate x raised to the power of 3.\n    '''\n    return x ** 3\n    \ndef f_alt(x):\n    '''\n    Write a function to calculate x raised to the power of 3.\n    '''\n    return x ** 3\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for element in lst: \n        if(element in tup): \n            count += 1\n    return count \n    \nprint(count_Occurrence((1,2,3,2,3,4,1,1,3,3,1,1), [1,2,3,2,3,4]))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i == tup:\n            count += 1\n    return count\ndef count_Occurrence_v2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    tup = tuple(lst)\n    for i in tup:\n        if i == tup:\n            count += 1\n    return count\ndef count_Occurrence_v3(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\ndef count_Occurrence_v4(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\ndef count_Occurrence_v5(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return lst.count(tup)\ndef count_Occurrence_v6(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return tup.count(lst)\ndef count_Occurrence_v7(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(tup)\ndef count_Occurrence_v8(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(lst)\ndef count_Occurrence_v9(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(set(tup))\ndef count_Occurrence_v10(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return len(set(lst))\ndef count_Occurrence_v11(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return max(Counter(lst).values())\ndef count_Occurrence_v12(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\ndef count_Occurrence_v13(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return count\ndef count_Occurrence_v14(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v15(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v16(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v17(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v18(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v19(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v20(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v21(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v22(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v23(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v24(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v25(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v26(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v27(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst:\n        if i in tup:\n            count += 1\n    return tup.count(lst)\ndef count_Occurrence_v28(tup, lst): \n    '''\n    Write a pytho"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(lst) \n    #returns a dictionary of key, value pairs \n    #where key is the element of the list and value is count of element in tuple\n    for key,value in counts.items(): \n        print(key, value) \n    \ntup = ('a','a','a','a','a','b','c','d') \nlst = ['a','b','c','d'] \ncount_Occurrence(tup, lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = {} \n    for ele in lst: \n        if ele in tup: \n            count[ele] = tup.count(ele) \n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup1 = (tup)\n    return Counter(lst).most_common(len(tup1))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    l = list(tup) \n    for i in lst: \n        x = l.count(i) \n        print(i, \"Occurs\", x, \"times\") \n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(tup) \n    for i in lst: \n        if i in tup: \n            print(i, \": \", cnt[i]) \n            \nlst = [1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9] \ntup = (1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9) \ncount_Occurrence(tup, lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if (ele in lst):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for ele in tup:\n        if ele in lst:\n            cnt = lst.count(ele)\n            print(\"Element {} appears {} times\".format(ele, cnt))\n        else:\n            print(\"Element {} doesn't appear\".format(ele))\n    \ntup = (12,35,64,67,78,87,89,90)\nlst = [12,35,67,89,90]\ncount_Occurrence(tup, lst)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = [num**3 for num in nums]\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num ** 3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [i**3 for i in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    print([i**3 for i in nums])\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return 2*cal_sum(n-1) - cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    n = str(n)\n    length = len(n)\n    sum = 0\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    return n*(2*n+1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return cal_sum(n-1) + cal_sum(n-2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1:\n        return 1\n    return n+cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(n*(n+1)/2)\n    \ndef cal_pent_sum(n):\n    '''\n    Write a function to calculate the sum of pentagonal numbers.\n    '''\n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    num = n\n    while n!= 0:\n        n = n // 10\n        num += n\n    return num\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n + cal_sum(n-2)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = \"\"\n    for i in range(l):\n        s += str[i]\n    return s\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    for s in str:\n        if len(s) >= l:\n            res.append(s[:l])\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [i[0:l] for i in str]\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    start = 0\n    end = l\n    if l % 2 == 0:\n        for i in range(0, l):\n            for j in range(start, end):\n                if j == (l-1):\n                    print(str[j], end=\"\")\n                else:\n                    print(str[j], end=\" \")\n            start += 2\n            end += 2\n        return\n    else:\n        for i in range(0, l):\n            for j in range(start, end):\n                if j == (l-1):\n                    print(str[j], end=\"\")\n                else:\n                    print(str[j], end=\" \")\n            start += 2\n            end += 2\n        return\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if l == []:\n        return []\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) >= l:\n        return [str[i:i+l] for i in range(0, len(str), l)]\n    else:\n        return []\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    list = []\n    for i in range(len(str)):\n        list.append(str[i:i+l])\n    return list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output_list = []\n    for i in range(l):\n        output_list.append(str[i])\n    return output_list\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) >= l:\n        return str[0:l]\n    else:\n        return \"String length is less than {}.\".format(l)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    s = []\n    for i in range(len(l)):\n        s.append(l[i][l[i].find(str)+len(str):l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].find(str)+l[i].fin"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = ''.join(text1.split())\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #text1 = text1.replace(\" \", \"\")\n    print(text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(r\"\\s\", \"\", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.replace(\" \",\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1=re.sub('\\s+','',text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = text1.split()\n    text1 =''.join(text1)\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    mystr = text1.replace(\" \", \"\")\n    return mystr\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.replace(\" \",\"\")\n    text3 = text2.replace(\"\\t\",\"\")\n    text4 = text3.replace(\"\\n\",\"\")\n    return text4\ndef is_match(text1,text2):\n    '''\n    Write a function to check whether two given strings are is_match or not.\n    '''\n    text3 = text1.replace(\" \",\"\")\n    text4 = text2.replace(\" \",\"\")\n    if text3 == text4:\n        return True\n    else:\n        return False\ndef join_words(text1):\n    '''\n    Write a function to combine all the strings in a list together into one sentence.\n    '''\n    text2 = text1.split()\n    text3 = \" \".join(text2)\n    return text3\ndef join_words_in_sentence(text1):\n    '''\n    Write a function to combine all the strings in a list together into one sentence but there should be a space between the words.\n    '''\n    text2 = text1.split()\n    text3 = \"\"\n    for i in text2:\n        text3 += i+\" \"\n    return text3\ndef split_sentences(text1):\n    '''\n    Write a function to split all the strings in a list into sentences.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    return text3\ndef split_sentences_after_period(text1):\n    '''\n    Write a function to split all the strings in a list into sentences but after a period there should be no space between the sentences.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    return text3\ndef capitalize_sentence_first_word(text1):\n    '''\n    Write a function to capitalize the first word in each sentence in a list.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5[0].capitalize())\n        text5.pop(0)\n        text6 = \" \".join(text5)\n        text4.append(text6)\n    return text4\ndef capitalize_sentence_all_words(text1):\n    '''\n    Write a function to capitalize all the words in each sentence in a list.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = i[0].capitalize()\n        i.pop(0)\n        text7 = \" \".join(text7)\n        text7 = text7 + \" \" + \" \".join(i)\n        text6.append(text7)\n    return text6\ndef check_capital(text1):\n    '''\n    Write a function to check if all words in the list are capitalized or not.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = i[0].isupper()\n        i.pop(0)\n        text7 = \" \".join(i)\n        text6.append(text7)\n    if all(text6):\n        return True\n    else:\n        return False\ndef check_capital_after_period(text1):\n    '''\n    Write a function to check if all words in the list are capitalized after the period or not.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = i[0].isupper()\n        i.pop(0)\n        text7 = \" \".join(i)\n        text6.append(text7)\n    if all(text6):\n        return True\n    else:\n        return False\ndef check_capital_after_period2(text1):\n    '''\n    Write a function to check if all words in the list are capitalized after the period or not.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = i[0].isupper()\n        i.pop(0)\n        text7 = \" \".join(i)\n        text6.append(text7)\n    if all(text6):\n        return True\n    else:\n        return False\ndef check_capital_before_period(text1):\n    '''\n    Write a function to check if all words in the list are capitalized before the period or not.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = i[0].isupper()\n        text8 = i[1:].islower()\n        i.pop(0)\n        text7 = \" \".join(i)\n        text8 = \" \".join(text8)\n        text6.append(text7)\n        text6.append(text8)\n    if all(text6):\n        return True\n    else:\n        return False\ndef check_capital_before_period2(text1):\n    '''\n    Write a function to check if all words in the list are capitalized before the period or not.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = i[0].isupper()\n        text8 = i[1:].islower()\n        i.pop(0)\n        text7 = \" \".join(i)\n        text8 = \" \".join(text8)\n        text6.append(text7)\n        text6.append(text8)\n    if all(text6):\n        return True\n    else:\n        return False\ndef count_words(text1):\n    '''\n    Write a function to count the number of words in the list.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n    text4 = []\n    for i in text3:\n        text5 = i.split()\n        text4.append(text5)\n    text6 = []\n    for i in text4:\n        text7 = len(i)\n        text6.append(text7)\n    text8 = sum(text6)\n    return text8\ndef check_lowercase_before_period(text1):\n    '''\n    Write a function to check if all words in the list are lowercase before the period or not.\n    '''\n    text2 = text1.split(\". \")\n    text3 = []\n    for i in text2:\n        text3.append(i)\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = text1.split()\n    s =''.join(text2)\n    return s\n    \ndef reverse_string(text1):\n    '''\n    Write a function to reverse the given string.\n    '''\n    if len(text1) == 0:\n        return ''\n    else:\n        return text1[-1]+reverse_string(text1[:-1])\n        \ndef is_palindrome(text1):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    if len(text1) <= 1:\n        return True\n    elif text1[0] == text1[-1]:\n        return is_palindrome(text1[1:-1])\n    else:\n        return False\n    \ndef search_keyword(text1, keyword):\n    '''\n    Write a function to check if the given text contains the given keyword or not. If it does, return the index of the first occurrence of the keyword in the text. If it does not, return -1.\n    '''\n    if text1.find(keyword) == -1:\n        return -1\n    else:\n        return text1.find(keyword)\n        \ndef replace_keyword(text1, keyword1, keyword2):\n    '''\n    Write a function to replace all occurrences of keyword1 with keyword2.\n    '''\n    return text1.replace(keyword1, keyword2)\n        \ndef concat_keyword(text1, keyword1, keyword2):\n    '''\n    Write a function to concatenate text1 with a space and a keyword1.\n    '''\n    return text1 +'' + keyword1\n        \ndef is_valid_password(text1):\n    '''\n    Write a function to check if the given string is a valid password. A valid password must contain at least eight characters, and should not contain any non-alphanumeric characters, such as #,@,%#,$,^,&,*,(, ), etc.\n    '''\n    if len(text1) >= 8:\n        return all(re.search(r'[0-9]+', text1) is None)\n    else:\n        return False\n        \ndef is_valid_text(text1):\n    '''\n    Write a function to check if the given string is a valid text. The text should contain only the following symbols: +,-,*,/,(, ),{,},[,],|,$,#,=,%,&,<,>,!,@,?,. If the text does not contain any of the above mentioned symbols, the function should return False. If the text contains any of the above mentioned symbols, the function should return True.\n    '''\n    if re.search(r'[()\\[\\]{}|/+,-,\\*,/,=%,&<>!,@?,?.,.+|#]+', text1) is not None:\n        return False\n    else:\n        return True\n    \ndef is_valid_url(text1):\n    '''\n    Write a function to check if the given string is a valid URL. The URL should contain http:// or https:// as well as a valid domain name. The function should return False if the given string does not contain http:// or https://.\n    '''\n    return re.search(r'^(http|https)://', text1) is not None\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        actual_cost = int(actual_cost)\n    except:\n        return 0\n    try:\n        sale_amount = int(sale_amount)\n    except:\n        return 0\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = sale_amount - actual_cost\n    return loss_amount if loss_amount >0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount>actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n    else:\n        loss = 0\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return sale_amount-actual_cost if sale_amount>actual_cost else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount : \n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount-actual_cost\n    return 0\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    res = 0\n    for i in range(2, int(math.sqrt(n))+1): \n        if (n % i == 0) : \n            if (i % 2 == 0) : \n                res += i \n            else : \n                res += n // i \n                res += n \n    return res \n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    assert(n > 0)\n    if (n == 1):\n        return 0\n    if (n == 2):\n        return 1\n    s = 0\n    for i in range(1, math.ceil(math.sqrt(n))+1):\n        if (n % i == 0):\n            s += i\n            if (i!= n/i):\n                s += n/i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,int(math.sqrt(n)) + 1):\n        if n%i == 0 and i%2 == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1, n) :\n        if(n%i==0):\n            if(i%2==0):\n                sum+=i\n    return sum\ndef sumofFactors_another(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum=0\n    for i in range(1, n//2+1) :\n        if(n%i==0):\n            if(i%2==0):\n                sum+=i\n    return sum\ndef sumofFactors_another2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n) if n%x==0 and x%2==0)\ndef sumofFactors_another3(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n) if n%x==0 and x%2==0)\ndef sumofFactors_another4(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n) if n%x==0 and x%2==0)\ndef sumofFactors_another5(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another6(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another7(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another8(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another9(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another10(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another11(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another12(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another13(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another14(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another15(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another16(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another17(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another18(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another19(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another20(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another21(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another22(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another23(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another24(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another25(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another26(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another27(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(x for x in range(1, n//2+1) if n%x==0 and x%2==0)\ndef sumofFactors_another28(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    factors = []\n    i = 1\n    while(i < n + 1):\n        if n % i == 0:\n            if i % 2 == 0:\n                factors.append(i)\n        i += 1\n    return sum(factors)\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Base case \n    if (n == 0 or n == 1) : \n        return 0\n    \n    s = 0\n    while (n % 2 == 0) : \n        s = s + 2\n        n = n / 2\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if n % i == 0 : \n            if i % 2 == 0 : \n                sum += i\n    return sum \n    \ndef checkPrime(n): \n    '''\n    Write a python function to check a number is prime or not.\n    '''\n    flag = True\n    if n == 1 : \n        flag = False\n    for i in range(2, int(math.sqrt(n)) + 1) : \n        if n % i == 0 : \n            flag = False\n            break\n    return flag \n    \ndef palindrome(n) : \n    '''\n    Write a python function to check a number is palindrome or not.\n    '''\n    temp = n\n    rev = 0\n    while n > 0 : \n        rev = rev * 10 + (n % 10)\n        n = int(n/10)\n    if temp == rev : \n        return True\n    return False\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if(n % i == 0):\n            if i % 2 == 0:\n                sum = sum + i\n            else:\n                sum = sum + (i + 1)\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(1, n + 1):\n        if (n % i == 0):\n            if (i % 2 == 0):\n                total += i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    # Return the sum of all factors of n \n    # n must be greater than 1 \n    if n > 1 : \n        for i in range(2,n): \n            if (n % i) == 0 : \n                total = total + i \n        return total \n    else : \n        return \"Invalid input\"\ndef primeFactors(n) : \n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    while n % 2 == 0 : \n        print(2) \n        n = n / 2\n    for i in range(3,int(math.sqrt(n))+1,2) : \n        while n % i== 0 : \n            print(i) \n            n = n / i \n    if n > 2 : \n        print(n) \ndef palindrome(n) : \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while(n > 0) : \n        dig = n % 10\n        reverse = reverse * 10 + dig \n        n = n // 10\n    if (temp == reverse) : \n        return True\n    else : \n        return False\ndef isSquare(n) : \n    '''\n    Write a python function to check whether a number is square or not.\n    '''\n    sq = int(math.sqrt(n)) \n    if (sq * sq == n) : \n        return True\n    else : \n        return False\ndef isPallindrome(n) : \n    '''\n    Write a python function to check whether a number is pallindrome or not.\n    '''\n    temp = n \n    reverse = 0 \n    while(n > 0) : \n        dig = n % 10\n        reverse = reverse * 10 + dig \n        n = n // 10\n    if (temp == reverse) : \n        return True\n    else : \n        return False\ndef findFactors(n) : \n    '''\n    Write a python function to find factors of a number.\n    '''\n    factors = []\n    for i in range(2, n+1) : \n        if (n % i == 0) : \n            factors.append(i)\n    return factors \ndef isPythagoras(a, b, c) : \n    '''\n    Write a python function to check whether a, b, c are Pythagoras Triplets or not.\n    '''\n    if (a*a + b*b == c*c) : \n        return True\n    else : \n        return False\ndef checkPythagoras(a, b, c) : \n    '''\n    Write a python function to check whether the triplet is Pythagoras Triplet or not.\n    '''\n    if (a*a + b*b == c*c) : \n        return True\n    else : \n        return False\ndef hcf(x, y) : \n    '''\n    Write a python function to find the HCF of two numbers.\n    '''\n    if (x > y) : \n        small = y \n    else : \n        small = x \n    for i in range(1, small + 1) : \n        if ((x % i == 0) and (y % i == 0)) : \n            hcf = i \n    return hcf \ndef lcm(x, y) : \n    '''\n    Write a python function to find the LCM of two numbers.\n    '''\n    lcm = (x*y) / hcf(x,y)\n    return lcm \ndef printTriplets(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            c = int(math.sqrt(i * i + j * j))\n            if (c * c == i * i + j * j) : \n                print(i, j, c)\n            j = j + 1\n        i = i + 1\ndef printPythagorasTriplets(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (j + i + c < n) : \n                    if (c * c == j * j + i * i) : \n                        print(j, i, c)\n            j = j + 1\n        i = i + 1\ndef printPythagorasTriplets_2(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (c * c == j * j + i * i) : \n                    print(j, i, c)\n            j = j + 1\n        i = i + 1\ndef printPythagorasTriplets_3(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (c * c == j * j + i * i) : \n                    print(j, i, c)\n            j = j + 1\n        i = i + 1\ndef printPythagorasTriplets_4(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (c * c == j * j + i * i) : \n                    print(j, i, c)\n            j = j + 1\n        i = i + 1\ndef getFactors_4(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (c * c == j * j + i * i) : \n                    print(j, i, c)\n            j = j + 1\n        i = i + 1\ndef getFactors_3(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (c * c == j * j + i * i) : \n                    print(j, i, c)\n            j = j + 1\n        i = i + 1\ndef getFactors_2(n) : \n    '''\n    Write a python function to print the Pythagoras Triplets upto a number.\n    '''\n    i = 1\n    while(i < n) : \n        j = 1\n        while(j < n) : \n            if (j + i < n) : \n                c = int(math.sqrt(j * j + i * i))\n                if (c * c == j * j + "
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pass\ndef text_match_2_words_beginning_with_s(text):\n    '''\n    Write a function that matches a word beginning with s or S.\n    '''\n    pass\ndef text_match_2_words_containing_s(text):\n    '''\n    Write a function that matches a word containing s and having 3 characters or more.\n    '''\n    pass\ndef text_match_regex(text):\n    '''\n    Write a function that matches a word containing 2 digits.\n    '''\n    pass\ndef text_match_regex_multiline(text):\n    '''\n    Write a function that matches a word having 2 or more digits.\n    '''\n    pass\ndef text_match_regex_multiline_with_noncapture(text):\n    '''\n    Write a function that matches a word having 2 or more digits, not capturing the group.\n    '''\n    pass\ndef text_match_noncapture_regex(text):\n    '''\n    Write a function that matches a word with a length of 2 or more, not capturing the group.\n    '''\n    pass\ndef text_match_noncapture_regex_multiline(text):\n    '''\n    Write a function that matches a word having 2 or more digits, not capturing the group.\n    '''\n    pass\ndef text_match_regex_multiline_with_noncapture_group(text):\n    '''\n    Write a function that matches a word having 2 or more digits, capturing the group.\n    '''\n    pass\ndef text_match_word_beginning_with_a_group(text):\n    '''\n    Write a function that matches a word beginning with a, an, or the.\n    '''\n    pass\ndef text_match_regex_dotall(text):\n    '''\n    Write a function that matches a word beginning with a, an, or the, with a dot \u2018.\u2019 at the end.\n    '''\n    pass\ndef text_match_regex_dotall_with_noncapture(text):\n    '''\n    Write a function that matches a word beginning with a, an, or the, with a dot \u2018.\u2019 at the end, not capturing the group.\n    '''\n    pass\ndef text_match_regex_dotall_with_noncapture_group(text):\n    '''\n    Write a function that matches a word beginning with a, an, or the, with a dot \u2018.\u2019 at the end, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a(text):\n    '''\n    Write a function that matches a word starting with a, an, or the.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_group(text):\n    '''\n    Write a function that matches a word starting with a, an, or the, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_noncapture(text):\n    '''\n    Write a function that matches a word starting with a, an, or the, not capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_noncapture_group(text):\n    '''\n    Write a function that matches a word starting with a, an, or the, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_an(text):\n    '''\n    Write a function that matches a word starting with an, an, or the.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_an_group(text):\n    '''\n    Write a function that matches a word starting with an, an, or the, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_an_noncapture(text):\n    '''\n    Write a function that matches a word starting with an, an, or the, not capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_an_noncapture_group(text):\n    '''\n    Write a function that matches a word starting with an, an, or the, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_the(text):\n    '''\n    Write a function that matches a word starting with the, the, or the.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_the_group(text):\n    '''\n    Write a function that matches a word starting with the, the, or the, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_the_noncapture(text):\n    '''\n    Write a function that matches a word starting with the, the, or the, not capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_the_noncapture_group(text):\n    '''\n    Write a function that matches a word starting with the, the, or the, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital(text):\n    '''\n    Write a function that matches a word starting with a capital letter.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_group(text):\n    '''\n    Write a function that matches a word starting with a capital letter, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_noncapture(text):\n    '''\n    Write a function that matches a word starting with a capital letter, not capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_noncapture_group(text):\n    '''\n    Write a function that matches a word starting with a capital letter, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word(text):\n    '''\n    Write a function that matches a word starting with a capital letter.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_group(text):\n    '''\n    Write a function that matches a word starting with a capital letter, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_noncapture(text):\n    '''\n    Write a function that matches a word starting with a capital letter, not capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_noncapture_group(text):\n    '''\n    Write a function that matches a word starting with a capital letter, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_word(text):\n    '''\n    Write a function that matches a word starting with a capital letter.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_word_group(text):\n    '''\n    Write a function that matches a word starting with a capital letter, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_word_noncapture(text):\n    '''\n    Write a function that matches a word starting with a capital letter, not capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a_capital_word_word_noncapture_group(text):\n    '''\n    Write a function that matches a word starting with a capital letter, capturing the group.\n    '''\n    pass\ndef text_match_regex_beginning_word_starting_with_a"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[a-z]*z[a-z]*', text) is not None\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # if 'z' in text:\n    #     return True\n    # else:\n    #     return False\n    return bool(re.search(r'\\w*z\\w*', text, re.I))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r\"z\", text)\n    # return 'z' in text\ndef test_match_wordz():\n    assert text_match_wordz('The quick brown fox jumps over the lazy dog.') == None\n    assert text_match_wordz('The quick brown fox jumped over the lazy dog.')\ndef text_match_numbers(text):\n    '''\n    Write a function that matches a word containing a 0 or a 1.\n    '''\n    return re.search(r\"0|1\", text)\ndef test_match_numbers():\n    assert text_match_numbers('I like 0 and 1')\n    assert text_match_numbers('I like 0 and 1, but not 2.') == None\ndef text_match_brackets(text):\n    '''\n    Write a function that matches a word in square brackets.\n    '''\n    return re.search(r\"\\[.*\\]\", text)\ndef test_match_brackets():\n    assert text_match_brackets('This is a sentence with no square brackets.') == None\n    assert text_match_brackets('This is a sentence with square brackets [here].')\ndef text_match_words_only(text):\n    '''\n    Write a function that matches a word containing 'z', 'r', and 'o'.\n    '''\n    return re.search(r\"z|r|o\", text)\ndef test_match_words_only():\n    assert text_match_words_only('I like zorros.')\n    assert text_match_words_only('I like zorros, but not rorschach.') == None\ndef text_match_word_boundaries(text):\n    '''\n    Write a function that matches the word \"end\" followed by two word\n    boundaries (\"start\" and \"end\").\n    '''\n    return re.search(r\"^end\\b.*end\\b$\", text)\ndef test_match_word_boundaries():\n    assert text_match_word_boundaries(\"The quick brown fox jumped over the end lazy dog. The quick brown fox jumped over the start lazy dog. The quick brown fox jumped over the end lazy dog.\") == None\n    assert text_match_word_boundaries(\"The quick brown fox jumped over the end lazy dog. The quick brown fox jumped over the start lazy dog. The quick brown fox jumped over the end lazy dog.\")\ndef text_match_word_boundaries_without_whitespace(text):\n    '''\n    Write a function that matches the word \"end\" followed by two word\n    boundaries (\"start\" and \"end\") where the word boundaries are not\n    separated by whitespace.\n    '''\n    return re.search(r\"^end\\b.*end\\b$\", text)\ndef test_match_word_boundaries_without_whitespace():\n    assert text_match_word_boundaries_without_whitespace(\"The quick brown fox jumped over the end lazy dog. The quick brown fox jumped over the start lazy dog. The quick brown fox jumped over the end lazy dog.\")\n    assert text_match_word_boundaries_without_whitespace(\"The quick brown fox jumped over the end lazy dog. The quick brown fox jumped over the start lazy dog. The quick brown fox jumped over the end lazy dog.\")\ndef text_match_non_matching(text):\n    '''\n    Write a function that does not match \"the\", followed by two word\n    boundaries (\"start\" and \"end\").\n    '''\n    return re.search(r\"^.*the\\b.*the\\b$\", text)\ndef test_match_non_matching():\n    assert text_match_non_matching(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\") == None\n    assert text_match_non_matching(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\")\ndef text_match_leading_whitespace(text):\n    '''\n    Write a function that matches a word containing \"dog\" anywhere in the\n    word, but only if it is preceded by at least one character.\n    '''\n    return re.search(r\"\\bdog.*\", text)\ndef test_match_leading_whitespace():\n    assert text_match_leading_whitespace(\"The quick brown fox jumped over the lazy dog.\") == None\n    assert text_match_leading_whitespace(\"The quick brown dog jumped over the lazy dog.\")\ndef text_match_trailing_whitespace(text):\n    '''\n    Write a function that matches a word containing \"dog\" anywhere in the\n    word, but only if it is followed by at least one character.\n    '''\n    return re.search(r\".*dog\\b\", text)\ndef test_match_trailing_whitespace():\n    assert text_match_trailing_whitespace(\"The quick brown fox jumped over the lazy dog.\") == None\n    assert text_match_trailing_whitespace(\"The quick brown dog jumped over the lazy dog.\")\ndef text_match_non_matching_with_whitespace(text):\n    '''\n    Write a function that does not match the word \"the\" with any\n    whitespace between it and the word boundary.\n    '''\n    return re.search(r\"\\b.*the\\b\", text)\ndef test_match_non_matching_with_whitespace():\n    assert text_match_non_matching_with_whitespace(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\") == None\n    assert text_match_non_matching_with_whitespace(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\")\ndef text_match_non_matching_with_escaped_whitespace(text):\n    '''\n    Write a function that does not match the word \"the\" with any\n    non-whitespace between it and the word boundary.\n    '''\n    return re.search(r\"\\b.*?the\\b\", text)\ndef test_match_non_matching_with_escaped_whitespace():\n    assert text_match_non_matching_with_escaped_whitespace(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\") == None\n    assert text_match_non_matching_with_escaped_whitespace(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\")\ndef text_match_non_matching_with_non_word_boundary(text):\n    '''\n    Write a function that does not match the word \"the\" with any\n    non-word boundary (example: a comma, space, dash, etc.) between it\n    and the word boundary.\n    '''\n    return re.search(r\"\\b.*?the\\b\", text)\ndef test_match_non_matching_with_non_word_boundary():\n    assert text_match_non_matching_with_non_word_boundary(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\") == None\n    assert text_match_non_matching_with_non_word_boundary(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\")\ndef text_match_non_matching_with_start_anchor(text):\n    '''\n    Write a function that does not match the word \"the\" if it is not\n    at the very beginning of the text.\n    '''\n    return re.search(r\"^.*?the\", text)\ndef test_match_non_matching_with_start_anchor():\n    assert text_match_non_matching_with_start_anchor(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\") == None\n    assert text_match_non_matching_with_start_anchor(\"The quick brown fox jumped over the lazy dog. The quick brown fox jumped over the the lazy dog.\")\ndef text_match_non_matching_with_end_anchor(text):\n    '''\n    Write a function that does not match \"the\" if it is not at the very\n    end of the text.\n    '''\n    return re.search(r\".*the$\", text)\ndef test_match_non_matching_with_end_anchor():\n    assert text_match_non_matching_with_end_anchor(\"The quick brow"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.search('z.*', text)\n    if match:\n        print(match.group())\n    else:\n        print(\"No word matches found.\")\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # your code here\n    if re.search(r'\\b\\w*z\\w*\\b', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    result = re.search('\\\\bz\\\\b', text)\n    print(\"Word contains 'z'? {0}\".format(bool(result)))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\w*z\\w*')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word containing 'z', where the first occurrence of the match is the entire word.\n    '''\n    pattern = re.compile(r'\\b\\w*z\\w*')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches words that are 3 or more characters long, \n    but do not contain the substring z.\n    '''\n    pattern = re.compile(r'\\w{3,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches words that are 3 or more characters long, \n    and contain the substring z.\n    '''\n    pattern = re.compile(r'\\w{3,}\\sz')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word of length between 3 and 7 characters\n    (inclusive).\n    '''\n    pattern = re.compile(r'\\b\\w{3,7}\\b')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word containing any three letters,\n    followed by any one letter, followed by any three letters.\n    '''\n    pattern = re.compile(r'\\w{3,}\\s\\w{1,}\\s\\w{3,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word containing three vowels in a row.\n    '''\n    pattern = re.compile(r'\\w*[aeiou]{3}[aeiou]\\w*')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word that starts with any two consonants, followed by any one consonant, followed by any two consonants.\n    '''\n    pattern = re.compile(r'\\b[bcdfghjklmnpqrstvwxyz]{2}\\w[bcdfghjklmnpqrstvwxyz]{1}\\w[bcdfghjklmnpqrstvwxyz]{2}\\b')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word containing four vowels in a row.\n    '''\n    pattern = re.compile(r'\\w*[aeiou]{4}[aeiou]\\w*')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches a word containing any six letters,\n    followed by any two letters, then any letter.\n    '''\n    pattern = re.compile(r'\\w{6,}\\s\\w{2}\\s\\w')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are four letters long,\n    followed by any two letters that may appear anywhere in the word, \n    followed by any letter that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{4,}\\s[a-z]{2,}\\s[a-z]\\w{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are five letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{5,}\\s[a-z]{2,}\\s[a-z]\\w{1,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are five letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{5,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are four letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{4,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are nine letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{9,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are five letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{5,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are four letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{4,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are four letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{4,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are seven letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{7,}\\s[a-z]{2,}\\s[a-z]{2,}\\s[a-z]{2,}')\n    print(pattern.findall(text))\n    \n    '''\n    Write a function that matches any words that are seven letters long,\n    followed by any two letters that may appear anywhere in the word,\n    followed by any letter that may appear anywhere in the word,\n    followed by any two letters that appear anywhere in the word.\n    '''\n    pattern = re.compile(r'\\w{7"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('[A-z]z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #return re.search(r'z.+', text)\n    return re.search(r'z.{1,}', text)\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"Month Number:\", monthnum2, \"contains 31 days\")\n    elif monthnum2 == 4 or 6 or 9 or 11:\n        print(\"Month Number:\", monthnum2, \"contains 30 days\")\n    else:\n        print(\"Month Number:\", monthnum2, \"contains 28 days\")\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum=[]\n    for i in range(1,13):\n        monthnum.append(i)\n    if monthnum2 in monthnum:\n        return True\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    elif monthnum2 == 2:\n        if calendar.isleap(yearnum):\n            return 29\n        else:\n            return 28\n    else:\n        return \"invalid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return \"31\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30\"\n    else:\n        return \"error\"\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnumb_dict = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}\n    if monthnum2 in monthnumb_dict:\n        print(monthnumb_dict[monthnum2])\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif monthnum2 in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 28\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    returnlist = []\n    for i in range(len(stringlist)):\n        returnlist.append(stringlist[i][::-1])\n    return returnlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_stringlist = []\n    for string in stringlist:\n        new_stringlist.append(string[::-1])\n    return new_stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    list1=[]\n    for x in stringlist:\n        list1.append(x[::-1])\n    return list1\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #declaring a list for storing the string list\n    reverse_string_list = []\n    #iterating through the list\n    for i in range(len(stringlist)):\n        #appending the string list element in the reverse string list\n        reverse_string_list.append(stringlist[i][::-1])\n    #returning the list\n    return reverse_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    newlist = []\n    for str in stringlist:\n        newlist.append(str[::-1])\n    return newlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    returnlist = []\n    for item in stringlist:\n        returnlist.append(item[::-1])\n    return returnlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in stringlist:\n        reversed_list.append(i[::-1])\n    return reversed_list\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    \n    # TODO: Write the function to reverse the string list. \n    \n    # Use the reverse() method on the string list.\n    return\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # get the list size\n    l = len(stringlist)\n    # iterate over the list\n    for i in range(0, l):\n        # create a copy of the list\n        temp = stringlist[i]\n        # reverse the copy\n        stringlist[i] = temp[::-1]\n    # return the list\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [string[::-1] for string in stringlist]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = len(lst[0]) \n    for i in range(len(lst)): \n        if len(lst[i]) < minimum: \n            minimum = len(lst[i]) \n    return minimum\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    return lst[0:1]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst) \n    if n == 0:\n        return 0\n    else:\n        min_len = 1\n    for i in range(0, n): \n        j = i\n        while j < n and lst[j] == lst[i]: \n            j += 1\n        if (j - i + 1) < min_len: \n            min_len = (j - i + 1)\n            res = [i]\n        elif (j - i + 1) == min_len: \n            res.append(i)\n    return res\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sublst = []\n    min_len = len(lst[0])\n    for i in lst:\n        if min_len > len(i):\n            sublst = []\n            min_len = len(i)\n        elif min_len == len(i):\n            sublst.append(i)\n    return sublst\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = min([len(i) for i in lst])\n    return min_len, [i for i in lst if len(i) == min_len]\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_list = []\n    min_len = 999999\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            if len(lst[i:j + 1]) < min_len: \n                min_list = lst[i:j + 1]\n                min_len = len(lst[i:j + 1]) \n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    res = min(lst, key=len)\n    return res \n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    result = []\n    min_len = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            result = lst[i]\n            min_len = len(lst[i])\n    return result\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    sub_lst = []\n    for i in range(len(lst)): \n        for j in range(i, len(lst)): \n            sub_lst.append(lst[i:j + 1]) \n    return sub_lst\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area=l*b\n    return(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    rectangle_area = l*b\n    return rectangle_area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n    #return None\n    \n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = 2*l + 2*b\n    return perimeter\n    #return None\n    \ndef triangle_area(l,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = l * h / 2\n    return area\n    #return None\n    \ndef triangle_perimeter(l,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = l + h +l +h\n    return perimeter\n    #return None\n    \ndef trapezoid_area(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    area = (l1 + l2) / 2 * h\n    return area\n    #return None\n    \ndef trapezoid_perimeter(l1,l2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    perimeter = l1 + l2 + 2*h\n    return perimeter\n    #return None\n    \ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l * b\n    return area\n    #return None\n    \ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    perimeter = 2*(l + b)\n    return perimeter\n    #return None\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi * r**2\n    return area\n    #return None\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    perimeter = 2 * math.pi * r\n    return perimeter\n    #return None\n    \ndef ellipse_area(r1,r2):\n    '''\n    Write a function to find the area of a ellipse.\n    '''\n    area = math.pi * r1 * r2\n    return area\n    #return None\n    \ndef ellipse_perimeter(r1,r2):\n    '''\n    Write a function to find the perimeter of a ellipse.\n    '''\n    perimeter = 2 * math.pi * r1 + 2 * math.pi * r2\n    return perimeter\n    #return None\n    \ndef right_angle_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right angle triangle.\n    '''\n    area = b * h / 2\n    return area\n    #return None\n    \ndef right_angle_triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a right angle triangle.\n    '''\n    perimeter = b + b + h\n    return perimeter\n    #return None\n    \ndef trapezoid_area(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    area = ((a+b)*h)/2\n    return area\n    #return None\n    \ndef trapezoid_perimeter(a,b,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    perimeter = a+b + 2*h\n    return perimeter\n    #return None\n    \ndef right_angle_triangle_area(b,h):\n    '''\n    Write a function to find the area of a right angle triangle.\n    '''\n    area = b * h / 2\n    return area\n    #return None\n    \ndef right_angle_triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a right angle triangle.\n    '''\n    perimeter = b + b + h\n    return perimeter\n    #return None\n    \ndef pentagon_area(a):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    area = 5 * a**2 / (4 * math.tan(math.pi / 5))\n    return area\n    #return None\n    \ndef pentagon_perimeter(a):\n    '''\n    Write a function to find the perimeter of a pentagon.\n    '''\n    perimeter = 5 * a\n    return perimeter\n    #return None\n    \ndef parallelogram_area(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = a * b\n    return area\n    #return None\n    \ndef parallelogram_perimeter(a,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    perimeter = 2*(a + b)\n    return perimeter\n    #return None\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi * r**2\n    return area\n    #return None\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    perimeter = 2 * math.pi * r\n    return perimeter\n    #return None\n    \ndef ellipse_area(r1,r2):\n    '''\n    Write a function to find the area of a ellipse.\n    '''\n    area = math.pi * r1 * r2\n    return area\n    #return None\n    \ndef ellipse_perimeter(r1,r2):\n    '''\n    Write a function to find the perimeter of a ellipse.\n    '''\n    perimeter = 2 * math.pi * r1 + 2 * math.pi * r2\n    return perimeter\n    #return None\n    \ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\n    #return None\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = 2*l + 2*b\n    return perimeter\n    #return None\n    \ndef triangle_area(l,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = l * h / 2\n    return area\n    #return None\n    \ndef triangle_perimeter(l,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = l + h +l +h\n    return perimeter\n    #return None\n    \ndef trapezoid_area(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    area = ((l1 + l2) / 2 * h)\n    return area\n    #return None\n    \ndef trapezoid_perimeter(l1,l2,h):\n    '''\n    Write a function to find the perimeter of a trapezoid.\n    '''\n    perimeter = l1 + l2 + 2*h\n    return perimeter\n    #return None\n    \ndef parallelogram_area(l,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = l * b\n    return area\n    #return None\n    \ndef parallelogram_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    perimeter = 2*(l + b)\n    return perimeter\n    #return None\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi * r**2\n    return area\n    #return None\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    perimete"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = ''\n    for i in str1:\n        if i.islower():\n            str2 += i\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Write your code here\n    str1=str1.lower()\n    print(str1)\n    ans=''\n    for i in str1:\n        if i.isalpha():\n            ans+=i\n    return ans\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = []\n    for i in str1:\n        if i.isupper():\n            str2 = str2\n        else:\n            str2.append(i)\n    return ''.join(str2)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(str1)\n    str1 = str1.lower()\n    print(str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    a = []\n    for s in str1:\n        if s.islower():\n            a.append(s)\n    return a\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    lst = []\n    str1 = str1.lower()\n    for letter in str1:\n        if letter not in lst:\n            lst.append(letter)\n    str1 = ''.join(lst)\n    print(str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    l = ['q', 'Q']\n    for i in str1:\n        if i in l:\n            str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return list(map(lambda x: x[0], lst)) \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst] \n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[i][0] for i in range(len(lst))]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sub[0] for sub in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for item in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum([1 if i.isupper() else 0 for i in str])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([c for c in str if c.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if ord(i) in range(65,91):\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # This is a solution\n    l = [1 if i.isupper() else 0 for i in str]\n    return sum(l)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    elif len(list1) == 1:\n        return [list1]\n    else:\n        comb = []\n        for i in range(len(list1)):\n            temp = list1[i]\n            rem = list1[:i] + list1[i+1:]\n            for x in combinations_list(rem):\n                comb.append([temp] + x)\n        return comb\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for i in range(len(list1)):\n        current = list1[i]\n        remaining = list1[i+1:]\n        for j in combinations_list(remaining):\n            result.append([current] + j)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    for i in itertools.combinations(list1, 3):\n        print(i)\n        \ndef permutations_list(list1):\n    '''\n    Write a function to find all possible permutations of the elements of a given list.\n    '''\n    from itertools import permutations\n    for i in permutations(list1):\n        print(i)\n        \ndef find_permutations_of_list(list1):\n    '''\n    Write a function to find all possible permutations of a given list where each element can be swapped with another element in the list.\n    '''\n    import itertools\n    perm = []\n    for i in itertools.permutations(list1, 3):\n        perm.append(i)\n    print(perm)\n        \ndef find_combinations_of_list(list1):\n    '''\n    Write a function to find all possible combinations of a given list where each element can be swapped with another element in the list.\n    '''\n    import itertools\n    perm = []\n    for i in itertools.combinations(list1, 3):\n        perm.append(i)\n    print(perm)\n    \nif __name__ == '__main__':\n    list1 = ['a', 'b', 'c']\n    print(list1)\n    print(\"All possible permutations of the list: \")\n    permutations_list(list1)\n    print(\"All possible combinations of the list: \")\n    combinations_list(list1)\n    print(\"All possible permutations of the list by swapping each element with another element in the list: \")\n    find_permutations_of_list(list1)\n    print(\"All possible combinations of the list by swapping each element with another element in the list: \")\n    find_combinations_of_list(list1)"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [list(i) for i in combinations(list1,2)]\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    com = combinations(list1,2)\n    com_list = list(com)\n    return com_list\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return [[]]\n    list_combinations = []\n    first = list1[0]\n    rest = list1[1:]\n    combinations_rest = combinations_list(rest)\n    for c_r in combinations_rest:\n        list_combinations.append([first] + c_r)\n        for i in range(len(c_r) + 1):\n            list_combinations.append(c_r[:i] + [first] + c_r[i:])\n    return list_combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    list_combinations = itertools.combinations(list1, 2)\n    list2 = list(list_combinations)\n    return list2\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    from itertools import combinations\n    result = combinations(list1, 2)\n    result = list(result)\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # print(list1)\n    combinations_list = []\n    # print(len(list1))\n    # for i in range(1, len(list1) + 1):\n    #     for j in combinations(list1, i):\n    #         combinations_list.append(list(j))\n    # print(combinations_list)\n    for i in range(1, len(list1) + 1):\n        combinations_list.extend(list(itertools.combinations(list1, i)))\n    # print(combinations_list)\n    return combinations_list\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Brute force approach\n    # Time complexity: O(n^2)\n    # Space complexity: O(1)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Approach: We are checking if there is subarray or not in O(n) time. If there is subarray, we are finding maximum subarray product in it.\n    # Time complexity is O(n)\n    # Space complexity is O(1)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    res = [arr[0]]\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        res.append(max_ending_here)\n    return max_so_far, res\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Instead of the brute force approach of recursion, use Kadane's algorithm.\n    # In Kadane's algorithm, we need to compare the current sum of the array\n    # with the overall maximum subarray sum, and update it if it is greater.\n    #\n    # Complexity: O(n)\n    #\n    # NOTE: Kadane's algorithm can only be applied for non-negative numbers.\n    #       Therefore, we can have subarrays that contain negative numbers,\n    #       and the maximum subarray sum is calculated as the product of\n    #       all positive numbers.\n    max_subarray_sum = -float('inf')\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            return 1\n        if i >= 1:\n            arr[i] = max(arr[i], arr[i] * arr[i-1])\n        max_subarray_sum = max(max_subarray_sum, arr[i])\n    return max_subarray_sum\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(2)] for j in range(n)]\n    max_product = float('-inf')\n    dp[0][0] = arr[0]\n    dp[0][1] = arr[0]\n    for i in range(1, n):\n        dp[i][0] = max(arr[i], dp[i-1][0]*arr[i], dp[i-1][1]*arr[i])\n        dp[i][1] = min(arr[i], dp[i-1][0]*arr[i], dp[i-1][1]*arr[i])\n        max_product = max(max_product, dp[i][0])\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = 1\n    max_ending_here = 1\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        max_ending_here = max_ending_here * arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = i - 1\n            end = i\n        if max_ending_here < 1:\n            max_ending_here = 1\n            start = i\n            end = i + 1\n    return start, end, max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # TODO: Write your code here\n    min_left = [0] * len(arr)\n    max_right = [0] * len(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    current_max = float('-inf')\n    current_min = float('inf')\n    current_product = 1\n    max_product = float('-inf')\n    start = 0\n    end = 0\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product >= 0:\n            if current_max < current_product:\n                current_max = current_product\n                start = i\n                end = i\n            elif current_max == current_product:\n                end = i\n        else:\n            current_product = 1\n            if current_min >= current_product:\n                current_min = current_product\n                start = i\n                end = i\n            elif current_min == current_product:\n                end = i\n    return start,end\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) < 2:\n        return False\n    curr_product = 1\n    max_product = 1\n    for val in arr:\n        curr_product *= val\n        if curr_product > max_product:\n            max_product = curr_product\n        if curr_product <= 0:\n            curr_product = 1\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    if not arr:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        max_product_so_far = arr[0]\n        max_product_ending_here = arr[0]\n        for i in range(len(arr)):\n            max_product_ending_here = max(max_product_ending_here * arr[i], arr[i])\n            max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        return max_product_so_far\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if all(dict[k] == n for k in dict):\n        print(\"All values are same.\")\n    else:\n        print(\"Some values are different.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    temp = list(dict.values())\n    if len(set(temp)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"All values are same\")\n    else:\n        print(\"All values are not same\")\n    return dict\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1 and dict[n]!= n:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    lst = []\n    for k, v in dict.items():\n        lst.append(v)\n    return n in lst\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 1:\n        return 0\n    for i in dict:\n        if dict[i] == dict[i+1]:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    s = set()\n    for k in dict.keys():\n        s.add(dict[k])\n    if len(s) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    print(\"\\n\")\n    print(\">>> Q1:\")\n    dict1 = {'k1':1,'k2':2,'k3':3}\n    print(f\"Given dictionary is: {dict1}\")\n    result = drop_empty(dict1)\n    print(f\"Dictionary after dropping empty items is: {result}\")\n    print(\"\\n\")\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = dict()\n    for key, val in dict1.items():\n        if val is not None:\n            new_dict[key] = val\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict([(k, v) for k, v in dict1.items() if v])\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict1 = {k: v for k, v in dict1.items() if v}\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for k, v in dict1.items():\n        if v!= '':\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, val in dict1.items():\n        if val == []:\n            dict1.pop(key, val)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:val for key, val in dict1.items() if val!= [] and val!= {} and val!= '' and val!= 0}\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # arr = [10, 3, 5, 6, 20]\n    # arr = [1, 2, 4, 3, 6, 9, 7, 8, 1]\n    # arr = [10, 20, 30, 40, 2, 3, 4, 5]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    res = 1\n    for i in range(1, len(arr)):\n        curr = max(arr[i], arr[i] * arr[i-1])\n        res = max(res, curr)\n    return res\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    #arr = [5,2,3,6,1,4]\n    n = len(arr)\n    # dp[i] stores the maximum product of arr[0..j] i.e. dp[1] stores max product of arr[0..2] i.e. arr[0] * arr[1]\n    dp = [1 for i in range(n)]\n    dp[1] = arr[0]\n    for i in range(2, n):\n        for j in range(0, i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], arr[i] * dp[j])\n            else:\n                dp[i] = max(dp[i], arr[i] * dp[j])\n    return dp[n-1]\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return 0\n    max = 1\n    for i in range(len(arr)-1):\n        if arr[i] < arr[i+1]:\n            max = max*arr[i+1]\n    return max\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    import numpy as np\n    arr=np.array(arr)\n    import sys\n    \n    def max_product_rec(arr):\n        '''\n        Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n        '''\n        if len(arr)==1:\n            return arr[0]\n        if len(arr)==2:\n            return max(arr[0],arr[1])\n        else:\n            return max(arr[0]*arr[1],arr[0]*max_product_rec(arr[2:len(arr)]),max_product_rec(arr[1:len(arr)]))\n    \n    def max_product_dp(arr):\n        '''\n        Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n        '''\n        import numpy as np\n        arr=np.array(arr)\n        \n        #Dynamic Programming\n        prod=[arr[0]]*len(arr)\n        prod[1]=max(arr[0],arr[1])\n        for i in range(2,len(arr)):\n            prod[i]=max(arr[i]*prod[i-1],arr[i]*prod[i-2])\n        \n        return prod[-1]\n        \n    import sys\n    if len(sys.argv)==2:\n        sys.argv=sys.argv[1:]\n        if sys.argv[0]==\"Recursion\":\n            return max_product_rec(arr)\n        else:\n            return max_product_dp(arr)\n    else:\n        print(\"Usage: python3 MaxProduct.py Recursion\")\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_so_far = 1\n    max_ending_here = 1\n    for i in range(0, n):\n        max_ending_here = max_ending_here * arr[i]\n        max_so_far = max(max_so_far, max_ending_here)\n        if max_ending_here < 0:\n            max_ending_here = 1\n    return max_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 1\n    for i in range(len(arr)):\n        result *= arr[i]\n        \n    n = len(arr)\n    dp = [1]*n\n    max_product = 1\n    for i in range(1,n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j]*arr[i])\n        max_product = max(max_product, dp[i])\n        \n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    arr.sort()\n    print(\"Max product is: \",arr[-1]*arr[-2])\n    \n    \ndef reverse_array(arr):\n    '''\n    Write a function to reverse an array\n    '''\n    def helper(arr,i,j):\n        while(i < j):\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        \n    helper(arr,0,len(arr)-1)\n    \n    \ndef print_digits(num):\n    '''\n    Write a function to print the digits of a number in reverse order\n    '''\n    for i in str(num)[::-1]:\n        print(i)\n        \n        \ndef reverse_array_2(arr):\n    '''\n    Write a function to reverse an array without using library functions\n    '''\n    print(arr[::-1])\n    \n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse a string without using library functions\n    '''\n    print(''.join(reversed(string)))\n    \n    \ndef palindrome(string):\n    '''\n    Write a function to check whether a given string is a palindrome\n    '''\n    if string == string[::-1]:\n        return True\n    return False\n    \n    \ndef can_construct(target, arr):\n    '''\n    Write a function to check whether a given target string can be constructed using some elements from the array\n    '''\n    \n    \ndef find_permutations(arr):\n    '''\n    Write a function to return all the permutations of an array of numbers\n    '''\n    def permutation(arr,i,j):\n        if i == j:\n            print(arr)\n        else:\n            for k in range(i,j+1):\n                arr[i], arr[k] = arr[k], arr[i]\n                permutation(arr,i+1,j)\n                arr[i], arr[k] = arr[k], arr[i]\n    permutation(arr,0,len(arr)-1)\n    \n    \ndef num_of_factors(number):\n    '''\n    Write a function to find the number of divisors of a number\n    '''\n    print(2)\n    \n    \ndef find_strong_numbers(arr):\n    '''\n    Write a function to find strong numbers in an array\n    '''\n    def helper(number):\n        temp = number\n        sum = 0\n        while(temp > 0):\n            digit = temp%10\n            sum += digit**3\n            temp = temp//10\n        return sum\n    for i in arr:\n        if i == helper(i):\n            print(i, end='')\n        \n    \n    \ndef longest_subarray(arr):\n    '''\n    Write a function to find the longest increasing subarray in an array\n    '''\n    def helper(arr,i,j):\n        while(i < j):\n            if arr[j] > arr[j-1]:\n                j -= 1\n            else:\n                break\n        return j\n    max_len = 1\n    start = 0\n    for i in range(len(arr)):\n        if i == 0:\n            max_len = helper(arr,i,i+1)\n            start = i\n        else:\n            end = helper(arr,i,i+1)\n            if end-i > max_len:\n                max_len = end-i\n                start = i\n    print(start, max_len)\n    \n    \ndef print_pattern(n):\n    '''\n    Write a function to print the following pattern for a given number\n    '''\n    for i in range(1,n+1):\n        for j in range(1,i+1):\n            print(j,end=\" \")\n        print()\n    \n    \ndef reverse_bits(n):\n    '''\n    Write a function to reverse bits of a number\n    '''\n    print(int(str(n)[::-1],2))\n    \n    \ndef remove_duplicates(arr):\n    '''\n    Write a function to remove duplicates in an array\n    '''\n    non_duplicates = []\n    for i in arr:\n        if i not in non_duplicates:\n            non_duplicates.append(i)\n    return non_duplicates\n    \n    \ndef remove_kth_element(arr,k):\n    '''\n    Write a function to remove kth element in an array\n    '''\n    non_duplicates = []\n    for i in arr:\n        if i not in non_duplicates:\n            non_duplicates.append(i)\n    non_duplicates.remove(arr[k])\n    print(non_duplicates)\n    \n    \ndef remove_duplicates_2(arr):\n    '''\n    Write a function to remove duplicates in an array without using library functions\n    '''\n    non_duplicates = []\n    for i in range(len(arr)):\n        if arr[i] not in non_duplicates:\n            non_duplicates.append(arr[i])\n    return non_duplicates\n    \n    \ndef remove_kth_element_2(arr,k):\n    '''\n    Write a function to remove kth element in an array without using library functions\n    '''\n    non_duplicates = []\n    i = 0\n    for j in range(len(arr)):\n        if i < k:\n            if arr[j] not in non_duplicates:\n                non_duplicates.append(arr[j])\n                i += 1\n        else:\n            non_duplicates.append(arr[j])\n    return non_duplicates\n    \n    \ndef is_super_array(arr, arr_size):\n    '''\n    Write a function to check whether an array is a super array or not\n    '''\n    for i in range(arr_size):\n        sum = 0\n        for j in range(i,arr_size):\n            sum += arr[j]\n            if sum == 0:\n                return True\n    return False\n    \n    \ndef number_of_subarrays(arr):\n    '''\n    Write a function to find number of subarrays with sum equal to zero\n    '''\n    def helper(arr,i,j,sum):\n        while(i < j):\n            sum += arr[j]\n            j -= 1\n            if sum == 0:\n                ans[0] += 1\n            helper(arr,i,j,sum)\n            \n    ans = [0]\n    helper(arr,0,len(arr)-1,0)\n    print(ans[0])\n    \n    \ndef find_longest_subarray_with_sum_zero(arr):\n    '''\n    Write a function to find the longest subarray with sum equals to 0\n    '''\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum = 0\n            for k in range(i,j+1):\n                sum += arr[k]\n                if sum == 0:\n                    print(i,j,k)\n                    break\n                \n    \ndef find_longest_subarray_with_sum_zero_2(arr):\n    '''\n    Write a function to find the longest subarray with sum equals to 0 without using library functions\n    '''\n    i = 0\n    j = 1\n    max_len = 0\n    while(i < len(arr)):\n        sum = 0\n        while(sum < 0 and j < len(arr)):\n            sum += arr[j]\n            j += 1\n        if sum == 0:\n            if j-i > max_len:\n                max_len = j-i\n                start = i\n                end = j\n        i += 1\n    print(start, max_len)\n    \n    \ndef max_contigous_array(arr):\n    '''\n    Write a function to find the maximum contiguous subarray with sum equal to zero\n    '''\n    for i in range(len(arr)):\n        sum = 0\n        for j in range(i,len(arr)):\n            sum += arr[j]\n            if sum == 0:\n                print(i,j)\n            "
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    size = len(arr)\n    #initialize product as 1 since we have atleast one element\n    product = 1\n    max_product = 1\n    #here we are intilizing the max and min product with first element\n    max_product = product\n    min_product = product\n    #this loop will iterate through the array\n    for i in range(size):\n        #this loop will iterate through the array starting from the index of i+1\n        for j in range(i+1,size):\n            #calculating the product using the current element\n            product *= arr[j]\n            #if the product is greater than the max product then max_product is updated\n            if product > max_product:\n                max_product = product\n                #updating the min product\n                min_product = min(min_product,product)\n            #if product is less than the min product then min product is updated\n            if product < min_product:\n                min_product = product\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    dp = [0]*len(arr)\n    dp[0] = arr[0]\n    for i in range(1, len(arr)):\n        dp[i] = max(arr[i], dp[i-1]*arr[i])\n    return max(dp)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] + test_tup[i + 1],)\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    return a+b\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return [test_tup[i]+test_tup[i+1] for i in range(len(test_tup)-1)]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # code here\n    return tuple(sum(test_tup[i:i+2]) for i in range(len(test_tup)))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #Write your code here\n    tup = tuple(test_tup)\n    l = len(tup)\n    pair_tup = ()\n    for i in range(l-1):\n        pair_tup += (tup[i] + tup[i+1],)\n    return pair_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    try:\n        tup = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        add = []\n        for i in range(len(tup)-1):\n            tup_add = tup[i] + tup[i+1]\n            add.append(tup_add)\n        return add\n    except TypeError:\n        return 'Please enter a valid tuple'\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    total = 0\n    for i in range(0,len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1]\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    \n    # Check if the tuple is empty\n    if not test_tup:\n        return None\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return ((test_tup[0]+test_tup[1]),(test_tup[1]+test_tup[2]),(test_tup[0]+test_tup[2]))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Your code here\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # If len(arr) < 2, the product of \n    # all the elements of the array will be 1. \n    if len(arr) < 2: \n        return 1\n    else: \n        # Else initialize product \n        # as arr[0]. \n        product = arr[0] \n        \n        # Calculate the product of \n        # all the elements of arr[1] \n        # and so on. \n        for i in range(1, len(arr)): \n            product = product * arr[i] \n        \n        return product % n \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for x in arr:\n        result = result * x\n    return result % n \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for ele in arr:\n        product = (product * ele) % n \n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n < 2:\n        return 1\n    else:\n        prod = 1\n        for x in arr:\n            prod *= x\n        return prod % n\n    \ndef solve(arr, n):\n    '''\n    Write a python function to find the sum of array after getting the product of array elements modulo n.\n    '''\n    return sum([x*x for x in arr]) % n\n    \nif __name__ == '__main__':\n    with open('input.txt', 'r') as f:\n        n = int(f.readline())\n        arr = list(map(int, f.readline().split()))\n        \n    print('Product of array elements modulo {} = {}'.format(n, find_remainder(arr, n)))\n    print('Sum of array elements modulo {} = {}'.format(n, solve(arr, n)))\n    \n    \n    "
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    p = 1\n    for i in range(n):\n        p = (p * arr[i]) % n\n    return p\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * (arr[i]) % n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    # Remove pass and write your logic here\n    sum = 0\n    for i in arr:\n        sum += i\n    remainder = sum % n\n    return remainder\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % n \n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # The array must have a length of 2\n    if(n==0):\n        return 1\n    # The array must contain only positive integers\n    if(arr[0]<1 or arr[-1]<1):\n        return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # l = [1,2,3,4,5,6,7,8,9]\n    # num = 1,2,3,4,5,6,7,8,9\n    # check_consecutive(l) = 1\n    # l = [1,2,4,5,6,7,8,9]\n    # check_consecutive(l) = 0\n    # l = [1,2,3,4,5,7,8,9]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,10]\n    # check_consecutive(l) = 0\n    # l = [1,2,3,4,5,6,7,8,9,10]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 0\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    # l = [1,2,3,4,5,6,7,8,9,10,11]\n    # check_consecutive(l) = 1\n    "
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    max = l[0]\n    for x in l:\n        if x > max:\n            max = x\n    l.remove(max)\n    sorted_list = sorted(l)\n    print(sorted_list)\n    if (sorted_list[0] + 1 == sorted_list[1] == sorted_list[2] == sorted_list[3] == sorted_list[4]):\n        return True\n    else:\n        return False\n    \nif __name__ == \"__main__\":\n    l = [1,2,3,5]\n    print(check_Consecutive(l)"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return (all(l[i]==l[i-1]+1 for i in range(1,len(l))) or all(l[i]==l[i-1]-1 for i in range(1,len(l))))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    return sorted(l) == list(range(min(l),max(l)+1))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consec = sorted(l)\n    for i in range(len(consec)-1):\n        if consec[i]+1!= consec[i+1]:\n            return False\n    return True\nprint(check_Consecutive([1,2,3,4,5,6])) \nprint(check_Consecutive([1,2,3,4,5]))\nprint(check_Consecutive([1,2,4,5]))\nprint(check_Consecutive([1,2,3]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)): \n        if (i == 0): \n            if(l[i] + 1 == l[i + 1]): \n                continue\n            else: \n                return False\n        elif (i == len(l) - 1): \n            if(l[i] == l[i - 1] + 1): \n                continue\n            else: \n                return False\n        else: \n            if(l[i] == l[i - 1] + 1 and l[i] == l[i + 1] + 1): \n                continue\n            else: \n                return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<=1:\n        return False\n    for i in range(len(l)):\n        if (i+1)<len(l):\n            if l[i]!=l[i+1]-1:\n                return False\n    return True\nprint(check_Consecutive([1,2,3,4]))\nprint(check_Consecutive([0,1,3,4,6,8,9,11,12]))\nprint(check_Consecutive(['a','b','c','d','e']))\nprint(check_Consecutive([1]))\nprint(check_Consecutive([1,2,3]))\nprint(check_Consecutive([1,2,3,4,5,6,7,8,9]))\nprint(check_Consecutive([0,2,4,6,8,10]))\nprint(check_Consecutive([]))\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    try:\n        if sorted(l)==list(range(min(l),max(l)+1)):\n            return True\n        return False\n    except:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l) \n    max = 0\n    for i in range(0, n): \n        if (max < l[i]): \n            max = l[i]; \n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i=0\n    while i<len(l):\n        if i+1<len(l) and l[i]==l[i+1]-1:\n            i+=2\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # return list(set(test_list1) & set(test_list2))\n    return list(set(map(tuple, test_list1)).intersection(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [i for i in test_list1 if i in test_list2]\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1).intersection(*test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return set(test_list1) & set(test_list2)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    my_list = []\n    for i in test_list1:\n        if i in test_list2:\n            my_list.append(i)\n    return tuple(my_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result = []\n    for item in test_list1:\n        if item in test_list2 and item not in result:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    list1=[]\n    list2=[]\n    for item in test_list1:\n        if isinstance(item,tuple):\n            list1.append(item)\n    for item in test_list2:\n        if isinstance(item,tuple):\n            list2.append(item)\n    res1=[]\n    res2=[]\n    res3=[]\n    for i in list1:\n        for j in list2:\n            if i==j:\n                res1.append(i)\n                res2.append(j)\n    for i in res1:\n        for j in res2:\n            if i==j:\n                res3.append(i)\n    return res3\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return [x for x in test_list1 if x in test_list2]\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = input(\"Enter a string: \")\n    ch = input(\"Enter the character you want to replace: \")\n    newch = input(\"Enter the new character: \")\n    \n    length = len(str1)\n    for i in range(0,length):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n            print(\"The new string is: \", str1)\n            break\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str2 = str2 + newch\n        else:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n    \ndef is_pangram(sentence):\n    '''\n    Write a function to check whether a sentence is a pangram or not.\n    '''\n    new_list = sentence.lower().split()\n    alphabets = 'abcdefghijklmnopqrstuvwxyz'\n    for i in alphabets:\n        if i not in new_list:\n            return False\n    return True\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    output = []\n    for i in str1:\n        if i!= ch:\n            output.append(i)\n        else:\n            output.append(newch)\n    return ''.join(output)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # String with no characters to replace\n    str1 = \"this is a string example....wow!!!\"\n    # character to replace\n    ch = \"i\"\n    # new character\n    newch = \"s\"\n    # using replace() to replace the character\n    str1 = str1.replace(ch,newch)\n    # printing the replaced string\n    print(str1)\n    \nreplace_char('this is a string example....wow!!','i','s')\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if(str1[i]==ch):\n            str1 = str1.replace(str1[i],newch)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Set max to -1 to start with, since there's no higher value\n    # than -1 in a dictionary.\n    max_key = -1\n    # Iterate through the dictionary and set the current value\n    # of max to the current max if the max value is greater than\n    # the current value.\n    for key, value in dict1.items():\n        if value > max_key:\n            max_key = value\n    # Use a list of lists to store the key, value pairs.\n    # The key of the current list will be the current value,\n    # and the value of the current list will be the current key.\n    list_of_pairs = []\n    for key, value in dict1.items():\n        pair = [value, key]\n        list_of_pairs.append(pair)\n    # Sort the list_of_pairs, then iterate through and add the\n    # key to the new dictionary.\n    list_of_pairs.sort()\n    new_dict = {}\n    for pair in list_of_pairs:\n        new_dict[pair[1]] = pair[0]\n    return new_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict( sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    print(sorted_dict)\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key = lambda item: item[1], reverse = True))\ndef count_letter(sentence):\n    '''\n    Write a function to count the number of letters in a sentence.\n    '''\n    sentence = sentence.replace(' ', '')\n    letter_counts = dict(Counter(sentence))\n    return sort_counter(letter_counts)\ndef count_lines(filename):\n    '''\n    Write a function to count the number of lines in a file.\n    '''\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n        line_counts = len(lines)\n    return line_counts\ndef delete_letter(word):\n    '''\n    Write a function to delete a letter from a word.\n    '''\n    import random\n    new_word = []\n    for l in word:\n        if l!= random.choice(word):\n            new_word.append(l)\n    return ''.join(new_word)\ndef del_vowel(word):\n    '''\n    Write a function to delete all the vowels in a word.\n    '''\n    vowels = 'aeiou'\n    new_word = []\n    for l in word:\n        if l not in vowels:\n            new_word.append(l)\n    return ''.join(new_word)\ndef find_pairs(numbers):\n    '''\n    Write a function to find all pairs of two numbers from a given list whose sum is equal to the given target number.\n    '''\n    target = 2020\n    for n in numbers:\n        if target - n in numbers:\n            return n, target - n\ndef word_in_text(word, text):\n    '''\n    Write a function to check if a given word is contained in a text.\n    '''\n    text = text.split()\n    return word in text\ndef delete_letter(word):\n    '''\n    Write a function to delete the first and last letter from a word.\n    '''\n    return word[1:-1]\ndef read_lines(filename):\n    '''\n    Write a function to read all the lines of a file.\n    '''\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    return lines\ndef read_words(filename):\n    '''\n    Write a function to read all the words of a file.\n    '''\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    return [line.strip('\\n') for line in lines]\ndef sort_word(word):\n    '''\n    Write a function to sort a word by its letters.\n    '''\n    return ''.join(sorted(word))\ndef replace_letter(word):\n    '''\n    Write a function to replace all the letters in a word with another letter.\n    '''\n    from random import randint\n    return randint(0, len(word))\ndef delete_letter(word):\n    '''\n    Write a function to delete a letter from a word.\n    '''\n    import random\n    new_word = []\n    for l in word:\n        if l!= random.choice(word):\n            new_word.append(l)\n    return ''.join(new_word)\ndef rem_vowel(word):\n    '''\n    Write a function to remove all the vowels in a word.\n    '''\n    vowels = 'aeiou'\n    new_word = []\n    for l in word:\n        if l not in vowels:\n            new_word.append(l)\n    return ''.join(new_word)\ndef read_file(filename):\n    '''\n    Write a function to read a file and return all the words in it.\n    '''\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    return [line.strip('\\n') for line in lines]\ndef read_word(filename):\n    '''\n    Write a function to read a file and return only the words in it.\n    '''\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    return [line.strip('\\n') for line in lines]\ndef create_sentence(words):\n    '''\n    Write a function to create a sentence from a list of words.\n    '''\n    return''.join(words)\ndef random_word(filename):\n    '''\n    Write a function to randomly choose a word from a file.\n    '''\n    return random.choice(read_words(filename))\ndef count_letter(word):\n    '''\n    Write a function to count the number of times a letter appears in a word.\n    '''\n    return dict(Counter(word))\ndef add_letter(word):\n    '''\n    Write a function to add a letter at a random position in a word.\n    '''\n    import random\n    return word[:random.randint(0, len(word))] + word[random.randint(0, len(word)):]\ndef same_first_last(nums):\n    '''\n    Write a function to check if all the list elements are the same as the first and last elements.\n    '''\n    return len(nums) >= 1 and nums[0] == nums[-1]\ndef remove_letter(word):\n    '''\n    Write a function to remove the first and last letter from a word.\n    '''\n    return word[1:-1]\ndef read_line(filename):\n    '''\n    Write a function to read a line from a file.\n    '''\n    return read_lines(filename)[0]\ndef make_pig_latin(word):\n    '''\n    Write a function to convert a word to pig latin.\n    '''\n    if word[0] in 'aeiou':\n        return word + 'way'\n    else:\n        return word[1:] + word[0] + 'ay'\ndef has_pig_latin(word):\n    '''\n    Write a function to check if a word is in pig latin.\n    '''\n    return word.find('way')!= -1\ndef pig_latin_sentence(sentence):\n    '''\n    Write a function to convert a sentence to pig latin.\n    '''\n    return [make_pig_latin(word) for word in sentence.split()]\ndef is_pig_latin(word):\n    '''\n    Write a function to check if a word is in pig latin.\n    '''\n    return has_pig_latin(word)\ndef reverse_string(word):\n    '''\n    Write a function to reverse a string.\n    '''\n    return word[::-1]\ndef has_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome.\n    '''\n    return word.lower() == reverse_string(word.lower())\ndef has_palindrome(sentence):\n    '''\n    Write a function to check if a sentence is a palindrome.\n    '''\n    return ''.join([word.lower() for word in sentence.split()]) == ''.join([word[::-1].lower() for word in sentence.split()])\ndef pig_latin_sentence(sentence):\n    '''\n    Write a function to convert a sentence to pig latin.\n    '''\n    return [make_pig_latin(word) for word in sentence.split()]\ndef is_pig_latin(word):\n    '''\n    Write a function to check if a word is in pig latin.\n    '''\n    return has_pig_latin(word)\ndef is_palindrome(word):\n    '''\n    Write a function to check if a word is a palindrome.\n    '''\n    return word.lower() == reverse_string(word.lower())\ndef is_palindrome(sentence):\n    '''\n    Write a function to check if a sentence is a palindrome.\n    '''\n    return ''.join([word.lower() for word in sentence.split()]) == ''.join([word[::-1].lower() for word in sentence.split()])\ndef count_capital_letters(sentence):\n    '''\n    Write a function to count the number of capital letter"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda x:x[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return [item[0] for item in sorted(dict1.items(), key=lambda x: x[1])]\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict=dict(sorted(dict1.items(), key=lambda item: item[1],reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(),key=lambda x:x[1],reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # dict1 = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}\n    return dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum = 0\n    for n in nums:\n        sum += n\n    return min(nums) + max(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sorted_nums = sorted(nums)\n    return sum(sorted_nums[0:2])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums, reverse = True)[:2])\n    \ndef bigger_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(sum(sorted(nums)[:-2]), sum(sorted(nums)[1:3]))\n    \ndef birthday_ranges(birthdays, ranges):\n    '''\n    Given two arrays, one of birthdays and one of ranges, determine how many people have valid birthdays within the given ranges.\n    '''\n    return sum([1 for bday in birthdays if bday in ranges])\n    \ndef reverse_pair(l):\n    '''\n    Write a python function to find the pair in an array that sum up to a given number.\n    '''\n    from collections import defaultdict\n    dict_ = defaultdict(list)\n    s = set()\n    for i,v in enumerate(l):\n        dict_[v].append(i)\n    for i,v in enumerate(l):\n        if len(dict_[v*2]) > 0:\n            j = dict_[v*2][0]\n            if j!= i:\n                s.add(v)\n                return tuple(sorted([v,l[j]]))\n    return None\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # nums = [1, 2, 3, 4, 5]\n    def sum_nums(nums):\n        sum_num = 0\n        for num in nums:\n            sum_num += num\n        return sum_num\n    \n    largest = max(nums)\n    smallest = min(nums)\n    print(sum_nums(nums))\n    print(sum_nums([largest, smallest]))\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum([min(nums), max(nums)])\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    sum1 = sum(nums)\n    nums.sort()\n    sum2 = sum(nums)\n    diff = abs(sum1 - sum2)\n    return f\"The difference between the sum of the largest and smallest value is {diff}\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums)==0:\n        return None\n    else:\n        return max(nums)+min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = -float('inf')\n    smallest = float('inf')\n    for i in range(len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        elif nums[i] > largest:\n            largest = nums[i]\n    return smallest + largest\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # nums = [1,2,3,4,5,6]\n    # nums = [1,2,3,7,8,9,12,34]\n    # nums = [-1,-2,-3,-7,8,9,12,34]\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(sorted(nums)[0:2])\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string = string.lower()\n    return string\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    return lower_case\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    string=string.lower()\n    return string\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # your code here\n    for i in range(len(str1)):\n        if(str1[i].isalpha() and str1[i].islower()):\n            str1 = str1.replace(str1[i],\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.replace(\"what's\", \"what is\")\n    str1=str1.replace(\"that's\", \"that is\")\n    str1=str1.replace(\"i'm\", \"i am\")\n    str1=str1.replace(\"'re\", \" are\")\n    str1=str1.replace(\"he's\", \"he is\")\n    str1=str1.replace(\"she's\", \"she is\")\n    str1=str1.replace(\"it's\", \"it is\")\n    str1=str1.replace(\"doesn't\", \"does not\")\n    str1=str1.replace(\"we're\", \"we are\")\n    str1=str1.replace(\"they're\", \"they are\")\n    str1=str1.replace(\"what're\", \"what are\")\n    str1=str1.replace(\"there're\", \"there are\")\n    str1=str1.replace(\"be\",\"to be\")\n    str1=str1.replace(\"ain't\",\"is not\")\n    str1=str1.replace(\"don't\",\"do not\")\n    str1=str1.replace(\"can't\",\"can not\")\n    str1=str1.replace(\"i'd\",\"i would\")\n    str1=str1.replace(\"that'd\",\"that would\")\n    str1=str1.replace(\"i'll\",\"i will\")\n    str1=str1.replace(\"y'all\",\"you all\")\n    str1=str1.replace(\"you'll\",\"you will\")\n    str1=str1.replace(\"i've\",\"i have\")\n    str1=str1.replace(\"'til\",\"until\")\n    str1=str1.replace(\"'bout\",\"about\")\n    str1=str1.replace(\"'til\",\"until\")\n    str1=str1.replace(\"'cause\",\"because\")\n    str1=str1.replace(\"cuz\",\"because\")\n    str1=str1.replace(\"'cuz\",\"because\")\n    str1=str1.replace(\"w/\",\"with\")\n    str1=str1.replace(\"/'\",\"\")\n    str1=str1.replace(\"isn't\",\"is not\")\n    str1=str1.replace(\"he'll\",\"he will\")\n    str1=str1.replace(\"weren't\",\"were not\")\n    str1=str1.replace(\"can't\",\"cannot\")\n    str1=str1.replace(\"i'll\",\"i will\")\n    str1=str1.replace(\"doesn't\",\"does not\")\n    str1=str1.replace(\"didn't\",\"did not\")\n    str1=str1.replace(\"isn't\",\"is not\")\n    str1=str1.replace(\"'re\",\" are\")\n    str1=str1.replace(\"shouldn't\",\"should not\")\n    str1=str1.replace(\"should've\",\"should have\")\n    str1=str1.replace(\"couldn't\",\"could not\")\n    str1=str1.replace(\"you've\",\"you have\")\n    str1=str1.replace(\"you'll\",\"you will\")\n    str1=str1.replace(\"it'll\",\"it will\")\n    str1=str1.replace(\"wasn't\",\"was not\")\n    str1=str1.replace(\"'s\",\"\")\n    str1=str1.replace(\"ve\",\" have\")\n    str1=str1.replace(\"'re\",\" are\")\n    str1=str1.replace(\"should've\",\"should have\")\n    str1=str1.replace(\"could've\",\"could have\")\n    str1=str1.replace(\"wasn't\",\"was not\")\n    str1=str1.replace(\"'d\",\" would\")\n    str1=str1.replace(\"'ve\",\" have\")\n    str1=str1.replace(\"'m\",\" am\")\n    str1=str1.replace(\"'d\",\" would\")\n    str1=str1.replace(\"won't\",\"will not\")\n    str1=str1.replace(\"'cause\",\"because\")\n    str1=str1.replace(\"'cause\",\"because\")\n    str1=str1.replace(\"'a\",\"a\")\n    str1=str1.replace(\"'em\",\"them\")\n    str1=str1.replace(\"'bout\",\"about\")\n    str1=str1.replace(\"'til\",\"until\")\n    str1=str1.replace(\"'til\",\"until\")\n    str1=str1.replace(\"'s\",\"\")\n    str1=str1.replace(\"'re\",\" are\")\n    str1=str1.replace(\"'bout\",\"about\")\n    str1=str1.replace(\"'til\",\"until\")\n    str1=str1.replace(\"'til\",\"until\")\n    str1=str1.replace(\"/'\",\"\")\n    str1=str1.replace(\";\",\"\")\n    str1=str1.replace(\":\",\"\")\n    str1=str1.replace(\">\",\"\")\n    str1=str1.replace(\"<\",\"\")\n    str1=str1.replace(\"}\",\"\")\n    str1=str1.replace(\"{\",\"\")\n    str1=str1.replace(\"[\",\"\")\n    str1=str1.replace(\"]\",\"\")\n    str1=str1.replace(\"|\",\"\")\n    str1=str1.replace(\"+\",\"\")\n    str1=str1.replace(\",\",\"\")\n    str1=str1.replace(\"--\",\"\")\n    str1=str1.replace(\"(\",\"\")\n    str1=str1.replace(\")\",\"\")\n    str1=str1.replace(\".\",\"\")\n    str1=str1.replace(\"!\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"'\",\"\")\n    str1=str1.replace(\"'\",\"\")\n    str1=str1.replace('\"',\"\")\n    str1=str1.replace(\".\",\"\")\n    str1=str1.replace(\",\",\"\")\n    str1=str1.replace(\"!\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"'\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"-\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"*\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replace(\"/\",\"\")\n    str1=str1.replac"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    regex = re.compile(r'[a-z]')\n    x = regex.findall(str1)\n    print('\\nThe output string without lowercase characters is:',\n        ' '.join(x))\n    return''.join(x)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"abcdefghijklmnopqrstuvwxyz\", \"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    remove_lw_str = str1.lower()\n    return remove_lw_str\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().split()\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    for char in str1:\n        if char.islower():\n            str1 = str1.replace(char,'')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_case_words = re.findall(r'\\b[a-z]{2,15}\\b',str1)\n    for i in range(len(lower_case_words)):\n        str1 = re.sub(lower_case_words[i],'',str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    return re.sub('[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #removing all substring that start from the beginning of a word\n    #remove the substring from the beginning of a word\n    str1 = re.sub(r'^\\w+','',str1)\n    #remove the substring at the end of a word\n    str1 = re.sub(r'\\w+$','',str1)\n    #remove the substring in the middle of a word\n    str1 = re.sub(r'\\w+', '', str1)\n    return str1\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n :\n        return n % 10\n        n = n // 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try :\n        return(int(str(n)[0]))\n    except :\n        return -1\n    \n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    if n < 0:\n        n = n * -1\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        return int(n[0])\n    except:\n        return 0\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**0\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n>=0 :\n        return n%10\n    else:\n        return -1*(n%(-10))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10 ** (len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**(len(str(n))-1)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n >= 1:\n        return n % 10\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [] \n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for num in list:\n        if num % 2 == 1:\n            odds.append(num)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    print(\"\\nSplit:\")\n    \n    # Split the list into two parts\n    part1 = []\n    part2 = []\n    for i in list:\n        if i % 2!= 0:\n            part1.append(i)\n        else:\n            part2.append(i)\n    print(f\"part1: {part1}\")\n    print(f\"part2: {part2}\")\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0] \n  \nlist = [1,2,3,4,5,6,7,8,9,10]\nprint(Split(list))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2 == 1:\n            odd_list.append(i)\n    return odd_list\nlist = [1,2,3,4,5,6,7,8,9]\nprint(Split(list))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # Initialize a blank list\n    listOdd = []\n    # For each element in the list\n    for num in list:\n        # Check if the element is odd and if so add it to the odd list\n        if num % 2!= 0:\n            listOdd.append(num)\n    return listOdd\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            list.pop(i)\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = [number for number in list if number % 2!= 0]\n    return odd_list\n    \ndef Reverse(list):\n    '''\n    Write a python function which takes a list and returns the reversed version of the list.\n    '''\n    reversed_list = list[::-1]\n    return reversed_list\n    \ndef Minimum(list):\n    '''\n    Write a python function which takes a list and returns the minimum number in the list. If the list is empty, have the function return False.\n    '''\n    try:\n        minimum = min(list)\n        return minimum\n    except:\n        return False\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list_2 = []\n    for i in list:\n        if i % 2!= 0:\n            list_2.append(i)\n    return list_2\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2]\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum([x**3 for x in range(1, n+1)]) - sum([x for x in range(1, n+1)])\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n<=1:\n        return 0\n    return sum_of_cubes(n) - sum_of_numbers(n)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum([x**3 for x in range(1,n+1)]) - sum([x for x in range(1,n+1)]))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(n)\n    sum1 = 0\n    sum2 = 0\n    for i in range(1, n+1):\n        sum1 += i**3\n        sum2 += i\n    return abs(sum2**2 - sum1)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = 0\n    for i in range(n+1) :\n        x += (i**3)\n    sum1 = sum(range(1, n+1))**3\n    return abs(sum1 - x)\n    \n    \n    \n    \n    \ndef fibonacci(n):\n    '''\n    Write a Python function that takes a number n and returns the n-th Fibonacci number.\n    '''\n    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \n    \n    \n    \n    \ndef factorial(n):\n    '''\n    Write a Python function that takes a number n and returns the n-th number in the factorial sequence.\n    '''\n    if(n==0):\n        return 1\n    else:\n        return n*factorial(n-1)\n    \n    \n    \n    \ndef sum_of_digit_squares(number):\n    '''\n    Write a Python function that takes a number n and returns the sum of the squares of its digits.\n    '''\n    return sum(map(lambda x: int(x)**2, str(number)))\n    \n    \n    \n    \ndef reverse(string):\n    '''\n    Write a Python function to reverse the given string.\n    '''\n    return string[::-1]\n    \n    \n    \n    \ndef long_multiplication(string1, string2):\n    '''\n    Write a Python function to determine if one string is a substring of another.\n    '''\n    return string1 in string2\n    \n    \n    \n    \ndef narcissistic_number(n):\n    '''\n    Write a Python function to determine if a number is narcissistic.\n    '''\n    return sum([int(x)**len(str(n)) for x in str(n)]) == n\n    \n    \n    \n    \ndef is_prime(n):\n    '''\n    Write a Python function to determine if a number is a prime.\n    '''\n    if n < 2:\n        return False\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \n    \n    \n    \ndef is_palindrome(string):\n    '''\n    Write a Python function to determine if a string is a palindrome.\n    '''\n    string1 = list(string)\n    string2 = []\n    for i in string1:\n        string2.insert(0, i)\n    return string1 == string2\n    \n    \n    \n    \ndef is_credit_card_valid(number):\n    '''\n    Write a Python function to determine if a number is a credit card number.\n    '''\n    return (number % 10 == 0 and number!= 4) or (number % 10 == 0 and (number % 100 < 4 and number % 1000 > 3))\n    \n    \n    \n    \ndef get_prime_factors(n):\n    '''\n    Write a Python function to get prime factors of a number.\n    '''\n    prime = []\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            prime.append(i)\n            n = n // i\n    if n!= 1:\n        prime.append(n)\n    return prime\n    \n    \n    \n    \ndef get_sum_of_divisors(n):\n    '''\n    Write a Python function to get the sum of divisors of a number.\n    '''\n    sum = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            sum += i + n // i\n    return sum\n    \n    \n    \n    \ndef greatest_common_divisor(x, y):\n    '''\n    Write a Python function to find the greatest common divisor (GCD) of two numbers.\n    '''\n    while y!= 0:\n        x, y = y, x % y\n    return x\n    \n    \n    \n    \ndef least_common_multiple(x, y):\n    '''\n    Write a Python function to find the least common multiple (LCM) of two numbers.\n    '''\n    return x * y // greatest_common_divisor(x, y)\n    \n    \n    \n    \ndef find_lcm_for_list(numbers):\n    '''\n    Write a Python function to find the least common multiple (LCM) of a list of numbers.\n    '''\n    x = numbers[0]\n    for i in numbers:\n        x = least_common_multiple(x, i)\n    return x\n    \n    \n    \n    \ndef extract_number(string):\n    '''\n    Write a Python function to extract a number from a string.\n    '''\n    return int(''.join([x for x in string if x.isdigit()]))\n    \n    \n    \n    \ndef pythagorean_triplet(n):\n    '''\n    Write a Python function to find a Pythagorean triplet whose sum is n.\n    '''\n    c = 1\n    while True:\n        for i in range(1, n):\n            for j in range(1, n):\n                if i**2 + j**2 == n:\n                    return i, j, n\n        n += 1\n    \n    \n    \ndef symmetric_triangle(n):\n    '''\n    Write a Python function to find the greatest number that can be formed by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n), reverse=True)))\n    \n    \n    \n    \ndef increasing_subsequence(array):\n    '''\n    Write a Python function to find the longest increasing subsequence in a given array of numbers.\n    '''\n    return len(max(list(map(lambda x: list(itertools.takewhile(lambda y: y < x, array)), array))))\n    \n    \n    \n    \ndef get_divisors(n):\n    '''\n    Write a Python function to get the divisors of a number.\n    '''\n    return [i for i in range(1, n+1) if n % i == 0]\n    \n    \n    \n    \ndef get_circular_prime_factors(n):\n    '''\n    Write a Python function to find all circular prime factors of a number.\n    '''\n    def circular_prime_factors(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if is_prime(i):\n                    yield i\n                yield from circular_prime_factors(n//i)\n    return list(circular_prime_factors(n))\n    \n    \n    \n    \ndef get_circular_prime_factors_for_list(numbers):\n    '''\n    Write a Python function to find circular prime factors of a list of numbers.\n    '''\n    def circular_prime_factors(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if is_prime(i):\n                    yield i\n                yield from circular_prime_factors(n//i)\n    return list(circular_prime_factors(numbers[0]))\n    \n    \n    \n    \ndef get_all_circular_prime_factors(n):\n    '''\n    Write a Python function to find all circular prime factors of a number.\n    '''\n    def circular_prime_factors(n):\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if is_prime(i):\n                    yield i\n                yield from circular_prime_factors(n//i)\n    return list(set(circular_prime_factors(n)))\n    \n    \n    \n    \ndef get_all_circular_prime_factors_for_list(numbers):\n    '''\n    Write a Python function to find circular prime factors of a list of numbers.\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube_sum(n) : \n        return (n * (n + 1) * (2 * n + 1)) / 6\n    return cube_sum(n) - (n * (n + 1) / 2)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = n*(n+1)*(2*n+1)/6\n    sum_of_nums = n*(n+1)/2\n    diff = sum_of_nums**2 - sum_of_cubes\n    return int(diff)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    x = sum([i**3 for i in range(1,n+1)])\n    y = sum([i for i in range(1,n+1)])\n    return(x-y)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return (sum_of_cubes(n) * 3 - sum_of_n(n))\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_n = (n*(n+1)/2)**2\n    sum_cubes_n = 0\n    for i in range(1,n+1) :\n        sum_cubes_n += i**3\n    return sum_cubes_n - sum_n\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # Your code goes here\n    count = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if((A[i]^A[j]) & 1) :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) : \n        for j in range(i+1,N) : \n            if((A[i]^A[j])&1) : \n                count = count+1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # A - input list \n    # N - length of list A \n    count = 0\n    for i in range(0, N-1, 1) : \n        for j in range(i+1, N, 1) : \n            if ( A[i] ^ A[j] ) & 1 : \n                count = count + 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    for i in range(N) : \n        for j in range(i+1,N) :\n            if (A[i]^A[j])%2!= 0 :\n                print(i,j)\n                return\n    print('There is no Odd Pair')\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # code here\n    s=0\n    for i in range(N):\n        for j in range(i+1,N):\n            s=s+int(A[i]^A[j])\n    return s\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if (A[i] ^ A[j]) & 1 : \n                count += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    C = 0\n    for i in range(0,N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j] ) & 1 :\n                C += 1\n    return C\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_values = []\n    for i in range(1, N) : \n        for j in range(i+1, N+1) : \n            xor_values.append(A[i] ^ A[j])\n    odd_count = 0\n    for i in xor_values : \n        if i & 1 : \n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(ch.upper() if ch.islower() else ch.lower() if ch.isupper() else ch for ch in string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    #returns a string with all characters in the same case but letters and numbers are lowercase and all others are uppercase\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string_list = list(string)\n    string_list.reverse()\n    print(string_list)\n    print(list(reversed(string_list)))\n    return \"\".join(string_list)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    print(''.join(map(str.swapcase, string)))\n    return \n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    swapcase = lambda x: x.swapcase()\n    return swapcase(string)\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    upper_to_lower = lambda char : char.upper() if char.islower() else char.lower()\n    lower_to_upper = lambda char : char.upper() if char.isupper() else char.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    def toggle(char):\n        if char.isupper():\n            return char.lower()\n        elif char.islower():\n            return char.upper()\n        else:\n            return char\n    return ''.join(map(toggle, string))\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def digit_distance(n1, n2):\n        n1 = str(n1)\n        n2 = str(n2)\n        return sum(abs(ord(n1[i]) - ord(n2[i])) for i in range(len(n1)))\n    return digit_distance(n1, n2)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(n1[i]) - int(n2[i])) for i in range(len(n1))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    print(sum([abs(int(x) - int(y)) for x, y in zip(str(n1), str(n2))]))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def to_num(n):\n        return int(str(n).replace('.', ''))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # if type(n1) is not int:\n    #     raise Exception(\"Invalid Input\")\n    # elif type(n2) is not int:\n    #     raise Exception(\"Invalid Input\")\n    # elif n1 < 0:\n    #     raise Exception(\"Invalid Input\")\n    # elif n2 < 0:\n    #     raise Exception(\"Invalid Input\")\n    # return sum([abs(n1 // (10**i) - n2 // (10**i)) for i in range(n1, n2 + 1)])\n    return sum(abs(i - j) for i, j in zip(str(n1), str(n2)))\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1,n2 = n2,n1\n    return sum([abs(n1 // (10**(i+1)) % 10 - n2 // (10**i) % 10) for i in range(abs(n1-n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # if not isinstance(n1, int) or not isinstance(n2, int):\n    #     return None\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    #take the absolute value of each number\n    abs_n1 = abs(n1)\n    abs_n2 = abs(n2)\n    #turn the numbers into strings\n    n1_str = str(abs_n1)\n    n2_str = str(abs_n2)\n    #count the number of digits in each number\n    num_digits_n1 = len(n1_str)\n    num_digits_n2 = len(n2_str)\n    #create a list to hold the per-digit distance for each number\n    per_digit_distance_nums = []\n    #iterate through each digit in the number\n    for i in range(num_digits_n1):\n        #set the starting digit number for each number to 0\n        digit_n1 = 0\n        digit_n2 = 0\n        #iterate through each digit in each number\n        for j in range(num_digits_n1):\n            #increment the digit number in the first number\n            digit_n1 += int(n1_str[j])\n            #increment the digit number in the second number\n            digit_n2 += int(n2_str[j])\n        #add the absolute value of the difference between the digit number of each number\n        per_digit_distance_nums.append(abs(digit_n1 - digit_n2))\n    #return the total sum of the per-digit differences\n    return sum(per_digit_distance_nums)\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    return sum([abs(int(i)-int(j)) for i,j in zip(str(n1),str(n2))])\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    result = 0\n    for i in range(0, len(n1)):\n        result += abs(int(n1[i]) - int(n2[i]))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum = 0\n    for i in range(0, size):\n        sum = sum + a[i]\n        if sum < 0:\n            sum = 0\n        if max_sum < sum:\n            max_sum = sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        current_sum = 0\n        for j in range(i, size):\n            current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    for i in range(size):\n        max_sum = max(a[i], max_sum + a[i])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_ending_here = 0\n    max_so_far = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif (max_so_far < max_ending_here):\n            max_so_far = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sums = 0\n    for i in range(0, size):\n        sums += a[i]\n        if sums < 0:\n            sums = 0\n        if sums > max_sum:\n            max_sum = sums\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    sum = 0\n    start = 0\n    end = 0\n    for i in range(0,size):\n        sum += a[i]\n        if sum < 0:\n            sum = 0\n            start = i + 1\n        elif sum > max_sum:\n            max_sum = sum\n            max_start = start\n            max_end = i + 1\n    return max_sum, max_start, max_end\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    max_start = 0\n    max_end = 0\n    for i in range(size):\n        sum = 0\n        for j in range(i, size):\n            sum += a[j]\n            if sum > max_sum:\n                max_sum = sum\n                max_start = i\n                max_end = j\n    return (max_sum, max_start, max_end)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # e.g. (1, 2, 3), (4, 5, 6) ==> (1, 2, 3, 4, 5, 6)\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = ()\n    union_tup = tuple(set(test_tup1 + test_tup2))\n    union_tup = sorted(union_tup)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set()\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup_union = list(set(test_tup1) | set(test_tup2))\n    tup_union.sort()\n    return tuple(tup_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # tuple of elements in test_tup1 but not in test_tup2\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    set_union = set1 | set2\n    # sorted list of tuples\n    union_list = sorted(set_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return(sorted(set(test_tup1).union(set(test_tup2))))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Write your solution here\n    test_tup1_set = set(test_tup1)\n    test_tup2_set = set(test_tup2)\n    union_set = test_tup1_set.union(test_tup2_set)\n    union_tup = tuple(sorted(union_set))\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = ()\n    for element1 in test_tup1:\n        if element1 not in new_tup:\n            new_tup += (element1,)\n    for element2 in test_tup2:\n        if element2 not in new_tup:\n            new_tup += (element2,)\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = set(test_tup1).union(set(test_tup2))\n    sorted_union_tup = sorted(union_tup)\n    return sorted_union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = sorted(set(test_tup1) | set(test_tup2))\n    return tuple(union_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = []\n    for i in lst:\n        l.append(len(i))\n    l.sort()\n    return l[-1]\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return len(max(lst, key=len))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if i!= j and len(lst[i]) > len(lst[j]) and len(lst[j]) + len(lst[i]) == len(lst[i]) + len(lst[j]):\n                max_length = max(len(lst[i]) + len(lst[j]), max_length)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_l = 0\n    for i in range(len(lst)):\n        sub_l = 1\n        for j in range(len(lst)-i):\n            if lst[i] == lst[j+i] :\n                sub_l +=1\n            else:\n                break\n        if max_l < sub_l:\n            max_l = sub_l\n    return max_l\nprint(Find_Max_Length(lst))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    max_length = 1\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max([len(x) for x in lst])\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxlen = -1\n    for i in lst:\n        if len(i) > maxlen:\n            maxlen = len(i)\n    return maxlen\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    lengths = [1]*n\n    for i in range(n):\n        for j in range(0,i):\n            if lst[i] > lst[j] and lengths[i] < lengths[j] + 1:\n                lengths[i] = lengths[j] + 1\n    return max(lengths)\n    \ndef Min_Max(lst):\n    '''\n    Write a python function to find the minimum and maximum values in a list.\n    '''\n    min_num = lst[0]\n    max_num = lst[0]\n    for i in range(len(lst)):\n        if lst[i] < min_num:\n            min_num = lst[i]\n        if lst[i] > max_num:\n            max_num = lst[i]\n    return (min_num,max_num)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l = []\n    for x in lst:\n        l.append(len(x))\n    return max(l)\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i)>max_len:\n            max_len = len(i)\n    return max_len\n    \ndef remove_from_list(lst, value):\n    '''\n    Write a python function to remove the first occurance of value from the list\n    '''\n    lst.remove(value)\n    return lst\n    \ndef Max_Min_Sum(lst):\n    '''\n    Write a python function to find the max, min, and sum of the list\n    '''\n    max_num = 0\n    min_num = 100\n    sum_num = 0\n    for i in lst:\n        if i>max_num:\n            max_num = i\n        if i<min_num:\n            min_num = i\n        sum_num += i\n    return (max_num,min_num,sum_num)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #match=re.findall(r'\\\"(.+?)\\\"',text)\n    match=re.findall('\".*\"',text)\n    #print(match)\n    return match\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # data = \"The number of people who died in the disaster was \\\"40,000\\\", and the number who survived is \\\"24,000\\\".\"\n    # print(data)\n    #\n    # pattern = r'\"[^\"]+\"'\n    # result = re.findall(pattern, data)\n    # print(result)\n    #\n    # pattern = r\"'[^']+'\"\n    # result = re.findall(pattern, data)\n    # print(result)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"\\\"(.*?)\\\"\"\n    result = re.findall(regex,text)\n    return result\ndef extract_values_advanced(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"\\\"(.*?)\\\"\"\n    return re.findall(regex,text)\ndef extract_words(text):\n    '''\n    Write a function to extract words between quotation marks from a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"\\w+\"\n    result = re.findall(regex,text)\n    return result\ndef extract_words_advanced(text):\n    '''\n    Write a function to extract words between quotation marks from a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"\\w+\"\n    return re.findall(regex,text)\ndef quote_count(text):\n    '''\n    Write a function to extract the number of quotation marks in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"\\\"\"\n    result = re.findall(regex,text)\n    return len(result)\ndef quote_count_advanced(text):\n    '''\n    Write a function to extract the number of quotation marks in a string.\n    '''\n    # Do not delete 'r'.\n    return text.count(\"\\\"\")\ndef extract_unique_words(text):\n    '''\n    Write a function to extract unique words from a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"\\w+\"\n    result = set(re.findall(regex,text))\n    return result\ndef extract_unique_words_advanced(text):\n    '''\n    Write a function to extract unique words from a string.\n    '''\n    # Do not delete 'r'.\n    return set(extract_words_advanced(text))\ndef find_dates(text):\n    '''\n    Write a function to find dates in the format YYYY-MM-DD in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"(?P<date>\\d{4}[-]\\d{2}[-]\\d{2})\"\n    matches = re.findall(regex,text)\n    return matches\ndef find_dates_advanced(text):\n    '''\n    Write a function to find dates in the format YYYY-MM-DD in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"(?P<date>\\d{4}[-]\\d{2}[-]\\d{2})\"\n    matches = re.findall(regex,text)\n    return matches\ndef find_phone_numbers(text):\n    '''\n    Write a function to find phone numbers in the format XXX-XXX-XXXX in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"(?P<phone>\\d{3}[-]\\d{3}[-]\\d{4})\"\n    matches = re.findall(regex,text)\n    return matches\ndef find_phone_numbers_advanced(text):\n    '''\n    Write a function to find phone numbers in the format XXX-XXX-XXXX in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"(?P<phone>\\d{3}[-]\\d{3}[-]\\d{4})\"\n    matches = re.findall(regex,text)\n    return matches\ndef find_emails(text):\n    '''\n    Write a function to find emails in the format user@domain.com in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"(?P<email>\\w+[.]\\w+[@]\\w+[.]\\w+)\"\n    matches = re.findall(regex,text)\n    return matches\ndef find_emails_advanced(text):\n    '''\n    Write a function to find emails in the format user@domain.com in a string.\n    '''\n    # Do not delete 'r'.\n    regex = r\"(?P<email>\\w+[.]\\w+[@]\\w+[.]\\w+)\"\n    matches = re.findall(regex,text)\n    return matches\ndef tokenize(text):\n    '''\n    Write a function to extract tokens from the string. Tokens can be numbers, words, or special characters.\n    '''\n    # Do not delete 'r'.\n    regex = r\"[\\w']+\"\n    return re.findall(regex,text)\ndef tokenize_advanced(text):\n    '''\n    Write a function to extract tokens from the string. Tokens can be numbers, words, or special characters.\n    '''\n    # Do not delete 'r'.\n    regex = r\"[\\d+\\w+\\W]\"\n    return re.findall(regex,text)\ndef find_tokens_matching_pattern(text,pattern):\n    '''\n    Write a function to find tokens in the string that match the given pattern.\n    '''\n    # Do not delete 'r'.\n    regex = pattern\n    return re.findall(regex,text)\ndef find_tokens_matching_pattern_advanced(text,pattern):\n    '''\n    Write a function to find tokens in the string that match the given pattern.\n    '''\n    # Do not delete 'r'.\n    regex = pattern\n    return re.findall(regex,text)\ndef find_matches_in_file(filename,pattern):\n    '''\n    Write a function to find pattern matches in a file.\n    '''\n    with open(filename) as file:\n        text = file.read()\n        matches = find_tokens_matching_pattern(text,pattern)\n    return matches\ndef find_matches_in_file_advanced(filename,pattern):\n    '''\n    Write a function to find pattern matches in a file.\n    '''\n    with open(filename) as file:\n        text = file.read()\n        matches = find_tokens_matching_pattern_advanced(text,pattern)\n    return matches\ndef test_function(test_case):\n    text = test_case[0]\n    pattern = test_case[1]\n    expected = test_case[2]\n    if expected == None:\n        expected = []\n    # Do not delete 'r'.\n    regex = pattern\n    result = re.findall(regex,text)\n    if result == expected:\n        print(\"Pass\")\n    else:\n        print(\"Fail\")"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = r\"(\\'.*?\\')|(\\\".*?\\\")\"\n    string = text\n    matches = re.findall(regex, string)\n    for m in matches:\n        string = string.replace(m[0], '')\n        string = string.replace(m[1], '')\n    return string\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted = re.findall('\"([^\"]*)\"',text)\n    if len(extracted) > 0:\n        return extracted[0]\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\"([^\"]*)\"', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(\"[\\\"\\w\\s,]+\",text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #re.findall('\"(.*?)\"', text, flags=re.S)\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    print(matches)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    reg = r'\\\"(.*?)\\\"'\n    return re.findall(reg, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #\"text\": \"The number of ways of picking three from a set of seven is\n    #currently greater than 5,000,000,000, and the number of ways of picking\n    #two from a set of eight is currently less than 500,000,000, but there will\n    #be less than two ways in the next 50 years. What is the expected value of\n    #the number of ways of picking three from a set of eight?\"\n    #\"targets\": ['3, 7']\n    #\"pattern\": re.compile(\"[^\"]*'([^']*)'\")\n    \n    pattern = re.compile(\"[^']*'([^']*)'\")\n    results = pattern.findall(text)\n    #print(results)\n    return results\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    # get number of pairs for each element\n    # convert to string to use itertools\n    num_pairs = [str(i) for i in arr]\n    num_pairs = list(itertools.combinations(num_pairs,2))\n    num_pairs = [int(pair[0] + pair[1]) for pair in num_pairs]\n    return len([p for p in num_pairs if p%2!= 0])\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count=0\n    for i in range(1,n):\n        j=i-1\n        k=i\n        while(j>=0):\n            while(k<n):\n                if arr[j]!=arr[k]:\n                    count+=1\n                j=j-1\n                k=k+1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr_dict={}\n    for item in arr:\n        if item in arr_dict:\n            arr_dict[item]+=1\n        else:\n            arr_dict[item]=1\n    count=0\n    for key,val in arr_dict.items():\n        if val>1:\n            count+=val*(val-1)/2\n    return int(count)\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    \n    # If the list is empty\n    if not arr:\n        return 0\n    \n    # If the list has only one element\n    if n == 1:\n        if arr[0]!= arr[0]:\n            return 1\n        else:\n            return 0\n    \n    # If the list has only two elements\n    if n == 2:\n        if arr[0]!= arr[1]:\n            return 1\n        else:\n            return 0\n        \n    \n    count = 0\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n                \n    return count\n    \nprint(count_Pairs([1,2,3,4,5], 5))\nprint(count_Pairs([1,2,3,4,5,6,7], 7))\nprint(count_Pairs([1,2,3,4,5,6,7,8,9], 9))\nprint(count_Pairs([1,1,1,1,1], 5))\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10], 10))\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,11], 10))\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18], 20))\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], 20))\nprint(count_Pairs([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 20))"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n < 2:\n        return 0\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    arr.sort()\n    for i in range(n-1):\n        if arr[i]!= arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n    \n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(0,n):\n            if i!=j:\n                count+=1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Initialize result\n    res = 0\n    #Iterate over the list and count all pairs where first element is different from second element\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n    \n    \ndef permute(a,l,r):\n    '''\n    Write a function that takes in three parameters, the list of values to permute, the left and right indexes to perform the permutation on.\n    '''\n    if l==r:\n        print(a)\n    else:\n        for i in range(l,r+1):\n            a[l],a[i]=a[i],a[l]\n            permute(a,l+1,r)\n            a[l],a[i]=a[i],a[l]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word] \n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the variable\n    total = 0\n    # Add each digit\n    for digit in str(n):\n        total += int(digit)\n    # Return the sum\n    return total\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    s = str(n)\n    sums = 0\n    for i in s:\n        sums += int(i)\n    return sums\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n > 0:\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return (n%10) + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n % 10 + sum_digits(n//10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(x) for x in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 10:\n        return n\n    return n % 10 + sum_digits(n // 10)\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    result = 0\n    while n:\n        result += n % 10\n        n //= 10\n    return result\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    \n    if list1[0] > list1[1]:\n        return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #return sorted(list1) == list1 # time complexity O(n)\n    for i in range(len(list1)-1):\n        if(list1[i] > list1[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if(len(list1)==1):\n        return True\n    if(list1[0]>list1[1]):\n        return False\n    return issort_list(list1[1:])\n    \ndef issort_list_recursive(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if(len(list1)==1):\n        return True\n    if(list1[0]>list1[1]):\n        return False\n    return issort_list_recursive(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # if len(list1) <= 1:\n    #     return True\n    # for i in range(len(list1)-1):\n    #     if list1[i] > list1[i+1]:\n    #         return False\n    # return True\n    if len(list1) <= 1:\n        return True\n    return list1[0] < list1[1] and issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(0,len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1_check = list1.copy()\n    list1_check.sort()\n    if list1_check == list1:\n        return True\n    return False\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    list1.sort()\n    if list1 == list(range(1,len(list1)+1)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    if type(length) is int and length > 0:\n        return [{}] * length\n    else:\n        return None\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    print('Write a function to create a list of N empty dictionaries.')\n    print('**Use the function to create a list of 3 dictionaries.')\n    print('**Verify that the list has 3 dictionaries in it.')\n    print('**Write the list to a file named \"dict.txt\".')\n    print('\\n')\n    dict = []\n    for i in range(0,length):\n        dict.append({})\n    print(dict)\n    with open('dict.txt','w') as f:\n        f.write(str(dict))\n    with open('dict.txt','r') as f:\n        content = f.read()\n        print(content)\n    f.close()\n    return dict\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    lst = []\n    for i in range(length):\n        lst.append({})\n    return lst\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    assert isinstance(length, int)\n    assert length > 0\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in list1:\n        i.sort()\n    return list1\n    \ndef sort_string_lists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = [sublist.sort() for sublist in list1]\n    return list1\n    \n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    list1 = list(set(list1))\n    return list1\n    \ndef remove_duplicates_new(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef find_unique_values(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef remove_duplicates_using_set(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = set(list1)\n    return unique_list\n    \ndef remove_duplicates_without_set(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef remove_duplicates_without_set_v2(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = list(set(list1))\n    return unique_list\n    \ndef remove_duplicates_without_set_v3(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef remove_duplicates_without_set_v4(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = list(set(item for sublist in list1 for item in sublist))\n    return unique_list\n    \ndef remove_duplicates_without_set_v5(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef remove_duplicates_without_set_v6(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = list(dict.fromkeys(list1))\n    return unique_list\n    \ndef remove_duplicates_without_set_v7(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = set(list1)\n    return unique_list\n    \ndef remove_duplicates_without_set_v8(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef remove_duplicates_without_set_v9(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = list(dict.fromkeys(list1))\n    return unique_list\n    \n    \ndef find_unique_values_using_set(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = set(list1)\n    return unique_list\n    \ndef find_unique_values_without_set(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = []\n    for item in list1:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list\n    \ndef find_unique_values_without_set_v2(list1):\n    '''\n    Write a function that takes a list of lists and returns a list of unique\n    items.\n    '''\n    unique_list = list(dict.fromkeys(list1))\n    return unique_list\n    \n    \ndef list_all_elements(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = []\n    for sublist in list1:\n        for item in sublist:\n            flattened_list.append(item)\n    return flattened_list\n    \ndef list_all_elements_v2(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return flattened_list\n    \ndef list_all_elements_v3(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return flattened_list\n    \ndef list_all_elements_v4(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = list(itertools.chain.from_iterable(list1))\n    return flattened_list\n    \ndef list_all_elements_v5(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = list(itertools.chain(*list1))\n    return flattened_list\n    \ndef list_all_elements_v6(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return flattened_list\n    \ndef list_all_elements_v7(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = itertools.chain(*list1)\n    return flattened_list\n    \ndef list_all_elements_v8(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = list(itertools.chain(*list1))\n    return flattened_list\n    \ndef list_all_elements_v9(list1):\n    '''\n    Write a function that takes a list of lists and returns a flattened list of\n    all items.\n    '''\n    flattened_list = itertools.chain(*list1)\n    return flattened_list\n    \ndef remove_values_from_list(list1, list2):\n    '''\n    Write a function tha"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # First we will convert the given list of lists to a single list.\n    # Then we will sort the single list\n    # We will use the sorted() function to sort the single list\n    # Finally, we will convert the single list back to a list of lists\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for i in list1:\n        i.sort()\n        sorted_list.append(i)\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for list_item in list1:\n        new_list.append(sorted(list_item))\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for item in list1:\n        item.sort()\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(\"Unsorted sublists: \", list1)\n    print(\"Sorted sublists: \")\n    for sublist in list1:\n        sublist.sort()\n        print(sublist)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # if list1:\n    #     return max(list1,key = len)\n    # else:\n    #     return []\n    list2 = []\n    for i in list1:\n        i.sort()\n        list2.append(i)\n    list2.sort(key=len)\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list=[]\n    for sublist in list1:\n        sublist.sort()\n        new_list.append(sublist)\n    return new_list\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    set_nums = set(nums)\n    return list(set_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if len(nums) < 2:\n        return nums\n    result = []\n    for n in nums:\n        if n not in result:\n            result.append(n)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    try:\n        nums = [int(i) for i in nums]\n        nums = set(nums)\n        nums = list(nums)\n        return nums\n    except Exception as e:\n        return e\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return [x[0] for x in set(tuple(x) for x in nums)]\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    temp_list = []\n    for i in nums:\n        for j in i:\n            temp_list.append(j)\n    temp_list = list(set(temp_list))\n    print(temp_list)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # solution 1:\n    # create a new list, this is more obvious and correct\n    # nums_new = []\n    # for num in nums:\n    #     if num not in nums_new:\n    #         nums_new.append(num)\n    # return nums_new\n    # this solution does not return a new list, it just removes duplicates in the input lists\n    # solution 2:\n    # create a new set\n    # return list(set(nums))\n    # this solution does not return a new list, it just removes duplicates in the input lists\n    # solution 3:\n    # convert to set\n    # return list(set(nums))\n    # this solution does not return a new list, it just removes duplicates in the input lists\n    # solution 4:\n    # create a new set\n    # for num in nums:\n    #     if num not in nums_new:\n    #         nums_new.append(num)\n    # return list(nums_new)\n    # this solution does not return a new list, it just removes duplicates in the input lists\n    # solution 5:\n    # using a set is a faster alternative to a new list, because it uses a data structure that is more efficient for searching.\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    if not nums:\n        return 'Not empty'\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    if len(nums) == 0:\n        return []\n    result = []\n    for i in range(len(nums)):\n        if nums[i] not in result:\n            result.append(nums[i])\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # my solution\n    list_nums = [int(x) for x in nums.split()]\n    print(list_nums)\n    final_list = list(dict.fromkeys(list_nums))\n    print(final_list)\n    return final_list\n    # without using dict.fromkeys method\n    '''\n    unique_nums = []\n    for x in nums:\n        if x not in unique_nums:\n            unique_nums.append(x)\n    print(unique_nums)\n    return unique_nums\n    '''\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = []\n    seen = {}\n    for num in nums:\n        if num not in seen:\n            seen[num] = 1\n            res.append(num)\n    return res\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    n = len(list_data)\n    if n == 0:\n        return None\n    if n == 1:\n        return list_data[0]\n    if n == 2:\n        return list_data[0]*list_data[1]\n    return list_data[0]*list_data[1]*unique_product(list_data[2:])\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for data in list_data:\n        if list_data.count(data) == 1:\n            product *= data\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    #initialize a variable to store the product of unique numbers\n    for num in list_data:\n        #check for unique numbers and multiply them\n        if list_data.count(num) == 1:\n            product *= num\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    result = 1\n    for num in unique_list:\n        result *= num\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    list_data = [2, 3, 5, 2, 3, 1, 3]\n    unique = set(list_data)\n    product = 1\n    for i in unique:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    s=set(list_data)\n    lst=list(s)\n    result=1\n    for x in range(len(lst)):\n        result=result*lst[x]\n    return result\n    \ndef mean(list_data):\n    '''\n    Write a python function to calculate the mean of the unique numbers in a given list.\n    '''\n    s=set(list_data)\n    lst=list(s)\n    result=0\n    for x in range(len(lst)):\n        result=result+lst[x]\n    return result/len(lst)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Uncomment lines below and complete function\n    result = []\n    for i in list_data:\n        if list_data.count(i) == 1:\n            result.append(i)\n    product_of_unique_numbers = 1\n    for i in result:\n        product_of_unique_numbers = product_of_unique_numbers * i\n    print(product_of_unique_numbers)\n    return product_of_unique_numbers"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return 1 if len(list_data) == 0 else reduce(lambda x, y: x*y, list(set(list_data)))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in set(list_data):\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in list_data:\n        product *= i\n    return product\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    return 2 * math.pi * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h + 3.14*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14 * r * h + 2 * 3.14 * r**2\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfarea = 2*3.14*r*h + 2*3.14*r**2\n    return surfarea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    a = (2*pi*r*h)+(2*pi*r**2)\n    return a\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    def surfacearea_cylinder(r,h):\n        s=((2*3.14*r)+(2*3.14*r**2))*h\n        return s\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if isinstance(r, float) and isinstance(h, float):\n        surfacearea = 2 * 3.14 * r * h\n        return surfacearea\n    else:\n        return \"Input error: should be float\"\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2 * 3.14 * (r**2) + 2 * 3.14 * r * h\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface = pi*(r**2)*h\n    return surface\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if r > 0 and h > 0:\n        return (2*3.14*r*h)+2*3.14*r**2\n    else:\n        return 'Invalid radius and/or height'\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    m = len(A)\n    n = len(B)\n    # check if A is sublist of B\n    i = 0\n    j = 0\n    while i < m and j < n:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    if i == m:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if A in B:\n        return True\n    else:\n        return False\n    \n    \n    \ndef main():\n    '''\n    The main function takes a list and a list of sublist.\n    It then returns a list of sublist that are sublist of the list provided.\n    '''\n    A = [1,2,3,4]\n    B = [[2,3],[3,4],[4,5]]\n    #Output = [2,3]\n    \n    #Inputs:\n    # A: [1,2,3,4]\n    # B: [[2,3],[3,4],[4,5]]\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    print(\"Given 2 lists are: \" + str(A) + ','+ str(B))\n    if A in B:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    for i in range(0,len(A)): \n        for j in range(0,len(B)): \n            if(A[i]==B[j]): \n                flag=1\n                break\n        if(flag==1): \n            break\n    if(flag==1): \n        print(\"sublist\")\n    else: \n        print(\"Not a sublist\")\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)>len(B):\n        print('False')\n        return False\n    if len(A)<len(B):\n        print('True')\n        return True\n    for i in range(len(A)):\n        if A[i]==B[i]:\n            if i==len(B)-1:\n                print('True')\n                return True\n        else:\n            print('False')\n            return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i=0\n    j=0\n    n1=len(A)\n    n2=len(B)\n    while(i<n1 and j<n2):\n        if A[i]==B[j]:\n            i+=1\n            j+=1\n        else:\n            i+=1\n    if j==n2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i, j = 0, 0\n    n, m = len(A), len(B)\n    while i < n and j < m:\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            j = 0\n            i += 1\n    return j == m\n    \ndef is_Sub_Array_2(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag = False\n    for i in range(len(A)):\n        if A[i] in B:\n            flag = True\n        else:\n            return False\n    return flag\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    B.sort()\n    if B in A:\n        return 1\n    return 0\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if B is None:\n        return False\n    if len(B) == 0:\n        return True\n    if A is None:\n        return False\n    if len(A) == 0:\n        return True\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n            if j == len(B):\n                return True\n        else:\n            i = i - j + 1\n            j = 0\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    #return all(item in B for item in A)\n    return A in B\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n>=0):\n        fact = 1\n        for i in range(1, n+1):\n            fact = fact*i\n        fact = str(fact)\n        last_digit = int(fact[len(fact)-1])\n        return last_digit\n    else:\n        return \"Factorial should not be negative\"\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while (n>1):\n        fact = fact * n \n        n = n - 1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    if(n<0):\n        print(\"Please Enter a positive number\")\n    elif(n==0):\n        print(\"Factorial of 0 is 1\")\n    else:\n        for i in range(1,n+1):\n            factorial = factorial*i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return 1 if n < 2 else n*last_Digit_Factorial(n-1)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return n * last_Digit_Factorial(n - 1) \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 0\n    fact = 1\n    while n // 10!= 0:\n        i += 1\n        n = n // 10\n    while i!= 0:\n        fact *= (n % 10)\n        n = n // 10\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    def fact(n):\n        if n==1:\n            return n\n        else:\n            return n*fact(n-1)\n    return fact(n) % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    s=str(n)\n    fact = 1\n    for i in range(1,int(s)+1):\n        fact = fact*i\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1,n+1):\n        factorial *= i\n    return int(str(factorial)[-1])\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    final_list = []\n    for num in range(len(list1)):\n        final_list.append(list1[num])\n        final_list.append(list2[num])\n        final_list.append(list3[num])\n    return final_list\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert type(list1)==list\n    assert type(list2)==list\n    assert type(list3)==list\n    assert len(list1)==len(list2) and len(list1)==len(list3)\n    return [item for t in zip(list1,list2,list3) for item in t]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    newlist = []\n    for i in range(len(list1)):\n        newlist.append(list1[i])\n        newlist.append(list2[i])\n        newlist.append(list3[i])\n    return newlist\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    res = []\n    for i in range(len(list1)):\n        res.append(list1[i])\n        res.append(list2[i])\n        res.append(list3[i])\n    return res\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = list()\n    for i in range(len(list1)):\n        output.append(list1[i])\n        output.append(list2[i])\n        output.append(list3[i])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = [list1[i],list2[i],list3[i]]\n    return list1\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [el for el in zip(list1,list2,list3)]\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list4 = []\n    for i in range(len(list1)):\n        list4.append(list1[i])\n        list4.append(list2[i])\n        list4.append(list3[i])\n    return list4\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    flat_list = list1 + list2 + list3\n    return flat_list\n    \nlist1 = [1,2,3]\nlist2 = [4,5,6]\nlist3 = [7,8,9]\nprint(interleave_lists(list1,list2,list3))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    \n    # Collect all the elements of the tuples into sets and find the intersection between them.\n    intersect = set(test_tup1).intersection(set(test_tup2))\n    \n    # Use the 'difference' method to find the dissimilar element\n    dissimilar = set(test_tup1).difference(set(test_tup2))\n    \n    return list(dissimilar)\n    \n    \nif __name__ == '__main__':\n    test_tup1 = (1, 2, 3, 4)\n    test_tup2 = (3, 4, 5, 6)\n    \n    print(find_dissimilar(test_tup1, test_tup2))\n    "
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    ans = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            ans.append(i)\n    return tuple(ans)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for x, y in zip(test_tup1, test_tup2):\n        if x!= y:\n            dissimilar_elems.append(x)\n    return tuple(dissimilar_elems)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a new list\n    dissimilar = []\n    # find the length of the tuple and traverse it\n    for i in range(len(test_tup1)):\n        # if a value is different add it to the list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n            dissimilar.append(test_tup2[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in test_tup1:\n        if i in test_tup2 and i not in dissimilar:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Sol 1\n    return [val for val in test_tup1 if val not in test_tup2]\n    # Sol 2\n    return (set(test_tup1)-set(test_tup2))\n    # Sol 3\n    return [i for i in test_tup1 if i not in test_tup2]\n    # Sol 4\n    d = {}\n    for x in test_tup1:\n        if x not in test_tup2:\n            d[x] = None\n    return d.keys()\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n    test_tup2 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n    \n    print(f\"Test 1: {test_tup1} and {test_tup2}\")\n    dissimilar_tup = tuple()\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_tup += (element,)\n            \n    for element in test_tup2:\n        if element not in test_tup1:\n            dissimilar_tup += (element,)\n            \n    print(f\"Dissimilar elements in the two tuples are {dissimilar_tup}\")\n    \nfind_dissimilar(test_tup1, test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result_list = []\n    \n    for i, j in zip(test_tup1, test_tup2):\n        if i!= j:\n            result_list.append(i)\n            result_list.append(j)\n    return result_list\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # get the two lists\n    tup1_list = list(test_tup1)\n    tup2_list = list(test_tup2)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        try:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        except:\n            pass\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_list = []\n    for i in test_tuple:\n        if even_fnc(i):\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for i in test_tuple:\n        if even_fnc(i):\n            new_tuple += (i,)\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for item in test_tuple: \n        if type(item) == tuple: \n            even_ele(item, even_fnc)\n        else: \n            if even_fnc(item): \n                test_tuple = list(test_tuple)\n                test_tuple.remove(item)\n                test_tuple = tuple(test_tuple)\n    return test_tuple \n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    return list(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #Initialize an empty list\n    res_lst = [] \n    for sub_tuple in test_tuple: \n        #Conditional statement\n        if len(sub_tuple) % 2 == 0: \n            res_lst.append(even_fnc(sub_tuple)) \n        #Append the even list \n        else: \n            res_lst.append(sub_tuple) \n    return tuple(res_lst) \n    "
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    #  The function should return a tuple having all the even elements.\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise ValueError(\"Invalid argument\")\n    # print(test_tuple)\n    # print(test_tuple[0])\n    # print(test_tuple[0][0])\n    return tuple(tuple(even_fnc(i) for i in ele) for ele in test_tuple)\n    \n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    list_of_tuples = list(test_tuple)\n    new_list = []\n    for i in list_of_tuples:\n        if type(i) == tuple:\n            if len(i) % 2 == 0:\n                for j in range(len(i)):\n                    if j % 2 == 0:\n                        new_list.append(i[j])\n            else:\n                new_list.append(i)\n        else:\n            new_list.append(i)\n    return tuple(new_list)\nprint(even_ele(((1,2,3,4,5,6,7,8,9),(2,3,4,5),(3,4,5,6,7,8,9)), even_ele))\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    #To remove odd elements from a nested tuple\n    def odd_ele(test_tuple, odd_fnc):\n        '''\n        Write a function to remove even elements in the nested mixed tuple.\n        '''\n        #Test-1\n        '''\n        Input-  mixed tuple- (10, 2, 3, 4, 5, 6, 7, 8, 'a', 1)\n        Output- (2, 4, 6, 8, 1)\n        '''\n        \n        test_list = list(test_tuple) \n        for i in range(0, len(test_list)):\n            if type(test_list[i]) == tuple:\n                for j in range(0, len(test_list[i])):\n                    if type(test_list[i][j]) == tuple:\n                        for k in range(0, len(test_list[i][j])):\n                            if type(test_list[i][j][k]) == tuple:\n                                for l in range(0, len(test_list[i][j][k])):\n                                    if type(test_list[i][j][k][l]) == tuple:\n                                        for m in range(0, len(test_list[i][j][k][l])):\n                                            if type(test_list[i][j][k][l][m]) == tuple:\n                                                for n in range(0, len(test_list[i][j][k][l][m])):\n                                                    if type(test_list[i][j][k][l][m][n]) == tuple:\n                                                        for o in range(0, len(test_list[i][j][k][l][m][n])):\n                                                            if type(test_list[i][j][k][l][m][n][o]) == tuple:\n                                                                for p in range(0, len(test_list[i][j][k][l][m][n][o])):\n                                                                    if type(test_list[i][j][k][l][m][n][o][p]) == tuple:\n                                                                        for q in range(0, len(test_list[i][j][k][l][m][n][o][p])):\n                                                                            if type(test_list[i][j][k][l][m][n][o][p][q]) == tuple:\n                                                                                for r in range(0, len(test_list[i][j][k][l][m][n][o][p][q])):\n                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r]) == tuple:\n                                                                                        for s in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r])):\n                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s]) == tuple:\n                                                                                                for t in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s])):\n                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t]) == tuple:\n                                                                                                        for u in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t])):\n                                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u]) == tuple:\n                                                                                                                for v in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u])):\n                                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v]) == tuple:\n                                                                                                                        for w in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v])):\n                                                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w]) == tuple:\n                                                                                                                                for x in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w])):\n                                                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x]) == tuple:\n                                                                                                                                        for y in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x])):\n                                                                                                                                            if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y]) == tuple:\n                                                                                                                                                for z in range(0, len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y])):\n                                                                                                                                                    if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z]) == tuple:\n                                                                                                                                                        if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o]) == tuple:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                                if type(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p]) == tuple:\n                                                                                                                                                                print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                                break\n                                                                                                                                                            else:\n                                                                                                                                                                pass\n                                                                                                                                                                \n                                                                                                                                                                if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o])!= 0:\n                                                                                                                                                                print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                                break\n                                                                                                                                                            \n                                                                                                                                                        \n                                                                                                                                                        if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p])!= 0:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                        else:\n                                                                                                                                                            pass\n                                                                                                                                                    \n                                                                                                                                                    if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p][q])!= 0:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                        \n                                                                                                                                                        if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p][q][r])!= 0:\n                                                                                                                                                            print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                            break\n                                                                                                                                                            \n                                                                                                                                                            if len(test_list[i][j][k][l][m][n][o][p][q][r][s][t][u][v][w][x][y][z][o][p][q][r][s])!= 0:\n                                                                                                                                                                print(\"Error! The nested tuple is not valid.\")\n                                                                                                                                                                break\n                                                                                                                                                            else:"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b * s * 0.5\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 0.5*b*s\nprint(surface_Area(4,5))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surfaceArea = (1/2)*b*s\n    print(surfaceArea)\n    return surfaceArea\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2)*b*(b+s)*3.14\n    print('The surface area is {}'.format(area))\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = (1/2) * (b * s)\n    return surface\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b**2 + (b**2 - s**2)**0.5 * 4\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b * b) + (s * s)"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    # enter your code here\n    area=(b*b*s)/2\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (1/2)*b*s*(s+b)\n    return area\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print('The dictionary is empty')\n    else:\n        print('The dictionary is not empty')\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    for key in dict1:\n        if dict1[key] == 0:\n            return True\n    return False\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_calc(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return (n*(2*n-1)*catalan_calc(n-1))//(n+1)\n    return catalan_calc(num)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num<0:\n        return None\n    else:\n        table = [0]*(num+1)\n        table[0], table[1] = 1, 1\n        for i in range(2, num+1):\n            for j in range(i):\n                table[i] += table[j]*table[i-1-j]\n        return table[-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    nums = []\n    for i in range(num):\n        nums.append(i)\n    return nums\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    else:\n        return num * (catalan_number(num - 1) * 2) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        if n<=1:\n            return 1\n        return n*factorial(n-1)\n    return int((factorial(2*num)/(factorial(num+1)*factorial(num)))*(1/4**num))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    if num == 1:\n        return 1\n    c = [0] * (num + 1)\n    c[0] = 1\n    c[1] = 1\n    for i in range(2, num+1):\n        c[i] = 0\n        for j in range(i):\n            c[i] += c[j] * c[i - j - 1]\n    return c[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num < 0:\n        return -1\n    catalan_num = 0\n    for i in range(num):\n        catalan_num += binom(2*i,i)\n    return catalan_num\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        return catalan_number(num - 1) * (4 * num - 2) / (num + 1)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(1, num + 1):\n            result += catalan_number(i - 1) * catalan_number(num - i)\n        return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    matches = re.finditer(r\"ly\\b\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n    matches = re.finditer(r\"(?<![aeiou])ly\\b\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n        \ndef find_alike_adverbs(text):\n    '''\n    Write a function to find all adverbs ending with similar endings.\n    '''\n    matches = re.finditer(r\"ly\\w+\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n    matches = re.finditer(r\"(?<![aeiou])ly\\w+\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n        \ndef remove_similar_words(text):\n    '''\n    Write a function to remove all similar words from a string.\n    '''\n    matches = re.finditer(r\"\\w+ly\\w+\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.group())\n        print(match.start())\n        print(match.end())\n        \n    matches = re.finditer(r\"(?<![aeiou])\\w+ly\\w+\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.group())\n        print(match.start())\n        print(match.end())\n        \n        \ndef remove_similar_words_with_regex(text):\n    '''\n    Write a function to remove all similar words from a string.\n    '''\n    matches = re.finditer(r\"\\b(\\w+)\\1\\b\",text)\n    for match in matches:\n        print(match.group(1))\n        print(match.start())\n        print(match.end())\n        \n    matches = re.finditer(r\"(?<![aeiou])\\b(\\w+)\\1\\b\",text)\n    for match in matches:\n        print(match.group(1))\n        print(match.start())\n        print(match.end())\n        \n        \ndef find_a_matching_patter_using_regex(text):\n    '''\n    Write a function to find the longest substring with only 1s and 0s.\n    '''\n    matches = re.finditer(r\"\\b(0|1+)(?=[^0|1]\\b)\",text)\n    for match in matches:\n        print(match.group())\n        \n    matches = re.finditer(r\"(?<=1)\\1(?=[^0|1]\\b)\",text)\n    for match in matches:\n        print(match.group())\n        \n        \ndef find_a_matching_patter_using_regex2(text):\n    '''\n    Write a function to find the longest substring with only 1s and 0s.\n    '''\n    pattern = r\"\\b(0|1+)(?=1\\b|0\\b)\"\n    matches = re.finditer(pattern,text)\n    for match in matches:\n        print(match.group())\n        \n    pattern = r\"(?<=1)\\1(?=1\\b|0\\b)\"\n    matches = re.finditer(pattern,text)\n    for match in matches:\n        print(match.group())\n        \n        \ndef find_possible_parenthesis_matches(text):\n    '''\n    Write a function to find all possible parenthesis expressions.\n    '''\n    matches = re.finditer(r\"\\(.*?\\)\",text)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n    matches = re.finditer(r\"\\(.*?\\)\",text,re.DOTALL)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n        \ndef find_possible_parenthesis_matches_using_regex(text):\n    '''\n    Write a function to find all possible parenthesis expressions.\n    '''\n    matches = re.finditer(r\"\\(\\w+\\)|\\(\\w+\\)\\w+\",text)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n    matches = re.finditer(r\"\\(.*?\\)\",text,re.DOTALL)\n    for match in matches:\n        print(match.start())\n        print(match.group())\n        \n        \ndef find_substrings_in_a_string(text):\n    '''\n    Write a function to find all possible substrings.\n    '''\n    matches = re.finditer(r\"\\b(\\w*)\\b\",text)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.IGNORECASE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.IGNORECASE|re.MULTILINE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.I)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.I)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.I|re.MULTILINE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.I|re.MULTILINE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE|re.I)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE|re.I)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE|re.I)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE|re.IGNORECASE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE|re.IGNORECASE)\n    for match in matches:\n        print(match.group(1))\n        \n    matches = re.finditer(r\"\\b(\\w*)\\b\",text,re.MULTILINE|re.IGNORECASE)\n    for match in matches:\n        print(match.group(1))\n        \n        \ndef find_the_longest_substring_in_a_string(text):\n    '''\n    Write a function to find the longest substring.\n    '''\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex_pattern = r\"\\bly\\b\"\n    matches = re.finditer(regex_pattern, text, re.MULTILINE)\n    return [match.span() for match in matches]\ndef adverb_problem():\n    text = 'Adverbs are words that modify the meaning of a word.'\n    print(find_adverbs(text))\n    # ['5 0', '14 10']\n    text2 = 'The big player is where he stands, the small player is where he stands.'\n    print(find_adverbs(text2))\n    # ['16 19']\n    text3 = 'The big player is standing in the big room, the small player is standing in the small room.'\n    print(find_adverbs(text3))\n    # ['12 15', '25 29']\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    for match in re.finditer(r'\\w+ly', text, re.IGNORECASE):\n        result.append((match.start(), match.group()))\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    words = text.split(' ')\n    # print(words)\n    for i in range(0, len(words)):\n        if (words[i] == 'ly' and words[i-1] == 'ly'):\n            return i\n    return None\ndef find_positions(text, sub_text):\n    '''\n    Write a function to find all occurences of a substring in a given string.\n    '''\n    return [m.start() for m in re.finditer(sub_text, text)]\ndef count_words_in_text(text):\n    '''\n    Write a function to count all words in a given string.\n    '''\n    words = text.split(' ')\n    return len(words)\ndef find_sentences(text):\n    '''\n    Write a function to find all sentences in a given string.\n    '''\n    return re.findall(r'(?:\\s*[^A-Z])*[A-Z]+[^.]', text, re.MULTILINE)\ndef find_sentences_with_word(text, word):\n    '''\n    Write a function to find all sentences in a given string containing the specified word.\n    '''\n    return re.findall(r'(?:\\s*[^A-Z])*{}(?:\\s*[^A-Z])*'.format(word), text, re.MULTILINE)\ndef find_sentences_with_three_words(text, words):\n    '''\n    Write a function to find all sentences in a given string containing all of the specified words.\n    '''\n    all_words = words.split('|')\n    for i in range(0, len(all_words)):\n        all_words[i] = all_words[i].strip()\n    # print(all_words)\n    sentences = find_sentences(text)\n    all_sentences = []\n    for sentence in sentences:\n        if (find_sentences_with_word(sentence, all_words[0]) and find_sentences_with_word(sentence, all_words[1]) and find_sentences_with_word(sentence, all_words[2])):\n            all_sentences.append(sentence)\n    return all_sentences\ndef count_word_occurences(text, word):\n    '''\n    Write a function to count all occurences of a word in a given string.\n    '''\n    return re.findall(r'{}'.format(word), text, re.MULTILINE)\ndef find_articles(text):\n    '''\n    Write a function to find all articles in a given string.\n    '''\n    return re.findall(r'[A-Z][a-z]+', text, re.MULTILINE)\ndef find_sentences_with_word_and_count(text, word, count):\n    '''\n    Write a function to find all sentences in a given string containing the specified word and in which the specified word occurs count times.\n    '''\n    # Find all sentences in text\n    sentences = find_sentences(text)\n    # Find all sentences containing the specified word\n    sentences_with_word = find_sentences_with_word(text, word)\n    # Find all sentences with the specified word and count of occurrences\n    sentences_with_word_count = []\n    for sentence in sentences:\n        if (sentence in sentences_with_word):\n            sentence_words = sentence.split(' ')\n            # print(sentence_words)\n            words_count = count_word_occurences(sentence, word)\n            if (words_count.__contains__(word) and words_count[0] == count):\n                sentences_with_word_count.append(sentence)\n    return sentences_with_word_count\ndef extract_sentence(text, sentence):\n    '''\n    Write a function to extract a given sentence from a given string.\n    '''\n    all_sentences = find_sentences(text)\n    if (all_sentences.__contains__(sentence)):\n        return text[text.find(sentence):]\n    return None\ndef find_sentence_with_number_of_words(text, number_of_words):\n    '''\n    Write a function to find a sentence with a number of words in a given string.\n    '''\n    sentences = find_sentences(text)\n    for sentence in sentences:\n        if (count_words_in_text(sentence) == number_of_words):\n            return sentence\n    return None\ndef find_sentence_with_number_of_words_containing_word(text, number_of_words, word):\n    '''\n    Write a function to find a sentence with a number of words in a given string and containing the specified word.\n    '''\n    all_sentences = find_sentences(text)\n    for sentence in all_sentences:\n        if (count_words_in_text(sentence) == number_of_words):\n            sentence_words = sentence.split(' ')\n            for word_count in sentence_words:\n                if (word_count == word):\n                    return sentence\n    return None\ndef find_sentence_with_number_of_words_containing_two_words(text, number_of_words, words):\n    '''\n    Write a function to find a sentence with a number of words in a given string and containing all of the specified words.\n    '''\n    all_sentences = find_sentences(text)\n    for sentence in all_sentences:\n        if (count_words_in_text(sentence) == number_of_words):\n            sentence_words = sentence.split(' ')\n            for word_count in sentence_words:\n                if (word_count in words):\n                    return sentence\n    return None\ndef find_words_in_sentence(text, word, sentence):\n    '''\n    Write a function to find all words in a given string that occur before the specified word and in the specified sentence.\n    '''\n    sentence_words = sentence.split(' ')\n    all_words = word.split('|')\n    for i in range(0, len(all_words)):\n        all_words[i] = all_words[i].strip()\n    words = []\n    for i in range(0, len(sentence_words)):\n        for j in range(0, len(all_words)):\n            if (sentence_words[i] == all_words[j]):\n                if (i == 0):\n                    words.append(sentence_words[i])\n                else:\n                    words.append(sentence_words[i-1])\n    return words\ndef find_nouns(text):\n    '''\n    Write a function to find all nouns in a given string.\n    '''\n    nouns = find_words_in_sentence(text, 'NOUN|Noun|noun|NOUN\\W+', 'adjective|adverbs|adverb|PROPN|Noun')\n    return nouns\ndef find_verbs(text):\n    '''\n    Write a function to find all verbs in a given string.\n    '''\n    verbs = find_words_in_sentence(text, 'VERB|Verb|verb|VERB\\W+', 'adjective|adverbs|adverb|PROPN|Noun')\n    return verbs\ndef find_adjectives(text):\n    '''\n    Write a function to find all adjectives in a given string.\n    '''\n    adjectives = find_words_in_sentence(text, 'ADJ|Adj|adj|ADJ\\W+', 'adjective|adverbs|adverb|PROPN|Noun')\n    return adjectives\ndef find_adverbs(text):\n    '''\n    Write a function to find all adverbs in a given string.\n    '''\n    adverbs = find_words_in_sentence(text, 'ADV|Adv|adv|ADV\\W+', 'adjective|adjectives|adjective|adjective|adjective|PROPN|Noun')\n    return adverbs\ndef find_prepositions(text):\n    '''\n    Write a function to find all prepositions in a given string.\n    '''\n    prepositions = find"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    sentence = text\n    for sentence in text.split('.'):\n        pattern = re.compile('\\w+ly\\b')\n        result = pattern.findall(sentence)\n        if result:\n            print(sentence, result)\n            return\n        \ndef find_adverbs_2(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    sentence = text\n    for sentence in text.split('.'):\n        pattern = re.compile('.*ly')\n        result = pattern.findall(sentence)\n        if result:\n            print(sentence, result)\n            return\n        \ndef find_adverb(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    sentence = text\n    pattern = re.compile('\\w+ly')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_punctuation(text):\n    '''\n    Write a function to find the first punctuation symbol and its position in a given string.\n    '''\n    sentence = text\n    for sentence in text.split('.'):\n        pattern = re.compile(r'\\w*\\.{1}\\w*')\n        result = pattern.findall(sentence)\n        if result:\n            print(sentence, result)\n            return\n        \ndef find_punctuation_2(text):\n    '''\n    Write a function to find the first punctuation symbol and its position in a given string.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w*[\\.:;,]+\\w*')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_punctuation_3(text):\n    '''\n    Write a function to find the first punctuation symbol and its position in a given string.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w*\\.[\\:;,]+\\w*')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_punctuation_4(text):\n    '''\n    Write a function to find the first punctuation symbol and its position in a given string.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w*[\\.:;,]+\\w*')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile('\\w+\\.')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_2(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_3(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_4(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_5(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_6(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_7(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_8(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_9(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_word_pattern_10(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_words_pattern(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_words_pattern_2(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_words_pattern_3(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_words_pattern_4(text):\n    '''\n    Write a function to find all occurrences of words that end with a period.\n    '''\n    sentence = text\n    pattern = re.compile(r'\\w+\\.[\\:]{1}')\n    result = pattern.findall(sentence)\n    if result:\n        print(sentence, result)\n        return\n        \ndef find_words_pattern_5(text):\n    '''\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # adjective = r'^[a-z][a-z]*ly$'\n    adjective = r'ly$'\n    # adjective_text = r'^adjective[a-z][a-z]*ly$'\n    adjective_text = r'adjectively'\n    result = []\n    for match in re.finditer(adjective, text, re.I):\n        result.append(match.start())\n    for match in re.finditer(adjective_text, text, re.I):\n        result.append(match.start())\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    import re\n    text = 'He was not only a highly intelligent but a highly curious young man.'\n    #return list of tuples containing the positions of all the matches of the pattern\n    matches = re.finditer(r'\\w+ly', text)\n    print(matches)\n    # for match in matches:\n    #     print(match)\n    #     print(match.start())\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #adverb ending with ly\n    adverb = re.findall(r\"(?<!ly)[\\W]*adverb[\\W]*(?!ly)\", text)\n    #iterate through the adverb list\n    for a in adverb:\n        #if the length of the list is greater than 0, print the adverb\n        if len(a) > 0:\n            print(a)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = re.compile(r'ly\\b')\n    result = pattern.search(text)\n    if result:\n        return result.start(), result.end()\n    return None, None\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    return re.findall(r'ly\\b', text)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n<=0:\n        return []\n    if n>len(items):\n        n=len(items)\n    heap=[]\n    for i in range(n):\n        heapq.heappush(heap,(items[i][1],items[i][0]))\n    for i in range(n,len(items)):\n        if items[i][1]>heap[0][0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,(items[i][1],items[i][0]))\n    result=[]\n    while heap:\n        result.append(heapq.heappop(heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Sort the items list based on its value\n    items = sorted(items, key=lambda item: item.price, reverse=True)\n    return items[:n]\n    # return sorted(items, key=lambda item: item.price, reverse=True)[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    import heapq\n    heapq.heapify(items)\n    print(heapq.nlargest(n,items))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    return heapq.nlargest(n, items)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # O(n log n)\n    heap=[]\n    for item in items:\n        heapq.heappush(heap,(-item[1],item[0]))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    print(heap)\n    # O(n)\n    for item in heap:\n        print(item[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    sorted_items = dict(sorted(items.items(), key = lambda x: x[1],reverse = True))\n    print(sorted_items)\n    for i in range(n):\n        print(sorted_items[i])\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: sort items by price\n    # TODO: retrieve the top n items\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #print('Items:',items)\n    #print('n:',n)\n    #print()\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # TODO: Write your code here\n    dic = {}\n    for item in items:\n        if item[0] not in dic:\n            dic[item[0]] = item[1]\n        else:\n            dic[item[0]] += item[1]\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (-1 * item[1], item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [item[1] for item in heap]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n    \ndef list_to_dict(l):\n    '''\n    Write a python function to convert a list of key value pairs to a dictionary\n    '''\n    d = {}\n    for elem in l:\n        key, val = elem\n        d[key] = val\n    return d\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    front = l[:n]\n    back = l[n:]\n    return front + back\n    \ndef count_substring(s, sub):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+len(sub)] == sub:\n            count += 1\n    return count\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1 = l[:n]\n    l2 = l[n:]\n    l1.extend(l2)\n    return l1\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if l:\n        if len(l) < n:\n            print(\"The List is too short\")\n        else:\n            return l[0:n], l[n:]\n    else:\n        print(\"The List is empty\")\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first_part = l[0:n]\n    second_part = l[n:]\n    return second_part + first_part\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuplex = tuple(listx)\n    return tuplex\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tup = tuple(listx)\n    return tup\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    listx = tuple(listx)\n    print(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    sorted_nums = sorted(nums)\n    return sorted_nums[-1]-sorted_nums[0]\n    #return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_v = max_v = nums[0]\n    for num in nums:\n        if num < min_v:\n            min_v = num\n        if num > max_v:\n            max_v = num\n    return max_v - min_v\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return (nums[-1] - nums[0])\n    \nprint(big_diff([100,101,5,10,102]))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return abs(max(nums) - min(nums))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums = sorted(nums)\n    return nums[-1] - nums[0]\n    \n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    x = 0\n    squares = []\n    for i in range(a, b+1):\n        x = i ** 2\n        if x <= b:\n            squares.append(x)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqrs = []\n    for i in range(a,b+1):\n        if i**0.5 == int(i**0.5):\n            sqrs.append(i)\n    return sqrs\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # your code here\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for num in range(a, b + 1):\n        root = num ** 0.5\n        if root.is_integer():\n            squares.append(num)\n    return squares\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # we need to check each of the numbers in the range between the two numbers\n    # we need to check if a number is a perfect square, if so then we add it to the list of perfect squares\n    # we do not want to go beyond the largest possible square that is in the range\n    # if a number is not a perfect square, we can skip it\n    # if there is a perfect square in the range, then we add that to the list of perfect squares\n    # if there are no perfect squares between the two numbers then we return an empty list\n    # if there is more than one perfect square then we return a list containing only the first perfect square\n    # if there is more than one perfect square, then we return a list containing all of the perfect squares\n    # we need to do this for each number in the range\n    \n    # we need to return a list\n    # we need to be able to tell if the number of perfect squares is even or odd\n    # if there are no perfect squares then the list should be empty\n    # if there is more than one perfect square then we only want to return the first one\n    # if there is more than one perfect square then we want to return the list containing all of them\n    # we need to return an empty list if there are no perfect squares\n    # we need to return a list if there is only one perfect square\n    # we need to return a list of all perfect squares\n    \n    # we need to add the first perfect square to our list\n    # we need to check if there is another perfect square and if so we add it to our list\n    # we need to check if there is another perfect square and if so we add it to our list\n    # we need to check if there is another perfect square and if so we add it to our list\n    # we need to check if there is another perfect square and if so we add it to our list\n    # we need to check if there is another perfect square and if so we add it to our list\n    \n    \n    # we need to initialize an empty list\n    # we need to initialize a variable to hold the count of perfect squares\n    # we need to initialize a variable to hold the count of numbers that are perfect squares\n    \n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect square\n    # if there is then we increment the count of perfect squares\n    # we need to check if there is a perfect squar"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = []\n    d = []\n    if a < b:\n        for i in range(a,b+1):\n            if i**0.5 == i//1:\n                c.append(i)\n            else:\n                d.append(i)\n    else:\n        for i in range(a,b-1,-1):\n            if i**0.5 == i//1:\n                c.append(i)\n            else:\n                d.append(i)\n    return c + d[::-1]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x ** 2 for x in range(a, b+1) if x ** 2 in range(a, b+1)]\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i**2 for i in range(start, end+1) if i**2 <= b]"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    sq_list = []\n    for i in range(a, b+1):\n        sq_list.append(i**2)\n    return sq_list\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Solution 1\n    # return [i ** 2 for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1) if i ** 2 == (b - a + 1)]\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)\ndef complex_addition(x,y):\n    '''\n    Write a function to perform complex number addition.\n    '''\n    return x+y\ndef complex_subtraction(x,y):\n    '''\n    Write a function to perform complex number subtraction.\n    '''\n    return x-y\ndef complex_multiplication(x,y):\n    '''\n    Write a function to perform complex number multiplication.\n    '''\n    return x*y\ndef complex_division(x,y):\n    '''\n    Write a function to perform complex number division.\n    '''\n    return x/y\ndef complex_modulus(x,y):\n    '''\n    Write a function to compute modulus of complex number.\n    '''\n    return cmath.sqrt(x**2+y**2)\ndef complex_conjugate(x,y):\n    '''\n    Write a function to compute conjugate of complex number.\n    '''\n    return x-y*1j\ndef complex_phase(x,y):\n    '''\n    Write a function to compute phase of complex number.\n    '''\n    return cmath.phase(complex(x,y))\ndef complex_absolute(x,y):\n    '''\n    Write a function to compute absolute value of complex number.\n    '''\n    return (x**2+y**2)**(1/2)\ndef complex_exp(x,y):\n    '''\n    Write a function to compute exponential of complex number.\n    '''\n    return cmath.exp(complex(x,y))\ndef complex_log(x,y):\n    '''\n    Write a function to compute logarithm of complex number.\n    '''\n    return cmath.log(complex(x,y))\ndef complex_pow(x,y):\n    '''\n    Write a function to compute power of complex number.\n    '''\n    return x**y\ndef complex_root(x,y):\n    '''\n    Write a function to compute nth root of complex number.\n    '''\n    return cmath.sqrt(complex(x,y))\ndef complex_sin(x,y):\n    '''\n    Write a function to compute sine of complex number.\n    '''\n    return cmath.sin(complex(x,y))\ndef complex_cos(x,y):\n    '''\n    Write a function to compute cosine of complex number.\n    '''\n    return cmath.cos(complex(x,y))\ndef complex_tan(x,y):\n    '''\n    Write a function to compute tangent of complex number.\n    '''\n    return cmath.tan(complex(x,y))\ndef complex_arcsin(x,y):\n    '''\n    Write a function to compute inverse sine of complex number.\n    '''\n    return cmath.asin(complex(x,y))\ndef complex_arccos(x,y):\n    '''\n    Write a function to compute inverse cosine of complex number.\n    '''\n    return cmath.acos(complex(x,y))\ndef complex_arctan(x,y):\n    '''\n    Write a function to compute inverse tangent of complex number.\n    '''\n    return cmath.atan(complex(x,y))\ndef complex_arcsinh(x,y):\n    '''\n    Write a function to compute inverse hyperbolic sine of complex number.\n    '''\n    return cmath.asinh(complex(x,y))\ndef complex_arccosh(x,y):\n    '''\n    Write a function to compute inverse hyperbolic cosine of complex number.\n    '''\n    return cmath.acosh(complex(x,y))\ndef complex_arctanh(x,y):\n    '''\n    Write a function to compute inverse hyperbolic tangent of complex number.\n    '''\n    return cmath.atanh(complex(x,y))\ndef complex_power(x,y):\n    '''\n    Write a function to compute nth power of complex number.\n    '''\n    return x**y\ndef complex_nth_root(x,y):\n    '''\n    Write a function to compute nth root of complex number.\n    '''\n    return cmath.pow(complex(x,y),1/y)\ndef complex_sinh(x,y):\n    '''\n    Write a function to compute sine of complex number.\n    '''\n    return cmath.sinh(complex(x,y))\ndef complex_cosh(x,y):\n    '''\n    Write a function to compute cosine of complex number.\n    '''\n    return cmath.cosh(complex(x,y))\ndef complex_tanh(x,y):\n    '''\n    Write a function to compute tangent of complex number.\n    '''\n    return cmath.tanh(complex(x,y))\ndef complex_arccosh(x,y):\n    '''\n    Write a function to compute inverse hyperbolic cosine of complex number.\n    '''\n    return cmath.acosh(complex(x,y))\ndef complex_arctanh(x,y):\n    '''\n    Write a function to compute inverse hyperbolic tangent of complex number.\n    '''\n    return cmath.atanh(complex(x,y))\ndef complex_conj(x,y):\n    '''\n    Write a function to compute conjugate of complex number.\n    '''\n    return x+y*1j\ndef complex_mod(x,y):\n    '''\n    Write a function to compute modulus of complex number.\n    '''\n    return (x**2+y**2)**(1/2)\ndef complex_arg(x,y):\n    '''\n    Write a function to compute argument of complex number.\n    '''\n    return cmath.phase(complex(x,y))\ndef complex_exponent(x,y):\n    '''\n    Write a function to compute exponent of complex number.\n    '''\n    return cmath.exp(complex(x,y))\ndef complex_log_base_2(x,y):\n    '''\n    Write a function to compute logarithm of complex number in base 2.\n    '''\n    return cmath.log(complex(x,y),2)\ndef complex_log_base_10(x,y):\n    '''\n    Write a function to compute logarithm of complex number in base 10.\n    '''\n    return cmath.log(complex(x,y),10)\ndef complex_log_base_e(x,y):\n    '''\n    Write a function to compute logarithm of complex number in base e.\n    '''\n    return cmath.log(complex(x,y))\ndef complex_log_base_x(x,y,z):\n    '''\n    Write a function to compute logarithm of complex number in base x.\n    '''\n    return cmath.log(complex(x,y),z)\ndef complex_log_base_y(x,y,z):\n    '''\n    Write a function to compute logarithm of complex number in base y.\n    '''\n    return cmath.log(complex(x,y),z)\ndef complex_log_base_z(x,y,z):\n    '''\n    Write a function to compute logarithm of complex number in base z.\n    '''\n    return cmath.log(complex(x,y),z)\ndef complex_sine(x,y):\n    '''\n    Write a function to compute sine of complex number.\n    '''\n    return cmath.sin(complex(x,y))\ndef complex_cosine(x,y):\n    '''\n    Write a function to compute cosine of complex number.\n    '''\n    return cmath.cos(complex(x,y))\ndef complex_tangent(x,y):\n    '''\n    Write a function to compute tangent of complex number.\n    '''\n    return cmath.tan(complex(x,y))\ndef complex_arcsine(x,y):\n    '''\n    Write a function to compute inverse sine of complex number.\n    '''\n    return cmath.asin(complex(x,y))\ndef complex_arccosine(x,y):"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    real = x * cmath.cos(y)\n    imag = x * cmath.sin(y)\n    return complex(real,imag)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.rect(x,y)\n    return r\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=complex(x,y)\n    return cmath.rect(r.real,r.imag)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=cmath.rect(x,y)\n    return r\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.rect(1,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=int(x)\n    theta=int(y)\n    x_rect=r*cmath.cos(theta*cmath.pi/180)\n    y_rect=r*cmath.sin(theta*cmath.pi/180)\n    return (x_rect,y_rect)\nprint(polar_rect(5,100))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = (x**2+y**2)**0.5\n    angle = cmath.atan(y/x)\n    return r,angle\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return cmath.rect(x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*cmath.exp(y*1j)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length == 0:\n        return []\n    elif length == 1:\n        return newList\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list = newList\n    length = len(newList)\n    if length == 1:\n        return list\n    elif length == 2:\n        list[0], list[1] = list[1], list[0]\n        return list\n    else:\n        list[0], list[length - 1], list[length - 2], list[length - 3] = list[length - 1], list[length - 2], list[length - 3], list[0]\n        return list"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList) - 1]\n    newList[len(newList) - 1] = temp\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0] \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # code goes here\n    return newList\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum\n    sum = 0\n    # Start from the 0th coefficient\n    coeff = 1\n    # Start from 1 because we already have one\n    for i in range(1,n+1):\n        # Repeat the sum for all the i's\n        for j in range(i,n+1):\n            # Add the i^th coefficient to the sum\n            sum = sum + coeff\n            # Increase the binomial coefficient\n            coeff = coeff * j\n        # Increase the number of terms for each new number\n        n = n + 1\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff = [0,1,0]\n    for i in range(3,n+1):\n        coeff.append(coeff[i-1]+coeff[i-2])\n    return coeff[k]\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result = result * (n-i)//(i+1) \n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k==0 or k==n:\n        return 1\n    if k==1:\n        return n\n    if k==2:\n        return n*(n+1)\n    if k==3:\n        return n*(n+1)*(n+2)\n    return binomial_Coeff(n,k-1)*n - binomial_Coeff(n,k-2)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff_list = []\n    for i in range(1,k+1):\n        coeff_list.append(comb(n,i))\n    print(sum(coeff_list))\n    return sum(coeff_list)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # return sum([n*(n-1)//2 - k*(k-1)//2 for k in range(1,n+1)])\n    return n**k + k**n\n    \n    \ndef binomial_Coeff_recursive(n,k):\n    if k == 0 or k == n:\n        return 1\n    return binomial_Coeff_recursive(n-1,k) + binomial_Coeff_recursive(n-1,k-1)\n    \n    \ndef find_max_k(n):\n    '''\n    Write a python function to find the maximum k such that the sum of the product of consecutive binomial co-efficients is less than or equal to the given value of n.\n    '''\n    max_k = 0\n    while n > sum([binomial_Coeff(n,k) for k in range(max_k+1)]):\n        max_k += 1\n    return max_k\n    \n    \ndef main():\n    # print(binomial_Coeff(5,2))\n    # print(binomial_Coeff_recursive(5,2))\n    print(find_max_k(30))\n    \n    \nif __name__ == '__main__':\n    main()\n    "
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    #Initialize an array to store the sum \n    arr = [0 for i in range(n + 1)] \n    \n    #The coefficient of nCr can be calculated using the formula (nCr = n!/(k! * (n-k)!)). \n    #The sum of the product of consecutive binomial co-efficients can be calculated using the formula.\n    #The sum of the binomial co-efficients is calculated using the formula given below.\n    \n    #Formula for sum of Binomial Coefficients = (n + 1)C0 + (n + 1)C1 + (n + 1)C2 +..... + (n + 1)Cn\n    #This formula can be extended to other terms of Binomial Coefficients \n    #by using the formula given below.\n    #Formula for (n + 1)Ck is given below.\n    #(n + 1)Ck = n!/(k! * (n-k)!)\n    #The above formula is also used to calculate the sum of the binomial co-efficients.\n    \n    #We initialize the value of n! to 1.\n    arr[0] = 1\n    \n    for i in range(1, n + 1): \n        \n        #We initialize the value of (n + 1)C0 to 1.\n        arr[i] = 1\n        \n        #We calculate the value of (n + 1)C0 in the given formula\n        for j in range(i + 1, n + 1): \n            arr[i] = arr[i] * j\n            \n        #We calculate the value of (n + 1)Ck in the given formula\n        for j in range(1, i): \n            arr[i] = arr[i]/(j + 1)\n            \n    #We return the value of the sum of the product of consecutive binomial co-efficients.\n    return sum(arr[1:]) \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    if k == 1:\n        return n\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    list1=[]\n    \n    # Initialize the list to zero\n    for i in range(n+1):\n        list1.append(0)\n    \n    # Fill in the list in a row-wise manner\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            list1[j] = (list1[j] + list1[j-1]) % (10**9 + 7)\n    return list1[k]\n    \n    \nn = 20\nk = 10\nprint(binomial_Coeff(n,k))\n    \n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # function to calculate nCk\n    def nck(n,k):\n        if (k > n-k):\n            k = n-k\n        if (k == 0):\n            return 1\n        else:\n            a = 1\n            z = 1\n            for i in range(1,k+1):\n                a = (a * (n-i+1))//i\n                z = (z * i)//(i-k)\n            return a*z\n    #function to calculate the result\n    def calSum(n):\n        return sum(nck(n,k) for k in range(n))\n    # Driver code \n    n = 100\n    print(calSum(n))\n    return\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    result=ip.split('.')\n    for i in range(len(result)):\n        if result[i]=='0':\n            result[i]=''\n    return '.'.join(result)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = str(ip)\n    for i in range(1,len(ip)):\n        if ip[i]!= '0':\n            ip = ip[i:]\n            return ip\n    return '0'\ndef removezero_string(string):\n    '''\n    Write a function to remove leading zeroes from string.\n    '''\n    string = str(string)\n    for i in range(1,len(string)):\n        if string[i]!= '0':\n            string = string[i:]\n            return string\n    return '0'\ndef removezero(ip):\n    '''\n    Write a function to remove leading zeroes from an IP address.\n    '''\n    for i in range(1,len(ip)):\n        if ip[i]!= '0':\n            return ip[i:]\n    return '0'\ndef replacezero(ip):\n    ip = str(ip)\n    ip = ip.replace('0','')\n    return ip\ndef find_ip_octets(ip):\n    ip = str(ip)\n    octets = ip.split('.')\n    return int(octets[0]),int(octets[1]),int(octets[2]),int(octets[3])\ndef split_ip(ip):\n    ip = str(ip)\n    octets = ip.split('.')\n    return int(octets[0]),int(octets[1]),int(octets[2]),int(octets[3])\ndef octet_to_binary(octet):\n    binoctet = bin(int(octet)).replace('0b','')\n    return '0'*(8-len(binoctet)) + binoctet\ndef binary_to_octet(binary):\n    octet = int(str(binary),2)\n    return octet\ndef ip_to_binary(ip):\n    binary = []\n    for octet in find_ip_octets(ip):\n        binary.append(octet_to_binary(octet))\n    return binary\ndef ip_to_octet(ip):\n    octets = []\n    for octet in ip:\n        octets.append(binary_to_octet(octet))\n    return octets\ndef binary_to_ip(binary):\n    ip = ''\n    for octet in binary:\n        ip += str(octet_to_octet(octet)) + '.'\n    return ip[:-1]\ndef octet_to_ip(octets):\n    ip = ''\n    for octet in octets:\n        ip += str(octet_to_octet(octet)) + '.'\n    return ip[:-1]\ndef ip_to_hex(ip):\n    hexip = '0x'\n    for octet in ip_to_octet(ip):\n        hexip += octet_to_hex(octet) + '.'\n    return hexip[:-1]\ndef octet_to_hex(octet):\n    return hex(octet).replace('0x','')\ndef hex_to_octet(hex):\n    return int(hex,16)\ndef hex_to_ip(ip):\n    octets = []\n    octets.append(hex_to_octet(ip[:2]))\n    octets.append(hex_to_octet(ip[2:4]))\n    octets.append(hex_to_octet(ip[4:6]))\n    octets.append(hex_to_octet(ip[6:8]))\n    return octets\ndef octet_to_ip(octets):\n    ip = ''\n    for octet in octets:\n        ip += str(octet) + '.'\n    return ip[:-1]\ndef ip_to_address(ip):\n    ip = str(ip)\n    return ip.replace('.','-')\ndef address_to_ip(address):\n    return address.replace('-','')\ndef prefix_to_network(ip,prefix):\n    octets = ip_to_octet(ip)\n    network = []\n    for i in range(0,4):\n        network.append(octets[i] & ~(1 << (32-prefix)))\n    return octet_to_ip(network)\ndef network_to_prefix(ip):\n    octets = ip_to_octet(ip)\n    mask = 0\n    for i in range(0,4):\n        mask = mask + (octets[i] & ~(1 << (32-i)))\n    return mask\ndef ip_to_binary_mask(ip,prefix):\n    binary_ip = ip_to_binary(ip)\n    binary_network = prefix_to_binary(ip,prefix)\n    return binary_ip[:len(binary_network)]\ndef ip_to_binary_network(ip,prefix):\n    binary_ip = ip_to_binary(ip)\n    binary_network = prefix_to_binary(ip,prefix)\n    return binary_network\ndef ip_to_binary_host(ip,prefix):\n    binary_ip = ip_to_binary(ip)\n    binary_network = prefix_to_binary(ip,prefix)\n    binary_host = binary_ip[:len(binary_network)]\n    return binary_host\ndef binary_to_ip_host(binary):\n    binary_host = binary[:32]\n    binary_network = binary[32:]\n    ip_host = binary_to_ip(binary_host)\n    ip_network = binary_to_ip(binary_network)\n    return ip_network, ip_host\ndef binary_to_prefix(binary_ip,binary_network):\n    for i in range(0,32):\n        if binary_ip[i] == 1:\n            break\n    prefix = 32 - i\n    return prefix\ndef binary_to_ip(binary):\n    octets = []\n    for i in range(0,4):\n        octets.append(binary_to_octet(binary[(i*8):((i+1)*8)]))\n    return octet_to_ip(octets)\ndef binary_to_address(binary):\n    octets = binary_to_octet(binary)\n    return octet_to_ip(octets)\ndef prefix_to_binary(ip,prefix):\n    octets = ip_to_octet(ip)\n    binary_ip = ip_to_binary(ip)\n    binary_network = []\n    for i in range(0,4):\n        binary_network.append(octets[i] & ~(1 << (32-prefix)))\n    return binary_network\ndef ip_to_binary(ip):\n    octets = ip_to_octet(ip)\n    binary_ip = []\n    for i in range(0,4):\n        binary_ip.append(octets[i] & ~(1 << (32-i)))\n    return binary_ip\ndef prefix_to_mask(prefix):\n    mask = (2**32-1) - (2**(32-prefix))\n    return mask\ndef ip_to_mask(ip,prefix):\n    mask = prefix_to_mask(prefix)\n    octets = ip_to_octet(ip)\n    for i in range(0,4):\n        octets[i] = octets[i] & mask\n    return octet_to_ip(octets)\ndef network_to_prefix(ip):\n    octets = ip_to_octet(ip)\n    mask = 0\n    for i in range(0,4):\n        mask = mask + (octets[i] & ~(1 << (32-i)))\n    return mask\ndef ip_to_octet(ip):\n    octets = []\n    for i in ip:\n        octets.append(int(i))\n    return octets\ndef binary_to_octet(binary):\n    octet = 0\n    for i in range(0,32):\n        octet = octet + binary[i] * (2**(31-i))\n    return octet\ndef is_subnet_of(subnet,supernet):\n    s1 = str(supernet)\n    s2 = str(subnet)\n    return s1.startswith(s2)\ndef ip_to_subnet(ip,prefix):\n    octets = ip_to_octet(ip)\n    binary = ip_to_binary(ip)\n    host "
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"\\.0+\",\".\",ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    print(re.sub(r\"\\.0+\", '.', ip))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    regex = r'^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$'\n    if(re.match(regex, ip)):\n        ip_no_zero = re.sub(r'\\.0', '', ip)\n        return ip_no_zero\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+', '', ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #regex=re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}')\n    ip=re.sub(r'^0*','',ip)\n    print(ip)\ndef count_ip(s):\n    '''\n    Write a function to count the number of ip address in a string.\n    '''\n    #regex=re.compile(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}')\n    s=re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}',s)\n    print(s)\n    return len(s)\ndef unique(s):\n    '''\n    Write a function to check if there are duplicate words in a string\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=s.split()\n    print(s)\n    return len(set(s))\ndef print_s(s):\n    '''\n    Write a function to print a string without any special characters\n    '''\n    #regex=re.compile(r'[^a-zA-Z0-9]')\n    s=re.sub(r'[^a-zA-Z0-9]','',s)\n    print(s)\ndef divisible_by_three(n):\n    '''\n    Write a function to check if a number is divisible by 3\n    '''\n    #regex=re.compile(r'^\\d*$')\n    print(re.match(r'^\\d{1,3}$',n))\n    return bool(re.match(r'^\\d{1,3}$',n)) and int(n)%3==0\ndef is_leap_year(n):\n    '''\n    Write a function to check if a year is leap year\n    '''\n    #regex=re.compile(r'^\\d{4}$')\n    return bool(re.match(r'^\\d{4}$',n)) and int(n)%4==0 and int(n)%100!=0 or int(n)%400==0\ndef find_longest_word(s):\n    '''\n    Write a function to find the longest word in a string\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.findall(r'\\b\\w+\\b',s)\n    print(s)\n    return max(s,key=len)\ndef find_word_with_first_capital(s):\n    '''\n    Write a function to find the first word with capital letter in a string\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.findall(r'\\b\\w+\\b',s)\n    print(s)\n    return [s for s in s if re.match(r'^[A-Z]',s)][0]\ndef reverse(s):\n    '''\n    Write a function to reverse a string\n    '''\n    #regex=re.compile(r'\\w+')\n    print(s[::-1])\ndef replace_even_occurence(s):\n    '''\n    Write a function to replace every even occurence of character in a string with '$'\n    '''\n    #regex=re.compile(r'\\w')\n    s=re.sub(r'\\w',r'$',s)\n    print(s)\ndef convert_string_to_numbers(s):\n    '''\n    Write a function to convert a string to numbers\n    '''\n    #regex=re.compile(r'\\d+')\n    s=re.findall(r'\\d+',s)\n    print(s)\n    return list(map(int,s))\ndef convert_string_to_fraction(s):\n    '''\n    Write a function to convert a string to fraction\n    '''\n    #regex=re.compile(r'^\\d+\\/\\d+$')\n    return re.match(r'^\\d+\\/\\d+$',s) and tuple(map(int,s.split('/')))\ndef two_number_sum(n,target):\n    '''\n    Write a function to find two number from the list that sum up to target\n    '''\n    #regex=re.compile(r'\\b\\d+\\b')\n    n=re.findall(r'\\b\\d+\\b',n)\n    print(n)\n    return [a for a in n if int(a)+int(n[i+1])==target]\ndef multiply_string(s,n):\n    '''\n    Write a function to multiply a string by a number\n    '''\n    #regex=re.compile(r'\\d+')\n    return re.sub(r'\\d+','',s)*n\ndef remove_characters_in_string(s):\n    '''\n    Write a function to remove character in a string\n    '''\n    #regex=re.compile(r'[^a-zA-Z]')\n    s=re.sub(r'[^a-zA-Z]','',s)\n    print(s)\ndef remove_vowels(s):\n    '''\n    Write a function to remove vowels in a string\n    '''\n    #regex=re.compile(r'[^a-zA-Z0-9]')\n    s=re.sub(r'[^a-zA-Z0-9]','',s)\n    print(s)\ndef count_words(s):\n    '''\n    Write a function to count the number of words in a string\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.findall(r'\\b\\w+\\b',s)\n    print(s)\n    return len(s)\ndef longest_word(s):\n    '''\n    Write a function to find the longest word in a string\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.findall(r'\\b\\w+\\b',s)\n    print(s)\n    return max(s,key=len)\ndef reverse_string(s):\n    '''\n    Write a function to reverse a string\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.findall(r'\\b\\w+\\b',s)\n    print(s)\n    return [s[i] for i in range(len(s)-1,-1,-1)]\ndef replace_with_space(s):\n    '''\n    Write a function to replace a string with space\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.sub(r'\\b\\w+\\b',' ',s)\n    print(s)\ndef switch_case_of_letters(s):\n    '''\n    Write a function to switch case of letters\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.sub(r'\\b\\w+\\b','A',s)\n    print(s)\ndef replace_with_new_line(s):\n    '''\n    Write a function to replace a string with new line\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    s=re.sub(r'\\b\\w+\\b','\\n',s)\n    print(s)\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    #regex=re.compile(r'\\b\\w+\\b')\n    return s==s[::-1]\ndef is_anagram(s1,"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        x = re.compile('\\.0+')\n        return re.sub(x, '', ip)\n    else:\n        return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    #ip = input(\"Enter the IP Address: \")\n    ip = ip.split('.')\n    for i in range(len(ip)):\n        if int(ip[i]) == 0:\n            ip[i] = \"0\"\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = ip.split('.')\n    new_ip_list = []\n    for octet in ip_list:\n        if len(octet) == 1:\n            octet = '0' + octet\n        new_ip_list.append(octet)\n    new_ip = '.'.join(new_ip_list)\n    return new_ip\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list1:\n        if item % 2 == 0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return abs(even_list[0] - odd_list[0])\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[::2]\n    odd_num = list1[1::2]\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # print(list1)\n    # for i in list1:\n    #     if i%2 == 0:\n    #         even_num = i\n    #     else:\n    #         odd_num = i\n    # print(odd_num - even_num)\n    even_num = 0\n    odd_num = 0\n    for i in list1:\n        if i%2 == 0:\n            even_num = i\n        else:\n            odd_num = i\n    print(odd_num - even_num)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_numbers = []\n    odd_numbers = []\n    for i in list1:\n        if i % 2 == 0:\n            even_numbers.append(i)\n        else:\n            odd_numbers.append(i)\n    print(\"The first even number is: \", even_numbers[0])\n    print(\"The first odd number is: \", odd_numbers[0])\n    return abs(even_numbers[0] - odd_numbers[0])\nprint(diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8]\n    odd_list = []\n    even_list = []\n    for i in list1:\n        if i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    print(f'Even List: {even_list}')\n    print(f'Odd List: {odd_list}')\n    print(f'Difference of the first even and first odd number of the list is {abs(even_list[0]-odd_list[0])}')\n    \n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in list1:\n        if i%2 == 0:\n            x = i\n        else:\n            y = i\n    print(x,y)\n    return(x-y)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = [number for number in list1 if number % 2!= 0]\n    even = [number for number in list1 if number % 2 == 0]\n    return abs(odd[0] - even[0])\n    \n    \ndef remove_vowels(string):\n    '''\n    Write a function to remove all vowels from a given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    for letter in string:\n        if letter in vowels:\n            string = string.replace(letter, '')\n    return string\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    i = 0\n    odd_list = []\n    even_list = []\n    while i < len(list1):\n        if list1[i] % 2 == 0:\n            even_list.append(list1[i])\n        else:\n            odd_list.append(list1[i])\n        i += 1\n    print(f'The difference of the first even number and the first odd number is {even_list[0] - odd_list[0]}')\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    evens = []\n    odds = []\n    for num in list1:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    a = []\n    for num in list1:\n        if num % 2 == 0:\n            a.append(num)\n    a1 = a[0]\n    b = []\n    for num in list1:\n        if num % 2!= 0:\n            b.append(num)\n    b1 = b[0]\n    return b1 - a1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    if (n1!= n2) :\n        return -1\n    n = n1\n    m = 0\n    for i in range(0,n):\n        if (str1[i]!= str2[i]) :\n            m += 1\n    return m \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # code here \n    temp = 0\n    n = len(str1)\n    for i in range(0,n):\n        if str1[i]!= str2[i] : \n            temp += 1\n    return temp//2\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # code here\n    \n    def countSwaps(n, S): \n        ans = 0\n        for i in range(n): \n            count = 0\n            for j in range(i, n): \n                if S[j] < S[j + 1]: \n                    S[j], S[j + 1] = S[j + 1], S[j] \n                    count += 1\n            ans += count \n        return ans \n    n = len(str1)\n    S = list(str1)\n    ans = countSwaps(n, S)\n    return ans\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # code here\n    \n    #print(str1,str2)\n    str1 = list(str1)\n    str2 = list(str2)\n    #print(str1,str2)\n    \n    if str1[0]!= str2[0]:\n        str1.insert(0,str2[0])\n        str2.pop(0)\n    \n    for i in range(1,len(str1)):\n        if str1[i] == '1' and str2[i] == '0':\n            str1.pop(i)\n            str1.insert(i,'0')\n            \n            str2.pop(i)\n            str2.insert(i,'1')\n            \n        elif str1[i] == '0' and str2[i] == '1':\n            str1.pop(i)\n            str1.insert(i,'1')\n            \n            str2.pop(i)\n            str2.insert(i,'0')\n    \n    #print(str1,str2)\n    \n    return ''.join(str1)\n        \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1) \n    m = len(str2) \n    # The value of n and m indicates the length of two strings \n    # Let's initialize the table with all zeros \n    table = [[0 for x in range(m+1)] for x in range(n+1)] \n    for i in range(n+1): \n        for j in range(m+1): \n            if i==0 and j==0: \n                table[i][j] = 0\n            elif i==0: \n                table[i][j] = j \n            elif j==0: \n                table[i][j] = i \n            else: \n                if str1[i-1]==str2[j-1]: \n                    table[i][j] = table[i-1][j-1] \n                else: \n                    table[i][j] = 1 + min(table[i][j-1], table[i-1][j], table[i-1][j-1]) \n    return table[n][m] \n    \ndef rotate_list(list1):\n    '''\n    Write a python function to rotate the given list by specified number of elements.\n    '''\n    if len(list1)==0: \n        return [] \n    if len(list1)==1: \n        return list1 \n    else: \n        return list1[1:]+[list1[0]] \n    \ndef mod_of_string(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not. \n    It should return true if the given string is a palindrome else it should return false. \n    '''\n    return s==s[::-1] \n    \ndef palindrome(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not. \n    It should return true if the given string is a palindrome else it should return false. \n    '''\n    if len(s)<=1: \n        return True \n    else: \n        if s[0]==s[-1]: \n            return palindrome(s[1:-1]) \n        else: \n            return False\n    \ndef sub_string(s1,s2): \n    '''\n    Write a python function to find the common substring of two strings.\n    '''\n    if len(s1)==0 or len(s2)==0: \n        return \"\" \n    else: \n        if s1[0]==s2[0]: \n            return s1[0]+sub_string(s1[1:],s2[1:]) \n        else: \n            return \"\" \n            \ndef sub_string(s1,s2): \n    '''\n    Write a python function to find the common substring of two strings.\n    '''\n    if len(s1)==0 or len(s2)==0: \n        return \"\" \n    else: \n        if s1[0]==s2[0]: \n            return sub_string(s1[1:],s2[1:]) \n        else: \n            return s1[0]+sub_string(s1[1:],s2) \n        \ndef zeroes_ones(list1): \n    '''\n    Write a python function to count the number of zeroes and ones in a list.\n    '''\n    return [list1.count(0),list1.count(1)] \n    \ndef zeroes_ones(list1): \n    '''\n    Write a python function to count the number of zeroes and ones in a list.\n    '''\n    count0, count1 = 0, 0 \n    for ele in list1: \n        if ele==0: \n            count0+=1\n        else: \n            count1+=1\n    return [count0, count1] \n    \ndef zeroes_ones(list1): \n    '''\n    Write a python function to count the number of zeroes and ones in a list.\n    '''\n    c0, c1 = 0, 0 \n    for ele in list1: \n        if ele==0: \n            c0+=1\n        else: \n            c1+=1\n    return [c0, c1] \n    \ndef zeroes_ones(list1): \n    '''\n    Write a python function to count the number of zeroes and ones in a list.\n    '''\n    return [list1.count(0),list1.count(1)] \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    #total = sum(list1)\n    #n = len(list1)\n    #return int(n*(n+1)/2 - total)\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n    Write a python function to find the missing number in the given list.\n    '''\n    return sum(range(len(list1)+1))-sum(list1) \n    \ndef find_missing_num(list1): \n    '''\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    if n!= len(str2):\n        return -1\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0' and str2[i] == '1':\n                for j in range(i, n):\n                    if str1[j]!= str2[j]:\n                        str1[i], str1[j] = str1[j], str1[i]\n                        count += 1\n                        break\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    l1,l2 = len(str1),len(str2)\n    if l1!= l2 : \n        return -1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1,str2 = list(str1),list(str2)\n    if len(str1)!=len(str2) :\n        return -1\n    i = 0\n    swaps = 0\n    while i<len(str1) :\n        if str1[i]!=str2[i] :\n            str2[i],str2[i+1:] = str2[i+1:],str2[i]\n            swaps += 1\n        i += 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # Code to push zeros to the left \n    \n    lst1 = [i for i in str1] \n    lst2 = [i for i in str2] \n    \n    m = len(lst1) \n    n = len(lst2) \n    \n    lst3 = [] \n    \n    for i in range(n): \n        if lst2[i]!= '0': \n            lst3.extend(lst2[i]) \n        else: \n            lst3.extend(['0'] * len(lst2[i])) \n            \n    for i in range(m - n): \n        lst3.extend(['0'] * len(lst2[i])) \n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size=0\n    for item in tuple_list:\n        byte_size=byte_size+sys.getsizeof(item)\n    return byte_size\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"The tuple size in bytes is:\", sys.getsizeof(tuple_list))\n    return 0\ndef tuple_append(tuple_list):\n    '''\n    Write a function that appends a new tuple to a given list of tuples.\n    '''\n    tuple_list.append((\"italy\", \"rome\"))\n    print(tuple_list)\n    return 0\ndef tuple_extend(tuple_list):\n    '''\n    Write a function that extends a given list of tuples with another given list of tuples.\n    '''\n    tuple_list.extend((\"china\", \"sichuan\"))\n    print(tuple_list)\n    return 0\ndef tuple_insert(tuple_list):\n    '''\n    Write a function that inserts a new tuple into a given list of tuples.\n    '''\n    tuple_list.insert(2, (\"italy\", \"rome\"))\n    print(tuple_list)\n    return 0\ndef tuple_count(tuple_list):\n    '''\n    Write a function to count the number of occurrences of a given tuple in a given list of tuples.\n    '''\n    tuple_list.count((\"italy\", \"rome\"))\n    return 0\ndef tuple_index(tuple_list):\n    '''\n    Write a function that finds the index of a given tuple in a given list of tuples.\n    '''\n    tuple_list.index((\"italy\", \"rome\"))\n    return 0\ndef tuple_copy(tuple_list):\n    '''\n    Write a function that creates a copy of a given tuple.\n    '''\n    tuple_list_copy = tuple_list[:]\n    print(tuple_list_copy)\n    return 0\ndef tuple_index_2(tuple_list, index):\n    '''\n    Write a function that finds the element at a given index in a given list of tuples.\n    '''\n    tuple_list.index(\"italy\", index)\n    return 0\ndef tuple_index_3(tuple_list, element):\n    '''\n    Write a function that finds the index of a given element in a given list of tuples.\n    '''\n    tuple_list.index(\"italy\")\n    return 0\ndef tuple_index_4(tuple_list):\n    '''\n    Write a function that creates a list of the index of all occurrences of a given element in a given list of tuples.\n    '''\n    tuple_list.index(\"italy\")\n    return 0\ndef tuple_pop(tuple_list):\n    '''\n    Write a function that removes a given tuple from a given list of tuples.\n    '''\n    tuple_list.pop(1)\n    print(tuple_list)\n    return 0\ndef tuple_pop_2(tuple_list, index):\n    '''\n    Write a function that removes a given tuple at a given index in a given list of tuples.\n    '''\n    tuple_list.pop(index)\n    print(tuple_list)\n    return 0\ndef tuple_remove(tuple_list):\n    '''\n    Write a function that removes a given tuple from a given list of tuples.\n    '''\n    tuple_list.remove((\"italy\", \"rome\"))\n    print(tuple_list)\n    return 0\ndef tuple_reverse(tuple_list):\n    '''\n    Write a function that reverses a given list of tuples.\n    '''\n    tuple_list.reverse()\n    print(tuple_list)\n    return 0\ndef tuple_sort(tuple_list):\n    '''\n    Write a function that sorts a given list of tuples by a given element in ascending order.\n    '''\n    tuple_list.sort(key=lambda x: x[1])\n    print(tuple_list)\n    return 0\ndef tuple_sort_2(tuple_list):\n    '''\n    Write a function that sorts a given list of tuples by a given element in descending order.\n    '''\n    tuple_list.sort(key=lambda x: x[1], reverse=True)\n    print(tuple_list)\n    return 0\ndef tuple_concat(tuple_list):\n    '''\n    Write a function that concatenates a given tuple in a given list of tuples.\n    '''\n    tuple_list.extend((\"italy\", \"rome\"))\n    print(tuple_list)\n    return 0\ndef tuple_contains(tuple_list):\n    '''\n    Write a function that determines if a given element is contained in a given list of tuples.\n    '''\n    tuple_list.count((\"italy\", \"rome\"))\n    return 0\ndef main():\n    # tuple_size()\n    # tuple_append()\n    # tuple_extend()\n    # tuple_insert()\n    # tuple_count()\n    # tuple_index()\n    # tuple_copy()\n    # tuple_index_2()\n    # tuple_index_3()\n    # tuple_index_4()\n    # tuple_pop()\n    # tuple_pop_2()\n    # tuple_remove()\n    # tuple_reverse()\n    # tuple_sort()\n    # tuple_sort_2()\n    # tuple_concat()\n    # tuple_contains()\n    \n    tuple_list = (\"italy\", \"rome\", \"italy\", \"venice\")\n    print(\"count of \\\"italy\\\" in tuple list:\", tuple_list.count(\"italy\"))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\"))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10, 12))\n    \n    print(\"count of \\\"italy\\\" in tuple list:\", tuple_list.count(\"italy\", 2, 4, 6, 8, 10, 12))\n    print(\"count of \\\"italy\\\" in tuple list:\", tuple_list.count(\"italy\", 2, 4, 6, 8, 10, 13))\n    \n    tuple_list_copy = tuple_list[:]\n    print(\"count of \\\"italy\\\" in tuple list:\", tuple_list.count(\"italy\"))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\"))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10, 12))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10, 13))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10, 13, 15))\n    print(\"index of \\\"italy\\\" in tuple list:\", tuple_list.index(\"italy\", 2, 4, 6, 8, 10, 13, 15, 17))\n    \n    tuple_list_copy.count(\"italy\")\n    print(\"count of \\\"italy\\\" in tuple list:\", tuple_list"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    print(\"Size of tuple: \"+str(sys.getsizeof(tuple_list))+\" bytes\")\n    print()\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_of_tuple = sys.getsizeof(tuple_list)\n    return size_of_tuple\ndef list_size(list_of_tuples):\n    '''\n    Write a function to find the size in bytes of the given list.\n    '''\n    size_of_list = sys.getsizeof(list_of_tuples)\n    return size_of_list\ndef read_all(file):\n    '''\n    Write a function to read all the lines from the file.\n    '''\n    f = open(file, \"r\")\n    lines = f.read()\n    f.close()\n    return lines\ndef read_line(file, line_number):\n    '''\n    Write a function to read a specific line from the file.\n    '''\n    f = open(file, \"r\")\n    lines = f.readlines()\n    f.close()\n    return lines[line_number]\ndef write_to_file(file_name, text):\n    '''\n    Write to a file.\n    '''\n    f = open(file_name, \"w\")\n    f.write(text)\n    f.close()\ndef append_to_file(file_name, text):\n    '''\n    Append text to the file.\n    '''\n    f = open(file_name, \"a\")\n    f.write(text)\n    f.close()\ndef read_from_file(file_name):\n    '''\n    Read from a file.\n    '''\n    f = open(file_name, \"r\")\n    text = f.read()\n    f.close()\n    return text\ndef clean_file(file_name):\n    '''\n    Clean a file, it means remove all the \\n from the file.\n    '''\n    f = open(file_name, \"r\")\n    text = f.readlines()\n    text = [x.strip(\"\\n\") for x in text]\n    f.close()\n    f = open(file_name, \"w\")\n    f.write(\"\".join(text))\n    f.close()\ndef get_file_list(path):\n    '''\n    Write a function that will return a list of all the files in the given path.\n    '''\n    import os\n    file_list = [file for file in os.listdir(path) if os.path.isfile(os.path.join(path, file))]\n    return file_list\ndef get_file_name_list(path):\n    '''\n    Write a function that will return a list of all the files in the given path.\n    '''\n    import os\n    file_list = [file for file in os.listdir(path) if os.path.isfile(os.path.join(path, file))]\n    return file_list\ndef get_folder_name_list(path):\n    '''\n    Write a function that will return a list of all the folders in the given path.\n    '''\n    import os\n    file_list = [file for file in os.listdir(path) if os.path.isfile(os.path.join(path, file)) == False]\n    return file_list\ndef create_folder(path):\n    '''\n    Write a function to create a folder.\n    '''\n    import os\n    os.mkdir(path)\ndef delete_folder(path):\n    '''\n    Write a function to delete a folder.\n    '''\n    import os\n    os.rmdir(path)\ndef file_exists(path):\n    '''\n    Write a function that will return True if the file exists, otherwise return False.\n    '''\n    import os\n    return os.path.isfile(path)\ndef create_file(path):\n    '''\n    Write a function to create a file.\n    '''\n    f = open(path, \"w\")\n    f.close()\ndef delete_file(path):\n    '''\n    Write a function to delete a file.\n    '''\n    import os\n    os.remove(path)\ndef rename_file(old_path, new_path):\n    '''\n    Write a function to rename a file.\n    '''\n    import os\n    os.rename(old_path, new_path)\ndef rename_folder(old_path, new_path):\n    '''\n    Write a function to rename a folder.\n    '''\n    import os\n    os.rename(old_path, new_path)\ndef get_extension(path):\n    '''\n    Write a function that will return the extension of the given path.\n    '''\n    import os\n    extension = os.path.splitext(path)[1]\n    return extension\ndef get_extension_of_file(file_path):\n    '''\n    Write a function that will return the extension of the given file path.\n    '''\n    import os\n    extension = os.path.splitext(file_path)[1]\n    return extension\ndef get_extension_of_folder(folder_path):\n    '''\n    Write a function that will return the extension of the given folder path.\n    '''\n    import os\n    folder_name = os.path.basename(folder_path)\n    extension = \".\" + folder_name.split(\".\")[-1]\n    return extension\ndef get_folder_name(path):\n    '''\n    Write a function that will return the folder name of the given path.\n    '''\n    import os\n    return os.path.basename(os.path.normpath(path))\ndef get_folder_name_of_file(file_path):\n    '''\n    Write a function that will return the folder name of the given file path.\n    '''\n    import os\n    return os.path.dirname(os.path.normpath(file_path))\ndef get_file_name(path):\n    '''\n    Write a function that will return the file name of the given path.\n    '''\n    import os\n    return os.path.basename(os.path.normpath(path))\ndef get_file_name_of_file(file_path):\n    '''\n    Write a function that will return the file name of the given file path.\n    '''\n    import os\n    return os.path.basename(os.path.normpath(file_path))\ndef get_file_size(path):\n    '''\n    Write a function that will return the size of the given file path.\n    '''\n    import os\n    size_in_bytes = os.path.getsize(path)\n    return size_in_bytes\ndef get_size_of_file(file_path):\n    '''\n    Write a function that will return the size of the given file path.\n    '''\n    import os\n    size_in_bytes = os.path.getsize(file_path)\n    return size_in_bytes\ndef get_size_of_folder(folder_path):\n    '''\n    Write a function that will return the size of the given folder path.\n    '''\n    import os\n    folder_size = 0\n    for root, dirs, files in os.walk(folder_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            folder_size += os.path.getsize(file_path)\n    return folder_size\ndef get_size_of_folder_in_bytes(folder_path):\n    '''\n    Write a function that will return the size of the given folder path in bytes.\n    '''\n    import os\n    folder_size = 0\n    for root, dirs, files in os.walk(folder_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            folder_size += os.path.getsize(file_path)\n    return folder_size\ndef get_size_of_folder_in_megabytes(folder_path):\n    '''\n    Write a function that will return the size of the given folder path in megabytes.\n    '''\n    import os\n    folder_size = 0\n    for root, dirs, files in os.walk(folder_path):\n        for file in files:\n            file_path = os.path.join(root, file)\n            folder_size += os.path.getsize(file_path)\n    retur"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\ndef tuple_create(integer_list):\n    '''\n    Write a function that creates a tuple containing integers\n    '''\n    return tuple(integer_list)\ndef tuple_add(tuple_list):\n    '''\n    Write a function that adds a given list to the end of a tuple\n    '''\n    return tuple_list + tuple_create(list(range(1,4)))\ndef tuple_count(tuple_list,value):\n    '''\n    Write a function that returns the number of times a value appears in a tuple\n    '''\n    return tuple_list.count(value)\ndef tuple_index(tuple_list,value):\n    '''\n    Write a function that returns the first index of a value in a tuple\n    '''\n    return tuple_list.index(value)\ndef tuple_remove(tuple_list,value):\n    '''\n    Write a function that removes a value from a tuple\n    '''\n    return tuple_list.remove(value)\ndef tuple_concatenate(tuple_list_1,tuple_list_2):\n    '''\n    Write a function that concatenates two tuples\n    '''\n    return tuple_list_1+tuple_list_2\ndef list_create(integer_list):\n    '''\n    Write a function that creates a list containing integers\n    '''\n    return list(integer_list)\ndef list_add(list_list):\n    '''\n    Write a function that adds a given list to the end of a list\n    '''\n    return list_list + list_create(list(range(1,4)))\ndef list_count(list_list,value):\n    '''\n    Write a function that returns the number of times a value appears in a list\n    '''\n    return list_list.count(value)\ndef list_index(list_list,value):\n    '''\n    Write a function that returns the first index of a value in a list\n    '''\n    return list_list.index(value)\ndef list_remove(list_list,value):\n    '''\n    Write a function that removes a value from a list\n    '''\n    return list_list.remove(value)\ndef list_concatenate(list_list_1,list_list_2):\n    '''\n    Write a function that concatenates two lists\n    '''\n    return list_list_1+list_list_2\ndef size_tuple(tuple_list):\n    '''\n    Write a function that returns the size in bytes of a tuple\n    '''\n    return sys.getsizeof(tuple_list)\ndef size_list(list_list):\n    '''\n    Write a function that returns the size in bytes of a list\n    '''\n    return sys.getsizeof(list_list)\ndef main():\n    '''\n    Write a function that takes a tuple of tuples and a tuple of lists and returns the size in bytes of each\n    '''\n    list_1 = list(range(1,4))\n    list_2 = list(range(4,7))\n    list_3 = list(range(7,10))\n    tuple_1 = tuple_create(list_1)\n    tuple_2 = tuple_create(list_2)\n    tuple_3 = tuple_create(list_3)\n    tuple_4 = tuple_concatenate(tuple_1,tuple_2)\n    tuple_5 = tuple_concatenate(tuple_3,tuple_4)\n    tuple_6 = tuple_add(tuple_5)\n    tuple_7 = tuple_concatenate(tuple_1,tuple_2)\n    print(size_tuple(tuple_1))\n    print(size_tuple(tuple_2))\n    print(size_tuple(tuple_3))\n    print(size_tuple(tuple_4))\n    print(size_tuple(tuple_5))\n    print(size_tuple(tuple_6))\n    print(size_tuple(tuple_7))\n    print(tuple_count(tuple_6,5))\n    print(tuple_index(tuple_6,5))\n    print(tuple_remove(tuple_6,5))\n    print(tuple_count(tuple_7,5))\n    print(tuple_index(tuple_7,5))\n    print(tuple_remove(tuple_7,5))\n    print(tuple_count(tuple_7,5))\n    print(tuple_index(tuple_7,5))\n    print(tuple_remove(tuple_7,5))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remove(list_1,1))\n    print(list_count(list_1,1))\n    print(list_index(list_1,1))\n    print(list_remov"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    m, n = len(arr1), len(arr2)\n    if m == 0:\n        return arr2[k-1]\n    if n == 0:\n        return arr1[k-1]\n    imin, imax, half_len = 0, m, (m+n+1)//2\n    while imin <= imax:\n        i = (imin+imax)//2\n        j = half_len-i\n        if i < m and arr2[j-1] > arr1[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and arr1[i-1] > arr2[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2 or len(arr1) < len(arr2):\n        return None\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            if i + 1 == k:\n                return arr1[i]\n            i += 1\n            j += 1\n    return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if not arr1 or not arr2:\n        return None\n    l1, l2 = len(arr1), len(arr2)\n    if k > l1 + l2:\n        return None\n    elif k > l1:\n        return find_kth(arr2, arr1, k - l1)\n    elif k == l1 + l2 or k == l2:\n        return min(arr1[l1 - 1], arr2[l2 - 1])\n    elif k > l1 + l2 - 1:\n        return find_kth(arr2, arr1, k - l1 - l2)\n    elif arr1[l1 // 2] > arr2[l2 // 2]:\n        return find_kth(arr1, arr2[l2 // 2 + 1:], k)\n    else:\n        return find_kth(arr1[l1 // 2 + 1:], arr2, k - l1 // 2 - 1)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    #The below method will give wrong answer when\n    #the size of arr2 is less than arr1\n    #i.e.\n    #if len(arr1) > len(arr2)\n    #return arr1[k-1]\n    #The below method will give wrong answer when\n    #the size of arr1 is less than arr2\n    #i.e.\n    #if len(arr2) > len(arr1)\n    #return arr2[k-1]\n    #The below method will give the correct answer\n    #but will time out on large k values\n    #t=Timer()\n    #t.start()\n    #while arr1 and arr2:\n        #if len(arr1) < len(arr2):\n            #arr1, arr2 = arr2, arr1\n        #if k < 1:\n            #break\n        #arr1, arr2 = arr1[:len(arr2)], arr2[:k+1]\n        #k -= len(arr2) - 1\n    #t.stop()\n    #return arr2[k-1]\n    t = Timer()\n    t.start()\n    i, j = 0, 0\n    arr = []\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        arr.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        arr.append(arr2[j])\n        j += 1\n    t.stop()\n    return arr[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    arr1_length = len(arr1)\n    arr2_length = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # method 1, binary search\n    def binary_search(arr, x):\n        n = len(arr)\n        low, high = 0, n-1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < x:\n                low = mid + 1\n            elif arr[mid] > x:\n                high = mid - 1\n            else:\n                return mid\n        return None\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k > len(arr1) + len(arr2):\n        return 'k is larger than the sum of two arrays'\n    if k < 0:\n        return 'k should not be negative'\n    left = 0\n    right = len(arr1)-1\n    while left <= right:\n        mid = (left + right)//2\n        if len(arr2) == 0:\n            return arr1[mid]\n        if k < len(arr1) + len(arr2):\n            if arr1[mid] > arr2[0]:\n                right = mid - 1\n            elif arr1[mid] < arr2[0]:\n                left = mid + 1\n            else:\n                if k <= len(arr1) + len(arr2):\n                    return arr1[mid]\n                else:\n                    return arr2[0]\n        elif k >= len(arr1) + len(arr2):\n            if arr1[mid] > arr2[0]:\n                left = mid + 1\n            elif arr1[mid] < arr2[0]:\n                right = mid - 1\n            else:\n                if k > len(arr1) + len(arr2):\n                    return arr2[0]\n                else:\n                    return arr1[mid]\n        else:\n            if k > len(arr1) + len(arr2):\n                left = mid + 1\n            else:\n                return arr1[mid]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    arr1.append(float('inf'))\n    arr2.append(float('inf'))\n    \n    while True:\n        if i == len(arr1) - 1 or j == len(arr2) - 1:\n            return\n        if arr1[i] > arr2[j]:\n            j += 1\n        else:\n            i += 1\n        if j == len(arr2) - 1 or i == len(arr1) - 1:\n            return\n        if i + j + 1 == k:\n            return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 < len2:\n        find_kth(arr2, arr1, k)\n    \n    if len1 == 0:\n        return arr2[k-1]\n    if len2 == 0:\n        return arr1[k-1]\n    \n    i = len1//2\n    j = len2//2\n    if arr1[i] > arr2[j]:\n        return find_kth(arr1[:i], arr2[j+1:], k)\n    if arr1[i] < arr2[j]:\n        return find_kth(arr1[i+1:], arr2[:j], k)\n    \n    if k == i + j + 1:\n        return arr1[i]\n    if k == i + j:\n        return arr2[j]\n    return arr1[i]\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = number\n    s = 0\n    l = len(str(n))\n    m = n\n    while n > 0:\n        c = n % 10\n        s += c ** l\n        n = n // 10\n    return s == m\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    n = len(str(number))\n    result = 0\n    while temp > 0:\n        temp = temp // 10\n        result += temp ** n\n    if result == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    return number == sum([int(x)**len(str(number)) for x in str(number)])\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # split_number = list(str(number))\n    # print(split_number)\n    # total = 0\n    # for num in split_number:\n    #     total += int(num) ** 3\n    # print(total)\n    # if total == number:\n    #     return True\n    # else:\n    #     return False\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def sum_digits(number):\n        if number < 10:\n            return number\n        return (number % 10) + sum_digits(number // 10)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Create an empty string variable\n    str1 = ''\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    temp=number\n    while temp>0:\n        rem=temp%10\n        sum+=rem**3\n        temp//=10\n    return sum==number\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #to check a number is armstrong or not\n    return number == sum([int(i)**len(str(number)) for i in str(number)])\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum=0\n    temp=number\n    while temp>0:\n        digit=temp%10\n        sum+=digit**3\n        temp//=10\n    return sum==number\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum is: {} and average is: {}\".format(sum, average))\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number + 1):\n        sum = sum + i\n    return sum\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # number = int(input('enter the number:'))\n    s = 0\n    n = number + 1\n    for i in range(1, n):\n        s = s + i\n    avg = s/n\n    print(f'the sum of first {number} natural numbers is {s} and the average is {avg}')\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # sum=0\n    # i=1\n    # while i<=number:\n    #     sum+=i\n    #     i+=1\n    # return sum,sum/number\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum,average = 0,0\n    for i in range(number+1):\n        sum = sum + i\n    average = sum / number\n    return(sum,average)\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    avg = sum / number\n    return avg\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total = total + count\n        count += 1\n    average = total/number\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    avg = 0\n    for i in range(1, number+1):\n        sum += i\n        avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Check input number is positive or negative.\n    if number < 0:\n        print('Error: input must be positive')\n        return\n    # Check input number is an integer.\n    if not isinstance(number, int):\n        print('Error: input must be an integer')\n        return\n    # Return sum and average.\n    return number, number/number\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    average = total / number\n    return total, average\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0): \n        print(n, \"is an even number.\") \n    else : \n        print(n, \"is an odd number.\") \n    return\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2 == 0\nprint(is_Even(100))\nprint(is_Even(101))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        print(\"The given number is even.\")\n    else :\n        print(\"The given number is odd.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n        \n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = list(str1)\n    str1.sort()\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return 'No repeated character'\n    \nstr1 = 'hello world'\nprint(first_repeated_char(str1))\nprint(first_repeated_char('heLLO WORLD'))\nprint(first_repeated_char('HELLO WORLD'))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    char_map = {}\n    for char in str1:\n        if char not in char_map:\n            char_map[char] = 1\n        else:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    if not str1:\n        return None\n    \n    str_dict = {}\n    for char in str1:\n        if char not in str_dict:\n            str_dict[char] = 1\n        else:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for key in d.keys():\n        if d[key] >= 2:\n            print(f'first repeated char: {key}')\n            return key\n    print('no repeated char')\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_map = {}\n    for char in str1:\n        if char in char_map:\n            return char\n        char_map[char] = True\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_freq = {}\n    for char in str1:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    \n    for char, freq in char_freq.items():\n        if freq > 1:\n            return char\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = ''.join(sorted(str1))\n    for char in str1:\n        if str1.count(char) > 1:\n            return char\n    return '_'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    temp = []\n    for i in range(len(str1)):\n        if str1[i] in temp:\n            return str1[i]\n        else:\n            temp.append(str1[i])\n    return 'None'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for x in str1:\n        if str1.count(x) > 1:\n            return x\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] in str1[i + 1 :] :\n            return str1[i]\n    return None\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(2,n+1):\n        if i == 2:\n            ludic.append(i)\n        else:\n            for j in ludic:\n                if j*j - 1 > i:\n                    ludic.append(i)\n                    break\n                elif i % j == 0:\n                    break\n            else:\n                ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if is_ludic(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n):\n        if (i % 6 == 0 or i % 10 == 5) and i % 12!= 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1, n+1):\n        if is_ludic(i):\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return[1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    #first get all the numbers\n    first = [1]\n    second = [1]\n    \n    for i in range(1,n):\n        first.append(first[i-1] * 2 + 3)\n        second.append(first[i] * 2 + 1)\n    \n    return second\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    print(n)\n    n = n - 1\n    s = str(n)\n    for i in range(len(s)):\n        s = s[1:] + s[0]\n        print(s)\n        if int(s) > n:\n            return n\n    return n\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    print(n)\n    for i in range(1,n+1):\n        if len(str(i))==4:\n            for j in range(4,i+1):\n                if i%j==0:\n                    print(j)\n                    break\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n < 10:\n        return [n]\n    ludic = [n]\n    n = str(n)\n    for i in range(len(n)):\n        ludic += get_ludic(int(n[:i] + n[i + 1:]))\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 121, 147, 178, 210, 255, 289, 362, 486, 684, 792, 987,\n            1178, 1290, 1560, 1968, 2520, 3042, 3690, 5052, 6318, 8064, 9474, 11748, 13500, 16796, 19440, 25200,\n            31250, 38400, 52500, 65536, 78400, 92160, 118736, 147456, 172972, 209040, 245760, 289360, 362880, 450560,\n            556960, 673160, 778240, 913840, 1055360, 1245600, 1435600, 1764800, 2096000, 2414400, 2828800, 3567680,\n            466960, 577960, 693040, 825360, 949140, 1087040, 1253520, 1510240, 1771280, 2161760, 2621440, 3162560,\n            3689660, 510960, 6464320, 8087680, 9157840, 11134120, 13106240, 15523360, 18018640, 21621600, 27991680,\n            35648960, 4228560, 50185600, 62985600, 75695600, 90122720, 103943200, 119865600, 139857280, 180199680,\n            225293440, 286571440, 362949280, 431064760, 515649800, 637006400, 777775680, 966453560, 1173705680,\n            1410560000, 1801926400, 2362966668, 2935245760, 3659848640, 4624295680, 565588768, 6685697600, 7765958720,\n            8994464000, 11049473600, 12498933280, 15487250240, 18273510240, 22772800128, 28746375680, 35781530400,\n            43096795360, 5053135856, 60535707280, 7070542400, 819394720, 9261078240, 10621050240, 12146796864,\n            144968676800, 17406075520, 20086639360, 250346062400, 30824139360, 371835097600, 45633836064, 55252276864,\n            66856473664, 78820274064, 90196727232, 11022690624, 12386633120, 14692707984, 17486075520, 20073211360,\n            25063966360, 308318582400, 370969081600, 456390976064, 55315356864, 668567985664, 788919085664, 90196835264,\n            11022562624, 12384659824, 14692907984, 174871686464, 20074309360, 25065035360, 3083194582400, 37097003168,\n            456405177664, 55315366864, 668568032256, 788919616256, 90196836256, 11022566336, 12384873120, 14692707984,\n            17486075520, 20073211360, 25063966360, 308318582400, 370969081600, 456390976064, 55315356864, 668567985664,\n            788919085664, 90196835264, 11022562624, 12384659824, 14692907984, 174871686464, 20074309360, 25065035360,\n            3083194582400, 37097003168, 456405177664, 55315366864, 668567985664, 788919616256, 90196836256, 11022566336,\n            12384873120, 14692707984, 17486075520, 20073211360, 25063966360, 308318582400, 370969081600, 456390976064,\n            55314592768, 668568032256, 788919616256, 90196836256, 11022562624, 12384659824, 14692907984, 174871686464,\n            20073211360, 25063966360, 3083194582400, 37097003168, 456390976064, 55315356864, 668567985664, 788919616256,\n            90196836256, 11022566336, 12384873120, 14692707984, 174871686464, 20073211360, 25063966360, 308318582400,\n            370969081600, 456390976064, 55315356864, 668568032256, 788919616256, 90196836256, 11022566336, 12384873120,\n            14692707984, 174871686464, 20073211360, 25063966360, 3083194582400, 37097003168, 456390976064, 55315356864,\n            668568032256, 788919616256, 90196836256, 11022566336, 12384873120, 14692707984, 174871686464, 20073211360,\n            25063966360, 308318582400, 370969081600, 456390976064, 55315356864, 668567985664, 788919616256, 90196836256,\n            11022562624, 12384659824, 14692907984, 174871686464, 20073211360, 25063966360, 3083194582400, 37097003168,\n            456390976064, 55315356864, 668567985664, 788919616256, 90196836256, 11022566336, 12384873120, 14692707984,\n            174871686464, 20073211360, 25063966360, 3083194582400, 37097003168, 456390976064, 55315356864, 668567985664,\n            788919616256, 90196836256, 11022566336, 12384873120, 14692707984, 174871686464, 20073211360, 25063966360,\n            308318582400, 370969081600, 456390976064, 55315356864, 668567985664, 788919616256, 90196836256, 11022566336,\n            12384873120, 14692707984, 174871686464, 20073211360, 25063966360, 3083194582400, 37097003168, 456390976064,\n            55314592768, 668567985664, 788919616256, 90196836256, 11022562624, 12384659824, 14692907984, 174871686464,\n            20073211360, 25063966360, 3083194582400, 37097003168, 456390976064, 55315356864, 668567985664, 788919616256,\n            90196836256, 11022566336, 12384873120, 14692707984, 174871686464, 20073211360, 25063966360, 308318582400,\n            370969081600, 456390976064, 55315356864, 668567985664, 788919616256, 90196836256, 11022566336, 12384873120,\n            14692707984, 174871686464, 20073211360, 25063966360, 3083194582400, 37097003168, 456390976064, 55315356864,\n            668568032256, 788919616256, 90196836256, 11022566336, 12384873120, 14692707984, 174871686464, 20073211360,\n            25063966360, 3083194582400, 37"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #print(\"entered string is\", s)\n    words = s.split()\n    reverse_string = \"\"\n    for word in words:\n        reverse_string += word[::-1] + \" \"\n    return reverse_string.strip()\n    #print(\"reversed string is\", reverse_string)\n    #return reverse_string\n    \ndef max_word(s):\n    '''\n    Write a function to return the longest word in a given string.\n    '''\n    words = s.split()\n    longest_word = \"\"\n    for word in words:\n        if len(word) >= len(longest_word):\n            longest_word = word\n    return longest_word\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if not s or len(s) == 0:\n        return s\n    words = [word for word in s.split(' ')]\n    return''.join(words[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # s = s.split()\n    # return''.join(s[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    for i in range(len(s) // 2):\n        s[i], s[-i - 1] = s[-i - 1], s[i]\n    return''.join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    a = s.split()\n    a.reverse()\n    return \" \".join(a)\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    reverse_string = ''\n    s_list = s.split()\n    for word in s_list:\n        reverse_string += word[::-1] +''\n    return reverse_string[:-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    #split the words\n    new_string = s.split(\" \")\n    #reverse the words\n    new_string = new_string[::-1]\n    #join the words together\n    new_string = \" \".join(new_string)\n    return new_string\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(reversed(s.split()))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if input is integer or not\n    if type(num)!= int:\n        return False\n    # Check if input is a negative number\n    if num < 0:\n        return False\n    # Check if input is equal to 0 or 1\n    if num == 0 or num == 1:\n        return False\n    # Check if input is even\n    if num % 2 == 0:\n        return False\n    # Check if input is divisible by a number from 3 to sqrt(n)\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, int(num**0.5)+1):\n            if (num % i) == 0:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(num, \"is not a prime number\")\n                break\n        else:\n            print(num, \"is a prime number\")\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    i = 3\n    while i <= int(num**0.5):\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for x in range(3, num, 2):\n            if num % x == 0:\n                return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180.0*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = float(degree)\n    return degree/180*math.pi\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    radian = float(radian)\n    return radian/math.pi*180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    r = degree * (math.pi/180)\n    return r\ndef cosine_law_angle(m1,m2,m3,x1,x2,x3):\n    '''\n    Write a function to solve the trigonometry problem using the cosine law.\n    '''\n    r1 = radian_degree(x1)\n    r2 = radian_degree(x2)\n    r3 = radian_degree(x3)\n    s1 = math.sin(r1)\n    s2 = math.sin(r2)\n    s3 = math.sin(r3)\n    c1 = math.cos(r1)\n    c2 = math.cos(r2)\n    c3 = math.cos(r3)\n    a1 = s1 * m2 * c2\n    a2 = s2 * m3 * c3\n    a3 = s3 * m1 * c1\n    #print(s1,s2,s3)\n    #print(c1,c2,c3)\n    #print(a1,a2,a3)\n    angle1 = math.acos((a1+a2+a3)/(math.sqrt(3)*(m2*m3)))\n    angle2 = math.acos((a1+a3)/(math.sqrt(3)*(m2*m1)))\n    angle3 = math.acos((a2+a3)/(math.sqrt(3)*(m3*m1)))\n    angle4 = math.acos((a2+a1)/(math.sqrt(3)*(m3*m1)))\n    #print(angle1,angle2,angle3,angle4)\n    #print(angle1*(180/math.pi),angle2*(180/math.pi),angle3*(180/math.pi),angle4*(180/math.pi))\n    #print(math.degrees(angle1),math.degrees(angle2),math.degrees(angle3),math.degrees(angle4))\n    return angle1,angle2,angle3,angle4\ndef magnitude(x,y,z):\n    '''\n    Write a function to calculate magnitude.\n    '''\n    return math.sqrt((x*x)+(y*y)+(z*z))\ndef vector_addition(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate vector addition.\n    '''\n    return (x1+x2+x3),(y1+y2+y3),(z1+z2+z3)\ndef vector_subtraction(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate vector subtraction.\n    '''\n    return (x1-x2-x3),(y1-y2-y3),(z1-z2-z3)\ndef scalar_product(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate vector scalar product.\n    '''\n    return (x1*x2+y1*y2+z1*z2),(x1*x3+y1*y3+z1*z3),(x2*x3+y2*y3+z2*z3)\ndef vector_product(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate vector product.\n    '''\n    return (x1*y2-x2*y1),(x1*z2-x2*z1),(y1*z2-y2*z1)\ndef scalar_division(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate scalar division.\n    '''\n    return (x1/x2),(y1/y2),(z1/z2)\ndef vector_division(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate vector division.\n    '''\n    return (x1/x2,y1/y2,z1/z2)\ndef cross_product(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate cross product.\n    '''\n    return (y1*z2-y2*z1),(z1*x2-z2*x1),(z1*y2-z2*y1)\ndef find_vector_angle(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate the angle between two vectors.\n    '''\n    length = math.sqrt((x1*x1)+(y1*y1)+(z1*z1))\n    dot = (x1*x2+y1*y2+z1*z2)\n    cross = (x1*y2-x2*y1)\n    cosine = dot/length\n    return math.degrees(math.acos(cosine))\ndef find_angle(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate the angle between three vectors.\n    '''\n    length1 = math.sqrt((x1*x1)+(y1*y1)+(z1*z1))\n    length2 = math.sqrt((x2*x2)+(y2*y2)+(z2*z2))\n    length3 = math.sqrt((x3*x3)+(y3*y3)+(z3*z3))\n    dot1 = (x1*x2+y1*y2+z1*z2)\n    dot2 = (x1*x3+y1*y3+z1*z3)\n    dot3 = (x2*x3+y2*y3+z2*z3)\n    cosine1 = dot1/length1\n    cosine2 = dot2/length2\n    cosine3 = dot3/length3\n    return math.degrees(math.acos(cosine1))\ndef find_angle_3d(x1,x2,x3,y1,y2,y3,z1,z2,z3,w1,w2,w3):\n    '''\n    Write a function to calculate the angle between three 3d vectors.\n    '''\n    length1 = math.sqrt((x1*x1)+(y1*y1)+(z1*z1)+(w1*w1))\n    length2 = math.sqrt((x2*x2)+(y2*y2)+(z2*z2)+(w2*w2))\n    length3 = math.sqrt((x3*x3)+(y3*y3)+(z3*z3)+(w3*w3))\n    dot1 = (x1*x2+y1*y2+z1*z2+w1*w2)\n    dot2 = (x1*x3+y1*y3+z1*z3+w1*w3)\n    dot3 = (x2*x3+y2*y3+z2*z3+w2*w3)\n    cosine1 = dot1/length1\n    cosine2 = dot2/length2\n    cosine3 = dot3/length3\n    return math.degrees(math.acos(cosine1))\ndef find_perpendicular_vector(x1,x2,x3,y1,y2,y3,z1,z2,z3):\n    '''\n    Write a function to calculate the perpendicular vector.\n    '''\n    if (z2*z3 == z1*z2*z3):\n        return math.sqrt((x2*x2)+(y2*y2)+(z2*z2))\n    return (math.s"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree/180*math.pi\ndef radian_degree(degree):\n    return degree/180*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radian * 180 / math.pi\ndef square_root(number):\n    '''\n    Write a function to return the square root of a number.\n    '''\n    return math.sqrt(number)\ndef add_numbers(number1, number2):\n    '''\n    Write a function to add two numbers together and return the result.\n    '''\n    return number1 + number2\ndef subtract_numbers(number1, number2):\n    '''\n    Write a function to subtract number2 from number1 and return the result.\n    '''\n    return number1 - number2\ndef multiply_numbers(number1, number2):\n    '''\n    Write a function to multiply number1 by number2 and return the result.\n    '''\n    return number1 * number2\ndef divide_numbers(number1, number2):\n    '''\n    Write a function to divide number1 by number2 and return the result.\n    '''\n    return number1 / number2\ndef log_number(number, base):\n    '''\n    Write a function to take a number and its base and return the log of that number.\n    '''\n    return math.log(number, base)\ndef find_log(number, base):\n    '''\n    Write a function to return the base value of the log of a number.\n    '''\n    return math.log(number, base) / math.log(base)\ndef quadratic(a, b, c):\n    '''\n    Write a function to take three numbers (a, b, and c) and return the quadratic formula of that equation.\n    '''\n    return -b / (2 * a)\ndef find_quadratic(a, b, c):\n    '''\n    Write a function to return the value of the quadratic formula for any set of numbers.\n    '''\n    return quadratic(a, b, c)\ndef find_power(number, power):\n    '''\n    Write a function to return the power of a number.\n    '''\n    return number ** power\ndef find_square_root(number):\n    '''\n    Write a function to find the square root of a number.\n    '''\n    return math.sqrt(number)\ndef find_factorial(number):\n    '''\n    Write a function to return the factorial of a number.\n    '''\n    return math.factorial(number)\ndef find_sin(number):\n    '''\n    Write a function to return the sine of a number.\n    '''\n    return math.sin(number)\ndef find_cos(number):\n    '''\n    Write a function to return the cosine of a number.\n    '''\n    return math.cos(number)\ndef find_tan(number):\n    '''\n    Write a function to return the tangent of a number.\n    '''\n    return math.tan(number)\ndef find_arcsin(number):\n    '''\n    Write a function to return the arcsine of a number.\n    '''\n    return math.asin(number)\ndef find_arccos(number):\n    '''\n    Write a function to return the arccosine of a number.\n    '''\n    return math.acos(number)\ndef find_arctan(number):\n    '''\n    Write a function to return the arctangent of a number.\n    '''\n    return math.atan(number)\ndef find_exp(number):\n    '''\n    Write a function to return the exponential of a number.\n    '''\n    return math.exp(number)\ndef find_exp_n(number, n):\n    '''\n    Write a function to return the exponential of a number raised to a power.\n    '''\n    return math.exp(number ** n)\ndef find_sinh(number):\n    '''\n    Write a function to return the hyperbolic sine of a number.\n    '''\n    return math.sinh(number)\ndef find_cosh(number):\n    '''\n    Write a function to return the hyperbolic cosine of a number.\n    '''\n    return math.cosh(number)\ndef find_tanh(number):\n    '''\n    Write a function to return the hyperbolic tangent of a number.\n    '''\n    return math.tanh(number)\ndef find_asinh(number):\n    '''\n    Write a function to return the hyperbolic arcsine of a number.\n    '''\n    return math.asinh(number)\ndef find_acosh(number):\n    '''\n    Write a function to return the hyperbolic arccosine of a number.\n    '''\n    return math.acosh(number)\ndef find_atanh(number):\n    '''\n    Write a function to return the hyperbolic arctangent of a number.\n    '''\n    return math.atanh(number)\ndef find_abs(number):\n    '''\n    Write a function to return the absolute value of a number.\n    '''\n    return math.fabs(number)\ndef find_sqrt(number):\n    '''\n    Write a function to return the square root of a number rounded to the nearest integer.\n    '''\n    return math.floor(math.sqrt(number))\ndef find_ln(number):\n    '''\n    Write a function to return the natural log of a number.\n    '''\n    return math.log(number)\ndef find_log10(number):\n    '''\n    Write a function to return the base 10 log of a number.\n    '''\n    return math.log10(number)\ndef find_ceil(number):\n    '''\n    Write a function to return the smallest integer that is greater than or equal to the given number.\n    '''\n    return math.ceil(number)\ndef find_floor(number):\n    '''\n    Write a function to return the largest integer that is less than or equal to the given number.\n    '''\n    return math.floor(number)\ndef find_fmod(number1, number2):\n    '''\n    Write a function to return the remainder of the division between two numbers.\n    '''\n    return math.fmod(number1, number2)\ndef find_gcd(number1, number2):\n    '''\n    Write a function to return the greatest common divisor of two numbers.\n    '''\n    return math.gcd(number1, number2)\ndef find_lcm(number1, number2):\n    '''\n    Write a function to return the least common multiple of two numbers.\n    '''\n    return number1 * number2 / math.gcd(number1, number2)\ndef find_max(number1, number2):\n    '''\n    Write a function to return the maximum of two numbers.\n    '''\n    return max(number1, number2)\ndef find_min(number1, number2):\n    '''\n    Write a function to return the minimum of two numbers.\n    '''\n    return min(number1, number2)\ndef find_hypot(number1, number2):\n    '''\n    Write a function to return the hypotenuse of a right triangle.\n    '''\n    return math.hypot(number1, number2)\ndef find_degrees(number):\n    '''\n    Write a function to return a number converted to degrees.\n    '''\n    return number * 180 / math.pi\ndef find_radians(number):\n    '''\n    Write a function to return a number converted to radians.\n    '''\n    return number * math.pi / 180\ndef find_radians_to_degrees(number):\n    '''\n    Write a function to return a number converted from radians to degrees.\n    '''\n    return number * 180 / math.pi\ndef find_radians_to_degrees_conversion(number):\n    '''\n    Write a function to return a number converted from radians to degrees.\n    '''\n    return number * 180 / math.pi\ndef find_square_root_two_numbers(number1, number2):\n    '''\n    Write a function to return the square root of two numbers.\n    '''\n    return math.sqrt(number1 ** number2)\ndef find_factorial_two_number"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return (math.pi * degree) / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # ** -> Degree\n    # 360\u00b0 -> 2*\u03c0\n    return degree * 2*math.pi / 360\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern:\n        m = re.search(pattern, text)\n        if m:\n            return m.group(), m.start(), m.end()\n        else:\n            return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = '\\\\b' + pattern + '\\\\b'\n    pattern = pattern.replace('*', '.*')\n    pattern = pattern.replace('?', '.')\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match is None:\n        return None\n    else:\n        return match.group(), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # text = \"what we think we become; we are Python programmers.\"\n    # pattern = r'(?<=we)think'\n    # pattern = r'(?<=think)we'\n    # pattern = r'\\bPython\\b'\n    # pattern = r'(?<=\\bPython\\b)\\b'\n    # pattern = r'(?<=\\bPython\\b)Java\\b'\n    # pattern = r'(?<=\\bPython\\b)\\b(?=Java)'\n    # pattern = r'\\b(?=Python\\b)\\bJava'\n    # pattern = r'(?<=\\bPython\\b)Java'\n    # pattern = r'(?<=\\bPython\\b)(?=Java)'\n    # pattern = r'(?<=Python\\b)Java'\n    # pattern = r'\\b(?=Python\\b)Java\\b'\n    # pattern = r'\\b(?=Python\\b)(?=Java)'\n    # pattern = r'(?<=Python\\b)\\bJava\\b'\n    # pattern = r'\\b(?=Python\\b)\\b(?=Java)'\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        print(match.group())\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m is None:\n        return None\n    else:\n        return m.group(0)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    return result.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if re.search(pattern, text):\n        return re.search(pattern, text).group()\n    else:\n        return None\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if pattern == None:\n        return text\n    start = 0\n    i = 0\n    while i < len(text):\n        match = re.search(pattern, text[i:])\n        if match:\n            start = i + match.start()\n            end = i + match.end()\n            substring = text[start:end]\n            print(\"Substring: {}\".format(substring))\n            print(\"Start index: {}\".format(start))\n            print(\"End index: {}\".format(end))\n            print(\"\\n\")\n            i = end\n        else:\n            break\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Check to ensure the text string is not empty\n    if len(text) == 0:\n        return None\n    if len(pattern) == 0:\n        return None\n    # Search for the first instance of the pattern\n    match = re.search(pattern, text)\n    # Check that a match was found\n    if match == None:\n        return None\n    # Return the matching substring, start index and end index\n    return match.group(0)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # print(\"pattern\", pattern)\n    # print(re.findall(pattern, text))\n    # print(re.search(pattern, text))\n    match = re.search(pattern, text)\n    if match:\n        # print(match.group(0))\n        # print(match.start())\n        # print(match.end())\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1)\n    bell[0] = bell[1] = 1\n    for i in range(2, n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1]\n    for i in range(n):\n        bell.append(bell[-1]*(n+1-i))\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 2]\n    for i in range(3, n + 1):\n        bell.append(bell[i-1] + bell[i - 2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_numbers = [1,1]\n    i = 2\n    while True:\n        bell_numbers.append(bell_numbers[-1] + bell_numbers[-2])\n        if i == n:\n            break\n        i += 1\n    return bell_numbers[n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0, 1, 2]\n    if n < 3:\n        return bell[n]\n    for i in range(3, n+1):\n        bell.append(bell[i-1] + bell[i-2])\n    return bell[n]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return (n + 1) / 2\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell=0\n    for i in range(1,n+1):\n        bell+=i*i\n    return bell\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell Number is the sum of [1x2 x3 x4...... x n]\n    # sum of geometric series x1 x2 x3 x4 x5 x6... xn\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [[1]]\n    for i in range(1,n+1):\n        bell[0].append(1)\n        for j in range(0,i):\n            bell[-1].append(bell[-2][j]+bell[-2][j+1])\n    return bell[0][n-1]\n"
    },
    {
        "number": 608,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= L:\n        raise Exception(\"Invalid input: list is shorter than the L value\")\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(set(list1) - set(list(list1)[L]))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[0:L] + list1[L+1:len(list1)]\n    \nprint(remove_kth_element(['apple','banana','orange','cherry','peach'],2))\nprint(remove_kth_element(['apple','banana','orange','cherry','peach'],1))\nprint(remove_kth_element(['apple','banana','orange','cherry','peach'],0))\nprint(remove_kth_element(['apple','banana','orange','cherry','peach'],6))\nprint(remove_kth_element(['apple','banana','orange','cherry','peach'],5))\nprint(remove_kth_element(['apple','banana','orange','cherry','peach'],4))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # use slice notation to remove the kth element\n    list1_slice = list1[:L] + list1[L+1:]\n    return list1_slice\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    newlist = list(list1)\n    del newlist[L]\n    return newlist\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    L2 = list1[0:L]\n    L2.extend(list1[L+1:])\n    return L2\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    temp = list1\n    temp = temp[:L] + temp[L+1:]\n    return temp\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    # Get the maximum element from the list\n    for i in test_list:\n        i.sort(reverse=True)\n        \n    # Find the max element from the list\n    max_of_nth = max(test_list[N-1])\n    return max_of_nth\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(list(map(lambda x: x[N - 1], test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_list = []\n    for j in range(len(test_list)):\n        max_list.append(test_list[j][N-1])\n    return max(max_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    col_length = len(test_list[0])\n    if N > col_length or N <= 0:\n        return 'Invalid number!'\n    else:\n        col_list = []\n        for i in range(len(test_list)):\n            col_list.append(test_list[i][N-1])\n        return max(col_list)\n    \ndef min_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the min of then'th column.\n    '''\n    col_length = len(test_list[0])\n    if N > col_length or N <= 0:\n        return 'Invalid number!'\n    else:\n        col_list = []\n        for i in range(len(test_list)):\n            col_list.append(test_list[i][N-1])\n        return min(col_list)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    try:\n        nth_col = []\n        for x in range(0, len(test_list)):\n            nth_col.append(test_list[x][N])\n        return max(nth_col)\n    except IndexError:\n        print('Column {} is out of bounds.'.format(N))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return [max(i[N-1] for i in test_list) if N <= len(test_list[0]) else 0 for j in test_list]\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    return max(map(lambda l: l[N], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    temp = []\n    for i in test_list:\n        temp.append(i[N-1])\n    return max(temp)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_column = 0\n    for index, element in enumerate(test_list):\n        if index >= N:\n            column = element[N]\n            if column > max_column:\n                max_column = column\n    return max_column\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0::2],lst[1::2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merge = []\n    for i in lst:\n        merge.append(i[0])\n        merge.append(i[1])\n    return merge\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n        result.append(i[1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    l = lst[0]\n    for i in range(1, len(lst)):\n        l.append(lst[i][0])\n        l.append(lst[i][1])\n    return l\n    \ndef reverse(lst):\n    '''\n    Write a Python function that reverses the elements of a list (without creating a temporary array). \n    '''\n    for i in range(int(len(lst) / 2)):\n        lst[i], lst[len(lst) - 1 - i] = lst[len(lst) - 1 - i], lst[i]\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    newlist=[]\n    for sublist in lst:\n        newlist.append(sublist[0])\n        newlist.append(sublist[1])\n    return newlist\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[i][0] for i in range(len(lst))], [lst[i][1] for i in range(len(lst))]\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 1:\n        return [[lst[0][0], lst[0][1]]]\n    if len(lst) == 2:\n        return [[lst[0][0], lst[1][0]], [lst[0][1], lst[1][1]]]\n    else:\n        mid = len(lst) // 2\n        left = merge(lst[:mid])\n        right = merge(lst[mid:])\n        return merge_sort(left, right)\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [lst[0::2], lst[1::2]]\n    \n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return [ [lst[i][0], lst[i][1]] for i in range(0,len(lst))]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumm_sum = 0\n    for i in test_list:\n        cumm_sum += i\n    return cumm_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for num in test_list:\n        cum_sum += num\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    result_list = []\n    for i in test_list:\n        cummulative_sum += i\n        result_list.append(cummulative_sum)\n    print(result_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for i in test_list:\n        result += i\n    return result\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list.sort()\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in test_list:\n        cummulative_sum += i\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for x in test_list:\n        sum += x\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    test_list = list(test_list)\n    test_list.insert(0,0)\n    i = 1\n    while i < len(test_list):\n        test_list[i] = test_list[i] + test_list[i-1]\n        i += 1\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return [sum(test_list[:i+1]) for i in range(len(test_list))]\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    for i in range(len(test_list)):\n        sum_list.append(sum(test_list[0:i+1]))\n    return sum_list\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = []\n    for i in range(len(nums)):\n        total.append(sum(nums[i])/len(nums[i]))\n    return total\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    for i in nums:\n        total += sum(i)\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(t) / len(t) for t in nums]\n    # return [sum(t) / len(nums) for t in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(x)/len(x), 2) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    if type(nums) is not tuple:\n        return None\n    elif type(nums[0]) is not tuple:\n        return None\n    elif type(nums[0][0]) is not int:\n        return None\n    elif type(nums[0][1]) is not int:\n        return None\n    else:\n        return [sum(i)/len(nums) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda tup: average_list(tup), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    list_tuple = []\n    for tuple in nums:\n        tuple_ = tuple[1:]\n        tuple_ = tuple(tuple_)\n        list_tuple.append(tuple_)\n    average = []\n    for i in list_tuple:\n        average.append(sum(i)/len(i))\n    return average\n    \n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    sum_all = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            sum_all += nums[i][j]\n        print(nums[i])\n    avg = sum_all / (len(nums) * len(nums[0]))\n    return avg\n    \nprint(average_tuple(((3, 5, 1), (10, 2, 3), (5, 4, 4)))"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [sum(num)/len(num) for num in zip(*nums)]\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(n)/len(n)) for n in nums]\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(t1 % t2 for t1, t2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    print(test_tup1 % test_tup2)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_mod = [a%b for a,b in zip(test_tup1, test_tup2)]\n    return tuple(test_mod)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(int(a)%int(b) for a,b in zip(test_tup1, test_tup2))\n    else:\n        raise Exception(\"Tuples are not of same length\")\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # (a % b) = (a - (a//b) * b)\n    return tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(el1 % el2 for el1, el2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(test_tup1[i] % test_tup2[i] for i in range(0, len(test_tup1)))\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # itertools.starmap(f, zip(test_tup1, test_tup2))\n    # x = list(map(lambda x, y: x % y, test_tup1, test_tup2))\n    x = list(itertools.starmap(lambda x, y: x % y, zip(test_tup1, test_tup2)))\n    print(x)\n    return x\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #Your Code Here\n    assert len(test_tup1) == len(test_tup2)\n    return tuple(map(lambda x: x[0] % x[1], zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Approach 1: Time complexity : O(n^2), Space complexity: O(n^2)\n    # Let d = 2, steps = [4, 2, 3, 3, 1, 2, 2, 4, 3, 2, 3, 2, 2, 3, 3, 3, 3, 2, 3, 3, 2, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 2, 2, 2, 3, 3, 4, 2, 3, 2, 3, 3, 3, 3, 2, 3, 2, 3, 4, 2, 2, 3, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 3, 4, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 2, 4, 2, 2, 4, 4, 3, 3, 2, 2, 3, 3, 4, 4, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 2, 2, 3, 2, 3, 4, 4, 2, 2, 4, 4, 4, 2, 3, 2, 3, 2, 4, 4, 2, 3, 3, 2, 4, 3, 2, 2, 4, 2, 2, 4, 4, 4, 4, 3, 3, 3, 2, 4, 3, 2, 4, 2, 4, 2, 3, 2, 3, 4, 2, 4, 2, 3, 3, 3, 2, 3, 2, 3, 4, 2, 4, 2, 4, 4, 4, 2, 4, 3, 3, 3, 4, 4, 4, 4, 4, 2, 4, 3, 3, 4, 4, 4, 2, 2, 3, 2, 4, 2, 2, 2, 4, 4, 2, 2, 3, 2, 2, 4, 2, 4, 2, 2, 2, 4, 3, 2, 3, 2, 3, 4, 4, 4, 4, 3, 3, 3, 4, 3, 2, 4, 2, 4, 4, 4, 2, 3, 4, 3, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 4, 2, 4, 2, 4, 3, 4, 3, 4, 2, 2, 2, 2, 2, 2, 4, 2, 2, 3, 2, 4, 2, 3, 4, 2, 2, 2, 3, 4, 2, 4, 3, 4, 3, 4, 4, 4, 4, 2, 4, 2, 3, 2, 4, 4, 2, 4, 2, 4, 2, 4, 4, 2, 4, 4, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 2, 4, 4, 4, 4, 4, 2, 4, 2, 2, 3, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 4, 2, 3, 2, 3, 4, 3, 4, 4, 2, 3, 4, 4, 4, 4, 2, 4, 2, 4, 3, 4, 4, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 2, 4, 2, 3, 2, 4, 2, 2, 2, 4, 2, 3, 3, 4, 3, 2, 2, 4, 2, 4, 3, 2, 4, 2, 4, 2, 2, 4, 3, 2, 4, 4, 4, 4, 2, 4, 2, 4, 4, 2, 4, 4, 2, 2, 4, 2, 2, 4, 2, 2, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 2, 2, 4, 4, 4, 2, 3, 3, 2, 4, 2, 3, 4, 2, 2, 2, 2, 4, 2, 3, 4, 3, 4, 2, 4, 4, 2, 4, 4, 2, 4, 3, 2, 4, 2, 2, 4, 2, 2, 4, 4, 4, 2, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 2, 2, 4, 2, 4, 4, 4, 4, 4, 2, 4, 3, 4, 4, 4, 4, 4, 2, 4, 4, 3, 4, 3, 4, 2, 2, 4, 2, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 4, 4, 4, 3, 4, 4, 4, 4, 2, 4, 4, 2, 4, 3, 2, 4, 2, 4, 2, 4, 2, 2, 4, 4, 4, 2, 4, 4, 3, 4, 4, 2, 4, 4, 4, 2, 4, 4, 4, 2, 2, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 3, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 3, 4, 4, 4, 2, 4, 4, 2, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 4, 2, 2, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 4, 2, 4, 2, 2, 2, 4, 2, 4, 2, 2, 4, 2, 2, 2, 4, 2, 4, 2, 4, 4, 4, 2, 2, 4, 2, 2, 4, 2, 2, 4, 4, 2, 4, 4, 4, 2, 4, 4, 2, 2, 2, 4, 2, 4, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 4, 4, 2, 4, 2, 4, 2, 4, 4, 2, 4, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 2, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4, 2, 4, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 2, 4, 4, 4, 4, 2, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 2, 4, 2, 2, 4, 4, 2, 2, 2, 2, 4, 2, 4, 2, 4, 4, 2, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 2, 4, 4, 2, 4, 4, 2, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 4, 4, 2, 4, 2, 4, 2, 2, 4, 2, 4, 2, 2, 4, 2, 2, 4, 2, 4, 4, 4, 4, 2, 4, 2, 4, 2, 4, 2, 4, 4, 4, 4, 2, 4, 4, 4, 2, 4, 4, 4, 4, 4, 2, 4, 2, 4, 4, 4, 4, 4, 2, 4, 4, 2, 2, 4, 2, 4, 4, 2, 4, "
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (d == 0): \n        return 0\n    if (steps < d): \n        return -1\n    else: \n        return 1 + min_Jumps(steps - d, d) \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # if d == 0: return 0 \n    # if steps == 1: return 1 if d == 0 else 0\n    # if d <= steps: return 1\n    # return min( min_Jumps(steps - 1, d - 1), min_Jumps(steps - 1, d)) + 1\n    if d == 0: return 0\n    if steps == 1: return 1 if d == 0 else 0\n    if d <= steps: return 1\n    dp = [[0] * (d + 1) for _ in range(steps + 1)]\n    dp[1][1] = 1\n    dp[1][0] = 1\n    for i in range(2, steps + 1):\n        for j in range(d + 1):\n            if j < d:\n                dp[i][j + 1] = dp[i - 1][j] + 1\n            else:\n                dp[i][j + 1] = dp[i - 1][j]\n    return dp[steps][d]\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    curr_pos = [0, 0]\n    for step in steps:\n        curr_pos[0] += step[0]\n        curr_pos[1] += step[1]\n        if curr_pos[0] == d:\n            curr_pos[0] = 0\n        if curr_pos[1] == 0:\n            curr_pos[1] = 0\n        jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # d = 0\n    # steps = 1\n    # n = 1\n    # if d == 0 and steps == 1:\n    #     return n\n    # elif d!= 0 and steps == 1:\n    #     return -1\n    # else:\n    #     return n + min_Jumps(steps-1, d-1)\n    # # n + min_Jumps(steps-1, d-1)\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if (steps == 0): \n        return 0\n    if (d == 0): \n        return 0\n    if (steps < 0): \n        return -1\n    Jumps = float('inf')\n    for i in range(1, steps + 1): \n        if ((d - i >= 0) and (steps - i - 1 >= 0)) : \n            jumps = 1 + min_Jumps(steps - i - 1, d - i)\n            if (jumps!= -1 and jumps < Jumps): \n                Jumps = jumps \n    return Jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    curr_pos = [0, 0]\n    n = 0\n    count = 0\n    while curr_pos[0]!= d:\n        n += 1\n        if n > steps:\n            return -1\n        # finding next step\n        if curr_pos[1] == 0:\n            if curr_pos[0] == 0:\n                curr_pos[0] += 1\n            else:\n                if curr_pos[0] % 2 == 0:\n                    curr_pos[0] += 1\n                else:\n                    curr_pos[0] -= 1\n        else:\n            if curr_pos[0] % 2 == 0:\n                curr_pos[1] -= 1\n            else:\n                curr_pos[1] += 1\n        count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == 1:\n        return 1\n    if steps <= 1:\n        return 0\n    if steps == 2:\n        if d <= 2:\n            return 0\n        else:\n            return 1\n    # jump = (0, 1)\n    # jump = (1, 2)\n    jump = (1, d)\n    jumps = 1\n    while jump[0]!= d:\n        jumps += 1\n        jump = (jump[0]+1, jump[1]*2)\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for step in steps:\n        if step > 0:\n            jumps += step // d\n            if step % d!= 0:\n                jumps += 1\n    return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    print(min_Jumps(steps, d))\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    for i in range(len(nums1)):\n        nums1[i] /= nums2[i]\n    return nums1\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) >= len(nums2):\n        for i in range(0,len(nums2)):\n            nums1[i] = nums1[i]/nums2[i]\n        return nums1\n    else:\n        return 'Please enter the correct length of nums2'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if nums1 and nums2:\n        return [i/j for i,j in zip(nums1,nums2)]\n    else:\n        raise ValueError(\"Invalid Input\")\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    div_list = []\n    for i in range(len(nums1)):\n        div_list.append(nums1[i] / nums2[i])\n    return div_list\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == len(nums2):\n        return [nums1[i]/nums2[i] for i in range(len(nums1))]\n    else:\n        return 'Cannot divide lists with different lengths'\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    print('division of two lists: ',nums1//nums2)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Return an empty string if the test string is empty\n    if not test_str:\n        return ''\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isnumeric()]) + ''.join([i for i in test_str if i.isnumeric()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = '0123456789'\n    for i in test_str:\n        if i in numbers:\n            test_str = test_str.replace(i,'')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = \"\"\n    chars = \"\"\n    for c in test_str:\n        if c in \"0123456789\":\n            numbers += c\n        else:\n            chars += c\n    return chars + numbers\nprint(move_num(\"Test1, 12, Test2, Fruit, 15, Elephant,  6, \"))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for i in test_str:\n        if i in \"0123456789\":\n            result += i\n    return result + test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if i.isalpha()]) + ''.join([i for i in test_str if not i.isalpha()])\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join(x for x in test_str if x.isdigit()) + ''.join(x for x in test_str if not x.isdigit())\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return ''.join([i for i in test_str if not i.isdigit()]) + ''.join(list(map(str, sorted([int(i) for i in test_str.split(' ')]))))\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = ['0','1','2','3','4','5','6','7','8','9']\n    result = ''\n    for l in test_str:\n        if l in nums:\n            result += l\n    return result\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for letter in test_str:\n        if letter.isdigit():\n            num_list.append(letter)\n    return ''.join(num_list)+test_str.replace(''.join(num_list),'')\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    d = {}\n    count = 0\n    for i in a:\n        if i % 2 == 0:\n            count += 1\n        d[i] = count\n    return max(d.values())\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    return largest_subset_helper(a, 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # edge case\n    if len(a) == 0:\n        return 0\n    if len(a) == 1:\n        return 1\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def gcd(x, y):\n        if x == 0 or y == 0:\n            return 0\n        if x > y:\n            x, y = y, x\n        while x % y!= 0:\n            a = x % y\n            x, y = y, a\n        return y\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if not a:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    def largest_subset_helper(a, N, max_sum):\n        if N < 1:\n            return 0\n        max_sum[0] = max_sum[1] = -1\n        return max(largest_subset_helper(a, N - 1, max_sum), largest_subset_helper(a, N - 1, max_sum) + a[N - 1] + max_sum[0], largest_subset_helper(a, N - 1, max_sum))\n    a.sort()\n    max_sum = [0, 0]\n    return largest_subset_helper(a, len(a), max_sum)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    #brute force approach\n    for i in range(len(a),0,-1):\n        for j in range(len(a)-i+1):\n            if all(a[j:j+i]):\n                return i\n    return 0\n    \n    #one liner:\n    return max(all(a[j:j+i]) for i in range(len(a),0,-1) for j in range(len(a)-i+1))\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) <= 1:\n        return len(a)\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [5,5,6,9,8,7]\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[i]%a[j] == 0 or a[j]%a[i] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from itertools import combinations\n    a = set(a)\n    c = 0\n    for i in combinations(a,2):\n        if i[0] % i[1] == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2.0\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    if n == 1:\n        return min(arr1[0], arr2[0])\n    \n    if n == 2:\n        return (arr1[0] + arr2[1]) / 2\n        \n    split1 = split_half(arr1)\n    split2 = split_half(arr2)\n    \n    if split1 > split2:\n        split1, split2 = split2, split1\n    \n    if split1 == (split2 + n) // 2:\n        return split1\n    elif split1 > (split2 + n) // 2:\n        return get_median(arr1[:(split1 + 1) // 2], arr2[:(split2 + 1) // 2], (split1 + split2) // 2)\n    else:\n        return get_median(arr1[split1 + 1:], arr2[split2 + 1:], n - split1 - 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 1:\n        return None\n    arr1.sort()\n    arr2.sort()\n    i = n//2\n    j = n//2\n    if n % 2:\n        return arr1[i]\n    return (arr1[i] + arr2[j])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return arr1[0]\n    elif n == 2:\n        return (arr1[0] + arr2[0])/2.0\n    else:\n        n1 = n/2\n        n2 = n/2\n        if n % 2 == 0:\n            return (get_median(arr1[:n1], arr2[:n2], n1) + get_median(arr1[n1:], arr2[n2:], n-n1))/2.0\n        else:\n            return get_median(arr1[:n1], arr2[:n2], n1)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    median = 0\n    m = n // 2\n    if n % 2 == 0:\n        median = (arr1[m - 1] + arr1[m]) / 2\n    else:\n        median = arr1[m]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    print(arr1, arr2, n)\n    x = 0\n    if n%2==0:\n        x = int((arr1[n//2-1]+arr1[n//2])/2)\n    else:\n        x = int(arr1[n//2])\n    print(x)\n    return x\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return\n    \n    if n == 1:\n        return min(arr1[0], arr2[0])\n    \n    m1 = n // 2\n    m2 = m1 + 1 if n % 2 else m1\n    \n    return median(get_median(arr1[:m1], arr2[:m1], m1), \n                  get_median(arr1[m1:], arr2[m1:], m1), \n                  n)\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i = 0\n    j = 0\n    k = 0\n    median = 0\n    while(k < n and i < n and j < n):\n        if(arr1[i] < arr2[j]):\n            i = i + 1\n            median = arr1[i - 1]\n        else:\n            j = j + 1\n            median = arr2[j - 1]\n        k = k + 1\n    return median\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return min(arr1[0], arr2[0])\n    \n    i = 0\n    j = n-1\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 1:\n        return (arr1[0] + arr2[0]) / 2\n    if n == 0:\n        return '0'\n    mid_1 = n // 2\n    mid_2 = n // 2 + n % 2\n    return get_median(arr1[:mid_1], arr2[:mid_2], mid_1)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n    \n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return[i**n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [i ** n for i in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    new_nums = []\n    for x in nums:\n        new_nums.append(x**n)\n    return new_nums\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not isinstance(string, str):\n        raise TypeError('Expected a string')\n    for letter in string:\n        if not isinstance(letter, str):\n            raise TypeError('Expected a string')\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for x in string:\n        if x.isupper():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for char in string:\n        if char.isupper():\n            return True\n    return False\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string_upper = string.upper()\n    return string_upper\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char\n    if result:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_case = string.upper()\n    return upper_case\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1]=newList[-1],newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    listSize = len(newList)\n    temp = newList[0]\n    newList[0] = newList[listSize - 1]\n    newList[listSize - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    #newList=newList[::-1]\n    #newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n    \n    \ndef reverse_List(newList):\n    '''\n    Write a Python function to reverse a given list.\n    '''\n    #newList = newList[::-1]\n    return newList[::-1]\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[len(newList)-1]\n    newList[0]=last\n    newList[len(newList)-1]=first\n    print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    first = newList[0]\n    last = newList[size - 1]\n    newList[0] = last\n    newList[size - 1] = first\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size-1]\n    newList[size-1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList)\n    temp = newList[0]\n    newList[0] = newList[size - 1]\n    newList[size - 1] = temp\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp \n    return newList \n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    temp = newList[0]\n    newList[0] = newList[length - 1]\n    newList[length - 1] = temp\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    from math import pi\n    r = float(r)\n    a = r*2\n    s = math.pi*(r**2)\n    Area = (s*(3**0.5)/4)\n    return Area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate area of the triangle and return the value\n    # if area is greater than 10 and less than or equal to 20, return \"The area of the triangle is between 10 and 20\"\n    # if area is greater than 20, return \"The area of the triangle is greater than 20\"\n    # if area is less than 10, return \"The area of the triangle is less than 10\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    def triangle_area_recursive(r,s) :\n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius. \n        The function should return the area of the largest triangle and the three sides of the triangle (You can assume that the radius of the semicircle is always positive). \n        \n        '''\n        \n        if (r < 0) : \n            return None\n        if r == 0 :\n            return 0\n        if r == 1 :\n            return 0.5\n        if r == 2 :\n            return 0.4330127018922193\n        return 0.4330127018922193 + (0.5 * ((triangle_area_recursive(r-1,None)) + (triangle_area_recursive(r-2,None))))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(r,a,b,c):\n        return (r**2)*math.acos(((a**2)+(b**2)-(c**2))/(2*a*b))+((r**2)*math.acos(((a**2)+(c**2)-(b**2))/(2*a*c))+((r**2)*math.acos(((b**2)+(c**2)-(a**2))/(2*b*c)))/3\n    return area(r,math.sqrt(2),math.sqrt(2/2),math.sqrt(2/2))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = 3.14 * (r**2)\n    print('Area of the largest triangle that can be inscribed in a semicircle with a given radius', a)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    if r >= 0:\n        from math import pi\n        return pi * r ** 2\n    else:\n        return -1\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area=3*(3.14159265358979)**(1/2)\n    \n    if (r/area)%1==0 :\n        print(\"The area of the largest triangle that can be inscribed in a semicircle with a given radius is \"+str(r/area))\n    else :\n        print(\"No such triangle exists\")\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def calc_hypotenuse(r,h):\n        return (r**2 + h**2)**0.5\n    def calc_area(r,h):\n        return (r*h) * 0.5\n    def calc_s_perimeter(r,h):\n        return 2*r + 2*math.sqrt(r**2 + h**2)\n    def calc_s_area(r,h):\n        return (r*h) * 0.5\n    max_s_area = 0\n    max_area = 0\n    max_perimeter = 0\n    for h in range(1,r):\n        area = calc_s_area(r,h)\n        if max_s_area < area:\n            max_s_area = area\n            max_h = h\n            max_r = r\n        perimeter = calc_s_perimeter(r,h)\n        if max_perimeter < perimeter:\n            max_perimeter = perimeter\n            max_h = h\n            max_r = r\n    return (max_r,max_h,max_s_area,max_perimeter)\nprint(triangle_area(1))\nprint(triangle_area(2))\nprint(triangle_area(3))\nprint(triangle_area(4))\nprint(triangle_area(5))\nprint(triangle_area(6))\nprint(triangle_area(7))\nprint(triangle_area(8))\nprint(triangle_area(9))\nprint(triangle_area(10))\nprint(triangle_area(11))\nprint(triangle_area(12))\nprint(triangle_area(13))\nprint(triangle_area(14))\nprint(triangle_area(15))\nprint(triangle_area(16))\nprint(triangle_area(17))\nprint(triangle_area(18))\nprint(triangle_area(19))\nprint(triangle_area(20))\nprint(triangle_area(21))\nprint(triangle_area(22))\nprint(triangle_area(23))\nprint(triangle_area(24))\nprint(triangle_area(25))\nprint(triangle_area(26))\nprint(triangle_area(27))\nprint(triangle_area(28))\nprint(triangle_area(29))\nprint(triangle_area(30))\nprint(triangle_area(31))\nprint(triangle_area(32))\nprint(triangle_area(33))\nprint(triangle_area(34))\nprint(triangle_area(35))\nprint(triangle_area(36))\nprint(triangle_area(37))\nprint(triangle_area(38))\nprint(triangle_area(39))\nprint(triangle_area(40))\nprint(triangle_area(41))\nprint(triangle_area(42))\nprint(triangle_area(43))\nprint(triangle_area(44))\nprint(triangle_area(45))\nprint(triangle_area(46))\nprint(triangle_area(47))\nprint(triangle_area(48))\nprint(triangle_area(49))\nprint(triangle_area(50))\nprint(triangle_area(51))\nprint(triangle_area(52))\nprint(triangle_area(53))\nprint(triangle_area(54))\nprint(triangle_area(55))\nprint(triangle_area(56))\nprint(triangle_area(57))\nprint(triangle_area(58))\nprint(triangle_area(59))\nprint(triangle_area(60))\nprint(triangle_area(61))\nprint(triangle_area(62))\nprint(triangle_area(61))\nprint(triangle_area(60))\nprint(triangle_area(59))\nprint(triangle_area(58))\nprint(triangle_area(57))\nprint(triangle_area(56))\nprint(triangle_area(55))\nprint(triangle_area(54))\nprint(triangle_area(53))\nprint(triangle_area(52))\nprint(triangle_area(51))\nprint(triangle_area(50))\nprint(triangle_area(49))\nprint(triangle_area(48))\nprint(triangle_area(47))\nprint(triangle_area(46))\nprint(triangle_area(45))\nprint(triangle_area(44))\nprint(triangle_area(43))\nprint(triangle_area(42))\nprint(triangle_area(41))\nprint(triangle_area(40))\nprint(triangle_area(39))\nprint(triangle_area(38))\nprint(triangle_area(37))\nprint(triangle_area(36))\nprint(triangle_area(35))\nprint(triangle_area(34))\nprint(triangle_area(33))\nprint(triangle_area(32))\nprint(triangle_area(31))\nprint(triangle_area(30))\nprint(triangle_area(29))\nprint(triangle_area(28))\nprint(triangle_area(27))\nprint(triangle_area(26))\nprint(triangle_area(25))\nprint(triangle_area(24))\nprint(triangle_area(23))\nprint(triangle_area(22))\nprint(triangle_area(21))\nprint(triangle_area(20))\nprint(triangle_area(19))\nprint(triangle_area(18))\nprint(triangle_area(17))\nprint(triangle_area(16))\nprint(triangle_area(15))\nprint(triangle_area(14))\nprint(triangle_area(13))\nprint(triangle_area(12))\nprint(triangle_area(11))\nprint(triangle_area(10))\nprint(triangle_area(9))\nprint(triangle_area(8))\nprint(triangle_area(7))\nprint(triangle_area(6))\nprint(triangle_area(5))\nprint(triangle_area(4))\nprint(triangle_area(3))\nprint(triangle_area(2))\nprint(triangle_area(1))\nprint(triangle_area(0))"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi * (r**2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def area(r) :\n        a = r * 2 * np.arcsin(1/2)\n        return a\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if end<0:\n        return start\n    if end==start:\n        return start+1\n    if array[start]==start:\n        return find_First_Missing(array,start+1,end)\n    return find_First_Missing(array,start,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if start == end:\n        return array[start] + 1\n    else:\n        mid = int((end+start)/2)\n        if array[mid]!= mid:\n            if mid == 0 or array[mid-1] == mid-1:\n                return mid\n            return find_First_Missing(array,start=mid,end=end)\n        return find_First_Missing(array,start=start,end=mid)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if end<start:\n        return -1\n    mid=(start+end)//2\n    if array[mid]!=mid:\n        if mid+1<len(array):\n            if array[mid+1]==mid+1:\n                return find_First_Missing(array,start,mid)\n            else:\n                return mid+1\n        else:\n            return mid+1\n    else:\n        return find_First_Missing(array,start,mid-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end < start:\n        return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return array[start]\n    if start > end:\n        return 0\n    if array[start]!= start:\n        return start\n    if array[end]!= end:\n        return end+1\n    mid = int((start + end) / 2)\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    #if start is not given, find start index by binary search\n    if start == 0:\n        start = binary_search(array,start)\n    if end is None:\n        end = len(array) - 1\n    if start == end:\n        return start + 1\n    if start > end:\n        return start\n    #normal binary search method\n    index = start + (end - start) // 2\n    if array[index] == index + 1:\n        return index + 1\n    elif array[index] > index + 1:\n        return find_First_Missing(array, start, index)\n    else:\n        return find_First_Missing(array, index + 1, end)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    array = [int(i) for i in array]\n    \n    if end==None:\n        end = len(array)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = ''\n    for i in range(len(string)):\n        if string[i] =='':\n            new_string += '%20'\n        else:\n            new_string += string[i]\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    even = []\n    while(i < len(list)):\n        if (list[i] % 2 == 0):\n            even.append(list[i])\n        i += 1\n    return even\n    \ndef Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    i = 0\n    even = []\n    while(i < len(list)):\n        if (list[i] % 2 == 0):\n            even.append(list[i])\n        i += 1\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for i in list:\n        if i % 2 == 0:\n            even_numbers.append(i)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if (i % 2 == 0):\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    lst = []\n    for i in range(len(list)):\n        if list[i]%2==0:\n            lst.append(list[i])\n    return lst\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = []\n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n    return even_num\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    for i in list:\n        if i%2==0:\n            print(i)\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list_even = []\n    list_odd = []\n    for i in list:\n        if i%2 == 0:\n            list_even.append(i)\n        else:\n            list_odd.append(i)\n    return list_even, list_odd\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for i in range(len(list)): \n        if(list[i] % 2 == 0): \n            even_list.append(list[i]) \n    return even_list \n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_num = [] \n    odd_num = [] \n    for i in list: \n        if i % 2 == 0: \n            even_num.append(i) \n        else: \n            odd_num.append(i) \n    print(\"Even numbers in the list: \", even_num) \n    print(\"Odd numbers in the list: \", odd_num) \n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    for num in list:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x in (-1, 0, 1):\n        for y in (-1, 0, 1):\n            for z in (-1, 0, 1):\n                if x == 0 and y == 0 and z == 0:\n                    continue\n                sub.append((ele[0] + x, ele[1] + y, ele[2] + z))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for c in coords:\n        if ele == c:\n            sub.append(c)\n            return adjac(c, sub)\n    else:\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if ele == (0,0):\n        return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # TODO: Implement the adjac() function.\n    # Get the elements in the tuple and turn it into a list\n    coord = list(ele)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacents = []\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coordinate = sub\n    if len(sub) == 3:\n        if ele[0] == sub[0] and ele[1] == sub[1] and ele[2] == sub[2]:\n            return [sub]\n        elif ele[0] == sub[0] and ele[1] == sub[1]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0], sub[1] + 1, sub[2]], [sub[0], sub[1] - 1, sub[2]]]\n        elif ele[0] == sub[0] and ele[2] == sub[2]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[1] == sub[1] and ele[2] == sub[2]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[0] == sub[0]:\n            return [[sub[0], sub[1] + 1, sub[2]], [sub[0], sub[1] - 1, sub[2]], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[1] == sub[1]:\n            return [[sub[0], sub[1] + 1, sub[2]], [sub[0], sub[1] - 1, sub[2]], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[2] == sub[2]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        else:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n    elif len(sub) == 2:\n        if ele[0] == sub[0] and ele[1] == sub[1]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[0] == sub[0] and ele[2] == sub[2]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[1] == sub[1] and ele[2] == sub[2]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[0] == sub[0]:\n            return [[sub[0], sub[1] + 1, sub[2]], [sub[0], sub[1] - 1, sub[2]], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[1] == sub[1]:\n            return [[sub[0], sub[1] + 1, sub[2]], [sub[0], sub[1] - 1, sub[2]], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        elif ele[2] == sub[2]:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n        else:\n            return [[sub[0], sub[1], sub[2] + 1], [sub[0], sub[1], sub[2] - 1], [sub[0] + 1, sub[1], sub[2]], [sub[0] - 1, sub[1], sub[2]]]\n    else:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x in range(0,len(ele)):\n        sub.append(ele[x])\n        sub.extend(adjac(ele[x], sub=[]))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    return [(x+1,y), (x-1,y), (x,y+1), (x,y-1), (x+1,y+1), (x+1,y-1), (x-1,y+1), (x-1,y-1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x,y in sub:\n        yield x,y\n        yield x+1,y\n        yield x,y+1\n        yield x+1,y+1\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if isinstance(ele, str):\n        ele = eval(ele)\n    adj = []\n    if 0 <= ele[0]+1 < 1000:\n        adj.append((ele[0]+1, ele[1]))\n    if 0 <= ele[0]-1 < 1000:\n        adj.append((ele[0]-1, ele[1]))\n    if 0 <= ele[1]+1 < 1000:\n        adj.append((ele[0], ele[1]+1))\n    if 0 <= ele[1]-1 < 1000:\n        adj.append((ele[0], ele[1]-1))\n    if ele[0] == 0:\n        adj.append((ele[0]+1, ele[1]))\n    if ele[0] == 999:\n        adj.append((ele[0]-1, ele[1]))\n    if ele[1] == 0:\n        adj.append((ele[0], ele[1]+1))\n    if ele[1] == 999:\n        adj.append((ele[0], ele[1]-1))\n    if (ele[0] + ele[1]) % 2 == 0:\n        adj.append((ele[0], ele[1]-1))\n        adj.append((ele[0], ele[1]+1))\n        adj.append((ele[0]+1, ele[1]))\n        adj.append((ele[0]-1, ele[1]))\n    if (ele[0] + ele[1]) % 2!= 0:\n        adj.append((ele[0], ele[1]+1))\n        adj.append((ele[0], ele[1]-1))\n        adj.append((ele[0]+1, ele[1]))\n        adj.append((ele[0]-1, ele[1]))\n    return adj\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace('_','').replace(' ', '_').replace('\\t', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    l = len(text)\n    new_text = ''\n    for i in range(l):\n        if text[i] =='':\n            new_text += '_'\n        elif text[i] == '_':\n            new_text +=''\n        else:\n            new_text += text[i]\n    return new_text\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if \" \" in text:\n        text = text.replace(\" \", \"_\")\n    else:\n        text = text.replace(\"_\", \" \")\n    return text\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    result = []\n    for x in num_list:\n        if x!=0:\n            result.append(x)\n    for x in range(len(num_list)):\n        if num_list[x]==0:\n            result.append(num_list[x])\n    return result\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for num in num_list:\n        if num == 0:\n            num_list.remove(0)\n            num_list.append(num)\n    print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(i)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    for j in range(len(num_list)):\n        if num_list[j]!= 0:\n            num_list[i] = num_list[j]\n            i+=1\n    for k in range(i,len(num_list)):\n        num_list[k] = 0\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # del num_list[0]\n    # while 0 in num_list:\n    #     num_list.remove(0)\n    #     num_list.append(0)\n    # return num_list\n    # better method\n    num_list.sort(key=lambda x: x!=0, reverse=False)\n    num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for index in range(len(num_list)):\n        if num_list[index] == 0:\n            num_list.append(num_list.pop(index-count))\n            count += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            j += 1\n            i -= 1\n        i += 1\n    print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    x = num_list[0]\n    for i in range(len(num_list)):\n        if num_list[i] == 0 and num_list[0]!= 0:\n            num_list[0] = num_list[i]\n            num_list[i] = x\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            num_list.remove(i)\n            num_list.append(0)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    return num_list.append(num_list.pop(num_list.index(0)))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(0,n) : \n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    arr = list(arr)\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum += (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # your code here\n    a=sum(arr)\n    x=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            x=x^(arr[i]^arr[j])\n    return a,x\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    p = 0\n    for i in range(0,n) :\n        p = p ^ arr[i]\n    print(p)\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    #Your code here\n    l = []\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            l.append(arr[i] ^ arr[j])\n    return l\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) % 2!= 0 : \n        return -1\n    return sum(list(map(lambda x : x[0]^x[1], list(zip(arr[0::2],arr[1::2])))))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    first = 0\n    second = n - 1\n    total = 0\n    while(first < second):\n        total += arr[second] ^ arr[first]\n        first += 1\n        second -= 1\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr.sort()\n    ans = 0\n    for i in range(n) : \n        ans = ans ^ arr[i] ^ (arr[i] + 1)\n    return ans\n    \n    \narr = [1,2,3,4]\nn = len(arr)\nprint(pair_xor_Sum(arr, n))\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(0,n):\n        for j in range(i+1,n):\n            print(arr[i]^arr[j])\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0, n) :\n        for j in range(i + 1, n) : \n            total += (arr[i] ^ arr[j]) \n    return total \n    \n    \ndef swap(arr, i, j): \n    '''\n    Write a function to swap elements in the list.\n    '''\n    temp = arr[i] \n    arr[i] = arr[j] \n    arr[j] = temp \n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for data in iterable:\n        hq.heappush(h, data)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    for i in range(len(iterable)-1):\n        temp = hq.heappop(iterable)\n        hq.heappush(iterable,temp)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    iterable_length = len(iterable)\n    hq.heapify(iterable)\n    while iterable_length > 0:\n        hq.heappop(iterable)\n        iterable_length -= 1\n    return iterable\n    \nprint(heap_sort([10,1,23,45,12,8,9]))\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for value in iterable:\n        hq.heappush(h,value)\n    return [hq.heappop(h) for i in range(len(h))]\n    \ndef test_function(test_case):\n    sorted_array = heap_sort(test_case)\n    #print(sorted_array)\n    if sorted_array == sorted(test_case):\n        print(\"Pass\")\n    else:\n        print(\"Fail\")\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # intialize a list\n    lst = list(iterable)\n    # intialize the heap\n    heap = list()\n    # build the heap\n    for num in lst:\n        hq.heappush(heap, num)\n    # sort the list\n    sorted_lst = []\n    while heap:\n        sorted_lst.append(hq.heappop(heap))\n    # return the sorted list\n    return sorted_lst\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    #iterable = [None] + iterable\n    while len(iterable) > 1:\n        iterable[1], iterable[-1] = iterable[-1], iterable[1]\n        iterable.pop()\n        hq.heappop(iterable)\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    def heapify(iterable,index,n):\n        left_child = 2*index +1\n        right_child = 2*index + 2\n        max_index = index\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    sorted_list = []\n    for _ in range(len(iterable)):\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost==sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount: \n        print (\"The sale amount is profitable.\\n\")\n    else:\n        print (\"The sale amount is not profitable.\\n\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = actual_cost - sale_amount\n    if profit >= 0:\n        return \"has no loss and has no profit\"\n    else:\n        return \"has loss and no profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print('Profit and no loss')\n    elif actual_cost > sale_amount:\n        print('Loss and no profit')\n    else:\n        print('No profit and no loss')\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print('The transaction is loss and no profit')\n    elif actual_cost>sale_amount:\n        print('The transaction is profit and no loss')\n    else:\n        print('The transaction is loss and no profit')\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    WC = 35.74 + 0.6215*t + (0.4275*t - 35.75)*(v**0.16)\n    return math.floor(WC)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t_wc = (13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16)**0.5\n    return int(t_wc)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # v = float(input('Enter wind speed in km/h: '))\n    # t = float(input('Enter temperature in celsius: '))\n    print(int(round(35.74 + 0.6215*v - 35.75*t*(math.pow(10, -4)) + 0.4275*t*math.pow(10, -4)*v,0)))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a=math.sqrt((17.27*t)/(237.7+t))\n    b=(v**0.16)\n    c=a*b\n    wci=(13.12+0.6215*t+11.37*v**0.16)-(c*13.12/2.0)\n    return int(round(wci))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #return round(v**0.16 + (0.4 * t) -35.74,0)\n    return int(v**0.16 + (0.4 * t) -35.74)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215*t) - (11.37*math.pow(v,0.16)) + (0.3965*t*math.pow(v,0.16))\n    return math.ceil(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if 0<=t<=50 and 3<=v<=120:\n        return round((13.12 + (0.6215*t) - (11.37*v**0.16) + (0.3965*t*v**0.16))/1.8)\n    return False\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    wci = 13.12 + (0.6215 * t) - (11.37 * v ** 0.16) + (0.3965 * t * v ** 0.16)\n    return int(math.ceil(wci))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v > 3.0 or v < 0.0:\n        return \"Out of range\"\n    elif t < -15.0 or t > 41.0:\n        return \"Out of range\"\n    else:\n        return round(35.74 + 0.6215 * t + (0.4275 * t - 35.75) * (v ** 0.16),0)\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci=13.12 + 0.6215 * v - 11.37 * t + 0.3965 * t * math.pow(v,0.16) + 0.1645 * t * math.pow(v,0.16)\n    return round(wci)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    for sample_name in sample_names:\n        if sample_name[0] == 'r':\n            sample_names.remove(sample_name)\n    return sum(len(sample_name) for sample_name in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = ['Rafael', 'Bob', 'Xavier', 'Rafael', 'Bob', 'Cassandra', 'Vanessa']\n    return sum(sample_names[i][0].isupper() for i in range(len(sample_names)))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [i for i in sample_names if not i[0].islower()]\n    return sum(len(i) for i in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names_list = sample_names\n    \n    # Remove names that start with a lowercase letter\n    names_list = list(filter(lambda name: name[0].isupper(), names_list))\n    \n    # Sum the length of the remaining names\n    names_lengths = [len(name) for name in names_list]\n    names_sum = sum(names_lengths)\n    \n    return names_sum\n    \n    #Hint: define a new function inside the sample_nam function\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names=['abc', 'lmn', 'xyz']\n    for x in sample_names:\n        if x[0].islower():\n            sample_names.remove(x)\n    print(sample_names)\n    return sum(len(x) for x in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    new_names = [n for n in sample_names if not n.islower()]\n    return(len(''.join(new_names)))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = [x for x in sample_names if x.islower() == False]\n    length = 0\n    for x in sample_names:\n        length += len(x)\n    return length\n    \nsample_names = ['Hello', 'Goodbye', 'Wassup', 'hello', 'daddy', 'goodbye']\nprint(sample_names)\nprint(sample_names)\nprint(sample_nam(sample_names))\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lower_case_names = []\n    for name in sample_names:\n        if name[0].islower():\n            pass\n        else:\n            lower_case_names.append(name)\n    \n    print('The names that start with a lower case letter are:', lower_case_names)\n    \n    print('The names are now:', sample_names)\n    \n    sum_of_names = 0\n    for name in sample_names:\n        sum_of_names += len(name)\n    \n    print('The sum of the names are:', sum_of_names)\n    \n    return sum_of_names\n    \ndef open_file_lines(filename):\n    '''\n    Write a function to count the number of lines in a file.\n    '''\n    with open(filename) as file:\n        num_of_lines = sum(1 for line in file)\n        \n    return num_of_lines\n    \ndef open_file_words(filename):\n    '''\n    Write a function to count the number of words in a file.\n    '''\n    with open(filename) as file:\n        num_of_words = sum(len(line.split()) for line in file)\n        \n    return num_of_words\n    \ndef open_file_chars(filename):\n    '''\n    Write a function to count the number of characters in a file.\n    '''\n    with open(filename) as file:\n        num_of_chars = sum(len(line) for line in file)\n        \n    return num_of_chars\n    \ndef open_file_words_sum_of_chars(filename):\n    '''\n    Write a function to count the number of words in a file.\n    '''\n    with open(filename) as file:\n        num_of_words = sum(len(line.split()) for line in file)\n        \n    with open(filename) as file:\n        num_of_chars = sum(len(line) for line in file)\n    \n    return num_of_chars\n    \ndef open_file_count_words_per_line(filename):\n    '''\n    Write a function to count the number of words per line in a file.\n    '''\n    with open(filename) as file:\n        words_per_line = [len(line.split()) for line in file]\n        \n    return words_per_line\n    \ndef open_file_line_count_per_word(filename):\n    '''\n    Write a function to count the number of lines per word in a file.\n    '''\n    with open(filename) as file:\n        lines_per_word = [len(line.split()) for line in file]\n        \n    return lines_per_word\n    \ndef open_file_unique_chars(filename):\n    '''\n    Write a function to count the number of unique characters in a file.\n    '''\n    with open(filename) as file:\n        unique_chars = []\n        for line in file:\n            for char in line:\n                if char not in unique_chars:\n                    unique_chars.append(char)\n                    \n    return unique_chars\n    \ndef open_file_unique_chars_dict(filename):\n    '''\n    Write a function to count the number of unique characters in a file.\n    '''\n    with open(filename) as file:\n        unique_chars = {}\n        for line in file:\n            for char in line:\n                if char not in unique_chars:\n                    unique_chars[char] = 1\n                else:\n                    unique_chars[char] += 1\n                    \n    return unique_chars\n    \ndef open_file_unique_chars_count(filename):\n    '''\n    Write a function to count the number of unique characters in a file.\n    '''\n    with open(filename) as file:\n        unique_chars = []\n        for line in file:\n            for char in line:\n                if char not in unique_chars:\n                    unique_chars.append(char)\n                    \n    return len(unique_chars)\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return [name for name in sample_names if name.islower()]\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    assert len(sample_names) > 0\n    return sum([len(n.strip()) for n in sample_names if not n[0].islower()])\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = ''\n    for item in items:\n        result += re.sub(r'\\((.*?)\\)', '', item)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i, item in enumerate(items):\n        items[i] = re.sub(r'\\(.*?\\)', '', item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    n = ''.join(items)\n    return re.sub(\"\\(.*?\\)\", \"\", n)\ndef remove_spaces(items):\n    '''\n    Write a function to remove all the spaces from a string.\n    '''\n    n = ''.join(items)\n    return re.sub(\" \", \"\", n)\ndef replace_whitespaces(items):\n    '''\n    Write a function to remove all the whitespaces from a string.\n    '''\n    n = ''.join(items)\n    return re.sub(\"\\s\", \"\", n)\ndef single_spaces(items):\n    '''\n    Write a function to return the length of a string without spaces.\n    '''\n    n = ''.join(items)\n    return len(n.split(\" \"))\ndef no_vowels(items):\n    '''\n    Write a function to return a string in lower case, where all vowels have been removed.\n    '''\n    return re.sub(\"[aeiou]\", \"\", items.lower())\ndef list_to_sentence(items):\n    '''\n    Write a function to return a string in title case, where each word is capitalized.\n    '''\n    n =''.join(items)\n    return n.title()\ndef remove_punctuation(items):\n    '''\n    Write a function to return a string with all the punctuation removed.\n    '''\n    n = ''.join(items)\n    return re.sub(\"[^\\w\\s]\", \"\", n)\ndef convert_to_underscore(items):\n    '''\n    Write a function to convert a string to a filename.\n    '''\n    n = ''.join(items)\n    n = re.sub(\" \", \"_\", n)\n    n = re.sub(\"[^a-zA-Z0-9_]\", \"\", n)\n    return n\ndef find_double_letters(items):\n    '''\n    Write a function to return the position of the first double letters in a word.\n    '''\n    n = ''.join(items)\n    return [i.start() for i in re.finditer('(?=.*\\w)(?=.*[a-z])(?=.*[A-Z])', n)]\ndef longest_word(items):\n    '''\n    Write a function to return the longest word in a sentence.\n    '''\n    n = ''.join(items)\n    n = n.split(\" \")\n    return max(n, key=len)\ndef capitalize_title(items):\n    '''\n    Write a function to capitalize the first letter of the first word in a string.\n    '''\n    return items.title()\ndef convert_to_sentence(items):\n    '''\n    Write a function to return a string where the first letter in each word is capitalized.\n    '''\n    return''.join(list(map(str.capitalize, items.split(' '))))\ndef find_numbers(items):\n    '''\n    Write a function to return a list of all the numbers in a string.\n    '''\n    return re.findall('[0-9]', items)\ndef word_squares(items):\n    '''\n    Write a function to return the word squares of a string.\n    '''\n    n = ''.join(items)\n    n = n.split(\" \")\n    n = list(map(str.capitalize, n))\n    return list(map(lambda x: x * x, n))\ndef zero_pad_numbers(items):\n    '''\n    Write a function to return a string where all the numbers have been zero padded.\n    '''\n    return re.sub('(?<!^)(?=[0-9])', '0', items)\ndef remove_duplicate_letters(items):\n    '''\n    Write a function to return a string with all duplicate letters removed.\n    '''\n    return re.sub(\"(.)\\\\1+\", \"\\\\1\", items)\ndef remove_non_ascii(items):\n    '''\n    Write a function to return a string with all non ASCII characters removed.\n    '''\n    return re.sub('[^\\x00-\\x7F]+','', items)\ndef check_if_palindrome(items):\n    '''\n    Write a function to return True if a given string is a palindrome, else False.\n    '''\n    return items == items[::-1]\ndef merge_the_tools(items, k):\n    '''\n    Write a function that, when passed a string and a non-negative integer k, splits the string into k\n    substrings where each substring is k characters long and contains only unique characters.\n    '''\n    n = len(items) // k\n    m = len(items) % k\n    if m == 0:\n        n = n\n    else:\n        n = n + 1\n    n = int(n)\n    lst = []\n    for i in range(n):\n        lst.append(items[k*i:k*(i+1)])\n    return lst\ndef find_all_indexes(items, search_term):\n    '''\n    Write a function to return the indexes of a given search term in a given string.\n    '''\n    n = ''.join(items)\n    return [i.start() for i in re.finditer(search_term, n)]\ndef find_all_indexes_2(items, search_term):\n    '''\n    Write a function to return the indexes of a given search term in a given string.\n    '''\n    n = ''.join(items)\n    return [i.start() for i in re.finditer(search_term, n)]\ndef find_all_indexes_3(items, search_term):\n    '''\n    Write a function to return the indexes of a given search term in a given string.\n    '''\n    n = ''.join(items)\n    return [i.start() for i in re.finditer(re.escape(search_term), n)]\ndef find_all_indexes_4(items, search_term):\n    '''\n    Write a function to return the indexes of a given search term in a given string.\n    '''\n    n = ''.join(items)\n    return [i.start() for i in re.finditer(search_term, n)]\ndef remove_all_occurrences(items, search_term):\n    '''\n    Write a function to return a string with all occurrences of a given substring removed.\n    '''\n    return re.sub(search_term, \"\", items, 0)\ndef string_between_string(items, first, second):\n    '''\n    Write a function to return a string which is between two substrings.\n    '''\n    n = ''.join(items)\n    f = n.index(first)\n    s = n.index(second)\n    return n[f+len(first):s]\ndef convert_string_to_list(items):\n    '''\n    Write a function to return a list of words from a string.\n    '''\n    return items.split(\" \")\ndef convert_list_to_string(items):\n    '''\n    Write a function to return a string from a list of words.\n    '''\n    return''.join(items)\ndef is_pangram(items):\n    '''\n    Write a function to return True if a string is a pangram (contains every letter of the alphabet), else return False.\n    '''\n    return set(items.lower()) == set('abcdefghijklmnopqrstuvwxyz')\ndef is_panagram(items):\n    '''\n    Write a function to return True if a string is a panagram (contains all the letters of the alphabet), else return False.\n    '''\n    return set(items.lower()) == set('abcdefghijklmnopqrstuvwxyz')\ndef find_substring(items, word):\n    '''\n    Write a function to return the position of a substring in a string.\n    '''\n    return [i.start() for i in re.finditer(word, items)]\ndef find_substring_2(items, word):\n    '''\n    Write a function to return the position of a substring in a string.\n    '''\n    return [i.start() for i in re.finditer(wor"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\(.*?\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = \"\".join(items.split(\"(\")).split(\")\")\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    \n    parenthesis = re.compile('\\([^)]*\\)')\n    string = parenthesis.findall(items)\n    print(string)\n    return parenthesis.sub('', items)\n    \n    \ndef clean_punctuation(words):\n    '''\n    Write a function to remove the punctuations from a string.\n    '''\n    \n    \n    punctuation = re.compile('[^\\w\\s]')\n    return punctuation.sub(' ', words)\n    \n    \ndef remove_non_ascii(words):\n    '''\n    Write a function to remove the non-ASCII characters from a string.\n    '''\n    \n    return re.sub('[^\\x00-\\x7F]', '', words)\n    \n    \ndef is_valid_email(items):\n    '''\n    Write a function to check whether an input string is a valid email address or not.\n    '''\n    \n    # Define a regex to check for valid email addresses\n    \n    email = re.compile('[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9_\\-\\.]+')\n    return email.match(items)\n    \n    \ndef is_valid_url(items):\n    '''\n    Write a function to check whether an input string is a valid URL or not.\n    '''\n    \n    url = re.compile('(http|https)://[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z]{2,3}')\n    return url.match(items)\n    \n    \ndef is_valid_ip_address(items):\n    '''\n    Write a function to check whether an input string is a valid IP address or not.\n    '''\n    \n    ip = re.compile('\\d{,3}\\.\\d{,3}\\.\\d{,3}\\.\\d{,3}')\n    return ip.match(items)\n    \n    \ndef is_valid_date(items):\n    '''\n    Write a function to check whether an input string is a valid date or not.\n    '''\n    \n    date = re.compile('\\d{,2}/\\d{,2}/\\d{4}')\n    return date.match(items)\n    \n    \ndef is_valid_phone_number(items):\n    '''\n    Write a function to check whether an input string is a valid phone number or not.\n    '''\n    \n    phone = re.compile('[0-9]{3}-[0-9]{3}-[0-9]{4}')\n    return phone.match(items)\n    \n    \ndef get_twitter_handle(items):\n    '''\n    Write a function to extract the twitter handle of a tweet.\n    '''\n    \n    twitter_handle = re.compile('(@[a-zA-Z0-9_]+)')\n    return twitter_handle.findall(items)\n    \n    \ndef get_tweet_language(items):\n    '''\n    Write a function to extract the tweet language from a tweet.\n    '''\n    \n    return items[-1]\n    \n    \ndef get_tweet_language(items):\n    '''\n    Write a function to extract the tweet language from a tweet.\n    '''\n    \n    return items[-1]\n    \n    \ndef get_tweet_language(items):\n    '''\n    Write a function to extract the tweet language from a tweet.\n    '''\n    \n    return items[-1]\n    \n    \ndef get_mentions(items):\n    '''\n    Write a function to extract the user mentions of a tweet.\n    '''\n    \n    mentions = re.compile('(@[a-zA-Z0-9_]+)')\n    return mentions.findall(items)\n    \n    \ndef get_hashtags(items):\n    '''\n    Write a function to extract the hashtags from a tweet.\n    '''\n    \n    hashtags = re.compile('(#[a-zA-Z0-9_]+)')\n    return hashtags.findall(items)\n    \n    \ndef get_tweet_content(items):\n    '''\n    Write a function to extract the tweet content from a tweet.\n    '''\n    \n    tweet_content = re.compile('(.*)\\n')\n    return tweet_content.findall(items)\n    \n    \ndef get_tweet_content(items):\n    '''\n    Write a function to extract the tweet content from a tweet.\n    '''\n    \n    tweet_content = re.compile('(.*)\\n')\n    return tweet_content.findall(items)\n    \n    \ndef get_tweet_content(items):\n    '''\n    Write a function to extract the tweet content from a tweet.\n    '''\n    \n    tweet_content = re.compile('(.*)\\n')\n    return tweet_content.findall(items)\n    \n    \ndef get_tweet_content(items):\n    '''\n    Write a function to extract the tweet content from a tweet.\n    '''\n    \n    tweet_content = re.compile('(.*)\\n')\n    return tweet_content.findall(items)\n    \n    \ndef get_tweet_content(items):\n    '''\n    Write a function to extract the tweet content from a tweet.\n    '''\n    \n    tweet_content = re.compile('(.*)\\n')\n    return tweet_content.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{10}')\n    return user_id.findall(items)\n    \n    \ndef get_user_id(items):\n    '''\n    Write a function to extract the user id from a tweet.\n    '''\n    \n    user_id = re.compile('(?<=user_id=)[a-zA-Z0-9]{1"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_list = []\n    for item in items:\n        item = re.sub(\"[\\(\\[].*?[\\)\\]]\", \"\", item)\n        new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Do not return anything, modify s in-place instead.\n    # Return a list of words\n    s = items.replace('(', '').replace(')', '')\n    return s.split(' ')\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'\\([^()]*\\)')\n    items = regex.findall(items)\n    for item in items:\n        items = items.replace(item, '')\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = items.replace('(','')\n    items = items.replace(')','')\n    items = items.replace('{','')\n    items = items.replace('}','')\n    items = items.replace('[','')\n    items = items.replace(']','')\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int((n + 1) ** 2 - n)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1: \n        print('Invalid Input')\n    else: \n        # Nonagonal numbers in a sequence with pattern n(n+1) / 2\n        # Using the pattern, we can find nth nonagonal number in O(1) time\n        return n * (n + 1) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return 0\n    else:\n        return n + is_nonagonal(n-1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (2*n) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    assert(n >= 0)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return int(n*(n+1)/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    #base case: n=0\n    if n==0:\n        return 0\n    #base case: n=1\n    if n==1:\n        return 1\n    else:\n        return n*is_nonagonal(n-1) + is_nonagonal(n-2)\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (n - 1) + 1) ** 2 + 1\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = r\"[zZ]\\w+[zZ]$\"\n    return re.search(regex, text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # text = \"wordz!\"\n    # text = \"wordz!!\"\n    # text = \"wordz!!!\"\n    # text = \"wordz!wordz!!\"\n    # text = \"wordz!\"\n    # text = \"zwordz!\"\n    # text = \"zzwordz!!\"\n    # text = \"zzwordz!wordz!!\"\n    # text = \"zzwordz!\"\n    # text = \"wordz.wordz!!!\"\n    # text = \"wordz.wordz!!!\"\n    # text = \"wordz.wordz!!!\"\n    # text = \"wordz.wordz!wordz!!!\"\n    # text = \"wordz.wordz\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'^[^z]z[^z]$|z[^z]$|^[^z]z|z$', text)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    r1=re.compile(r'\\bz\\b')\n    for word in re.findall(r1,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_start = re.search('(^[z]+)|(^[z]$)', text)\n    z_end = re.search('([z]+)$', text)\n    z_middle = re.search('z+', text)\n    if z_start and z_middle:\n        print(True)\n    elif z_start and not z_middle:\n        print(False)\n    elif not z_start and z_middle:\n        print(True)\n    elif not z_start and not z_middle:\n        print(False)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'(z.*?z)')\n    matches = regex.findall(text)\n    return matches\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match(\"z*\",text):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_pattern = r'z'\n    pattern = re.compile(z_pattern)\n    matches = pattern.findall(text)\n    return matches\n    \ndef text_match_wordz_start_or_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_pattern = r'^z$|z$'\n    pattern = re.compile(z_pattern)\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(z..)[a-zA-z]*z'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = r\"\\bz\\b\"\n    pattern = re.compile(word)\n    result = pattern.findall(text)\n    if len(result) == 0:\n        return False\n    else:\n        return True\n        \nprint(text_match_wordz_middle(\"The zebra sat on the zebra.\"))\nprint(text_match_wordz_middle(\"The zebra was in the zebra zebra zebra zebra zebra zebra zebra zebra.\"))\nprint(text_match_wordz_middle(\"The zebra sat on the zebra.\"))\nprint(text_match_wordz_middle(\"The zebra was in the zebra zebra zebra zebra zebra zebra zebra zebra.\"))\nprint(text_match_wordz_middle(\"The elephant sat on the elephant.\"))\nprint(text_match_wordz_middle(\"The elephant was in the elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephant elephan"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    n = len(arr)\n    if(k < 1):\n        return \"Invalid input\"\n    if(k > n):\n        return \"Invalid input\"\n    temp = 0\n    i = 0\n    while(i < k):\n        temp = arr[i]\n        arr[i] = arr[n - 1]\n        arr[n - 1] = temp\n        i += 1\n        n -= 1\n    return arr\n    \ndef reverse_Array_Recursive(input, k, i, n): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if(k < 1):\n        return \"Invalid input\"\n    if(k > n):\n        return \"Invalid input\"\n    if(i < k):\n        temp = input[i]\n        input[i] = input[n - 1]\n        input[n - 1] = temp\n        reverse_Array_Recursive(input, k, i + 1, n - 1)\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    array = [i for i in range(0, len(input))]\n    if k > len(input):\n        k = len(input)\n    for i in range(0, k//2):\n        temp = array[i]\n        array[i] = array[len(input) - i - 1]\n        array[len(input) - i - 1] = temp\n    return array\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k: \n        k = len(input)\n    return input[:k][::-1] + input[k:][::-1]\n    \n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input)<=k:\n        return input\n    if k>0:\n        input[:k] = reversed(input[:k])\n        reverse_Array_Upto_K(input[k:], k)\n    return input\n    \ndef reverse_Array_Upto_K_opt(input, k): \n    '''\n    Write a python function to reverse an array upto a given position using slicing.\n    '''\n    if len(input)<=k:\n        return input\n    if k>0:\n        input[:k] = reversed(input[:k])\n    return input[k:]\n    \ndef reverse_string(input): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return input[::-1]\n    \ndef reverse_string_using_stack(input): \n    '''\n    Write a python function to reverse a string using stack data structure.\n    '''\n    if len(input)<=1:\n        return input\n    stack = []\n    for letter in input:\n        stack.append(letter)\n    reverse = []\n    while stack:\n        reverse.append(stack.pop())\n    return reverse\n    \ndef reverse_string_using_recursion(input): \n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input)<=1:\n        return input\n    return reverse_string_using_recursion(input[1:])+input[0]\n    \ndef reverse_string_using_recursion_and_append_operator(input): \n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input)<=1:\n        return input\n    return input[-1]+reverse_string_using_recursion_and_append_operator(input[:-1])\n    \n    \ndef reverse_string_using_recursion_and_use_while(input): \n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input)<=1:\n        return input\n    reversed_string = ''\n    index = len(input)\n    while index>0:\n        reversed_string += input[index-1]\n        index -= 1\n    return reversed_string\n    \ndef reverse_string_using_recursion_and_use_for(input): \n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input)<=1:\n        return input\n    return input[-1]+reverse_string_using_recursion_and_use_for(input[:-1])\n    \n    \ndef reverse_string_using_recursion_and_use_slice_op(input): \n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input)<=1:\n        return input\n    return input[-1]+reverse_string_using_recursion_and_use_slice_op(input[:-1])\n    \n    \ndef reverse_string_using_recursion_and_use_slice_op_and_while(input): \n    '''\n    Write a python function to reverse a string using recursion.\n    '''\n    if len(input)<=1:\n        return input\n    while index>0:\n        input = input[:-1]\n        index -= 1\n    return input\n    \n    \ndef main():\n    print(reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 2))\n    print(reverse_string(\"siddharth\"))\n    print(reverse_string_using_stack(\"siddharth\"))\n    print(reverse_string_using_recursion(\"siddharth\"))\n    print(reverse_string_using_recursion_and_append_operator(\"siddharth\"))\n    print(reverse_string_using_recursion_and_use_while(\"siddharth\"))\n    print(reverse_string_using_recursion_and_use_for(\"siddharth\"))\n    print(reverse_string_using_recursion_and_use_slice_op(\"siddharth\"))\n    print(reverse_string_using_recursion_and_use_slice_op_and_while(\"siddharth\"))\n    \nmain()"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input_length = len(input)\n    start_index = 0\n    end_index = input_length - 1\n    while(start_index < end_index and start_index < k):\n        temp = input[start_index]\n        input[start_index] = input[end_index]\n        input[end_index] = temp\n        start_index += 1\n        end_index -= 1\n    if k <= input_length:\n        return input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    input = list(input)\n    new_input = []\n    for i in range(k):\n        new_input.append(input[i])\n    new_input.reverse()\n    for i in range(k, len(input)):\n        new_input.append(input[i])\n    return new_input\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    size = len(input)\n    n = k - 1\n    start = 0\n    end = size\n    while n!= start:\n        if n < end:\n            n = n + 1\n            end = end - 1\n        elif n > end:\n            start = start + 1\n            end = size\n        else:\n            break\n    print(\"Reversing from 0 to {}\".format(k-1))\n    print(input[start:end])\n    print(\"Reversing from {} to {}\".format(k, size))\n    print(input[k:size])\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    new_arr = []\n    for i in range(0, k+1):\n        new_arr.append(input[k-i])\n    return new_arr\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # A reverse function of a given list\n    # and prints the given list \n    def reverse_Array_Upto_K(input, k): \n        return input[:k][::-1] + input[k:] \n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = list(input) \n    for i in range(k):\n        output.append(input[k-i-1])\n    return output\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Your code here\n    for k,v in test_dict.items():\n        test_tup += (v,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #return tuple(test_tup) + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #TODO: write code here\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    #Your Code Here\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Directions: right, down\n    n = len(cost)\n    #print(n)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i == j == 0:\n                continue\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    return (dp[-1][-1] + dp[0][0]) / (n * n)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def recursion(cost, row, col, path, avg):\n        if col >= len(cost[0]):\n            if row == len(cost):\n                return (path, avg)\n            avg = max(avg, cost[row][col] / (row - path[-1][0] + 1))\n            return recursion(cost, row + 1, 0, path + [(row, col)], avg)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    path = [[1,0],[0,1]]\n    \n    for i in range(2, n):\n        x = cost[i][0] + min(path[i-1][0], path[i-1][1])\n        y = cost[i][1] + min(path[i-1][0], path[i-1][1])\n        path.append([x, y])\n        \n    return min(path[n-1])\n    \nif __name__ == '__main__':\n    # cost = [[1, 2, 3], [4, 8, 2], [1, 5, 3]]\n    # cost = [[7, 3, 1], [5, 8, 1], [2, 7, 1]]\n    cost = [[1, 3, 1], [6, 5, 1], [7, 4, 1]]\n    # cost = [[5, 7, 5], [6, 7, 5], [7, 8, 5]]\n    # cost = [[7, 1, 8], [7, 1, 8], [7, 1, 8]]\n    # cost = [[7, 1, 8], [7, 1, 8], [7, 1, 8]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], [1, 7, 5]]\n    # cost = [[1, 7, 5], [1, 7, 5], ["
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    #print(n)\n    t = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                t[i][j] = cost[i][j]\n            elif i == 0:\n                t[i][j] = t[i][j-1] + cost[i][j]\n            elif j == 0:\n                t[i][j] = t[i-1][j] + cost[i][j]\n            else:\n                t[i][j] = max(t[i][j-1], t[i-1][j]) + cost[i][j]\n    #print(t)\n    return (t[n-1][n-1]) / (n*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    R = len(cost)\n    C = len(cost[0])\n    dp = [[0 for _ in range(C)] for _ in range(R)]\n    dp[0][0] = cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    row, col = len(cost), len(cost[0])\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if cost == [] or cost == [[]]:\n        return -1\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1,n):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    for i in range(1,n):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = max(dp[i-1][j],dp[i][j-1]) + cost[i][j]\n    return dp[n-1][n-1]/(n*n)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    def getNeighbours(i,j,n):\n        neighbours = []\n        if i+1 < n:\n            neighbours.append([i+1,j])\n        if j+1 < n:\n            neighbours.append([i,j+1])\n        return neighbours\n    def check(cost,n,i,j,visited,average_sum,total_cost):\n        if i == n-1 and j == n-1:\n            if average_sum > total_cost:\n                return [True,average_sum,total_cost]\n        else:\n            for neighbour in getNeighbours(i,j,n):\n                if neighbour not in visited:\n                    visited.append(neighbour)\n                    if i == 0 and j == 0:\n                        average_sum += cost[neighbour[0]][neighbour[1]]\n                        total_cost += cost[neighbour[0]][neighbour[1]]\n                    else:\n                        average_sum += cost[neighbour[0]][neighbour[1]]\n                        total_cost += cost[neighbour[0]][neighbour[1]]\n                    x = check(cost,n,neighbour[0],neighbour[1],visited,average_sum,total_cost)\n                    if x[0] == True:\n                        return x\n                    else:\n                        average_sum -= cost[neighbour[0]][neighbour[1]]\n                        total_cost -= cost[neighbour[0]][neighbour[1]]\n                    visited.remove(neighbour)\n            return [False,average_sum,total_cost]\n    n = len(cost)\n    if n == 0:\n        return None\n    if n == 1:\n        return cost[0][0]\n    if n == 2:\n        return max(cost[0][0],cost[1][0])\n    visited = [[0,0]]\n    average_sum = 0\n    total_cost = 0\n    [found,average_sum,total_cost] = check(cost,n,0,0,visited,average_sum,total_cost)\n    if found == True:\n        return (average_sum/total_cost)\n    else:\n        return (0)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    size=len(cost)\n    #print(size)\n    #create an NxN grid, the initial values in every row and column should be the cost of that particular cell\n    grid=[]\n    #initialise with 0\n    for i in range(size):\n        grid.append([0]*size)\n    #print(grid)\n"
    },
    {
        "number": 721,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    cost = [[0 for i in range(cols)] for j in range(rows)]\n    # dp[i][j] is the max average of path ending at [i][j]\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {k: v for k, v in students.items() if v[0] >= h and v[1] >= w}\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #TODO: write code...\n    output={}\n    for key,value in students.items():\n        if value[0]>=h and value[1]>=w:\n            output[key]=value\n    return output\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    for student, weight_height in students.items():\n        if weight_height[0] < h or weight_height[1] < w:\n            del students[student]\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered = dict()\n    for student,info in students.items():\n        if info[0] >= h and info[1] >= w:\n            filtered[student] = info\n    return filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    return {k:v for k,v in students.items() if v[0] > h and v[1] > w}\n    \n    \n    \n    \ndef count_students(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and number of students of the group as a value.\n    '''\n    \n    return {k:len(v) for k,v in students.items()}\n    \n    \n    \n    \ndef get_average_student_height(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (average_height, number_of_students) as a value. The average height is a float of average of student heights.\n    '''\n    \n    return {k:(sum(v[0] for v in students.values())/len(students),len(students)) for k,v in students.items()}\n    \n    \n    \n    \ndef get_students_with_most_books(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (number_of_books, average_height) as a value. The average height is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in students.items() if len(v)>1}\n    \n    \n    \n    \ndef get_students_with_least_books(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (number_of_books, average_height) as a value. The average height is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in students.items() if len(v)<=1}\n    \n    \n    \n    \ndef add_one_to_student_scores(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:(v[0],v[1],v[0]+1) for k,v in students.items()}\n    \n    \n    \n    \ndef add_two_to_student_scores(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:(v[0],v[1],v[0]+2) for k,v in students.items()}\n    \n    \n    \n    \ndef remove_students_above_average_weight(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:(v[0],v[1],v[0]) for k,v in students.items() if v[1]<=18}\n    \n    \n    \n    \ndef remove_students_below_average_height(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:(v[0],v[1],v[0]) for k,v in students.items() if v[0]>=45}\n    \n    \n    \n    \ndef get_the_students_having_the_lowest_student_scores(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in sorted(students.items(), key=lambda x:x[1][2])}\n    \n    \n    \n    \ndef get_the_students_having_the_highest_student_scores(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in sorted(students.items(), key=lambda x:x[1][2], reverse=True)}\n    \n    \n    \n    \ndef get_students_with_top_2_books(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in sorted(students.items(), key=lambda x:len(x[1])) if len(x[1])>1}\n    \n    \n    \n    \ndef get_students_with_top_3_books(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in sorted(students.items(), key=lambda x:len(x[1])) if len(x[1])>2}\n    \n    \n    \n    \ndef get_students_with_top_4_books(students):\n    '''\n    The input is given as a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value. Write a function that returns a dictionary with a student name as a key and a tuple (student_height, student_weight, student_score) as a value. The student score is a float of average of student heights.\n    '''\n    \n    return {k:v for k,v in sorted(students.items(), key=lambda x:len(x[1])) if len(x[1])>3}\n    \n    \n    \n    \ndef get_students_with_top_5_books(students):\n    '''\n    The input is given as a dictionar"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_dict = {}\n    for key in students.keys():\n        if students[key][0] > h and students[key][1] > w:\n            filtered_dict[key] = students[key]\n    print(\"The filtered dictionary is - \",filtered_dict)\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    return_dic = {}\n    for student in students:\n        if(students[student][0]>=h and students[student][1]>=w):\n            return_dic[student]=students[student]\n    return return_dic\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h = h - 0.5\n    w = w - 2.5\n    students_filtered = {}\n    for s in students:\n        if students[s][0] >= h and students[s][1] >= w:\n            students_filtered[s] = students[s]\n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    min_h = h\n    min_w = w\n"
    },
    {
        "number": 722,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    h_filt=[]\n    w_filt=[]\n    for i,v in students.items():\n        if v[0]>=h and v[1]>=w:\n            h_filt.append(i)\n            w_filt.append(v[0])\n    return h_filt,w_filt\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    num_pair = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            num_pair += 1\n    return num_pair\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    i = 0\n    count = 0\n    while i < len(nums1):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum(map(eq, nums1, nums2))\n    \n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    return len([i for i in range(len(nums1)) if eq(nums1[i], nums2[i])])\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    length = len(nums1)\n    count = 0\n    for i in range(length):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 'Input lists must have the same length'\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_index = 0\n    for num1 in nums1:\n        for num2 in nums2:\n            if num1 == num2:\n                same_index += 1\n    return same_index\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # We can use a recursive approach to solve this problem.\n    # Since power can be quite large, we don't want to use a for loop.\n    # Instead, we want to use a while loop.\n    # So, in the first iteration, we initialize variable total as base.\n    # The loop condition is base > 0.\n    # So, if we get a base that is not a positive integer, we break the loop.\n    # The value of the variable total is then returned.\n    total = 0\n    if base <= 0:\n        return total\n    total = base\n    while base > 0:\n        total += base\n        base -= 1\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum(map(int, str(base**power)))\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for digit in str(base**power):\n        result += int(digit)\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) ** power for i in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(digit)**power for digit in str(base)])\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    if base.isdigit() and power.isdigit():\n        base = int(base)\n        power = int(power)\n        result = sum([int(x) for x in str(base ** power)])\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # some examples\n    # power_base_sum(12345, 6)\n    # \u279e 31\n    # power_base_sum(1234, 10)\n    # \u279e 431\n    # power_base_sum(6, 7)\n    # \u279e 18\n    # power_base_sum(7, 7)\n    # \u279e 49\n    # power_base_sum(1000, 4)\n    # \u279e 9\n    # power_base_sum(1000, 5)\n    # \u279e 9\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(0, power+1):\n        sum += base**i\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    x = base**power\n    s = str(x)\n    total = 0\n    for i in s:\n        total += int(i)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base ** power)])\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def return_quotation(text1):\n        '''\n        This function extracts values between quotation marks \" \" of the given string and returns a list of all the values.\n        '''\n        string = text1\n        text = re.findall('[^\"]*\"', string)\n        return text\n    text = return_quotation(text1)\n    #print(text)\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    l = []\n    p = re.compile(r'\\\"(.*?)\\\"')\n    l = p.findall(text1)\n    return l\n    #print(l)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(\"Enter the text :\")\n    text1=input()\n    #search for any double quotation mark and replace with double quotation mark\n    text1=re.sub(r'\\\"','\"',text1)\n    #use the split function to split the string at the double quotation marks\n    #and return a list of words\n    list1=text1.split('\"')\n    #print list1\n    return list1\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # text1 = \"Hi, I'm a Software Developer. I love building awesome, reliable, and easy-to-use applications.\\\"Cool, I'm not a \\\"software engineer\\\" or \\\"programmer\\\".\"\n    # results = re.findall(r'\\\"[^\\\"]+\\\"', text1)\n    # print(results)\n    # return results\n    return re.findall(r'\\\"[^\\\"]+\\\"', text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(\"\\\"(.+?)\\\"\",text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = re.findall('\".+?\"',text1)\n    #print(text2)\n    return text2\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quote = re.findall(r'\".+?\"', text1)\n    if len(quote) == 0:\n        return False\n    for i in range(len(quote)):\n        if len(quote[i]) > 1:\n            quote[i] = quote[i][1:-1]\n        else:\n            quote[i] = quote[i][1:]\n    return quote\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1.split('\"')\n    return text\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = re.findall(r'\"([^\"]*)\"',text1)\n    return text1\n"
    },
    {
        "number": 725,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall(r'\\\"(.+?)\\\"', text1)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_list = list(test_tup)\n    t_list[0] = 0\n    for i in range(0,len(t_list)-1):\n        t_list[i+1] = t_list[i] * t_list[i+1]\n    return tuple(t_list)\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            new_tup += (test_tup[i],)\n        else:\n            new_tup += (test_tup[i]*test_tup[i+1],)\n    return new_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tuple = ()\n    for i in range(len(test_tup) - 1):\n        tuple = tuple + (test_tup[i] * test_tup[i + 1],)\n    return tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(j*k for j,k in zip(test_tup[:-1],test_tup[1:]))\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    test_tup_as_list = list(test_tup)\n    test_tup_as_list.append(0)\n    mult = 1\n    for x in range(len(test_tup) - 1):\n        mult *= test_tup_as_list[x]\n    return tuple(test_tup_as_list), tuple(list(test_tup_as_list[:-1]) + [mult])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(0, len(test_tup) - 1):\n        res += (test_tup[i] * test_tup[i + 1],)\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output_tup = ()\n    for i in range(len(test_tup) - 1):\n        output_tup += (test_tup[i] * test_tup[i + 1],)\n    return output_tup\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i + 1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple([x * y for x, y in zip(test_tup, test_tup[1:])])\n"
    },
    {
        "number": 726,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup) - 1):\n        result_tup += (test_tup[i] * test_tup[i + 1],)\n    result_tup += (test_tup[-1],)\n    return result_tup\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] += lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    for i in range(len(lst1)):\n        lst1[i] = lst1[i] + lst2[i]\n    return lst1\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i]+lst2[i])\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(0,len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return list(map(sum, zip(lst1,lst2)))\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]\n"
    },
    {
        "number": 728,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list=[]\n    i=0\n    while i<len(lst1):\n        new_list.append(lst1[i]+lst2[i])\n        i+=1\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    #nums.sort()\n    for k, g in groupby(nums):\n        print(k, list(g))\n    \n    return 'no consecutive duplicates'\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(j) for i, j in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for i, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums)]\nnums = [0,0,1,1,1,2,2,3,3,4]\nprint(consecutive_duplicates(nums))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    dups = set()\n    for k, g in groupby(nums):\n        if k in dups:\n            continue\n        else:\n            dups.add(k)\n    return list(dups)\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for k, g in groupby(nums):\n        print(k, list(g))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums)]\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    list_len = len(nums)\n    #print(list_len)\n    if list_len < 2:\n        return list_len\n    index = 0\n    while index < (list_len-1):\n        if nums[index] == nums[index+1]:\n            nums.pop(index)\n            list_len -= 1\n            continue\n        index += 1\n    return list_len\nprint(consecutive_duplicates([1,1,1,2,2,3,3]))\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_list = []\n    for item in nums:\n        if not new_list or item!= new_list[-1]:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 730,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # new_list = [list(g) for k, g in groupby(nums)]\n    # print(new_list)\n    # return new_list\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 1\n    return list(d.keys())\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #conversion from meters to feet\n    r = r/3.2808\n    h = h/3.2808\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Define a function to calculate the lateral surface area of a cone\n    def lateral_surface_area(r,h):\n        # Find the surface area of the lateral base\n        lateral_base_surface_area = math.pi * (r**2)\n        # Find the lateral surface area of the cone\n        lateral_surface_area = lateral_base_surface_area + 2 * math.pi * r * (h/3)\n        # Return the lateral surface area of the cone\n        return lateral_surface_area\n    return lateral_surface_area(r,h)\nlateral_surface_area = lateralsurface_cone(3,5)\nprint(lateral_surface_area)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if r == 0:\n        return 0\n    return math.pi*r*r + math.pi*r*(r+h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return ((3*r*h)/(4*math.pi))\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    return (math.pi*r**2*h)\n    \ndef volume_of_sphere(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    return (4/3)*(math.pi*r**3)\n    \ndef volume_of_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder given radius r and the height h.\n    '''\n    return (math.pi*r**2*h)\n    \ndef volume_of_cone(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    return (1/3)*(math.pi*r**2*h)\n    \ndef area_of_rectangle(l,b):\n    '''\n    Write a function to find the area of a rectangle given the length l and breadth b.\n    '''\n    return (l*b)\n    \ndef area_of_triangle(l,b):\n    '''\n    Write a function to find the area of a triangle given the length l and breadth b.\n    '''\n    return (1/2)*l*b\n    \ndef area_of_circle(r):\n    '''\n    Write a function to find the area of a circle given radius r.\n    '''\n    return (math.pi*r**2)\n    \ndef area_of_parallelogram(l,b):\n    '''\n    Write a function to find the area of a parallelogram given the length l and breadth b.\n    '''\n    return (l*b)\n    \ndef area_of_trapezium(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezium given the length of its base and side lengths and its height.\n    '''\n    return ((l1+l2)/2)*h\n    \ndef area_of_regular_polygon(n,l):\n    '''\n    Write a function to find the area of a regular polygon given the number of sides n and the length of its side l.\n    '''\n    return (n*l/2)*(1+(math.tan(math.pi/n))**2)\n    \ndef area_of_square_pyramid(l,h):\n    '''\n    Write a function to find the area of a square pyramid given the length of its base and the height.\n    '''\n    return ((l**2)*h)/3\n    \ndef area_of_rectangular_pyramid(l,w,h):\n    '''\n    Write a function to find the area of a rectangular pyramid given the length, width, and height of the base.\n    '''\n    return ((l*w)*h)/3\n    \ndef area_of_triangular_pyramid(l,w,h):\n    '''\n    Write a function to find the area of a triangular pyramid given the length, width, and height of the base.\n    '''\n    return ((l*w)/2)*h\n    \ndef area_of_rhombus(l,h):\n    '''\n    Write a function to find the area of a rhombus given the length of its two bases and the height of its base.\n    '''\n    return (l*h)\n    \ndef area_of_kite(r1,r2):\n    '''\n    Write a function to find the area of a kite given the radius of its two bases.\n    '''\n    return (math.pi*r1*r2)\n    \ndef area_of_trapezoid(l1,l2,h):\n    '''\n    Write a function to find the area of a trapezoid given the length of its two bases and the height of its base.\n    '''\n    return ((l1+l2)/2)*h\n    \ndef area_of_kite_and_trapezoid(kite,trapezoid):\n    '''\n    Write a function to find the area of the union of a kite and a trapezoid.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_trapezoid(trapezoid[0],trapezoid[1],trapezoid[2]))\n    \ndef area_of_parallelogram_and_trapezoid(parallelogram,trapezoid):\n    '''\n    Write a function to find the area of the union of a parallelogram and a trapezoid.\n    '''\n    return (area_of_parallelogram(parallelogram[0],parallelogram[1])+area_of_trapezoid(trapezoid[0],trapezoid[1],trapezoid[2]))\n    \ndef area_of_kite_and_parallelogram(kite,parallelogram):\n    '''\n    Write a function to find the area of the union of a kite and a parallelogram.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_parallelogram(parallelogram[0],parallelogram[1]))\n    \ndef area_of_kite_and_square_pyramid(kite,square_pyramid):\n    '''\n    Write a function to find the area of the union of a kite and a square pyramid.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_square_pyramid(square_pyramid[0],square_pyramid[1]))\n    \ndef area_of_kite_and_rectangular_pyramid(kite,rectangular_pyramid):\n    '''\n    Write a function to find the area of the union of a kite and a rectangular pyramid.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_rectangular_pyramid(rectangular_pyramid[0],rectangular_pyramid[1],rectangular_pyramid[2]))\n    \ndef area_of_kite_and_triangular_pyramid(kite,triangular_pyramid):\n    '''\n    Write a function to find the area of the union of a kite and a triangular pyramid.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_triangular_pyramid(triangular_pyramid[0],triangular_pyramid[1],triangular_pyramid[2]))\n    \ndef area_of_kite_and_rhombus(kite,rhombus):\n    '''\n    Write a function to find the area of the union of a kite and a rhombus.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_rhombus(rhombus[0],rhombus[1]))\n    \ndef area_of_kite_and_triangular_rhombus(kite,triangular_rhombus):\n    '''\n    Write a function to find the area of the union of a kite and a triangular rhombus.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_triangular_rhombus(triangular_rhombus[0],triangular_rhombus[1],triangular_rhombus[2]))\n    \ndef area_of_kite_and_rectangular_rhombus(kite,rectangular_rhombus):\n    '''\n    Write a function to find the area of the union of a kite and a rectangular rhombus.\n    '''\n    return (area_of_kite(kite[0],kite[1])+area_of_rectangular_rhombus(rectangular_rhombus[0],rectangular_rhombus[1],rectangular_rhombus[2]))\n    \ndef area_of_kite_and_rectangular_kite(kite,rectangular_kite):\n    '''\n    Write a function to find the area of the union of a kite and a rectangula"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*(r**2+r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r + math.pi*r*(r+h)\ndef lateral_surface_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r+h)*math.pi*r\ndef lateral_surface_area_rec(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_iter(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_iter_2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return iterate(r-1,h,s+math.pi*r*r)\n    return iterate(r,h,0)\ndef lateral_surface_area_iter_3(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_iter_4(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_iter_5(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_iter_6(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_iter_7(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_iter_8(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h):\n        s = 0\n        for i in range(r+1):\n            s += math.pi*i*i\n        return s\n    return iterate(r,h)\ndef lateral_surface_area_rec_2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_3(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_4(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_5(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_6(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_7(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_8(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_rec_9(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_iter_2_rec(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def recurse(r,h,s):\n        if r == 0:\n            return s\n        else:\n            return recurse(r-1,h,s+math.pi*r*r)\n    return recurse(r,h,0)\ndef lateral_surface_area_iter_2_2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    def iterate(r,h,s):\n        if r == 0:\n            return s"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (math.pi*r*r*h)/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2 + math.pi*(r**2 + r*h)\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    from math import pi\n    return pi*r*r + h*pi*r\n"
    },
    {
        "number": 731,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*(h/3)\ndef lateralsurface_parallel_plane(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the length a and the height b.\n    '''\n    return 2*a*b\ndef lateralsurface_round_section(r,h):\n    '''\n    Write a function to find the lateral surface area of a round section given the radius r and the height h.\n    '''\n    return math.pi*r**2*(h/2)\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the length a and the height b.\n    '''\n    return 2*a*b\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the length a, the length b, and the height h.\n    '''\n    return (a+b)/2*h\ndef lateralsurface_triangle(a,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the length a and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_parallelogram(a,b):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given the length a and the height b.\n    '''\n    return a*b\ndef lateralsurface_kite(b,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the length b and the height h.\n    '''\n    return (b**2+h**2)/2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the length a and the height b.\n    '''\n    return math.pi*(a**2)*(b**2)/4\ndef lateralsurface_pyramid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the length a, the length b, and the height h.\n    '''\n    return (a*b)/2*h\ndef lateralsurface_quad(a,b):\n    '''\n    Write a function to find the lateral surface area of a quadrilateral given the length a and the height b.\n    '''\n    return a*b\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the length a and the height b.\n    '''\n    return a*b\ndef lateralsurface_triangle(a,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the length a and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_rhombus(a,h):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the length a and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the length a, the length b, and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_round_section(r,h):\n    '''\n    Write a function to find the lateral surface area of a round section given the radius r and the height h.\n    '''\n    return math.pi*r**2*(h/2)\ndef lateralsurface_kite(b,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the length b and the height h.\n    '''\n    return (b**2+h**2)/2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the length a and the height b.\n    '''\n    return math.pi*(a**2)*(b**2)/4\ndef lateralsurface_pyramid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given the length a, the length b, and the height h.\n    '''\n    return (a*b)/2*h\ndef lateralsurface_quad(a,b):\n    '''\n    Write a function to find the lateral surface area of a quadrilateral given the length a and the height b.\n    '''\n    return a*b\ndef lateralsurface_rectangle(a,b):\n    '''\n    Write a function to find the lateral surface area of a rectangle given the length a and the height b.\n    '''\n    return a*b\ndef lateralsurface_triangle(a,h):\n    '''\n    Write a function to find the lateral surface area of a triangle given the length a and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_rhombus(a,h):\n    '''\n    Write a function to find the lateral surface area of a rhombus given the length a and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_trapezoid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given the length a, the length b, and the height h.\n    '''\n    return a*h/2\ndef lateralsurface_round_section(r,h):\n    '''\n    Write a function to find the lateral surface area of a round section given the radius r and the height h.\n    '''\n    return math.pi*r**2*(h/2)\ndef lateralsurface_kite(b,h):\n    '''\n    Write a function to find the lateral surface area of a kite given the length b and the height h.\n    '''\n    return (b**2+h**2)/2\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given the radius r.\n    '''\n    return 4*math.pi*r**2\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given the radius r and the height h.\n    '''\n    return 2*math.pi*r*(r+h)\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given the radius r and the height h.\n    '''\n    return math.pi*r*(r+h)\ndef lateralsurface_ellipse(a,b):\n    '''\n    Write a function to find the lateral surface area of an ellipse given the length a and the height b.\n    '''\n    return math.pi*(a**2)*(b**2)/4\ndef lateralsurface_pyramid(a,b,h):\n    '''\n    Write a function t"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return(re.sub(r\"[,|.|\\s| ]\", \":\", text))\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r\"\\s\", \":\", text)\n    text = re.sub(r\"\\.\", \":\", text)\n    text = re.sub(r\",\", \":\", text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=re.sub('[\\s,.]',' : ',text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace('.', ':').replace(',', ':').replace(' ', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    #text = 'Hello, world.  My name is John Doe.  '\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    print(text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[^0-9a-zA-Z]+', '', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    text = re.sub(r'\\,', ':', text)\n    text = re.sub(r'\\.', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text=str(text)\n    text=text.replace(' ',':')\n    text=text.replace(',',':')\n    text=text.replace('.',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ',':').replace(',','.').replace('.','')\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    first_occurrence = -1\n    while low <= high:\n        mid = (low+high)//2\n        if x < A[mid]:\n            high = mid-1\n        elif x > A[mid]:\n            low = mid+1\n        else:\n            first_occurrence = mid\n            high = mid-1\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start_index = 0\n    end_index = len(A) - 1\n    first_occurrence = None\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if x > A[mid_index]:\n            start_index = mid_index + 1\n        elif x < A[mid_index]:\n            end_index = mid_index - 1\n        else:\n            first_occurrence = mid_index\n            break\n    return first_occurrence\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    start = 0\n    end = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    lo = 0\n    hi = len(A)-1\n    while lo <= hi:\n        mid = lo + (hi-lo)//2\n        if A[mid] < x:\n            lo = mid + 1\n        elif A[mid] > x:\n            hi = mid - 1\n        else:\n            return mid\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if A[low] == x:\n        return low\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n    \n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    \n    if A[left] == x:\n        return left\n    else:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n"
    },
    {
        "number": 733,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if x == A[mid]:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            high = mid - 1\n        elif x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result += Product(arr[i:j+1])\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize a variable to store the sum of products.\n    result = 0\n    # Traverse through the list\n    for i in range(len(arr)):\n        # Find the product of all elements on the left of index i\n        left = 1\n        for j in range(i):\n            left = left * arr[j]\n        # Find the product of all elements on the right of index i\n        right = 1\n        for j in range(i + 1, len(arr)):\n            right = right * arr[j]\n        # Add the product of the elements on the left and right of index i\n        result += left * right\n    # Return the sum of products\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # solution is possible by using a list of products\n    products = [1] * len(arr)\n    product = 1\n    for i in range(0, len(arr)):\n        products[i] = product\n        product *= arr[i]\n    # for each element calculate products of all sublists starting with arr[i+1] and ending with arr[j]\n    product = 1\n    for i in range(len(arr) - 1, -1, -1):\n        products[i] *= product\n        product *= arr[i]\n    print(products)\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0]*(n+1)\n    sum_arr = 0\n    for i in range(1, n+1):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    products_sum = 0\n    for i in range(len(arr)):\n        products_sum += (arr[i] * productOfArray(arr[i:]))\n    return products_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = [1 for i in range(n)]\n    for i in range(n):\n        prod[i] = arr[i]*prod[i-1] if i > 0 else arr[i]\n    print(prod)\n    output = 0\n    for i in range(n):\n        for j in range(i, n):\n            output += prod[j] // prod[i]\n    return output\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n=len(arr)\n    arr.sort()\n    t=arr[0]\n    for i in range(n-1):\n        if arr[i+1]<arr[i]:\n            break\n    if i==n-1:\n        return t\n    s=arr[i+1]\n    for j in range(i+2,n):\n        s*=arr[j]\n    t*=s\n    for j in range(1,n-i):\n        s=s//arr[i]\n        if s==0:\n            break\n        s*=arr[i+j]\n        t+=s\n    return t\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum_of_prod = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            sum_of_prod += (reduce(lambda x, y: x*y, arr[i:j+1]))\n    return sum_of_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #Brute Force Solution: \n    #For every element in the array, we calculate sum of every possible sublist till now and check if they are divisible by k.\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        sum_so_far = 0\n        for j in range(i, n):\n            sum_so_far += arr[j]\n            if sum_so_far % k == 0:\n                res += sum_so_far\n    return res\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first = n & ~(1<<(len(bin(n))-2))\n    last = n & ~(1<<(len(bin(n))-3))\n    print (first, last)\n    return n & ~(1<<(len(bin(n))-2)) | last\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first = n & ~(0x5555555555555555)\n    second = n & ~(0xaaaaaaaaaaaaaaaa)\n    third = n & ~(0x3333333333333333)\n    fourth = n & ~(0x5555555555555555)\n    fifth = n & ~(0x1111111111111111)\n    sixth = n & ~(0x5555555555555555)\n    return (first | second | third | fourth | fifth | sixth)\n    \ndef calculate_fibonacci_sum_squares(n):  \n    '''\n    Write a function which accepts a number and prints the sum of the squares of all numbers between 1 and the given number.\n    '''\n    # using n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0xaaaaaaaaaaaaaaaa as a mask \n    # and then do all the computation using mask operations\n    # n & 0x3333333333333333 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    mask = n & 0x5555555555555555\n    print (mask)\n    #print(mask & 0xaaaaaaaaaaaaaaaa)\n    mask = mask & 0xaaaaaaaaaaaaaaaa\n    print(mask)\n    mask = mask & 0x3333333333333333\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    \n    sum = 0\n    for i in range(n+1):\n        sum = sum + (i*i)\n    return sum\n    \ndef print_fibonacci_sequence(n):  \n    '''\n    Write a function which accepts a number and prints the Fibonacci sequence of that number.\n    '''\n    # using n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0xaaaaaaaaaaaaaaaa as a mask \n    # and then do all the computation using mask operations\n    # n & 0x3333333333333333 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    mask = n & 0x5555555555555555\n    print (mask)\n    #print(mask & 0xaaaaaaaaaaaaaaaa)\n    mask = mask & 0xaaaaaaaaaaaaaaaa\n    print(mask)\n    mask = mask & 0x3333333333333333\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    \ndef print_multiples_of_seven(n):  \n    '''\n    Write a function which accepts a number and prints all the numbers from 1 to the given number which are multiple of 7.\n    '''\n    # using n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0xaaaaaaaaaaaaaaaa as a mask \n    # and then do all the computation using mask operations\n    # n & 0x3333333333333333 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    mask = n & 0x5555555555555555\n    print (mask)\n    #print(mask & 0xaaaaaaaaaaaaaaaa)\n    mask = mask & 0xaaaaaaaaaaaaaaaa\n    print(mask)\n    mask = mask & 0x3333333333333333\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    \ndef print_negative_number_in_an_array(arr):  \n    '''\n    Write a function which accepts an array and prints the negative numbers in the array.\n    '''\n    # using n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0xaaaaaaaaaaaaaaaa as a mask \n    # and then do all the computation using mask operations\n    # n & 0x3333333333333333 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x1111111111111111 as a mask \n    # and then do all the computation using mask operations\n    # n & 0x5555555555555555 as a mask \n    mask = arr & 0x5555555555555555\n    print (mask)\n    #print(mask & 0xaaaaaaaaaaaaaaaa)\n    mask = mask & 0xaaaaaaaaaaaaaaaa\n    print(mask)\n    mask = mask & 0x3333333333333333\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    mask = mask & 0x1111111111111111\n    print(mask)\n    mask = mask & 0x5555555555555555\n    print(mask)\n    \ndef print_highest_and_lowest_number_in_an_array(arr):  \n    '''\n    Write a function which accepts an array and prints the highest and the lowest number in that array.\n    '''\n    # using n & 0x5555555555555555 as a mask \n    # and then do all the computation using mask operations\n    # n & 0xaaaaaaaaaaaaaaaa as "
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the mask to 11111111 11111111 11111111 11111111.\n    # The mask is used to keep the last 32 bits of the original number.\n    mask = 0xFFFFFFFF\n    # Keep the last 32 bits of the original number n\n    n = n & mask\n    # Right shift n by one to move all the bits of the last 32 bits to the front.\n    n = n >> 1\n    # Keep the first bit of the original number\n    n = n | 0x80000000\n    # Return the resultant number\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = int(n)\n    n ^= (n >> 1)\n    return bin(n)\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    length = 32\n    mask = (1 << (length - 1)) - 1\n    n &= mask\n    n = ((n << 1) | (n >> (length - 1))) & mask\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = n<<1\n    n = (n&mask)^mask\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n ^ (n >> 1)\n    n = n ^ (n >> 2)\n    n = n ^ (n >> 4)\n    n = n ^ (n >> 8)\n    n = n ^ (n >> 16)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = (1 << n)-1 \n    mask = mask << 1  \n    mask = mask >> 1 \n    return n & mask \n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = 0b11111111\n    n = (n & mask) << 1\n    n = n | 1\n    n = (n & mask) >> 1\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    mask = ~(0b1111111) & 0xffffffff # use mask to not change the first and the last bit \n    print(bin(mask))\n    print(bin(n))\n    n = n & mask\n    print(bin(n))\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = 0\n    while (pos < len(a)):\n        if (x >= a[pos]):\n            pos += 1\n        else:\n            break\n    return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a.append(x)\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return None\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(0, len(a)):\n        if a[i] > x:\n            return i\n    return len(a)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x, lo=0, hi=len(a))\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a[0] < x:\n        return 0\n    return bisect.bisect(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo, hi = 0, len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    print(i)\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return 0\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string) \n    if match: \n        print(\"Valid string\") \n    else: \n        print(\"Invalid string\") \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string): \n        return \"Yes\"\n    else: \n        return \"No\""
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # function to check whether a string is starting with a vowel or not \n    if re.search(regex,string): \n        return True\n    else: \n        return False\n    # driver function \nstr = \"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\"\nprint(check_str(str)) \nstr = \"Hello\"\nprint(check_str(str)) \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.fullmatch(regex,string)\n    if(match == None):\n        return False\n    else:\n        return True\nstring = input()\nif(check_str(string)):\n    print(\"Vowel String\")\nelse:\n    print(\"String is not a vowel\")\n    \n    "
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \nstring = \"Abc_\"\nprint(check_str(string)) \n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string=string.lower()\n    if(re.match(regex,string)): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.match(regex,string)\n    if result:\n        print(\"Your string starts with a vowel\")\n    else:\n        print(\"Your string doesn't start with a vowel\")\ncheck_str('pyar')"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (1 - pow(0.25,n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return geometric_sum(n-1) + (2**(n-1))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (1-((1+n)**(1/n)))\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 2*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 2:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (1 - ((1/2)**(n - 1))) * n\n"
    },
    {
        "number": 738,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n*geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    return int(n * (n + 1) / 2)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def find_Number(n): \n        '''\n        Write a python function to return nth triangular number.\n        '''\n        return n * (n + 1) // 2\n    \n    def check(number, n): \n        '''\n        Write a python function to check if number is in triangular number format.\n        '''\n        return (number * (number + 1)) // 2 == n \n    \n    def find_Smallest_Number(n): \n        '''\n        Write a python function to return smallest triangular number with n digits.\n        '''\n        count = 1\n        i = 1\n        while count < n: \n            i += 1\n            count += i \n        return find_Number(i - 1)\n    \n    if n == 0: \n        return 0\n    \n    number = find_Smallest_Number(n)\n    \n    while not check(number, n): \n        number += 1\n    \n    return number \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the minimum number \n    # and the index \n    min_num = 1; \n    index = 1; \n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    ans = [] \n    n = n + 2; \n    sq = int(math.sqrt(n)); \n    for i in range(1, sq + 1): \n        if (n % i == 0): \n            a = int(n / i); \n            if (i == a): \n                ans.append(i - 1) \n            else: \n                ans.append(i - 1) \n                ans.append(a - 1) \n    return ans \n    \ndef find_Tr_num(n): \n    '''\n    Write a python function to find the nth triangular number. https://www.geeksforgeeks.org/number-triangular-numbers/\n    '''\n    ans = [] \n    for i in range(1, n + 1): \n        ans.append((i * (i + 1)) / 2) \n    return ans \n    \ndef find_Index_Nth_Tr_num(n): \n    '''\n    Write a python function to find the nth triangular number and its index. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    ans = [] \n    n = n + 2; \n    sq = int(math.sqrt(n)); \n    for i in range(1, sq + 1): \n        if (n % i == 0): \n            a = int(n / i); \n            if (i == a): \n                ans.append(i - 1) \n                ans.append(i - 1) \n            else: \n                ans.append(i - 1) \n                ans.append(a - 1) \n    return ans \n    \ndef find_Index_Nth_Tr_num_recursive(n): \n    '''\n    Write a python function to find the nth triangular number and its index via recursive solution. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_recursive_helper(n, i, count): \n        if (i == 0): \n            return count; \n        else: \n            sq = int(math.sqrt(n)); \n            if ((n % sq) == 0): \n                a = int(n / sq); \n                return find_Index_Nth_Tr_num_recursive_helper(a, i - 1, count) \n            else: \n                return find_Index_Nth_Tr_num_recursive_helper(n, i - 1, count + 1) \n    return find_Index_Nth_Tr_num_recursive_helper(n, n - 2, 1) \n    \ndef find_Index_Nth_Tr_num_memoization(n, table): \n    '''\n    Write a python function to find the nth triangular number and its index via memoization. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_memoization_helper(n, i, table): \n        if (i == 0): \n            return table[i]; \n        else: \n            sq = int(math.sqrt(n)); \n            if ((n % sq) == 0): \n                a = int(n / sq); \n                return find_Index_Nth_Tr_num_memoization_helper(a, i - 1, table) \n            else: \n                if (table[i] == -1): \n                    table[i] = find_Index_Nth_Tr_num_memoization_helper(n, i - 1, table) + 1; \n                return table[i] \n    return find_Index_Nth_Tr_num_memoization_helper(n, n - 2, table) \n    \ndef find_Index_Nth_Tr_num_Tabulation(n, table): \n    '''\n    Write a python function to find the nth triangular number and its index via tabulation. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_Tabulation_helper(n, table): \n        for i in range(n + 1): \n            table[i] = i; \n        for i in range(1, n + 1): \n            table[i] = table[i - 1] + i; \n        return table[n] \n    return find_Index_Nth_Tr_num_Tabulation_helper(n, table) \n    \ndef find_Index_Nth_Tr_num_Tabulation_Optimized(n, table): \n    '''\n    Write a python function to find the nth triangular number and its index via tabulation optimized. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_Tabulation_Optimized_helper(n, table): \n        for i in range(2, n + 1): \n            table[i] = table[i - 1] + i; \n        return table[n] \n    return find_Index_Nth_Tr_num_Tabulation_Optimized_helper(n, table) \n    \ndef find_Index_Nth_Tr_num_Tabulation_Optimized_Extra(n): \n    '''\n    Write a python function to find the nth triangular number and its index via tabulation optimized. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_helper(n, table): \n        if (n == 0 or n == 1): \n            return n \n        else: \n            table[n] = table[n - 1] + n; \n            return find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_helper(n - 1, table) \n    return find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_helper(n, table) \n    \ndef find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Recursive(n, table): \n    '''\n    Write a python function to find the nth triangular number and its index via tabulation optimized. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Recursive_helper(n, table): \n        if (n == 0 or n == 1): \n            return n \n        else: \n            if (table[n] == -1): \n                table[n] = table[n - 1] + n; \n            return find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Recursive_helper(n - 1, table) \n    return find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Recursive_helper(n, table) \n    \ndef find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Memoization(n, table): \n    '''\n    Write a python function to find the nth triangular number and its index via tabulation optimized. https://www.geeksforgeeks.org/index-of-nth-triangular-number/\n    '''\n    def find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Memoization_helper(n, table): \n        if (n == 0 or n == 1): \n            return n \n        else: \n            if (table[n] == -1): \n                table[n] = table[n - 1] + n; \n            return find_Index_Nth_Tr_num_Tabulation_Optimized_Extra_Memoization_helper(n - 1, table) \n    return find_Index_Nth_Tr"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n = 4\n    # initializing initial number  \n    # and min number as 0  \n    tri = 0\n    min = 0\n    i = 1\n    while(i<=n):\n        tri = tri + i\n        i = i + 1\n    # print(tri) \n    # calculating min using min number  \n    # formula min = (n * (n+1)) / 2 \n    min = int(tri / 2)\n    return min\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1; \n    while (1): \n        sum = 0; \n        for j in range(1, i+1): \n            sum = sum + j; \n        # If the last term of the series is \n        # less than the given number n. \n        if (sum < n): \n            i = i + 1; \n        else: \n            break; \n    return i; \ndef find_Triangular_Number_With_n_Digits(n): \n    '''\n    Write a Python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/smallest-triangular-number/\n    '''\n    return (n*(n+1))/2; \ndef find_First_Triangular_Number_With_n_Digits(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    index = find_Index(n); \n    num = find_Triangular_Number_With_n_Digits(index); \n    return num; \ndef find_Total_Digits(n): \n    '''\n    Write a Python program to find the number of digits in a number. https://www.geeksforgeeks.org/number-digits-number-python-2/\n    '''\n    # count number of digits \n    # in a given number \n    return int(math.log10(n))+1\ndef find_First_Triangular_Number_With_n_Digits_2(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_3(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    return n * (n + 1) * 0.5; \ndef find_First_Triangular_Number_With_n_Digits_4(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    index = find_Index(n); \n    num = find_Triangular_Number_With_n_Digits_4(index); \n    return num; \ndef find_Triangular_Number_With_n_Digits_4(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    return (n*(n+1)*(n+2))/6; \ndef find_Triangular_Number_With_n_Digits_5(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    return (n*(n+1)*(n+2))/6; \ndef find_Triangular_Number_With_n_Digits_6(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    return n * (n+1) / 2; \ndef find_First_Triangular_Number_With_n_Digits_7(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_8(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_9(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_10(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_11(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_12(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_13(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://www.geeksforgeeks.org/smallest-number-with-given-n-digits/\n    '''\n    i = 1; \n    while (1): \n        if (i * (i + 1))/2 < n: \n            i = i + 1; \n        else: \n            break; \n    return (i * (i + 1))/2; \ndef find_First_Triangular_Number_With_n_Digits_14(n): \n    '''\n    Write a Python program to find the smallest number with given n digits. https://ww"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = int(n)\n    \n    # compute 10^n \n    num = 10**n\n    \n    # Initialize value of the \n    # number and index \n    index = 0\n    number = 1\n    \n    while num > 0: \n        \n        # This step is required \n        # to increment index by 1 \n        if number > num: \n            index += 1\n            number = index\n        else: \n            number += 1\n        \n        num -= 1\n    \n    # return the index \n    return index\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n must be an odd number\n    if n%2 == 0:\n        return -1\n    m = 0\n    j = 2\n    for i in range(1,n):\n        m = m + j\n        j = j + 2\n    return m\n    \ndef find_Triangular_Number(n): \n    '''\n    Write a python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n must be an odd number\n    if n%2 == 0:\n        return -1\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    count = 0\n    while(count < n):\n        count = 0\n        for j in range(1, i+1):\n            count += j\n        i += 1\n    return i-1\n"
    },
    {
        "number": 739,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    sq = int(math.sqrt(n)) \n    for i in range(1, sq + 1): \n        j = i * (i + 1) // 2\n        if (n >= j): \n            return j \n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for key, value in test_tup:\n        if key not in new_dict:\n            new_dict[key] = []\n        new_dict[key].append(value)\n    return new_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d={}\n    for i in range(0,len(test_tup)-1):\n        d[test_tup[i]]=test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    print(dict_tup)\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    l = len(test_tup)\n    if l % 2!= 0:\n        print(\"List has odd length\")\n        return\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    print (test_tup)\n    dict = {test_tup[i]:test_tup[i+1] for i in range(0, len(test_tup), 2)}\n    print (dict)\n    return dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_tup = (2,4,1,5,8)\n    return dict((test_tup[i], test_tup[i+1]) for i in range(len(test_tup)-1))\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dictionary = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        try:\n            value = test_tup[i + 1]\n        except IndexError:\n            break\n        dictionary[key] = value\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    res = {}\n    for i in range(0,len(test_tup)):\n        res[test_tup[i]] = test_tup[i+1]\n    return res\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s) - 1) :\n        if s[i]!= s[i + 1] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for char in s :\n        if s.count(char)!= len(s) :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(len(s)) :\n        if s[0]!= s[i] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    return len(set(s)) == 1\n    \n    \n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s=s.lower()\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s.count(s[0]) == len(s) :\n        print(True)\n    else :\n        print(False)\n        "
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(set(s)) == 1\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    i = 0\n    for char in s:\n        i = i+1\n        if i == len(s) - 1:\n            return True\n        if char!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)==0 :\n        return True\n    if len(s)==1 :\n        return True\n    if len(s)==2 :\n        if s[0]==s[1] :\n            return True\n        else :\n            return False\n    return all_Characters_Same(s[1:])\n"
    },
    {
        "number": 741,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(a==s[0] for a in s)\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2 * math.sqrt(3)) / 4\ndef vol_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return (side ** 3) / (6 * math.sqrt(2))\ndef area_cuboid(length, width, height):\n    '''\n    Write a function to calculate the surface area of a cuboid.\n    '''\n    return 2 * (length * width + length * height + width * height)\ndef vol_cuboid(length, width, height):\n    '''\n    Write a function to calculate the volume of a cuboid.\n    '''\n    return length * width * height\ndef area_cube(side):\n    '''\n    Write a function to calculate the surface area of a cube.\n    '''\n    return 6 * (side ** 2)\ndef vol_cube(side):\n    '''\n    Write a function to calculate the volume of a cube.\n    '''\n    return side ** 3\ndef area_rectangle(length, width):\n    '''\n    Write a function to calculate the surface area of a rectangle.\n    '''\n    return length * width\ndef vol_rectangle(length, width):\n    '''\n    Write a function to calculate the volume of a rectangle.\n    '''\n    return length * width\ndef area_parallelogram(length, base):\n    '''\n    Write a function to calculate the surface area of a parallelogram.\n    '''\n    return length * base\ndef vol_parallelogram(length, base):\n    '''\n    Write a function to calculate the volume of a parallelogram.\n    '''\n    return length * base\ndef area_trapezium(length, height, base):\n    '''\n    Write a function to calculate the surface area of a trapezium.\n    '''\n    return 1 / 2 * (length * height + length * base + height * base)\ndef vol_trapezium(length, height, base):\n    '''\n    Write a function to calculate the volume of a trapezium.\n    '''\n    return 1 / 2 * (length * height + length * base + height * base)\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the surface area of a sphere.\n    '''\n    return 4 * math.pi * radius ** 2\ndef vol_sphere(radius):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    return (4 / 3) * math.pi * radius ** 3\ndef area_cone(radius, height):\n    '''\n    Write a function to calculate the surface area of a cone.\n    '''\n    return math.pi * radius ** 2 * height / 3\ndef vol_cone(radius, height):\n    '''\n    Write a function to calculate the volume of a cone.\n    '''\n    return 1 / 3 * math.pi * radius ** 2 * height\ndef area_pyramid(base, height):\n    '''\n    Write a function to calculate the surface area of a pyramid.\n    '''\n    return (1 / 2) * base ** 2 * height\ndef vol_pyramid(base, height):\n    '''\n    Write a function to calculate the volume of a pyramid.\n    '''\n    return (1 / 3) * base ** 3\ndef area_prism(base, height):\n    '''\n    Write a function to calculate the surface area of a prism.\n    '''\n    return 2 * (base * height)\ndef vol_prism(base, height):\n    '''\n    Write a function to calculate the volume of a prism.\n    '''\n    return base * height\ndef area_quad_from_sides(a, b, c):\n    '''\n    Write a function to calculate the surface area of a quadrilateral\n    from the side lengths.\n    '''\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\ndef area_quad_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a quadrilateral\n    from the diagonal.\n    '''\n    return math.sqrt(diagonal ** 2 * 2)\ndef vol_quad_from_sides(a, b, c):\n    '''\n    Write a function to calculate the volume of a quadrilateral\n    from the side lengths.\n    '''\n    s = (a + b + c) / 2\n    return s ** 2 * (s - a) * (s - b) * (s - c)\ndef vol_quad_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a quadrilateral\n    from the diagonal.\n    '''\n    return 1 / 3 * diagonal ** 3\ndef area_cuboid_from_side(side):\n    '''\n    Write a function to calculate the surface area of a cuboid\n    from the side length.\n    '''\n    return 6 * side ** 2\ndef vol_cuboid_from_side(side):\n    '''\n    Write a function to calculate the volume of a cuboid\n    from the side length.\n    '''\n    return side ** 3\ndef area_cuboid_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a cuboid\n    from the diagonal.\n    '''\n    return 2 * diagonal ** 2\ndef vol_cuboid_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a cuboid\n    from the diagonal.\n    '''\n    return diagonal ** 3\ndef area_rhombus_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a rhombus\n    from the diagonal.\n    '''\n    return diagonal ** 2 * math.sqrt(2)\ndef vol_rhombus_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a rhombus\n    from the diagonal.\n    '''\n    return 1 / 3 * diagonal ** 3\ndef area_rectangle_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a rectangle\n    from the diagonal.\n    '''\n    return diagonal * math.sqrt(2)\ndef vol_rectangle_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a rectangle\n    from the diagonal.\n    '''\n    return 1 / 2 * diagonal ** 2\ndef area_parallelogram_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a parallelogram\n    from the diagonal.\n    '''\n    return diagonal ** 2\ndef vol_parallelogram_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a parallelogram\n    from the diagonal.\n    '''\n    return 1 / 2 * diagonal ** 2\ndef area_trapezium_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a trapezium\n    from the diagonal.\n    '''\n    return math.sqrt(2 * diagonal)\ndef vol_trapezium_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a trapezium\n    from the diagonal.\n    '''\n    return 1 / 3 * diagonal ** 2\ndef area_sphere_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a sphere\n    from the diagonal.\n    '''\n    return 4 * math.pi * diagonal ** 2\ndef vol_sphere_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a sphere\n    from the diagonal.\n    '''\n    return (4 / 3) * math.pi * diagonal ** 3\ndef area_cone_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the surface area of a cone\n    from the diagonal.\n    '''\n    return math.pi * (diagonal ** 2) * math.sqrt(1 + (math.pi / 2))\ndef vol_cone_from_diagonal(diagonal):\n    '''\n    Write a function to calculate the volume of a cone\n    from the diagonal."
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**3)/(6*math.sqrt(2))\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    if side:\n        return (side ** 2 * math.sqrt(3)) / 4\n    else:\n        return 0\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*math.sqrt(3)/3*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)*(math.sqrt(2))/4\ndef area_of_triangle(side1,side2):\n    '''\n    Write a function to calculate the area of a triangle.\n    '''\n    return (side1*side2)/2\ndef area_of_parallelogram(side1,side2):\n    '''\n    Write a function to calculate the area of a parallelogram.\n    '''\n    return side1*side2\ndef area_of_triangle_with_squared_sides(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle with three squared sides.\n    '''\n    return (a**2)*(b**2+c**2-2*a*c*math.sqrt(b**2+c**2-a**2))/(2*a*b)\ndef area_of_rectangle(length,width):\n    '''\n    Write a function to calculate the area of a rectangle.\n    '''\n    return length*width\ndef area_of_circle(radius):\n    '''\n    Write a function to calculate the area of a circle.\n    '''\n    return math.pi*radius**2\ndef area_of_circle_with_squared_radius(side):\n    '''\n    Write a function to calculate the area of a circle with a squared radius.\n    '''\n    return math.pi*side**2\ndef area_of_trapezium(side1,side2,height):\n    '''\n    Write a function to calculate the area of a trapezium.\n    '''\n    return (side1+side2)*height/2\ndef area_of_parallelogram_with_squared_sides(a,b):\n    '''\n    Write a function to calculate the area of a parallelogram with two squared sides.\n    '''\n    return a*b\ndef area_of_trapeze(a,b,height):\n    '''\n    Write a function to calculate the area of a trapeze.\n    '''\n    return (a+b)*height/2\ndef area_of_parallelogram_with_squared_sides_and_squared_height(a,b,h):\n    '''\n    Write a function to calculate the area of a parallelogram with two squared sides and one squared height.\n    '''\n    return (a**2+b**2+a*b*h)/2\ndef area_of_rhombus(side1,side2):\n    '''\n    Write a function to calculate the area of a rhombus.\n    '''\n    return (side1*side2)/2\ndef area_of_rhombus_with_squared_diagonal(side):\n    '''\n    Write a function to calculate the area of a rhombus with a squared diagonal.\n    '''\n    return math.sqrt(side**2)\ndef area_of_kite(side):\n    '''\n    Write a function to calculate the area of a kite.\n    '''\n    return 3*side**2/2\ndef area_of_kite_with_squared_sides(side1,side2):\n    '''\n    Write a function to calculate the area of a kite with two squared sides.\n    '''\n    return 2*side1*side2\ndef area_of_kite_with_squared_diagonal(side):\n    '''\n    Write a function to calculate the area of a kite with a squared diagonal.\n    '''\n    return side**2\ndef area_of_kite_with_squared_diagonal_and_squared_side(side1,side2):\n    '''\n    Write a function to calculate the area of a kite with two squared diagonals and one squared side.\n    '''\n    return side1*side2\ndef area_of_heptagon(side1,side2,side3,side4,side5,side6):\n    '''\n    Write a function to calculate the area of a heptagon.\n    '''\n    return (side1+side2+side3+side4+side5+side6)/2\ndef area_of_heptagon_with_squared_sides(side1,side2,side3,side4,side5,side6):\n    '''\n    Write a function to calculate the area of a heptagon with two squared sides.\n    '''\n    return (side1**2+side2**2+side3**2+side4**2+side5**2+side6**2)/2\ndef area_of_heptagon_with_squared_sides_and_squared_height(side1,side2,side3,side4,side5,side6,height):\n    '''\n    Write a function to calculate the area of a heptagon with two squared sides and one squared height.\n    '''\n    return (side1**2+side2**2+side3**2+side4**2+side5**2+side6**2+side1*side2*height)/2\ndef area_of_kite_with_squared_sides_and_squared_height(side1,side2,height):\n    '''\n    Write a function to calculate the area of a kite with two squared sides and one squared height.\n    '''\n    return (side1*side2)*height/2\ndef area_of_kite_with_squared_sides_and_squared_diagonal(side1,side2,diagonal):\n    '''\n    Write a function to calculate the area of a kite with two squared sides and one squared diagonal.\n    '''\n    return (side1**2+side2**2+2*side1*side2*diagonal)/2\ndef area_of_kite_with_squared_sides_and_squared_diagonal_and_squared_height(side1,side2,diagonal,height):\n    '''\n    Write a function to calculate the area of a kite with two squared sides and one squared diagonal and one squared height.\n    '''\n    return (side1**2+side2**2+2*side1*side2*diagonal+side1*side2*height)/2\ndef area_of_triangle_with_squared_sides_and_squared_height(side1,side2,height):\n    '''\n    Write a function to calculate the area of a triangle with two squared sides and one squared height.\n    '''\n    return (side1**2+side2**2+side1*side2*height)/2\ndef area_of_triangle_with_squared_sides_and_squared_diagonal(side1,side2,diagonal):\n    '''\n    Write a function to calculate the area of a triangle with two squared sides and one squared diagonal.\n    '''\n    return (side1**2+side2**2+side1*side2*diagonal)/2\ndef area_of_triangle_with_squared_sides_and_squared_diagonal_and_squared_height(side1,side2,diagonal,height):\n    '''\n    Write a function to calculate the area of a triangle with two squared sides and one squared diagonal and one squared height.\n    '''\n    return (side1**2+side2**2+side1*side2*diagonal+side1*side2*height)/2\ndef area_of_trapeze_with_squared_sides_and_squared_height(side1,side2,height):\n    '''\n    Write a function to calculate the area of a trapeze with two squared sides and one squared height.\n    '''\n    return (side1+side2)*height/2\ndef area_of_trapeze_with_squared_sides_and_squared_diagonal(side1,side2,diagonal):\n    '''\n    Write a function to calculate the area of a trapeze with two squared sides and one squared diagonal.\n    '''\n    return (side1+side2)*diagonal/2\ndef area_of_trapeze_with_squared_sides_and_squared_diagonal_and_squared_height(side1,side2,diagonal,height):\n    '''\n    Write a function to calculate the area of a trapeze with two squared sides and one squared diagonal and one squared height.\n    '''\n    return (side1+side2)*diagonal/"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*math.sqrt(2)/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side * side) * math.sqrt(2) / 4\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side**3*4/12\n"
    },
    {
        "number": 742,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side ** 3 / (6 * math.sqrt(2))\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    n = m % n\n    return list[n: ] + list[:n]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    i = 0\n    j = 0\n    k = m\n    while (i < k):\n        temp = list[j]\n        list[j] = list[k]\n        list[k] = temp\n        i += 1\n        j += 1\n        k += 1\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    lst = list[:]\n    n = len(lst)\n    i = 0\n    j = m - 1\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Move all items of the list\n    # into the temporary list 'temp'.\n    temp = []\n    for i in range(len(list) - m, len(list)):\n        temp.append(list[i])\n    # Move items of 'list'\n    # into the temporary list 'temp'.\n    for i in range(0, len(list) - m):\n        temp.append(list[i])\n    # Copy the temporary list to 'list'.\n    for i in range(0, len(list)):\n        list[i] = temp[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = 0\n    n = len(list)\n    temp = [None] * n\n    for i in range(n):\n        temp[(i+count) % n] = list[i]\n        count += 1\n    for i in range(n):\n        list[i] = temp[i]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #return list[m:] + list[:m]\n    for i in range(m):\n        list.append(list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    output = list[0]\n    for i in range(1,m):\n        output += list[i]\n    for i in range(m, len(list)):\n        output += list[i]\n    return output\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value == None:\n            return True\n    return False\n    \ndef check_int(test_list):\n    '''\n    Write a function that takes a list of integers and returns the smallest integer in the list.\n    '''\n    # return the lowest integer in the list\n    return min(test_list)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    res = list(filter(lambda a: a is not None, test_tup))\n    if len(res) == 0:\n        return False\n    else:\n        return True\n    # NOTE: we could use list comprehension and filter but we want to show you a way to do it with a simple for\n    # loop, so even though this is longer, it's better practice.\n    \n    \ndef check_even(num):\n    '''\n    Write a function that checks if a number is even or not.\n    '''\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n    # NOTE: as above, we could use list comprehension to make this one liner but we want to show you a way to do\n    # this with a simple for loop.\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return True if None in test_tup else False\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup.count(None) == len(test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(x is None for x in test_tup):\n        print(f\"The tuple {test_tup} contains None values\")\n    else:\n        print(f\"The tuple {test_tup} doesn't contain any None values\")\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for x in test_tup:\n        if x is None:\n            return True\n    return False\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    mylist = []\n    for num in range(startnum, endnum+1):\n        if all([x % num == 0 for x in map(int, list(str(num)))]) == True:\n            mylist.append(num)\n    return mylist\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [x for x in range(startnum, endnum) if (all(x % int(c) == 0 for c in str(x)))]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all([x % int(y) == 0 for y in str(x)]), list(range(startnum, endnum+1))))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda num: all([True if int(digit) == 0 else (num % int(digit) == 0) for digit in list(str(num))]), range(startnum, endnum + 1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    lst = [x for x in range(startnum, endnum + 1)]\n    lst_len = len(lst)\n    return [lst[x] for x in range(lst_len) if all(map(lambda y: lst[x] % y == 0, [x for x in range(1, 10)]))]\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    div_by_digits = filter(lambda x: all(map(lambda y: x % int(y) == 0, str(x))), range(startnum, endnum + 1))\n    return list(div_by_digits)\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # the solution below takes O(n^2) time\n    # for num in range(startnum, endnum + 1):\n    #     result = True\n    #     for i in str(num):\n    #         if num % int(i)!= 0:\n    #             result = False\n    #             break\n    #     if result:\n    #         print(num, end ='')\n    # return\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if startnum >= endnum:\n        return'startnum must be less than endnum'\n    else:\n        return list(filter(lambda x: all(map(lambda y: x%y==0, [int(digit) for digit in str(x)])), range(startnum,endnum+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = []\n    for i in range(startnum, endnum):\n        if all([int(digit) % i == 0 for digit in str(i)]):\n            numbers.append(i)\n    return numbers\n"
    },
    {
        "number": 745,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    \n    for i in range(startnum, endnum+1):\n        divisible_by_2 = True\n        divisible_by_3 = True\n        divisible_by_5 = True\n        divisible_by_7 = True\n        divisible_by_all = True\n        \n        for j in str(i):\n            if int(j) % 2!= 0:\n                divisible_by_2 = False\n            if int(j) % 3!= 0:\n                divisible_by_3 = False\n            if int(j) % 5!= 0:\n                divisible_by_5 = False\n            if int(j) % 7!= 0:\n                divisible_by_7 = False\n        \n        if divisible_by_2:\n            if divisible_by_3:\n                if divisible_by_5:\n                    if divisible_by_7:\n                        result.append(i)\n    \n    return result\n    \nprint(divisible_by_digits(1,1000)"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    return None\n    \ndef str_interpolation(a,b):\n    '''\n    Write a function that takes two strings a and b and interpolates a string into b such that the number of spaces between a and b are the same as in a. If two strings are not the same length, return None.\n    '''\n    return None\n    \ndef add_prefix(list_n):\n    '''\n    Write a function to add a prefix to each item in the list. The first character of the prefix should be the character with code 33 (vertical bar). The function should return the new list.\n    '''\n    return None\n    \ndef transpose(matrix):\n    '''\n    Write a function that takes a matrix and returns the transpose of the matrix. The matrix is a list of lists. Each list contains n numbers. The numbers can be floats.\n    '''\n    return None\n    \ndef print_elements(list_1,list_2):\n    '''\n    Write a function to print the elements of list_1 and list_2 in a single row. The function should take list_1 and list_2 as inputs and should print the values of the lists in a single row.\n    '''\n    return None\n    \ndef num_occur(char,string):\n    '''\n    Write a function to count the number of occurrences of a character in a string. The character can be upper case or lower case. Function should return an integer.\n    '''\n    return None\n    \ndef n_th_root(radicand,n):\n    '''\n    Write a function to find the nth root of a number. The function should take two arguments, the number and the power to take the nth root to. The function should return the nth root of the number.\n    '''\n    return None\n    \ndef get_letters(list_1,list_2):\n    '''\n    Write a function to return a new list that contains the same elements as list_1 but with the first letter of each element reversed. Do not use the built-in function reversed(). Function should return the new list.\n    '''\n    return None\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if the string is a palindrome. A palindrome is a string that reads the same forward as backward. Function should return True or False.\n    '''\n    return None\n    \ndef count_characters(string):\n    '''\n    Write a function to count the number of characters in a string. Function should return a dictionary with the keys \"upper\", \"lower\", and \"total\". The values of each key should be the count of the characters in the string.\n    '''\n    return None\n    \ndef is_pangram(sentence):\n    '''\n    Write a function to determine if a sentence is a pangram (a sentence using every letter of the alphabet). A pangram is a sentence using every letter of the alphabet at least once. Function should return True or False.\n    '''\n    return None\n    \ndef num_occur(char,string):\n    '''\n    Write a function to count the number of occurrences of a character in a string. The character can be upper case or lower case. Function should return an integer.\n    '''\n    return None\n    \ndef my_enumerate(list_1):\n    '''\n    Write a function that takes a list and returns it as a list of two-element lists. Each element of the outer list should contain the index of the element and the value of the element in the list. Return the outer list.\n    '''\n    return None\n    \ndef add_suffix(list_1):\n    '''\n    Write a function to add a suffix to each item in the list. The suffix should be 'ly'. The function should return the new list.\n    '''\n    return None\n    \ndef remove_suffix(list_1):\n    '''\n    Write a function to remove the suffix 'ly' from each item in the list. The suffix should be removed regardless of how the name finishes. If the item does not have the suffix, the original item should be returned. Function should return the new list.\n    '''\n    return None\n    \ndef sum_list(list_1):\n    '''\n    Write a function to return the sum of all the elements in the list. Function should return a float.\n    '''\n    return None\n    \ndef reverse(string):\n    '''\n    Write a function to reverse a string. Function should return the reversed string.\n    '''\n    return None\n    \ndef avg_list(list_1):\n    '''\n    Write a function to return the average of all the elements in the list. Function should return a float.\n    '''\n    return None\n    \ndef print_items(list_1,list_2):\n    '''\n    Write a function to print the items of list_1 and list_2 in a single row. The function should take list_1 and list_2 as inputs and should print the items of the lists in a single row.\n    '''\n    return None\n    \ndef get_data(file_name):\n    '''\n    Write a function to read data from a file and return the data as a list. Function should return the list.\n    '''\n    return None\n    \ndef get_num_lines(file_name):\n    '''\n    Write a function to read data from a file and return the number of lines in the file. Function should return an integer.\n    '''\n    return None\n    \ndef get_num_characters(file_name):\n    '''\n    Write a function to read data from a file and return the number of characters in the file. Function should return an integer.\n    '''\n    return None\n    \ndef get_num_words(file_name):\n    '''\n    Write a function to read data from a file and return the number of words in the file. Function should return an integer.\n    '''\n    return None\n    \ndef get_num_unique_words(file_name):\n    '''\n    Write a function to read data from a file and return the number of unique words in the file. Function should return an integer.\n    '''\n    return None\n    \ndef get_longest_word(file_name):\n    '''\n    Write a function to read data from a file and return the length of the longest word in the file. Function should return an integer.\n    '''\n    return None\n    \ndef get_longest_word(file_name):\n    '''\n    Write a function to read data from a file and return the length of the longest word in the file. Function should return an integer.\n    '''\n    return None\n    \ndef get_most_frequent_word(file_name):\n    '''\n    Write a function to read data from a file and return the word that occurs the most frequently in the file. Function should return a string.\n    '''\n    return None\n    \ndef get_least_frequent_word(file_name):\n    '''\n    Write a function to read data from a file and return the word that occurs the least frequently in the file. Function should return a string.\n    '''\n    return None\n    \ndef print_top_words(file_name,number):\n    '''\n    Write a function to read data from a file and return the top n words that occur the most frequently in the file. Function should return a list of strings.\n    '''\n    return None\n    \ndef print_bottom_words(file_name,number):\n    '''\n    Write a function to read data from a file and return the top n words that occur the least frequently in the file. Function should return a list of strings.\n    '''\n    return None\n    \ndef get_words_with_letter(file_name,letter):\n    '''\n    Write a function to read data from a file and return a list of all the words that contain the given letter. Function should return a list of strings.\n    '''\n    return None\n    \ndef get_letters_count(list_1):\n    '''\n    Write a function to return a dictionary of letters and counts. Function should return a dictionary.\n    '''\n    return None\n    \ndef get_letter_count(string):\n    '''\n    Write a function to return a dictionary of letters and counts. Function should return a dictionary.\n    '''\n    return None\n    \ndef get_duplicates(list_1):\n    '''\n    Write a function to return a list of duplicates from the given list of numbers. Function should return a list.\n    ''"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        return math.pi*(r**2)*(a/360)\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 360:\n        area = (r ** 2) * (((a/360) * 2) * math.pi)\n        return area\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    a=a%360\n    if a>=360:\n        return None\n    else:\n        return(r**2)*a/360\n    \ndef f_to_c(f):\n    '''\n    Write a function to convert temperature from fahrenheit to celcius. The function takes in f as input. The function returns the value of celcius.\n    '''\n    c=(5/9)*(f-32)\n    return c\n    \ndef f_to_k(f):\n    '''\n    Write a function to convert temperature from fahrenheit to kelvin. The function takes in f as input. The function returns the value of kelvin.\n    '''\n    k=f_to_c(f)+273\n    return k\n    \ndef c_to_f(c):\n    '''\n    Write a function to convert temperature from celcius to fahrenheit. The function takes in c as input. The function returns the value of fahrenheit.\n    '''\n    f=c*(9/5)+32\n    return f\n    \ndef c_to_k(c):\n    '''\n    Write a function to convert temperature from celcius to kelvin. The function takes in c as input. The function returns the value of kelvin.\n    '''\n    k=c+273\n    return k\n    \ndef k_to_c(k):\n    '''\n    Write a function to convert temperature from kelvin to celcius. The function takes in k as input. The function returns the value of celcius.\n    '''\n    c=(k-273)\n    return c\n    \ndef k_to_f(k):\n    '''\n    Write a function to convert temperature from kelvin to fahrenheit. The function takes in k as input. The function returns the value of fahrenheit.\n    '''\n    f=k_to_c(k)*(9/5)+32\n    return f\n    \ndef f_to_k2(f):\n    '''\n    Write a function to convert temperature from fahrenheit to kelvin. The function takes in f as input. The function returns the value of kelvin.\n    '''\n    k=f_to_c(f)+273\n    return k\n    \ndef c_to_f2(c):\n    '''\n    Write a function to convert temperature from celcius to fahrenheit. The function takes in c as input. The function returns the value of fahrenheit.\n    '''\n    f=c*(9/5)+32\n    return f\n    \ndef k_to_c2(k):\n    '''\n    Write a function to convert temperature from kelvin to celcius. The function takes in k as input. The function returns the value of celcius.\n    '''\n    c=k-273\n    return c\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        area = math.pi * r**2\n    else:\n        print(\"Sector area is undefined for angle > 360.\")\n        area = None\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*(a/360)*math.pi\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    import math\n    a=math.radians(a)\n    #print(math.pi*r**2*(1/2*a))\n    if a<=360:\n        return math.pi*r**2*(1/2*a)\n    else:\n        return None"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a < 360:\n        area = (r**2)*(a/360)\n    else:\n        area = None\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return a*r**2\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    L = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i==0 or j==0 or k==0: \n                    L[i][j] = 0\n                elif X[i-1]==Y[j-1]==Z[k-1]: \n                    L[i][j] = L[i-1][j-1]+1\n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1]) \n    return L[m][n] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y)\n    o = len(Z)\n    \n    # declaring the array for storing the dp values \n    L = [[[None]*(o+1) for i in range(n+1)] for i in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i==0 or j==0 or k==0:\n                    L[i][j][k] = 0\n                elif X[i-1]==Y[j-1] and X[i-1]==Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[0 for i in range(l+1)] for j in range(n+1)] for k in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0 : \n                    L[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1] : \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1]) \n    print(L[m][n][l]) \n    return L[m][n][l] \n    \nif __name__ == '__main__':\n    X = 'abcd'\n    Y = 'xy'\n    Z = 'xyz'\n    lcs_of_three(X, Y, Z)\n    \n    \n'''\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n    L = [[[None]*(n+1) for i in range(m+1)] for j in range(l+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if (i == 0 or j == 0 or k == 0): \n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else: \n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n    #print(L)\n    return L[m][n][l] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    L = [[[None]*(o+1) for i in range(n+1)] for j in range(m+1)] \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # find the length of the strings \n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    lcs = [[[] for i in range(n+1)] for j in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs[i][j].append(0) \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    lcs[i][j].append(lcs[i-1][j-1][k-1]+1) \n                else: \n                    lcs[i][j].append(max(lcs[i-1][j][k], lcs[i][j-1][k], lcs[i][j][k-1])) \n    return lcs[m][n]\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    l = len(Z) \n    # Create a table to store results of subproblems \n    L = [[0 for x in range(n+1)] for x in range(m+1)] \n    # print(L)\n    # table = [[0 for x in range(l+1)] for x in range(n+1)]\n    # print(table)\n"
    },
    {
        "number": 747,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    l = len(Z)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    result=[]\n    for i in range(len(str1)):\n        if str1[i]==\" \" and str1[i-1]!=str1[i-1].lower():\n            result.append(\" \")\n        result.append(str1[i])\n    return \"\".join(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    print('\\ncapital_words_spaces\\n')\n    str_new = ''\n    for i in range(len(str1)):\n        if re.match(r'[A-Z]',str1[i]):\n            str_new +=''\n            str_new += str1[i]\n        else:\n            str_new += str1[i]\n    print('Given String: {}'.format(str1))\n    print('Capital words with spaces: {}'.format(str_new))\n    print('\\ncapital_words_spaces\\n')\n    return\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'(?<=\\w)([A-Z])',r' \\1',str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.capitalize()\n    str1 = re.sub(r'(?<=[A-Z])(?=[a-z])', r' ', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    if str1==\"\":\n        return str1\n    str1=re.sub(r'(?<=[a-zA-Z])[A-Z]{1}([a-zA-Z])',' \\1',str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Your code here\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    new_string = str1\n    # regex to find capital words starting with uppercase\n    r = re.compile('[A-Z][a-z]*')\n    # search for matches\n    result = r.search(str1)\n    # loop through matches\n    while result:\n        # extract the match, increment the string, and search for the next match\n        start_index = result.start()\n        match = result.group()\n        if match[0].islower():\n            end_index = start_index + len(match) + 1\n            new_string = new_string[:start_index] +'' + new_string[start_index:end_index] +'' + new_string[end_index:]\n        # else, don't make any changes\n        result = r.search(new_string)\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    try:\n        final_str = \"\"\n        str1 = str1.strip()\n        list_of_words = str1.split(\" \")\n        for word in list_of_words:\n            if word.istitle() == True:\n                word = word.capitalize()\n                final_str += word\n            else:\n                final_str += word\n        return final_str\n    except Exception as e:\n        print(\"Error: There is a problem with function capital_words_spaces in utils.py file, more details below:\\n\")\n        print(e,e.__doc__,type(e), sep = \"\\n\")\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # str1 = \"Test String, 1234\"\n    # str1 = \"Test String1234\"\n    # str1 = \"this is a test\"\n    if (len(str1) < 1):\n        return str1\n    else:\n        s = re.findall(\"[A-Z][^A-Z]*\", str1)\n        # print(s)\n        if (len(s) > 0):\n            res = \"\"\n            for i in range(0, len(s)):\n                res = res + s[i] + \" \"\n            return res\n        else:\n            return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # s = str1.split()\n    # str1 = str1.replace('.', '.')\n    # str1 = str1.replace(',', ',')\n    # str1 = str1.replace('!', '!')\n    # str1 = str1.replace('?', '?')\n    # str1 = str1.replace('\\'','\\'')\n    # str1 = str1.replace('-','-')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace('\\\"','\"')\n    # print(str1)\n    # str1 = str1.replace('\\'','\\' ')\n    # str1 = str1.replace('\\\"','\\\" ')\n    # str1 = str1.replace(',', ', ')\n    # str1 = str1.replace('!', '! ')\n    # str1 = str1.replace('?', '? ')\n    # str1 = str1.replace('.', '. ')\n    # str1 = str1.replace('\\'','\\' ')\n    # str1 = str1.replace('-','- ')\n    # str1 = str1.replace('\\t','')\n    # str1 = str1.replace('\\\"','\\\" ')\n    # str1 = str1.replace('`','\\'')\n    # str1 = str1.replace('(','( ')\n    # str1 = str1.replace(')',') ')\n    # str1 = str1.replace('[','[ ')\n    # str1 = str1.replace(']','] ')\n    # str1 = str1.replace('{','{ ')\n    # str1 = str1.replace('}','} ')\n    # str1 = str1.replace('+','+ ')\n    # str1 = str1.replace('\\\\','\\\\ ')\n    # str1 = str1.replace('|','| ')\n    # str1 = str1.replace('%','% ')\n    # str1 = str1.replace('<','< ')\n    # str1 = str1.replace('>','> ')\n    # str1 = str1.replace('=','= ')\n    # str1 = str1.replace('/','/ ')\n    # str1 = str1.replace('#','# ')\n    # str1 = str1.replace('^','^ ')\n    # str1 = str1.replace(';','; ')\n    # str1 = str1.replace('*','* ')\n    # str1 = str1.replace('\\n','\\n ')\n    # str1 = str1.replace('_','_ ')\n    # str1 = str1.replace('&','& ')\n    # str1 = str1.replace('~','~ ')\n    # str1 = str1.replace('@','@ ')\n    # str1 = str1.replace('$','$ ')\n    # str1 = str1.replace('\u00a3','\u00a3 ')\n    # str1 = str1.replace('\u00b0','\u00b0 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # str1 = str1.replace('\u00a7','\u00a7 ')\n    # st"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(s) if s.isdigit() else s for s in re.split(r'(\\d+)', x)])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key = lambda x: int(''.join(filter(str.isdigit, x))))\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # nums_str = ['1', '20', '200', '2000', '2', '200.5', '20.5']\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: [int(i) if i.isdigit() else float(\"inf\") for i in x.split()])\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for num in nums_str:\n        nums_list.append(int(num))\n    nums_list.sort()\n    return nums_list\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str.sort()\n    for i in range(len(nums_str)):\n        nums_str[i] = str(nums_str[i])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = [n for n in nums_str if n.isdigit()]\n    nums_str.sort(key = lambda x: x + \"0\" * (4 - len(x)))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    '''\n    Algorithm\n    1. Find all the numbers in a given list.\n    2. Extract the numbers and append them to a new list.\n    3. Sort the new list.\n    4. Populate the original list with the sorted numbers.\n    '''\n"
    },
    {
        "number": 749,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    #return sorted(nums_str, key=lambda x: int(x) if x.isdigit() else float('inf'))\n    import re\n    # using key\n    nums_str.sort(key=lambda x: [int(t) if t.isdigit() else float('inf') for t in re.split('(\\d+)', x)])\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Your code here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Write your code here\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return None\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    if i >= n or arr[i] > arr[int((i - 1) / 2)]:\n        return False\n    if i * 2 + 1 < n:\n        if arr[i] < arr[i * 2 + 1]:\n            return False\n    if i * 2 + 2 < n:\n        if arr[i] < arr[i * 2 + 2]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if the index is 0, then we can't go left\n    if i > 0:\n        left_child = arr[i] * 2\n        if arr[i] < left_child:\n            print(\"checking element: \", arr[i])\n            print(\"left child: \", left_child)\n            print(\"False\")\n            return False\n    # if the index is n-1, then we can't go right\n    right_child = arr[i] * 2 + 1\n    if right_child < len(arr):\n        if arr[i] < arr[right_child]:\n            print(\"checking element: \", arr[i])\n            print(\"right child: \", right_child)\n            print(\"False\")\n            return False\n    # if we have reached the end and nothing has been returned, then this is a min heap\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    left = 2 * i + 1\n    right = 2 * i + 2\n    valid = True\n    if left < len(arr) and arr[left] > arr[0]:\n        valid = False\n    if right < len(arr) and arr[right] > arr[0]:\n        valid = False\n    return valid and check_min_heap_helper(arr[1:], i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    for j in range(i):\n        if arr[j] > arr[(j+1)//2-1]:\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or i < 0:\n        return \"Invalid index\"\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # it's a min heap\n    return True if arr[i] <= arr[i // 2] else False\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return\n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    return check_min_heap_helper(arr, (i-1)//2)\n    \ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # index of the last non-leaf node\n    n = len(arr)\n    if n < 2:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[(2*i)+1]:\n        return False\n    if arr[i] >= arr[(2*i)+2]:\n        return False\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    assert (n >= 1)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    else:\n        return (jacobsthal_num(n - 1) + jacobsthal_num(n - 2))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0: return 0\n    return n+(4*jacobsthal_num(n-1))\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    jn = [1]\n    \n    def jacobsthal_series(n): \n    \n        if len(jn)>n:\n            return jn[n]\n        else:\n            jn.append(jn[-1]*2+3)\n            return jacobsthal_series(n)\n    \n    return jacobsthal_series(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<2:\n        return n\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 1: return 0\n    if n == 2: return 1\n    else:\n        ans = 0\n        k = 2\n        while k <= n:\n            ans = (ans + jacobsthal_num(k)) % n\n            k += 1\n        return ans\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp_dict = {}\n    for x in test_list:\n        if x in temp_dict:\n            temp_dict[x] = temp_dict[x] + 1\n        else:\n            temp_dict[x] = 1\n    sorted_dict = sorted(temp_dict.items(), key=lambda x: x[1])\n    return sorted_dict[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    temp = []\n    for item in test_list:\n        if item[1] == K:\n            temp.append(item)\n    return temp\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    return test_list[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    tmp_list = []\n    for i in range(K):\n        tmp_list.append(min(test_list))\n        test_list.remove(min(test_list))\n    return tmp_list\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return [test_list[i][0] for i in range(K)]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Initialize variables\n    final_list = []\n    final_set = set()\n    tuples_dict = {}\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key = lambda x:x[1])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    return sorted(test_list, key = lambda x: x[1])[:K]\n"
    },
    {
        "number": 753,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #print(f\"input: test_list = {test_list}, K = {K}\")\n    #return -1\n    # trivial answer\n    if len(test_list) < K:\n        return -1\n    return sorted(test_list, key=lambda tup: tup[2])[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # initialize an empty list for the results\n    result = []\n    # define a set for faster lookups\n    s = set()\n    # iterate through the lists\n    for i in range(len(l1)):\n        # check if the element at index i is also present in other lists\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            # if yes, add it to the results list\n            result.append(l1[i])\n            # and add it to the set as well\n            s.add(l1[i])\n    # return the intersection of the three sets\n    return s\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    common_elements.append(l1[i])\n    return common_elements\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l1[i] == l3[k] and l1[i] not in l:\n                    l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements\n    # pass\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    assert(len(l1) == len(l2) and len(l2) == len(l3))\n    ret = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            ret.append(l1[i])\n    return ret\n    #Another way without asserts:\n    #return [l1[i] for i in range(len(l1)) if l1[i] in l2[i] and l1[i] in l3[i]]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Start coding your solution here\n    ret_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3:\n            ret_list.append(l1[i])\n    return ret_list\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for i, x in enumerate(l1) if i in l2 and i in l3]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [x for i, x in enumerate(l1) if x in l2 and x in l3 if i == l2.index(x) and i == l3.index(x)]\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    n1 = len(l1)\n    n2 = len(l2)\n    n3 = len(l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # TODO: Write your code here\n    l = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            l.append(l1[i])\n    return l\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the numbers\n    numbers.sort()\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers = set(numbers)\n    numbers = list(numbers)\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    m1, m2 = float('inf'), float('inf')\n    for n in numbers:\n        if n < m1:\n            m1, m2 = n, m1\n        elif n < m2:\n            m2 = n\n    return m2\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    for i in range(len(numbers)):\n        if i!= 0 and numbers[i] < numbers[i-1]:\n            return numbers[i]\n    return None\n    \ndef sort_colors(nums):\n    '''\n    Sort a list of color names by their number of occurrences.\n    '''\n    from collections import Counter\n    c = Counter(nums)\n    return c.most_common()\n    \ndef diagonal_sum(matrix):\n    '''\n    Given a square matrix, return the sum of the matrix diagonals.\n    '''\n    total = 0\n    for i in range(len(matrix)):\n        total += matrix[i][i]\n        total += matrix[i][len(matrix)-i-1]\n    return total\n    \ndef find_duplicates(numbers):\n    '''\n    Given an array of integers, return a list of the consecutive integers that\n    have duplicates in the list.\n    '''\n    numbers_set = set(numbers)\n    duplicate_numbers = []\n    for i in range(len(numbers_set)):\n        if numbers.count(numbers_set[i]) > 1:\n            duplicate_numbers.append(numbers_set[i])\n    return duplicate_numbers\n    \ndef shift_list(nums, i):\n    '''\n    Given a list of integers, return the result of shifting the entire list to\n    the right by i.\n    '''\n    return nums[i:] + nums[:i]\n    \ndef pancake_sort(nums):\n    '''\n    Given a list of integers, sort the list in ascending order using only\n    pancake flips.\n    '''\n    for i in range(len(nums)):\n        max_index = nums.index(max(nums[0:len(nums)-i]))\n        nums = shift_list(nums, max_index)\n        nums = shift_list(nums, (i-1))\n        \n    return nums\n        \ndef list_length(nums):\n    '''\n    Given a list of integers, return the length of the list.\n    '''\n    return len(nums)\n    \ndef rotate_list(nums, k):\n    '''\n    Given a list of integers and an integer k, return the list of integers\n    rotated by k.\n    '''\n    return nums[k:] + nums[:k]\n    \ndef reverse_list(nums):\n    '''\n    Given a list of integers, return a new list such that the elements of the\n    original list are reversed.\n    '''\n    return nums[::-1]\n    \ndef reverse_list_in_place(nums):\n    '''\n    Given a list of integers, reverse the list in-place.\n    '''\n    for i in range(len(nums)//2):\n        nums[i], nums[-(i+1)] = nums[-(i+1)], nums[i]\n        \ndef move_zeros(nums):\n    '''\n    Given a list of numbers, move all of the zeros to the end of the list.\n    '''\n    zero = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.pop(i)\n            nums.append(0)\n    return nums\n    \ndef group_anagrams(strs):\n    '''\n    Given a list of strings, group the anagrams together.\n    '''\n    anagrams = {}\n    for i in range(len(strs)):\n        s = ''.join(sorted(strs[i]))\n        if s not in anagrams:\n            anagrams[s] = [strs[i]]\n        else:\n            anagrams[s].append(strs[i])\n    return list(anagrams.values())\n    \ndef intersection(arrays):\n    '''\n    Given an array of arrays, return the intersection of the arrays.\n    '''\n    intersection = []\n    for i in range(len(arrays)):\n        for j in range(i+1, len(arrays)):\n            arrays[i] = set(arrays[i])\n            arrays[j] = set(arrays[j])\n            intersection.extend(list(arrays[i].intersection(arrays[j])))\n    return intersection\n    \ndef reverse_pair(strs):\n    '''\n    Given a list of strings, return the reverse of every other word in the list.\n    '''\n    reverse_strs = []\n    for i in range(len(strs)):\n        if i % 2 == 0:\n            reverse_strs.append(strs[i][::-1])\n        else:\n            reverse_strs.append(strs[i])\n    return reverse_strs\n    \ndef find_pairs(nums, target):\n    '''\n    Given a list of numbers, return a list of pairs of numbers that sum up to\n    the target value.\n    '''\n    pairs = []\n    for i in range(len(nums)):\n        if target - nums[i] in nums[i+1:]:\n            pairs.append([nums[i], target - nums[i]])\n    return pairs\n    \ndef reverse_string(str):\n    '''\n    Given a string, return the reverse of the string.\n    '''\n    return str[::-1]\n    \ndef sort_by_length(strs):\n    '''\n    Given a list of strings, sort the strings in ascending order by length.\n    '''\n    return sorted(strs, key=len)\n    \ndef smallest_multiple(nums):\n    '''\n    Given a list of integers, return the smallest positive integer that is\n    a multiple of each number.\n    '''\n    smallest = 1\n    for i in range(len(nums)):\n        smallest *= nums[i]\n    smallest = smallest/nums[0]\n    for i in range(1, len(nums)):\n        smallest = smallest * nums[i]\n    return smallest\n    \ndef rotate_matrix(matrix):\n    '''\n    Given a square matrix, rotate it 90 degrees clockwise.\n    '''\n    n = len(matrix)\n    for i in range(n//2):\n        for j in range(i, n-i-1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n-j-1][i]\n            matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\n            matrix[n-i-1][n-j-1] = matrix[j][n-i-1]\n            matrix[j][n-i-1] = temp\n    return matrix\n    \ndef backspace(str):\n    '''\n    Given a string, return the string after removing all backspaces.\n    '''\n    backspace_count = 0\n    new_string = []\n    for i in range(len(str)):\n        if str[i] == '#':\n            backspace_count += 1\n        else:\n            if backspace_count > 0:\n                backspace_count -= 1\n            else:\n                new_string.append(str[i])\n    return ''.join(new_string)\n    \ndef check_permutation(str1, str2):\n    '''\n    Given two strings, return true if they are permutations of each other.\n    '''\n    return ''.join(sorted(str1)) == ''.join(sorted(str2))\n    \ndef move_zeros(nums):\n    '''\n    Given an array of numbers, move all of the zeros to the end of the array\n    while maintaining the relative order of the other elements.\n    '''\n    i = 0\n    j = len(nums) - 1\n    while i < j:\n        if nums[i] == 0 and nums[j]!= 0:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n        elif nums[i]!= 0:\n            i += 1\n        e"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    my_list = numbers\n    my_list.sort()\n    return my_list[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    try:\n        numbers.sort()\n        return numbers[1]\n    except:\n        return \"No se puede completar la operacion\"\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    list1 = sorted(numbers)\n    if len(list1)>=2:\n        return list1[1]\n    else:\n        return 0\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r\"(\\s?[ab]+)+\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'\\ba\\w*\\b'\n    if re.search(pattern, text):\n        return('True')\n    else:\n        return('False')\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'ab*')\n    if pattern.search(text):\n        print(\"Matched\")\n    else:\n        print(\"Not Matched\")\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(r'a\\bb*', text)\n    print(match)\n    # OUTPUT: ['b', 'bb', 'bbbb']\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return bool(re.search(r'[abc]*a',text))\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search('a+b',text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(r\"a\\wb*\", text)\n    if match:\n        return \"Match\"\n    else:\n        return \"No Match\"\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b*')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n    \ndef text_match_one_or_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b*')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n        \ndef text_match_exactly_zero_or_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b?')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n        \ndef text_match_exactly_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly one 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b+')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n        \ndef text_match_exactly_n(text, n):\n    '''\n    Write a function that matches a string that has an 'a' followed by exactly n 'b'. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.b{' + str(n) + '}')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'ab*', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'a.b+'\n    if re.search(pattern, text):\n        return 'Found a match!'\n    else:\n        return('Not matched!')\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l = len(test_list)\n    rev = []\n    for i in range(l):\n        rev.append(test_list[i][::-1])\n    rev.sort()\n    count = 0\n    for i in range(l-1):\n        for j in range(i+1, l):\n            if rev[i] == rev[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    len_test_list = len(test_list)\n    count_pairs = 0\n    for i in range(0, len_test_list):\n        for j in range(i+1, len_test_list):\n            if test_list[i][::-1] == test_list[j]:\n                count_pairs += 1\n    return count_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if(test_list[i][::-1] == test_list[j]):\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if is_reverse_string(test_list[i], test_list[j]) == True:\n                reverse_pairs = reverse_pairs + 1\n    return reverse_pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    print('Original List:', test_list)\n    print('Pair count:', sum(map(lambda x: 1 if x in x[::-1] else 0, test_list)))\n    return sum(map(lambda x: 1 if x in x[::-1] else 0, test_list))\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = set()\n    for i in test_list:\n        s.add(i[::-1])\n    return len(s)\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return sum([test_list.count(str(test_list[i])[::-1]) for i in range(len(test_list))])\n"
    },
    {
        "number": 757,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    l = []\n    for word in test_list:\n        temp = word[::-1]\n        if temp in l:\n            l.append(word)\n    print(l)\n    print(len(l))\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for item in list1:\n        key = tuple(item)\n        if key in result:\n            result[key] += 1\n        else:\n            result[key] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    x = len(list1)\n    sublists = []\n    for i in range(x):\n        for j in range(i+1,x+1):\n            sublist = list1[i:j]\n            sublists.append(sublist)\n    sublists = tuple(sublists)\n    my_dict = {}\n    for list1 in sublists:\n        my_dict[list1] = sublists.count(list1)\n    return my_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #solution:\n    list_counts = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in list_counts.keys():\n            list_counts[tuple_sublist] += 1\n        else:\n            list_counts[tuple_sublist] = 1\n    return list_counts\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for elem in list1:\n        if tuple(elem) in result:\n            result[tuple(elem)] += 1\n        else:\n            result[tuple(elem)] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return set(tuple(x) for x in list1)\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2=list1[:]\n    list3=list1[:]\n    list4=list1[:]\n    for i in range(len(list1)):\n        list2.append(list2[i][:])\n        list3.append(list3[i][:])\n    list2[0][0]='X'\n    list3[0][0]='X'\n    for i in range(len(list1)):\n        list4.append(list4[i][:])\n    dict1={tuple(list2[0]):1}\n    for i in range(len(list1)):\n        if(tuple(list3[i]) in dict1.keys()):\n            dict1[tuple(list3[i])]=dict1[tuple(list3[i])]+1\n        else:\n            dict1[tuple(list3[i])]=1\n    dict2={tuple(list4[0]):1}\n    for i in range(len(list1)):\n        if(tuple(list4[i]) in dict2.keys()):\n            dict2[tuple(list4[i])]=dict2[tuple(list4[i])]+1\n        else:\n            dict2[tuple(list4[i])]=1\n    dict3=dict(list(dict1.items())+list(dict2.items()))\n    return dict3\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def group_by(list_in):\n        list_out = []\n        for i in list_in:\n            if i in list_out:\n                pass\n            else:\n                list_out.append(i)\n        return list_out\n    def count_occurences(list1):\n        list2 = group_by(list1)\n        list_out = {}\n        for i in list2:\n            counter = 0\n            for j in list1:\n                if i == j:\n                    counter += 1\n            list_out[i] = counter\n        return list_out\n    list_out = count_occurences(list1)\n    return list_out\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_dict = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        list_dict[tup] = list_dict.get(tup,0) + 1\n    return list_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list_of_lists = []\n    for sublist in list1:\n        list_of_lists.append(tuple(sublist))\n    return dict((i,list_of_lists.count(i)) for i in list_of_lists)\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num,str):\n        return False\n    s = num.split('.')\n    if len(s) == 1:\n        return False\n    else:\n        if s[0].isdigit() and s[1].isdigit():\n            if len(s[0]) == 1:\n                return False\n            else:\n                return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not num:\n        return False\n    num = num.replace('.', '', 1)\n    if not num:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if num.count('.') == 1:\n            i = num.index('.')\n            return float(num[:i])+float(num[i+1:])/100\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num.isdecimal()\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #checks if the digits in the input string is decimal and has 2 digits after the decimal\n    return num.isdecimal() and len(num.split('.')[-1]) == 2\n    \nprint(is_decimal(\"10.2\"))\nprint(is_decimal(\"1.0\"))\nprint(is_decimal(\"10.0\"))\nprint(is_decimal(\"12.34\"))\nprint(is_decimal(\"123.45\"))\nprint(is_decimal(\"1234.5\"))\nprint(is_decimal(\"12345.6\"))\nprint(is_decimal(\"123456.7\"))\nprint(is_decimal(\"-3.14\"))\nprint(is_decimal(\"+3.14\"))\nprint(is_decimal(\"3.14\"))\nprint(is_decimal(\"0.0\"))\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    def is_decimal(num):\n        if num[0] == '-' and num[1:].isdigit() and '.' in num:\n            return True\n        if num.isdigit() and '.' in num:\n            return True\n        return False\n    return is_decimal\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num[0] == '-' or num[0] == '+':\n        num = num[1:]\n    if '.' in num:\n        left, right = num.split('.')\n        if len(left) > 1 or len(right) > 1:\n            return False\n        if int(left + right) == float(left + right):\n            return True\n        else:\n            return False\n    else:\n        return True\n    \n    \n    \n    \ndef is_decimal2(num):\n    if num[0] == '-' or num[0] == '+':\n        num = num[1:]\n    if '.' in num:\n        left, right = num.split('.')\n        if len(left) > 1 or len(right) > 1:\n            return False\n        if int(left + right) == float(left + right):\n            return True\n        else:\n            return False\n    else:\n        return True\n"
    },
    {
        "number": 759,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for x in arr:\n        if arr.count(x)>1:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #arr = [9, 6, 3, 4, 3, 1]\n    if len(arr) == 1:\n        return True\n    elif len(arr) == 2:\n        return True if arr[0]!= arr[1] else False\n    elif len(arr) >= 3:\n        for x in range(len(arr)-1):\n            if arr[x] == arr[x+1]:\n                return False\n            else:\n                pass\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)>1:\n        for i in range(0,len(arr)):\n            for j in range(i+1,len(arr)):\n                if arr[i] == arr[j]:\n                    return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i == j:\n                continue\n            if arr[i] == arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # arr = [1,1,1,2,3,4,4,4,5,5,5,6]\n    arr = [1,1,2,3,4,4,4,5,6,7,8,8,9]\n    \n    new_list = []\n    for i in arr:\n        if i not in new_list:\n            new_list.append(i)\n    if len(new_list) == len(arr):\n        print(\"The list contains only one distinct element: \",new_list[0])\n    else:\n        print(\"The list contains more than one distinct element: \",new_list)\n    \n    '''\n    Write a python function to check whether a list of numbers contains only one unique element or not.\n    '''\n    # arr = [1,1,1,2,3,4,4,4,5,5,5,6]\n    # arr = [1,1,2,3,4,4,4,5,6,7,8,8,9]\n    \n    # new_list = []\n    # for i in arr:\n    #     if i not in new_list:\n    #         new_list.append(i)\n    \n    # if len(new_list) == len(arr):\n    #     print(\"The list contains only one unique element: \",new_list[0])\n    # else:\n    #     print(\"The list contains more than one unique element: \",new_list)\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # converting list into set\n    arr = set(arr)\n    # checking whether the length of the array is equal to the length of the set of array\n    if len(arr) == len(arr):\n        print('All elements are unique in the list')\n    else:\n        print('There are duplicate elements in the list')\n    return\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    num_set = set(arr)\n    print(num_set)\n    return len(num_set) <= 1\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == len(arr)\n"
    },
    {
        "number": 760,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 12 and monthnum3 >= 1:\n        if monthnum3 in [4, 6, 9, 11]:\n            return 30\n        elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"February\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30 days\"\n    else:\n        return \"31 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or 3 or 5 or 7 or 8 or 10 or 12:\n        print(\"30 days\")\n    elif monthnum3 == 4 or 6 or 9 or 11:\n        print(\"31 days\")\n    else:\n        print(\"28 or 29 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    #use if statement to check whether monthnum is greater than or equal to 12. If yes, print a message saying month number is invalid.\n    #else, if monthnum is less than 12, then check whether monthnum is greater than or equal to 1. If yes, then calculate whether monthnum is divisible by 3 or not.\n    #If yes, then print that number of days in the month. Else, print that number of days is not possible in that month.\n    #else, print that number of days is invalid month number.\n    month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    month_names = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    if monthnum3 >= 12:\n        print(\"\\nMonth number is invalid.\")\n    else:\n        if monthnum3 <= 12:\n            if monthnum3 > 1:\n                if monthnum3 % 3 == 0:\n                    print(\"\\nNumber of days in\", month_names[monthnum3-1], \"is\", month_days[monthnum3-1])\n                else:\n                    print(\"\\nNumber of days in\", month_names[monthnum3-1], \"is not divisible by 3.\")\n            else:\n                print(\"\\nNumber of days in\", month_names[monthnum3-1], \"is\", month_days[monthnum3-1])\n    return\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4,6,9,11]:\n        return 30\n    elif monthnum3 in [1,3,5,7,8,10,12]:\n        return 31\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 in range(1, 13):\n        print(\"Month\", monthnum3, \"has 30 days\")\n    else:\n        print(\"Invalid month number\")\n    return\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==3 or monthnum3==5 or monthnum3==7 or monthnum3==8 or monthnum3==10 or monthnum3==12:\n        print(\"30 days\")\n    elif monthnum3==2:\n        print(\"28 or 29 days\")\n    else:\n        print(\"wrong input\")\ndef check_date_validity(date1):\n    '''\n    Write a function that checks whether the given date is valid and returns True or False\n    '''\n    month_num = date1.split('/')[0]\n    date = date1.split('/')[1]\n    year = date1.split('/')[2]\n    if month_num.isnumeric():\n        month_num = int(month_num)\n        if month_num<1 or month_num>12:\n            print(\"Invalid input\")\n    else:\n        print(\"Invalid input\")\n    if date.isnumeric():\n        date = int(date)\n        if month_num==1:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n        elif month_num==2:\n            if date<1 or date>29:\n                print(\"Invalid input\")\n        elif month_num==3:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n        elif month_num==4:\n            if date<1 or date>30:\n                print(\"Invalid input\")\n        elif month_num==5:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n        elif month_num==6:\n            if date<1 or date>30:\n                print(\"Invalid input\")\n        elif month_num==7:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n        elif month_num==8:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n        elif month_num==9:\n            if date<1 or date>30:\n                print(\"Invalid input\")\n        elif month_num==10:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n        elif month_num==11:\n            if date<1 or date>30:\n                print(\"Invalid input\")\n        else:\n            if date<1 or date>31:\n                print(\"Invalid input\")\n    else:\n        print(\"Invalid input\")\n    if year.isnumeric():\n        year = int(year)\n        if year<1 or year>3000:\n            print(\"Invalid input\")\n    else:\n        print(\"Invalid input\")\n    if len(date1)==10:\n        if date1[2]=='/' and date1[5]=='/':\n            if date1[0:2].isnumeric() and date1[3:5].isnumeric() and date1[6:].isnumeric():\n                print(\"True\")\n            else:\n                print(\"False\")\n        else:\n            print(\"False\")\n    else:\n        print(\"False\")\ndef check_am_pm(am_pm):\n    '''\n    Write a function to check whether the given string is AM/PM or not and returns True or False\n    '''\n    if am_pm=='AM' or am_pm=='PM':\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_day_month(day_month):\n    '''\n    Write a function to check whether the given string is a day of the week or not and returns True or False\n    '''\n    if day_month=='Saturday' or day_month=='Sunday' or day_month=='Monday' or day_month=='Tuesday' or day_month=='Wednesday' or day_month=='Thursday' or day_month=='Friday':\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_am_pm_dob(am_pm_dob):\n    '''\n    Write a function to check whether the given string is AM/PM and day of the week or not and returns True or False\n    '''\n    if am_pm_dob=='AM' or am_pm_dob=='PM' or day_month=='Saturday' or day_month=='Sunday' or day_month=='Monday' or day_month=='Tuesday' or day_month=='Wednesday' or day_month=='Thursday' or day_month=='Friday':\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_day_month_year(day_month_year):\n    '''\n    Write a function to check whether the given string is a day of the month or not and returns True or False\n    '''\n    if day_month_year=='1st' or day_month_year=='2nd' or day_month_year=='3rd' or day_month_year=='4th' or day_month_year=='5th' or day_month_year=='6th' or day_month_year=='7th' or day_month_year=='8th' or day_month_year=='9th' or day_month_year=='10th' or day_month_year=='11th' or day_month_year=='12th' or day_month_year=='13th' or day_month_year=='14th' or day_month_year=='15th' or day_month_year=='16th' or day_month_year=='17th' or day_month_year=='18th' or day_month_year=='19th' or day_month_year=='20th' or day_month_year=='21st' or day_month_year=='22nd' or day_month_year=='23rd' or day_month_year=='24th' or day_month_year=='25th' or day_month_year=='26th' or day_month_year=='27th' or day_month_year=='28th' or day_month_year=='29th' or day_month_year=='30th' or day_month_year=='31st':\n        print(\"True\")\n    else:\n        print(\"False\")\ndef check_date_validity_dob(date_dob):\n    '''\n    Write a function to check whether the given string is a valid date or not and returns True or False\n    '''\n    day_month_year = date_dob.split('/')\n    if day_month_year[0].isnumeric() and day_month_year[1].isnumeric() and day_month_year[2].isnumeric():\n        if int(day_month_year[0])>0 and int(day_month_year[0])<32:\n            if int(day_month_year[1])>0 and int(day_month_year[1])<13:\n                if int(day_month_year[2])>0 and int(day_month_year[2])<9001:\n                    print(\"True\")\n                else:\n                    print(\"False\")\n            else:\n                print(\"False\")\n        else:\n            print(\"False\")\n    else:\n        print(\"False\")\ndef check_year_validity_dob(year_dob):\n    '''\n    Write a function to check whether the given string is a valid year or not and returns True or False\n    '''\n    if year_dob.isnumeric():\n        year = year_dob\n        if int(year)>0 and int(year)<10000:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"False\")\ndef check_month_validity_dob(month_dob):\n    '''\n    Write a function to check whether the given string is a valid month or not and returns True or False\n    '''\n    if month_dob.isnumeric():\n        month = month_dob\n        if int(month)>0 and int(month)<13:\n            print(\"True\")\n        else:\n            print(\"False\")\n    else:\n        print(\"False\")\ndef check_date_validity_doc(date_doc):\n    '''\n    Write a function to check whether the given string is a valid date or not and returns True or False\n    '''\n    day_month_year = date_doc.split('/')\n    i"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber_number=1,2,3,4,5,6,7,8,9,10,11,12\n    month=1,2,3,4,5,6,7,8,9,10,11,12\n    if monthnum3 in monthnumber_number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        print(\"You have entered a month having 30 days\")\n    elif monthnum3 in [4, 6, 9, 11]:\n        print(\"You have entered a month having 30 days\")\n    elif monthnum3 == 2:\n        print(\"You have entered a month having 28 or 29 days\")\n    else:\n        print(\"You have entered a month having 30 days\")\n"
    },
    {
        "number": 762,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\ndef check_monthnumber_name(monthname3):\n    '''\n    Write a function to check whether the given month name contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthname3 == 'January' or monthname3 == 'March' or monthname3 == 'May' or monthname3 == 'July' or monthname3 == 'August' or monthname3 == 'October' or monthname3 == 'December':\n        return True\n    else:\n        return False\ndef check_monthnumber_text(monthtext3):\n    '''\n    Write a function to check whether the given month text contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthtext3 == 'January' or monthtext3 == 'March' or monthtext3 == 'May' or monthtext3 == 'July' or monthtext3 == 'August' or monthtext3 == 'October' or monthtext3 == 'December':\n        return True\n    else:\n        return False\ndef check_monthnumber_empty(monthempty3):\n    '''\n    Write a function to check whether the given month name is empty or not. Months are given as number from 1 to 12.\n    '''\n    if monthempty3 == '':\n        return True\n    else:\n        return False\ndef check_monthnumber_error(montherror3):\n    '''\n    Write a function to check whether the given month name contains more than one characters or not. Months are given as number from 1 to 12.\n    '''\n    if len(montherror3) > 1:\n        return True\n    else:\n        return False\ndef month_number_to_name(monthnum2):\n    '''\n    Write a function to convert month number to month name.\n    '''\n    if monthnum2 == 1:\n        return 'January'\n    elif monthnum2 == 2:\n        return 'February'\n    elif monthnum2 == 3:\n        return 'March'\n    elif monthnum2 == 4:\n        return 'April'\n    elif monthnum2 == 5:\n        return 'May'\n    elif monthnum2 == 6:\n        return 'June'\n    elif monthnum2 == 7:\n        return 'July'\n    elif monthnum2 == 8:\n        return 'August'\n    elif monthnum2 == 9:\n        return 'September'\n    elif monthnum2 == 10:\n        return 'October'\n    elif monthnum2 == 11:\n        return 'November'\n    elif monthnum2 == 12:\n        return 'December'\n    else:\n        return 'Error'\ndef month_name_to_number(monthname4):\n    '''\n    Write a function to convert month name to month number.\n    '''\n    if monthname4 == 'January':\n        return 1\n    elif monthname4 == 'February':\n        return 2\n    elif monthname4 == 'March':\n        return 3\n    elif monthname4 == 'April':\n        return 4\n    elif monthname4 == 'May':\n        return 5\n    elif monthname4 == 'June':\n        return 6\n    elif monthname4 == 'July':\n        return 7\n    elif monthname4 == 'August':\n        return 8\n    elif monthname4 == 'September':\n        return 9\n    elif monthname4 == 'October':\n        return 10\n    elif monthname4 == 'November':\n        return 11\n    elif monthname4 == 'December':\n        return 12\n    else:\n        return 'Error'\ndef month_text_to_number(monthtext5):\n    '''\n    Write a function to convert month text to month number.\n    '''\n    if monthtext5 == 'January':\n        return 1\n    elif monthtext5 == 'February':\n        return 2\n    elif monthtext5 == 'March':\n        return 3\n    elif monthtext5 == 'April':\n        return 4\n    elif monthtext5 == 'May':\n        return 5\n    elif monthtext5 == 'June':\n        return 6\n    elif monthtext5 == 'July':\n        return 7\n    elif monthtext5 == 'August':\n        return 8\n    elif monthtext5 == 'September':\n        return 9\n    elif monthtext5 == 'October':\n        return 10\n    elif monthtext5 == 'November':\n        return 11\n    elif monthtext5 == 'December':\n        return 12\n    else:\n        return 'Error'\ndef month_number_to_text(monthnum6):\n    '''\n    Write a function to convert month number to month text.\n    '''\n    if monthnum6 == 1:\n        return 'January'\n    elif monthnum6 == 2:\n        return 'February'\n    elif monthnum6 == 3:\n        return 'March'\n    elif monthnum6 == 4:\n        return 'April'\n    elif monthnum6 == 5:\n        return 'May'\n    elif monthnum6 == 6:\n        return 'June'\n    elif monthnum6 == 7:\n        return 'July'\n    elif monthnum6 == 8:\n        return 'August'\n    elif monthnum6 == 9:\n        return 'September'\n    elif monthnum6 == 10:\n        return 'October'\n    elif monthnum6 == 11:\n        return 'November'\n    elif monthnum6 == 12:\n        return 'December'\n    else:\n        return 'Error'\ndef month_text_to_name(monthtext6):\n    '''\n    Write a function to convert month text to month name.\n    '''\n    if monthtext6 == 'January':\n        return 'January'\n    elif monthtext6 == 'February':\n        return 'February'\n    elif monthtext6 == 'March':\n        return 'March'\n    elif monthtext6 == 'April':\n        return 'April'\n    elif monthtext6 == 'May':\n        return 'May'\n    elif monthtext6 == 'June':\n        return 'June'\n    elif monthtext6 == 'July':\n        return 'July'\n    elif monthtext6 == 'August':\n        return 'August'\n    elif monthtext6 == 'September':\n        return 'September'\n    elif monthtext6 == 'October':\n        return 'October'\n    elif monthtext6 == 'November':\n        return 'November'\n    elif monthtext6 == 'December':\n        return 'December'\n    else:\n        return 'Error'\ndef month_empty_to_number(monthempty7):\n    '''\n    Write a function to convert month name to month number.\n    '''\n    if monthempty7 == '':\n        return 'Error'\n    else:\n        return 'Error'\ndef month_number_error(montherror7):\n    '''\n    Write a function to check whether the given month number contains more than one characters or not. Months are given as number from 1 to 12.\n    '''\n    if len(montherror7) > 1:\n        return True\n    else:\n        return False\ndef month_number_to_empty(monthnum7):\n    '''\n    Write a function to convert month number to month name.\n    '''\n    if monthnum7 == 1:\n        return 'January'\n    elif monthnum7 == 2:\n        return 'February'\n    elif monthnum7 == 3:\n        return 'March'\n    elif monthnum7 == 4:\n        return 'April'\n    elif monthnum7 == 5:\n        return 'May'\n    elif monthnum7 == 6:\n        return 'June'\n    elif monthnum7 == 7:\n        return 'July'\n    elif monthnum7 == 8:\n        return 'August'\n    elif monthnum7 == 9:\n        return 'September'\n    elif monthnum7 == 10:\n        return 'October'\n    elif monthnum7 == 11:\n        return 'November'\n    elif monthnum7 == 12:\n        return 'December'\n    else:\n        return 'Error'\ndef month_error_to_name(montherror8):\n    '''\n    Write a functio"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[n-1] - arr[0]\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[j] - arr[i] < min_diff:\n                min_diff = arr[j] - arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    mini = arr[1] - arr[0]\n    for i in range(n-1):\n        if (arr[i+1]-arr[i] < mini):\n            mini = arr[i+1] - arr[i]\n    return mini\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the given array\n    arr.sort()\n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort array for easy handling\n    arr.sort()\n    # difference between the consecutive elements\n    min_diff = arr[1] - arr[0]\n    # traverse the array\n    for i in range(1, n): \n        # Find the minimum difference\n        # between current pair of elements\n        if arr[i] - arr[i-1] < min_diff:\n            min_diff = arr[i] - arr[i-1]\n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array for finding minimum difference \n    arr.sort() \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # Sort the array. \n    # Modify the previous solution to modify the array. \n    # This is same as maximum difference between two elements. \n    arr.sort() \n    # Find the max difference between adjacent elements. \n    maxdiff = arr[n-1] - arr[0] \n    for i in range(1,n): \n        maxdiff = min(maxdiff, arr[i]-arr[i-1]) \n    return maxdiff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # sort the array\n    arr.sort() \n    # initialize the result\n    min_diff = arr[1] - arr[0] \n    for i in range(1, n): \n        if (arr[i] - arr[i - 1] < min_diff): \n            min_diff = arr[i] - arr[i - 1] \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    ans = arr[1] - arr[0] \n    for i in range(1, n): \n        ans = min(ans, arr[i] - arr[i - 1]) \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort() \n    min_diff = arr[1] - arr[0] \n    for i in range(n): \n        if (arr[i+1] - arr[i] < min_diff): \n            min_diff = arr[i+1] - arr[i] \n    return min_diff \n"
    },
    {
        "number": 763,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = arr[1] - arr[0] \n    for i in range(0,n):\n        for j in range(i+1,n):\n            diff = arr[j] - arr[i]\n            if(min_diff > diff):\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len([x for x in str if x.isdigit()])\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isdigit():\n            ctr += 1\n    return ctr\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num_digits = 0\n    for char in str:\n        if char.isdigit():\n            num_digits += 1\n    return num_digits\n"
    },
    {
        "number": 764,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def polite(x, n):\n        if x == 0:\n            return 1\n        return polite(x-1, n) + n * polite(x-1, n-1) \n    return polite(n, n)\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if n % 2 == 0: \n        return False\n    else: \n        return True\n    \n    \ndef count_polite_numbers(n): \n    count = 0\n    for i in range(1, n + 1): \n        if is_polite(i): \n            count = count + 1\n    return count\n    \ndef largest_product_in_a_series(series, number_of_terms):\n    '''\n    Write a function to find the largest product of n consecutive positive integers.\n    '''\n    \n    #series = str(input(\"enter series\"))\n    #number_of_terms = int(input(\"enter number of terms\"))\n    \n    if number_of_terms == 1: \n        return int(series)\n    if number_of_terms == 2:\n        return int(series[0]) * int(series[1])\n    else:\n        max_product = 0\n        if number_of_terms > 0 and number_of_terms < len(series): \n            for i in range(0, len(series) - number_of_terms + 1):\n                product = 1\n                for j in range(0, number_of_terms):\n                    product = product * int(series[i + j])\n                if product > max_product: \n                    max_product = product\n            return max_product\n        else: \n            return 0\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    p = [0] * n\n    p[0] = 1\n    for i in range(2, n+1):\n        p[i-1] = i * p[i-2]\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # trivial cases \n    if n == 1: \n        return 1\n    elif n == 2: \n        return 2\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return (n * (n+1))//2 - sum\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    #n = int(input(\"Enter the number: \"))\n    polite = [i for i in range(1,101)]\n    for i in range(2,101):\n        for j in range(2,i):\n            if i%j == 0:\n                polite[i] = 0\n    return polite[n]\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n < 2: \n        return 1 \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n == 1): \n        return 1 \n    if(n < 1): \n        return -1 \n    return (2 + (is_polite(n-1))) \n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0: \n        return \"no\"\n    if n == 1: \n        return \"yes\"\n    if n == 2: \n        return \"no\"\n    p = [0] * (n + 1) \n    p[0] = 1\n    p[1] = 1\n    i = 2\n    for i in range(2, n + 1): \n        p[i] = p[i - 1] + i - 1\n    return \"yes\" if p[n - 1] == (n - 1) else \"no\"\n"
    },
    {
        "number": 765,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # for i in range(1,n+1):\n    #     print(\"polite number is \",i)\n    #     if i%2==0:\n    #         print(\"Even : \",i)\n    #     else:\n    #         print(\"Odd : \",i)\n    #     if i%6==0:\n    #         print(\"Divisible by 6 : \",i)\n    #     else:\n    #         print(\"Not divisible by 6 : \",i)\n    #     if i%3==0:\n    #         print(\"Divisible by 3 : \",i)\n    #     else:\n    #         print(\"Not divisible by 3 : \",i)\n    #     if i%7==0:\n    #         print(\"Divisible by 7 : \",i)\n    #     else:\n    #         print(\"Not divisible by 7 : \",i)\n    #     if i%10==0:\n    #         print(\"Divisible by 10 : \",i)\n    #     else:\n    #         print(\"Not divisible by 10 : \",i)\n    #     if i%2==0 and i%3==0 and i%7==0 and i%10==0:\n    #         print(\"This is a polite number\")\n    #     else:\n    #         print(\"This is not a polite number\")\n    #     print(\"-------------------------\")\n    # # print(\"------------------------------\")\n    # # print(i)\n    # # print(\"------------------------------\")\n    # # return i\n    \n    # the function should return the n-th polite number. The 1st polite number is the product of the 3 numbers that make up the number. e.g. 1st = 3, 2nd = 6, 3rd = 10.\n    # To find the nth polite number, we iterate through the numbers from 1 to n and check if the current number is a product of any 3 consecutive numbers.\n    # if it is, we increment the number of consecutive products and check if it is a product of the next consecutive numbers.\n    # if it is, we keep incrementing the consecutive numbers.\n    # if we reach the end of the loop without seeing a consecutive number that meets the requirements, it is not a polite number\n    # if it is, we return the current number\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        raise Exception(\"Input list has to be at least 2 long.\")\n    return list(zip(l1[:-1], l1[1:]))\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1)<2:\n        return\n    l2=[]\n    for i in range(len(l1)):\n        if i==len(l1)-1:\n            break\n        l2.append([l1[i],l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(0, len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [[l1[i],l1[i+1]] for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    s = ''\n    for l in l1:\n        s += str(l)\n    return [eval(s[0:i] + ',' + s[i:i+2]) for i in range(len(s) - 1) if (s[i] + s[i+1]) in s]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    #print(list(combinations(l1,2)))\n    for i in range(len(l1)-1):\n        result.append((l1[i],l1[i+1]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    newl1 = []\n    for i in range(1, len(l1)):\n        newl1.append((l1[i-1], l1[i]))\n    return newl1\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i],l1[i+1]) for i in range(len(l1)-1)]\n"
    },
    {
        "number": 766,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    l2 = []\n    for i in range(len(l1) - 1):\n        l2.append([l1[i], l1[i+1]])\n    \n    return l2\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    #brute force approach\n    # for i in range(len(arr)):\n    #     for j in range(i+1,len(arr)):\n    #         if arr[i] + arr[j] == sum:\n    #             return True\n    # return False\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j]==sum:\n                count+=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    counter = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    temp = set()\n    count = 0\n    for i in range(len(arr)):\n        temp.add(arr[i])\n    for i in arr:\n        if sum - i in temp:\n            count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    for i in range(0,len(arr)):\n        for j in range(0, len(arr)):\n            if i!=j and arr[i]+arr[j]==sum:\n                return 1\n    return 0\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pair_dict = {}\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum == arr[i] + arr[j]:\n                pair_dict[arr[i], arr[j]] = 1\n            elif sum == arr[j] + arr[i]:\n                pair_dict[arr[j], arr[i]] = 1\n"
    },
    {
        "number": 767,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    # Brute force\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(set(li1)-set(li2)))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif=list(set(li1) - set(li2))\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    li_dif = list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    for i in li2:\n        if i in li1:\n            li1.remove(i)\n    return li1\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n"
    },
    {
        "number": 769,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2] \n    return li_dif \n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([(i ** 4) % (10 ** 9) for i in range(1, n, 2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if(i%2!= 0) :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return ((n**4 * (n**2 + 1)) // 4)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    n = int(input())\n    sum = 0\n    i = 1\n    while(i<=n) :\n        sum = sum + ((i*4)**3)\n        i = i+2\n    print(sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n < 0 : \n        print(\"Only postive number please. Try again\")\n    elif n == 1 : \n        return n\n    elif n == 2 : \n        return 5\n    else : \n        return (n * (n + 1) * (n + 2) * (n + 3))/6\nprint(odd_num_sum(10))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum(map(lambda x: x * x * x, range(1, n, 2)))\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1) :\n        if i % 2 == 1 :\n            total += i*i*i*i\n    return total\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += (i+1)**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return (1+n) * (4*n*(n+1) - 1)/3\n"
    },
    {
        "number": 770,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #Initializing the sum to 0\n    sum = 0\n    for i in range(n) :\n        if i % 2 == 0 :\n            sum = sum + (i * i * i * i)\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in '(':\n            stack.append(i)\n        elif i in ')':\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    if len(stack)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening = ['(', '{', '[']\n    closing = [')', '}', ']']\n    for ch in exp:\n        if ch in opening:\n            stack.append(ch)\n        elif ch in closing:\n            if len(stack) > 0:\n                if ch == ')' and stack.pop()!= '(':\n                    return False\n                elif ch == '}' and stack.pop()!= '{':\n                    return False\n                elif ch == ']' and stack.pop()!= '[':\n                    return False\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    exp_len = len(exp)\n    stack = []\n    open_set = {\n        '(',\n        '{',\n        '[',\n    }\n    close_set = {\n        ')',\n        '}',\n        ']',\n    }\n    open_list = deque([])\n    if exp_len == 1:\n        return True\n    for i in range(exp_len):\n        if exp[i] in open_set:\n            open_list.append(exp[i])\n            stack.append(exp[i])\n        elif exp[i] in close_set:\n            if len(stack) == 0:\n                return False\n            else:\n                if exp[i] == ')' and stack[-1]!= '(':\n                    return False\n                elif exp[i] == '}' and stack[-1]!= '{':\n                    return False\n                elif exp[i] == ']' and stack[-1]!= '[':\n                    return False\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # Your code here\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    \n    queue = deque()\n    for i in exp:\n        if i == '(' or i == '{' or i == '[':\n            queue.append(i)\n        elif i == ')':\n            if len(queue) == 0:\n                return False\n            elif queue[-1] == '(':\n                queue.pop()\n            else:\n                return False\n        elif i == '}':\n            if len(queue) == 0:\n                return False\n            elif queue[-1] == '{':\n                queue.pop()\n            else:\n                return False\n        elif i == ']':\n            if len(queue) == 0:\n                return False\n            elif queue[-1] == '[':\n                queue.pop()\n            else:\n                return False\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    # print(\"expression to check:\",exp)\n    # balanced = True\n    # open_braces = 0\n    # close_braces = 0\n    # for c in exp:\n    #     if c in '({[':\n    #         open_braces += 1\n    #     elif c in ')}]':\n    #         close_braces += 1\n    # if open_braces!= close_braces:\n    #     balanced = False\n    # return balanced\n    open_braces = \"({[\"\n    close_braces = \")}]\"\n    braces_dict = dict()\n    for braces in open_braces:\n        braces_dict[braces] = 0\n    print(braces_dict)\n    for brace in exp:\n        if brace in open_braces:\n            braces_dict[brace] += 1\n        elif brace in close_braces:\n            braces_dict[brace] -= 1\n        else:\n            return False\n    for k in braces_dict.keys():\n        if braces_dict[k]!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    stack.append('#')\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i == ')' and stack.pop()!= '(':\n            return False\n        elif i == '}' and stack.pop()!= '{':\n            return False\n        elif i == ']' and stack.pop()!= '[':\n            return False\n    return len(stack) == 1\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    open_bracket=[\"(\",\"[\",\"{\"]\n    close_bracket=[\")\",\"]\",\"}\"]\n    dict_open_close=dict(zip(open_bracket,close_bracket))\n    queue=deque(exp)\n    while len(queue)>0:\n        current=queue.popleft()\n        if current in open_bracket:\n            stack.append(dict_open_close[current])\n        elif current in close_bracket:\n            if len(stack)>0 and current==dict_open_close[stack[-1]]:\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == \"(\" or i == \"[\" or i == \"{\":\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\ndef balanced_parentheses(exp):\n    # Write your code here\n    stack = deque()\n    for i in exp:\n        if i == \"(\" or i == \"[\" or i == \"{\":\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\ndef is_valid(s):\n    '''\n    Write a function to check if the parentheses in the expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in s:\n        if i in \"([{\":\n            stack.append(i)\n        else:\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\ndef check_brackets(s):\n    stack = deque()\n    for i in s:\n        if i in \"{[(\":\n            stack.append(i)\n        elif i in \")]}\":\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\ndef find_closing_parentheses(s, open_par):\n    dic = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    stack = deque()\n    for char in s:\n        if char in open_par:\n            stack.append(char)\n        elif char in dic:\n            if not stack or stack[-1]!= dic[char]:\n                return False\n            stack.pop()\n    return not stack\ndef get_keys(dic, value):\n    return [k for k, v in dic.items() if v == value]\ndef find_unbalanced_paren(exp):\n    if check_expression(exp):\n        return True\n    else:\n        s = 0\n        for i in exp:\n            if i == \"(\" or i == \"[\" or i == \"{\":\n                s += 1\n            elif i == \")\" or i == \"]\" or i == \"}\":\n                s -= 1\n            if s < 0:\n                return False\n        if s == 0:\n            return True\n        else:\n            return False\ndef check_parenth_in_expression(exp):\n    s = 0\n    for i in exp:\n        if i == \"(\" or i == \"[\" or i == \"{\":\n            s += 1\n        elif i == \")\" or i == \"]\" or i == \"}\":\n            s -= 1\n            if s < 0:\n                return False\n    if s == 0:\n        return True\n    else:\n        return False\ndef get_unbalanced_op(exp):\n    stack = deque()\n    unbal_op = []\n    for i in exp:\n        if i in \"([{\":\n            stack.append(i)\n        elif i in \")]}\":\n            if not stack:\n                unbal_op.append(i)\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                unbal_op.append(i)\n    if not stack:\n        return unbal_op\n    else:\n        return False\ndef get_unbalanced_op_idx(exp):\n    stack = deque()\n    unbal_op = []\n    for idx, i in enumerate(exp):\n        if i in \"([{\":\n            stack.append(i)\n        elif i in \")]}\":\n            if not stack:\n                unbal_op.append(idx)\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                unbal_op.append(idx)\n    if not stack:\n        return unbal_op\n    else:\n        return False\ndef find_unbalanced_brackets(s):\n    stack = deque()\n    for i in s:\n        if i in \"([{\":\n            stack.append(i)\n        elif i in \")]}\":\n            if not stack:\n                return False\n            elif i == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif i == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif i == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\ndef has_balanced_brackets(s):\n    dic = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n    stack = deque()\n    for char in s:\n        if char in dic:\n            stack.append(char)\n        elif char in dic.values():\n            if not stack or stack[-1]!= dic[char]:\n                return False\n            stack.pop()\n    return not stack\ndef is_valid_parentheses(s):\n    stack = deque()\n    for char in s:\n        if char in \"({[\":\n            stack.append(char)\n        elif char in \")}]\":\n            if not stack:\n                return False\n            elif char == \")\" and stack[-1] == \"(\":\n                stack.pop()\n            elif char == \"}\" and stack[-1] == \"{\":\n                stack.pop()\n            elif char == \"]\" and stack[-1] == \"[\":\n                stack.pop()\n            else:\n                return False\n    return not stack\ndef convert_int_to_roman(num):\n    dic = {1: \"I\", 5: \"V\", 10: \"X\", 50: \"L\", 100: \"C\", 500: \"D\", 1000: \"M\"}\n    stack = deque()\n    for i in range(num, 0, -1):\n        if i in [1, 5, 10, 50, 100, 500, 1000]:\n            stack.append(i)\n        else:\n            if not stack or stack[-1]!= 1000:\n                stack.append(i)\n            else:\n                stack.pop()\n                stack.append(1000)\n                stack.append(i)\n    for i in range(len(stack)):\n        if i % 2 == 0:\n            stack[i"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    if K!= 0:\n        for word in test_str.split(' '):\n            if len(word)!= K:\n                new_str += word +''\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    while K > 0:\n        test_str = test_str.replace(' '*K +'','')\n        K -= 1\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split()\n    n = len(test_str)\n    count = 0\n    while count<n:\n        if len(test_str[count]) == K:\n            test_str.pop(count)\n            n -= 1\n        else:\n            count += 1\n    return''.join(test_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str =''.join(test_str.split())\n    test_list = test_str.split(' ')\n    i = 0\n    j = 0\n    new_str = ''\n    while j < len(test_list):\n        if len(test_list[j]) == K:\n            j = j + 1\n        else:\n            new_str = new_str + test_list[j] +''\n            j = j + 1\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(word for word in test_str.split() if len(word)!= K)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    def remove_length_helper(start, current, K, test_str):\n        if len(test_str[start:current+1]) == K:\n            return remove_length_helper(start, current+1, K, test_str)\n        else:\n            return start\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # We can use replace to remove substrings\n    # We can use filter to remove all the substring and then filter the new list\n    # We can use map to apply a function to all the elements in the list\n    # We can use list comprehension to achieve all the above in 1 line\n    # O(K) complexity\n    return list(filter(lambda x: len(x)!= K, test_str.split(\" \")))\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Your code here\n    lst = test_str.split()\n    print(lst)\n    out_lst = []\n    for item in lst:\n        if len(item) == K:\n            pass\n        else:\n            out_lst.append(item)\n"
    },
    {
        "number": 772,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_list = test_str.split(' ')\n    final_list = []\n    for i in test_list:\n        if len(i)!= K:\n            final_list.append(i)\n    print(final_list)\n    print(test_list)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        print('The pattern {} is present in the string {}'.format(pattern,text))\n        print('The pattern {} is present in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        print('The pattern {} occur in the string {}'.format(pattern,text))\n        pattern_occurances = text.count(pattern)"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    x = re.findall(pattern,text)\n    if x:\n        return x\n    else:\n        return None\n    \n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    return [m.start() for m in re.finditer(pattern, text)]\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.finditer(pattern, text)\n    return [(match.start(), match.end()) for match in result]\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use re.findall()\n    # https://stackoverflow.com/questions/15753390/how-can-i-find-all-occurrences-of-a-substring-in-python\n    # https://www.geeksforgeeks.org/python-find-the-index-of-substring-in-string/\n    # https://www.youtube.com/watch?v=DhLqz6QT_Sc&list=PLu9Yk-q0Ik1_XrL0PfhQZ_WriHjqY-_V&index=2\n    # https://www.geeksforgeeks.org/python-regex-findall-method/\n    # https://www.geeksforgeeks.org/python-find-matching-keyword-in-a-list/\n    # https://stackoverflow.com/questions/33695253/what-is-regex-for\n    result = re.findall(r'\\b%s\\b' % pattern, text)\n    if(len(result) > 0):\n        print(\"The first matching substring in {} is {}\".format(text,result[0]))\n        for i,item in enumerate(result):\n            print(\"The substring '{}' is found at index {}\".format(item,i))\n    else:\n        print(\"There is no matching substring in {}\".format(text))\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern = pattern.lower()\n    text = text.lower()\n    regex = re.compile(pattern)\n    matches = regex.findall(text)\n    if matches:\n        return matches,len(matches)\n    else:\n        return None\n    \n    \ndef first_last_words(text):\n    '''\n    Write a function that takes a string and returns a string with the first and last word of the input string.\n    '''\n    text = text.split()\n    text.insert(0,text[-1])\n    text.insert(len(text),text[0])\n    return''.join(text)\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    print(\"occurance substring\\n\",text,pattern)\n    print()\n    if pattern in text:\n        print(\"occurance substring result:\")\n        print(\"The pattern {} is in the string {}\".format(pattern,text))\n        print(\"The pattern {} first occurence in the string {} at the index {}\".format(pattern,text,text.find(pattern)))\n        print(\"The pattern {} last occurence in the string {} at the index {}\".format(pattern,text,text.rfind(pattern)))\n    else:\n        print(\"occurance substring result:\")\n        print(\"The pattern {} is not in the string {}\".format(pattern,text))\n        print(\"\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        print(\"The pattern \\\"{}\\\" is in \\\"{}\\\" at {}-{}\".format(pattern,text,match.start(),match.end()-1))\n        return match.start(), match.end()-1\n    else:\n        print(\"There is no match\")\n"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Implement your code here\n    result=re.search(pattern,text)\n    if result:\n        print(\"occurance of \",result.group(), \": \",result.start())\n    else:\n        print(\"There is no occurance of the pattern\")\n    \ndef index_substring(text,pattern):\n    '''\n    Write a function to find the position of a substring within a string. Return None if there is no match.\n    '''\n    # Implement your code here\n    result=re.search(pattern,text)\n    if result:\n        print(\"index of \",result.group(), \": \",result.start())\n    else:\n        print(\"There is no occurance of the pattern\")\n        \ndef replace_substring(text,pattern,replacement):\n    '''\n    Write a function to replace substrings within a string.\n    '''\n    # Implement your code here\n    result=re.sub(pattern,replacement,text)\n    print(result)\n    \ndef count_substring(text,pattern):\n    '''\n    Write a function to count the number of occurrences of a substring within a string.\n    '''\n    # Implement your code here\n    result=re.search(pattern,text)\n    if result:\n        print(\"occurance of \",result.group(), \": \",result.start())\n    else:\n        print(\"There is no occurance of the pattern\")\n        \ndef split_substring(text,pattern):\n    '''\n    Write a function to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    result=re.split(pattern,text)\n    print(result)\n    \ndef regex_substitue(text,pattern,replacement):\n    '''\n    Write a function to substitute a substring within a string with another substring.\n    '''\n    # Implement your code here\n    result=re.sub(pattern,replacement,text)\n    print(result)\n    \ndef regex_substitution(text,pattern,replacement):\n    '''\n    Write a function to substitute all the matches of a substring within a string with another substring.\n    '''\n    # Implement your code here\n    result=re.sub(pattern,replacement,text)\n    print(result)\n    \ndef regex_split(text,pattern):\n    '''\n    Write a function to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    result=re.split(pattern,text)\n    print(result)\n    \ndef regex_split_with_groups(text,pattern):\n    '''\n    Write a function to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    result=re.split(pattern,text)\n    print(result)\n    \ndef regex_split_with_group_index(text,pattern):\n    '''\n    Write a function to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    result=re.split(pattern,text)\n    print(result)\n    \ndef regex_compile_findall(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to find all the occurances of a substring within a string.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.findall(text)\n    print(result)\n    \ndef regex_compile_finditer(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to find all the occurances of a substring within a string.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.finditer(text)\n    for match in result:\n        print(match.group())\n    \ndef regex_compile_substitute(text,pattern,replacement):\n    '''\n    Write a function to compile a pattern and then use the pattern to replace all the occurances of a substring within a string with another substring.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.sub(replacement,text)\n    print(result)\n    \ndef regex_compile_split(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.split(text)\n    print(result)\n    \ndef regex_compile_split_with_groups(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.split(text)\n    print(result)\n    \ndef regex_compile_split_with_group_index(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.split(text)\n    print(result)\n    \ndef regex_compile_substitute_with_groups(text,pattern,replacement):\n    '''\n    Write a function to compile a pattern and then use the pattern to replace all the occurances of a substring within a string with another substring.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.sub(replacement,text)\n    print(result)\n    \ndef regex_compile_substitute_with_group_index(text,pattern,replacement):\n    '''\n    Write a function to compile a pattern and then use the pattern to replace all the occurances of a substring within a string with another substring.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.sub(replacement,text)\n    print(result)\n    \ndef regex_compile_findall_with_index(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to find all the occurances of a substring within a string.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.findall(text)\n    for match in result:\n        print(match)\n    \ndef regex_compile_finditer_with_index(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to find all the occurances of a substring within a string.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.finditer(text)\n    for match in result:\n        print(match.group())\n        print(match.start())\n        \ndef regex_compile_split_with_groups_with_index(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern)\n    result=pattern.split(text)\n    for index,string in enumerate(result):\n        print(string)\n        print(index)\n    \ndef regex_compile_split_with_groups_with_index_flag_flag_with_groups(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to split the string into several substrings wherever the match is found.\n    '''\n    # Implement your code here\n    pattern=re.compile(pattern,re.IGNORECASE)\n    result=pattern.split(text)\n    for index,string in enumerate(result):\n        print(string)\n        print(index)\n        \ndef regex_compile_findall_with_index(text,pattern):\n    '''\n    Write a function to compile a pattern and then use the pattern to find all the occurances of a substring within a string.\n    '''\n    # Implement your code her"
    },
    {
        "number": 773,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if text == \"\":\n        return None\n    else:\n        result = re.search(pattern, text)\n        return result\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)+1):\n        if (i % 2 == 0) and (nums[i-1] % 2 == 0):\n            return False\n        elif (i % 2!= 0) and (nums[i-1] % 2!= 0):\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not nums[i] % 2:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n    \ndef odd_position_v2(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 1 for i in range(len(nums)) if i % 2 == 1)\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for i in range(len(nums)):\n        if i%2!= 0:\n            odd_list.append(nums[i])\n    return odd_list\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return all(nums[i]%2==1 for i in range(0,len(nums),2))\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_indexes = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums),2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a','e','i','o','u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i == 0:\n                if test_str[i+1] in vowels:\n                    count += 1\n                if test_str[i+1].isalpha():\n                    count += 1\n            elif i == len(test_str)-1:\n                if test_str[i-1] in vowels:\n                    count += 1\n                if test_str[i-1].isalpha():\n                    count += 1\n            else:\n                if test_str[i+1] in vowels:\n                    count += 1\n                if test_str[i-1] in vowels:\n                    count += 1\n                if test_str[i+1].isalpha() and test_str[i-1].isalpha():\n                    count += 1\n    print(\"Number of vowels in the given string is: \", count)\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    VOWELS = ['a', 'e', 'i', 'o', 'u']\n    vowels = []\n    for i in range(len(test_str)):\n        if test_str[i] in VOWELS and i+1 < len(test_str) and test_str[i+1] in VOWELS:\n            vowels.append(test_str[i])\n        elif test_str[i] in VOWELS and i+1 == len(test_str):\n            vowels.append(test_str[i])\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    import re\n    pattern = re.compile('[aeiou]')\n    return len(pattern.findall(test_str))\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_list = []\n    for i in range(0,len(test_str)):\n        if test_str[i]=='a' or test_str[i]=='e' or test_str[i]=='i' or test_str[i]=='o' or test_str[i]=='u':\n            if test_str[i+1]=='a' or test_str[i+1]=='e' or test_str[i+1]=='i' or test_str[i+1]=='o' or test_str[i+1]=='u' or test_str[i-1]=='a' or test_str[i-1]=='e' or test_str[i-1]=='i' or test_str[i-1]=='o' or test_str[i-1]=='u':\n                test_list.append(test_str[i])\n    return len(test_list)\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_found = 0\n    for index in range(len(test_str) - 1):\n        if test_str[index] in 'aeiouAEIOU' and test_str[index + 1] in 'aeiouAEIOU':\n            vowels_found += 1\n    return vowels_found\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and test_str[i - 1] in vowels:\n            count += 1\n        elif test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n        elif test_str[i] in vowels and test_str[i - 1] not in vowels and test_str[i + 1] not in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    for char in test_str:\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    for i in range(len(test_str)):\n        if test_str[i] in ['a','e','i','o','u']:\n            test_str[i] = \"*\"\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if i < (len(test_str) - 1) and test_str[i + 1] in vowels:\n                count += 1\n            if i < (len(test_str) - 2) and test_str[i + 2] in vowels:\n                count += 1\n            if i > 0 and test_str[i - 1] in vowels:\n                count += 1\n            if i > 1 and test_str[i - 2] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    num_vowels = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels) and (test_str[i+1] in vowels):\n            num_vowels += 1\n    return num_vowels\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    arr.sort()\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # using set to store unique elements \n    # and adding each element to the set \n    set1 = set(arr) \n    sum1 = 0\n    for i in set1: \n        sum1 += i \n    return sum1\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    a=[]\n    for i in arr:\n        if i not in a:\n            a.append(i)\n    return sum(a)\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!=j and arr[i]==arr[j]:\n                return (arr[i])\n                \n    return (0)\n    \nfind_sum([1, 2, 2, 2, 3, 3, 3, 4]"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_list = [sum(set(arr))]\n    return sum_list\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Get the dict with frequency \n    freq = dict()\n    for i in arr: \n        if i in freq: \n            freq[i] += 1\n        else: \n            freq[i] = 1\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(list1):\n        print(k, list(g))\n    return None\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1=sorted(list1)\n    packed=[[list1[0]]]\n    for i in range(1,len(list1)):\n        if list1[i]==list1[i-1]:\n            packed[-1].append(list1[i])\n        else:\n            packed.append([list1[i]])\n    return packed\nprint(pack_consecutive_duplicates([1,2,3,3,3,3,4,4,4,4,5,5]))\nprint(pack_consecutive_duplicates([1,2,2,2,3,3,3,4,4,4,4,5,5]))\nprint(pack_consecutive_duplicates([1,2,3,3,3,3,4,4,4,4,5,5,5]))\nprint(pack_consecutive_duplicates([1,2,3,3,3,4,4,4,4,5,5,6]))\nprint(pack_consecutive_duplicates([1,2,3,3,4,4,4,4,5,5,6,6]))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    i = 0\n    j = 0\n    sublist = []\n    while i < len(list1):\n        if j == len(list1)-1:\n            sublist.append(list1[j])\n            break\n        if list1[j] == list1[j+1]:\n            sublist.append(list1[j])\n            j = j + 1\n        else:\n            if len(sublist)!= 0:\n                sublist.append(list1[j])\n                j = j + 1\n                i = j\n            else:\n                sublist.append(list1[j])\n                j = j + 1\n    return sublist\n    \nprint(pack_consecutive_duplicates([1,1,2,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5]))\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    group = groupby(list1)\n    res = [list(group) for key, group in groupby(list1)]\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    prev = list1[0]\n    cur = list1[0]\n    for i in range(1, len(list1)):\n        if prev == list1[i]:\n            cur = list1[i]\n        else:\n            if cur - prev == 1:\n                res.append(list1[i-1])\n            else:\n                res.append(list1[i-1])\n                res.append(cur)\n            prev = cur\n            cur = list1[i]\n    if cur - prev == 1:\n        res.append(list1[len(list1)-1])\n    else:\n        res.append(list1[len(list1)-1])\n        res.append(cur)\n    print(res)\ndef sort_list_from_first_last_numbers_then_second(list1):\n    '''\n    Write a function to sort a list containing numbers from the end. The list may contain both positive and negative numbers.\n    '''\n    list1.sort(key=lambda x: (x//abs(x), x))\n    print(list1)\ndef remove_vowels(str1):\n    '''\n    Write a function that returns the string with removed vowels. The function will take a string as a parameter.\n    '''\n    res = ''\n    vowels = 'aeiou'\n    for s in str1:\n        if s.lower() not in vowels:\n            res = res + s\n    return res\ndef change_lists_values(list1, list2):\n    '''\n    Write a function that changes value of elements in a list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    print(list1)\ndef sort_list_of_numbers_without_strings(list1):\n    '''\n    Write a function that sorts a list containing both strings and integers without using sort() method.\n    '''\n    def get_key(x):\n        return x[1]\n    def get_key_by_value(list1, target_value):\n        for key, value in list1:\n            if value == target_value:\n                return key\n    i = 0\n    while i < len(list1):\n        if type(list1[i]) == str:\n            list1[i:i+2] = sorted(list1[i:i+2], key = get_key)\n            i += 1\n        else:\n            list1[i:i+2] = sorted(list1[i:i+2], key = get_key_by_value)\n            i += 2\n    print(list1)\ndef convert_to_uppercase(str1):\n    '''\n    Write a function that takes a string as a parameter and returns a copy of the string in uppercase.\n    '''\n    res = ''\n    for s in str1:\n        res = res + s.upper()\n    return res\ndef remove_vowels_without_string(str1):\n    '''\n    Write a function that takes a string as a parameter and returns a copy of the string with all vowels removed.\n    '''\n    res = ''\n    vowels = 'aeiou'\n    for s in str1:\n        if s.lower() not in vowels:\n            res = res + s\n    return res\ndef string_to_list(str1):\n    '''\n    Write a function that takes a string as a parameter and returns a copy of the string as a list.\n    '''\n    return str1.split()\ndef remove_vowels_from_beginning_and_end(str1):\n    '''\n    Write a function that removes all vowels from the beginning and from the end of a string and returns the result.\n    '''\n    vowels = 'aeiou'\n    res = ''\n    if str1[0] in vowels:\n        res = res + str1[0]\n    for s in range(1, len(str1)):\n        if str1[s] not in vowels:\n            res = res + str1[s]\n    if str1[len(str1)-1] in vowels:\n        res = res + str1[len(str1)-1]\n    return res\ndef even_odd_seperator(list1):\n    '''\n    Write a function that takes a list as a parameter and returns two separate lists, one containing all even numbers,\n    the other containing all odd numbers.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\ndef reverse_lists(list1, list2):\n    '''\n    Write a function that takes two lists as parameters, reverses their order and returns a new list containing their elements in reversed order.\n    '''\n    list1.reverse()\n    list2.reverse()\n    return list1, list2\ndef reverse_the_content_of_list(list1):\n    '''\n    Write a function that takes a list as a parameter and returns a new list with elements in the original list in reversed order.\n    '''\n    list1.reverse()\n    print(list1)\ndef extend_a_list_by_adding_elements_from_another_list(list1, list2):\n    '''\n    Write a function that takes two lists as parameters, and returns a new list containing the elements of the first list followed by the elements of the second list.\n    '''\n    list1.extend(list2)\n    print(list1)\ndef remove_item_from_list(list1, item):\n    '''\n    Write a function that takes a list and an item and removes the first occurrence of the item in the list.\n    '''\n    list1.remove(item)\n    print(list1)\ndef get_n_first_characters(list1, n):\n    '''\n    Write a function that takes a list and an integer as parameters and returns a new list containing only the first n elements of the original list.\n    '''\n    return list1[:n]\ndef get_n_last_characters(list1, n):\n    '''\n    Write a function that takes a list and an integer as parameters and returns a new list containing only the last n elements of the original list.\n    '''\n    return list1[-n:]\ndef get_longest_word(list1):\n    '''\n    Write a function that takes a list of words as a parameter and returns the longest word in the list.\n    '''\n    res = ''\n    for s in list1:\n        if len(s) > len(res):\n            res = s\n    return res\ndef get_longest_word_excluding_n_characters(list1, n):\n    '''\n    Write a function that takes a list of words and an integer as a parameter and returns the longest word in the list that contains n or fewer characters.\n    '''\n    res = ''\n    for s in list1:\n        if len(s) <= n:\n            if len(s) > len(res):\n                res = s\n    return res\ndef get_unique_numbers_from_list(list1):\n    '''\n    Write a function that takes a list as a parameter and returns a list containing all elements of the original list without duplicates.\n    '''\n    res = []\n    for i in list1:\n        if i not in res:\n            res.append(i)\n    return res\ndef get_all_list_elements_with_duplicates(list1):\n    '''\n    Write a function that takes a list as a parameter and returns a list containing all elements of the original list in the order they first appeared in the list.\n    '''\n    for key, group in groupby(list1):\n        print(key, list(group))\ndef get_unique_list_elements_with_duplicates(list1):\n    '''\n    Write a function that takes a list as a parameter and returns a list containing all unique elements of the original list in the order they first appeared in the list.\n    '''\n    res = []\n    for i in list1:\n        if i not in res:\n            res.append(i)\n    return res\ndef print_list_in_reverse(list1):\n    '"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result=[]\n    for k, g in groupby(list1):\n        result.append(list(g))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    for k, g in groupby(enumerate(list1), lambda i_x: i_x[0] - i_x[1]):\n        print([list(map(operator.itemgetter(1), g))])\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    newlist = []\n    for k, g in groupby(list1):\n        newlist.append(list(g))\n    return newlist\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = [list(group) for key, group in groupby(list1)]\n    print(new_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    try:\n        list1 = list(set(list1))\n        list1.sort()\n        for key, group in groupby(list1):\n            print([list(group)])\n    except:\n        pass\n        \npack_consecutive_duplicates([1,1,2,2,3,4,5,5,5,5])\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    unique = []\n    for i in list1:\n        if i not in unique:\n            unique.append(i)\n    unique_list = []\n    for i in unique:\n        unique_list.append((i,list1.count(i)))\n    return unique_list\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = 0\n    list1 = list(set(list1))\n    for x in list1:\n        count += 1\n    print(list1)\n    print(count)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n    list_unique = []\n    for sublist in list1:\n        t = tuple(sublist)\n        if t not in list_unique:\n            list_unique.append(t)\n    return collections.Counter(list_unique)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    return len([tuple(list(set(l))) for l in list1])\n    \nprint(unique_sublists([[1, 2], [3, 4], [5, 6], [1, 2, 3], [3, 4, 5], [1, 2]]))\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for x in list1:\n        if x not in list2:\n            list2.append(x)\n    list2.sort()\n    dic = {}\n    for i in range(0,len(list2)):\n        dic[list2[i]] = list1.count(list2[i])\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    x = {}\n    for i in range(len(list1)):\n        y = tuple(list1[i])\n        if y in x:\n            x[y] += 1\n        else:\n            x[y] = 1\n    return x\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list2 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n    list3 = []\n    for i in list2:\n        list3.append(tuple(i))\n    dict1 = {}\n    for i in list3:\n        dict1[i] = list3.count(i)\n    return dict1\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(0, len(list1)):\n        l = tuple(list1[i])\n        if l in count.keys():\n            count[l] += 1\n        else:\n            count[l] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1 = [1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]\n    diction = {}\n    for item in list1:\n        if item not in diction:\n            diction[item] = 1\n        else:\n            diction[item] += 1\n    print(diction)\n"
    },
    {
        "number": 779,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_list=list(set(list1))\n    tuples=tuple(unique_list)\n    tuple_dictionary={tuple(unique_list[i]):list1.count(unique_list[i]) for i in range(len(unique_list))}\n    return tuple_dictionary\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    # iterate over all the tuples in the list\n    for i in range(1, len(test_list) + 1):\n        # iterate over all the combinations of length i\n        for j in combinations(test_list, i):\n            result.append(j)\n    print(result)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for n in range(1,len(test_list)+1):\n        combinations_result = list(combinations(test_list,n))\n        result.extend(combinations_result)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #returns all possible combinations of sums\n    sums = []\n    for i in range(len(test_list)+1):\n        sums.append(list(combinations(test_list, i)))\n    return sums[len(test_list)]\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    final_list = []\n    \n    for i in range(1, len(test_list)):\n        temp = list(combinations(test_list, i))\n        for j in temp:\n            final_list.append(list(j))\n    return final_list\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    tuples = test_list\n    n = 2\n    sum_comb = list(itertools.combinations(tuples, n)) \n    sum_comb = [list(elem) for elem in sum_comb]\n    return(sum_comb)\n    \ndef find_combinations_of_two(test_list):\n    '''\n    Write a function to find the combinations of sum of two tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    import itertools\n    tuples = test_list\n    n = 2\n    sum_comb = list(itertools.combinations(tuples, n)) \n    sum_comb = [list(elem) for elem in sum_comb]\n    return(sum_comb)\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)+1):\n        temp = combinations(test_list, i)\n        for j in temp:\n            if sum(j) % 2 == 0:\n                result.append(j)\n    return result\n    \n    \ndef sum_of_tuples(test_tuple):\n    '''\n    Write a function to find the sum of tuples in given tuple list\n    '''\n    sum_of_tuples = 0\n    for tup in test_tuple:\n        sum_of_tuples = sum_of_tuples + sum(tup)\n    return sum_of_tuples\n    \n    \ndef replace_with_divisible(test_tuple, index_to_replace):\n    '''\n    Write a function to replace the index_to_replace element of tuple with all elements divisible by the index_to_replace element of tuple.\n    '''\n    all_divisibles = []\n    all_divisibles.append(test_tuple[index_to_replace])\n    for i in test_tuple:\n        if i % test_tuple[index_to_replace] == 0:\n            all_divisibles.append(i)\n    return tuple(all_divisibles)\n    \n    \ndef check_sum(test_tuple):\n    '''\n    Write a function to check if the sum of elements in tuple is divisible by the first element of the tuple\n    '''\n    check_sum = sum(test_tuple)\n    return check_sum % test_tuple[0] == 0\n    \n    \ndef check_divisibility_with_index(test_tuple, index_to_replace):\n    '''\n    Write a function to check if the sum of elements in tuple is divisible by the index_to_replace element of the tuple\n    '''\n    return sum(test_tuple) % test_tuple[index_to_replace] == 0\n    \n    \ndef find_distinct_tuple_sum(test_tuple):\n    '''\n    Write a function to find the distinct tuple sum for given tuple\n    '''\n    return len(set(tuple(i) for i in test_tuple))\n    \n    \ndef replace_with_greater_element(test_tuple, index_to_replace):\n    '''\n    Write a function to replace the index_to_replace element of tuple with the next greatest element.\n    '''\n    test_tuple = list(test_tuple)\n    greater_element_list = []\n    for i in range(index_to_replace+1, len(test_tuple)):\n        if test_tuple[i] > test_tuple[index_to_replace]:\n            greater_element_list.append(test_tuple[i])\n    if len(greater_element_list)!= 0:\n        greater_element_list.sort(reverse=True)\n        test_tuple[index_to_replace] = greater_element_list[0]\n        return tuple(test_tuple)\n    else:\n        test_tuple[index_to_replace] = 0\n        return tuple(test_tuple)\n    \n    \ndef replace_with_smaller_element(test_tuple, index_to_replace):\n    '''\n    Write a function to replace the index_to_replace element of tuple with the next smallest element.\n    '''\n    test_tuple = list(test_tuple)\n    smaller_element_list = []\n    for i in range(index_to_replace+1, len(test_tuple)):\n        if test_tuple[i] < test_tuple[index_to_replace]:\n            smaller_element_list.append(test_tuple[i])\n    if len(smaller_element_list)!= 0:\n        smaller_element_list.sort()\n        test_tuple[index_to_replace] = smaller_element_list[0]\n        return tuple(test_tuple)\n    else:\n        test_tuple[index_to_replace] = 9\n        return tuple(test_tuple)\n    \n    \ndef check_greater_and_smaller(test_tuple):\n    '''\n    Write a function to check if the index_to_replace element of tuple is greater than the next element and if the index_to_replace element of tuple is smaller than the previous element.\n    '''\n    test_tuple = list(test_tuple)\n    greater_element_list = []\n    for i in range(1, len(test_tuple)):\n        if test_tuple[i] > test_tuple[i-1]:\n            greater_element_list.append(test_tuple[i])\n        elif test_tuple[i] < test_tuple[i-1]:\n            greater_element_list.append(test_tuple[i])\n    if len(greater_element_list)!= 0:\n        greater_element_list.sort(reverse=True)\n        return tuple(greater_element_list[0])\n    else:\n        return 0\n        \ndef check_greater_and_smaller_index(test_tuple):\n    '''\n    Write a function to check if the index_to_replace element of tuple is greater than the next element and if the index_to_replace element of tuple is smaller than the previous element.\n    '''\n    test_tuple = list(test_tuple)\n    greater_element_list = []\n    for i in range(1, len(test_tuple)):\n        if test_tuple[i] > test_tuple[i-1]:\n            greater_element_list.append(i)\n        elif test_tuple[i] < test_tuple[i-1]:\n            greater_element_list.append(i)\n    if len(greater_element_list)!= 0:\n        greater_element_list.sort(reverse=True)\n        return greater_element_list[0]\n    else:\n        return 0\n    \ndef find_combinations_of_tuples(test_list):\n    '''\n    Write a function to find all the combinations of tuples in a list\n    '''\n    final_list = []\n    for i in range(1, len(test_list)+1):\n        temp = combinations(test_list, i)\n        for j in temp:\n            final_list.append(j)\n    return final_list\n    \n    \ndef check_subset(test_tuple_1, test_tuple_2):\n    '''\n    Write a function to check if the first tuple is a subset of second tuple\n    '''\n    return set(test_tuple_1).issubset(set(test_tuple_2))\n    \n    \ndef check_superset(test_tuple_1, test_tuple_2):\n    '''\n    Write a function to check if the first tuple is a superset of second tuple\n    '''\n    return set(test_tuple_1).issuperset(set(test_tuple_2))\n    \n    \ndef check_for_tuple_in_list(test_tuple, test_list):\n    '''\n    Write a function to check if the first tuple is a superset of second tuple\n    '''\n    return any(set(test_tuple).issuperset(set(tup)) for tup in test_list)\n    \n    \ndef replace_tuple_with_divisible(test_tuple, index_to_replace):\n    '''\n    Write a function to replace the index_to_replace element of tuple with all elements divisible by the index_to_replace element of tuple.\n    '''\n    all_divisibles = []\n    all_divisibles.append(test_tuple[index_to_replace])\n    for i in test_tuple:\n        if i % test_tuple[index_to_replace] == 0:\n            all_divisibles.append(i)\n    return tuple(all_divisibles)\n    \n    \ndef find_distinct_tuple_sum(test_tuple):\n    '''"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize an empty list\n    result = []\n"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    output = []\n    for r in range(1, len(test_list) + 1):\n        output.extend(list(combinations(test_list, r)))\n    return output\n    \n    \n    \ndef find_combinations_2(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    l = []\n    for i in range(1,len(test_list)):\n        l.extend(list(combinations(test_list,i)))\n    return l\n    \ndef find_combinations_3(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,2))\n    \n    \n    \ndef find_combinations_4(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,3))\n    \n    \n    \ndef find_combinations_5(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,4))\n    \n    \n    \ndef find_combinations_6(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,5))\n    \n    \n    \ndef find_combinations_7(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,6))\n    \n    \n    \ndef find_combinations_8(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,7))\n    \n    \n    \ndef find_combinations_9(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,8))\n    \n    \n    \ndef find_combinations_10(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,9))\n    \n    \n    \ndef find_combinations_11(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,10))\n    \n    \n    \ndef find_combinations_12(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,11))\n    \n    \n    \ndef find_combinations_13(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,12))\n    \n    \n    \ndef find_combinations_14(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,13))\n    \n    \n    \ndef find_combinations_15(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,14))\n    \n    \n    \ndef find_combinations_16(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,15))\n    \n    \n    \ndef find_combinations_17(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,16))\n    \n    \n    \ndef find_combinations_18(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,17))\n    \n    \n    \ndef find_combinations_19(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,18))\n    \n    \n    \ndef find_combinations_20(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,19))\n    \n    \n    \ndef find_combinations_21(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list,20))\n    \n    \n    \ndef find_combinations_22(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the give"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get all combinations\n    # of 2 in given list \n    combinations_list = list(combinations(test_list, 2)) \n    \n    # Print the obtained combinations \n    for i in combinations_list: \n        print(i, end = \" \") \n        \nif __name__ == \"__main__\":\n    test_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300]\n    find_combinations(test_list"
    },
    {
        "number": 780,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    sum_tuples = []\n    for i in range(1, len(test_list)):\n        sum_tuples.extend(list(combinations(test_list,i)))\n    sum_tuples = list(sum_tuples)\n    print(sum_tuples)\n    return sum_tuples\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            if n/i == i : \n                count = count + 1\n            else : \n                count = count + 2\n    return count \ndef next_prime(n) : \n    '''\n    Write a python function to find the next prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    if n <= 1 : \n        return 2 \n    prime = n\n    found = False\n    while(found == False) : \n        prime = prime + 1 \n        count = 0 \n        for i in range(2,int(math.sqrt(prime))+1) : \n            if prime % i == 0 : \n                count = count + 1\n                break\n        if count == 0 : \n            found = True \n    return prime \ndef is_perfect_square(n) : \n    '''\n    Write a python function to check whether the given number is a perfect square. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    count = 0\n    for i in range(int(math.sqrt(n)),0,-1) : \n        if n % i == 0 : \n            count = count + 1\n            break\n    if count == 1 : \n        return True\n    else : \n        return False \ndef is_prime(n) : \n    '''\n    Write a python function to check whether the given number is prime. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    count = 0\n    for i in range(1,int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count = count + 1\n            break\n    if count > 1 : \n        return False \n    else : \n        return True \ndef check_anagram(str1,str2) : \n    '''\n    Write a python function to check whether the given two strings are anagram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str2 = str2.replace(\" \",\"\")\n    if len(str1)!= len(str2) : \n        return False \n    else : \n        count = {}\n        for i in str1 : \n            if i in count : \n                count[i] = count[i] + 1\n            else : \n                count[i] = 1\n        for i in str2 : \n            if i in count : \n                count[i] = count[i] - 1\n            else : \n                return False \n        for i in count : \n            if count[i]!= 0 : \n                return False \n        return True \ndef palindrome(n) : \n    '''\n    Write a python function to check whether the given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    n = str(n)\n    rev = n[::-1]\n    if rev == n : \n        return True\n    else : \n        return False \ndef convert_from_decimal(n) : \n    '''\n    Write a python function to convert the given number from decimal to any base. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    s = \"\"\n    while n!= 0 : \n        r = n % 16\n        if r >= 10 : \n            if r == 10 : \n                s = s + \"A\"\n            elif r == 11 : \n                s = s + \"B\"\n            elif r == 12 : \n                s = s + \"C\"\n            elif r == 13 : \n                s = s + \"D\"\n            elif r == 14 : \n                s = s + \"E\"\n            elif r == 15 : \n                s = s + \"F\"\n        else : \n            s = s + str(r)\n        n = n // 16\n    return s[::-1]\ndef string_compression(s) : \n    '''\n    Write a python function to compress the given string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    cnt = 1 \n    cnt_ch = s[0]\n    prev_ch = s[0]\n    comp_str = \"\"\n    for i in range(1,len(s)) : \n        if cnt_ch == s[i] : \n            cnt = cnt + 1 \n        else : \n            comp_str = comp_str + prev_ch + str(cnt)\n            prev_ch = s[i]\n            cnt = 1\n            cnt_ch = s[i]\n    comp_str = comp_str + prev_ch + str(cnt)\n    return comp_str \ndef find_longest_word(s) : \n    '''\n    Write a python function to find the longest word in the given string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    cnt = 0 \n    word = \"\"\n    for i in range(len(s)) : \n        if s[i] == \" \" : \n            if cnt > len(word) : \n                word = s[i+1:len(s)]\n            elif cnt == len(word) : \n                if len(word) < len(s[i+1:len(s)]) : \n                    word = s[i+1:len(s)]\n            cnt = 0 \n        else : \n            cnt = cnt + 1 \n    if cnt > len(word) : \n        word = s \n    return word \ndef is_pangram(s) : \n    '''\n    Write a python function to check whether the given sentence is pangram or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    cnt = 0 \n    for i in alphabet : \n        if i in s.lower() : \n            cnt = cnt + 1 \n    if cnt == 26 : \n        return True \n    else : \n        return False \ndef factorial(n) : \n    '''\n    Write a python function to print the factorial of the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    cnt = 1 \n    for i in range(1,n+1) : \n        cnt = cnt * i \n    return cnt \ndef remove_duplicates(s) : \n    '''\n    Write a python function to remove duplicates from a given string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-35.php\n    '''\n    cnt = 1 \n    s_list = []\n    for i in s : \n        if i not in s_list : \n            s_list.append(i)\n    for i in s_list : \n        if i!= \" \" : \n            print(i,end=\"\")\n            cnt = cnt + 1 \n        else : \n            print(\" \",end=\"\")\n    return cnt \ndef remove_punctuations(s) : \n    '''\n    Write a python function to remove punctuations from a given strin"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    cnt = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if (n % i == 0):\n            if (n / i == i): \n                cnt = cnt + 1\n            else: \n                cnt = cnt + 2\n    return cnt\nprint(count_divisors(15))\nprint(count_divisors(36))\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = 0\n    for i in range(1, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            result += 1\n    if result % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # n = int(input(\"Enter a number: \"))\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if (n % i == 0):\n            if (n / i == i):\n                count = count + 1\n            else:\n                count = count + 2\n    if(count % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(0)\n    \n    if((n%2) == 0):\n        if(n%3 == 0):\n            return(1 + n/3)\n        else:\n            return(n/2)\n    else:\n        return(n)\ndef test_count_divisors() : \n    assert(count_divisors(8) == 3)\n    assert(count_divisors(5) == 2)\n    assert(count_divisors(11) == 3)\ndef count_divisors_squares(n) : \n    '''\n    Write a python function to check whether the count of divisors is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(0)\n    \n    if((n%2) == 0):\n        if(n%3 == 0):\n            return(1 + n/3)\n        else:\n            return(n/2)\n    else:\n        return(n)\ndef test_count_divisors_squares() : \n    assert(count_divisors_squares(8) == 4)\n    assert(count_divisors_squares(5) == 2)\n    assert(count_divisors_squares(11) == 3)\ndef factorial(n) : \n    '''\n    Write a python function to check whether the factorial of the number is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(1)\n    else:\n        return(n*factorial(n-1))\ndef test_factorial() : \n    assert(factorial(3) == 6)\n    assert(factorial(4) == 24)\n    assert(factorial(5) == 120)\ndef count_factorial(n) : \n    '''\n    Write a python function to count the number of digits of the factorial of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(1)\n    else:\n        return(n*count_factorial(n-1))\ndef test_count_factorial() : \n    assert(count_factorial(3) == 4)\n    assert(count_factorial(4) == 6)\n    assert(count_factorial(5) == 10)\ndef count_divisors_factorial(n) : \n    '''\n    Write a python function to check whether the count of divisors of the factorial of the number is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(0)\n    else:\n        if((n%2) == 0):\n            if(n%3 == 0):\n                return(1 + n/3)\n            else:\n                return(n/2)\n        else:\n            return(n)\ndef test_count_divisors_factorial() : \n    assert(count_divisors_factorial(3) == 2)\n    assert(count_divisors_factorial(4) == 1)\n    assert(count_divisors_factorial(5) == 2)\ndef count_divisors_factorial_squares(n) : \n    '''\n    Write a python function to check whether the count of divisors of the factorial of the number is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(0)\n    else:\n        if((n%2) == 0):\n            if(n%3 == 0):\n                return(1 + n/3)\n            else:\n                return(n/2)\n        else:\n            return(n)\ndef test_count_divisors_factorial_squares() : \n    assert(count_divisors_factorial_squares(3) == 3)\n    assert(count_divisors_factorial_squares(4) == 2)\n    assert(count_divisors_factorial_squares(5) == 3)\ndef count_divisors_factorial_squares_sum(n) : \n    '''\n    Write a python function to sum the count of divisors of the factorial of the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 0 or n == 1):\n        return(0)\n    else:\n        if((n%2) == 0):\n            if(n%3 == 0):\n                return(1 + n/3)\n            else:\n                return(n/2)\n        else:\n            return(n)\ndef test_count_divisors_factorial_squares_sum() : \n    assert(count_divisors_factorial_squares_sum(3) == 2)\n    assert(count_divisors_factorial_squares_sum(4) == 1)\n    assert(count_divisors_factorial_squares_sum(5) == 4)\ndef is_prime(n) : \n    '''\n    Write a python function to check whether the number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(n == 2 or n == 3):\n        return(True)\n    elif(n == 0 or n == 1):\n        return(False)\n    else:\n        i = 2\n        while(i <= n/i):\n            if(n%i == 0):\n                return(False)\n            i = i + 1\n        return(True)\ndef test_is_prime() : \n    assert(is_prime(2) == True)\n    assert(is_prime(3) == True)\n    assert(is_prime(4) == False)\n    assert(is_prime(5) == True)\n    assert(is_prime(12) == False)\ndef prime_factors(n) : \n    '''\n    Write a python function to find the prime factors of the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(is_prime(n) == False):\n        return(prime_factors(n/2))\n    else:\n        return([n])\ndef test_prime_factors() : \n    assert(prime_factors(2) == [2])\n    assert(prime_factors(3) == [3])\n    assert(prime_factors(4) == [2, 2])\n    assert(prime_factors(5) == [5])\n    assert(prime_factors(12) == [2, 2, 3])\ndef prime_factors_sum(n) : \n    '''\n    Write a python function to calculate the sum of the prime factors of the number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if(is_prime(n) == False):\n        return(n + prime_factors_sum(n/2))\n    else:\n        return(n)\ndef test_prime_factors_sum() : \n    assert(prime_factors_sum(2) == 2)\n    assert(prime_factors_sum(3) == 2)\n    assert(prime_factors_sum(4) == 7)\n    assert(prime_factors_sum(5) == 5)\n    assert(prime_factors_sum(12) == 16)"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count += 1\n            else : \n                count += 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n + 1) : \n        if n % i == 0 : \n            count = count + 1\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 0:\n        return 0\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                count = count + 1\n            else : \n                count = count + 2\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # The number of divisors = the number of divisors of the product of all primes less than or equal to n.\n    # eg, the number of divisors of 30 = (1 + 2 + 3 + 5 + 6 + 10 + 15 + 30) = 44.\n    # 4! = 4 x 3 x 2 x 1 = 24.\n    # The product of the primes less than or equal to n is n * (n - 1) / 2.\n    # Hence, number of divisors = (1 + 2 + 3 +... + n) * (n * (n - 1) / 2) / (2 * n).\n    # O(sqrt(n)) time complexity and O(1) space complexity\n    assert(n > 0)\n    number_of_divisors = 0\n    sqrt_n = int(math.sqrt(n))\n    for i in range(1, sqrt_n + 1) :\n        if n % i == 0 :\n            number_of_divisors += 1\n    return number_of_divisors\n"
    },
    {
        "number": 781,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # c = 0\n    # for i in range(1, n+1) : \n    #     if n%i == 0 : \n    #         c += 1\n    # if c%2 == 0 : \n    #     print(\"True\")\n    # else : \n    #     print(\"False\")\n    #     return\n    # print(c)\n    return len([i for i in range(1, n+1) if n%i == 0]) \n    # return c%2 == 0\ndef max_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is less than or equal to the square root of n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, math.floor(math.sqrt(n))) : \n        if n%i == 0 : \n            count += 1\n    return count <= math.sqrt(n)\n    # return c <= math.sqrt(n)\ndef find_smallest_prime_factor(n) : \n    '''\n    Write a python function to find the smallest prime factor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    p = 2 \n    while p <= n/p : \n        if n%p == 0 : \n            return p\n        p += 1\n    return n\n    # return n if n%2!= 0 else n+1\n    # return next(i for i in range(2, n) if n%i == 0)\ndef find_largest_prime_factor(n) : \n    '''\n    Write a python function to find the largest prime factor of a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    p = 2 \n    while p <= n/p : \n        if n%p == 0 : \n            return p if p == n else n\n        p += 1\n    return n if n%2!= 0 else n+1\n    # return next(i for i in range(2, n) if n%i == 0)\n    # return n if n%2!= 0 else n+1\n    # return n if n%2!= 0 else n+1\ndef sum_of_factors(n) : \n    '''\n    Write a python function to find the sum of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum([i for i in range(1, n) if n%i == 0])\n    # return sum([i for i in range(1, n) if n%i == 0])\n    # c = 0\n    # for i in range(1, n+1) : \n    #     if n%i == 0 : \n    #         c += i\n    # return c\ndef sum_of_all_factors(n) : \n    '''\n    Write a python function to find the sum of factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 0 \n    for i in range(1, n+1) : \n        if n%i == 0 : \n            s += i\n    return s\n    # return sum([i for i in range(1, n) if n%i == 0])\n    # c = 0\n    # for i in range(1, n+1) : \n    #     if n%i == 0 : \n    #         c += i\n    # return c\n    # return sum([i for i in range(1, n+1) if n%i == 0])\ndef sum_of_divisors(n) : \n    '''\n    Write a python function to find the sum of divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return sum([i for i in range(1, n+1) if n%i == 0])\n    # c = 0\n    # for i in range(1, n+1) : \n    #     if n%i == 0 : \n    #         c += i\n    # return c\n    # return sum([i for i in range(1, n+1) if n%i == 0])\ndef count_odd_divisors(n) : \n    '''\n    Write a python function to find the count of odd divisors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    c = 0\n    for i in range(1, n+1) : \n        if n%i == 0 : \n            if i%2 == 0 : \n                c += 1\n    return c\n    # count = 0\n    # for i in range(1, n+1) : \n    #     if n%i == 0 : \n    #         if i%2 == 0 : \n    #             count += 1\n    # return count\n    # return sum([i for i in range(1, n+1) if n%i == 0 and i%2 == 1])\ndef find_prime_factors(n) : \n    '''\n    Write a python function to find prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    factors = []\n    # for i in range(1, n+1) : \n    #     if n%i == 0 : \n    #         if i == 1 or i == n :\n    #             factors.append(i)\n    #         else : \n    #             factors.append(i)\n    #             factors.append(n/i)\n    # return factors\n    return [i for i in range(1, n+1) if n%i == 0]\n    # return [i for i in range(1, n+1) if n%i == 0]\n    # return [i for i in range(1, n+1) if n%i == 0]\n    # return [i for i in range(1, n+1) if n%i == 0]\ndef sum_of_divisors_prime_factors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 1\n    for i in find_prime_factors(n) : \n        s *= i\n    return s\n    # return sum([i for i in range(1, n+1) if n%i == 0])\n    # return sum([i for i in range(1, n+1) if n%i == 0])\n    # return sum([i for i in range(1, n+1) if n%i == 0])\n    # return sum([i for i in range(1, n+1) if n%i == 0])\ndef sum_of_all_divisors_prime_factors(n) : \n    '''\n    Write a python function to find the sum of prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    s = 1\n    for i in find_prime_factors(n) : \n        s *= i\n    return s\n    # return sum([i for i in range(1, n+1) if n%i == 0])\n    # return sum([i for i in range(1, n+1) if n%i == 0])\n    # return sum([i for i in range(1, n+1"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    l = len(arr)\n    sum = 0\n    for i in range(0, l):\n        for j in range(0, l):\n            if ((i < j) and (j - i + 1) % 2!= 0):\n                sum += sum_subarray(arr, i, j)\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    #base case\n    if len(arr) == 1:\n        return arr[0]\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if ((j-i) % 2 == 1):\n                sum += arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = []\n    for i in range(0, len(arr)):\n        for j in range(i, len(arr)):\n            if len(arr[i:j]) % 2 == 0:\n                continue\n            else:\n                result.append(sum(arr[i:j]))\n    print(result)\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(j-i+1)%2!= 0:\n                sum += arr[j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    return sum([sum(arr[j:j+3]) for j in range(len(arr)-1) if len(arr[j:j+3])%2])\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(j - i + 1 % 2 == 1):\n                sum += sum(arr[i:j+1])\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr_len = len(arr)\n    result = []\n    for i in range(arr_len):\n        for j in range(i, arr_len):\n            if len(arr[i:j+1]) % 2 == 1:\n                result.append(sum(arr[i:j+1]))\n    return result\n"
    },
    {
        "number": 782,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    res = []\n    for i in range(len(arr)):\n        j = 0\n        while j < len(arr):\n            if i+j <= len(arr)-1:\n                res.append(sum(arr[i:j]))\n            j += 1\n    return sum(res)\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n    min_val = min(r, min(g, b))\n    max_val = max(r, max(g, b))\n    v = max_val\n    if v == 0:\n        return 0, 0, 0\n    s = (max_val - min_val) / max_val\n    if max_val == r:\n        h = (g - b) / (max_val - min_val)\n    elif max_val == g:\n        h = 2 + (b - r) / (max_val - min_val)\n    else:\n        h = 4 + (r - g) / (max_val - min_val)\n    h *= 60\n    if h < 0:\n        h += 360\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    color = [r, g, b]\n    mx = max(color)\n    mn = min(color)\n    delta = mx - mn\n    \n    if delta == 0:\n        h = 0\n    elif mx == r:\n        h = 60 * (((g - b) / delta) % 6)\n    elif mx == g:\n        h = 60 * (((b - r) / delta) + 2)\n    elif mx == b:\n        h = 60 * (((r - g) / delta) + 4)\n    \n    if mx == 0:\n        s = 0\n    else:\n        s = delta / mx\n    \n    v = mx\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    maxc = max(r, g, b)\n    minc = min(r, g, b)\n    v = maxc\n    if minc == maxc:\n        return 0.0, 0.0, v\n    s = (maxc-minc) / maxc\n    rc = (maxc-r) / (maxc-minc)\n    gc = (maxc-g) / (maxc-minc)\n    bc = (maxc-b) / (maxc-minc)\n    if r == maxc:\n        h = bc-gc\n    elif g == maxc:\n        h = 2.0+rc-bc\n    else:\n        h = 4.0+gc-rc\n    h = (h/6.0) % 1.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    h = int(h)\n    s = int(s)\n    v = int(v)\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = (df/mx)*100\n    v = mx*100\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r/255.0, g/255.0, b/255.0\n    min_color = min(r, g, b)\n    max_color = max(r, g, b)\n    v = max_color\n    delta = max_color - min_color\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    total_product=1\n    for i in list1:\n        if i % 2 ==0:\n            total_product=total_product*i\n        else:\n            total_product=total_product*i\n    return total_product\nlist1 = [12, 345, 2, 6, 7896]\nprint(mul_even_odd(list1))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product *= i\n        elif i % 2!= 0:\n            product *= i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    return reduce(lambda x,y:x*y,[i for i in list1 if i%2==0]+[j for j in list1 if j%2!=0])\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for i in list1:\n        if list1.index(i)%2 == 0:\n            result = result * i\n        else:\n            result = result * i\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    list1 = [1, 2, 3, 4, 5, 6]\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    \n    print(even, odd)\n    \n    print(even[0]*odd[0])\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    # your code here\n    product = 1\n    for i in list1:\n        if i % 2 == 0:\n            product = product * i\n    print(product)\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    mul_even = 1\n    mul_odd = 1\n    for i in list1:\n        if i%2 == 0:\n            mul_even *= i\n        else:\n            mul_odd *= i\n    return mul_odd,mul_even\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    l=[]\n    for i in list1:\n        if i%2==0:\n            l.append(i)\n    prod=1\n    for j in l:\n        prod*=j\n    return prod\nprint(mul_even_odd([1,2,3,4,5,6]))\n"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    x=0\n    for i in list1:\n        if i%2==0:\n            x=x+i\n        else:\n            x=x*i\n    return x\nlist1=[2,3,4,5,6]\nprint(mul_even_odd(list1)"
    },
    {
        "number": 784,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if list1.index(i) % 2 == 0:\n            product = product*i\n        else:\n            pass\n    print(product)\nmul_even_odd([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Test if the string format is correct\n    test_str = test_str.replace(\"(\", \"\")\n    test_str = test_str.replace(\")\", \"\")\n    test_str = test_str.replace(\",\", \"\")\n    if test_str == \"\":\n        raise ValueError(\"Invalid tuple format\")\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the test_str\n    test_str = \"123.45,3,4,5,6,7.89\"\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    lst = test_str.split(',')\n    return tuple([int(i) for i in lst])\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    new_tuple = []\n    for i in test_str.split(','):\n        new_tuple.append(int(i))\n    return tuple(new_tuple)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(\",\")\n    tuple_int = []\n    for str in tuple_str:\n        tuple_int.append(int(str))\n    return tuple(tuple_int)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_int = [int(char) for char in test_str]\n    return tuple_int\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str[0] == '(' and test_str[-1] == ')' and test_str.count(',') == 0:\n        print(tuple(map(int, test_str.split(' ')[1:-1])))\n    else:\n        print('invalid string!')\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_list = test_str.split(',')\n    test_list = [int(i) for i in test_list]\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for t_str in test_str:\n        t_int = int(t_str.replace(\",\", \"\"))\n        result.append(t_int)\n    return tuple(result)\n"
    },
    {
        "number": 785,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #convert the string to list\n    test_list = list(test_str)\n    #create empty list to store the integer strings\n    int_list = []\n    #convert each character in the list to integer string\n    for char in test_list:\n        int_list.append(int(char))\n    #turn the list into tuple\n    result = tuple(int_list)\n    return result\n    \ndef find_max(test_tuple):\n    '''\n    Write a function that will find the maximum value of a tuple.\n    '''\n    #find the minimum and maximum value in the tuple\n    test_tuple_min = min(test_tuple)\n    test_tuple_max = max(test_tuple)\n    #find the tuple index where the minimum value is located\n    index_min = test_tuple.index(test_tuple_min)\n    #find the tuple index where the maximum value is located\n    index_max = test_tuple.index(test_tuple_max)\n    #return the tuple index for the maximum value\n    return index_max\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if x > a[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a)-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if a[mid] < x:\n            left = mid + 1\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if x < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    # Start the 'insert_pos' from the last index of the array\n    insert_pos = n\n    for i in range(n-1, -1, -1):\n        if a[i] > x:\n            insert_pos = i + 1\n            break\n    return insert_pos\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0 or x < a[0]:\n        return 0\n    elif x > a[n-1]:\n        return n\n    else:\n        return bisect.bisect(a, x)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not x:\n        return -1\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return len(a)\n    else:\n        return l\ndef main():\n    a = [1,3,4,5,6,7,9]\n    print(right_insertion(a,4))\n    print(right_insertion(a,0))\n    print(right_insertion(a,100))\n    print(right_insertion(a,6))\n    print(right_insertion(a,5))\n    print(right_insertion(a,9))\n    print(right_insertion(a,8))\n    print(right_insertion(a,2))\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    l = 0\n    r = n-1\n    while(l<r):\n        mid = (l+r)//2\n        if x>a[mid]:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x < a[0]:\n        return 0\n    else:\n        for i in range(len(a)):\n            if x < a[i]:\n                return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    start = 0\n    end = len(a)-1\n    while start <= end:\n        mid = (start+end) // 2\n        if a[mid] >= x:\n            end = mid-1\n        else:\n            start = mid+1\n    return start\ndef insertion_sort(a):\n    '''\n    Write a function to sort an array of strings using insertion sort.\n    '''\n    if not a:\n        return []\n    res = []\n    for x in a:\n        i = right_insertion(res, x)\n        res = res[:i] + [x] + res[i:]\n    return res\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    start = 0\n    end = len(a)-1\n    while start <= end:\n        mid = (start+end) // 2\n        if a[mid] <= x:\n            end = mid-1\n        else:\n            start = mid+1\n    return start\ndef insertion_sort_str(a):\n    '''\n    Write a function to sort an array of strings using insertion sort.\n    '''\n    if not a:\n        return []\n    res = []\n    for x in a:\n        i = left_insertion(res, x)\n        res = res[:i] + [x] + res[i:]\n    return res\ndef merge_sort(a):\n    '''\n    Write a function to sort an array of strings using merge sort.\n    '''\n    if len(a) <= 1:\n        return a\n    mid = len(a) // 2\n    left = merge_sort(a[:mid])\n    right = merge_sort(a[mid:])\n    return merge(left, right)\ndef merge(a, b):\n    '''\n    Write a function to merge two sorted array of strings using merge sort.\n    '''\n    i = j = k = 0\n    res = []\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            res.append(a[i])\n            i += 1\n        else:\n            res.append(b[j])\n            j += 1\n    res.extend(a[i:] or b[j:])\n    return res\ndef radix_sort(a, d=0):\n    '''\n    Write a function to sort an array of strings using radix sort.\n    '''\n    if not a:\n        return []\n    i = len(str(max(a)))\n    res = [[] for _ in range(10)]\n    for x in a:\n        n = int(x[d:d+i]) % 10\n        res[n].append(x)\n    return [x for y in res for x in y]\ndef merge_sort_str(a):\n    '''\n    Write a function to sort an array of strings using merge sort.\n    '''\n    if not a:\n        return []\n    mid = len(a) // 2\n    left = merge_sort_str(a[:mid])\n    right = merge_sort_str(a[mid:])\n    return merge_str(left, right)\ndef merge_str(a, b):\n    '''\n    Write a function to merge two sorted array of strings using merge sort.\n    '''\n    i = j = 0\n    res = []\n    while i < len(a) and j < len(b):\n        if a[i] <= b[j]:\n            res.append(a[i])\n            i += 1\n        else:\n            res.append(b[j])\n            j += 1\n    res.extend(a[i:] or b[j:])\n    return res\ndef lis(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of integers.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\ndef lis_str(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of strings.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i):\n            if insertion_sort_str(a[i]) > insertion_sort_str(a[j]):\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\ndef lis_dp(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of integers using dynamic programming.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\ndef lis_dp_str(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of strings using dynamic programming.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    for i in range(len(a)):\n        for j in range(i):\n            if insertion_sort_str(a[i]) > insertion_sort_str(a[j]):\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\ndef lis_dp_segment(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of integers using dynamic programming.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    segment = [a[0]]\n    for i in range(len(a)):\n        if a[i] > segment[-1]:\n            segment.append(a[i])\n        else:\n            j = bisect.bisect_left(segment, a[i])\n            segment[j] = a[i]\n        dp[i] = len(segment)\n    return max(dp)\ndef lis_dp_segment_str(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of strings using dynamic programming.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    segment = [a[0]]\n    for i in range(len(a)):\n        if insertion_sort_str(a[i]) > insertion_sort_str(segment[-1]):\n            segment.append(a[i])\n        else:\n            j = bisect.bisect_left(segment, a[i])\n            segment[j] = a[i]\n        dp[i] = len(segment)\n    return max(dp)\ndef lis_dp_segment_bottom_up(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of integers using dynamic programming.\n    '''\n    if not a:\n        return 0\n    dp = [1 for _ in range(len(a))]\n    for i in range(1, len(a)):\n        for j in range(0, i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return max(dp)\ndef lis_dp_segment_bottom_up_str(a):\n    '''\n    Write a function to compute the length of the longest increasing subsequence in a given array of strings using dynamic programming.\n    '''\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '(a)(b){3}'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.findall(r'ab{3}', text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = '[ab]{3}'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search('ab{3}', text)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    result = pattern.search(text)\n    return result!= None\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r\"ab{3}\", text)\n    if match:\n        return match.group()\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # pattern = re.compile(\"ab{3}\")\n    # return pattern.search(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}')\n    if pattern.search(text):\n        return 'Match'\n    else:\n        return 'No Match'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile('ab{3}')\n    result = pattern.search(text)\n    if result is not None:\n        return 'Match Found!'\n    return 'Match not Found'\n"
    },
    {
        "number": 787,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r\"ab{3}\",text)\n    if result == None:\n        print(\"Not Found\")\n    else:\n        print(\"Found:\",result.group())\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split(','))\n    new_tuple_2 = tuple(test_list)\n    return (new_tuple, new_tuple_2)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    \n    # Create a tuple with the given string and list\n    new_tuple = tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), tuple(test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_str = tuple(test_str)\n    new_tuple = tuple(test_list)\n    return new_tuple\n    #Expected Output:\n    #('orange', 'apple', 'lemon')\n    #('1234', '4567', '8910')\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # INSERT CODE HERE\n    return ()\n    \n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    result = []\n    for x in range(len(nums)):\n        if x%2 == 0:\n            result.append(nums[x]%2 == 0)\n    return all(result)\nprint(even_position([2, 4, 6, 8, 10]))\nprint(even_position([2, 4, 3, 6, 7]))\nprint(even_position([2, 4, 3, 5, 6]))\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_number_count=0\n    for num in nums:\n        if num % 2 == 0:\n            even_number_count+=1\n        else:\n            pass\n    if even_number_count==len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    i = 0\n    while i < len(nums):\n        if nums[i] % 2!= 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2 == 0:\n            if nums[i]%2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        if i%2 == 0:\n            if nums[i] % 2 == 0:\n                new_list.append(True)\n            else:\n                new_list.append(False)\n        else:\n            new_list.append(False)\n    return new_list\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for n in nums:\n        if nums[n] % 2!= 0:\n            return False\n    return True\n    \ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for n in nums:\n        if nums[n] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    res = []\n    for elem in test_tup:\n        if not isinstance(elem, tuple):\n            res.append(elem)\n        else:\n            pass\n    return tuple(res)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n    \ndef remove_nested_while(test_tup):\n    '''\n    Write a while loop to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(0, len(test_tup)):\n        if type(test_tup[i]) == type(test_tup):\n            test_tup[i] = remove_nested(test_tup[i])\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    non_nested_test_tup = [tup for tup in test_tup if len(tup) == 1]\n    return non_nested_test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for i in range(len(test_tup)):\n        for j in range(len(test_tup[i])):\n            if isinstance(test_tup[i][j], tuple):\n                test_tup[i] = test_tup[i][:j] + test_tup[i][j+1:]\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = (1, 2, (3, 4), (1, 2))\n    result = []\n    for i in test_tup:\n        if type(i) == type(()):\n            result.append(i[0])\n        else:\n            result.append(i)\n    return tuple(result)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    out_list = []\n    for tup in test_tup:\n        if type(tup) == type([]):\n            out_list.append(tuple(remove_nested(tup)))\n        else:\n            out_list.append(tup)\n    return tuple(out_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    temp = []\n    for i in range(0, len(test_tup)):\n        for j in range(0, len(test_tup)):\n            if test_tup[i]!= test_tup[j]:\n                temp.append(test_tup[i])\n    return tuple(temp)\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[:1] + tuple(e for t in test_tup[1:] for e in t if e!= test_tup[0])\n"
    },
    {
        "number": 791,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    list_of_tuples = list(test_tup)\n    list_of_tuples.remove(test_tup[0])\n    print(list_of_tuples)\n    return tuple(list_of_tuples)\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    input_list = [[1,2,3],[3,4,5,6,7],[2,3,4,5,6,7,8,9,0]]\n    count = 0\n    for each in input_list:\n        if type(each) == list:\n            count += 1\n        else:\n            pass\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Time complexity O(n), n being the number of lists.\n    # Space complexity O(1)\n    count = 0\n    for elem in input_list:\n        if type(elem) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list:\n        if type(item) == type([]):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # total_count = 0\n    # for list_ in input_list:\n    #     total_count += 1 if isinstance(list_, list) else 0\n    # return total_count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 792,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_list(input_list[0])\n    \n    \ndef deep_reverse(input_list):\n    '''\n    Write a Python function which takes a list of lists and returns a new list \n    which contains the elements of the nested lists, in reversed order. \n    [1, [2, 3], 4] -> [4, [3, 2], 1]\n    '''\n    if input_list == []:\n        return []\n    else:\n        return deep_reverse(input_list[1:]) + [input_list[0]]\n    \n    \ndef sum_of_all_numbers(input_list):\n    '''\n    Write a Python function to add all the numbers in a given list.\n    '''\n    if input_list == []:\n        return 0\n    else:\n        return input_list[0] + sum_of_all_numbers(input_list[1:])\n    \n    \ndef is_valid_parentheses(input_str):\n    '''\n    Write a Python function to check whether a given string is a valid parentheses.\n    '''\n    if input_str == '':\n        return True\n    elif input_str[0] == ')':\n        return False\n    elif input_str[0] == '(':\n        return is_valid_parentheses(input_str[1:])\n    elif input_str[-1] == ')':\n        return False\n    elif input_str[-1] == '(':\n        return is_valid_parentheses(input_str[:-1])\n    \n    \ndef get_odd_indexes(input_list):\n    '''\n    Write a Python function that takes a list of numbers and returns a new list \n    with all the indexes of the odd numbers of the input list.\n    '''\n    if input_list == []:\n        return []\n    elif input_list[0] % 2 == 0:\n        return [0] + get_odd_indexes(input_list[1:])\n    else:\n        return [0] + get_odd_indexes(input_list[1:])\n    \n    \ndef is_all_strings(input_list):\n    '''\n    Write a Python function to check whether a given list contains all strings or not.\n    '''\n    if input_list == []:\n        return True\n    elif type(input_list[0]) == str:\n        return is_all_strings(input_list[1:])\n    else:\n        return False\n    \n    \ndef find_common_elements(list1, list2):\n    '''\n    Write a Python function to find all the common elements of two lists.\n    '''\n    if list1 == []:\n        return []\n    elif list2 == []:\n        return []\n    elif list1[0] in list2:\n        return [list1[0]] + find_common_elements(list1[1:], list2[1:])\n    elif list2[0] in list1:\n        return [list2[0]] + find_common_elements(list1[1:], list2[1:])\n    else:\n        return find_common_elements(list1, list2[1:])\n    \n    \ndef word_counter(input_list):\n    '''\n    Write a Python function to count the number of words in a given sentence. \n    '''\n    if input_list == []:\n        return 0\n    elif type(input_list[0]) == list:\n        return word_counter(input_list[0]) + word_counter(input_list[1:])\n    else:\n        return 1 + word_counter(input_list[1:])\n    \n    \ndef find_middle(input_list):\n    '''\n    Write a Python function to find the middle element of a given list. \n    '''\n    if len(input_list) % 2 == 1:\n        return input_list[len(input_list) // 2]\n    else:\n        return (input_list[len(input_list) // 2] + input_list[(len(input_list) // 2) - 1]) / 2\n    \n    \ndef is_all_numeric(input_list):\n    '''\n    Write a Python function to check whether a given list contains all integers or not.\n    '''\n    if input_list == []:\n        return True\n    elif input_list[0] % 1 == 0 and input_list[0] >= 0:\n        return is_all_numeric(input_list[1:])\n    else:\n        return False\n    \n    \ndef is_all_numeric2(input_list):\n    '''\n    Write a Python function to check whether a given list contains all integers or not.\n    '''\n    if input_list == []:\n        return True\n    elif input_list[0] % 1!= 0 or input_list[0] < 0:\n        return False\n    else:\n        return is_all_numeric2(input_list[1:])\n    \n    \ndef max_element(input_list):\n    '''\n    Write a Python function to find the maximum element in a given list. \n    '''\n    if input_list == []:\n        return 0\n    elif input_list[0] > max_element(input_list[1:]):\n        return input_list[0]\n    else:\n        return max_element(input_list[1:])\n    \n    \ndef min_element(input_list):\n    '''\n    Write a Python function to find the minimum element in a given list.\n    '''\n    if input_list == []:\n        return 0\n    elif input_list[0] < min_element(input_list[1:]):\n        return input_list[0]\n    else:\n        return min_element(input_list[1:])\n    \n    \ndef sum_of_all_elements(input_list):\n    '''\n    Write a Python function to find the sum of all elements in a given list.\n    '''\n    if input_list == []:\n        return 0\n    elif type(input_list[0]) == int:\n        return input_list[0] + sum_of_all_elements(input_list[1:])\n    else:\n        return sum_of_all_elements(input_list[0]) + sum_of_all_elements(input_list[1:])\n    \n    \ndef check_all_strings(input_list):\n    '''\n    Write a Python function to check whether a given list contains all strings or not.\n    '''\n    if input_list == []:\n        return True\n    elif type(input_list[0]) == str:\n        return check_all_strings(input_list[1:])\n    else:\n        return False\n    \n    \ndef check_all_integers(input_list):\n    '''\n    Write a Python function to check whether a given list contains all integers or not.\n    '''\n    if input_list == []:\n        return True\n    elif type(input_list[0]) == int:\n        return check_all_integers(input_list[1:])\n    else:\n        return False\n    \n    \ndef count_elements(input_list):\n    '''\n    Write a Python function to count the number of elements in a given list.\n    '''\n    if input_list == []:\n        return 0\n    else:\n        return 1 + count_elements(input_list[1:])\n    \n    \ndef common_elements(list1, list2):\n    '''\n    Write a Python function to find all the common elements of two lists.\n    '''\n    if list1 == []:\n        return []\n    elif list2 == []:\n        return []\n    elif list1[0] in list2:\n        return [list1[0]] + common_elements(list1[1:], list2[1:])\n    elif list2[0] in list1:\n        return [list2[0]] + common_elements(list1[1:], list2[1:])\n    else:\n        return common_elements(list1, list2[1:])\n    \n    \ndef swap_list_elements(input_lis"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if arr[i]==x:\n            return i\n    return -1\narr = [1,2,2,2,2,3,4,7,8,8]\nx = 2\nprint(last(arr,x)"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    left=0\n    right=n-1\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]==x:\n            if (mid==0 or arr[mid-1]!=x):\n                return mid\n            else:\n                right=mid-1\n        elif arr[mid]>x:\n            right=mid-1\n        else:\n            left=mid+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        print(-1)\n    else:\n        print(len(arr)-arr[::-1].index(x)-1)\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lower = 0\n    upper = len(arr)-1\n    while(lower<=upper):\n        mid = (lower+upper)//2\n        if arr[mid] == x:\n            if mid == len(arr)-1 or arr[mid+1]!= x:\n                return mid\n            lower = mid+1\n        elif arr[mid] < x:\n            lower = mid+1\n        else:\n            upper = mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low,high=0,len(arr)-1\n    while low<=high:\n        mid=(low+high)//2\n        if arr[mid]==x:\n            if mid==len(arr)-1 or arr[mid+1]!=x:\n                return mid\n            else:\n                high=mid-1\n        elif arr[mid]<x:\n            low=mid+1\n        else:\n            high=mid-1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr)-1\n    while left<=right:\n        mid = left + (right-left)//2\n        if arr[mid]>x:\n            right = mid -1\n        elif arr[mid]<x:\n            left = mid + 1\n        else:\n            if mid==len(arr)-1 or x<arr[mid+1]:\n                return mid\n            else:\n                left = mid + 1\n    return -1\n    \n    \n    \n    \ndef max_sum_contigous_subarray(arr):\n    '''\n    Write a python function to find the maximum sum of a contiguous subarray in a given array.\n    '''\n    max_sum = arr[0]\n    sum_from_start = arr[0]\n    for i in range(1,len(arr)):\n        if sum_from_start<0:\n            sum_from_start = arr[i]\n        else:\n            sum_from_start += arr[i]\n        if sum_from_start>max_sum:\n            max_sum = sum_from_start\n    return max_sum\n    \n    \n    \ndef find_all_subarrays_with_given_sum(arr,total):\n    '''\n    Write a python function to find all subarrays of a given array having a given sum.\n    '''\n    if len(arr)==0:\n        return []\n    start = 0\n    max_sum = arr[0]\n    curr_sum = arr[0]\n    for i in range(1,len(arr)):\n        curr_sum += arr[i]\n        if curr_sum==total:\n            return [(start,i)]\n        if curr_sum>max_sum:\n            max_sum = curr_sum\n            start = i\n    return []\n    \n    \n    \ndef find_inverse_pairs(arr):\n    '''\n    Write a python function to find the number of inversion pairs in a given array.\n    '''\n    return len(find_all_subarrays_with_given_sum(arr,0))\n    \n    \n    \n    \ndef find_missing_number(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i]!=i:\n            return i\n    return len(arr)\n    \n    \n    \n    \ndef find_missing_number_without_extra_space(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    arr.sort()\n    i=0\n    while i<len(arr):\n        if arr[i]!=i:\n            return i\n        else:\n            i+=1\n    return len(arr)\n    \n    \n    \ndef find_missing_number_xor(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    res = arr[0]\n    for i in range(1,len(arr)):\n        res^=arr[i]\n    for i in range(len(arr)):\n        res^=i\n    return res\n    \n    \n    \ndef find_missing_number_xor_v2(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    res = 0\n    for i in range(len(arr)+1):\n        res^=i\n    for i in arr:\n        res^=i\n    return res\n    \n    \n    \n    \ndef find_missing_number_shift_and_mask(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)):\n        missing_num <<= 1\n        missing_num |= 1\n    for i in arr:\n        missing_num ^= i\n    missing_num ^= len(arr)\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_linear_time(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    res = 0\n    for i in range(len(arr)+1):\n        res^=i\n    for i in arr:\n        res^=i\n    return res\n    \n    \n    \n    \ndef find_missing_number_linear_time_v2(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    for i in arr:\n        missing_num ^= i\n    for i in range(len(arr)+1):\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef sum_array_elements(arr):\n    '''\n    Write a python function to find the sum of the elements of the given array.\n    '''\n    res = 0\n    for i in arr:\n        res+=i\n    return res\n    \n    \n    \n    \ndef find_missing_number_non_linear_time(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    missing_num |= 1\n    for i in arr:\n        missing_num ^= i\n    for i in range(len(arr)+1):\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_non_linear_time_v2(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    missing_num |= 1\n    for i in arr:\n        missing_num ^= i\n    for i in range(len(arr)+1):\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_v3(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    missing_num |= 1\n    for i in arr:\n        missing_num ^= i\n    for i in range(len(arr)+1):\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_v4(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    for i in arr:\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_v5(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    for i in arr:\n        missing_num ^= i\n    for i in range(len(arr)+1):\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_v6(arr):\n    '''\n    Write a python function to find the missing number in a given integer array.\n    '''\n    missing_num = 1\n    for i in range(len(arr)+1):\n        missing_num <<= 1\n    for i in arr:\n        missing_num ^= i\n    for i in range(len(arr)+1):\n        missing_num ^= i\n    return missing_num\n    \n    \n    \n    \ndef find_missing_number_v7(arr):\n    '''\n    Write a python function to find the missing number in a given integer arra"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)\n    while left < right:\n        mid = left + (right-left)//2\n        if arr[mid] >= x:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = start + (end - start) // 2\n        if arr[mid] > x:\n            end = mid - 1\n        elif arr[mid] < x:\n            start = mid + 1\n        else:\n            if mid == len(arr) - 1 or arr[mid + 1]!= x:\n                return mid\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)\n    \n    while low<=high:\n        mid = low + (high-low)//2\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = \"^a.*b$\"\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    #^a.*b$\n    return re.search(r'a.*b',text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a[^b]+b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.compile(r'.*ab').search(text)\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile('a.*?b')\n    mo = regex.search(text)\n    if mo == None:\n        return False\n    else:\n        return True\n        "
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.b$'\n    if re.search(pattern,text):\n        return True\n    return False\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = '[abc]*ab$'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_start_end_middle(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b', with anything in between.\n    '''\n    pattern = '[a-z]*a[a-z]*b$'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_repetitions(text):\n    '''\n    Write a function that matches any four digit number that is divisible by 7, but not a multiple of 5.\n    '''\n    pattern = '\\d{4}[7,8,9]\\d{2}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_quantity(text):\n    '''\n    Write a function that matches a string with anything in between, the total quantity of matches is 2 or more.\n    '''\n    pattern = '\\w+\\d+\\w+'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_string_with_s(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 'ing'.\n    '''\n    pattern = '.*[s,S]*ing'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_string_start_end_middle(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 'ing', with anything in between.\n    '''\n    pattern = '[s,S]*ing'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_string_start_end_middle_star(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 'ing', with anything in between, the total quantity of matches is 2 or more.\n    '''\n    pattern = '[s,S]*ing'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_string_start_middle_end(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, with anything in between, ending in 'ing'.\n    '''\n    pattern = '[^a-z]*s.ing'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't'.\n    '''\n    pattern = '[s,S]t$'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between.\n    '''\n    pattern = '[s,S]t[^a-z]*'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is 4 or more.\n    '''\n    pattern = '[s,S]t[^a-z]*'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4.\n    '''\n    pattern = '[s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d_but_not_st(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4, but not'st'.\n    '''\n    pattern = '[s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d_but_not_st_or_s(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4, but not'st' or's'.\n    '''\n    pattern = '[^s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d_but_not_st_or_s_or_ing(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4, but not'st' or's' or 'ing'.\n    '''\n    pattern = '[^s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d_but_not_st_or_s_or_ing_or_ing(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4, but not'st' or's' or 'ing' or 'ing'.\n    '''\n    pattern = '[^s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d_but_not_st_or_s_or_ing_or_ing_or_at(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4, but not'st' or's' or 'ing' or 'ing' or 'at'.\n    '''\n    pattern = '[^s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and_q_and_d_but_not_st_or_s_or_ing_or_ing_or_at_or_in(text):\n    '''\n    Write a function that matches a string that has an's' followed by anything, ending in 't', with anything in between, and quantity is at least 4, but not'st' or's' or 'ing' or 'ing' or 'at' or 'in'.\n    '''\n    pattern = '[^s,S]t[^a-z]*[0-9,.]{4,}'\n    result = re.findall(pattern, text)\n    print(result)\n    \n    \n    \ndef text_s_and_st_w_q_and"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*b$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_start_end_range(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_end_start_range(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_words(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a[^a-z]*b\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_words_no_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a[^a-z]*?b\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_no_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_whole_word(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a\\sb$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_whole_word_no_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a\\sb$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_whole_word_two(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"^a\\sb$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_whole_word_two_no_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"^a\\sb$\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\n\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\n\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\r\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_4(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\r\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_5(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\r\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_6(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\r\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_7(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\r\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_8(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r\"a.*?b\\r\", text)\n    print(\"x = \" + str(x))\n    print(\"\")\n    \n    \ndef text_matching_regex_one_or_more_spaces_no_space_newline_9(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    start = re.search(r'[a]+[^b]', text).group()\n    end = re.search(r'[^a]b', text).group()\n    return start + end\n"
    },
    {
        "number": 794,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile('a.+?b$')\n    result = pattern.findall(text)\n    if result:\n        return result[0]\n    return None\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for num in dict:\n        total += dict[num]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for val in dict.values():\n        total += val\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k,v in dict.items():\n        sum += v\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for k, v in dict.items():\n        sum += v\n    return sum\n    \ndef return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum([v for k,v in dict.items()])\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum = sum + i\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # change this code\n    return sum(range(l, r+1))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(l,r+1):\n        if i%2!= 0:\n            sum_odd += i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd += i\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    l = int(input(\"Enter the lower limit: \"))\n    r = int(input(\"Enter the upper limit: \"))\n    for i in range(l,r+1):\n        if(i%2!=0):\n            sum = sum + i\n    print(sum)\n    return\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(range(1,n+1,2))\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return n * (n+1) / 2\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n>=0:\n        return n*(n+1)\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_even(n): \n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    if n>=0:\n        return n*(n-1)\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_negative(n): \n    '''\n    Write a python function to find the sum of all negative natural numbers within the range l and r.\n    '''\n    if n>=0:\n        return 0\n    else:\n        return n*(-n)\n        \ndef sum_zero(n): \n    '''\n    Write a python function to find the sum of all the natural numbers within the range l and r.\n    '''\n    if n>=0:\n        return (n*(n+1))/2\n    else:\n        return 'Please provide a positive number'\n        \ndef prime(n): \n    '''\n    Write a python function to find the prime numbers within the range l and r.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return n*' '+' '+'is Prime'\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_primes(n): \n    '''\n    Write a python function to find the sum of all prime numbers within the range l and r.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return n*' '+' '+'is Prime'\n    else:\n        return 'Please provide a positive number'\n        \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of n.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 1\n        else:\n            return n*factorial(n-1)\n    else:\n        return 'Please provide a positive number'\n        \ndef fibonacci(n): \n    '''\n    Write a python function to find the Fibonacci sequence upto n-th term.\n    '''\n    if n>=0:\n        if n==0:\n            return 0\n        elif n==1:\n            return 1\n        else:\n            return fibonacci(n-2)+fibonacci(n-1)\n    else:\n        return 'Please provide a positive number'\n        \ndef prime_factors(n): \n    '''\n    Write a python function to find the prime factors of a number n.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            for x in range(2,n+1):\n                if n%x==0:\n                    if n==x:\n                        return x\n                    else:\n                        return prime_factors(n//x)\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_factors(n): \n    '''\n    Write a python function to find the sum of the prime factors of a number n.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return prime_factors(n)*prime_factors(n+1)\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_divisors(n): \n    '''\n    Write a python function to find the sum of divisors of a number n.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return (prime_factors(n)*(n+1))+1\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_divisors_alt(n): \n    '''\n    Write a python function to find the sum of divisors of a number n.\n    Alternative solution\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return 2*((n+1)**0.5)\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_divisors_alt2(n): \n    '''\n    Write a python function to find the sum of divisors of a number n.\n    Alternative solution 2\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return (n**2+n)/2\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_divisors_alt3(n): \n    '''\n    Write a python function to find the sum of divisors of a number n.\n    Alternative solution 3\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return (2*(n-1)+(n+1)**2)/2\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_divisors_alt4(n): \n    '''\n    Write a python function to find the sum of divisors of a number n.\n    Alternative solution 4\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 'Not Prime'\n        else:\n            return (n**2+n)/2\n    else:\n        return 'Please provide a positive number'\n        \ndef factorial_digit(n): \n    '''\n    Write a python function to find the factorial of a number n.\n    '''\n    if n>=0:\n        if n==0 or n==1:\n            return 1\n        else:\n            return n*factorial_digit(n-1)\n    else:\n        return 'Please provide a positive number'\n        \ndef is_abundant(n): \n    '''\n    Write a python function to check whether a number is abundant or not.\n    '''\n    if n>0:\n        if n==factorial_digit(n):\n            return 'Abundant'\n        else:\n            return 'Not Abundant'\n    else:\n        return 'Please provide a positive number'\n        \ndef prime_abundant(n): \n    '''\n    Write a python function to find the sum of all abundant numbers upto n.\n    '''\n    if n>0:\n        return n*' '+' '+'is Abundant'\n    else:\n        return 'Please provide a positive number'\n        \ndef is_perfect(n): \n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    if n>0:\n        if n==sum_divisors(n):\n            return 'Perfect'\n        else:\n            return 'Not Perfect'\n    else:\n        return 'Please provide a positive number'\n        \ndef is_mersenne(n): \n    '''\n    Write a python function to check whether a number is Mersenne or not.\n    '''\n    if n>=0:\n        if n==2**n-1:\n            return 'Mersenne'\n        else:\n            return 'Not Mersenne'\n    else:\n        return 'Please provide a positive number'\n        \ndef is_palindrome(n): \n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n>=0:\n        if str(n)==str(n)[::-1]:\n            return 'Palindrome'\n        else:\n            return 'Not Palindrome'\n    else:\n        return 'Please provide a positive number'\n        \ndef is_armstrong(n): \n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    if n>=0:\n        return n==sum_digit(n)**3\n    else:\n        return 'Please provide a positive number'\n        \ndef sum_digit(n): \n    '"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = int(input())\n    r = int(input())\n    sum = 0\n    for i in range(l, r+1):\n        if(i % 2 == 1):\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2==1):\n            sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum+=num\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    if len(arr) == 0:  \n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n    \n    \ndef _reverse(arr):  \n    '''\n    Write a python function to reverse an array.\n    '''\n    if len(arr) == 0:  \n        return []\n    else:\n        return _reverse(arr[1:]) + [arr[0]]\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for x in arr:\n        sum=sum+x\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr_sum = 0\n    for i in range(0,len(arr)):\n        arr_sum = arr_sum + arr[i]\n    return arr_sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    result = 0\n    for i in arr:\n        result += i\n    return result\n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \n    \ndef _mean(arr):\n    '''\n    Write a python function to find the mean of an array.\n    '''\n    return sum(arr)/len(arr)\n    \n    \ndef _variance(arr, mean=None):\n    '''\n    Write a python function to find the variance of an array.\n    '''\n    \n    if not mean:\n        mean = _mean(arr)\n    \n    return sum((x-mean)**2 for x in arr)\n    \n    \ndef _standard_deviation(arr, mean=None, variance=None):\n    '''\n    Write a python function to find the standard deviation of an array.\n    '''\n    if not variance:\n        variance = _variance(arr)\n    \n    if not mean:\n        mean = _mean(arr)\n        \n    return variance**0.5\n    \n    \ndef _correlation(arr1, arr2, mean1=None, mean2=None, variance1=None, variance2=None):\n    '''\n    Write a python function to find the correlation between two arrays.\n    '''\n    if not mean1:\n        mean1 = _mean(arr1)\n    if not mean2:\n        mean2 = _mean(arr2)\n        \n    if not variance1:\n        variance1 = _variance(arr1, mean1)\n    if not variance2:\n        variance2 = _variance(arr2, mean2)\n        \n    return ((_mean(arr1)*_mean(arr2))-(mean1*mean2))/(variance1*variance2)**0.5\n        \n    \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5]\n    mean = _mean(arr)\n    variance = _variance(arr, mean)\n    standard_deviation = _standard_deviation(arr, mean, variance)\n    \n    print(f\"mean: {mean}\")\n    print(f\"variance: {variance}\")\n    print(f\"standard deviation: {standard_deviation}\")\n    \n    arr1 = [1,2,3,4,5]\n    arr2 = [2,3,5,7,9]\n    correlation = _correlation(arr1, arr2)\n    print(f\"correlation: {correlation}\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 798,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    res = 0\n    for i in arr:\n        res += i\n    return res\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (2**d)-1\n    mask_bits = 32 - d\n    \n    return (n << d) | (n >> mask_bits)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    assert type(n)==type(0) and type(d)==type(0) and d>0 and d<32\n    assert n>=0 and n<2**32\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert to binary and shift left \n    n_bin = bin(n).lstrip('0b')\n    n_bin = '0' * (32-len(n_bin)) + n_bin\n    n_bin = n_bin[d:] + n_bin[:d] \n    # print(n_bin)\n    # convert to decimal\n    n_dec = int(n_bin, 2)\n    return n_dec\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    mask <<= 32 - d\n    return (n << d) | (n >> (32 - d))\n    \ndef is_prime(n):\n    '''\n    is_prime is a function that tests if a number is prime\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    return all(n % i for i in range(3, int(n**0.5) + 1, 2))\n    \n    \ndef is_prime_k(n, k):\n    '''\n    is_prime_k(n, k) is a function that tests if n is prime to k\n    '''\n    if n % 2 == 0 and n > 2:\n        return False\n    for i in range(3, int(n**0.5 + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n    \n    \ndef rotate_right(n, d):\n    '''\n    rotate_right is a function that rotate right a number by d bits\n    '''\n    mask = (1 << d) - 1\n    mask = 0xffffffff ^ mask\n    return (n >> d) | (n << 32 - d) & mask\n    \ndef rotate_left(n, d):\n    '''\n    rotate_left is a function that rotate left a number by d bits\n    '''\n    mask = (1 << d) - 1\n    mask = 0xffffffff ^ mask\n    return (n << d) | (n >> 32 - d) & mask\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xffffffff >> (32 - d)\n    n = (n << d) | (n >> (32 - d))\n    n &= mask\n    return n\n    \ndef left_rotate_64(n,d):\n    mask = 0xffffffffffffffff >> (64 - d)\n    n = (n << d) | (n >> (64 - d))\n    n &= mask\n    return n\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    n = (n >> d) | (n << (32 - d)) & mask\n    return n\n    \ndef right_rotate_64(n,d):\n    mask = (1 << d) - 1\n    n = (n >> d) | (n << (64 - d)) & mask\n    return n\n    \ndef parity(n):\n    '''\n    Write a function to check the parity of a 32 bit unsigned integer\n    '''\n    c = 0\n    while n:\n        c += 1\n        n = n & (n - 1)\n    return c & 1\n    \ndef parity_64(n):\n    '''\n    Write a function to check the parity of a 64 bit unsigned integer\n    '''\n    c = 0\n    while n:\n        c += 1\n        n = n & (n - 1)\n    return c & 1\n    \ndef is_bit_set(n,i):\n    '''\n    Write a function to check if the ith bit of a 32 bit unsigned integer is set.\n    '''\n    return (n & (1 << i))!= 0\n    \ndef is_bit_set_64(n,i):\n    '''\n    Write a function to check if the ith bit of a 64 bit unsigned integer is set.\n    '''\n    return (n & (1 << i))!= 0\n    \ndef clear_bit(n,i):\n    '''\n    Write a function to clear the ith bit of a 32 bit unsigned integer.\n    '''\n    mask = ~(1 << i)\n    return (n & mask)\n    \ndef clear_bit_64(n,i):\n    '''\n    Write a function to clear the ith bit of a 64 bit unsigned integer.\n    '''\n    mask = ~(1 << i)\n    return (n & mask)\n    \ndef set_bit(n,i):\n    '''\n    Write a function to set the ith bit of a 32 bit unsigned integer.\n    '''\n    mask = 1 << i\n    return (n & mask)\n    \ndef set_bit_64(n,i):\n    '''\n    Write a function to set the ith bit of a 64 bit unsigned integer.\n    '''\n    mask = 1 << i\n    return (n & mask)\n    \ndef test_parity():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),parity(n)))\n        \ndef test_is_bit_set():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),is_bit_set(n,i)))\n        \ndef test_left_rotate():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),bin(left_rotate(n,i))))\n        \ndef test_right_rotate():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),bin(right_rotate(n,i))))\n        \ndef test_set_bit():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),bin(set_bit(n,i))))\n        \ndef test_clear_bit():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),bin(clear_bit(n,i))))\n        \ndef test_left_rotate_64():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),bin(left_rotate_64(n,i))))\n        \ndef test_right_rotate_64():\n    for i in range(32):\n        n = random.randint(0,2**32-1)\n        print('{}:{}'.format(bin(n),bin(right_rotate_64(n,i))))\n        \ndef test_is_bit_set_64():\n    for i in range(64):\n        n = random.randint(0,2**64-1)\n        print('{}:{}'.format(bin(n),is_bit_set_64(n,i)))\n        \ndef test_set_bit_64():\n    for i in range(64):\n        n = random.randint(0,2**64-1)\n        print('{}:{}'.format(bin(n),is_bit_set_64(n,i)))\n        \ndef test_clear_bit_64():\n    for i in range(64):\n        n = random.randint(0,2**64-1)\n        print('{}:{}'.format(bin(n),is_bit_set_64(n,i)))\n        \ndef test_clear_bit_64():\n    for i in range(64):\n        n = random.randint(0,2**64-1)\n        print('{}:{}'.format(bin(n),is_bit_set_64(n,i)))\n        \nif __name__ == '__main__':\n    print(bin(left_rotate(0b10011010,2)))\n    print(bin(right_rotate(0b10011010,2)))\n    print(bin(set_bit(0b10011010,2)))\n    print(bin(clear_bit(0b10011010,2)))\n    print(bin(left_rotate_64(0b10011010,2)))\n    print(bin(right_rotate_64(0b10011010,2)))\n    print(bin(set_bit_64(0b10011010,2)))\n    print(bin(clear_bit_64(0b10011010,2)))\n    print(parity(0b10011010))\n    print(parity_64(0b10011010))\n    print(is_bit_set(0b10011010,2))\n    print(is_bit_set_64(0b10011010,2))\n    print(test_parity())\n    print(test_is_bit_set())\n    print(test_left_rotate())\n    print(test_right_rotate())\n    print(test_set_bit())\n    print(test_clear_bit())\n    print(test_left_rotate_64())\n    print(test_right_rotate_64())\n    print(test_set_bit_64())\n    print(test_clear_bit_64())\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask=0xffffffff>>(32-d)\n    return (n<<d)|(n&mask)\n    \ndef test_left_rotate():\n    n=0x12345678\n    d=2\n    result=left_rotate(n,d)\n    print('{:016x}'.format(result))\n    \n    n=0x12345678\n    d=8\n    result=left_rotate(n,d)\n    print('{:016x}'.format(result))\n    \n    n=0x12345678\n    d=0\n    result=left_rotate(n,d)\n    print('{:016x}'.format(result))\n    \ntest_left_rotate()\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d)|(n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    binary = bin(n)[2:]\n    n = len(binary)\n    if n < d:\n        d %= n\n    d = n - d\n    return int(binary[d:] + binary[:d], 2)\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # get bits of n\n    n_bits = bin(n)[2:]\n    # pad zeros to the front to make it 32 bits\n    n_bits = n_bits.zfill(32)\n    # get all the bits except the last d bits\n    left_padded_bits = n_bits[:-d]\n    # get the last d bits\n    right_bits = n_bits[-d:]\n    # calculate the number we want to rotate to\n    rotated_bits = left_padded_bits + right_bits\n    # convert the bits to integer\n    rotated_bits = int(rotated_bits, 2)\n    # convert the integer to binary number\n    rotated_bits = bin(rotated_bits)[2:]\n    # pad zeros to the front to make it 32 bits\n    rotated_bits = rotated_bits.zfill(32)\n    # get all the bits except the last d bits\n    left_padded_bits = rotated_bits[:-d]\n    # get the last d bits\n    right_bits = rotated_bits[-d:]\n    # calculate the number we want to rotate to\n    rotated_bits = left_padded_bits + right_bits\n    # convert the bits to integer\n    rotated_bits = int(rotated_bits, 2)\n    return rotated_bits\n"
    },
    {
        "number": 799,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # print(n)\n    # print(bin(n))\n    # print(bin(n<<d))\n    # print(bin(n>>(32-d)))\n    return n<<d | (n>>(32-d))\n    \n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\ndef remove_all_numeric(text):\n    '''\n    Write a function to remove all numbers from a string.\n    '''\n    return re.sub(r'[0-9]+', '', text)\ndef remove_all_alphabets(text):\n    '''\n    Write a function to remove all alphabets from a string.\n    '''\n    return re.sub(r'[a-zA-Z]+', '', text)\ndef remove_all_words(text):\n    '''\n    Write a function to remove all words from a string.\n    '''\n    return re.sub(r'[a-zA-Z0-9]+', '', text)\ndef remove_all_numeric_words(text):\n    '''\n    Write a function to remove all numeric words from a string.\n    '''\n    return re.sub(r'[0-9]+', '', text)\ndef remove_all_alphabets_words(text):\n    '''\n    Write a function to remove all alphabets words from a string.\n    '''\n    return re.sub(r'[a-zA-Z]+', '', text)\ndef remove_all_special_characters(text):\n    '''\n    Write a function to remove all special characters from a string.\n    '''\n    return re.sub(r'[^a-zA-Z0-9]+', '', text)\ndef remove_all_numeric_special_characters(text):\n    '''\n    Write a function to remove all numeric special characters from a string.\n    '''\n    return re.sub(r'[^0-9]+', '', text)\ndef swap_two_strings(a,b):\n    '''\n    Write a function to swap two strings.\n    '''\n    temp = a\n    a = b\n    b = temp\n    return a,b\ndef is_even(n):\n    '''\n    Write a function to check if the number is even.\n    '''\n    return True if n%2==0 else False\ndef is_odd(n):\n    '''\n    Write a function to check if the number is odd.\n    '''\n    return True if n%2==1 else False\ndef is_greater_than(n1,n2):\n    '''\n    Write a function to check if n1 is greater than n2.\n    '''\n    return True if n1>n2 else False\ndef is_greater_than_equal_to(n1,n2):\n    '''\n    Write a function to check if n1 is greater than or equal to n2.\n    '''\n    return True if n1>=n2 else False\ndef is_less_than(n1,n2):\n    '''\n    Write a function to check if n1 is less than n2.\n    '''\n    return True if n1<n2 else False\ndef is_less_than_equal_to(n1,n2):\n    '''\n    Write a function to check if n1 is less than or equal to n2.\n    '''\n    return True if n1<=n2 else False\ndef is_equal_to(n1,n2):\n    '''\n    Write a function to check if n1 is equal to n2.\n    '''\n    return True if n1==n2 else False\ndef is_not_equal_to(n1,n2):\n    '''\n    Write a function to check if n1 is not equal to n2.\n    '''\n    return True if n1!=n2 else False\ndef is_alpha(text):\n    '''\n    Write a function to check if the string is alphabets only.\n    '''\n    return True if text.isalpha() else False\ndef is_digit(text):\n    '''\n    Write a function to check if the string is digits only.\n    '''\n    return True if text.isdigit() else False\ndef is_alphabets_and_numeric(text):\n    '''\n    Write a function to check if the string is alphabets and numeric.\n    '''\n    return True if text.isalnum() else False\ndef is_alphabets_and_numeric_and_special_characters(text):\n    '''\n    Write a function to check if the string is alphabets and numeric and special characters.\n    '''\n    return True if text.isalnum() and text.isalnum() else False\ndef is_alpha_and_numeric(text):\n    '''\n    Write a function to check if the string is alphabets and numeric.\n    '''\n    return True if text.isalnum() else False\ndef is_alpha_and_numeric_and_special_characters(text):\n    '''\n    Write a function to check if the string is alphabets and numeric and special characters.\n    '''\n    return True if text.isalnum() and text.isalnum() else False\ndef is_even_and_odd(n):\n    '''\n    Write a function to check if n is even and odd.\n    '''\n    return True if is_even(n) and is_odd(n) else False\ndef is_even_and_odd_number(n):\n    '''\n    Write a function to check if n is even and odd number.\n    '''\n    return True if is_even(n) and is_odd(n) else False\ndef reverse_a_string(text):\n    '''\n    Write a function to reverse a string.\n    '''\n    return text[::-1]\ndef reverse_a_string_without_using_built_in_method(text):\n    '''\n    Write a function to reverse a string without using the built in method.\n    '''\n    reverse = \"\"\n    for i in text:\n        reverse = i+reverse\n    return reverse\ndef find_all_occurrences_of_a_character(text,char):\n    '''\n    Write a function to find all occurrences of a character in a string.\n    '''\n    occurrences = re.findall(char,text)\n    return occurrences\ndef find_all_occurrences_of_a_word(text,word):\n    '''\n    Write a function to find all occurrences of a word in a string.\n    '''\n    occurrences = re.findall(word,text)\n    return occurrences\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    return True if text.upper()==reverse_a_string(text).upper() else False\ndef is_palindrome_without_using_built_in_method(text):\n    '''\n    Write a function to check if a string is a palindrome without using the built in method.\n    '''\n    return True if text.upper()==reverse_a_string_without_using_built_in_method(text).upper() else False\ndef is_palindrome_without_using_built_in_method_and_without_using_extra_space(text):\n    '''\n    Write a function to check if a string is a palindrome without using the built in method and without using extra space.\n    '''\n    return True if text.upper()==text[::-1].upper() else False\ndef is_palindrome_without_using_built_in_method_and_without_using_extra_space_and_without_using_while_loop(text):\n    '''\n    Write a function to check if a string is a palindrome without using the built in method and without using extra space and without using while loop.\n    '''\n    return True if text.upper()==text[::-1].upper() else False\ndef find_max_in_a_list(l):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    return max(l)\ndef find_min_in_a_list(l):\n    '''\n    Write a function to find the minimum number in a list.\n    '''\n    return min(l)\ndef find_max_in_a_list_without_using_built_in_method(l):\n    '''\n    Write a function to find the maximum number in a list without using the built in method.\n    '''\n    m = l[0]\n    for i in l:\n        i"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    #Remove newlines, tabs, and spaces.\n    text = text.replace(\"\\n\",\"\")\n    text = text.replace(\"\\t\",\"\")\n    text = text.replace(\" \",\"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # use regular expressions\n    # remove whitespace characters\n    # re.sub(pattern,replacement,string)\n    # pattern: characters to remove\n    # replacement: character to replace with\n    # string: string to be processed\n    # return the cleaned up string\n    return re.sub(\"\\s+\",' ',text).strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \" \".join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+',' ',text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    result = re.sub(r'\\s+', '', text)\n    return result\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # new_text = text.replace(' ', '')\n    # return new_text\n    return re.sub(' +',' ', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y:\n        counter += 1\n    if x == z:\n        counter += 1\n    if y == z:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in range(x, y + 1):\n        if num in range(x, y + 1):\n            if num == z:\n                count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x==y==z:\n        counter = 3\n    elif x==y or x==z or y==z:\n        counter = 2\n    else:\n        counter = 0\n    return counter\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y:\n        count += 1\n    elif x == z:\n        count += 1\n    elif y == z:\n        count += 1\n    elif x!= y and x!= z and y!= z:\n        count = 0\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x==y and y==z:\n        return 3\n    else:\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y and y == z:\n        counter = 1\n    if x == y and x!= z:\n        counter = 2\n    if x == z and x!= y:\n        counter = 2\n    if y == z and y!= x:\n        counter = 2\n    return counter\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y or x == z or y == z:\n        count += 2\n    else:\n        count += 0\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    if x == y == z:\n        counter += 1\n    if y == x == z:\n        counter += 1\n    if z == x == y:\n        counter += 1\n    if y == z == x:\n        counter += 1\n    if z == y == x:\n        counter += 1\n    return counter\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    print(x,y,z)\n    if x == y and y == z:\n        print(3)\n        return 3\n    elif x == y or x == z or y == z:\n        print(2)\n        return 2\n    else:\n        print(0)\n        return 0\n"
    },
    {
        "number": 801,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    if x==y or x==z or y==z:\n        count=3\n    elif x>y or x>z or y>z:\n        count=0\n    else:\n        if x<y and x<z:\n            count=0\n        elif y<x and y<z:\n            count=0\n        elif z<x and z<y:\n            count=0\n        else:\n            count=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0:\n        return 0\n    \n    min_el = arr[0]\n    max_el = arr[-1]\n    \n    if len(set(arr)) == 1:\n        return 0\n    \n    for i in range(len(arr)):\n        if arr[i] < min_el:\n            min_el = arr[i]\n        \n        if arr[i] > max_el:\n            max_el = arr[i]\n    \n    min_el_idx = arr.index(min_el)\n    max_el_idx = arr.index(max_el)\n    \n    if min_el_idx < max_el_idx:\n        return max_el_idx - min_el_idx\n    else:\n        return len(arr) - max_el_idx + min_el_idx\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    def count_rotations(arr):\n        if len(arr) == 1:\n            return 0\n        if arr[0] <= arr[-1]:\n            return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        mid = (start+end)//2\n        if arr[mid] > arr[end]:\n            start = mid + 1\n        else:\n            end = mid\n    return start\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    arr = [2,1,3]\n    # if arr[0] < arr[1] and arr[1] < arr[2]:\n    #     return 0\n    # if arr[0] > arr[1] and arr[1] > arr[2]:\n    #     return 0\n    \n    n = len(arr)\n    start = 0\n    end = n-1\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    return 0\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    l = 0\n    r = n - 1\n    while (l <= r):\n        mid = int((l + r) / 2)\n        if (arr[mid] > arr[r]):\n            l = mid + 1\n        elif (arr[mid] < arr[r]):\n            r = mid - 1\n        elif (arr[mid] == arr[r]):\n            r = r - 1\n    return r\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] > arr[high]:\n            low = mid + 1\n        elif arr[mid] < arr[high]:\n            high = mid\n        else:\n            high -= 1\n    return low\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    length = len(arr)\n    rotations = 0\n    # for i in range(length):\n    #     if arr[i] > arr[i+1]:\n    #         rotations += 1\n    #         break\n    for i in range(1,length):\n        if arr[i] < arr[i-1]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # The first element of array is at right position\n    if arr[0]<=arr[-1]:\n        return 0\n    else:\n        # find the minimum element of the array in linear scan\n        min_element=arr[0]\n        for i in range(1,len(arr)):\n            if min_element>arr[i]:\n                min_element=arr[i]\n        # the minimum element is at first position of the array\n        # Find the count\n        count=0\n        for i in range(0,len(arr)):\n            if arr[i]>min_element:\n                count+=1\n        return count\n"
    },
    {
        "number": 802,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    rotate_count = 0\n    for i in range(n):\n        if arr[i] < arr[(i+1)%n]:\n            continue\n        else:\n            rotate_count += 1\n    return rotate_count\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n >= 0 and sqrt(n) % 1 == 0\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return (sqrt(n) - int(sqrt(n)) == 0)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = n // 2\n    while x * x > n:\n        x = (x + (n // x)) // 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n ** 0.5\n    return (x * x == n)\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    while (x * x > n) :\n        x = (x + n / x) / 2\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    s = int(math.sqrt(n))\n    return s*s == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if (n < 2) :\n        return False;\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    x = 1\n    while x * x < n:\n        x += 1\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2:\n        return False\n    \n    x = 1\n    while (x * x < n):\n        x = x + 1\n    \n    if x * x == n:\n        return True\n    \n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = math.sqrt(n)\n    return int(root + 0.5) ** 2 == n\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    mult = 1\n    for x in arr:\n        mult *= x\n    if mult % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if(len(arr)==0):\n        return False\n    prod=1\n    for ele in arr:\n        prod*=ele\n    if(prod%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for x in arr:\n        prod *= x\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    def product_is_even(numbers):\n        x = 1\n        for i in numbers:\n            x *= i\n        return x % 2 == 0\n    return product_is_even(arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in arr:\n        product = product * i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Check if lists is empty\n    if len(lists) == 0:\n        return lists\n    # Check if lists only has 1 element\n    if len(lists) == 1:\n        return lists[0]\n    # Create sum_list list\n    sum_list = []\n    # Loop through lists\n    for list in lists:\n        # Get sum of list\n        sum_list.append(sum(list))\n    # Return list with highest sum\n    return lists[sum_list.index(max(sum_list))]\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    maximum = 0\n    maximum_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max = lists[0][0]\n    for lst in lists:\n        total = 0\n        for n in lst:\n            total += n\n            if total > max:\n                max = total\n    return max\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for list in lists:\n        current_sum = 0\n        for i in range(len(list)):\n            current_sum += list[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = list\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if lists[i][j] == 0:\n                lists[i][j] = None\n    result = []\n    for i in range(len(lists)):\n        temp = []\n        for j in range(len(lists[i])):\n            if lists[i][j]!= None:\n                temp.append(lists[i][j])\n        result.append(temp)\n    max = 0\n    for i in result:\n        if sum(i) > max:\n            max = sum(i)\n    result = []\n    for i in result:\n        if sum(i) == max:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    #return max(lists, key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return list(filter(lambda x: sum(x) == max([sum(i) for i in lists]), lists))\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return max(lists, key=sum)\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n"
    },
    {
        "number": 805,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = None\n    max_list = []\n    for sublist in lists:\n        curr_sum = sum(sublist)\n        if max_sum is None or curr_sum > max_sum:\n            max_sum = curr_sum\n            max_list = sublist\n    return max_list\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(len(list(group)) for group in test_str.split() if group.isupper())\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    else:\n        count = 1\n        temp = 1\n        for i in range(1,len(test_str)):\n            if test_str[i] >= test_str[i-1]:\n                temp += 1\n            else:\n                temp = 1\n            if temp >= count:\n                count = temp\n        return count\n    \ndef min_run_uppercase(test_str):\n    '''\n    Write a function to find minimum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    else:\n        count = 1\n        temp = 1\n        for i in range(1,len(test_str)):\n            if test_str[i] >= test_str[i-1]:\n                temp += 1\n            else:\n                temp = 1\n            if temp <= count:\n                count = temp\n        return count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return len(max(test_str.split(), key=len))\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max = 0\n    for char in test_str:\n        if char.isupper():\n            count += 1\n            if count > max:\n                max = count\n        else:\n            count = 0\n    return max\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_length = 0\n    for i in range(len(test_str)):\n        current_run = 0\n        for j in range(i,len(test_str)):\n            if test_str[j].isupper():\n                current_run += 1\n                if current_run > max_length:\n                    max_length = current_run\n            else:\n                break\n    return max_length\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run_length = 0\n    for i in range(len(test_str)):\n        cnt = 1\n        if test_str[i] == test_str[i+1].upper():\n            cnt += 1\n        else:\n            cnt = 1\n        if cnt > max_run_length:\n            max_run_length = cnt\n    return max_run_length\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_uppercase_count = 0\n    current_uppercase_count = 0\n    for i in test_str:\n        if i.isupper():\n            current_uppercase_count += 1\n        else:\n            if current_uppercase_count > max_uppercase_count:\n                max_uppercase_count = current_uppercase_count\n            current_uppercase_count = 0\n    if current_uppercase_count > max_uppercase_count:\n        max_uppercase_count = current_uppercase_count\n    return max_uppercase_count\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Assign a variable to keep track of max_run\n    max_run = 0\n    # Assign a variable to hold the character that has the most run\n    current_run = ''\n    # Iterate through the test_str\n    for char in test_str:\n        # Check if char is uppercase\n        if char.isupper():\n            # Add 1 to current run\n            current_run += char\n            # If length of current run is greater than max_run\n            if len(current_run) > max_run:\n                # Set max_run to current run\n                max_run = len(current_run)\n                # Set current run to empty string\n                current_run = ''\n        # Else if char is not uppercase\n        else:\n            # If current run is not empty\n            if current_run:\n                # Set current run to empty string\n                current_run = ''\n    # Return the max_run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = []\n    for i in test_str:\n        if i.isupper():\n            l.append(i)\n    return max(l, key=len)\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n        elif i == len(nums) - 1:\n            return 'No odd number in the list'\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!= 0:\n            return num\n            break\n    return \"No odd numbers in the list\"\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #print(nums)\n    for x in nums:\n        if x % 2 == 0:\n            return None\n        else:\n            return x\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for n in nums:\n        if n%2!= 0:\n            return n\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for sub_tup in K:\n        if len(test_tup)!= len(sub_tup):\n            continue\n        match = True\n        for i in range(len(sub_tup)):\n            if sub_tup[i]!= test_tup[i]:\n                match = False\n                break\n        if match:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = [str(x) for x in test_tup]\n    test_string = \" \".join(test_tup)\n    test_string = test_string.lower()\n    k_list = []\n    k_list = k_list + K\n    k_list = [x.lower() for x in k_list]\n    k_list = [x.strip() for x in k_list]\n    k_list = [x.replace(\" \",\"\") for x in k_list]\n    if test_string in k_list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_l = list(test_tup)\n    if len(test_l) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup)!= K:\n        return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for x in test_tup:\n        if x[1] == K:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    def check(test_tup, K):\n        if K in test_tup:\n            print(K)\n        else:\n            print('Not found')\n    check(test_tup, K)\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K == 0:\n        return True\n    elif K == 1:\n        if len(test_tup) == 1:\n            return True\n    elif K == len(test_tup):\n        if len(test_tup) == K:\n            return True\n    else:\n        if len(test_tup) > K:\n            return False\n    return True\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for k in K:\n        for i in range(len(test_tup)):\n            if k == test_tup[i]:\n                return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for test_tup in K:\n        if test_tup in test_tup:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[1] == K:\n        return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup2[0]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup2 < test_tup1:\n        print('True')\n    else:\n        print('False')\n    return\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all([test_tup2[i] < test_tup1[i] for i in range(len(test_tup1))])\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    flag = False\n    for x, y in zip(test_tup1, test_tup2):\n        if x > y:\n            flag = True\n    return flag\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[i] < test_tup2[i]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # return a list of booleans, each indicating whether the element in the second tuple is smaller than the element in the first tuple\n    res_lst = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            res_lst.append(True)\n        else:\n            res_lst.append(False)\n    return res_lst\n"
    }
]