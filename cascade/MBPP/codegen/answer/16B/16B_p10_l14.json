[
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    elements = []\n    for elm in test_tup1:\n        if elm in test_tup2:\n            elements.append(elm)\n    print(elements)\n    return elements\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # We can use a set in python to convert the tuples into a set.\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    intersection_set = set_tup1.intersection(set_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n    \n    #return [i for i in test_tup1 if i in test_tup2]\n    \n    #output = list(set(test_tup1).intersection(set(test_tup2)))\n    #return output\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if type(test_tup1) == tuple and type(test_tup2) == tuple:\n        if len(test_tup1) == len(test_tup2):\n            print(\"The tuples are of same size\")\n        else:\n            print(\"The tuples are of different size\")\n        if type(test_tup1[0]) == tuple and type(test_tup2[0]) == tuple:\n            if len(test_tup1[0]) == len(test_tup2[0]):\n                print(\"The tuples are of same size\")\n            else:\n                print(\"The tuples are of different size\")\n    else:\n        print(\"The passed parameters are not tuples\")\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    return [x for x in test_tup1 if x in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return None\n    return [i for i in test_tup1 if i in test_tup2]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    elif test_tup1 == test_tup2:\n        return test_tup1\n    else:\n        shared_list = []\n        for i in range(len(test_tup1)):\n            if test_tup1[i] in test_tup2:\n                shared_list.append(test_tup1[i])\n        return shared_list\n        \n    \nif __name__ == '__main__':\n    print(similar_elements((1,2,3), (3,2,1,0)))\n    print(similar_elements((2,2,3), (3,2,1,0))"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_items = []\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = list(set(test_tup1) & set(test_tup2))\n    return shared_elements\n    \ndef random_tup_generator(start, end, size):\n    '''\n    Write a function that generates a tuple randomly, without using the random module.\n    '''\n    return tuple([random.randint(start, end) for i in range(size)])\n    \ndef list_of_lists_generator(start, end, num_of_lists, size_of_lists):\n    '''\n    Write a function that generates a list of tuples, each tuple contains a value from a range.\n    '''\n    return [random_tup_generator(start, end, size_of_lists) for i in range(num_of_lists)]\n    \ndef sort_tuple(test_tup, descending_order = False):\n    '''\n    Write a function that sorts the tuple values in a descending order.\n    '''\n    if descending_order == False:\n        return tuple(sorted(test_tup))\n    else:\n        return tuple(sorted(test_tup, reverse=True))\n    \ndef all_sorted(test_list, descending_order = False):\n    '''\n    Write a function that checks if the given list is sorted in a descending order.\n    '''\n    return all([test_list[i] >= test_list[i + 1] for i in range(len(test_list) - 1)])\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    result = [x for x in test_tup1 if x in test_tup2]\n    return result\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    max_div = math.floor(math.sqrt(n))\n    for i in range(3, 1 + max_div, 2):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case \n    if n <= 1: \n        return True\n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n<2:\n        return True\n    elif n==2:\n        return False\n    for i in range(2,math.ceil(math.sqrt(n))+1):\n        if n%i==0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef get_largest_prime_below(n):\n    '''\n    Write a python function to return the largest prime number below the specified number.\n    '''\n    for i in range(n-1,1,-1):\n        if is_prime(i):\n            return i\ndef get_fibonacci_huge_naive(n, m):\n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n        return (b%m)\ndef get_fibonacci_huge(n, m):\n    '''\n    Write a python function to return the nth Fibonacci number modulo m.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>m:\n                break\n        c=c%m\n        return c\ndef get_fibonacci_last_digit_naive(n):\n    '''\n    Write a python function to return the last digit of nth Fibonacci number.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n        return (b%10)\ndef get_fibonacci_last_digit(n):\n    '''\n    Write a python function to return the last digit of nth Fibonacci number.\n    '''\n    if n<2:\n        return n\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>math.pow(10,9):\n                break\n        c=c%10\n        return c\ndef get_fibonacci_sum_squares_naive(n):\n    '''\n    Write a python function to return the sum of squares of the last digits of Fibonacci number.\n    '''\n    if n<2:\n        return 0\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>math.pow(10,9):\n                break\n        c=c%10\n        return (c**2)%10\ndef get_fibonacci_sum_squares(n):\n    '''\n    Write a python function to return the sum of squares of the last digits of Fibonacci number.\n    '''\n    if n<2:\n        return 0\n    else:\n        a=0\n        b=1\n        c=0\n        for i in range(n-1):\n            c=a+b\n            a=b\n            b=c\n            if c>math.pow(10,9):\n                break\n        c=c%10\n        return (c*c)%10\ndef get_fibonacci_partial_sum_naive(from_, to):\n    '''\n    Write a python function to return the sum of Fibonacci number between from and to.\n    '''\n    if to>from_:\n        if to-from_<=1:\n            if from_%2==0:\n                if to%2==0:\n                    return (get_fibonacci_sum_naive(from_,to)%10)\n                else:\n                    return (get_fibonacci_sum_naive(from_+1,to)%10)\n            else:\n                if to%2==0:\n                    return (get_fibonacci_sum_naive(from_,to+1)%10)\n                else:\n                    return (get_fibonacci_sum_naive(from_+2,to)%10)\n        else:\n            return (get_fibonacci_sum_naive(from_,from_+1)%10 + get_fibonacci_sum_naive(from_+2,to)%10)\n    else:\n        return 0\ndef get_fibonacci_partial_sum(from_, to):\n    '''\n    Write a python function to return the sum of Fibonacci number between from and to.\n    '''\n    if to>from_:\n        if to-from_<=1:\n            if from_%2==0:\n                if to%2==0:\n                    return (get_fibonacci_sum(from_,to)%10)\n                else:\n                    return (get_fibonacci_sum(from_+1,to)%10)\n            else:\n                if to%2==0:\n                    return (get_fibonacci_sum(from_,to+1)%10)\n                else:\n                    return (get_fibonacci_sum(from_+2,to)%10)\n        else:\n            return (get_fibonacci_sum(from_,from_+1)%10 + get_fibonacci_sum(from_+2,to)%10)\n    else:\n        return 0\ndef get_lucas_lehmer(n):\n    '''\n    Write a python function to return the last digit of nth Lucas Lehmer number.\n    '''\n    a=2\n    b=1\n    for i in range(n-1):\n        c=a+b\n        a=b\n        b=c\n    return (c%10)\ndef get_lucas_lehmer_partial_sum(from_, to):\n    '''\n    Write a python function to return the sum of Lucas Lehmer numbers between from and to.\n    '''\n    if to>from_:\n        if to-from_<=1:\n            if from_%2==0:\n                if to%2==0:\n                    return (get_lucas_lehmer(from_)%10)\n                else:\n                    return (get_lucas_lehmer(from_+1)%10)\n            else:\n                if to%2==0:\n                    return (get_lucas_lehmer(from_)%10)\n                else:\n                    return (get_lucas_lehmer(from_+2)%10)\n        else:\n            return (get_lucas_lehmer(from_)%10 + get_lucas_lehmer(from_+1)%10)\n    else:\n        return 0\ndef is_prime_naive(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef get_primes_naive(n):\n    '''\n    Write a python function to return the list of prime numbers up to n.\n    '''\n    return [i for i in range(n) if is_prime_naive(i)]\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n==1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef get_primes(n):\n    '''\n    Write a python function to retur"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    elif n == 2:\n        return False\n    else:\n        for i in range(2, math.ceil(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case\n    if n <= 1:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    if n == 2:\n        return False\n    if n%2 == 0:\n        return True\n    sqrt_n = int(math.sqrt(n))\n    for i in range(3, sqrt_n + 1, 2):\n        if n%i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Corner case\n    if n <= 1:\n        return True\n    # Check from 2 to n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    print(nums)\n    while n!=0:\n        largest = hq.heappop(nums)\n        n-=1\n        print(largest,end=' ')\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for x in range(n):\n        hq.heappush(heap,nums[x])\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    for i in range(n):\n        print(hq.heappop(nums), end=\" \")\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #use heapq to return largest n numbers in a list in O(nlog(n)) time.\n    return hq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for i in range(n)]\ndef max_heap(nums):\n    '''\n    Given a list, rearrange the elements so that the maximum value is at the top.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        hq.heapify(nums)\n        hq.heappop(nums)\ndef kth_largest_element(arr,k):\n    '''\n    Write a function that takes a list and returns the Kth largest element in the list.\n    '''\n    hq.heapify(arr)\n    for i in range(len(arr)-k+1):\n        hq.heappop(arr)\n    return arr[0]\ndef minimum_value_to_reach_destination(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [[float(\"inf\") for i in range(destination+1)] for i in range(l+1)]\n    for i in range(l+1):\n        dp[i][0] = 0\n    for i in range(1,l+1):\n        for j in range(destination+1):\n            if nums[i-1] <= j:\n                dp[i][j] = min(dp[i-1][j],1+dp[i][j-nums[i-1]])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[l][destination]\ndef minimum_value_to_reach_destination_optimized(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    for i in range(1,destination+1):\n        for j in range(l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n    return dp[destination]\ndef minimum_value_to_reach_destination_top_down(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [[float(\"inf\") for i in range(destination+1)] for i in range(l+1)]\n    for i in range(l+1):\n        dp[i][0] = 0\n    for i in range(1,l+1):\n        for j in range(destination+1):\n            if nums[i-1] <= j:\n                dp[i][j] = min(dp[i-1][j],1+dp[i][j-nums[i-1]])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[l][destination]\ndef minimum_value_to_reach_destination_bottom_up(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [[float(\"inf\") for i in range(destination+1)] for i in range(l+1)]\n    for i in range(l+1):\n        dp[i][0] = 0\n    for i in range(1,l+1):\n        for j in range(destination+1):\n            if nums[i-1] <= j:\n                dp[i][j] = min(dp[i][j],1+dp[i-1][j-nums[i-1]])\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[l][destination]\ndef minimum_value_to_reach_destination_top_down_optimized(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    for i in range(1,destination+1):\n        for j in range(l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    for i in range(1,destination+1):\n        for j in range(l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized_2(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    last_index = 0\n    for i in range(1,destination+1):\n        last_index = last_index\n        for j in range(last_index,l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n            else:\n                last_index = j\n                break\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized_3(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n    last_index = 0\n    for i in range(1,destination+1):\n        last_index = last_index\n        for j in range(last_index,l):\n            if nums[j] <= i:\n                dp[i] = min(dp[i],1+dp[i-nums[j]])\n            else:\n                last_index = j\n                break\n    return dp[destination]\ndef minimum_value_to_reach_destination_bottom_up_optimized_4(nums,destination):\n    '''\n    Given a list of non-negative integers, and a target positive integer,\n    find the minimum number of positive integers to add, so that the sum of the list is equal to the given target.\n    '''\n    l = len(nums)\n    dp = [float(\"inf\") for i in range(destination+1)]\n    dp[0] = 0\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    def heap_sort(nums,n):\n        hq.heapify(nums)\n        return [hq.heappop(nums) for i in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    h = []\n    heapq.heapify(h)\n    for i in range(n):\n        hq.heappush(h,-nums[i])\n    for i in range(n,len(nums)):\n        if -h[0] > nums[i]:\n            hq.heapreplace(h,nums[i])\n    return sorted([-i for i in h],reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #using heapq to find the largest n elements of the list\n    #heapq is a min-heap\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(n)]\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    nums=sorted(nums)\n    hq.heapify(nums)\n    nums=nums[::-1]\n    return nums[:n]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x=bin(x)\n    if(x[0]=='0'):\n        x=x[2:]\n    i=len(x)-1\n    while(i>=0):\n        if(x[i]=='1'):\n            return False\n        else:\n            i-=1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2**0: \n        return True \n    elif x == 0: \n        return False\n    elif x > 2**0: \n        return is_Power_Of_Two(x // 2) \n  \ndef reverse_bits(x): \n    '''\n    Write a Python function to convert an unsigned integer to a binary string. \n    '''\n    if x == 0: \n        return x \n    else: \n        return (reverse_bits(x // 2) * 10) + (x % 2) \n  \ndef set_bit(value, bit): \n    '''\n    Write a Python function to set a bit in an integer. \n    '''\n    return value | (1<<bit) \n  \ndef clear_bit(value, bit): \n    '''\n    Write a Python function to clear a bit in an integer. \n    '''\n    return value & ~(1<<bit) \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Converting the number to binary\n    bin_str_x = bin(x)[2:]\n    # Checking whether the two numbers differ at one bit position only or not\n    if len(bin_str_x) >= 2:\n        # Checking whether the two numbers differ at one bit position only or not\n        if bin_str_x[0]!= bin_str_x[1]:\n            return False\n        else:\n            return True\n    else:\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x == 1):\n        return True\n    if((x & (x - 1)) == 0):\n        return True\n    else:\n        return False\nx = int(input(\"enter the number\"))\nprint(is_Power_Of_Two(x))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1: \n        while x > 1: \n            if x % 2!= 0: \n                return False\n            x = x // 2\n        return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the number x to binary\n    binary_representation = bin(x)[2:]\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0: \n        return True\n    elif x == 1: \n        return False\n    else: \n        while (x % 2) == 0: \n            x = x / 2\n        if x == 1: \n            return False\n        else: \n            return True\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # Test if bit is set or not \n    if (x & (x - 1) == 0): \n        return 1\n    else: \n        return 0\n  "
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x > 1:\n        if x % 2!= 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x - 1)) == 0: \n        return True\n    return False"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #r\"\\b[a-zA-Z]{4}\\b\"\n    pattern = re.compile(r'\\b[a-zA-Z]{4}\\b')\n    words_list = pattern.findall(text)\n    return words_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = str(text)\n    output_list = []\n    for i in text:\n        if len(i) >= 4:\n            output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    \n    text = text.split()\n    \n    char_long = []\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=r'\\b\\w{4,}\\b'\n    # pattern=r'[a-zA-Z]+'\n    # pattern=r'[\\w]+'\n    # pattern=r'\\w+\\d+'\n    # pattern=r'\\b\\w{4,}\\b'\n    # pattern=r'^[A-Z][A-Za-z]+\\s[A-Z][A-Za-z]+$'\n    # pattern=r'\\b\\w{4,}\\b'\n    # pattern=r'[\\w]+[\\d]+'\n    # pattern=r'\\b[A-Z][A-Za-z]+\\s[A-Z][A-Za-z]+[\\w]+[\\d]+\\b'\n    # pattern=r'\\b[A-Za-z0-9]+[\\d]+[A-Za-z0-9]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Za-z]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Za-z]+\\b'\n    # pattern=r'\\b\\w+[\\d]+\\b'\n    # pattern=r'\\b\\w+[\\d]+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b[A-Z]+[a-z]+\\b'\n    # pattern=r'[A-Z]+[a-z]+\\b'\n    # pattern=r'^[A-Z]+[a-z]+$'\n    # pattern=r'^[A-Z]+[a-z]+\\s[A-Z]+[a-z]+$'\n    # pattern=r'\\b\\w+[\\d]+\\b'\n    # pattern=r'\\b\\w+\\b'\n    # pattern=r'\\b\\w+\\b'\n    # pattern=r'\\b\\w+\\b'\n    # pattern=r'\\b[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Za-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-z]+\\b'\n    # pattern=r'\\b\\w+[A-Z]+[a-"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Find all words of length at least 4 characters in a string\n    regEx = re.compile(r'\\S{4,}') # use non-whitespace character to avoid splitting in between words\n    matches = regEx.findall(text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Return all words that are at least 4 characters long\n    return re.findall('\\S{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern=r'\\b[a-zA-Z]+\\S*[a-zA-Z]{3}\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    match_list = []\n    for word in text.split():\n        if len(word) >= 4:\n            match_list.append(word)\n    return match_list\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long = re.findall(r\"\\b[a-zA-Z]{4,}\\b\", text)\n    return long\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    x = re.findall(\"[a-zA-Z]+[a-zA-Z0-9]+\\s[a-zA-Z]+[a-zA-Z0-9]+\\s[a-zA-Z]+[a-zA-Z0-9]+\",text)\n    for i in x:\n        if len(i) >= 4:\n            print(i)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**2)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str1 = str\n    str2 = str\n    n = len(str1)\n    # check if str is a substring of any rotation of given str \n    for i in range(1, n + 1):\n        if (checkIfSubString(str1, str2)):\n            return i\n            break\n        else:\n            str2 = str2[1:] + str2[0] \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1: \n        return 0\n    str_array = [str[x:x+len(str)] for x in range(0, len(str))] \n    str_array = list(dict.fromkeys(str_array)) \n    print(str_array)\n    for i in range(len(str)): \n        if str_array[0] == str[i:]: \n            return i \n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    str1 = str * 2\n    rotations = 0\n    for i in range(str_len):\n        if str1[i]!= str1[i+str_len]:\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str1 = str + str\n    for i in range(n):\n        if str1[i:i+n] == str:\n            return n-i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_rotation = {str[i:] + str[0:i] for i in range(len(str))}\n    list_rotations = list(str_rotation)\n    return list_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    for _ in range(0, len(str)):\n        if str[_] == str[0]:\n            return _\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = len(str)\n    count = 0\n    for i in range(l):\n        if str[i:] + str[0:i] == str:\n            count += 1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print(str[::-1])\n    if str == str[::-1]:\n        return 0\n    for i in range(len(str)):\n        if str[i:] + str[:i] == str[::-1]:\n            return i\n    return -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    return min(str.count('x'), str.count('z'), str.count('y')) \n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def check_rotations(s,n):\n        for i in range(n):\n            if s==s[n-i:]+s[:n-i]:\n                return i\n        return -1\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s.split(ch)\n    s = s.replace(ch, \"\")\n    s = s[::-1].replace(ch, \"\", 1)\n    return s[::-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=list(s)\n    s.remove(ch)\n    s.remove(ch)\n    return(''.join(s))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '')[:-1]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = str(s)\n    s = s.replace(ch,\"\")\n    s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s[:s.find(ch)] + s[s.find(ch)+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\nprint(remove_Occ(\"hello world\", \"o\"))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l = len(s)\n    if l == 0:\n        return \"\"\n    if ch not in s:\n        return s\n    i = 0\n    while s[i]!= ch:\n        i += 1\n        if i == l:\n            return s\n    j = l\n    while s[j-1]!= ch:\n        j -= 1\n        if j <= 0:\n            return s\n    s = s[:i] + s[j:]\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        while s.find(ch)!= -1:\n            s = s.replace(ch,\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, \"\", 1).replace(ch, \"\", -1)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # check that M is 2 dimensional\n    if (M.ndim!= 2):\n        return None\n    \n    # initialize result matrix\n    M_res = np.zeros(M.shape)\n    \n    # iterate through rows\n    for i in range(M.shape[0]):\n        # initialize running sum\n        sum = 0\n        # iterate through columns\n        for j in range(M.shape[1]):\n            # increment sum and add to it\n            sum += M[i,j]\n        # add row to result matrix\n        M_res[i] = sum\n    # sort result matrix\n    sorted_M = np.sort(M_res, kind='mergesort')\n    \n    # return sorted matrix\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    if m == 0 or n == 0:\n        return []\n    M = [[1,2,3],\n          [4,5,6],\n          [7,8,9]]\n    for i in range(1,m):\n        for j in range(0,n):\n            M[i][j] += M[i-1][j]\n    # print(M)\n    for i in range(m-1):\n        min_idx = i\n        for j in range(i+1,m):\n            if M[min_idx][j] < M[min_idx][i]:\n                min_idx = j\n        M[i], M[min_idx] = M[min_idx], M[i]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = [[0,0,0],[0,0,0],[0,0,0]]\n    for i in range(len(M)):\n        sum = 0\n        for j in range(len(M)):\n            sum = sum + M[i][j]\n            M[i][j] = sum\n    M.sort(key=lambda x: x[2])\n    return M\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # sum = [sum(row) for row in M]\n    # sum = np.array(sum)\n    # print(sum)\n    # print(sum[0])\n    # print(sum[1])\n    # print(sum[2])\n    # print(sum[3])\n    # print(sum[4])\n    # print(sum[5])\n    # print(sum[6])\n    # print(sum[7])\n    # print(sum[8])\n    # print(sum[9])\n    # print(sum[10])\n    # print(sum[11])\n    # print(sum[12])\n    # print(sum[13])\n    # print(sum[14])\n    # print(sum[15])\n    # print(sum[16])\n    # print(sum[17])\n    # print(sum[18])\n    # print(sum[19])\n    # print(sum[20])\n    # print(sum[21])\n    # print(sum[22])\n    # print(sum[23])\n    # print(sum[24])\n    # print(sum[25])\n    # print(sum[26])\n    # print(sum[27])\n    # print(sum[28])\n    # print(sum[29])\n    # print(sum[30])\n    # print(sum[31])\n    # print(sum[32])\n    # print(sum[33])\n    # print(sum[34])\n    # print(sum[35])\n    # print(sum[36])\n    # print(sum[37])\n    # print(sum[38])\n    # print(sum[39])\n    # print(sum[40])\n    # print(sum[41])\n    # print(sum[42])\n    # print(sum[43])\n    # print(sum[44])\n    # print(sum[45])\n    # print(sum[46])\n    # print(sum[47])\n    # print(sum[48])\n    # print(sum[49])\n    # print(sum[50])\n    # print(sum[51])\n    # print(sum[52])\n    # print(sum[53])\n    # print(sum[54])\n    # print(sum[55])\n    # print(sum[56])\n    # print(sum[57])\n    # print(sum[58])\n    # print(sum[59])\n    # print(sum[60])\n    # print(sum[61])\n    # print(sum[62])\n    # print(sum[63])\n    # print(sum[64])\n    # print(sum[65])\n    # print(sum[66])\n    # print(sum[67])\n    # print(sum[68])\n    # print(sum[69])\n    # print(sum[70])\n    # print(sum[71])\n    # print(sum[72])\n    # print(sum[73])\n    # print(sum[74])\n    # print(sum[75])\n    # print(sum[76])\n    # print(sum[77])\n    # print(sum[78])\n    # print(sum[79])\n    # print(sum[80])\n    # print(sum[81])\n    # print(sum[82])\n    # print(sum[83])\n    # print(sum[84])\n    # print(sum[85])\n    # print(sum[86])\n    # print(sum[87])\n    # print(sum[88])\n    # print(sum[89])\n    # print(sum[90])\n    # print(sum[91])\n    # print(sum[92])\n    # print(sum[93])\n    # print(sum[94])\n    # print(sum[95])\n    # print(sum[96])\n    # print(sum[97])\n    # print(sum[98])\n    # print(sum[99])\n    # print(sum[100])\n    # print(sum[101])\n    # print(sum[102])\n    # print(sum[103])\n    # print(sum[104])\n    # print(sum[105])\n    # print(sum[106])\n    # print(sum[107])\n    # print(sum[108])\n    # print(sum[109])\n    # print(sum[110])\n    # print(sum[111])\n    # print(sum[112])\n    # print(sum[113])\n    # print(sum[114])\n    # print(sum[115])\n    # print(sum[116])\n    # print(sum[117])\n    # print(sum[118])\n    # print(sum[119])\n    # print(sum[120])\n    # print(sum[121])\n    # print(sum[122])\n    # print(sum[123])\n    # print(sum[124])\n    # print(sum[125])\n    # print(sum[126])\n    # print(sum[127])\n    # print(sum[128])\n    # print(sum[129])\n    # print(sum[130])\n    # print(sum[131])\n    # print(sum[132])\n    # print(sum[133])\n    # print(sum[134])\n    # print(sum[135])\n    # print(sum[136])\n    # print(sum[137])\n    # print(sum[138])\n    # print(sum[139])\n    # print(sum[140])\n    # print(sum[141])\n    # print(sum[142])\n    # print(sum[143])\n    # print(sum[144])\n    # print(sum[145])\n    # print(sum[146])\n    # print(sum[147])\n    # print(sum[148])\n    # print(sum[149])\n    # print(sum[150])\n    # print(sum[151])\n    # print(sum[152])\n    # print(sum[153])\n    # print(sum[154])\n    # print(sum[155])\n    # print(sum[156])\n    # print(sum[157])\n    # print(sum[158])\n    # print(sum[159])\n    # print(sum[160])\n    # print(sum[161])\n    # print(sum[162])\n    # print(sum[163])\n    # print(sum[164])\n    # print(sum[165])\n    # print(sum[166])\n    # print(sum[167])\n    # print(sum[168])\n    # print(sum[169])\n    # print(sum[170])\n    # print(sum[171])\n    # print(sum[172])\n    # print(sum[173])\n    # print(sum[174])\n    # print(sum[175])\n    # print(sum[176])\n    # print(sum[177])\n    # print(sum[178])\n    # print(sum[179])\n    # print(sum[180])\n    # print(sum[181])\n    # print(sum[182])\n    # print(sum[183])\n    # print(sum[184])\n    # print(sum[185])\n    # print(sum[186])\n    # print(sum[187])\n    # print(sum[188])\n    # print(sum[189])\n    # print(sum[190])\n    # print(sum[191])\n    # print(sum[192])\n    # print(sum[193])\n    # print(sum[194])\n    # print(sum[195])\n    # print(sum[196])\n    # print(sum[197])\n    # print(sum[198])\n    # print(sum[199])\n    # print(sum[200])\n    # print(sum[201])\n    # print(sum[202])\n    # print(sum[203])\n    # print(sum[204])\n    # print(sum[205])\n    # print(sum[206])\n    # print(sum[207])\n    # print(sum[208])\n    # print(sum[209])\n    # print(sum[210])\n    # print(sum[211])\n    # print(sum[212])\n    # print(sum[213])\n    # print(sum[214])\n    # print(sum[215])\n    # print(sum[216])\n    # print(sum[217])\n    # print(sum[218])\n    # print(sum"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    M = sorted(M, key = sum, reverse = True)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    import numpy as np\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    '''\n    It can be done with quick sort\n    '''\n    def sum_row(M, n):\n        res = 0\n        for i in range(n):\n            res += M[i][0]\n        return res\n    def quick_sort(M, low, high):\n        if low < high:\n            pivot = partition(M, low, high)\n            quick_sort(M, low, pivot-1)\n            quick_sort(M, pivot+1, high)\n    def partition(M, low, high):\n        i = low - 1\n        pivot = sum_row(M, high)\n        for j in range(low, high):\n            if sum_row(M, j) < pivot:\n                i += 1\n                M[i], M[j] = M[j], M[i]\n        M[i+1], M[high] = M[high], M[i+1]\n        return i + 1\n    quick_sort(M, 0, len(M)-1)\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    i = 0\n    while i < len(M):\n        j = 0\n        while j < len(M[0]):\n            if j == 0 or M[i][j] < M[i][j-1]:\n                M[i],M[i][j] = M[i][j],M[i][j-1]\n            j+=1\n        i+=1\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(i + 1, len(M)):\n            if sum(M[i]) < sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    import math \n    volume = (1/3)*(l*b*h) \n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l = int(input(\"Enter length of the prism : \"))\n    #b = int(input(\"Enter breadth of the prism : \"))\n    #h = int(input(\"Enter height of the prism : \"))\n    v = l*b*h\n    print(\"The volume of the prism is : \",v)\nfind_Volume(3,4,5)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return(0.5*(l*b*h))\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    vol = (1/3)*(l*b*h)\n    return(vol)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    volume = (l*b*h)/3\n    \n    return volume\n    \ndef find_Trig_Sqr(a,b) : \n    '''\n    Write a python function to find the square of the side of a triangle.\n    '''\n    \n    return (a*a) + (b*b)\n    \ndef find_Trig_Sqr_Sum(a,b,c) : \n    '''\n    Write a python function to find the sum of the squares of the sides of a triangle.\n    '''\n    \n    return find_Trig_Sqr(a,b) + find_Trig_Sqr(a,c) + find_Trig_Sqr(b,c)\n    \ndef find_Circumference(r) : \n    '''\n    Write a python function to find the circumference of a circle.\n    '''\n    \n    return 2*3.14*r\n    \ndef find_Circumference_Sum(r1,r2,r3) : \n    '''\n    Write a python function to find the sum of the circumference of a circle.\n    '''\n    \n    return find_Circumference(r1) + find_Circumference(r2) + find_Circumference(r3)\n    \ndef is_Vowel(char) : \n    '''\n    Write a python function to determine if a character is a vowel or a consonant.\n    '''\n    \n    if char.lower() in \"aeiou\" : \n        return True\n    return False\n    \ndef find_N_Vowels(string,n) : \n    '''\n    Write a python function to find the nth vowel in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) : \n            vowels += 1\n        if vowels == n : \n            return char\n            \ndef find_N_Consonants(string,n) : \n    '''\n    Write a python function to find the nth consonant in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if not is_Vowel(char) : \n            vowels += 1\n        if vowels == n : \n            return char\n            \ndef remove_vowels(string) : \n    '''\n    Write a python function to remove all vowels from a string.\n    '''\n    \n    no_vowels = ''\n    for char in string : \n        if not is_Vowel(char) : \n            no_vowels += char\n    \n    return no_vowels\n    \ndef remove_consonants(string) : \n    '''\n    Write a python function to remove all consonants from a string.\n    '''\n    \n    no_consonants = ''\n    for char in string : \n        if is_Vowel(char) : \n            no_consonants += char\n    \n    return no_consonants\n    \ndef count_vowels(string) : \n    '''\n    Write a python function to count the number of vowels in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) : \n            vowels += 1\n    \n    return vowels\n    \ndef count_consonants(string) : \n    '''\n    Write a python function to count the number of consonants in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) == False : \n            vowels += 1\n    \n    return vowels\n    \ndef remove_string(string,string_to_remove) : \n    '''\n    Write a python function to remove a substring from a string.\n    '''\n    \n    return string.replace(string_to_remove,'')\n    \ndef find_N_Consonants_Sum(string,n) : \n    '''\n    Write a python function to find the sum of the consonants in a string.\n    '''\n    \n    consonants = 0\n    for char in string : \n        if is_Vowel(char) == False : \n            consonants += 1\n    \n    return consonants\n    \ndef find_N_Vowels_Sum(string,n) : \n    '''\n    Write a python function to find the sum of the vowels in a string.\n    '''\n    \n    vowels = 0\n    for char in string : \n        if is_Vowel(char) : \n            vowels += 1\n    \n    return vowels\n    \ndef find_Longest_Word(string) : \n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    \n    return max(string.split(), key = len)\n    \ndef find_Longest_Word_Len(string) : \n    '''\n    Write a python function to find the length of the longest word in a string.\n    '''\n    \n    return len(find_Longest_Word(string))\n    \ndef find_Longest_Word_Len_Starts_With(string,letter) : \n    '''\n    Write a python function to find the length of the longest word in a string starting with a certain letter.\n    '''\n    \n    return len(find_Longest_Word(string).strip(letter))\n    \ndef find_2nd_Longest_Word(string) : \n    '''\n    Write a python function to find the 2nd longest word in a string.\n    '''\n    \n    return sorted(string.split(), key = len)[-2]\n    \ndef find_2nd_Longest_Word_Len(string) : \n    '''\n    Write a python function to find the length of the 2nd longest word in a string.\n    '''\n    \n    return len(find_2nd_Longest_Word(string))\n    \ndef find_2nd_Longest_Word_Len_Starts_With(string,letter) : \n    '''\n    Write a python function to find the length of the 2nd longest word in a string starting with a certain letter.\n    '''\n    \n    return len(find_2nd_Longest_Word(string).strip(letter))\n    \ndef find_Most_Used_Letter(string) : \n    '''\n    Write a python function to find the most used letter in a string.\n    '''\n    \n    return max(string, key = string.count)\n    \ndef find_Most_Used_Letter_Count(string) : \n    '''\n    Write a python function to find the number of times a letter occurs in a string.\n    '''\n    \n    return string.count(find_Most_Used_Letter(string))\n    \ndef remove_2nd_Most_Used_Letter(string) : \n    '''\n    Write a python function to remove the 2nd most used letter in a string.\n    '''\n    \n    return remove_2nd_Most_Used_Letter(string.replace(find_Most_Used_Letter(string),''))\n    \ndef remove_2nd_Most_Used_Letter_Count(string) : \n    '''\n    Write a python function to remove the 2nd most used letter in a string and the number of times it occurs.\n    '''\n    \n    return string.count(find_Most_Used_Letter(string))\n    \ndef find_Middle_Letter(string) : \n    '''\n    Write a python function to find the middle letter of a string.\n    '''\n    \n    middle = len(string) // 2\n    return string[middle]\n    \ndef find_Middle_Letter_Count(string) : \n    '''\n    Write a python function to find the number of times a middle letter occurs in a string.\n    '''\n    \n    return string.count(find_Middle_Letter(string))\n    \ndef remove_Middle_Letter(string) : \n    '''\n    Write a python function to remove the middle letter of a string.\n    '''\n    \n    return string.replace(find_Middle_Letter(string),'')\n    \ndef remove_Middle_Letter_Count(string) : \n    '''\n    Write a python function to remove th"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h\n    \ndef find_pi(radius) : \n    '''\n    Write a python function to find the area of a circle.\n    '''\n    pi = 3.14\n    return pi * radius * radius\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return round(l * b * h, 1)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h\n    return volume \n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*(l*b*h)\n    return volume\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #pattern = re.compile(r'([a-zA-Z]+_[a-zA-Z]+)')\n    #if pattern.search(text):\n    #    return True\n    #else:\n    #    return False\n    pattern = re.compile(r'((?<=[a-zA-Z])[a-zA-Z]+(?=_))')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'_+[a-z]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    def is_lower_underscore(text):\n        if re.search(r'[a-z]+_[a-z]+', text):\n            return True\n        else:\n            return False\n    return is_lower_underscore\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return bool(re.search(r'_\\w+_', text))\n    return bool(re.search(r'_+[a-z]\\w*_+', text))\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return True if re.findall(r\"\\w+_\\w+\", text) else False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'^\\w+_\\w+$', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r\"_[a-z]{2,}_\",text)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(\"_+[a-z]\", text):\n        return True\n    return False\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if type(a)!= int and type(a)!= float:\n        raise TypeError('Please enter a positive number.')\n    elif a < 0:\n        raise ValueError('Please enter a positive number.')\n    elif a == 0:\n        return 0\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    p = a*4\n    return p\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # this is a function that will take a side length and return the perimeter of a square\n    perimeter = a * 4\n    print(perimeter)\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    pass # remove this line\n    return 4 * a\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [x for x in string if x not in string_2]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [ch for ch in string if ch not in string[1:]]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    result = [] \n    for ch in string: \n        if ch not in result: \n            result.append(ch)\n    return ''.join(result) \n    \ndef sub_str(string,substring):\n    '''\n    Write a function to find if the second string is a substring of the first.\n    '''\n    if substring in string:\n        return True\n    else:\n        return False\n        \ndef sub_str_count(string,substring):\n    '''\n    Write a function to count the number of times that the second string is a substring of the first.\n    '''\n    if sub_str(string,substring):\n        return string.count(substring)\n    else:\n        return 0\n        \ndef find_str(string,substring):\n    '''\n    Write a function to find the index of the first occurrence of the second string in the first.\n    '''\n    if sub_str(string,substring):\n        return string.find(substring)\n    else:\n        return -1\n        \ndef compress_str(string):\n    '''\n    Write a function to compress a string.\n    '''\n    str_list = list(string)\n    final_str = ''\n    count = 1\n    for i in range(len(str_list)):\n        if i<(len(str_list)-1) and str_list[i] == str_list[i+1]:\n            count += 1\n        else:\n            final_str += str_list[i]\n            if count > 1:\n                final_str += str(count)\n            count = 1\n    return final_str\n    \ndef count_str(string,substring):\n    '''\n    Write a function to count the number of times that a substring appears in the given string.\n    '''\n    if sub_str(string,substring):\n        return string.count(substring)\n    else:\n        return 0\n        \ndef string_to_list(string):\n    '''\n    Write a function to convert a string to a list of letters.\n    '''\n    return [char for char in string]\n        \ndef list_to_string(list_of_chars):\n    '''\n    Write a function to convert a list of letters to a string.\n    '''\n    return ''.join(list_of_chars)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in range(len(string)):\n        list_string.append(ord(string[i]))\n    return list_string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    li = list(string) \n    temp = []\n    for i in range(len(li)): \n        if li[i] not in temp: \n            temp.append(li[i]) \n    return temp\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_strings = []\n    for char in string:\n        list_strings.append(char)\n    return list_strings\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_str = [] \n    for char in string: \n        if char not in new_str: \n            new_str.append(char) \n    return new_str \n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # String length\n    length = len(string)\n    i=0\n    j=0\n    str = []\n    no=0\n    # Iterate all characters\n    # of second string\n    while j < length: \n        # Iterate all characters of first\n        # string\n        for i in range(length): \n            # Compare current character\n            # of first string with \n            # first string\n            if string[i] == string[j]: \n                no=1\n                break\n        if no==1:\n            j+=1\n            continue\n        str.append(string[j])\n        j+=1\n    # The final string list \n    string = str\n    return string \ndef sub(string, sub_string): \n    length = len(string) \n    if len(sub_string) > length:\n        return \"\"\n    # If a sub-string is \n    # empty then simply return \n    # the remaining string \n    if len(sub_string) == 0: \n        return string \n    # This will store the starting \n    # and ending index of the \n    # substring \n    starting, ending = 0, 0\n    # This stores the length of the \n    # longest prefix which is also \n    # suffix in the current window \n    max_length = 0\n    # This variable will store the \n    # longest prefix which is also \n    # suffix in the current window \n    max_prefix_suffix = \"\"\n    # Variable to store the starting \n    # index of the longest prefix \n    # which is also suffix in the \n    # current window \n    i = 0\n    # Iterate all characters of \n    # the input sub-string \n    for i in range(len(sub_string)): \n        # Find the index of the \n        # starting of the substring \n        # in the input string \n        starting = string.index(sub_string[i]) \n        # Find the index of the \n        # ending of the substring \n        # in the input string \n        ending = starting + len(sub_string) - 1\n        # Calculate the length \n        # of the current window \n        length = ending - starting + 1\n        # Check if the current window \n        # has maximum length \n        if length > max_length: \n            # If yes, then update \n            # max_length and max_prefix_suffix \n            max_length = length \n            max_prefix_suffix = string[starting: ending + 1] \n        # Remove the leading character \n        # of the input string \n        string = string[1:] \n    # Return the longest prefix \n    # which is also suffix \n    return max_prefix_suffix \ndef longestCommonPrefix(str, n):\n    '''\n    Write a function to return the longest common prefix string amongst an array of strings.\n    '''\n    result = sub(str[0], str[1])\n    for i in range(2, n):\n        result = sub(result, str[i])\n    return result\ndef isMatch(string1, string2):\n    '''\n    Write a function to check if two strings are close.\n    '''\n    # Create two strings which contains \n    # all the characters in the first \n    # and second strings respectively \n    string1 = str_to_list(string1) \n    string2 = str_to_list(string2) \n    # Check if both the strings are of same \n    # length then only compare them \n    if len(string1) == len(string2): \n        for i in range(len(string1)): \n            if string1[i]!= string2[i]: \n                return False\n        return True\n    # If the strings are not of same length \n    # then return false \n    return False\ndef longestCommonPrefix2(strs):\n    '''\n    Write a function to return the longest common prefix string amongst an array of strings.\n    '''\n    # If there is no strings then \n    # return empty string \n    if len(strs) == 0: \n        return \"\"\n    # If there is only one strings \n    # then return it \n    if len(strs) == 1: \n        return strs[0]\n    # Sort the strings according to \n    # their length \n    strs = sorted(strs, key=len) \n    # Get the shortest string \n    shortest = strs[0] \n    # Get the longest string \n    longest = strs[len(strs) - 1] \n    # Initialize the common prefix \n    # string with the first character \n    # of the shortest string \n    commonPrefix = shortest[0] \n    i = 0\n    # Iterate all characters of \n    # shortest and longest strings \n    # and compare them \n    for i in range(len(shortest)): \n        if commonPrefix == longest[i]: \n            continue\n        else: \n            return commonPrefix\n        # If the characters of the two strings \n        # at index i is not equal then \n        # return the common prefix \n        commonPrefix = shortest[0: i] \n        return commonPrefix\ndef longestCommonPrefix3(strs):\n    '''\n    Write a function to return the longest common prefix string amongst an array of strings.\n    '''\n    # If there is no strings then \n    # return empty string \n    if len(strs) == 0: \n        return \"\"\n    # If there is only one strings \n    # then return it \n    if len(strs) == 1: \n        return strs[0]\n    # Sort the strings according to \n    # their length \n    strs = sorted(strs, key=len) \n    # Get the shortest string \n    shortest = strs[0] \n    # Get the longest string \n    longest = strs[len(strs) - 1] \n    # Initialize the common prefix \n    # string with the first character \n    # of the shortest string \n    commonPrefix = shortest[0] \n    # Iterate through the characters \n    # of the shortest string and \n    # compare them with the corresponding \n    # characters of the longest string \n    for i in range(len(shortest)): \n        if commonPrefix == longest[i]: \n            continue\n        else: \n            return commonPrefix\n        # If the characters of the two strings \n        # at index i is not equal then \n        # return the common prefix \n        commonPrefix = shortest[0: i] \n        return commonPrefix\nif __name__ == \"__main__\":\n    '''\n    Given a string S, find the longest prefix which is also suffix in the string.\n    '''\n    # Test Case 1\n    str = \"abcdxyz123\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 2\n    str = \"abababa\"\n    sub_str = \"aba\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 3\n    str = \"abcabcabc\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 4\n    str = \"abcabcab\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 5\n    str = \"xyzabcabcd\"\n    sub_str = \"abc\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 6\n    str = \"abcdxyz123\"\n    sub_str = \"123\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(str, sub_str))\n    # Test Case 7\n    str = \"xyzabcabcd\"\n    sub_str = \"abcd\"\n    print(longestCommonPrefix(str, len(str)))\n    print(sub(st"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    i = 0\n    while i < len(string):\n        if string[i] in string[:i]:\n            string = string[:i] + string[i+1:]\n            i = 0\n        else:\n            i += 1\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    count = [0] * no_of_chars \n    for i in range(len(string)): \n        count[ord(string[i])] += 1\n    result_str = [''] * (len(string)) \n    for i in range(len(string)): \n        result_str[i] = string[i] \n        count[ord(string[i])] -= 1\n        if count[ord(string[i])] == 0: \n            count[ord(string[i])] = -1\n    return (\"\".join(result_str)) \n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0, len(arraynums)):\n        for j in range(0, len(arraynums)):\n            if (i!= j):\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    array_size = len(arraynums)\n    hash_map = {}\n    for num in arraynums:\n        if num in hash_map:\n            return True\n        else:\n            hash_map[num] = 1\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return True if len(set(arraynums))!= len(arraynums) else False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    return len(set(arraynums))!= len(arraynums)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums) - 1):\n        if arraynums[i] == arraynums[i + 1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    result = contains_duplicate(arraynums)\n    assert result == True, 'Error'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        return False\n    return True\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    import array\n    arr = arraynums\n    l = len(arr)\n    a = []\n    for i in arr:\n        if i in a:\n            return True\n        else:\n            a.append(i)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arr = arraynums\n    result = {}\n    for i in arr:\n        if i not in result:\n            result[i] = True\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        print(\"Woodball\")\n    else:\n        print(\"Not a woodball\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 3 == 0 and x % 5 == 0: \n        print(\"You win!\")\n    elif x % 3 == 0 and x % 5!= 0: \n        print(\"Woodball\")\n    elif x % 3!= 0 and x % 5 == 0: \n        print(\"Woodall\")\n    else: \n        print(\"Lose\")\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 545 or x == 546 or x == 547:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x % 5 == 0 and (x % 3 == 0 or x % 7 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 5 == 0 or x % 3 == 0:\n        return True\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    lst = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36] \n    return (x in lst)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x%7==0 or x%7==1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 0 and x%10==5:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if isinstance(x, str): \n        return False\n    if x<=0: \n        return False\n    if x%3==0 and x%5==0: \n        return True\n    elif x%3==0: \n        return True\n    elif x%5==0: \n        return True\n    else: \n        return False\ndef sum_all(x): \n    '''\n    Write a function to return the sum of all the digits of the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    return x%10+sum_all(x//10)\ndef sum_digits(x): \n    '''\n    Write a function to return the sum of all the digits of the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    return x%10+sum_digits(x//10)\ndef list_of_digits(x): \n    '''\n    Write a function to return list of digits in descending order in the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return [x]\n    return list_of_digits(x//10)+[x%10]\ndef list_of_digits_in_descending_order(x): \n    '''\n    Write a function to return list of digits in descending order in the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return [x]\n    return list_of_digits_in_descending_order(x//10)+[x%10]\ndef sum_all_odd_numbers(x): \n    '''\n    Write a function to return the sum of all the odd numbers in the given number x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    if x%2==0: \n        return sum_all_odd_numbers(x//10)\n    else: \n        return sum_all_odd_numbers(x//10)+x%10\ndef sum_odd_numbers_in_descending_order(x): \n    '''\n    Write a function to return the sum of all the odd numbers in the given number x in descending order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x<10: \n        return x\n    if x%2==0: \n        return sum_odd_numbers_in_descending_order(x//10)\n    else: \n        return sum_odd_numbers_in_descending_order(x//10)+x%10\ndef reverse_of_list(x): \n    '''\n    Write a function to return the reverse of the given list.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    return reverse_of_list(x[1:])+[x[0]]\ndef is_anagram(x, y): \n    '''\n    Write a function to check if the given two strings are anagrams or not.\n    '''\n    if isinstance(x, str): \n        return False\n    if isinstance(y, str): \n        return False\n    return sorted(x)==sorted(y)\ndef sum_digits_of_all_strings(x): \n    '''\n    Write a function to return sum of all the digits of all the strings in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    return sum_digits_of_all_strings(x[1:])+sum_digits(x[0])\ndef sort_list_of_integers(x): \n    '''\n    Write a function to sort the given list x of integers in ascending order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    if len(x)==1: \n        return x\n    return [x[0]]+sort_list_of_integers(x[1:]) if x[0]<=x[1] else [x[1]]+sort_list_of_integers(x[2:])\ndef sum_all_integers_in_list(x): \n    '''\n    Write a function to return the sum of all the integers in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if isinstance(x[0], int): \n        return x[0]+sum_all_integers_in_list(x[1:])\n    return sum_all_integers_in_list(x[1:])\ndef sort_list_of_strings(x): \n    '''\n    Write a function to sort the given list x of strings in alphabetical order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    if len(x)==1: \n        return x\n    return [x[0]]+sort_list_of_strings(x[1:]) if x[0]<=x[1] else [x[1]]+sort_list_of_strings(x[2:])\ndef sum_of_all_strings(x): \n    '''\n    Write a function to return the sum of all the strings in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if isinstance(x[0], str): \n        return x[0]+sum_of_all_strings(x[1:])\n    return sum_of_all_strings(x[1:])\ndef count_words_with_first_letter_capitalized(x): \n    '''\n    Write a function to return the count of words in the given list x with the first letter capitalized.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if x[0][0].isupper(): \n        return count_words_with_first_letter_capitalized(x[1:])\n    return count_words_with_first_letter_capitalized(x[1:])+1\ndef sum_of_all_strings_capitalized(x): \n    '''\n    Write a function to return the sum of all the strings in the given list x with the first letter capitalized.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if isinstance(x[0], str): \n        return x[0]+sum_of_all_strings_capitalized(x[1:])\n    return sum_of_all_strings_capitalized(x[1:])\ndef sum_of_all_strings_in_alphabetical_order(x): \n    '''\n    Write a function to return the sum of all the strings in the given list x in alphabetical order.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return 0\n    if x[0].isalpha(): \n        return x[0]+sum_of_all_strings_in_alphabetical_order(x[1:])\n    return sum_of_all_strings_in_alphabetical_order(x[1:])\ndef remove_duplicate_strings(x): \n    '''\n    Write a function to return list of all the unique strings in the given list x.\n    '''\n    if isinstance(x, str): \n        return x\n    if x==[]: \n        return []\n    if x[0] in x[1:]: \n        return remove_duplicate_strings(x[1:])\n    return [x[0]]+remove_duplicate_strings(x[1:])\ndef count_words_that_begin_with_same_letter_as_current_word(x):"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num_to_string = str(num)\n    num_to_string_reversed = num_to_string[::-1]\n    if (int(num_to_string_reversed) + 1) == (int(num_to_string_reversed) * 2):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    def reverse(num):\n        r = 0\n        while num > 0:\n            r = r*10 + num%10\n            num = num//10\n        return r\n    if reverse(num) == num-1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    temp=num\n    rev=0\n    while(num>0):\n        rev=rev*10+num%10\n        num=num//10\n    if temp==rev-1 or temp==rev+1:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    num = str(num)\n    num = int(num[::-1])\n    if num - 2*num == 1:\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    x = str(num)\n    rev_x = \"\"\n    for i in x:\n        rev_x = i + rev_x\n    if int(x) == (int(rev_x)*2):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    if int(s[::-1]) == 2*int(s):\n        return True\n    return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n=num\n    s=0\n    while n>0:\n        r=n%10\n        s=s*10+r\n        n=n//10\n    if(s==num-1):\n        return True\n    else:\n        return False\n    \ndef check(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    n=num\n    s=0\n    while n>0:\n        r=n%10\n        s=s*10+r\n        n=n//10\n    if(s==num):\n        return True\n    else:\n        return False\n    \ndef check_factors(num):\n    '''\n    Write a python function to check if a given number is a prime.\n    '''\n    n=num\n    if n==1:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i==0:\n            return False\n    return True\n    \ndef max_diff(num):\n    '''\n    Write a python function to check the maximum difference between two factors of a given number.\n    '''\n    n=num\n    max=-1\n    l=[]\n    for i in range(1,int(n/2)+1):\n        if n%i==0:\n            l.append(i)\n    for i in l:\n        for j in l:\n            if(i!=j and i-j>max):\n                max=i-j\n    return max\n    \ndef find_prime(num):\n    '''\n    Write a python function to check the largest prime factor of a given number.\n    '''\n    n=num\n    max=0\n    for i in range(1,int(n/2)+1):\n        if n%i==0 and check_factors(i):\n            if(i>max):\n                max=i\n    return max\n    \ndef sum_of_multiples(num):\n    '''\n    Write a python function to check the sum of the first n natural numbers that are multiples of the same numbers.\n    '''\n    n=num\n    s=0\n    for i in range(1,n+1):\n        if i%3==0 or i%5==0:\n            s=s+i\n    return s\n    \ndef double(num):\n    '''\n    Write a python function to check if the given number is the double of a given power of 2.\n    '''\n    n=num\n    for i in range(1,int(n/2)+1):\n        if n==i*i:\n            return True\n    return False\n    \ndef amstrong(num):\n    '''\n    Write a python function to check if a given number is an amstrong number.\n    '''\n    n=num\n    s=0\n    for i in str(n):\n        r=int(i)\n        s=s+r*r*r\n    if n==s:\n        return True\n    return False\n    \ndef main():\n    print(\" *****Welcome to Digital Calculus Department*****\")\n    print()\n    n=int(input(\"Enter the no. of questions: \"))\n    for i in range(n):\n        print()\n        print(\"*\"*50)\n        print()\n        print(\"Question {}: \".format(i+1))\n        ch=int(input(\"1. Find the reverse of a given number.\\n2. Check if the given number is a palindrome.\\n3. Check if the given number is a prime.\\n4. Find the maximum difference between two factors of a given number.\\n5. Find the largest prime factor of a given number.\\n6. Check if the given number is the double of a given power of 2.\\n7. Check if the given number is an amstrong number.\\n8. Check if the given number is a sum of the first n natural numbers that are multiples of the same numbers.\\n9. Check if the given number is a sum of the first n natural numbers that are multiples of the first n natural numbers.\\n10. Exit.\\n\"))\n        if ch==1:\n            num=int(input(\"Enter a no.: \"))\n            if num==rev(num):\n                print(\"Yes, the reverse of the given no. is {}.\".format(num))\n            else:\n                print(\"No, the reverse of the given no. is {}.\".format(num))\n            print()\n            print()\n        elif ch==2:\n            num=int(input(\"Enter a no.: \"))\n            if num==check(num):\n                print(\"Yes, the given no. is a palindrome.\")\n            else:\n                print(\"No, the given no. is not a palindrome.\")\n            print()\n            print()\n        elif ch==3:\n            num=int(input(\"Enter a no.: \"))\n            if check_factors(num):\n                print(\"Yes, the given no. is a prime.\")\n            else:\n                print(\"No, the given no. is not a prime.\")\n            print()\n            print()\n        elif ch==4:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The maximum difference between two factors of the given no. is {}.\".format(max_diff(num)))\n            print()\n            print()\n        elif ch==5:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The largest prime factor of the given no. is {}.\".format(find_prime(num)))\n            print()\n            print()\n        elif ch==6:\n            num=int(input(\"Enter a no.: \"))\n            if double(num):\n                print(\"Yes, the given no. is the double of a power of 2.\")\n            else:\n                print(\"No, the given no. is not the double of a power of 2.\")\n            print()\n            print()\n        elif ch==7:\n            num=int(input(\"Enter a no.: \"))\n            if amstrong(num):\n                print(\"Yes, the given no. is an amstrong number.\")\n            else:\n                print(\"No, the given no. is not an amstrong number.\")\n            print()\n            print()\n        elif ch==8:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The sum of the first n natural numbers that are multiples of the same numbers is {}.\".format(sum_of_multiples(num)))\n            print()\n            print()\n        elif ch==9:\n            num=int(input(\"Enter a no.: \"))\n            print(\"The sum of the first n natural numbers that are multiples of the first n natural numbers is {}.\".format(sum_of_multiples(num)))\n            print()\n            print()\n        elif ch==10:\n            print(\"Goodbye!\")\n            print(\"\\n\")\n            break\n        else:\n            print(\"Please choose a valid choice.\")\n            print()\n            print()\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev=0\n    while num>0:\n        r=num%10\n        rev=rev*10+r\n        num=num//10\n    if num==rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<=0:\n        return 0\n    else:\n        rev_num = str(num)\n        rev_num = rev_num[::-1]\n        rev_num = int(rev_num)\n        if num == (2*rev_num)-1:\n            return 1\n        else:\n            return 0\n    \ndef div(num):\n    '''\n    Write a python function that returns true if a number is divisible by 2 but not a multiple of 3 and 4.\n    '''\n    if num%2 == 0:\n        if num%3!= 0 and num%4!=0:\n            return 1\n    return 0\n    \ndef sum_of_digits(num):\n    '''\n    Write a python function that returns the sum of digits of a number.\n    '''\n    digit_sum = 0\n    while num > 0:\n        digit_sum += num%10\n        num = int(num/10)\n    return digit_sum\n    \ndef vowel_cons_swap(word):\n    '''\n    Write a python function to check if a word has at least one instance of the letter 'a' and exactly one instance of the letter 'e'.\n    '''\n    count_a = 0\n    count_e = 0\n    for letter in word:\n        if letter == 'a':\n            count_a += 1\n        if letter == 'e':\n            count_e += 1\n    if count_a >= 1 and count_e >= 1 and count_a == count_e:\n        return 1\n    return 0\n    \ndef consonant_swap(word):\n    '''\n    Write a python function to check if a word has at least one instance of the letter 'b' and exactly one instance of the letter 'c'.\n    '''\n    count_b = 0\n    count_c = 0\n    for letter in word:\n        if letter == 'b':\n            count_b += 1\n        if letter == 'c':\n            count_c += 1\n    if count_b >= 1 and count_c >= 1 and count_b == count_c:\n        return 1\n    return 0\n    \ndef ransom_note(magazine, ransom):\n    '''\n    Write a python function to check if a ransom note is a subset of a magazine.\n    '''\n    for word in ransom.split():\n        if word not in magazine.split():\n            return 0\n    return 1\n    \ndef no_pairs(nums):\n    '''\n    Write a python function that returns the count of distinct numbers in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] == nums[j] and i!= j:\n                count += 1\n    return count\n    \ndef find_odd(nums):\n    '''\n    Write a python function that returns the count of positive odd numbers in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]%2!= 0 and nums[i] > 0:\n            count += 1\n    return count\n    \ndef search(nums):\n    '''\n    Write a python function to return the index of the element that appears once in a list. If there are no elements that appear exactly once, return -1.\n    '''\n    unique = []\n    for i in range(len(nums)):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n        else:\n            unique.remove(nums[i])\n    if len(unique) == 0:\n        return -1\n    return nums.index(unique[0])\n    \ndef get_vowel_count(word):\n    '''\n    Write a python function to return the count of vowels in a word.\n    '''\n    count = 0\n    for letter in word:\n        if letter in 'aeiou':\n            count += 1\n    return count\n    \ndef find_double(nums):\n    '''\n    Write a python function to return the index of the element that appears twice in a list. If there are no elements that appear exactly twice, return -1.\n    '''\n    unique = []\n    for i in range(len(nums)):\n        if nums[i] not in unique:\n            unique.append(nums[i])\n        else:\n            unique.remove(nums[i])\n    if len(unique) == 0:\n        return -1\n    return nums.index(unique[0])\n    \ndef reverse_vowels(s):\n    '''\n    Write a python function to reverse the vowels of a string.\n    '''\n    vowels = []\n    for letter in s:\n        if letter in 'aeiouAEIOU':\n            vowels.append(letter)\n    vowels = vowels[::-1]\n    for i in range(len(vowels)):\n        s = s.replace(vowels[i], '_')\n    for i in range(len(vowels)):\n        s = s.replace('_', vowels[i])\n    return s\n    \ndef extra_end(s):\n    '''\n    Write a python function to add 'extra' to the end of a string.\n    '''\n    s = (s[::-1]) + s[:len(s)//2] + 'extra'\n    return s\n    \ndef count_hi(s):\n    '''\n    Write a python function to return the count of \"hi\" in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+2] == 'hi':\n            count += 1\n    return count\n    \ndef cat_dog(s):\n    '''\n    Write a python function to check if a string contains only the characters 'cat' or 'dog'\n    '''\n    if s.count('cat') == s.count('dog') and s.count('cat') == 1:\n        return 1\n    return 0\n    \ndef count_code(s):\n    '''\n    Write a python function to return the count of 'code' in a string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+4] == 'code':\n            count += 1\n    return count\n    \ndef end_other(a, b):\n    '''\n    Write a python function that returns a boolean value indicating whether one string is the last 4 characters of another string.\n    '''\n    a = a.lower()\n    b = b.lower()\n    if len(a) == len(b):\n        if a[-4:] == b[-4:]:\n            return 1\n    if len(a) < len(b):\n        if b[-4:] == a[-4:]:\n            return 1\n    if len(b) < len(a):\n        if a[-4:] == b[-4:]:\n            return 1\n    return 0\n    \ndef xyz_there(s):\n    '''\n    Write a python function to check if a string contains only 'x', 'y' and 'z'.\n    '''\n    if s.count('x') == 1:\n        if s.count('y') == 1:\n            if s.count('z') == 1:\n                if s.count('xyz') == 1:\n                    return 1\n                else:\n                    return 0\n            else:\n                return 0\n        else:\n            return 0\n    else:\n        return 0\n    \ndef count_evens(nums):\n    '''\n    Write a python function to count the number of even numbers in a list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i]%2 == 0:\n            count += 1\n    return count\n    \ndef make_bricks(small, big, goal):\n    '''\n    Write a python function that returns a boolean value indicating whether or not it is possible to make the goal amount of bricks with the given types of bricks.\n    '''\n    if small + (5*big) < goal:\n        return 0\n    return 1\n    \ndef lone_sum(a, b, c):\n    '''\n    Write a python function to return the sum of all three numbers if one number is the lone sum of the other two.\n    '''"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    s = str(num)\n    rev_s = s[::-1]\n    rev_num = int(rev_s)\n    if num < 0:\n        rev_num = -rev_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = ''.join(sorted(list(map(str, arr)), reverse = True))\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse = True)\n    return arr[0]*arr[1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    if(n == 0) :\n        return -1\n    if(n == 1) :\n        return arr[0]\n    for i in range(n) :\n        arr[i] = int(arr[i])\n    for i in range(0,n,1) :\n        for j in range(0,n,1) :\n            if(arr[i] > arr[j]) :\n                temp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = temp\n    for i in range(n) :\n        if(arr[i]!= 0) :\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    import math\n    from collections import Counter \n    arr.sort(reverse = True) \n    arr = [int(x) for x in arr]\n    print(\"Largest number is:\",end=\"\") \n    print(sum(arr)) \n    # Driver code \n    #arr = [2, 5, 1, 8, 9, 3, 7, 6] \n    #find_Max_Num(arr) \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return(max(arr))\n    \n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    return \"\".join(sorted(arr,reverse=True))"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    for i in range(9, 0, -1) :\n        max_num = 0\n        for j in range(len(arr)) :\n            if i % int(arr[j]) == 0 and max_num < int(arr[j]) :\n                max_num = int(arr[j])\n        return max_num\nprint(find_Max_Num(arr))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    nums = []\n    for num in arr:\n        nums.append(int(num))\n    nums.sort()\n    return nums[-1]\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = [str(i) for i in arr]\n    num_list.sort()\n    s = \"\"\n    for i in num_list : \n        s += i\n    return int(s)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Python program to find the largest number that can be formed with the given list of digits. \n    \n    # sort the numbers in increasing order \n    arr.sort() \n    \n    # initialize result \n    result = 0\n    \n    # traverse the sorted array \n    for num in arr: \n        # update the result if the number in the array is more than the current result \n        result = max(result, num) \n    \n    return result\n    \ndef find_max_seq(arr) : \n    '''\n    Write a Python function to find the longest subarray that has sum equal to 0.\n    '''\n    # Python program to find the longest subarray \n    # that has sum equal to 0 \n    \n    n = len(arr) \n    Sum = 0\n    i = 0\n    j = 0\n    max_len = 0\n    \n    while (i < n) : \n        \n        Sum = Sum + arr[i] \n        if (Sum == 0) : \n            j = i + 1\n            while (j < n and Sum!= 0) : \n                Sum = Sum + arr[j] \n                j = j + 1\n            if (j - i > max_len) : \n                max_len = j - i\n                i = i + max_len\n                j = i + 1\n            \n        i = i + 1\n    return max_len\n    \n    \ndef check_num_divisor(n) : \n    '''\n    Write a Python program to check a number is divisible by 5 or not.\n    '''\n    # Write a Python program to check a number is divisible by 5 or not.\n    #If a number is divisible by 5, print 5. Else, print \"not\". \n    \n    #print number if it is divisible by 5 \n    if n % 5 == 0 : \n        print(\"5\") \n    else : \n        print(\"not\") \n        \ndef find_pythagorean_triplet() : \n    '''\n    Write a Python program to find three elements that sum to 0.\n    '''\n    # Write a Python program to find three elements that sum to 0.\n    #Input: [1, 2, 3, -3, 4]\n    #Output: 3, -3, and 4\n    #Explanation: -3 + 3 + 4 = 0\n    \n    #sort the input array \n    arr.sort() \n    \n    #initialize result \n    result = 0\n    \n    #find the triplet\n    for index in range(len(arr)-2) :\n        left = index + 1\n        right = len(arr) - 1\n        \n        while left < right :\n            sum = arr[index] + arr[left] + arr[right]\n            \n            if sum == 0 :\n                print(arr[index], arr[left], arr[right])\n                result = 1\n                left = left + 1\n                right = right - 1\n            elif sum < 0 :\n                left = left + 1\n            else :\n                right = right - 1\n    \n    if result == 0 : \n        print(\"No triplet found\")\n        \ndef sum_numbers_binary(arr, n) : \n    '''\n    Write a Python program to count the number of 1s in the binary representation of an integer.\n    '''\n    # Write a Python program to count the number of 1s in the binary representation of an integer.\n    #Ex: For the input x = 11, the output should be 2 because the binary representation of 11 is 1011.\n    \n    #count the number of 1s in the binary representation of the number \n    count = 0\n    \n    #traverse the number \n    for i in range(n) : \n        if (arr[i] == 1) :\n            count = count + 1\n            \n    return count\n        \ndef generate_prime_numbers(n) : \n    '''\n    Write a Python program to generate n prime numbers.\n    '''\n    # Write a Python program to generate n prime numbers.\n    #E.g. A prime number is a positive integer greater than 1 that has no positive divisors other than 1 and itself.\n    #Ex: For the input n = 5, the output should be: 2, 3, 5, 7, 11\n    \n    #initialize result \n    result = []\n    \n    #initialize counter \n    counter = 0\n    \n    #check for numbers less than 2 \n    if n < 2 :\n        return None\n    \n    #generate n prime numbers \n    while counter < n :\n        \n        #initialize n_num \n        n_num = n + 1\n        \n        #check if the number is prime \n        is_prime = True\n        \n        #traverse the number \n        for i in range(2, n_num) : \n            #check if the number is not prime \n            if (n_num % i == 0) :\n                is_prime = False\n                break\n            \n        #check if the number is prime \n        if is_prime :\n            counter = counter + 1\n            result.append(n_num)\n            \n    return result\n        \ndef find_least_common_multiple(n1, n2) : \n    '''\n    Write a Python program to find the least common multiple (LCM) of two numbers.\n    '''\n    #Write a Python program to find the least common multiple (LCM) of two numbers.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n1*n2) : \n        #check if the number is divisible by n1 and n2 \n        if (i % n1 == 0 and i % n2 == 0) : \n            result = i\n            break\n            \n    return result\n    \ndef find_greatest_common_divisor(n1, n2) : \n    '''\n    Write a Python program to find the greatest common divisor (GCD) of two numbers.\n    '''\n    #Write a Python program to find the greatest common divisor (GCD) of two numbers.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n1*n2 + 1) :\n        #check if the number is divisible by n1 and n2 \n        if (n1 % i == 0 and n2 % i == 0) :\n            result = i\n            \n    return result\n    \ndef find_next_square(n) : \n    '''\n    Write a Python program to find the next largest square number of a given number. \n    Note: The square root of a number will always be an integer.\n    '''\n    #Write a Python program to find the next largest square number of a given number.\n    #Note: The square root of a number will always be an integer.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n) : \n        #check if the number is divisible by n1 and n2 \n        if (i * i == n) : \n            result = i\n            break\n            \n    return result\n    \ndef find_largest_factor(n) : \n    '''\n    Write a Python program to find the largest factor of a number. \n    Note: The function should return the largest factor in the number.\n    '''\n    #Write a Python program to find the largest factor of a number.\n    #Note: The function should return the largest factor in the number.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n+1) : \n        #check if the number is divisible by n1 and n2 \n        if (n % i == 0) : \n            result = i\n            \n    return result\n    \ndef find_fibonacci_sequence() : \n    '''\n    Write a Python program to find the nth term of the Fibonacci sequence.\n    '''\n    #Write a Python program to find the nth term of the Fibonacci sequence.\n    \n    #initialize result \n    result = 0\n    \n    #traverse the number \n    for i in range(1, n+1) : \n        #check if the number is divisible by n1 and n2"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=int(x)\n    y=int(y)\n    if x>0 and y<0:\n        return True\n    if x<0 and y>0:\n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n        \ndef main():\n    a = int(input('Enter first integer : '))\n    b = int(input('Enter second integer : '))\n    print('Are the given two numbers have opposite signs? : ', opposite_Signs(a,b))\n    \nif __name__ == '__main__':\n    main()\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x<0 and y>0) or (x>0 and y<0)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (-x,-y)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    def opposite_Signs(x,y):\n        if (x<0 and y>0) or (x>0 and y<0):\n            return True\n        return False\n    if opposite_Signs(x,y):\n        print(f'The given two integers {x} and {y} have opposite signs.')\n    else:\n        print(f'The given two integers {x} and {y} do not have opposite signs.')\nopposite_Signs(x,y)\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    \n    return x*y <= 0\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y<0: \n        return True\n    elif x<0 and y>0: \n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if(x<0 and y>0) or (x>0 and y<0):\n        return True\n    else:\n        return False\n    \nprint(opposite_Signs(-2,3))\nprint(opposite_Signs(5,-5))\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    n -= 1\n    return n*n*3 + (n*2+1)*n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while i <= n:\n        print(i)\n        i += 8\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    nth_octagonal_number = n*(3*n-1)/2\n    return int(nth_octagonal_number)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    import math\n    n = int(input(\"Enter the number of the nth octagonal number you want to find: \"))\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return 8*n**2 - 8*n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    return n * (3 * n - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*n*n - n\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * ((3*n) - 1)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n*(3*n-1)/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # return n * (2 * n - 1)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    total_sum = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            curr_substring = s[i:j]\n            curr_sum = 0\n            for k in curr_substring:\n                curr_sum += int(k)\n            if curr_sum == len(curr_substring):\n                total_sum += 1\n    return total_sum\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if (i+j) == len(s):\n                result += 1\n    return result\n    # time complexity is O(n^2)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        d[i] = i\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                d[j] = d[j - 1] + 1 if j - 1 >= 0 else 1\n    return n - max(d.values())\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = []\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            l.append(s[i:j+1])\n    l.sort()\n    \n    ans = 0\n    \n    for i in range(len(l)):\n        t = 0\n        for j in range(len(l[i])):\n            t += int(l[i][j])\n        if t == len(l[i]):\n            ans += 1\n    return ans\n    \n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if sum(int(x) for x in s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # This is a variation of the Longest Substring with same characters after Replacement problem.\n    # We are now keeping track of the sum of the substrings instead of substring itself.\n    sum_dict = defaultdict(lambda: 0)\n    left = 0\n    right = 0\n    count = 0\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    while right < len(s):\n        sum_dict[s[right]] += 1\n        right += 1\n    while left < right:\n        if s[left] in sum_dict:\n            if s[left] * sum_dict[s[left]] == s[left + 1 : right]:\n                count += 1\n            sum_dict[s[left]] -= 1\n        left += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    table = defaultdict(int)\n    table[0] = 1\n    sum = 0\n    for i in range(n):\n        sum += int(s[i])\n        table[sum] += 1\n        sum -= int(s[i])\n    count = 0\n    for i in range(n):\n        count += table[sum + i]\n    print(count)\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s:\n        return 0\n    cnt, l, i = 0, len(s), 0\n    while i < l:\n        j = i + 1\n        cnt += 1\n        while j < l and (s[j-1] + int(s[j]) == j + 1):\n            j += 1\n            cnt += 1\n        i += 1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if not s: return 0\n    n = len(s)\n    ans = 0\n    dp = [defaultdict(int) for i in range(n)]\n    for i in range(n):\n        dp[i][s[i]] += 1\n        ans += dp[i][s[i]]\n    print(dp)\n    for i in range(1, n):\n        for j in range(i):\n            for k in range(j, i):\n                dp[i][s[k] + s[j]] += dp[j][s[k]]\n                ans += dp[i][s[k] + s[j]]\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            d[s[i:j+1]] += 1\n    return sum([v * (v+1)//2 for v in d.values()])\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # base case\n    if xs == []:\n        return\n    # recursive case\n    else:\n        return min(xs[0], smallest_num(xs[1:]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\nprint(smallest_num([2,6,3,4,5,7,8,9,2,2]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #...\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\nprint(smallest_num([1,2,3]))\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    s = xs[0]\n    for x in xs:\n        if x < s:\n            s = x\n    return s\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise Exception(\"List is too short.\")\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff_list = []\n    #use two for loops to find all the differences in pairs and store them in a list\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i]!= test_list[j] and i!= j:\n                diff_list.append(abs(test_list[i] - test_list[j]))\n    return max(diff_list)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError\n    else:\n        max_val = 0\n        max_diff = 0\n        for i in range(len(test_list)):\n            for j in range(i + 1, len(test_list)):\n                difference = abs(test_list[i] - test_list[j])\n                if difference > max_diff:\n                    max_val = max(max_val, test_list[i], test_list[j])\n                    max_diff = difference\n        return max_val, max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        raise ValueError('Please input a tuple list with at least two tuples.')\n    list_of_lists = [i for i in test_list]\n    # if the list is even, the difference will be the square root of the list length\n    # if the list is odd, the difference will be the list length\n    if len(list_of_lists) % 2 == 0:\n        return (len(list_of_lists) **.5)\n    else:\n        return len(list_of_lists)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n    for index in range(len(test_list)):\n        for ind in range(len(test_list)):\n            if index!= ind:\n                result = max(abs(test_list[index] - test_list[ind]), result)\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list.sort()\n    return test_list[-1] - test_list[0]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks.sort(key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = []\n    for subject in subjectmarks:\n        sorted_list.append(subject[1])\n    sorted_list.sort()\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1], reverse=True)\n    return sorted_list\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda tup: tup[1])\n    return subjectmarks\n    \ndef main():\n    '''\n    Fetch data from user and print the sorted list of tuples using subject_marks function\n    '''\n    number_of_subjects=int(input(\"Enter number of subjects: \"))\n    subjects=[]\n    for i in range(number_of_subjects):\n        subjects.append(input(\"Enter subject name: \"))\n    number_of_marks=int(input(\"Enter number of marks: \"))\n    marks=[]\n    for i in range(number_of_subjects):\n        for j in range(number_of_marks):\n            marks.append(int(input(\"Enter marks of subject {}: \".format(subjects[i]))))\n    tuples=list(zip(subjects,marks))\n    print(\"Original List of Tuples is:\\n\",tuples)\n    sorted_tuples=subject_marks(tuples)\n    print(\"Sorted list of tuples is: \",sorted_tuples)\n    \nif __name__=='__main__':\n    main("
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks_list = []\n    for i in subjectmarks:\n        marks_list.append(i[1])\n    marks_list.sort()\n    return marks_list\n    \n    \ndef main():\n    # Get data.\n    data = input('Enter marks for students separated by space: ')\n    subjectmarks = data.split()\n    for i in range(0, len(subjectmarks)):\n        subjectmarks[i] = float(subjectmarks[i])\n        \n    # Display sorted list.\n    marks_list = subject_marks(subjectmarks)\n    print('Marks list: ', marks_list)\n    \nif __name__ == '__main__':\n    main("
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks[1]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #print(sorted(subjectmarks,key=itemgetter(1)))\n    print(sorted(subjectmarks,key=itemgetter(0,1)))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #print(sorted(subjectmarks, key = lambda x: x[1]))\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return subjectmarks.sort(key=lambda x: x[1], reverse=False)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n    \ndef recursive_list_count(data_list):\n    '''\n    Write a function to flatten a list and count all of its elements.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        return 1 + recursive_list_count(data_list[1:])\n    \n    \ndef recursive_list_max(data_list):\n    '''\n    Write a function to flatten a list and return the max value.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        if len(data_list) == 1:\n            return data_list[0]\n        else:\n            max_value = max(data_list[0], recursive_list_max(data_list[1:]))\n        return max_value\n        \n        \ndef recursive_list_sum_max(data_list):\n    '''\n    Write a function to flatten a list, sum all of its elements and return the max value.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        sum = data_list[0] + recursive_list_sum_max(data_list[1:])\n        return max(sum, recursive_list_max(data_list))\n    \n    \ndef recursive_list_count_max(data_list):\n    '''\n    Write a function to flatten a list, count all of its elements and return the max value.\n    '''\n    \n    if len(data_list) == 0:\n        return 0\n    else:\n        count = 1 + recursive_list_count_max(data_list[1:])\n        return max(count, recursive_list_max(data_list))\n    \n    \ndef test_list_sum():\n    '''\n    Call the above functions to test the list_sum function.\n    '''\n    \n    # call recursive_list_sum() to test the list_sum function\n    assert recursive_list_sum([1, [1, 2], 3]) == 8\n    \n    \ndef test_list_count():\n    '''\n    Call the above functions to test the list_count function.\n    '''\n    \n    # call recursive_list_count() to test the list_count function\n    assert recursive_list_count([1, [1, 2], 3]) == 3\n    \n    \ndef test_list_max():\n    '''\n    Call the above functions to test the list_max function.\n    '''\n    \n    # call recursive_list_max() to test the list_max function\n    assert recursive_list_max([1, [1, 2], 3]) == 3\n    \n    \ndef test_list_sum_max():\n    '''\n    Call the above functions to test the list_sum_max function.\n    '''\n    \n    # call recursive_list_sum_max() to test the list_sum_max function\n    assert recursive_list_sum_max([1, [1, 2], 3]) == 3\n    \n    \ndef test_list_count_max():\n    '''\n    Call the above functions to test the list_count_max function.\n    '''\n    \n    # call recursive_list_count_max() to test the list_count_max function\n    assert recursive_list_count_max([1, [1, 2], 3]) == 3\n    \n    \nif __name__ == \"__main__\":\n    print('testing list_sum...')\n    test_list_sum()\n    print('passed')\n    \n    print('testing list_count...')\n    test_list_count()\n    print('passed')\n    \n    print('testing list_max...')\n    test_list_max()\n    print('passed')\n    \n    print('testing list_sum_max...')\n    test_list_sum_max()\n    print('passed')\n    \n    print('testing list_count_max...')\n    test_list_count_max()\n    print('passed')\n    \n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == int:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif isinstance(data_list[0], int):\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    #initialize empty list\n    flat_list = []\n    #check if list is empty\n    if len(data_list) == 0:\n        #if list is empty, return 0\n        return 0\n    #if list is not empty\n    else:\n        #for each element in list\n        for element in data_list:\n            #if element is a list, recursively call function\n            if isinstance(element,list):\n                #add the sum of the sublist to the total\n                #flat_list.append(recursive_list_sum(element))\n                flat_list += recursive_list_sum(element)\n            #if element is not a list, add to list\n            else:\n                flat_list.append(element)\n        #return sum of flat list\n        return sum(flat_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for sub_list in data_list:\n        if isinstance(sub_list, list):\n            total += recursive_list_sum(sub_list)\n        else:\n            total += sub_list\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case\n    if len(data_list) == 0:\n        return 0\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for item in list:\n        if item>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if(i>0):\n            count=count+1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos_count = 0\n    for num in list:\n        if num > 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if(i > 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count=count+1\n    return count\n    \ndef to_upper_case(list):\n    '''\n    Write a python function to convert all the characters of a list to upper case.\n    '''\n    new_list=[]\n    for i in list:\n        new_list.append(i.upper())\n    return new_list\n    \ndef palindrome(word):\n    '''\n    Write a python function to check whether a word is palindrome or not.\n    HINT: You can check the reverse of a word using slicing.\n    '''\n    if word==word[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = dp[1] = 1\n    for i in range(2, n + 1):\n        for j in range(i + 1):\n            dp[i] += dp[j] * dp[i - j - 1]\n    return dp[n]\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=0:\n        return 1\n    else:\n        return n*(2*n+1)*(n+1)//6\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 678570, 2924883, 1622500, 9003500, 5040600, 45428800, 32756420, 41407028, 26558460, 140807056, 950942616, 491530600, 44108400, 479299376, 422929280, 466408064, 537265600, 414070560, 363270720, 303960320, 265599360, 730691200, 1136036800, 15982900, 1494129024, 504072064, 4502528064, 45448256064, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 47929768, 422927260, 466408080, 5372656, 41407056, 3632708, 303960, 26559936, 7306912, 113603680, 159829, 1494129, 504072, 45025280, 454482560, 479297696, 422927260, 466408080, 5372656, 41407056, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 4792976896, 4229272320, 466408256, 537269152, 414070560, 36327072, 30396064, 265599360, 73069120, 1136036320, 159829160, 1494129040, 504072080, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 265599360, 73069120, 113603680, 159829160, 1494129, 504072, 45025280, 454482560, 479297696, 4229272320, 466408256, 537269152, 414070560, 3632708, 303960, 2"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1]\n    for i in range(1, n+1):\n        bells.append(bells[-1]*i)\n    s = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            s += bell[i]\n    return s"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = {}\n    bell_numbers[0] = 1\n    bell_numbers[1] = 1\n    bell_numbers[2] = 2\n    bell_numbers[3] = 5\n    bell_numbers[4] = 15\n    bell_numbers[5] = 52\n    bell_numbers[6] = 203\n    bell_numbers[7] = 877\n    bell_numbers[8] = 4140\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bells = [1, 1, 2, 5, 15, 52, 203, 877, 4140, 21147, 115975, 693803, 3655290, 1767263, 11182047, 6357710, 3797678, 2239490, 16896445, 137846529, 1071276247, 9872779653]\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 15\n    elif n == 4:\n        return 52\n    elif n == 5:\n        return 203\n    elif n == 6:\n        return 877\n    elif n == 7:\n        return 4140\n    elif n == 8:\n        return 21147\n    elif n == 9:\n        return 115975\n    elif n == 10:\n        return 693803\n    elif n == 11:\n        return 3655290\n    elif n == 12:\n        return 1767263\n    elif n == 13:\n        return 11182047\n    elif n == 14:\n        return 6357710\n    elif n == 15:\n        return 3797678\n    elif n == 16:\n        return 2239490\n    elif n == 17:\n        return 16896445\n    elif n == 18:\n        return 137846529\n    elif n == 19:\n        return 1071276247\n    elif n == 20:\n        return 9872779653\n    else:\n        return -1\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = []\n    for i in range(n+1):\n        bell_numbers.append(bell(i))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ans = bell_numbers(n)\n    print(ans)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    \n    elif n > 0:\n        return bell_number(n - 1) + bell_number(n - 2) * n\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return A==sorted(A) or A==sorted(A,reverse=True)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    while i < (len(A) - 1): \n        if (A[i] > A[i + 1]): \n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    increasing = decreasing = True\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            decreasing = False\n        if A[i] < A[i+1]: \n            increasing = False\n        if not increasing and not decreasing: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) \n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\n        all(A[i] >= A[i + 1] for i in range(len(A) - 1)))"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or \n            all(A[i] >= A[i + 1] for i in range(len(A) - 1)))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    return all(a[i]<=a[i+1] for i in range(len(A)-1)) or all(a[i]>=a[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i=0\n    j=0\n    n=len(A)\n    while(i<n-1 and j<n-1):\n        if(A[i]==A[j]):\n            i=i+1\n            j=j+1\n        elif(A[i]>A[j]):\n            return False\n        else:\n            j=j+1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if len(A)<2:\n    #     return True\n    # return all(A[i]<=A[i+1] for i in range(len(A)-1)) or all(A[i]>=A[i+1] for i in range(len(A)-1))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return any(l[i:i + len(s)] == s for i in range(len(l) - len(s) + 1))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    try:\n        return False if not s else is_sublist(l[1:], s[1:]) if s[0] == l[0] else is_sublist(l[1:], s)\n    except IndexError:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    elif l == []:\n        return False\n    elif len(s) > len(l):\n        return False\n    else:\n        for i in range(len(s)):\n            if s[i]!= l[i]:\n                return False\n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) >= len(s):\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    return is_sublist(l[1:], s) if l[0] == s[0] else is_sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub_set = False\n    if s == []:\n        sub_set = True\n    elif s == l:\n        sub_set = True\n    elif len(s) > len(l):\n        sub_set = False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input)\n    li = []\n    for i in range(len(Input)):\n        li.append(len(Input[i]))\n    print(li)\n    for i in range(1,l):\n        if li[0]!= li[i]:\n            print(\"All the tuples in the list does not have equal length\")\n            break\n        else:\n            print(\"All the tuples in the list has equal length\")\n            break\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Input=Input.split(\" \")\n    Input=tuple(Input)\n    if len(Input)==len(set(Input)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    res = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    size = len(Input)\n    for index in range(0,size-1):\n        for index2 in range(index+1,size):\n            if len(Input[index])!= len(Input[index2]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    s = set(Input)\n    length = len(Input[0])\n    lst = list()\n    for i in s:\n        if len(i)!= length:\n            lst.append(i)\n    if len(lst) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return len(set(map(len, Input))) == 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output=[]\n    if len(Input)==len(set(map(len,Input))):\n        Output.append(True)\n    else:\n        Output.append(False)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    Output = []\n    for each in Input:\n        if len(each) == len(Input[0]):\n            Output.append(each)\n    if Output == []:\n        Output.append(-1)\n    return Output\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def compare(l1, l2):\n        if len(l1) == len(l2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    \n    while gap!= 1 or swapped:\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(0, len(nums)-gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i,j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        temp = nums[i]\n        nums[i] = nums[j]\n        nums[j] = temp\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap / 1.3)) # minimum gap is 1\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    combsort(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted = False\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[j] < nums[i]:\n                nums[j], nums[i] = nums[i], nums[j]\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n == 1:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    if n % 8 == 7 or n % 8 == 5:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    root = math.sqrt(n)\n    if int(root + 0.5) ** 2 == n: \n        return True\n    if int(root - 0.5) ** 2 == n: \n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(int(n**0.5),1,-1):\n        for j in range(int(n**0.5),1,-1):\n            if (i**2 - j**2)==n:\n                print(\"Yes\")\n                return None\n    print(\"No\")\n    return None\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n):\n        for j in range(n):\n            if i*i + j*j == n:\n                return True\n    return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # initializing the first and the last possible number \n    start = 0\n    end = n \n    \n    # loop until the start becomes greater than the end \n    while(start <= end): \n        \n        # storing the mid value \n        mid = start + (end - start) // 2\n        \n        # checking whether the mid value is the required number or not \n        if (mid * mid == n): \n            return True\n            break\n        \n        # if the mid value is greater than the required number \n        elif (mid * mid > n): \n            end = mid - 1\n            \n        # if the mid value is less than the required number \n        else: \n            start = mid + 1\n            \n    # returning the \"false\" for the invalid input \n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def prime_check(num): \n        if num == 1: \n            return False\n        for i in range(2,int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    x = n // 2\n    \n    while x > 0:\n        if (x * x == n):\n            return True\n        x = x - 1\n    return False\n    \n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n): \n        x = i*i\n        if (x>n): \n            break\n        if (n-x == 0): \n            print(x)\n            return 1\n            \n    for j in range(n): \n        x = j*j\n        if (x<n): \n            break\n        if (n-x == 0): \n            print(x)\n            return 1\n    return 0\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i**2 <= n:\n        if i**2 == n:\n            return True\n        i += 1\n    return False\n    "
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if i**2 > n:\n            break\n        else:\n            if n-i**2 not in l:\n                l.append(i**2)\n    if n in l:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)-len(patterns)+1):\n        for j in range(len(patterns)):\n            if colors[i+j]!=patterns[j]:\n                break\n            if j==len(patterns)-1:\n                return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    result = []\n    for i in range(0, len(colors)):\n        if patterns[i] == 'R':\n            result.append(colors[i] == 'RED')\n        elif patterns[i] == 'G':\n            result.append(colors[i] == 'GREEN')\n        else:\n            result.append(colors[i] == 'BLUE')\n    return result\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if (len(colors)!= len(patterns)):\n        return False\n    n = len(colors)\n    i = 0\n    for p in patterns:\n        if (p == \"R\" and colors[i] == \"G\"):\n            i += 1\n            if (i == n):\n                return True\n        elif (p == \"G\" and colors[i] == \"R\"):\n            i += 1\n            if (i == n):\n                return True\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(1, len(patterns)):\n        if i == len(patterns)-1:\n            if patterns[i]!= patterns[i-1]:\n                return False\n            continue\n        if patterns[i]!= patterns[i-1]:\n            if i == 1:\n                return False\n            if patterns[i-1] == patterns[i-2]:\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    j = 0\n    while j < len(colors):\n        if patterns[i] == colors[j]:\n            j += 1\n        else:\n            j = 0\n        i += 1\n        if i == len(patterns):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    index_color = 0\n    index_pattern = 0\n    \n    while index_color < len(colors) and index_pattern < len(patterns):\n        \n        if colors[index_color] == patterns[index_pattern]:\n            index_pattern += 1\n        else:\n            index_color += 1\n    \n    if index_color == len(colors) and index_pattern == len(patterns):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for color in colors:\n        if color == 0:\n            break\n        for pattern in patterns:\n            if pattern == color:\n                break\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # 1: convert colors to sets (if you cannot, skip this question)\n    colors = set(colors)\n    # 2: check if the first color is in colors\n    if not patterns[0] in colors: return False\n    # 3: iterate over the patterns\n    for i in range(1, len(patterns)):\n        # if the next color is not in colors, return false\n        if not patterns[i] in colors: return False\n    # 4: return true if you have iterated over all the patterns\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n_colors = len(colors)\n    n_patterns = len(patterns)\n    i_start = 0\n    for i in range(n_patterns):\n        if i_start < n_colors and patterns[i] == colors[i_start]:\n            i_start += 1\n        else:\n            return False\n    return i_start == n_colors\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    if not test_list:\n        return []\n    \n    result = []\n    \n    for tup in test_list:\n        if all(int(i) % K == 0 for i in tup):\n            result.append(tup)\n            \n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return list(filter(lambda x: all(list(map(lambda y: y%K==0,x))), test_list))\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tuple_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if ((test_list[i][0]%K==0) and (test_list[i][1]%K==0) and (test_list[j][0]%K==0) and (test_list[j][1]%K==0)):\n                tuple_list.append((test_list[i], test_list[j]))\n    return tuple_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if (all(j%K == 0 for j in test_list[i])):\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for x in test_list:\n        if all(y % K == 0 for y in x):\n            res.append(x)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for tuple in test_list:\n        if all(number % K == 0 for number in tuple):\n            output.append(tuple)\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # res = []\n    # for a, b, c in test_list:\n    #     if a % K == 0 and b % K == 0 and c % K == 0:\n    #         res.append((a, b, c))\n    # return res\n    return [(a, b, c) for a, b, c in test_list if a % K == 0 and b % K == 0 and c % K == 0]\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    new_list = []\n    for each_tuple in test_list:\n        if(all(x%K==0 for x in each_tuple)):\n            new_list.append(each_tuple)\n    return new_list\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_of_tuples = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K == 0:\n                if test_list[i] not in list_of_tuples:\n                    list_of_tuples.append(test_list[i])\n    return list_of_tuples\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return \"yes\"\n    else:\n        return \"no\"\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    return n % 11 == 0\n    \n    \ndef is_Diff_2(n):\n    \n    return n % 7 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    x = n % 11\n    if x == 0:\n        return 'The Number is divisible by 11'\n    else:\n        return 'The Number is not divisible by 11'\nprint(is_Diff(int(input('Please enter a number: '))))\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(\"{} is divisible by 11.\".format(n))\n    else:\n        print(\"{} is not divisible by 11.\".format(n))\n    return;\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if (n%11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print('Number is divisible by 11')\n    else:\n        print('Number is not divisible by 11')\n        \nis_Diff(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n       print(n, \"is divisible by 11\")\n    else:\n       print(n, \"is not divisible by 11\")\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2!=0:\n        print('Odd')\n    else:\n        print('Even')\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    l = len(s)\n    if l % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\n    \n    \n    \ndef check_end_count(s):\n    '''\n    Write a python function to check whether the words in the string end with same character or not.\n    '''\n    # Your code here\n    char = s[-1]\n    lst = s.split(' ')\n    \n    for i in range(len(lst)):\n        if lst[i][-1]!= char:\n            return False\n        else:\n            return True\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0: \n        return 0\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(3*n - 1)/2\n    \nprint(tetrahedral_number(6)"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return int(n*(n+1)*(n+2)/6)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n + 1) * (n + 2) // 6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize a list with zeroes\n    tetra = [0] * (n + 1)\n    # There is one tetrahedral number of zero, therefore the 1st tetrahedral number is 0\n    tetra[1] = 0\n    # From the 2nd tetrahedral number, we can't look back one more number than the previous tetrahedral number\n    tetra[2] = 1\n    # Iterate over the remaining numbers in the list \n    for i in range(3, n + 1):\n        # Calculate the next number in the list\n        tetra[i] = (i - 2) * tetra[i - 1] + tetra[i - 2]\n    # Return the nth tetrahedral number\n    return tetra[n]\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def factorial(num):\n        if num == 1 or num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    # Initialize variables\n    sum = 0\n    num = 0\n    # Create a while loop that repeats until n = 1\n    while n > 1:\n        # Increment variable n by 1\n        n -= 1\n        # Calculate the product of all numbers between 1 and n\n        product = factorial(n)\n        # Calculate the sum of all numbers between 1 and n\n        sum += n * product\n    # Calculate the nth tetrahedral number\n    num = (2 ** sum) / 6\n    # Return the nth tetrahedral number\n    return int(num)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_tetrahedral_number(n): \n        return n*(3*n-1)/2\n    return get_tetrahedral_number(n)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)/6\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #calculate the volume of a sphere\n    #r is the radius of the sphere\n    v = 4 / 3 * math.pi * (r ** 3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V=4*math.pi*math.pow(r,3)/3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    import math\n    r = float(input(\"Enter the radius of the sphere: \"))\n    v = (4/3) * math.pi * r**3\n    print(v)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r= float(input(\"Enter the radius of the sphere : \"))\n    v = 4/3 * math.pi * r**3\n    print(\"The volume of the sphere is :\",v)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return ((4 * math.pi * (r ** 3)) / 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r = float(r)\n    pi = math.pi\n    volume = (4/3)*pi*(r**3)\n    return volume\nprint(volume_sphere(2))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    r=int(r)\n    return ((4/3)*math.pi*(r**3))"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume= (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum = sum + ord(i) % 96\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum=sum+(ord(i))%26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in strr:\n        sum += ord(i) % 26\n    return chr(sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return chr(x%26)\ndef get_Index(strr):\n    '''\n    Write a python function to find the index of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x%26\ndef get_Pair(strr):\n    '''\n    Write a python function to find the pair of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x/2\ndef get_Odd_Pair(strr):\n    '''\n    Write a python function to find the odd pair of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x/2\ndef get_Sum(strr):\n    '''\n    Write a python function to find the sum of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    x=0\n    for i in range(len(strr)):\n        x+=ord(strr[i])\n    return x\ndef get_Count(strr,c):\n    '''\n    Write a python function to find the number of occurrences of the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count=0\n    for i in range(len(strr)):\n        if ord(strr[i])==c:\n            count+=1\n    return count\ndef get_Least_Occur(strr):\n    '''\n    Write a python function to find the least occuring character of the string.\n    '''\n    x=0\n    for i in range(len(strr)):\n        if ord(strr[i])>x:\n            x=ord(strr[i])\n    return x\ndef get_Most_Occur(strr):\n    '''\n    Write a python function to find the most occuring character of the string.\n    '''\n    x=0\n    for i in range(len(strr)):\n        if ord(strr[i])>x:\n            x=ord(strr[i])\n    return x\ndef get_Length(strr):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    return len(strr)\ndef get_Reverse(strr):\n    '''\n    Write a python function to find the reverse of the given string.\n    '''\n    return strr[::-1]\ndef get_Palindrome(strr):\n    '''\n    Write a python function to check whether the given string is a palindrome or not.\n    '''\n    return strr==strr[::-1]\ndef get_Substring(strr,i,j):\n    '''\n    Write a python function to find the substring of the given string.\n    '''\n    return strr[i:j]\ndef get_ASCII_Value(strr):\n    '''\n    Write a python function to find the ASCII value of a character.\n    '''\n    return ord(strr)\ndef get_Max_ASCII_Value(strr):\n    '''\n    Write a python function to find the maximum ASCII value of the character of the given string.\n    '''\n    return max(ord(strr[i]) for i in range(len(strr)))\ndef get_Min_ASCII_Value(strr):\n    '''\n    Write a python function to find the minimum ASCII value of the character of the given string.\n    '''\n    return min(ord(strr[i]) for i in range(len(strr)))\ndef get_ASCII_Sum(strr):\n    '''\n    Write a python function to find the sum of ASCII values of the characters of the given string.\n    '''\n    return sum(ord(strr[i]) for i in range(len(strr)))\ndef get_ASCII_Occurrence(strr,c):\n    '''\n    Write a python function to find the occurrence of the character with the ASCII value in the given string.\n    '''\n    return strr.count(chr(c))\ndef get_ASCII_Multiple(strr,c):\n    '''\n    Write a python function to find the multiple of the character with the ASCII value in the given string.\n    '''\n    return ord(strr)*c\ndef get_ASCII_Product(strr,c):\n    '''\n    Write a python function to find the product of the character with the ASCII value in the given string.\n    '''\n    return ord(strr)*c\ndef get_ASCII_Product_Sum(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string.\n    '''\n    return sum(ord(strr[i])*c for i in range(len(strr)) for c in range(1,5))\ndef get_ASCII_Product_Sum_Count(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product.\n    '''\n    x,count=0,0\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n    return (x,count)\ndef get_ASCII_Product_Sum_Count_Char(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product and character.\n    '''\n    x,count,c=0,0,' '\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n            x+=ord(strr[i])\n    return (x,count,c)\ndef get_ASCII_Product_Sum_Count_Char_Index(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product and character and also the index of the character in the string.\n    '''\n    x,count,c=' ',0,' '\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n            x+=ord(strr[i])\n    return (x,count,c,i)\ndef get_ASCII_Product_Sum_Count_Char_Index_Reverse(strr):\n    '''\n    Write a python function to find the sum of the product of the character with the ASCII value in the given string and also count the number of occurrences of the product and character and also the index of the character in the string and also in reverse order.\n    '''\n    x,count,c=' ',0,' '\n    for i in range(len(strr)):\n        for c in range(1,5):\n            x+=ord(strr[i])*c\n    for i in range(len(strr)):\n        if x==ord(strr[i])*(i+1):\n            count+=1\n            x+=ord(strr[i])\n    return (x,count,c,i)\ndef get_ASCII_Product_Sum_Count"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list_chars = list(strr)\n    sum = 0\n    for i in list_chars:\n        sum += ord(i)\n    return (chr(sum%26))\nstrr = \"How are you\"\nprint(get_Char(strr))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    sum = 0\n    for i in strr:\n        sum = sum + dict1[i]\n    return (sum % 26)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return(chr(sum))\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    #code here\n    sum=0\n    for i in strr:\n        sum+=ord(i)%26\n    return chr(sum)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0 \n    for i in range(len(strr)):\n        sum += ord(strr[i])\n    return sum%26\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return sum([ord(c) for c in strr]) % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def sequence_rec(n,k,m):\n        if n==0:\n            return k\n        if n==1:\n            return m\n        else:\n            return sequence_rec(n-1, m, k+m)\n    if n<0:\n        return \"Error. Input n must be positive.\"\n    return sequence_rec(n,0,1)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # number of elements in sequence \n    length = 10\n    # define pattern array \n    pattern = [0, 1, 0, -1, 0, 1, 1, 1, 0, -1] \n    # list to store the results \n    ans = [] \n    # variable to store the result \n    nth = n \n    # go upto the nth element \n    for i in range(0, nth): \n        # store the pattern element at \n        # the nth position in variable \n        p = pattern[i%length] \n        # append the number to the results \n        ans.append(p) \n    # return the nth element \n    return ans[n-1] \n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return sum([pow(2, i) for i in range(n)])\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return sequence(n-1) + (1 if sequence(n-1) % 2 == 0 else 3)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    def get_sequence(n):\n        '''\n        Write a function to find the nth number in the newman conway sequence.\n        '''\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        else:\n            return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    i = 1\n    while True:\n        if i == n:\n            return i\n        else:\n            yield i\n            i += 1\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n == 3:\n        return 6\n    return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    x = 0\n    y = 1\n    z = 1\n    for i in range(0, n):\n        #print(x, y, z)\n        z = (z + x + y) % 10\n        x = y\n        y = z\n    return z\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    assert n >= 1, \"n must be greater than or equal to 1\"\n    if n == 1: return 2\n    else:\n        return 3 if sequence(n-1) < sequence(n-2) else sequence(n-1) + 3\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    PI = math.pi\n    return round((4*PI*r**2),2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r**2\n    print(surfacearea)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere = (4 * math.pi * r ** 2)\n    return surfacearea_sphere\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume_sphere = (4 * math.pi * r ** 3)/3\n    return volume_sphere\ndef circumcircle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumcircle_circumference = 2 * math.pi * r\n    return circumcircle_circumference\ndef circumcircle_circumference_other(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumcircle_circumference_other = 2 * math.pi * r\n    return circumcircle_circumference_other\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area_triangle = (a*b*c)/2\n    return area_triangle\ndef area_trapezoid(a,b,h):\n    '''\n    Write a function to find the area of a trapezoid.\n    '''\n    area_trapezoid = ((a+b)*h)/2\n    return area_trapezoid\ndef area_parallelogram(a,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area_parallelogram = a*b\n    return area_parallelogram\ndef area_kite(b,h):\n    '''\n    Write a function to find the area of a kite.\n    '''\n    area_kite = (b*h)/2\n    return area_kite\ndef area_rhombus(b,h):\n    '''\n    Write a function to find the area of a rhombus.\n    '''\n    area_rhombus = (b*h)/2\n    return area_rhombus\ndef area_regularpolygon(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon = (n*s)/2\n    return area_regularpolygon\ndef area_regularpolygon_one(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_one = (n*s)/2\n    return area_regularpolygon_one\ndef area_regularpolygon_two(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_two = (n*s)/2\n    return area_regularpolygon_two\ndef area_regularpolygon_three(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_three = (n*s)/2\n    return area_regularpolygon_three\ndef area_regularpolygon_four(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_four = (n*s)/2\n    return area_regularpolygon_four\ndef area_regularpolygon_five(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_five = (n*s)/2\n    return area_regularpolygon_five\ndef area_regularpolygon_six(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_six = (n*s)/2\n    return area_regularpolygon_six\ndef area_regularpolygon_seven(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_seven = (n*s)/2\n    return area_regularpolygon_seven\ndef area_regularpolygon_eight(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_eight = (n*s)/2\n    return area_regularpolygon_eight\ndef area_regularpolygon_nine(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_nine = (n*s)/2\n    return area_regularpolygon_nine\ndef area_regularpolygon_ten(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_ten = (n*s)/2\n    return area_regularpolygon_ten\ndef area_regularpolygon_eleven(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_eleven = (n*s)/2\n    return area_regularpolygon_eleven\ndef area_regularpolygon_twelve(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twelve = (n*s)/2\n    return area_regularpolygon_twelve\ndef area_regularpolygon_thirteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_thirteen = (n*s)/2\n    return area_regularpolygon_thirteen\ndef area_regularpolygon_fourteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_fourteen = (n*s)/2\n    return area_regularpolygon_fourteen\ndef area_regularpolygon_fifteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_fifteen = (n*s)/2\n    return area_regularpolygon_fifteen\ndef area_regularpolygon_sixteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_sixteen = (n*s)/2\n    return area_regularpolygon_sixteen\ndef area_regularpolygon_seventeen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_seventeen = (n*s)/2\n    return area_regularpolygon_seventeen\ndef area_regularpolygon_eighteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_eighteen = (n*s)/2\n    return area_regularpolygon_eighteen\ndef area_regularpolygon_nineteen(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_nineteen = (n*s)/2\n    return area_regularpolygon_nineteen\ndef area_regularpolygon_twenty(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twenty = (n*s)/2\n    return area_regularpolygon_twenty\ndef area_regularpolygon_twentyone(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twentyone = (n*s)/2\n    return area_regularpolygon_twentyone\ndef area_regularpolygon_twentytwo(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''\n    area_regularpolygon_twentytwo = (n*s)/2\n    return area_regularpolygon_twentytwo\ndef area_regularpolygon_twentythree(n,s):\n    '''\n    Write a function to find the area of a regular polygon.\n    '''"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    sa = 4 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s_area = 4 * math.pi * r * r\n    return s_area\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    c_area = 2 * math.pi * r * (r + h)\n    return c_area\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    c_area = math.pi * r * r + math.pi * r * h\n    return c_area\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    c_area = 6 * (l ** 2)\n    return c_area\ndef surfacearea_rectprism(w,h):\n    '''\n    Write a function to find the surface area of a rectangle prism.\n    '''\n    r_area = 2 * w * h\n    return r_area\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v_sphere = (4 * math.pi * r ** 3)/3\n    return v_sphere\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    v_cylinder = math.pi * r ** 2 * h\n    return v_cylinder\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v_cone = 1/3 * math.pi * r ** 2 * h\n    return v_cone\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v_cube = l ** 3\n    return v_cube\ndef volume_rectprism(l,w,h):\n    '''\n    Write a function to find the volume of a rectangle prism.\n    '''\n    v_rectprism = l * w * h\n    return v_rectprism\ndef volume_ellipsoid(r1,r2,r3):\n    '''\n    Write a function to find the volume of an ellipsoid.\n    '''\n    v_ellipsoid = 4 * math.pi * r1 * r2 * r3 / 3\n    return v_ellipsoid\ndef volume_cuboid(l,w,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v_cuboid = l * w * h\n    return v_cuboid\ndef volume_cylinder_with_hole(r,h,d):\n    '''\n    Write a function to find the volume of a cylinder with a hole.\n    '''\n    v_cylinder_with_hole = math.pi * r ** 2 * h - math.pi * r ** 2 * d\n    return v_cylinder_with_hole\ndef volume_cone_with_hole(r,h,d):\n    '''\n    Write a function to find the volume of a cone with a hole.\n    '''\n    v_cone_with_hole = 1/3 * math.pi * r ** 2 * h - 1/3 * math.pi * r ** 2 * d\n    return v_cone_with_hole\ndef volume_squarepyramid(l,w,h):\n    '''\n    Write a function to find the volume of a square pyramid.\n    '''\n    v_squarepyramid = l * w * h / 3\n    return v_squarepyramid\ndef volume_rectprism_with_hole(l,w,h,d):\n    '''\n    Write a function to find the volume of a rectangle prism with a hole.\n    '''\n    v_rectprism_with_hole = (l * w * h - d * l * d) / 3\n    return v_rectprism_with_hole\ndef volume_ellipsoid_with_hole(r1,r2,r3,d):\n    '''\n    Write a function to find the volume of an ellipsoid with a hole.\n    '''\n    v_ellipsoid_with_hole = (4 * math.pi * r1 * r2 * r3 - d * math.pi * r1 * r2 * r3) / 3\n    return v_ellipsoid_with_hole\ndef volume_cuboid_with_hole(l,w,h,d):\n    '''\n    Write a function to find the volume of a cuboid with a hole.\n    '''\n    v_cuboid_with_hole = l * w * h - d * l * w\n    return v_cuboid_with_hole\ndef volume_cylinder_with_rect_hole(r,h,d,w):\n    '''\n    Write a function to find the volume of a cylinder with a rectangular hole.\n    '''\n    v_cylinder_with_rect_hole = math.pi * r ** 2 * h - (w * d)\n    return v_cylinder_with_rect_hole\ndef volume_cone_with_rect_hole(r,h,d,w):\n    '''\n    Write a function to find the volume of a cone with a rectangular hole.\n    '''\n    v_cone_with_rect_hole = 1/3 * math.pi * r ** 2 * h - (w * d)\n    return v_cone_with_rect_hole\ndef volume_squarepyramid_with_rect_hole(l,w,h,d,w):\n    '''\n    Write a function to find the volume of a square pyramid with a rectangular hole.\n    '''\n    v_squarepyramid_with_rect_hole = l * w * h - (w * d)\n    return v_squarepyramid_with_rect_hole\ndef volume_rectprism_with_rect_hole(l,w,h,d,w):\n    '''\n    Write a function to find the volume of a rectangle prism with a rectangular hole.\n    '''\n    v_rectprism_with_rect_hole = (l * w * h - (w * d)) / 3\n    return v_rectprism_with_rect_hole\ndef volume_ellipsoid_with_rect_hole(r1,r2,r3,d,w):\n    '''\n    Write a function to find the volume of an ellipsoid with a rectangular hole.\n    '''\n    v_ellipsoid_with_rect_hole = (4 * math.pi * r1 * r2 * r3 - (w * d)) / 3\n    return v_ellipsoid_with_rect_hole\ndef volume_cuboid_with_rect_hole(l,w,h,d,w):\n    '''\n    Write a function to find the volume of a cuboid with a rectangular hole.\n    '''\n    v_cuboid_with_rect_hole = l * w * h - (w * d)\n    return v_cuboid_with_rect_hole\ndef volume_cylinder_with_circ_hole(r,h,d,r_c):\n    '''\n    Write a function to find the volume of a cylinder with a circular hole.\n    '''\n    v_cylinder_with_circ_hole = math.pi * r ** 2 * h - math.pi * r_c ** 2 * d\n    return v_cylinder_with_circ_hole\ndef volume_cone_with_circ_hole(r,h,d,r_c):\n    '''\n    Write a function to find the volume of a cone with a circular hole.\n    '''\n    v_cone_with_circ_hole = 1/3 * math.pi * r ** 2 * h - 1/3 * math.pi * r_c ** 2 * d\n    return v_cone_with_circ_hole\ndef volume_squarepyramid_with_circ_hole(l,w,h,d,r_c):\n    '''\n    Write a function to find the volume of a square pyramid with a circular hole.\n    '''\n    v_squarepyramid_with_circ_hole = l * w * h - (math.pi * r_c ** 2 * d)\n    return v_squarepyramid_with_circ_hole\ndef volume_rectprism_with_circ_hole(l,w,h"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    if type(r) == int or type(r) == float:\n        SA = 4 * math.pi * (r ** 2)\n        return SA\n    else:\n        return 'The radius must be a number'\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 1\n    # Remember itertools.cycle, you will need it.\n    # return
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 0\n    if n % 2 == 0:\n        num = hexagonal_number(n//2) * hexagonal_number(n//2)\n    else:\n        num = hexagonal_number(n//2 + 1) * hexagonal_number(n//2)\n    return num\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n % 2 == 1:\n        return n * ((3 * n - 1) ** 0.5) / 2\n    else:\n        return (n + 1) * ((3 * n + 1) ** 0.5) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def hexagonal(n):\n        return 1.5 * n * (n+1)\n    \n    if n <= 1:\n        return 1\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return hexagonal_number(n) - hexagonal_number(n - 1)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def find_nth_centered_hexagonal_number(n):\n        if n == 1:\n            return 1\n        return 1.5 * (1 + find_nth_centered_hexagonal_number(n-1))\n    return find_nth_centered_hexagonal_number(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return centered_hexagonal_number_recursive(n, 0)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        result[key] = dict1[key]\n    for key in dict2:\n        if key not in result:\n            result[key] = dict2[key]\n    for key in dict3:\n        if key not in result:\n            result[key] = dict3[key]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_3 = {**dict1,**dict2, **dict3}\n    return dict_3\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    for key in dict3:\n        if key in dict2:\n            dict2[key] += dict3[key]\n        else:\n            dict2[key] = dict3[key]\n    for key in dict2:\n        if key in dict1:\n            dict1[key] += dict2[key]\n        else:\n            dict1[key] = dict2[key]\n    return dict1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = dict1\n    for key,value in dict2.items():\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    for key,value in dict3.items():\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new = dict1.copy()\n    new.update(dict2)\n    new.update(dict3)\n    return new\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return (dict1.update(dict2) and dict3.update(dict1))\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    return dict1.update(dict2)\ndef merge_dictionaries_one(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    #print(type(dict1))\n    #print(dict1)\n    return dict1\ndef merge_dictionaries(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    dict_one = dict1.copy()\n    dict_two = dict2.copy()\n    dict_one.update(dict_two)\n    return dict_one\ndef merge_dictionaries_two_simple(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    return dict1.update(dict2)\ndef merge_dictionaries_one_simple(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    #print(type(dict1))\n    #print(dict1)\n    return dict1\ndef merge_dictionaries_one_simple_one_list(dict1):\n    '''\n    Write a function to merge one dictionary into another.\n    '''\n    #print(type(dict1))\n    #print(dict1)\n    return dict1,dict1.update(dict1)\ndef merge_dictionaries_two_simple_one_list(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    dict_one = dict1.copy()\n    dict_two = dict2.copy()\n    dict_one.update(dict_two)\n    return dict_one,dict_one\ndef merge_dictionaries_two_simple_one_list_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2))\n    #print(dict1,dict2)\n    return dict1,dict1.update(dict2),dict1\ndef merge_dictionaries_three_simple_one_list_one(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2.update(dict3),dict1\ndef merge_dictionaries_three_simple_one_list_two(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1),dict3\ndef merge_dictionaries_three_simple_one_list_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3\ndef merge_dictionaries_three_simple_one_list_four(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3\ndef merge_dictionaries_three_simple_one_list_five(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict1\ndef merge_dictionaries_three_simple_one_list_six(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3 and dict1\ndef merge_dictionaries_three_simple_one_list_seven(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2\ndef merge_dictionaries_three_simple_one_list_eight(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3 and dict2\ndef merge_dictionaries_three_simple_one_list_nine(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2 and dict1\ndef merge_dictionaries_three_simple_one_list_ten(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2 and dict1\ndef merge_dictionaries_three_simple_one_list_eleven(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) or dict3 and dict2 and dict1\ndef merge_dictionaries_three_simple_one_list_twelve(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #print(type(dict1),type(dict2),type(dict3))\n    #print(dict1,dict2, dict3)\n    return dict1,dict2, dict3.update(dict1) and dict3 or dict2 and dict1 and dict2\ndef merge_dictionaries_three_simple_one_list"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result = {}\n    for i in dict1:\n        result[i] = dict1[i]\n    for j in dict2:\n        result[j] = dict2[j]\n    for k in dict3:\n        result[k] = dict3[k]\n    return result\n    \ndict1 = {'a': 10, 'b': 20, 'c': 30, 'd': 40}\ndict2 = {'a': 6, 'b': 15, 'c': 35, 'd': 40}\ndict3 = {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = {**dict1, **dict2, **dict3}\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    new_dict.update(dict3)\n    return new_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = collections.Counter(list1)\n    print(dict1)\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return dict((k,list1.count(k)) for k in set(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    freq_list = freq.most_common()\n    return dict(freq_list)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d={}\n    for x in list1:\n        if x in d:\n            d[x]+=1\n        else:\n            d[x]=1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        dict1[item] = dict1.get(item, 0) + 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1 = {}\n    for item in list1:\n        if item in dict1:\n            dict1[item] += 1\n        else:\n            dict1[item] = 1\n    return dict1\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if (item in freq):\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dict=collections.Counter(list1)\n    return frequency_dict\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # First, we find the closest lower number\n    while N>0:\n        N = N - 1\n    return N\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # TODO: iterate through all the numbers from 0 to N+1\n    # Check if the number in the list is bigger than N\n    # If so, check if the number after is smaller or equal to N\n    # If so, check if the distance is closer to the N or the number after\n    # If so, save it\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        N = N * (-1)\n    return closest_num_helper(N, 0, N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_number(n):\n        n, N = str(n), str(N)\n        maxlen = min(len(n), len(N))\n        for i in range(maxlen):\n            if n[i] < N[i]:\n                return int(n[:i] + N[i])\n        return int(n + N[-1])\n    return closest_number(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_num_helper(n, cache):\n        if n in cache:\n            return cache[n]\n        if n - 1 in cache:\n            cache[n] = cache[n - 1] + 1\n        elif n + 1 in cache:\n            cache[n] = cache[n + 1] + 1\n        else:\n            cache[n] = n\n        return cache[n]\n    \n    cache = {}\n    return closest_num_helper(N, cache)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest(n):\n        return closest_num(n - 1) if (n - 1) > 0 else 0\n    return closest(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # import math\n    # return int(math.floor((N-1)/2)*2)\n    # solution 3\n    l, r = 0, N\n    ans = 0\n    while l <= r:\n        mid = (l+r)//2\n        if (mid * (mid+1))//2 > N:\n            r = mid - 1\n            ans = mid\n        else:\n            l = mid + 1\n    return ans\n    # solution 4\n    l, r = 0, N\n    ans = 0\n    while l <= r:\n        mid = (l+r)//2\n        if mid * (mid+1)//2 <= N:\n            l = mid + 1\n            ans = mid\n        else:\n            r = mid - 1\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return closest(N, N+1)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # create list of nums from 1 to n\n    # create list of nums from n+1 to n*2\n    # find closest number in list 1 and list 2\n    # return closest number\n    if N <= 1:\n        return None\n    nums1 = [x for x in range(1, N + 1)]\n    nums2 = [x for x in range(N + 1, N * 2 + 1)]\n    return min(nums1, nums2, key=lambda x: abs(x - N))\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return closest_num_helper(N, 0, len(str(N)) - 1)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    len_max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > len_max:\n            len_max = len(list1[i])\n    print(len_max)\n    return len_max\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = [word for word in list1 if word.strip()]\n    maxlen = 0\n    for word in list1:\n        if len(word) > maxlen:\n            maxlen = len(word)\n    return maxlen\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    print(\"The longest word in the list is : \", max(list1, key=len))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    count=0\n    l=[]\n    for i in list1:\n        l.append(len(i))\n    return max(l)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1=[\"hello\", \"world\", \"yes\", \"up\", \"not\"]\n    word_length=[len(item) for item in list1]\n    return word_length\n    \nprint(len_log(list1))\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=[]\n    for i in list1:\n        a.append(len(i))\n    return max(a)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = ['hello', 'world', 'python', 'example']\n    len_word = []\n    for word in list1:\n        len_word.append(len(word))\n    return len_word\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = \"Hello world\"\n    max_len = 0\n    for i in list1:\n        if len(i)>max_len:\n            max_len = len(i)\n            word = i\n    print(word)\n    print(\"The length of the longest word is {}\".format(max_len))\n    \ndef unique(list1):\n    '''\n    Write a python function to find unique elements in a list.\n    '''\n    list1 = [3,4,4,5,6,7,7,8,9,0,1,3,4,3,6,7]\n    unique = []\n    for i in list1:\n        if i not in unique:\n            unique.append(i)\n    print(unique)\n    \ndef multiply(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    a = 3\n    b = 5\n    mul = a*b\n    print(mul)\n    \ndef list_functions():\n    '''\n    Write a python function to find the sum of all numbers stored in a list.\n    '''\n    list1 = [1,2,3,4,5,6,7]\n    print(sum(list1))\n    \ndef palindrome(str1):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    str1 = \"malayalam\"\n    rev_str = \"\"\n    for i in str1:\n        rev_str = i+rev_str\n    if str1==rev_str:\n        print(\"The string is a palindrome!\")\n    else:\n        print(\"The string is not a palindrome!\")\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1 = input(\"Enter the list : \")\n    list1 = list1.split(\" \")\n    max = 0\n    for i in list1:\n        if len(i) >= max:\n            max = len(i)\n    print(max)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # ToDo\n    \n    return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Method 1: using a loop\n    for i in range(0, len(str1)-len(sub_str)+1):\n        if sub_str == str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = []\n    for i in range(0,len(str1) - len(sub_str) + 1):\n        if str1[i] == sub_str[0]:\n            flag = 1\n            for j in range(1, len(sub_str)):\n                if str1[i+j]!= sub_str[j]:\n                    flag = 0\n                    break\n            if flag == 1:\n                sub_str_list.append(i)\n    return sub_str_list\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return str1.find(sub_str)\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1.find(sub_str) == -1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return i\n    return -1\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    result = []\n    for i in range(len(str1)):\n        if str1[i:i+len(sub_str)] == sub_str:\n            result.append(i)\n    return result\n    "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in s for s in str1)\n    # loop over every str in list\n    # if str in str1 return true\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # function which returns 1 if n is\n    # an undulating number.\n    \n    # return true if n is odd and n is \n    # divisible by 3 and if n is even\n    # and n is divisible by 5.\n    return ((n % 2 == 1) and (n % 3 == 0) or (n % 5 == 0))\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    for i in range(2, n): \n        if (n % i == 0): \n            return False\n    return True\n  \ndef count_prime_factors(n): \n  \n    i = 2\n    count = 0\n    while(i * i <= n): \n        if (n % i == 0): \n            if (n / i == i): \n                count = count + 1\n            else: \n                count = count + 2\n        i = i + 1\n    return count \n  \ndef check_number(n): \n  \n    if (n < 2): \n        return 0\n    return 1 if (is_undulating(n) and \n                                    count_prime_factors(n) == 2) else 0\n  \ndef count_prime_factors_func(n): \n    return count_prime_factors(n) \n  \ndef main(): \n  \n    n = 600851475143\n    print(check_number(n)) \n  \n    print(check_number(n)) \n  \n    for i in range(1, n): \n        if (check_number(i) == 1): \n            print(i, end = \" \") \n  \nif __name__ == \"__main__\": \n    main() "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n in [4, 7, 9, 11, 13, 14, 17, 18, 19, 20, 22, 25]\n    #pass\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return n > 0 and (n ^ (n + 1)) & (n ^ (n - 1)) == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    str_num = str(n)\n    previous_digit = int(str_num[0])\n    has_same_digit_before = False\n    for i in range(1, len(str_num)):\n        digit = int(str_num[i])\n        if (digit < previous_digit):\n            return False\n        if (digit == previous_digit):\n            has_same_digit_before = True\n        previous_digit = digit\n    return has_same_digit_before\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 0:\n        return False\n    if n == 1:\n        return False\n    i = 1\n    while i * i <= n: \n        if (n % i == 0): \n            if (n / i == i): \n                return True\n            else: \n                return False\n        i = i + 1\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    lst = list(str(n))\n    for i in range(len(lst)):\n        if i == 0:\n            if lst[i]!= lst[i + 1]:\n                return False\n        else:\n            if lst[i]!= lst[i - 1]:\n                return False\n    return True\n    \ndef is_undulating_2(n):\n    lst = list(str(n))\n    first = lst[0]\n    prev = first\n    for i in range(1, len(lst)):\n        if prev!= lst[i]:\n            if i == 1 or lst[i]!= lst[i - 1]:\n                return False\n            else:\n                prev = lst[i]\n    return True\n            "
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    t = str(n)\n    prev_sum = 0\n    curr_sum = 0\n    for i in range(0,len(t)):\n        prev_sum = curr_sum\n        curr_sum += int(t[i])\n        if prev_sum == curr_sum:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    def is_undulating_helper(n, i, even_start, odd_start): \n        if i % 2 == 0: \n            if n % 2!= even_start: \n                return False\n        else: \n            if n % 2!= odd_start: \n                return False\n        if i == 0: \n            even_start = n % 2\n            odd_start = even_start\n        else: \n            even_start = odd_start\n            odd_start = n % 2\n        return True\n    return is_undulating_helper(n, 0, 0, 0)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #Check if the number is a multiple of 4\n    if(n % 4 == 0):\n        return False\n    #Check if the number is a multiple of 9\n    elif(n % 9 == 0):\n        return False\n    #Check if the number is a multiple of 16\n    elif(n % 16 == 0):\n        return False\n    #If none of these conditions are met, return true\n    else:\n        return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    try:\n        return a**b\n    except TypeError:\n        return \"B is not an integer\"\n    except ValueError:\n        return \"a is not an integer\"\n    \nprint(power(2,3))\nprint(power(2,3.5))\nprint(power(2,'x'))\nprint(power(2,3+5j))\nprint(power('a',3))\nprint(power(2,True))\nprint(power(2,-3)"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    elif b == -1:\n        return 1/a\n    elif b < 0:\n        return 1/power(a,-b)\n    else:\n        return power(a*a, b//2)*power(a,b-b//2)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 1:\n        return a\n    elif b == 0:\n        return 1\n    else:\n        return a * power(a, b - 1)\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    # base case\n    if b == 0:\n        return 1\n    # recursive case\n    else:\n        return a * power(a, b-1)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\ndef index_greater_than(test_list, x):\n    '''\n    Given a list of tuples, write a function that returns a list of the indexes of the tuple values which are greater than the provided argument.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        if test_list[i][1] > x:\n            new_list.append(i)\n    return new_list\ndef count_evens(nums):\n    '''\n    Write a function called count_evens that takes a list as a parameter and returns the number of even integers in the list.\n    '''\n    count = 0\n    for i in nums:\n        if i % 2 == 0:\n            count += 1\n    return count\ndef sum_floats(nums):\n    '''\n    Write a function called sum_floats that takes a list as a parameter and returns the sum of all the floats in the list.\n    '''\n    total = 0\n    for i in nums:\n        if type(i) == float:\n            total += i\n    return total\ndef sum_floats_2(nums):\n    '''\n    Write a function called sum_floats_2 that takes a list as a parameter and returns the sum of all the floats in the list.\n    '''\n    return sum(x for x in nums if type(x) == float)\ndef min_max_keys(d):\n    '''\n    Given a dictionary, write a function that returns a list of the keys corresponding to the minimum and maximum values in the dictionary.\n    '''\n    test_list = []\n    for i in d:\n        test_list.append(i)\n    test_list.sort()\n    return [test_list[0], test_list[-1]]\ndef min_max_keys_2(d):\n    '''\n    Given a dictionary, write a function that returns a list of the keys corresponding to the minimum and maximum values in the dictionary.\n    '''\n    return [min(d, key=d.get), max(d, key=d.get)]\ndef same_values(d):\n    '''\n    Given a list of lists, write a function that returns a list of all the values that are the same across each of the inner lists.\n    '''\n    new_list = []\n    for i in d:\n        if i[0] == i[1] and i[1] == i[2]:\n            new_list.append(i[0])\n    return new_list\ndef same_values_2(d):\n    '''\n    Given a list of lists, write a function that returns a list of all the values that are the same across each of the inner lists.\n    '''\n    return list(set(val for lst in d for val in lst))\ndef dict_from_list(some_list):\n    '''\n    Write a function called dict_from_list that takes a list of lists as a parameter and returns a dictionary where the key is the first value in each inner list and the value is the concatenation of the entire inner list.\n    For example, if the input is [[1, 2, 3], [4, 5, 6], [7, 8, 9]], the output should be {1: '1234', 2: '1256', 3: '1278', 4: '4567', 5: '4568', 6: '4579', 7: '8789', 8: '8789', 9: '8789'}\n    '''\n    new_dict = {}\n    for i in some_list:\n        new_dict[i[0]] = ''.join(str(x) for x in i)\n    return new_dict\ndef dict_from_list_2(some_list):\n    '''\n    Write a function called dict_from_list that takes a list of lists as a parameter and returns a dictionary where the key is the first value in each inner list and the value is the concatenation of the entire inner list.\n    For example, if the input is [[1, 2, 3], [4, 5, 6], [7, 8, 9]], the output should be {1: '1234', 2: '1256', 3: '1278', 4: '4567', 5: '4568', 6: '4579', 7: '8789', 8: '8789', 9: '8789'}\n    '''\n    return dict(zip([x[0] for x in some_list], [''.join(str(y) for y in x) for x in some_list]))\ndef count_matches(d, k):\n    '''\n    Write a function called count_matches that takes a dictionary and an integer as parameters. The function should return the number of occurrences of the integer in the dictionary.\n    '''\n    return d.count(k)\ndef biggest_difference(d):\n    '''\n    Write a function called biggest_difference that takes a list of numbers as a parameter and returns the difference between the largest and smallest numbers in the list.\n    '''\n    return max(d) - min(d)\ndef count_odds(d):\n    '''\n    Write a function called count_odds that takes a dictionary as a parameter and returns the number of odd numbers in the dictionary.\n    '''\n    total = 0\n    for i in d:\n        if i % 2!= 0:\n            total += 1\n    return total\ndef even_keys(d):\n    '''\n    Write a function called even_keys that takes a dictionary as a parameter and returns a new dictionary containing only the even keys from the original dictionary.\n    '''\n    new_dict = {}\n    for key, value in d.items():\n        if key % 2 == 0:\n            new_dict[key] = value\n    return new_dict\ndef dict_to_list(d):\n    '''\n    Write a function called dict_to_list that takes a dictionary as a parameter and returns a list of tuples, where each tuple is a key-value pair.\n    '''\n    return list(d.items())\ndef dict_to_list_2(d):\n    '''\n    Write a function called dict_to_list that takes a dictionary as a parameter and returns a list of tuples, where each tuple is a key-value pair.\n    '''\n    return list(map(lambda x: (x[0], x[1]), d.items()))\ndef has_duplicates(d):\n    '''\n    Write a function called has_duplicates that takes a dictionary as a parameter and returns True if the dictionary has duplicate keys, and False otherwise.\n    '''\n    return len(d)!= len(set(d.keys()))\ndef has_duplicates_2(d):\n    '''\n    Write a function called has_duplicates that takes a dictionary as a parameter and returns True if the dictionary has duplicate keys, and False otherwise.\n    '''\n    return len(d)!= len(set(d.values()))\ndef num_dict_to_dict(d):\n    '''\n    Write a function called num_dict_to_dict that takes a dictionary of dictionaries as a parameter and returns a new dictionary that has the same keys as the original dictionary, but the values of the new dictionary are lists that contain all the values of the original dictionaries that have the same key.\n    For example, if the input dictionary is {'a': {1, 2}, 'b': {1, 2, 3}} then the output should be {'a': [1, 2], 'b': [1, 2, 3]}.\n    '''\n    new_dict = {}\n    for i in d:\n        new_dict[i] = list(set(d[i]))\n    return new_dict\ndef num_dict_to_dict_2(d):\n    '''\n    Write a function called num_dict_to_dict that takes a dictionary of dictionaries as a parameter and returns a new dictionary that has the same keys as the original dictionary, but the values of the new dictionary are lists that contain all the values of the original dictionaries that have the same key.\n    For example, if the input dictionary is {'a': {1, 2}, 'b': {1, 2, 3}} then the output should be {'a': [1, 2], 'b': [1, 2, 3]}.\n    '''\n    return {k: list(d[k]) for k in d}\ndef merge_dict("
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[minimum_index][1]:\n            minimum_index = i\n    return minimum_index\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #sort the list\n    test_list.sort(key=itemgetter(1))\n    #print(test_list)\n    #return the first index of the tuple with the smallest value\n    return test_list[0][0]\n    \ndef sum_of_digits(digit_string):\n    '''\n    Write a function that takes a string containing only digits, and returns the sum of the digits.\n    '''\n    #digit string\n    total = 0\n    #for each element in the string\n    for element in digit_string:\n        #convert it to an int\n        total = total + int(element)\n    return total\n    \ndef generate_hashtag(s):\n    '''\n    Write a function that takes a string and returns a hashtag version of that string.\n    '''\n    #remove all spaces\n    s = s.replace(' ','')\n    #capitalize the first character\n    s = s.capitalize()\n    #if the length of the string is less than 140, then return the hashtag version\n    if len(s) <= 140:\n        return s\n    #otherwise, split the string into words, remove all spaces, and sort the words\n    words = s.split(' ')\n    words = [word.capitalize() for word in words]\n    words = sorted(words)\n    #join the list of words into a string\n    words = ''.join(words)\n    #add a hashtag to the front\n    return '#'+words\n    \ndef count_sentence_types(sentences):\n    '''\n    Write a function that takes a list of sentences and returns a dictionary with the counts for various sentence types.\n    '''\n    #set up the dictionary\n    sentence_types = {'present simple':0, 'present progressive':0, 'past simple':0, 'past progressive':0, 'future simple':0, 'future simple and continuous':0, 'past continuous':0, 'future continuous':0, 'present continuous':0}\n    #for each sentence in the list of sentences\n    for sentence in sentences:\n        #split the sentence into words\n        words = sentence.split(' ')\n        #if the sentence is of the present simple type, increment the count\n        if 'present simple' in sentence:\n            sentence_types['present simple'] = sentence_types['present simple'] + 1\n        #if the sentence is of the present progressive type, increment the count\n        if 'present progressive' in sentence:\n            sentence_types['present progressive'] = sentence_types['present progressive'] + 1\n        #if the sentence is of the past simple type, increment the count\n        if 'past simple' in sentence:\n            sentence_types['past simple'] = sentence_types['past simple'] + 1\n        #if the sentence is of the past progressive type, increment the count\n        if 'past progressive' in sentence:\n            sentence_types['past progressive'] = sentence_types['past progressive'] + 1\n        #if the sentence is of the future simple type, increment the count\n        if 'future simple' in sentence:\n            sentence_types['future simple'] = sentence_types['future simple'] + 1\n        #if the sentence is of the future simple and continuous type, increment the count\n        if 'future simple and continuous' in sentence:\n            sentence_types['future simple and continuous'] = sentence_types['future simple and continuous'] + 1\n        #if the sentence is of the past continuous type, increment the count\n        if 'past continuous' in sentence:\n            sentence_types['past continuous'] = sentence_types['past continuous'] + 1\n        #if the sentence is of the future continuous type, increment the count\n        if 'future continuous' in sentence:\n            sentence_types['future continuous'] = sentence_types['future continuous'] + 1\n        #if the sentence is of the present continuous type, increment the count\n        if 'present continuous' in sentence:\n            sentence_types['present continuous'] = sentence_types['present continuous'] + 1\n    #return the dictionary\n    return sentence_types\n    \ndef remove_duplicate_words(s):\n    '''\n    Write a function that takes a string and returns the string with the duplicate words removed.\n    '''\n    #split the string into words\n    words = s.split(' ')\n    #set up a new list to store the words\n    new_words = []\n    #for each word in the list of words\n    for word in words:\n        #if the word is already in the new list, do nothing\n        if word in new_words:\n            continue\n        #otherwise, add the word to the new list\n        else:\n            new_words.append(word)\n    #join the list of words into a string\n    new_s =''.join(new_words)\n    #return the string\n    return new_s\n    \ndef count_words(s):\n    '''\n    Write a function that takes a string and returns a dictionary with the counts of each word in the string.\n    '''\n    #split the string into words\n    words = s.split(' ')\n    #set up the dictionary\n    words_dict = {}\n    #for each word in the list of words\n    for word in words:\n        #if the word is already in the dictionary, increment the count\n        if word in words_dict:\n            words_dict[word] = words_dict[word] + 1\n        #otherwise, add the word to the dictionary\n        else:\n            words_dict[word] = 1\n    #return the dictionary\n    return words_dict\n    \ndef generate_keyword_dict(s):\n    '''\n    Write a function that takes a string and returns a dictionary with the counts of each keyword in the string.\n    '''\n    #split the string into words\n    words = s.split(' ')\n    #set up the dictionary\n    words_dict = {}\n    #for each word in the list of words\n    for word in words:\n        #if the word is already in the dictionary, increment the count\n        if word in words_dict:\n            words_dict[word] = words_dict[word] + 1\n        #otherwise, add the word to the dictionary\n        else:\n            words_dict[word] = 1\n    #sort the dictionary by the keys\n    words_dict = sorted(words_dict.items(), key=lambda x:x[0])\n    #return the dictionary\n    return words_dict\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return itemgetter(0)(min(test_list,key=itemgetter(1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][1]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum = min(test_list, key=itemgetter(1))[1]\n    return minimum\n    \ndef matrix_sum(matrix):\n    '''\n    Given a 2D matrix, return the sum of all the elements within the matrix.\n    '''\n    sum = 0\n    for row in matrix:\n        for column in row:\n            sum += column\n    return sum\n    \ndef find_missing_number(test_list):\n    '''\n    Given a list of numbers from 1-n, find the missing number.\n    '''\n    l = []\n    for i in range(1, len(test_list) + 1):\n        l.append(i)\n    for number in test_list:\n        if number not in l:\n            return number\n    return \"None\"\n    \ndef matrix_transpose(matrix):\n    '''\n    Given a 2D matrix, return the transpose of the matrix.\n    '''\n    new_matrix = []\n    for i in range(len(matrix[0])):\n        new_matrix.append([])\n        for row in matrix:\n            new_matrix[i].append(row[i])\n    return new_matrix\n    \ndef matrix_multiply(matrix_1, matrix_2):\n    '''\n    Given 2 matrices, determine if they can be multiplied.\n    '''\n    if len(matrix_1[0])!= len(matrix_2):\n        return False\n    \n    return [[sum(a*b for a, b in zip(row_1, column_2)) for column_2 in zip(*matrix_2)] for row_1 in matrix_1]\n    \ndef delete_first_char(test_string):\n    '''\n    Given a string, return a new string with the first character deleted.\n    '''\n    return test_string[1:]\n    \ndef sum_of_all_odd_numbers(test_list):\n    '''\n    Given a list of numbers, return the sum of all odd numbers in the list.\n    '''\n    sum = 0\n    for number in test_list:\n        if number % 2!= 0:\n            sum += number\n    return sum\n    \ndef get_syllable_count(test_string):\n    '''\n    Given a string, return the number of syllables.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # initialize variables\n    count = 0\n    last_char = None\n    \n    for char in test_string:\n        if char in vowels:\n            if last_char in vowels:\n                count += 1\n            last_char = char\n    return count\n    \ndef search_a_2D_matrix(matrix, target):\n    '''\n    Given a 2D matrix, return a function that searches the matrix for the target value.\n    '''\n    for row in matrix:\n        for column in row:\n            if target == column:\n                return True\n    return False\n    \ndef get_unique_list(test_list):\n    '''\n    Given a list, return a new list that contains only the unique values in the original list.\n    '''\n    unique_list = []\n    for value in test_list:\n        if value not in unique_list:\n            unique_list.append(value)\n    return unique_list\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    if(len(test_list) == 0):\n        return \"empty list\"\n    else:\n        return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return (sorted(test_list, key = itemgetter(1))[0])\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    length = 0\n    for i in lst:\n        if(len(i)<length or length ==0):\n            length = len(i)\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    #Define a function for minimum length\n    def Min_Length(x):\n        min_len = 0\n        for i in x:\n            if len(i) < min_len:\n                min_len = len(i)\n        return min_len\n        \n    #Run the function    \n    lst_len = Min_Length(lst)\n    return lst_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    def find_min_length(lst):\n        return min([len(x) for x in lst])\n    return find_min_length(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(map(len, lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    minlen = None\n    for i in lst:\n        if minlen == None:\n            minlen = len(i)\n        if minlen>len(i):\n            minlen = len(i)\n    return minlen\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if not lst:\n        return 0\n    return 1 + min(Find_Min_Length(sub_lst) for sub_lst in lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest = None\n    for l in lst:\n        if smallest == None:\n            smallest = len(l)\n        elif smallest > len(l):\n            smallest = len(l)\n    return smallest\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    for lst in lst_of_lst:\n        if len(lst) == min_len:\n            print(lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n    \ndef Find_Min_Length2(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = len(lst[0])\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=len(lst[0])\n    for i in range(1,len(lst)):\n        if len(lst[i]) < min_len:\n            min_len=len(lst[i])\n    return min_len\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    l = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    if n < 2:\n        return 1\n    else:\n        div_count = 1\n        for i in range(2,n+1):\n            if n%i == 0:\n                div_count += 1\n        return div_count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            count += 1\n    return count\n    "
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    \n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    assert n >= 0\n    # add logic here\n    divisor_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    count = 0\n    for i in range(1, n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if(n==1):\n        return 1\n    else:\n        divisors = 1\n        # Count all divisors upto the square root of n\n        i = 1\n        while i<n:\n            if n%i == 0:\n                divisors += 1\n            i += 1\n        return divisors\n        \nprint(divisor(1))\nprint(divisor(2))\nprint(divisor(3))\nprint(divisor(4))\nprint(divisor(5))\nprint(divisor(6))\nprint(divisor(7))\nprint(divisor(8))\nprint(divisor(9))\nprint(divisor(10))\nprint(divisor(12))\nprint(divisor(15))\nprint(divisor(16))\nprint(divisor(18))\nprint(divisor(19))\nprint(divisor(20))\nprint(divisor(25))\nprint(divisor(28))\nprint(divisor(30))\nprint(divisor(31))\nprint(divisor(32))\nprint(divisor(36))\nprint(divisor(40))\nprint(divisor(42))\nprint(divisor(45))\nprint(divisor(48))\nprint(divisor(49))\nprint(divisor(50))\nprint(divisor(51))\nprint(divisor(52))\nprint(divisor(53))\nprint(divisor(54))\nprint(divisor(55))\nprint(divisor(56))\nprint(divisor(57))\nprint(divisor(58))\nprint(divisor(59))\nprint(divisor(60))\nprint(divisor(61))\nprint(divisor(62))\nprint(divisor(63))\nprint(divisor(64))\nprint(divisor(65))\nprint(divisor(66))\nprint(divisor(67))\nprint(divisor(68))\nprint(divisor(69))\nprint(divisor(70))\nprint(divisor(71))\nprint(divisor(72))\nprint(divisor(73))\nprint(divisor(74))\nprint(divisor(75))\nprint(divisor(76))\nprint(divisor(77))\nprint(divisor(78))\nprint(divisor(79))\nprint(divisor(80))\nprint(divisor(81))\nprint(divisor(82))\nprint(divisor(83))\nprint(divisor(84))\nprint(divisor(85))\nprint(divisor(86))\nprint(divisor(87))\nprint(divisor(88))\nprint(divisor(89))\nprint(divisor(90))\nprint(divisor(91))\nprint(divisor(92))\nprint(divisor(93))\nprint(divisor(94))\nprint(divisor(95))\nprint(divisor(96))\nprint(divisor(97))\nprint(divisor(98))\nprint(divisor(99))\nprint(divisor(100))\nprint(divisor(101))\nprint(divisor(102))\nprint(divisor(103))\nprint(divisor(104))\nprint(divisor(105))\nprint(divisor(106))\nprint(divisor(107))\nprint(divisor(108))\nprint(divisor(109))\nprint(divisor(110))\nprint(divisor(111))\nprint(divisor(112))\nprint(divisor(113))\nprint(divisor(114))\nprint(divisor(115))\nprint(divisor(116))\nprint(divisor(117))\nprint(divisor(118))\nprint(divisor(119))\nprint(divisor(120))\nprint(divisor(121))\nprint(divisor(122))\nprint(divisor(123))\nprint(divisor(124))\nprint(divisor(125))\nprint(divisor(126))\nprint(divisor(127))\nprint(divisor(128))\nprint(divisor(129))\nprint(divisor(130))\nprint(divisor(131))\nprint(divisor(132))\nprint(divisor(133))\nprint(divisor(134))\nprint(divisor(135))\nprint(divisor(136))\nprint(divisor(137))\nprint(divisor(138))\nprint(divisor(139))\nprint(divisor(140))\nprint(divisor(141))\nprint(divisor(142))\nprint(divisor(143))\nprint(divisor(144))\nprint(divisor(145))\nprint(divisor(146))\nprint(divisor(147))\nprint(divisor(148))\nprint(divisor(149))\nprint(divisor(150))\nprint(divisor(151))\nprint(divisor(152))\nprint(divisor(153))\nprint(divisor(154))\nprint(divisor(155))\nprint(divisor(156))\nprint(divisor(157))\nprint(divisor(158))\nprint(divisor(159))\nprint(divisor(160))\nprint(divisor(161))\nprint(divisor(162))\nprint(divisor(163))\nprint(divisor(164))\nprint(divisor(165))\nprint(divisor(166))\nprint(divisor(167))\nprint(divisor(168))\nprint(divisor(169))\nprint(divisor(170))\nprint(divisor(171))\nprint(divisor(172))\nprint(divisor(173))\nprint(divisor(174))\nprint(divisor(175))\nprint(divisor(176))\nprint(divisor(177))\nprint(divisor(178))\nprint(divisor(179))\nprint(divisor(180))\nprint(divisor(181))\nprint(divisor(182))\nprint(divisor(183))\nprint(divisor(184))\nprint(divisor(185))\nprint(divisor(186))\nprint(divisor(187))\nprint(divisor(188))\nprint(divisor(189))\nprint(divisor(190))\nprint(divisor(191))\nprint(divisor(192))\nprint(divisor(193))\nprint(divisor(194))\nprint(divisor(195))\nprint(divisor(196))\nprint(divisor(197))\nprint(divisor(198))\nprint(divisor(199))\nprint(divisor(200))\nprint(divisor(201))\nprint(divisor(202))\nprint(divisor(203))\nprint(divisor(204))\nprint(divisor(205))\nprint(divisor(206))\nprint(divisor(207))\nprint(divisor(208))\nprint(divisor(209))\nprint(divisor(210))\nprint(divisor(211))\nprint(divisor(212))\nprint(divisor(213))\nprint(divisor(214))\nprint(divisor(215))\nprint(divisor(216))\nprint(divisor(217))\nprint(divisor(218))\nprint(divisor(219))\nprint(divisor(220))\nprint(divisor(221))\nprint(divisor(222))\nprint(divisor(223))\nprint(divisor(224))\nprint(divisor(225))\nprint(divisor(226))\nprint(divisor(227))\nprint(divisor(228))\nprint(divisor(229))\nprint(divisor(230))\nprint(divisor(231))\nprint(divisor(232))\nprint(divisor(233))\nprint(divisor(234))\nprint(divisor(235))\nprint(divisor(236))\nprint(divisor(237)"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    import math\n    count = 0\n    if n < 0:\n        n = n * (-1)\n    if n == 0:\n        return 0\n    else:\n        for i in range(1,n+1):\n            if n % i == 0:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flat_list = [item for sublist in list1 for item in sublist]\n    \n    # Initialize dictionary\n    d = {}\n    for item in flat_list:\n        if item in d:\n            d[item] += 1\n        else:\n            d[item] = 1\n            \n    return d\n    \nprint(frequency_lists([[1,2],[3],[1,4,5]]))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for i in list1:\n        if i in dict1:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    print(dict1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # YOUR CODE HERE\n    dict1 = {}\n    for each_item in list1:\n        if each_item in dict1:\n            dict1[each_item] += 1\n        else:\n            dict1[each_item] = 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    list2 = []\n    for i in list1:\n        list2.extend(i)\n    frequency_dict = {}\n    for i in list2:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for element in list1:\n        if element not in freq:\n            freq[element] = 0\n        freq[element] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        freq[item] = freq.get(item,0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for ele in list1:\n        if ele in freq_dict:\n            freq_dict[ele] += 1\n        else:\n            freq_dict[ele] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # list_set = set(list1)\n    dict1 = {}\n    for i in range(len(list1)):\n        count = list1.count(list1[i])\n        if list1[i] not in dict1:\n            dict1[list1[i]] = count\n    return dict1\n    \n    \nprint(frequency_lists([[3, 6, 6, 2, 1], [4, 5, 5, 4, 4], [5, 4, 4, 3, 3]]))\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = dict()\n    for elem in list1:\n        if elem in freq_dict.keys():\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    numbers = [1, 2, 3, 4]\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply *= num\n    return multiply/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total = total * num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for num in numbers:\n        multiply = multiply * num\n    print(multiply/len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return reduce(lambda x, y: x*y, numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_list = 1\n    for i in numbers:\n        multiplied_list *= i\n    return multiplied_list / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    def decimal_to_binary_rec(n,s):\n        if n == 0:\n            return s\n        s = str(n % 2) + s\n        return decimal_to_binary_rec(n//2,s)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n).replace(\"0b\",\"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%2 + 10*decimal_to_binary(int(n/2))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    n = int(n)\n    if n<0:\n        return \"-\"+decimal_to_binary(-n)\n    else:\n        decimal_to_binary(n)\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n<0:\n        return \"Please enter positive number\"\n    if n==0:\n        return 0\n    else:\n        return bin(n).replace(\"0b\", \"\")\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = []\n    # Start with the last digit\n    while n > 0: \n        binary.append(str(n % 2))\n        n = n // 2\n    # Reverse the order of the binary string\n    binary.reverse()\n    # Join the list of binary digits\n    binary = ''.join(binary)\n    return binary\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0:\n        print(\"Incorrect input\")\n    else:\n        l = list()\n        while n > 0:\n            r = n % 2\n            n = n // 2\n            l.append(r)\n        l.reverse()\n        l = [str(i) for i in l]\n        return ''.join(l)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n    return decimal_to_binary(n // 2) + str(n % 2)\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if len(num)==1:\n        return num\n    rev = num[::-1]\n    if num==rev:\n        return num[:-1]+str(int(num[-1])+1)\n    elif int(rev[0])-int(num[0])>1:\n        return rev[0]+str(int(rev[0])-1) + num[1:]\n    elif int(rev[0])-int(num[0])==1:\n        return num[:-1] + str(int(rev[0])-1) + num[1:]\n    else:\n        for i in range(1,len(rev)):\n            if int(rev[0:i])>int(num[0:i]):\n                return num[:-1] + rev[0:i-1] + str(int(rev[0:i-1])-1) + num[i:]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str)):\n        if num_str[0:i][::-1] == num_str[0:i]:\n            return int(num_str[0:i] + num_str[i] + num_str[i:] + num_str[i:][::-1])\n    return -1\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    num_str = str(num)\n    if len(num_str) == 1:\n        return int(num_str)\n    if len(num_str) == 2:\n        if int(num_str) < 10:\n            if int(num_str) % 2 == 0:\n                return int(num_str) + 1\n            else:\n                return int(num_str) + 2\n        else:\n            if int(num_str) % 2 == 0:\n                return int(num_str) + 10\n            else:\n                return int(num_str) + 20\n    elif len(num_str) > 2:\n        num_list = list(num_str)\n        if num_list[0] == num_list[-1]:\n            num_list.pop()\n            num_list.pop(0)\n            return int(''.join(num_list))\n        else:\n            if num_list[-1] < num_list[0]:\n                num_list[0] = num_list[0] + 1\n                return int(''.join(num_list))\n            else:\n                num_list.pop()\n                num_list.insert(0, '9')\n                return int(''.join(num_list))\n    else:\n        raise Exception('I should not have gotten here.')\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num[0] == '0':\n        return None\n    if len(num) == 1:\n        return int(num + num[::-1])\n    if len(num) == 2:\n        if int(num + num[::-1]) > num * 2:\n            return int(num + num[::-1])\n        else:\n            return int(num * 2)\n    # from here on, num is at least 3 digits\n    digit_boundary = None\n    while not digit_boundary:\n        # searching for the first index where we are bound by the two most significant digits\n        for i in reversed(range(1, len(num)-1)):\n            if int(num[i-1] + num[i] + num[i+1]) > int(num[i-1] + num[i] + num[i+1] + num[i+2]):\n                digit_boundary = i\n                break\n        # if we hit the last index where we are bound by the two most significant digits\n        if not digit_boundary:\n            num = '9' + num\n    num = num[:digit_boundary] + num[digit_boundary:]\n    return int(num + num[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert to string\n    num_string = str(num)\n    # reverse string\n    num_string_rev = num_string[::-1]\n    # convert to int\n    num_int = int(num_string_rev)\n    # if already palindrome, return original\n    if num == num_int:\n        return num\n    # iterate through and remove digits from right\n    for i in range(len(num_string_rev)):\n        if num_int - int(num_string_rev[i:]) > 1:\n            return num_int - int(num_string_rev[i:])\n        num_string_rev = num_string_rev[:i]\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if not isinstance(num, int):\n        raise TypeError('Please enter an integer as input')\n    num_str = str(num)\n    num_str_len = len(num_str)\n    if num_str_len == 1:\n        if num_str == '1':\n            next_palindrome = int(num_str+num_str[::-1])\n        elif num_str[0] == '9':\n            next_palindrome = int(str(int(num_str[0])-1)+num_str[::-1])\n        else:\n            next_palindrome = int(str(int(num_str[0])+1)+num_str[::-1])\n    elif num_str_len == 2:\n        if int(num_str) % 10 == 0:\n            next_palindrome = int(num_str+num_str[::-1])\n        elif int(num_str) % 11 == 0:\n            next_palindrome = int(num_str[0]+str(int(num_str[1])-1)+num_str[::-1])\n        else:\n            next_palindrome = int(num_str+str(int(num_str[0])-1)+num_str[::-1])\n    else:\n        temp_str = num_str\n        temp_str_len = num_str_len\n        while temp_str_len > 1:\n            if int(temp_str) % 11 == 0:\n                temp_str = temp_str[0]+str(int(temp_str[1])-1)+temp_str[::-1]\n                temp_str_len -= 2\n            else:\n                temp_str = temp_str[0]+temp_str[-1]+temp_str[1:len(temp_str)-1][::-1]\n                temp_str_len -= 2\n        next_palindrome = int(temp_str+temp_str[::-1])\n    return next_palindrome\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    if num == num[::-1]:\n        return num\n    for i in range(0, len(num)):\n        if num[i]!= num[-1-i]:\n            temp = num[0:i] + num[i+1:len(num)]\n            if temp == temp[::-1]:\n                return int(temp + num)\n            else:\n                return int(temp + num + temp[::-1])\n    if len(num) == 1:\n        return int(num + num[::-1])\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #base case\n    if len(num) == 1:\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    try:\n        num = int(num)\n    except:\n        sys.exit(\"Invalid input!\")\n    if not num >= 0:\n        sys.exit(\"Number must be positive!\")\n    num = str(num)\n    if len(num) == 1:\n        return num\n    num_list = [int(x) for x in num]\n    reverse_num = num[::-1]\n    if int(reverse_num) < int(num):\n        new_num = num[:-1]\n    else:\n        for i, x in enumerate(num_list):\n            if x!= int(reverse_num[i]):\n                break\n        new_num = num[:i] + str(int(reverse_num[i]) - 1) + str(int(reverse_num[i]) - 1)\n    return new_num\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Method 1: \n    # is palindrome = is palindrome[::-1]\n    # Method 2:\n    # reverse the integer and add 1, and compare if the reverse with original is palindrome\n    '''\n    Method 1\n    if type(num)!= int:\n        raise Exception('Number needs to be an integer')\n    palindrome = str(num)\n    while True:\n        if palindrome == palindrome[::-1]:\n            return int(palindrome)\n        else:\n            palindrome = str(int(palindrome)+1)\n    '''\n    # Method 2\n    if type(num)!= int:\n        raise Exception('Number needs to be an integer')\n    palindrome = str(num)\n    n = len(palindrome)\n    if palindrome == palindrome[::-1]:\n        return int(palindrome)\n    else:\n        for i in range(n-1):\n            if palindrome[i] < palindrome[i+1]:\n                break\n        if i == n-1:\n            i = 0\n        else:\n            i += 1\n        palindrome = palindrome[:i] + str(int(palindrome[i])+1) + palindrome[i+1:]\n        return int(palindrome)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"Out of Range\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k < 0 or k > n:\n        raise ValueError(f'Incorrect input: k = {k}')\n    return binary_search_helper(arr, 0, n-1, n-k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def partition(arr, lo, hi):\n        '''\n        Finds the middle element and returns its index.\n        '''\n        if arr is None or len(arr) == 0:\n            return None\n        i = (lo-1)\n        pivot = arr[hi]\n        for j in range(lo, hi):\n            if arr[j] < pivot:\n                i += 1\n                arr[i], arr[j] = arr[j], arr[i]\n        arr[i+1], arr[hi] = arr[hi], arr[i+1]\n        return (i+1)\n    \n    def kth_element_helper(arr, lo, hi, k):\n        '''\n        Return the kth element in the given array using the partition method.\n        '''\n        if k > 0 and k <= hi - lo + 1:\n            pi = partition(arr, lo, hi)\n            if pi - lo == k - 1:\n                return arr[pi]\n            elif pi - lo > k - 1:\n                return kth_element_helper(arr, lo, pi - 1, k)\n            else:\n                return kth_element_helper(arr, pi + 1, hi, k - pi + lo - 1)\n        else:\n            return None\n    \n    return kth_element_helper(arr, 0, len(arr) - 1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    p = partition(arr, 0, len(arr) - 1)\n    if p == k - 1:\n        return arr[p]\n    elif k > p + 1:\n        return kth_element(arr[p + 1:], k - p - 1)\n    else:\n        return kth_element(arr[:p], k)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    def partition(arr, l, r):\n        n = r - l + 1\n        pivot = arr[l]\n        i = l + 1\n        for j in range(i, r+1):\n            if arr[j] < pivot:\n                arr[j], arr[i] = arr[i], arr[j]\n                i += 1\n        arr[l], arr[i-1] = arr[i-1], arr[l]\n        return i - 1\n    \n    def quick_sort(arr, l, r):\n        if l < r:\n            pi = partition(arr, l, r)\n            if pi == k - 1:\n                return arr[pi]\n            elif pi < k - 1:\n                return quick_sort(arr, pi + 1, r)\n            else:\n                return quick_sort(arr, l, pi - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or k < 1:\n        return None\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        # Get the index of the partition\n        partition_index = partition(arr, low, high)\n        # Get the partition index as the kth element\n        if partition_index + 1 == k:\n            return arr[partition_index]\n        # If the partition index is greater than the kth element, look in the left partition\n        elif partition_index + 1 > k:\n            high = partition_index - 1\n        # Otherwise look in the right partition\n        else:\n            low = partition_index + 1\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        pivot_index = start + (end - start)//2\n        pivot = arr[pivot_index]\n        # print(\"pivot\", pivot)\n        left = arr[start]\n        right = arr[end]\n        if left > pivot:\n            end = pivot_index - 1\n        elif right < pivot:\n            start = pivot_index + 1\n        else:\n            if k == pivot_index+1:\n                return pivot\n            elif k < pivot_index+1:\n                end = pivot_index - 1\n            else:\n                start = pivot_index + 1\n    return None\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word.title() for word in word.split('_')])\n    # or\n    # return word.title().translate(None, '_')\n    # or\n    # return ''.join([w.title() for w in word.split('_')])\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # method 1\n    return word[0].upper() + word[1:].lower()\n    # method 2\n    return ''.join([word[0].upper(), word[1:]])\n    # method 3\n    return ''.join(word[0].upper() + word[1:])\n    # method 4\n    return ''.join([i.capitalize() for i in word.split('_')])\n    # method 5\n    return ''.join(word.split('_')).capitalize()\n    # method 6\n    new_str = ''\n    for word in word.split('_'):\n        new_str += word.capitalize()\n    return new_str\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # https://www.geeksforgeeks.org/snake-case-strings-in-python/\n    \n    # first_word = word.split('_')[0]\n    # return first_word + word[1:].replace('_', '')\n    \n    # other way\n    \n    if not word:\n        return word\n    \n    result = [word[0].upper()]\n    \n    for i in range(1, len(word)):\n        if word[i]!= '_':\n            result.append(word[i])\n        else:\n            result[-1] = word[i].upper()\n    \n    return ''.join(result)\n    \nprint(snake_to_camel(\"x_y_z_foo_bar_baz_qux_mux\"))\nprint(snake_to_camel(\"start_and_stop\"))\nprint(snake_to_camel(\"snakes_and_ladders\"))"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word using _\n    result = word.split(\"_\")\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = [word[0].upper()]\n    for letter in word[1:]:\n        if letter.isupper():\n            words.append('_')\n        words.append(letter)\n    return ''.join(words)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    word = [x.capitalize() for x in word]\n    return \"\".join(word)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(w.capitalize() for w in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    result = []\n    for i in word.split(\"_\"):\n        if len(i) == 0:\n            continue\n        result.append(i.title())\n    return \"\".join(result)\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    snake_string = ''\n    for i in range(0, len(word)):\n        if i == 0:\n            snake_string += word[i].upper()\n        elif word[i-1] == '_':\n            snake_string += word[i].upper()\n        else:\n            snake_string += word[i]\n    return snake_string\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 1:\n        return n*(n+1)//2\n    if n == m:\n        return (n-1)*n*(n+1)//6\n    else:\n        return n*eulerian_num(n-1, m) + m*eulerian_num(n, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (m * (m - 1)) // 2 * n\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    def sum_num(num):\n        s = 0\n        for x in num:\n            s = s + int(x)\n        return s\n    a_num = 1\n    b_num = 0\n    while True:\n        if sum_num(str(a_num)[:m]) == sum_num(str(a_num)[m:]) and sum_num(str(a_num)[:m]) == sum_num(str(a_num)[m:]) + n:\n            return a_num\n        a_num = a_num + 1\n        b_num = b_num + 1\n        if b_num > n:\n            return None\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define the variable.\n    a_num = 0\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (pow(2, n, m) - 1) % m\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n % m!= 0:\n        return 0\n    else:\n        x = n // m\n        y = n - m * x\n        return x * (m + y)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i + j == n + m and i!= j:\n                return True\n    return False\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n * (m + 1) - 1\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(n-1) + m*(m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    n = abs(n)\n    m = abs(m)\n    if (n < m):\n        n, m = m, n\n    if (n < m):\n        n, m = m, n\n    # print(n, m)\n    if (n == 0 or m == 0):\n        return 0\n    if (n == 1 or m == 1):\n        if (n == 1 and m == 1):\n            return 1\n        elif (n == 1):\n            return 0\n        else:\n            return 1\n    if (n > m):\n        if ((n - m) % 2 == 0):\n            # print(\"Got n>m and n-m even:\", n, m)\n            return eulerian_num(n - m, m)\n        else:\n            # print(\"Got n>m and n-m odd:\", n, m)\n            return 0\n    if (n == m):\n        # print(\"Got n == m:\", n, m)\n        return eulerian_num(n - 2, m) + 1\n    if (n < m):\n        # print(\"Got n < m:\", n, m)\n        return eulerian_num(n, m - 1) + 1\n    # print(\"Got n == m:\", n, m)\n    return eulerian_num(n - 2, m) + 1\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return list(map(sorted,input_list))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for sublist in input_list:\n        sorted_sublist = sorted(sublist)\n        output_list.append(sorted_sublist)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    print(input_list)\n    for i in input_list:\n        i.sort()\n    print(input_list)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(i) for i in x] for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass # remove this line when you start implementing the function\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for l in input_list:\n        l.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # list of sublists\n    sublists = []\n    # for each list\n    for list_obj in input_list:\n        # for each element of list\n        for index, element in enumerate(list_obj):\n            # if sublist not in sublists\n            if [element] not in sublists:\n                # append sublist to sublists\n                sublists.append([element])\n            # if sublist is in sublists\n            else:\n                # find sublist\n                sublist_index = sublists.index([element])\n                # and add element to that sublist\n                sublists[sublist_index].append(element)\n    # sort sublists\n    sublists.sort(key=lambda x: x[0])\n    # return sorted sublists\n    return sublists\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #print input_list\n    #print '\\n'\n    for index, sublist in enumerate(input_list):\n        input_list[index] = sorted(sublist)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for x in input_list:\n        new_list.append(sorted(x))\n    return new_list\n    \n    \ndef sort_sublists_one_liner(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return [[sorted(x)] for x in input_list]\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for each_list in input_list:\n        each_list.sort()\n    return input_list\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum(lst)\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    true = 0\n    false = 0\n    for i in lst:\n        if i == True:\n            true += 1\n        else:\n            false += 1\n    return true, false\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    print(\"The given list is : \",lst)\n    print(\"The number of True in the given list is : \",sum(map(bool,lst)))\n    \ndef list_name(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    print(data)\n    json_data.close()\n    for key in data.keys():\n        if key[0]==\"L\":\n            print(key)\n    print(data['Lists']['List1'])\n    \ndef list_comp():\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open('data.json')\n    data=json.load(json_data)\n    json_data.close()\n    list_name=list(data['Lists'].keys())\n    print(\"The list name is : \",list_name)\n    \ndef list_comp_loop():\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open('data.json')\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n    \ndef extract_list_names(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    list_name=list(data['Lists'].keys())\n    print(\"The list name is : \",list_name)\n    \ndef extract_list_names_loop(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop2(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop3(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop4(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop5(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop6(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop7(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop8(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop9(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop10(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop11(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop12(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop13(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop14(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop15(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop16(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop17(name):\n    '''\n    Write a python function to extract list names from given json and create dictionary of list names\n    '''\n    json_data=open(name)\n    data=json.load(json_data)\n    json_data.close()\n    for key in data['Lists'].keys():\n        print(key)\n        \ndef extract_list_names_loop18(name):\n    '''\n    Write a python function to extract list names from given json and create dictionar"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for each in lst:\n        if each:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i==True:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count=count+1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in range(len(lst)):\n        if(lst[i] == True):\n            count+=1\n    return count\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(1)\n    return [test_list, test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print(test_list)\n    print(test_tup)\n    test_tup.append(test_list)\n    print(test_tup)\n    \n    return\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass # Remove this line\n    # Note:  the code below is just an example\n    # add_lists([1,2,3],[4,5,6]) ->  [(1,4),(2,5),(3,6)]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n    return test_list\n    # test_list.append(test_tup)\n    # print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    list_app = test_list.copy()\n    tup_app = tuple(list_app)\n    return tup_app\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # your code\n    \n    \ndef add_tuples(test_tup, test_list):\n    '''\n    Write a function to append the given tuples to the given list.\n    '''\n    # your code\n    \n    \ndef test_lists():\n    # initialize a list of 'empty' lists\n    test_list = [ [] for x in range(3) ]\n    # initialize a list of 'empty' tuples\n    test_tup = tuple([ () for x in range(3) ])\n    # create some more 'empty' lists\n    test_list2 = [ [] for x in range(3) ]\n    # create some more 'empty' tuples\n    test_tup2 = tuple([ () for x in range(3) ])\n    # add a non-empty list to each 'empty' list\n    test_list[0].append(1)\n    # add a non-empty tuple to each 'empty' tuple\n    test_tup[0].append(1)\n    # add a non-empty list to each 'empty' list\n    test_list[1].append(2)\n    # add a non-empty tuple to each 'empty' tuple\n    test_tup[1].append(2)\n    # add a non-empty list to each 'empty' list\n    test_list[2].append(3)\n    # add a non-empty tuple to each 'empty' tuple\n    test_tup[2].append(3)\n    # add the list of lists to the list of tuples\n    add_lists(test_list, test_tup)\n    # add the tuple of tuples to the list of tuples\n    add_tuples(test_tup, test_list)\n    # return the list of lists\n    return test_list\n    # return the tuple of tuples\n    return test_tup\n    \n    \ndef sort_nested_list(test_list):\n    '''\n    Write a function to sort a nested list (in order) by using the built-in\n    function sorted() for each sub-list.\n    '''\n    # your code\n    \n    \ndef test_nested_list():\n    # create the list of lists\n    test_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    # sort the list\n    sort_nested_list(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_strings(test_list):\n    '''\n    Write a function to sort a list of strings (in order) by using the built-in\n    function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_strings():\n    # create the list of strings\n    test_list = ['A', 'B', 'C']\n    # sort the list\n    sort_strings(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_strings_reverse(test_list):\n    '''\n    Write a function to sort a list of strings (in order) by using the built-in\n    function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_strings_reverse():\n    # create the list of strings\n    test_list = ['C', 'B', 'A']\n    # sort the list\n    sort_strings_reverse(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_strings_descending(test_list):\n    '''\n    Write a function to sort a list of strings (in order) by using the built-in\n    function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_strings_descending():\n    # create the list of strings\n    test_list = ['C', 'B', 'A']\n    # sort the list\n    sort_strings_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_integers(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_integers():\n    # create the list of integers\n    test_list = [3, 1, 2]\n    # sort the list\n    sort_integers(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_integers_descending(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_integers_descending():\n    # create the list of integers\n    test_list = [3, 1, 2]\n    # sort the list\n    sort_integers_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_floats(test_list):\n    '''\n    Write a function to sort a list of floating-point numbers (in order) by\n    using the built-in function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_floats():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_floats(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef test_sort_floats_descending():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_floats_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_zero_one_two(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted() with a lambda function.\n    '''\n    # your code\n    \n    \ndef test_sort_zero_one_two():\n    # create the list of integers\n    test_list = [0, 1, 2]\n    # sort the list\n    sort_zero_one_two(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_zero_one_two_descending(test_list):\n    '''\n    Write a function to sort a list of integers (in order) by using the built-in\n    function sorted() with a lambda function in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_zero_one_two_descending():\n    # create the list of integers\n    test_list = [0, 1, 2]\n    # sort the list\n    sort_zero_one_two_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_numbers(test_list):\n    '''\n    Write a function to sort a list of floating-point numbers (in order) by\n    using the built-in function sorted().\n    '''\n    # your code\n    \n    \ndef test_sort_numbers():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_numbers(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_numbers_descending(test_list):\n    '''\n    Write a function to sort a list of floating-point numbers (in order) by\n    using the built-in function sorted() in reverse order.\n    '''\n    # your code\n    \n    \ndef test_sort_numbers_descending():\n    # create the list of floating-point numbers\n    test_list = [3.14159265, 1.414214, 2.7182818]\n    # sort the list\n    sort_numbers_descending(test_list)\n    # return the sorted list\n    return test_list\n    \n    \ndef sort_negative_positive(test_list):\n    '''\n    Write a function to sort a list of integers (in order"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # list\n    return [i for i in test_list if i not in test_tup]\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    print('Input List: ', test_list)\n    print('Input Tuple: ', test_tup)\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(\"p\")\n    test_tup[1] = 2\n    return test_list, test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    for i in num1:\n        sorted_list.append(i)\n    for i in num2:\n        sorted_list.append(i)\n    for i in num3:\n        sorted_list.append(i)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    l1 = num1[::-1]\n    l2 = num2[::-1]\n    l3 = num3[::-1]\n    \n    l1 = l1[:-1]\n    l2 = l2[:-1]\n    l3 = l3[:-1]\n    \n    print(l1)\n    print(l2)\n    print(l3)\n    \n    heapq.heapify(l1)\n    heapq.heapify(l2)\n    heapq.heapify(l3)\n    print(l1)\n    print(l2)\n    print(l3)\n    l = []\n    while (l1 and l2 and l3):\n        if l1[0] >= l2[0] and l1[0] >= l3[0]:\n            l.append(l1[0])\n            heapq.heappop(l1)\n        elif l2[0] >= l1[0] and l2[0] >= l3[0]:\n            l.append(l2[0])\n            heapq.heappop(l2)\n        else:\n            l.append(l3[0])\n            heapq.heappop(l3)\n            \n    while(l1):\n        l.append(l1[0])\n        heapq.heappop(l1)\n    while(l2):\n        l.append(l2[0])\n        heapq.heappop(l2)\n    while(l3):\n        l.append(l3[0])\n        heapq.heappop(l3)\n    return l\n    \ndef max_heapify(arr,i,n):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    \n    if l < n and arr[l] > arr[largest]:\n        largest = l\n    if r < n and arr[r] > arr[largest]:\n        largest = r\n    if largest!= i:\n        arr[largest],arr[i] = arr[i],arr[largest]\n        max_heapify(arr,largest,n)\n    \ndef build_max_heap(arr):\n    n = len(arr)\n    for i in range((n//2),-1,-1):\n        max_heapify(arr,i,n)\n    \ndef heapsort(arr):\n    build_max_heap(arr)\n    for i in range(len(arr)-1,0,-1):\n        arr[0],arr[i] = arr[i],arr[0]\n        max_heapify(arr,0,i)\n    return arr\n    \ndef find_occurrences(text,pattern):\n    '''\n    Return the number of times that the pattern occurs in the text.\n    '''\n    count = 0\n    for i in range(0,len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n    \ndef find_next_greatest_letter(letters,target):\n    '''\n    Write a function that takes in a string \n    and returns the next letter in the alpahbet.\n    '''\n    \n    if target >= letters[-1]:\n        return letters[0]\n    else:\n        for i in range(len(letters)-1,0,-1):\n            if target >= letters[i]:\n                return letters[i]\n            \n            \ndef is_rotation(s1,s2):\n    '''\n    Returns true if s2 is a rotation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        for i in range(len(s1)):\n            if s2[0 + i] == s1[0]:\n                return True\n        return False\n    \ndef is_rotation_lazy(s1,s2):\n    '''\n    Returns true if s2 is a rotation of s1.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        return s2 in s1 + s1\n    \ndef find_rotation(s1,s2):\n    '''\n    Returns index of first occurence of s2 in s1\n    '''\n    if len(s1)!= len(s2):\n        return False\n    else:\n        for i in range(len(s1)):\n            if s2[0] == s1[i]:\n                return i\n        return False\n    \ndef contains_word_lazy(s,word):\n    '''\n    Returns true if the word is a substring of s\n    '''\n    return word in s\n    \ndef is_palindrome_permutation(s):\n    '''\n    Returns true if s is a permutation of a palindrome.\n    '''\n    \n    p = dict()\n    for i in s:\n        if i in p.keys():\n            p[i] += 1\n        else:\n            p[i] = 1\n    flag = True\n    for i in p.keys():\n        if p[i] % 2!= 0:\n            if flag:\n                flag = False\n            else:\n                return False\n    return True\n    \ndef is_palindrome_permutation_lazy(s):\n    '''\n    Returns true if s is a permutation of a palindrome.\n    '''\n    \n    s = s.lower()\n    p = dict()\n    for i in s:\n        if i in p.keys():\n            p[i] += 1\n        else:\n            p[i] = 1\n    flag = True\n    for i in p.keys():\n        if p[i] % 2!= 0:\n            if flag:\n                flag = False\n            else:\n                return False\n    return True\n    \ndef is_palindrome_permutation_pythonic(s):\n    '''\n    Returns true if s is a permutation of a palindrome.\n    '''\n    return sum([i % 2 for i in collections.Counter(s.lower()).values()]) <= 1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j] and num1[i] < num3[k]:\n            merged_list.append(num1[i])\n            i += 1\n        elif num2[j] < num1[i] and num2[j] < num3[k]:\n            merged_list.append(num2[j])\n            j += 1\n        else:\n            merged_list.append(num3[k])\n            k += 1\n    \n    if i < len(num1):\n        merged_list.extend(num1[i:])\n    if j < len(num2):\n        merged_list.extend(num2[j:])\n    if k < len(num3):\n        merged_list.extend(num3[k:])\n    \n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i,j,k = 0,0,0\n    while(i<len(num1) and j<len(num2) and k<len(num3)):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            sorted_list.append(num1[i])\n            i+=1\n        elif num2[j] <= num3[k]:\n            sorted_list.append(num2[j])\n            j+=1\n        else:\n            sorted_list.append(num3[k])\n            k+=1\n    sorted_list.extend(num1[i:])\n    sorted_list.extend(num2[j:])\n    sorted_list.extend(num3[k:])\n    return sorted_list\ndef find_missing_num(num_list):\n    '''\n    Write a function to find the missing number in a given integer list.\n    '''\n    num_set = set(num_list)\n    for i in range(1,len(num_list)+1):\n        if i not in num_set:\n            return i\ndef binary_search(num_list,target):\n    '''\n    Write a function to search a specific target in a given integer list.\n    '''\n    low,high = 0,len(num_list)\n    while low < high:\n        mid = low + (high-low)//2\n        if num_list[mid] == target:\n            return True\n        elif num_list[mid] < target:\n            low = mid+1\n        else:\n            high = mid-1\n    return False\ndef move_zeros(num_list):\n    '''\n    Write a function that accepts a list of numbers and moves all zeros to the end,\n    preserving the order of the other elements.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list.append(num_list[i])\n            num_list.remove(num_list[i])\n    return num_list\ndef min_swaps_list(num_list):\n    '''\n    Write a function that accepts a list and swaps the first and last elements\n    until the order is reversed.\n    '''\n    i,swap_counter = 0,0\n    while i < len(num_list)-1:\n        if num_list[i] > num_list[i+1]:\n            temp = num_list[i]\n            num_list[i] = num_list[i+1]\n            num_list[i+1] = temp\n            swap_counter += 1\n        i+=1\n    return swap_counter\ndef min_cost_path(grid):\n    '''\n    Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right\n    by which the sum of the numbers along its path is minimum.\n    '''\n    def min_path(row,col):\n        if row == m-1 and col == n-1:\n            return grid[row][col]\n        elif row == m-1:\n            return grid[row][col] + min_path(row,col+1)\n        elif col == n-1:\n            return grid[row][col] + min_path(row+1,col)\n        else:\n            return grid[row][col] + min(min_path(row,col+1),min_path(row+1,col))\n    m,n = len(grid),len(grid[0])\n    return min_path(0,0)\ndef find_median_of_sorted_arrays(num1,num2):\n    '''\n    Write a function to find the median of two sorted arrays.\n    '''\n    sorted_list = merge_sorted_list(num1,num2)\n    print(sorted_list)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1]+sorted_list[n//2])/2\n    else:\n        median = sorted_list[n//2]\n    return median\ndef find_max_crossing_subarray(num_list,low,mid,high):\n    '''\n    Write a function to find the maximum sum subarray in a given array.\n    '''\n    left_sum,left_low,left_high = 0,low,mid\n    right_sum,right_low,right_high = 0,mid+1,high\n    while left_low <= left_high:\n        left_sum += num_list[left_low]\n        left_low += 1\n    while right_low <= right_high:\n        right_sum += num_list[right_low]\n        right_low += 1\n    return max(left_sum,right_sum,left_sum+right_sum)\ndef max_subarray_sum(num_list):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray in a given array.\n    '''\n    low,high = 0,len(num_list)-1\n    max_sum = num_list[low]\n    while low < high:\n        mid = low + (high-low)//2\n        max_sum = max(max_sum,find_max_crossing_subarray(num_list,low,mid,high))\n        if num_list[mid] >= num_list[high]:\n            high = mid\n        else:\n            low = mid+1\n    return max_sum\ndef find_subarray_sum(num_list,target_sum):\n    '''\n    Write a function to find a subarray in a given array with the given sum.\n    '''\n    for i in range(len(num_list)):\n        curr_sum,low,high = 0,i,i\n        while curr_sum < target_sum:\n            curr_sum += num_list[high]\n            high += 1\n        if curr_sum == target_sum:\n            return num_list[low:high]\n        curr_sum -= num_list[low]\ndef find_rotation_point(num_list):\n    '''\n    Write a function to find the index of the \"rotation point\" in a given array.\n    '''\n    def search(left,right):\n        while left <= right:\n            mid = left + (right-left)//2\n            if num_list[mid] > num_list[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return right\n    left,right = 0,len(num_list)-1\n    return search(left,right)\ndef max_sum_subarray(num_list):\n    '''\n    Write a function to find the maximum sum of a contiguous subarray in a given array.\n    '''\n    low,high = 0,0\n    max_sum,curr_sum = num_list[low],0\n    while low < len(num_list):\n        if curr_sum < 0:\n            curr_sum = 0\n            high = low+1\n        else:\n            curr_sum += num_list[high]\n            high += 1\n        max_sum = max(max_sum,curr_sum)\n    return max_sum\ndef find_sum_of_two_nums_with_sum(num_list,target_sum):\n    '''\n    Write a function to find two numbers in a list whose sum is equal to the target_sum.\n    '''\n    num_dict = {}\n    for num in num_list:\n        num_dict[num] = True\n    for num in num_list:\n        if target_sum-num in num_dict:\n            return num,target_sum-num\ndef find_longest_subarray(num_list):\n    '''\n    Write a function to find the longest subarray in a given array with sum 0.\n    '''\n    low,high = 0,0\n    curr_sum,max_len = 0,0\n    while high < len(num_list):\n        curr_sum += num_list[high]\n        high += 1\n        while curr_sum < 0:\n            curr_sum -= num_list[low]\n            low += 1"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list = []\n    new_list = num1 + num2 + num3\n    #print(new_list)\n    new_list.sort()\n    print(new_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    heapq.heapify(num1)\n    while num1 and num2 and num3:\n        if num1[0] < num2[0] < num3[0]:\n            heapq.heappop(num1)\n            heapq.heappop(num2)\n            heapq.heappush(num1,num2[0])\n            heapq.heappush(num2,num3[0])\n        elif num1[0] < num3[0] < num2[0]:\n            heapq.heappop(num1)\n            heapq.heappop(num3)\n            heapq.heappush(num1,num3[0])\n            heapq.heappush(num3,num2[0])\n        else:\n            heapq.heappop(num2)\n            heapq.heappop(num3)\n            heapq.heappush(num2,num3[0])\n            heapq.heappush(num3,num1[0])\n    if num2:\n        return num2\n    elif num3:\n        return num3\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    i,j,k=0,0,0\n    while i < len(num1) and j < len(num2) and k<len(num3):\n        if num1[i] < num2[j]:\n            new_list.append(num1[i])\n            i+=1\n        elif num2[j] < num3[k]:\n            new_list.append(num2[j])\n            j+=1\n        else:\n            new_list.append(num3[k])\n            k+=1\n    while i < len(num1):\n        new_list.append(num1[i])\n        i+=1\n    while j < len(num2):\n        new_list.append(num2[j])\n        j+=1\n    while k < len(num3):\n        new_list.append(num3[k])\n        k+=1\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if len(num1) == 0:\n        if len(num2) == 0:\n            return num3\n        elif len(num3) == 0:\n            return num2\n        elif num2[0] < num3[0]:\n            return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n        else:\n            return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n    elif len(num2) == 0:\n        if len(num1) == 0:\n            return num3\n        elif len(num3) == 0:\n            return num1\n        elif num1[0] < num3[0]:\n            return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n        else:\n            return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n    elif len(num3) == 0:\n        if len(num1) == 0:\n            return num2\n        elif len(num2) == 0:\n            return num1\n        elif num1[0] < num2[0]:\n            return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n        else:\n            return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n    elif num1[0] < num2[0] and num1[0] < num3[0]:\n        return [num1[0]] + merge_sorted_list(num1[1:],num2,num3)\n    elif num2[0] < num1[0] and num2[0] < num3[0]:\n        return [num2[0]] + merge_sorted_list(num1,num2[1:],num3)\n    elif num3[0] < num1[0] and num3[0] < num2[0]:\n        return [num3[0]] + merge_sorted_list(num1,num2,num3[1:])\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    list1 = []\n    list2 = []\n    list3 = []\n    list1.append(num1)\n    list2.append(num2)\n    list3.append(num3)\n    list1 = sorted(list1)\n    list2 = sorted(list2)\n    list3 = sorted(list3)\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if (list1[i] == list2[j]) and (list1[i] == list3[k]):\n                    list1.append(list1[i])\n                    list2.remove(list2[j])\n                    list3.remove(list3[k])\n    return list1+list2+list3\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    for i in range(len(num1)):\n        heapq.heappush(heap1,(num1[i],i))\n    for i in range(len(num2)):\n        heapq.heappush(heap2,(num2[i],i))\n    heapq.heappush(heap2,(-1,-1))\n    output = []\n    while True:\n        num,index = heapq.heappop(heap1)\n        if index == -1:\n            break\n        if len(heap2) > 0 and -heap2[0][0] > num:\n            _,i = heapq.heappop(heap2)\n            heapq.heappush(heap1,(num,index))\n            heapq.heappush(heap2,(num,i))\n        else:\n            output.append(num)\n    while len(heap2) > 0:\n        output.append(heapq.heappop(heap2)[0])\n    return output\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1 = s\n    for i in range(n):\n        s1 = s1[1:] + s1[0]\n    return s1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize answer\n    ans = 0\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Code here\n    return n // 2 if n % 2 == 0 else n // 2 + 1\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        x = s[i:]+s[:i]\n        if int(x,2)%2!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    ans = 0\n    for i in range(n):\n        if int(s,2) & 1:\n            ans+=1\n        s = s[-1]+s[0:-1]\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    def number_of_rotations(s):\n        return sum([1 if i==\"1\" else 0 for i in s])\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return (s.count('0')+s.count('1'))%2 == n%2\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = str(s)\n    rotate = str()\n    for i in range(0,n):\n        rotate+=string[i:]+string[:i]\n    print(\"rotate: \"+rotate)\n    count = 0\n    for j in rotate:\n        if j == '0':\n            count+=1\n    return count\nprint(\"Q6: \", odd_Equivalent(s, n))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    bin_string = bin(s)\n    print(bin_string)\n    res = 0\n    for i in range(0,len(bin_string)):\n        if (bin_string[i]=='1'):\n            res+=1\n    return ((n-res)+(n-res)%2) \n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    x = bin(n)[2:]\n    y = bin(n)[2:]\n    count = 0\n    for i in x:\n        if i == '1':\n            count +=1\n    for i in y:\n        if i == '1':\n            count +=1\n    return(count)\n    \ndef x_Maximum(n,k):\n    '''\n    Write a python function to find the number of x when given a number of n and k.\n    '''\n    return(n**k)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for l in nestedlist:\n        if type(l) is list:\n            result.extend(common_in_nested_lists(l))\n        else:\n            result.append(l)\n    return set(result)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    \n    def flatten(nestedlist):\n        for element in nestedlist:\n            if type(element) == type([]):\n                yield from flatten(element)\n            else:\n                yield element\n    #\n    return list(set(flatten(nestedlist)))\n    \n    \nif __name__ == '__main__':\n    # nested = [1, 2, [3, [4], 5], 6]\n    # # expected = [1, 2, 3, 4, 5, 6]\n    # print(common_in_nested_lists(nested))\n    \n    # nested = [1, 2, [3, [4], 5], 6]\n    # expected = [1, 2, 5, 6]\n    # print(common_in_nested_lists(nested))\n    \n    nested = [1, [2, 3, [4, [5, 6]]]]\n    expected = [1, 2, 3, 4, 5, 6]\n    print(common_in_nested_lists(nested))"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    def _common_in_nested_lists(nestedlist):\n        # base case\n        if isinstance(nestedlist, list):\n            return _common_in_nested_lists(nestedlist[0])\n        elif len(nestedlist) == 1:\n            return nestedlist[0]\n        else:\n            # Recursive case\n            return set.intersection(*(set(l) for l in nestedlist))\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for sublist in nestedlist:\n        for item in sublist:\n            if item not in result:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #create a empty set\n    set = set()\n    #create a for loop and for each item in the nested list check if the item is in the set or not\n    for each in nestedlist:\n        #if the item is not in the set then add it\n        if each not in set:\n            set.add(each)\n        #if the item is in the set then check if its in the nested list\n        elif each in set:\n            if each in nestedlist:\n                #if it is in the list then add it to the set\n                set.add(each)\n    #return the set\n    return set\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    # check all the elements of the first element of the nested list\n    # and if the element is also present in any other lists, then it is common\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in nestedlist[i]:\n                result.append(nestedlist[i][j])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for i in nestedlist:\n        if isinstance(i, list):\n            if common_in_nested_lists(i):\n                return True\n    return False\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    i = 0\n    while i < len(nestedlist):\n        for j in nestedlist:\n            if j == nestedlist[i]:\n                return j\n        i += 1\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    d = dict()\n    for i in nestedlist:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d.keys()\n    \nprint(common_in_nested_lists([[1,2,3],[1,2,3],[1,2,3]]))\nprint(common_in_nested_lists([[1,2,3],[2,4,6],[1,2,3]]))\nprint(common_in_nested_lists([[1,2,3],[1,2,3],[2,4,6]])"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    # if not str(text).isdecimal():\n    #     raise TypeError(\"Expected a decimal, got \" + str(text))\n    try:\n        int(text)\n    except ValueError:\n        raise ValueError(\"Expected a decimal, got \" + str(text))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    \ndef check_integer_edge_cases(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        if len(text) == 1:\n            return True\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if isinstance(text, int):\n        return True\n    if text.count('.') > 1:\n        return False\n    if text.count('.') == 1:\n        l, r = text.split('.')\n        if l and r:\n            if l.isdigit() and r.isdigit():\n                return True\n    if text.isdigit():\n        return True\n    return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if text.isdigit():\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    import re\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    text = text.replace(\" \", \"\")\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    empty_list = []\n    empty_list2 = []\n    \n    for i in list1:\n        if bool(i) == True:\n            empty_list.append(i)\n        if bool(i) == False:\n            empty_list2.append(i)\n    if empty_list == [] and empty_list2!= []:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) > 0:\n        for i in list1:\n            if bool(i):\n                return False\n        return True\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_list=[]\n    for i in range(0,len(list1)):\n        if not list1[i]:\n            empty_list.append(True)\n        else:\n            empty_list.append(False)\n    if all(empty_list):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) == True:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)!= len(list1[0]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for x in list1:\n        if len(x) > 0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not all([dict1=={} for dict1 in list1]):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    \n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num1 = nums[0]\n    num2 = nums[1]\n    num3 = nums[2]\n    return int(num1) + int(num2) + int(num3)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(i) for i in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(e) for e in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = tuple(nums)\n    return int(''.join(str(i) for i in t))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple):\n        return\n    for num in nums:\n        if not isinstance(num, int):\n            return\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n    \ndef add_up(nums):\n    '''\n    Write a function to add up all the numbers in a list of integers. Assume the list is empty if it is\n    of length 0 or contains only negative numbers.\n    '''\n    return sum([i for i in nums if i>0])\n    \ndef intersection_of_lists(a,b):\n    '''\n    Write a function to return the intersection of two lists.\n    '''\n    return list(set(a) & set(b))\n    \ndef union_of_lists(a,b):\n    '''\n    Write a function to return the union of two lists.\n    '''\n    return list(set(a) | set(b))\n    \ndef calculate_median(nums):\n    '''\n    Write a function to calculate the median of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef lower_bound(nums, target):\n    '''\n    Write a function to find the lower bound of a number in a list of numbers. Assume there is at least one\n    number in the list that is greater than or equal to the target.\n    '''\n    return next(i for i in nums if i>=target)\n    \ndef upper_bound(nums, target):\n    '''\n    Write a function to find the upper bound of a number in a list of numbers. Assume there is at least one\n    number in the list that is less than or equal to the target.\n    '''\n    return next(i for i in reversed(nums) if i<=target)\n    \ndef unique(nums):\n    '''\n    Write a function to return the number of unique elements in a list.\n    '''\n    return len(set(nums))\n    \ndef mean(nums):\n    '''\n    Write a function to find the mean of a list of numbers.\n    '''\n    return sum(nums)/len(nums)\n    \ndef histogram(nums):\n    '''\n    Write a function to count the number of unique elements in a list.\n    '''\n    return len(set(nums))\n    \ndef mode(nums):\n    '''\n    Write a function to find the most common element in a list of numbers.\n    '''\n    return max(nums, key = nums.count)\n    \ndef find_missing_nums(nums):\n    '''\n    Write a function to find the missing numbers in a list of numbers.\n    '''\n    return list(set(range(1,len(nums)+1)).difference(set(nums)))\n    \ndef find_first_n_missing(nums, n):\n    '''\n    Write a function to find the first n missing numbers in a list of numbers.\n    '''\n    return list(set(range(1,len(nums)+1)).difference(set(nums)))[:n]\n    \ndef find_first_n_missing_binary(nums, n):\n    '''\n    Write a function to find the first n missing numbers in a list of numbers. The numbers are given in binary\n    format.\n    '''\n    return list(set(range(1,2**len(nums))) - set(nums))[:n]\n    \ndef count_characters(str1, str2):\n    '''\n    Write a function to compare two strings and return their number of unique characters.\n    '''\n    return len(set(str1+str2))\n    \ndef number_of_swaps(nums):\n    '''\n    Write a function to find the minimum number of swaps to sort a list of numbers.\n    '''\n    swaps = 0\n    for i in range(len(nums)-1):\n        while nums[i]!= i + 1 and nums[nums[i] - 1]!= nums[i]:\n            tmp = nums[i]\n            nums[i] = nums[tmp-1]\n            nums[tmp-1] = tmp\n            swaps += 1\n    return swaps\n    \ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the bubble sort algorithm.\n    '''\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n    \ndef selection_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the selection sort algorithm.\n    '''\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums\n    \ndef insertion_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the insertion sort algorithm.\n    '''\n    for i in range(len(nums)):\n        curr = nums[i]\n        j = i\n        while j > 0 and nums[j-1] > curr:\n            nums[j] = nums[j-1]\n            j -= 1\n        nums[j] = curr\n    return nums\n    \ndef merge_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the merge sort algorithm.\n    '''\n    if len(nums) <= 1:\n        return nums\n    \n    middle = len(nums)//2\n    left = merge_sort(nums[:middle])\n    right = merge_sort(nums[middle:])\n    \n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Write a function to merge two lists of numbers using the merge sort algorithm.\n    '''\n    result = []\n    while len(left) > 0 and len(right) > 0:\n        if left[0] <= right[0]:\n            result.append(left[0])\n            left = left[1:]\n        else:\n            result.append(right[0])\n            right = right[1:]\n    if len(left) > 0:\n        result += left\n    if len(right) > 0:\n        result += right\n    return result\n    \ndef quick_sort(nums):\n    '''\n    Write a function to sort a list of numbers using the quick sort algorithm.\n    '''\n    return quick_sort_helper(nums, 0, len(nums)-1)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = 0\n    for i in nums:\n        t = t * 10 + i\n    return t\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        new_list = [float(i) for i in test_list]\n        return new_list\n    except:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(num) for num in sublist] for sublist in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for list in test_list:\n        result.append(list_to_float_helper(list))\n    return result\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(0, len(test_list)):\n        for j in range(0, len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(float, test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # solution:\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        float_list = [float(x) for x in test_list]\n        return float_list\n    except ValueError:\n        return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = [float(x) for x in test_list]\n    return test_list_float\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_as_list = string.split(' ')\n    return string_as_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = string.split()\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.split()\n    return string\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string = string.strip()\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(' ')\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize dict\n    dict = {}\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    arr_sorted = sorted(arr)\n    print(arr_sorted)\n    #print(arr)\n    for i in range(len(arr) - 1):\n        if arr_sorted[i]!= arr_sorted[i+1]:\n            print(arr_sorted[i])\n            break\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if(arr[i]==arr[i+1]):\n            return arr[i]\n    return arr[i]\n    \n    \nif __name__ == \"__main__\":\n    arr = [1,3,2,4,1,2,2]\n    print(search(arr))"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid - 1\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    result = n\n    for i in range(n):\n        if i == 0 and arr[i]!= arr[i+1]:\n            result = i\n        elif i == n-1 and arr[i]!= arr[i-1]:\n            result = i\n        elif arr[i]!= arr[i+1] and arr[i]!= arr[i-1]:\n            result = i\n        elif i == n-2 and arr[i] == arr[i+1]:\n            result = i+1\n    print(arr[result])\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    temp = 0\n    for i in range(len(arr)):\n        temp ^= arr[i]\n    return temp\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low=0\n    high=len(arr)-1\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None:\n        return None\n    \n    sortedArr = sorted(arr)\n    if len(sortedArr) == 1:\n        return sortedArr[0]\n    \n    if sortedArr[0]!= sortedArr[1]:\n        return sortedArr[0]\n    \n    if sortedArr[-1]!= sortedArr[-2]:\n        return sortedArr[-1]\n    \n    startIdx = 0\n    endIdx = len(sortedArr) - 1\n    while startIdx < endIdx:\n        midIdx = (startIdx + endIdx)//2\n        if sortedArr[midIdx]!= sortedArr[midIdx + 1]:\n            return sortedArr[midIdx]\n        startIdx = midIdx + 1\n        endIdx = endIdx - 1\n    \n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    low, high = 0, len(arr)-1\n    while low < high:\n        mid = (low+high)//2\n        if arr[mid] == arr[mid-1]:\n            low = mid+1\n        else:\n            high = mid\n    return arr[low]\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for x in arr:\n        if arr.count(x) == 1:\n            return x\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_tuple = []\n    for tuple in list1:\n        if len(tuple) < 2:\n            continue\n        max_tuple.append(tuple)\n    max_tuple = tuple(max_tuple)\n    return max_tuple\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = list1[0][0] * list1[0][1]\n    for i in range(len(list1)):\n        if list1[i][0] * list1[i][1] > max_prod:\n            max_prod = list1[i][0] * list1[i][1]\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list2 = []\n    list3 = []\n    list4 = []\n    for item in list1:\n        list2.append(item[0])\n        list3.append(item[1])\n    for n in range(0, len(list1)-1):\n        list4.append(list2[n] * list3[n+1])\n    print(max(list4))\nmax_product_tuple([(5,6),(1,2),(3,4)])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    highest = 0\n    list2 = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if highest < list1[i]*list1[j]:\n                highest = list1[i]*list1[j]\n                list2 = [(list1[i], list1[j])]\n            elif highest == list1[i]*list1[j]:\n                list2.append((list1[i], list1[j]))\n    return highest, list2\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    return max([t[0] * t[1] for t in list1 if (t[0] * t[1])!= 0])\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    print(list1)\n    max_product = 0\n    # for i in list1:\n    #     if i[0]*i[1] > max_product:\n    #         max_product = i[0]*i[1]\n    #         max_tuple = i\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_p = list1[0]\n    for i in range(1, len(list1)):\n        if abs(list1[i][0]*list1[i][1]) > abs(max_p):\n            max_p = list1[i][0]*list1[i][1]\n    return max_p\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    from itertools import combinations\n    pairs = list(combinations(list1, 2))\n    max1 = 0\n    for pair in pairs:\n        if abs(pair[0]*pair[1]) > max1:\n            max1 = abs(pair[0]*pair[1])\n    return max1\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    #sum = 0\n    #for i in range(1,limit+1):\n    #    n_a = sum_divisors(i)\n    #    n_b = sum_divisors(n_a)\n    #    if i == n_b and i!= n_a:\n    #        sum += i\n    #        print(i)\n    #print(sum)\n    return sum([i for i in range(1,limit+1) if sum_divisors(i) == sum_divisors(sum_divisors(i)) and i!= sum_divisors(i)])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def _sum_divisors(n):\n        total = 0\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                total += i\n                if i!= n // i:\n                    total += n // i\n        return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        j = sum_divisors(i)\n        if i == sum_divisors(j) and i!= j:\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_numbers(n):\n        amicable_numbers = set()\n        for number1 in range(1, n):\n            for number2 in range(1, n):\n                if number1 > number2:\n                    if (number1 == sum_factors(number2, number1)) and (number2 == sum_factors(number1, number2)):\n                        amicable_numbers.add(number1)\n                        amicable_numbers.add(number2)\n        return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(x):\n        return sum([num for num in range(1, x) if x % num == 0])\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def divisors(number):\n        divisors = [1]\n        for i in range(2, int(number ** 0.5) + 1):\n            if number % i == 0:\n                divisors.append(i)\n                if i!= number / i:\n                    divisors.append(number / i)\n        return divisors\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit):\n        # base cases\n        if (sum_divisors(i) == i and sum_divisors(sum_divisors(i)) == i):\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def _is_amicable(number):\n        return sum(get_divisors(number)) == number and sum(get_divisors(sum(get_divisors(number)))) == number\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_ = 0\n    for i in range(1, limit):\n        if is_amicable(i):\n            sum_ += i\n    return sum_\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def sum_divisors(n):\n        return sum(divisor for divisor in range(1, n) if n % divisor == 0)\n    \n    def sum_amicable_numbers(limit):\n        result = 0\n        for n in range(2, limit):\n            n_a = sum_divisors(n)\n            n_b = sum_divisors(n_a)\n            if n == n_b and n_a!= n:\n                result += n\n        return result\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta = cmath.phase(a)\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    #input: a + bi\n    # output: theta = arctan(b/a)\n    if a == 0:\n        print(\"Cannot be divided by zero.\")\n        return None\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    if abs(a) == 0:\n        return 0\n    if abs(b) == 0:\n        return 0\n    if a < 0:\n        if b < 0:\n            return cmath.phase(-a)*180/cmath.pi\n        elif b > 0:\n            return cmath.phase(a)*180/cmath.pi\n    elif a > 0:\n        if b < 0:\n            return cmath.phase(a)*180/cmath.pi\n        elif b > 0:\n            return cmath.phase(a)*180/cmath.pi\n    else:\n        return 0\ndef add_complex(a,b):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    return a + b\ndef minus_complex(a,b):\n    '''\n    Write a function to get the difference of two complex numbers.\n    '''\n    return a - b\ndef times_complex(a,b):\n    '''\n    Write a function to get the product of two complex numbers.\n    '''\n    return a * b\ndef divide_complex(a,b):\n    '''\n    Write a function to get the quotient of two complex numbers.\n    '''\n    return a / b\ndef absolute_complex(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    return abs(a)\ndef conjugate_complex(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return a.conjugate()\ndef complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return a.real\n    elif a.real == 0:\n        return a.imag\ndef display_complex(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\ndef arg_complex(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef print_complex(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_complex(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_angle_complex(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef add_complex_num(a,b):\n    '''\n    Write a function to get the sum of two complex numbers.\n    '''\n    return a + b\ndef minus_complex_num(a,b):\n    '''\n    Write a function to get the difference of two complex numbers.\n    '''\n    return a - b\ndef times_complex_num(a,b):\n    '''\n    Write a function to get the product of two complex numbers.\n    '''\n    return a * b\ndef divide_complex_num(a,b):\n    '''\n    Write a function to get the quotient of two complex numbers.\n    '''\n    return a / b\ndef absolute_complex_num(a):\n    '''\n    Write a function to get the absolute value of a complex number.\n    '''\n    return abs(a)\ndef conjugate_complex_num(a):\n    '''\n    Write a function to get the conjugate of a complex number.\n    '''\n    return a.conjugate()\ndef complex_number_num(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return a.real\n    elif a.real == 0:\n        return a.imag\ndef display_complex_num(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef arg_complex_num(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef print_complex_num(a):\n    '''\n    Write a function to display a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_complex_num(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return str(a.real)\n    elif a.real == 0:\n        return str(a.imag)\n    else:\n        return str(a.real) + '+' + str(a.imag) + 'i'\ndef get_print_angle_complex_num(a):\n    '''\n    Write a function to get the argument of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number_num(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0:\n        return 0\n    elif a.real == 0:\n        return cmath.phase(a)*180/cmath.pi\n    else:\n        return cmath.phase(a)*180/cmath.pi\ndef get_print_angle_complex_number(a):\n    '''\n    Write a function to get the real and imaginary parts of a complex number.\n    '''\n    if a.imag == 0"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    z=complex(a,b)\n    angle=cmath.phase(z)\n    angle=round(angle,2)\n    print(angle)\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    num = cmath.sqrt((a.real ** 2) + (a.imag ** 2))\n    den = cmath.sqrt((b.real ** 2) + (b.imag ** 2))\n    return cmath.phase(num / den)\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    a=complex(a)\n    b=complex(b)\n    return cmath.phase(a/b)\ndef is_balanced(s):\n    '''\n    A string is said to be balanced if it has as many opening brackets of a certain type as it has closing brackets of that type\n    For example:\n    >>> is_balanced(\"{[(])}\")\n    True\n    >>> is_balanced(\"{[(])\")\n    False\n    >>> is_balanced(\"{[})\")\n    False\n    '''\n    brackets_dict={\"}\":\"{\",\"]\":\"[\",\")\":\"(\"}\n    brackets=[\"{\",\"[\",\"(\"]\n    stack=[]\n    for bracket in s:\n        if bracket in brackets:\n            stack.append(bracket)\n        else:\n            if bracket in brackets_dict.values() and len(stack)!=0:\n                top_element=stack.pop()\n                if brackets_dict[bracket]!=top_element:\n                    return False\n            else:\n                return False\n    if len(stack)!=0:\n        return False\n    return True\ndef is_match(a,b):\n    '''\n    Given 2 strings, a and b, return whether they match\n    in the sense that a string is a permutation of the other string.\n    >>> is_match('ab', 'ba')\n    True\n    >>> is_match('ab', 'b')\n    False\n    >>> is_match('ab', 'abb')\n    True\n    '''\n    a=sorted(a)\n    b=sorted(b)\n    if a==b:\n        return True\n    else:\n        return False\ndef is_anagram(a,b):\n    '''\n    Write a function to determine if 2 strings are anagrams or not\n    '''\n    return is_match(a,b) and is_match(b,a)\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is a palindrome\n    '''\n    return s==s[::-1]\ndef is_rotation(s1,s2):\n    '''\n    Write a function to check if s2 is a rotation of s1 using only one call to is_match\n    '''\n    return is_match(s1+s1,s2)\ndef is_rotation2(s1,s2):\n    '''\n    Write a function to check if s2 is a rotation of s1 using only one call to is_match\n    '''\n    if len(s1)==len(s2):\n        return is_match(s1+s1,s2)\ndef is_subsequence(s,t):\n    '''\n    Write a function to check if s is a subsequence of t\n    >>> is_subsequence('abc', 'ahbgdc')\n    True\n    >>> is_subsequence('axc', 'ahbgdc')\n    False\n    >>> is_subsequence('axc', 'ahbgdcx')\n    True\n    '''\n    if len(s)!=0 and len(t)!=0:\n        if len(s)>=len(t):\n            for i in range(len(t)):\n                if s[i]==t[i]:\n                    pass\n                else:\n                    return False\n            return True\n        else:\n            return False\n    elif len(s)==0 and len(t)==0:\n        return True\n    else:\n        return False\ndef string_rotation(s1,s2):\n    '''\n    Write a function to check if s2 is a rotation of s1 using only one call to is_match\n    '''\n    return is_match(s1+s1,s2)\ndef get_leftmost_rightmost(s):\n    '''\n    Given a string, return leftmost and rightmost indices of a palindrome that is also a palindrome\n    For example:\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"aabb\")\n    [(0,1),(1,2)]\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"a\")\n    []\n    >>> get_leftmost_rightmost(\"\")\n    []\n    '''\n    if len(s)<=1:\n        return []\n    else:\n        palindromes=[]\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                palindromes.append((i,i+len(s[i:])))\n        return palindromes\ndef get_leftmost_rightmost2(s):\n    '''\n    Given a string, return leftmost and rightmost indices of a palindrome that is also a palindrome\n    For example:\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"aabb\")\n    [(0,1),(1,2)]\n    >>> get_leftmost_rightmost(\"aabaa\")\n    [(0,1),(3,4)]\n    >>> get_leftmost_rightmost(\"a\")\n    []\n    >>> get_leftmost_rightmost(\"\")\n    []\n    '''\n    if len(s)<=1:\n        return []\n    else:\n        result=[]\n        for i in range(len(s)):\n            if is_palindrome(s[i:]):\n                result.append((i,i+len(s[i:])))\n        return result\ndef get_substrings_with_k_distinct(s,k):\n    '''\n    Given a string, return a list of all substrings that have k distinct characters\n    For example:\n    >>> get_substrings_with_k_distinct(\"abcacb\",3)\n    ['abc', 'acb', 'bac', 'cab', 'abc', 'acb', 'bac', 'cab']\n    >>> get_substrings_with_k_distinct(\"cabccb\",3)\n    ['abc', 'acb', 'bac', 'cab', 'abc', 'acb', 'bac', 'cab']\n    >>> get_substrings_with_k_distinct(\"aabacbebebe\",3)\n    ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'abe', 'aeb', 'bab', 'bac', 'bbe', 'bec', 'cbe', 'ebe']\n    >>> get_substrings_with_k_distinct(\"aabbccddeeedcba\",3)\n    ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'abe', 'aeb', 'bab', 'bac', 'bbe', 'bec', 'cbe', 'ebe', 'dde', 'ddc', 'dcd', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', 'dca', 'dcb', 'deb', 'dde', 'dce', 'dec', 'dda', 'ddb', 'dcc', '"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(complex(a,b))\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_length = 0 \n    n = len(string) \n    count_0 = 0\n    count_1 = 0\n    # Iterate the string \n    for i in range(n): \n        if (string[i] == '0'): \n            count_0 += 1\n        else: \n            count_1 += 1\n        # Compare maximum and count of 1s and 0s \n        max_length = max(max_length,count_0,count_1) \n        # Reset count of 1s and 0s \n        count_0 = 0\n        count_1 = 0\n    return max_length \n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_one_count = 0\n    max_zero_count = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_dif = 0\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    res = 0\n    count = 0\n    for i in string:\n        if i == '0':\n            count += 1\n        else:\n            count -= 1\n        res = max(res, count)\n    return res\n    \ndef max_sub_array(nums): \n    '''\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    '''\n    res = 0\n    count = 0\n    for i in nums:\n        count += i\n        res = max(res, count)\n        if count < 0:\n            count = 0\n    return res\n    \ndef max_sub_array_easy(nums): \n    '''\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    '''\n    dp = [0] * (len(nums) + 1)\n    for i in range(1, len(nums) + 1):\n        dp[i] = max(dp[i - 1] + nums[i - 1], nums[i - 1])\n    return max(dp)\n    \ndef max_sub_array_dp(nums): \n    '''\n    Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n    '''\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    for i in range(1, len(nums)):\n        dp[i] = max(dp[i - 1] + nums[i], nums[i])\n    return max(dp)\n    \ndef count_and_say(n): \n    '''\n    The count-and-say sequence is the sequence of integers with the first five terms as following:\n    1.     1\n    2.     11\n    3.     21\n    4.     1211\n    5.     111221\n    1 is read off as \"one 1\" or 11.\n    11 is read off as \"two 1s\" or 21.\n    21 is read off as \"one 2, then one 1\" or 1211.\n    Given an integer n, generate the nth term of the count-and-say sequence.\n    Note: Each term of the sequence of integers will be represented as a string.\n    '''\n    if n == 1:\n        return '1'\n    res = '1'\n    i = 1\n    while i < n:\n        count = 1\n        pre = res[0]\n        curr = res[0]\n        for j in range(1, len(res)):\n            if curr == pre:\n                count += 1\n            else:\n                res = res[:count] + str(count) + res[count:]\n                count = 1\n                pre = curr\n            curr = res[j]\n        res += str(count) + curr\n        i += 1\n    return res\n    \ndef is_palindrome(x): \n    '''\n    Given an integer x, return true if x is palindrome integer.\n    '''\n    #x = str(x)\n    #return x == x[::-1]\n    if x < 0 or (x % 10 == 0 and x!= 0):\n        return False\n    else:\n        y = 0\n        while x > y:\n            y = y * 10 + x % 10\n            x = x // 10\n        return x == y or x == y // 10\n    \ndef is_palindrome_python(x): \n    '''\n    Given an integer x, return true if x is palindrome integer.\n    '''\n    if x < 0 or (x % 10 == 0 and x!= 0):\n        return False\n    else:\n        y = 0\n        while x > y:\n            y = y * 10 + x % 10\n            x = x // 10\n        return x == y or x == y // 10\n        \ndef is_palindrome_one_line(x): \n    '''\n    Given an integer x, return true if x is palindrome integer.\n    '''\n    return str(x) == str(x)[::-1]\n    \ndef is_power(a, b): \n    '''\n    Given two integers a and b, determine whether the following is true:\n    '''\n    return a ** b == b ** a\n    \ndef is_power_mod_exp(a, b): \n    '''\n    Given a ** b == c (mod d), return [a, b, c, d].\n    '''\n    res = [0, 0, 0, 0]\n    if a == 0:\n        return res\n    if b == 0:\n        return res\n    while b % 2 == 0:\n        b //= 2\n        a = (a % mod) * (a % mod)\n    if b == 1:\n        res[0] = a % mod\n        res[1] = 1\n        res[2] = b\n        res[3] = mod\n    else:\n        res[0] = a\n        res[1] = b\n        res[2] = (a % mod) * (b % mod)\n        res[3] = mod\n    return res\n    \ndef is_power_mod(a, b): \n    '''\n    Given a ** b == c (mod d), return [a, b, c, d].\n    '''\n    c = b % a\n    if c == 0:\n        return [a, b, b // a, b]\n    else:\n        return [a, b, b // a, (b // a + a) % b]\n        \ndef power_sum_conb(a, b): \n    '''\n    Given two integers a and b, find the last digit of a^b.\n    '''\n    return a ** b % 10\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_count = 0\n    count = 0\n    for i in string:\n        if i == '1':\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n            count = 0\n    if count > max_count:\n        max_count = count\n    return max_count\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max(Counter(string).values()) - min(Counter(string).values())\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    return max([string.count('0') - string.count('1'), string.count('1') - string.count('0')])\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    prev_length = 0\n    max_length = 0\n    curr_length = 0\n    for i in string:\n        if i == \"1\":\n            curr_length+=1\n        else:\n            curr_length = 0\n        if curr_length>max_length:\n            max_length = curr_length\n        if curr_length>prev_length:\n            prev_length = curr_length\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = 0\n    max = 0\n    for i in string:\n        if i == '1':\n            count += 1\n        elif i == '0':\n            count -= 1\n        if count > max:\n            max = count\n    return max\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = 0\n    cur_len = 0\n    max_diff = 0\n    for ch in string:\n        if ch == '1':\n            cur_len += 1\n        else:\n            cur_len = 0\n        if cur_len > max_diff:\n            max_diff = cur_len\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i=1 \n    sum1=0\n    while(i<=a and i<=b):\n        if (a%i==0 and b%i==0):\n            sum1=sum1+i\n        i=i+1\n    return sum1\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        num = b\n        denom = a\n    else:\n        num = a\n        denom = b\n    if denom % num == 0:\n        return num\n    elif num % denom == 0:\n        return denom\n    else:\n        return sum(denom,num)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    from numpy import gcd\n    \n    result = gcd(a,b)\n    \n    return result\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    res = 1\n    for i in range(2, min(a,b) + 1):\n        if a%i == 0 and b%i == 0:\n            res = res*i\n    return res\ndef sum_of_prod(a,b): \n    '''\n    Write a python function to find the sum of products of common divisors of two given numbers.\n    '''\n    return sum(a,b) / (a*b)\ndef main():\n    a = int(input(\"Enter the first number: \"))\n    b = int(input(\"Enter the second number: \"))\n    print(\"The sum of common divisors of {0} and {1} is {2}.\".format(a, b, sum(a,b)))\n    print(\"The sum of products of common divisors of {0} and {1} is {2}.\".format(a, b, sum_of_prod(a,b)))\nmain()"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    try:\n        if int(a)==int(b):\n            return int(a)\n        else:\n            a=int(a)\n            b=int(b)\n            div=[]\n            if a>b:\n                greater=a\n                smaller=b\n            else:\n                greater=b\n                smaller=a\n            for i in range(1,greater+1):\n                if (greater%i==0) and (smaller%i==0):\n                    div.append(i)\n            div.remove(greater)\n            return sum(div)\n    except (ValueError,TypeError):\n        raise TypeError(\"Not ints\")\n    except ZeroDivisionError:\n        raise ZeroDivisionError(\"Zero\")\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 2\n    l = []\n    while i <= min(a,b):\n        if a%i == 0 and b%i == 0:\n            l.append(i)\n        i+=1\n    return sum(l)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    if a < 0 or b < 0:\n        return False\n    \n    c = 0\n    for i in range(1, b+1):\n        if a % i == 0 and b % i == 0:\n            c += i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    #your code here\n    return gcd(a,b)\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    while a:\n        b, a = a, b % a\n    return b\n    \ndef sum_of_powers(n):\n    '''\n    Write a python function to calculate the sum of the powers of the given number.\n    '''\n    total=0\n    while n:\n        total += n%10\n        n = n // 10\n    return total\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # base case\n    if (b == 0): \n        return a \n    return sum(b, a % b) \n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n    \ndef multiply_float(x, y):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return x * y\n    \ndef multiply_string(x, y):\n    '''\n    Write a function to multiply two strings.\n    '''\n    return x * y\n    \ndef main():\n    '''\n    Write a function main().\n    '''\n    print(multiply_int(5, 2))\n    print(multiply_float(2.5, 4))\n    print(multiply_string(\"Hello\", 3))\n    "
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_list = []\n    for word in words:\n        if len(word) > n:\n            long_list.append(word)\n    return long_list\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    print(\"The words in the text that are longer than {} letters are: \".format(n))\n    for word in str:\n        if len(word) > n:\n            print(word)\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [x for x in str if len(x) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(\" \")\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # Note:'split' method splits a string into a list of words by 'whitespace'\n    list_of_words = str.split()\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [s for s in str if len(s)>n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    length = []\n    for word in str:\n        if len(word) > n:\n            length.append(word)\n    return length\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # if type(str) is str:\n    #     print(type(str))\n    # else:\n    #     raise TypeError('Please enter a valid string')\n    words = str.split()\n    final_list = []\n    for i in words:\n        if len(i) > n:\n            final_list.append(i)\n    return final_list\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    # need to check sum of each row for the number of elements\n    # check columns\n    # check diagonals\n    return (sum(my_matrix[0]) == sum(my_matrix[1]) == sum(my_matrix[2]) and\n        my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2] == rows + cols and\n        my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0] == rows + cols and\n        all(my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2] == rows + cols for i in range(rows)))\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add to N\n    row_col_sum = 0\n    \n    for row in my_matrix:\n        row_sum += sum(row)\n        col_sum += sum(row[i] for i in range(len(row)))\n        diag_sum += row[0] + row[-1]\n    # for col in zip(*my_matrix):\n        # row_col_sum += sum(col)\n    diag_sum_2 = sum(my_matrix[0]) + sum(my_matrix[1][1]) + sum(my_matrix[2][2])\n    \n    return row_sum == col_sum == diag_sum and row_sum == diag_sum_2\n    \ndef magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # I want to sum the diagonals of my matrix\n    # I want to sum the columns\n    # I want to sum the rows\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Check that rows and cols add to N\n    # Check that diagonals add t"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    m=len(my_matrix[0])\n    if n<3:\n        return False\n    if n!=m:\n        return False\n    if sum([my_matrix[i][j] for i in range(n) for j in range(m)])!=n*n*n+n*n:\n        return False\n    if n%2!=0:\n        middle_row=n//2\n    else:\n        middle_row=n//2+1\n    for i in range(middle_row):\n        for j in range(middle_row,m):\n            if sum(my_matrix[i][j])!=n:\n                return False\n    for i in range(n):\n        if sum(my_matrix[i][middle_row])!=n:\n            return False\n    for i in range(n):\n        if sum([my_matrix[i][j] for j in range(middle_row)])!=n:\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check the number of rows\n    if len(my_matrix)!= 3:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if it is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # check if its diagonal sum is equal\n    sum_of_numbers = 0\n    for i in range(len(my_matrix)):\n        sum_of_numbers += my_matrix[i][i]\n    if sum_of_numbers!= (sum(my_matrix[0]) + sum(my_matrix[-1])):\n        return False\n    \n    # check if the sum of the row and column of the last row is equal\n    for row in range(len(my_matrix)):\n        row_sum = 0\n        col_sum = 0\n        for col in range(len(my_matrix)):\n            row_sum += my_matrix[row][col]\n            col_sum += my_matrix[col][row]\n        if row_sum!= (sum(my_matrix[row]) + sum(my_matrix[-1])):\n            return False\n        if col_sum!= (sum(my_matrix[0]) + sum(my_matrix[-1])):\n            return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_1 = 0\n    sum_2 = 0\n    sum_3 = 0\n    sum_4 = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    num_columns = len(my_matrix[0])\n    num_rows = len(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_dict = {1: [0, 0], 2: [0, 1], 3: [0, 2], 4: [1, 0], 5: [1, 1], 6: [1, 2], 7: [2, 0], 8: [2, 1], 9: [2, 2]}\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    def check_magic(my_matrix, row, col):\n        '''\n        1. Check if the number of rows in my matrix equals the number of\n        columns in my matrix.\n        2. Check if the sum of the elements in a row equals the sum of the\n        elements in the corresponding column.\n        3. Check if the sum of the elements in the diagonal equals the\n        sum of the elements in the corresponding diagonal.\n        '''\n        n = len(my_matrix)\n        m = len(my_matrix[0])\n        if row!= m or col!= n:\n            return False\n        else:\n            sum_row = 0\n            sum_col = 0\n            sum_diag_1 = 0\n            sum_diag_2 = 0\n            for i in range(n):\n                sum_row += my_matrix[i][col]\n                sum_col += my_matrix[row][i]\n                if row == i:\n                    sum_diag_1 += my_matrix[row][i]\n                if col == i:\n                    sum_diag_2 += my_matrix[row][i]\n            if sum_row!= sum_col or sum_diag_1!= sum_diag_2:\n                return False\n            else:\n                return True\n    \n    def iterate(my_matrix):\n        '''\n        Iterate through all the possible combinations and check if the\n        matrix is a magic square.\n        '''\n        for row in range(len(my_matrix)):\n            for col in range(len(my_matrix[0])):\n                if check_magic(my_matrix, row, col):\n                    return True\n    \n    return iterate(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n=len(my_matrix)\n    sum_first = 0\n    sum_second = 0\n    for i in range(n):\n        sum_first+=my_matrix[i][0]\n        sum_second+=my_matrix[i][n-1]\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # sum all the values in the columns and rows\n    for i in range(len(my_matrix)):\n        sum1 = 0\n        sum2 = 0\n        for j in range(len(my_matrix)):\n            sum1 += my_matrix[i][j]\n            sum2 += my_matrix[j][i]\n        if sum1!= 15 or sum2!= 15:\n            return False\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict_nums = defaultdict(int)\n    max_val = 0\n    max_key = None\n    for i in nums:\n        dict_nums[i] += 1\n        if dict_nums[i] > max_val:\n            max_val = dict_nums[i]\n            max_key = i\n    return max_key\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d=defaultdict(int)\n    for i in nums:\n        d[i]+=1\n    max_v=0\n    max_k=None\n    for k,v in d.items():\n        if v>max_v:\n            max_k=k\n            max_v=v\n    return max_k\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurences = defaultdict(int)\n    for item in nums:\n        occurences[item] += 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_count = defaultdict(int)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Method 1 : Default Dict\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_occurrences = 0\n    max_item = 0\n    for k,v in d.items():\n        if v > max_occurrences:\n            max_item = k\n            max_occurrences = v\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    if len(nums) == 0:\n        return 0\n    elif len(nums) == 1:\n        return 1\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    frequency = defaultdict(int)\n    for num in nums:\n        frequency[num] += 1\n    max_value = max(frequency.values())\n    return [key for key in frequency.keys() if frequency[key] == max_value]\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    print(dict)\n    max = -1\n    max_item = -1\n    for i in dict:\n        if dict[i] > max:\n            max = dict[i]\n            max_item = i\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrences = defaultdict(lambda: 0)\n    for num in nums:\n        occurrences[num] += 1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels=['a','e','i','o','u']\n    string=list(str1)\n    l=len(string)\n    for i in range(l):\n        if string[i].lower() in vowels:\n            string[i]=string[i][::-1]\n    string=''.join(string)\n    return string\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    vowel_index = []\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_index.append(i)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    \n    str_list = list(str1)\n    i = 0\n    j = len(str1) - 1\n    \n    while i < j:\n        if str_list[i].lower() not in vowels:\n            i += 1\n        elif str_list[j].lower() not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i += 1\n            j -= 1\n    \n    return ''.join(str_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowel = {'a','e','i','o','u'}\n    vowel_list = []\n    for letter in str1:\n        if letter.lower() in vowel:\n            vowel_list.append(letter)\n    return ''.join(vowel_list[::-1])\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    vowel_list = list(str1)\n    index = 0\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_list[i] = str1[i]\n            index = i\n    start = index\n    end = len(str1) - 1\n    while start < end:\n        vowel_list[start], vowel_list[end] = vowel_list[end], vowel_list[start]\n        start += 1\n        end -= 1\n    return \"\".join(vowel_list)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    string = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if string[i].lower() not in vowels:\n            i += 1\n        elif string[j].lower() not in vowels:\n            j -= 1\n        else:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n    return \"\".join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #Vowel\n    vowels = 'aeiouAEIOU'\n    str1 = list(str1)\n    i = 0\n    j = len(str1) - 1\n    while i < j:\n        if str1[i].lower() not in vowels:\n            i += 1\n        elif str1[j].lower() not in vowels:\n            j -= 1\n        else:\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j -= 1\n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #make a vowel list\n    vowels = 'aeiou'\n    #make a list for the vowels\n    vowel_list = []\n    #make a list for all the characters in the string\n    char_list = []\n    #make a list for the final result\n    result_list = []\n    #for each character in the string, append to the char_list\n    for char in str1:\n        char_list.append(char)\n    #for each character in the list\n    for i in range(len(char_list)):\n        #if the character is a vowel\n        if char_list[i] in vowels:\n            #append it to the vowel list\n            vowel_list.append(char_list[i])\n    #for each character in the vowel list\n    for i in range(len(vowel_list)):\n        #if the character is not in the vowel list\n        if vowel_list[i] not in char_list:\n            #append the character to the final result list\n            result_list.append(vowel_list[i])\n    #for each character in the final result list\n    for i in range(len(result_list)):\n        #append the character to the string\n        str1 += result_list[i]\n    #return the final string\n    return str1\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_list = []\n    non_vowels_list = []\n    new_str = ''\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    list1 = list(str1)\n    vowel_index = []\n    for i, item in enumerate(list1):\n        if item in vowels:\n            vowel_index.append(i)\n    for index in vowel_index:\n        if list1[index] == \"y\":\n            continue\n        else:\n            list1[index] = list1[index].swapcase()\n    print(\"\".join(list1))\n    "
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1_string = ''\n    for x in tup1:\n        tup1_string += x\n    return tup1_string\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = \"\"\n    for word in tup1:\n        result = result + word + \" \"\n    return result.strip()\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #return ''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    mystr = str(tup1)\n    return mystr\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1 = str(tup1)\n    tup1 = tup1.replace(\"'\",\"\")\n    tup1 = tup1.replace(\",\",\"\")\n    tup1 = tup1.replace(\"(\",\"\")\n    tup1 = tup1.replace(\")\",\"\")\n    tup1 = tup1.replace(\" \",\"\")\n    tup1 = tup1.replace(\"\\n\",\"\")\n    return tup1\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = \"\"\n    for i in range(0,len(tup1)):\n        if i == len(tup1)-1:\n            s = s + str(tup1[i])\n        else:\n            s = s + str(tup1[i]) + \", \"\n    return s\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for item in tup1:\n        result += str(item)\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if nums == []:\n        return 0\n    else:\n        return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        negative_sum += num if num < 0 else 0\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([i for i in nums if i < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for n in nums:\n        if n < 0:\n            sum += n\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_of_negatives = 0\n    for i in nums:\n        if i < 0:\n            sum_of_negatives += i\n    return sum_of_negatives\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in nums:\n        if i < 0:\n            result += i\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negativenum = 0\n    for num in nums:\n        if num < 0:\n            sum_negativenum += num\n    return sum_negativenum\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def next_hexagonal_num(num):\n        return num*(2*num - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # hexagonal numbers are made up of the formula: n*(2n-1)\n    return n*(2*n -1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    k = (1 + (1 + 8*n)**0.5)/2\n    return k*(k-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*n) - (n) + n\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # hexagonal number formula: 2 * n^2 - n + 1\n    return (2 * (n**2) - n + 1)\n    \n    \ndef hexagonal_num_better(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * (n - 1) - 1)) / 2\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2*n-1)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def pos(n): \n        return (-1/2 * (1 - sqrt(1 - 2*(1+n))/2)**2 + 1/4) \n    n += 1\n    return n * 2*pos(n)\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    #Every hexagonal number is the sum of the square of the number above it.\n    #To generate a hexagonal number, first find the sum of two squares: 1^2 + 2^2 = 5 + 4 = 9\n    #The first ten hexagonal numbers are 1, 5, 12, 22, 35, 51, 70, 92, 117, 145,...\n    #Now to find the nth number, add the sum of the squares of n-1 and n-2.\n    \n    #Square of n-1 = sum of squares of (n-1)\n    #Square of n = n^2 + n-1^2 + Square of (n-2)\n    #Hence, n^2 = n^2 + n-1^2 + Square of (n-2)\n    #Now add these two terms.\n    #n^2 + n-1^2 + Square of (n-2) = n^2 + n-1^2 + Square of (n-2) + n-2^2\n    #Hence, n^2 = Square of (n-2) + Square of (n-2) + n-2^2 + n-3^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-1) by adding n-1 to the sum of squares of n-1\n    #Let's denote the sum of squares of n-1 as s\n    #Now we have to find the square of n-1 as s = n+1 + n+2 +... + n+n-1\n    #Hence, Square of (n-1) = s + n+n+1 +... + (n-1)n\n    #Now add s to the sum of squares of n-2.\n    #Square of n-2 = s + Square of (n-2) + Square of (n-2)\n    #Now add these two terms.\n    #Square of (n-2) = s + Square of (n-2) + Square of (n-2) + n-3^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-2) by adding n-2 to the sum of squares of n-2\n    #Let's denote the sum of squares of n-2 as s\n    #Now we have to find the square of n-2 as s = n+1 + n+2 +... + n+n-2\n    #Hence, Square of (n-2) = s + n+n+1 +... + (n-2)n\n    #Now add s to the sum of squares of n-3.\n    #Square of n-3 = s + Square of (n-3) + Square of (n-3) + n-4^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-3) = s + Square of (n-3) + Square of (n-3) + n-4^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-3) by adding n-3 to the sum of squares of n-3\n    #Let's denote the sum of squares of n-3 as s\n    #Now we have to find the square of n-3 as s = n+1 + n+2 +... + n+n-3\n    #Hence, Square of (n-3) = s + n+n+1 +... + (n-3)n\n    #Now add s to the sum of squares of n-4.\n    #Square of n-4 = s + Square of (n-4) + Square of (n-4) + n-5^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-4) = s + Square of (n-4) + Square of (n-4) + n-5^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-4) by adding n-4 to the sum of squares of n-4\n    #Let's denote the sum of squares of n-4 as s\n    #Now we have to find the square of n-4 as s = n+1 + n+2 +... + n+n-4\n    #Hence, Square of (n-4) = s + n+n+1 +... + (n-4)n\n    #Now add s to the sum of squares of n-5.\n    #Square of n-5 = s + Square of (n-5) + Square of (n-5) + n-6^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-5) = s + Square of (n-5) + Square of (n-5) + n-6^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-5) by adding n-5 to the sum of squares of n-5\n    #Let's denote the sum of squares of n-5 as s\n    #Now we have to find the square of n-5 as s = n+1 + n+2 +... + n+n-5\n    #Hence, Square of (n-5) = s + n+n+1 +... + (n-5)n\n    #Now add s to the sum of squares of n-6.\n    #Square of n-6 = s + Square of (n-6) + Square of (n-6) + n-7^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-6) = s + Square of (n-6) + Square of (n-6) + n-7^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-6) by adding n-6 to the sum of squares of n-6\n    #Let's denote the sum of squares of n-6 as s\n    #Now we have to find the square of n-6 as s = n+1 + n+2 +... + n+n-6\n    #Hence, Square of (n-6) = s + n+n+1 +... + (n-6)n\n    #Now add s to the sum of squares of n-7.\n    #Square of n-7 = s + Square of (n-7) + Square of (n-7) + n-8^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-7) = s + Square of (n-7) + Square of (n-7) + n-8^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-7) by adding n-7 to the sum of squares of n-7\n    #Let's denote the sum of squares of n-7 as s\n    #Now we have to find the square of n-7 as s = n+1 + n+2 +... + n+n-7\n    #Hence, Square of (n-7) = s + n+n+1 +... + (n-7)n\n    #Now add s to the sum of squares of n-8.\n    #Square of n-8 = s + Square of (n-8) + Square of (n-8) + n-9^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-8) = s + Square of (n-8) + Square of (n-8) + n-9^2 +... + n-1^2 + n\n    \n    #Now we can find the square of (n-8) by adding n-8 to the sum of squares of n-8\n    #Let's denote the sum of squares of n-8 as s\n    #Now we have to find the square of n-8 as s = n+1 + n+2 +... + n+n-8\n    #Hence, Square of (n-8) = s + n+n+1 +... + (n-8)n\n    #Now add s to the sum of squares of n-9.\n    #Square of n-9 = s + Square of (n-9) + Square of (n-9) + n-10^2 +... + n-1^2 + n\n    #Now add these two terms.\n    #Square of (n-9) = s + Square of (n-9) + Square of (n-9) + n-10^2 +... + n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Write your code here\n    n = len(nums)\n    nz = 0\n    nz_total = 0\n    nz_index = []\n    nz_count = 0\n    nz_counter = 0\n    nz_avg = 0\n    nz_avg_total = 0\n    nz_avg_list = []\n    nz_avg_count = 0\n    nz_avg_counter = 0\n    nz_avg_total_list = []\n    nz_avg_count_list = []\n    nz_avg_list_total = 0\n    nz_avg_list_count = 0\n    nz_count_list = []\n    nz_counter_list = []\n    nz_count_total = 0\n    nz_counter_total = 0\n    nz_count_total_list = []\n    nz_counter_total_list = []\n    nz_avg_total_list = []\n    nz_avg_total_count = 0\n    nz_avg_total_count_list = []\n    nz_avg_list_total_list = []\n    nz_avg_list_count_list = []\n    nz_avg_list_total_count = 0\n    nz_avg_list_total_count_list = []\n    nz_avg_count_list_count = 0\n    nz_avg_count_list_count_list = []\n    nz_avg_list_total_count_list = []\n    nz_avg_count_list_total = 0\n    nz_avg_count_list_total_list = []\n    nz_avg_count_list_count_total = 0\n    nz_avg_count_list_count_total_list = []\n    nz_avg_list_total_list_count = 0\n    nz_avg_list_total_list_total = []\n    nz_avg_list_total_list_count_list = []\n    nz_avg_list_total_list_total_list = []\n    nz_avg_list_total_list_count_total = 0\n    nz_avg_list_total_list_count_total_list = []\n    nz_avg_list_total_list_count_total_list = []\n    nz_avg_count_list_count_total_list = []\n    nz_avg_list_total_count_total_list = []\n    nz_avg_count_list_count_total_total_list = []\n    nz_avg_list_total_count_total_list_count = 0\n    nz_avg_list_total_count_total_list_total = []\n    nz_avg_list_total_count_total_list_count_list = []\n    nz_avg_list_total_count_total_list_total_list = []\n    nz_avg_count_list_count_total_list_count_total = 0\n    nz_avg_count_list_count_total_list_count_total_list = []\n    nz_avg_count_list_count_total_list_count_total_total_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list = []\n    nz_avg_count_list_count_total_list_count_total_total_list = []\n    nz_avg_count_list_count_total_list_count_total_list_total = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_total = []\n    nz_avg_list_total_list_count_total_list_count_total_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count = []\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count_list_total = []\n    nz_avg_list_total_list_count_total_list_count_total_list_total_list_count_total_list_count = 0\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_total_list_count_total_list_count = 0\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_total_list_count_total_total_list_count_total_list_count = 0\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_count_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_list = []\n    nz_avg_list_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_count_total_list_coun"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeroes = 0\n    num_numbers = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        num_numbers += 1\n    \n    if num_numbers == 0:\n        return \"Array is empty\"\n    elif num_numbers == 1:\n        return \"Array has only one element\"\n    else:\n        return \"Number of zeroes / Number of non-zeroes = \" + str(num_zeroes) + \"/\" + str(num_numbers)\n        \n'''\nWrite a function to find the first non-consecutive number in an array of integers.\n'''\ndef first_non_consecutive(nums):\n    for i in range(len(nums) - 1):\n        if nums[i] + 1!= nums[i + 1]:\n            return nums[i] + 1\n        else:\n            continue\n    return False\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count_zero = 0\n    count_non_zero = 0\n    for num in nums:\n        if num == 0:\n            count_zero += 1\n        else:\n            count_non_zero += 1\n    return count_zero, count_non_zero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num==0:\n            count+=1\n    return (count/len(nums))\ndef remove_all_after(nums, a):\n    '''\n    Write a function that, given a sorted array and a target number, \n    finds the index of the last occurrence of that number in the array.\n    '''\n    for i in range(len(nums)):\n        if nums[i]==a:\n            return i\n    return -1\ndef max_consecutive_ones(nums):\n    '''\n    Given an array of 1s and 0s, return the index of the last 1 found in the array.\n    '''\n    max=0\n    for i in range(len(nums)):\n        if nums[i]==1:\n            max=i\n    return max\ndef longest_increasing_subsequence(nums):\n    '''\n    Given an array of integers, write a function to find the longest increasing subsequence in the array.\n    '''\n    longest=[]\n    for i in range(len(nums)):\n        temp=[]\n        for j in range(len(nums)):\n            if nums[i]<nums[j]:\n                temp.append(nums[j])\n        if len(temp)>len(longest):\n            longest=temp\n    return longest\ndef is_valid(nums):\n    '''\n    Write a function that checks whether a given input array of integers \n    contains three numbers such that the sum of the three numbers is equal to the value of the fourth number.\n    '''\n    if len(nums)<4:\n        return False\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if i!=j:\n                for k in range(len(nums)):\n                    if i!=k and j!=k and k!=i and nums[i]+nums[j]+nums[k]==nums[3]:\n                        return True\n    return False\ndef alphabet_position(letter):\n    '''\n    Write a function that takes in a string and returns a list of the alphabetical position of each letter in the string.\n    '''\n    alphabet=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n    positions=[alphabet.index(letter) for letter in alphabet]\n    return positions\ndef n_queens(n):\n    '''\n    Write a function to solve the N-queens puzzle. \n    It should return a list of all distinct solutions to the puzzle.\n    Each solution contains a distinct board configuration of the N-queens' placement, \n    where solutions that differ only in the placement of the queens are considered distinct.\n    '''\n    res=[]\n    board=[[0 for j in range(n)] for i in range(n)]\n    def create_board(board,n):\n        if n==len(board):\n            return True\n        else:\n            for i in range(len(board)):\n                if board[n][i]!=1:\n                    board[n][i]=1\n                    for j in range(len(board)):\n                        if j!=i and board[n][j]!=1:\n                            board[n][j]=1\n                            if create_board(board,n+1):\n                                res.append(board[:])\n                    board[n][i]=0\n    create_board(board,0)\n    return res\ndef missing_element(nums):\n    '''\n    Write a function that takes in an array of positive integers and returns the missing element in the array.\n    '''\n    for i in range(len(nums)):\n        if i+1!=nums[i]:\n            return i+1\n    return -1\ndef is_string_rotation(s1,s2):\n    '''\n    Write a function that checks whether a string is a rotation of another string.\n    '''\n    for i in range(len(s2)):\n        if s1==s2[i:]+s2[:i]:\n            return True\n    return False\ndef is_interleave(s1,s2,s3):\n    '''\n    Write a function that checks whether a string is a interleaving of two other strings.\n    '''\n    if len(s1)+len(s2)!=len(s3):\n        return False\n    if len(s1)==0 and len(s2)==0:\n        return True\n    if len(s1)==0 or len(s2)==0:\n        return False\n    for i in range(len(s3)):\n        if len(s1)==0:\n            return s2==s3[i:]\n        if len(s2)==0:\n            return s1==s3[i:]\n        if s1[0]==s3[i]:\n            return is_interleave(s1[1:],s2,s3[i+1:])\n        if s2[0]==s3[i]:\n            return is_interleave(s1,s2[1:],s3[i+1:])\ndef is_substring_in_word(substring,word):\n    '''\n    Write a function that returns True if the given substring is a substring of the given word, and False otherwise.\n    '''\n    if len(substring)>len(word):\n        return False\n    if substring==word:\n        return True\n    for i in range(len(word)-len(substring)+1):\n        if word[i:i+len(substring)]==substring:\n            return True\n    return False\ndef split_a_string_into_two_strings(string):\n    '''\n    Write a function that takes in a string of even length and returns a pair of strings made up of the first half of the original string and the second half of the original string in reverse order.\n    '''\n    mid=len(string)//2\n    return string[:mid],string[mid:]\ndef number_of_steps_to_reduce_a_number_to_zero(n):\n    '''\n    Write a function that, given a non-negative integer n, \n    returns the minimum number of operations needed to reduce n to 0. \n    An operation is defined as:\n    1. Subtract 1 from n.\n    2. If n is now 0, stop.\n    3. If n is odd, divide by 2.\n    4. If n is even, divide by 2 and subtract 1.\n    '''\n    count=0\n    while n!=0:\n        if n%2==0:\n            n=n/2\n        else:\n            n=n-1\n        count+=1\n    return count\ndef move_zeroes(nums):\n    '''\n    Write a function that takes an array of 0s, 1s, and 2s and rearranges the array so that all of the 0s come first, followed by the 1s, followed by the 2s.\n    '''\n    count=0\n    index=0\n    for i in range(len(nums)):\n        if nums[i]!=0:\n            nums[index],nums[i]=nums[i],nums[index]\n            index+=1\n    return nums\ndef move_zeros(nums):\n    '''\n    Write a function that takes an array of 0s, 1s, and 2s and rearranges the array so that all of the 0s come first, followed by the 1s, followed by the 2s.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i]==0 and nums[i+1]!=0:\n            nums[i],nums[i+1]=nums[i+1],nums[i]\n    return nums\ndef all_pairs_shortest_path(nums,max_dist):\n    '''\n    Given a square matrix of distinct numbers, return all the pairs of nodes that are exactly max_dist apart from one another.\n    '''\n    output=[]\n    for i in range(len(nums)):\n        for j in range(le"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count=0\n    for num in nums:\n        if num==0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # s = 0\n    # for i in nums:\n    #     if i == 0:\n    #         s += 1\n    # return s/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([x for x in nums if x==0]) / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #Create a dictionary to store the number of zeroes and non-zeroes in the array\n    zero_count = {0:0, 1:0}\n    #Iterate through the array\n    for i in nums:\n        #If the value of the array at the current index is 0\n        if i == 0:\n            #Increment the value of the dictionary with the key of 0\n            zero_count[0] += 1\n        #Else if the value at the current index is 1\n        else:\n            #Increment the value of the dictionary with the key of 1\n            zero_count[1] += 1\n    #Return the ratio of the zeroes and non-zeroes in the array\n    return zero_count[0]/zero_count[1]\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    total_zero = 0\n    total_nonzero = 0\n    for num in nums:\n        if num == 0:\n            total_zero += 1\n        else:\n            total_nonzero += 1\n    return total_zero / total_nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_powers = 0\n    while n:\n        sum_of_powers += (n % 2)\n        n = n // 2\n    if sum_of_powers == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if(n<0):\n        return False\n    power=1\n    temp=n\n    while(temp):\n        temp=temp//2\n        power*=2\n    if(n==power):\n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n // 2)\n    else:\n        return is_Sum_Of_Powers_Of_Two((n // 2) + 1)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n < 0:\n        return False\n    while n % 2 == 0:\n        n /= 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n%2==0):\n        n = n/2\n    return (n==1)\n  \n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum = 0\n    while(n>0):\n        sum+=n%2\n        n = n/2\n    if sum>1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n and not n & 1: \n        n >>= 1\n    return n == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    while n % 2 == 0: \n        n = n / 2\n    return n == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = [] \n    for i in range(1, n): \n        if ((n % i == 0) and (n / i < n)): \n            res.append(i) \n    if sum(res) == n: \n        return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    a = n\n    s = 0\n    while (a!= 0): \n        b = a % 2\n        s = s + b\n        a = a // 2\n    if (s == 0): \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * 3.14 * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    c = 2 * math.pi * r\n    return c\n    \n    "
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r*math.pi*2\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*PI*r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    from math import pi\n    return 2 * pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2*math.pi*r\n    print('The circumference is '+str(c)+'.')\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return (2*r*3.14)\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = list()\n    for e in test_list:\n        if type(e) is list:\n            result += extract_singly(e)\n        else:\n            result.append(e)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create a result list\n    result = []\n    \n    # Iterate through the list\n    for sublist in test_list:\n        for i in sublist:\n            result.append(i)\n    \n    # Return the result list\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for item in test_list:\n        result.update(item)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [j for i in test_list for j in i]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [elem for sublist in test_list for elem in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [x for sublist in test_list for x in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(sum(test_list, []))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [item for sublist in test_list for item in sublist]\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # The nested list was not a list of lists\n    if not isinstance(test_list, list):\n        return test_list\n    # The nested list was a list of lists, but it was only one layer deep\n    elif not any([isinstance(elem, list) for elem in test_list]):\n        return test_list\n    # The nested list was a list of lists and it had more than one layer\n    else:\n        result = []\n        for sublist in test_list:\n            # First check if the sublist was a list of lists or a single number\n            # If it's a single number, then add it to the result\n            if not isinstance(sublist, list):\n                result.append(sublist)\n            else:\n                result.extend(extract_singly(sublist))\n        return result\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return [num for sublist in test_list for num in sublist]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for k in range(len(nums)-1,0,-1):\n        find_max_index = 0\n        for index in range(1,k+1):\n            if nums[index] > nums[find_max_index]:\n                find_max_index = index\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        #print(i)\n        #print(nums)\n        idx = 0\n        #print(len(nums) - i)\n        #print(nums[len(nums)-i:])\n        while idx < len(nums) - i:\n            if nums[idx] > nums[idx+1]:\n                flip_nums(nums, idx, idx+1)\n            idx += 1\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the maximum value in the remaining unsorted array.\n        max_val = find_max(nums, 0, i)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        max_value = nums[i]\n        max_index = i\n        for j in range(0, i):\n            if nums[j] >= max_value:\n                max_value = nums[j]\n                max_index = j\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length <= 1:\n        return nums\n    for index in range(length):\n        sorted_index = index_sort(nums, length - 1 - index)\n        if index < sorted_index:\n            nums = swap(nums, index, sorted_index)\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def flip(nums, i):\n        if i == 0:\n            return nums\n        else:\n            nums = nums[::-1]\n            return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # for each element\n    for i in range(len(nums) - 1, -1, -1):\n        # find the max\n        max_index = 0\n        for j in range(i + 1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # swap max to the end\n        nums[max_index], nums[i] = nums[i], nums[max_index]\n        # reverse the tail to max\n        tail = nums[:i + 1]\n        tail.reverse()\n        nums[:i + 1] = tail\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) == 1:\n        return nums\n    for i in range(len(nums) - 1, 0, -1):\n        #print(i)\n        if nums[i]!= i + 1:\n            for j in range(i):\n                if nums[j] > nums[i]:\n                    nums[j], nums[i] = nums[i], nums[j]\n                    #print(nums)\n                    break\n            nums[:i+1] = reversed(nums[:i+1])\n            return nums\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Make a copy of the list to avoid modifying the original\n    copy_nums = nums[:]\n    # A variable to keep track of the current number of pancake moves\n    move_count = 0\n    # A variable to keep track of the number of iterations of the loop\n    loop_count = 0\n    # Loop as long as the list is not sorted\n    while copy_nums!= sorted(copy_nums):\n        # Increment the loop count\n        loop_count += 1\n        # Get the number of the first element of the unsorted list\n        first_number = min(copy_nums)\n        # Get the index of the first element of the unsorted list\n        first_number_index = copy_nums.index(first_number)\n        # If the first element is not at the beginning of the list\n        if first_number_index!= 0:\n            # Reverse the list up to first_number_index\n            copy_nums = reverse_list(copy_nums, 0, first_number_index)\n            # Increment the move count\n            move_count += first_number_index\n        # Get the number of the last element of the unsorted list\n        last_number = max(copy_nums)\n        # Get the index of the last element of the unsorted list\n        last_number_index = copy_nums.index(last_number)\n        # If the last element is not at the end of the list\n        if last_number_index!= len(copy_nums) - 1:\n            # Reverse the list up to last_number_index\n            copy_nums = reverse_list(copy_nums, last_number_index, len(copy_nums) - 1)\n            # Increment the move count\n            move_count += len(copy_nums) - 1 - last_number_index\n        # Get the index of the first element of the sorted list\n        first_number_index = copy_nums.index(first_number)\n        # Get the index of the last element of the sorted list\n        last_number_index = copy_nums.index(last_number)\n        # If the last element is not at the end of the list\n        if last_number_index!= len(copy_nums) - 1:\n            # If the first element is greater than the last element\n            if copy_nums[first_number_index] > copy_nums[last_number_index]:\n                # Flip the first and last element of the sorted list\n                copy_nums[first_number_index], copy_nums[last_number_index] = copy_nums[last_number_index], copy_nums[first_number_index]\n                # Increment the move count\n                move_count += 2\n    # Return the number of the moves, and the list sorted\n    return move_count, copy_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums), 0, -1):\n        for j in range(0, i-1):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n        print(nums)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            samepair +=1\n    return samepair\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if(list1[i] == list2[i] and list1[i] == list3[i]):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        print(\"Wrong input data\")\n        return\n    \n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if len(list1)==len(list2) and len(list2)==len(list3):\n        samepair=0\n        for i in range(0,len(list1)):\n            if list1[i]==list2[i]==list3[i]:\n                samepair=samepair+1\n        return samepair\n    else:\n        return None\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # Return 0 if one of the lists are empty\n    if len(list1) == 0 or len(list2) == 0 or len(list3) == 0:\n        return 0\n    count = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if list1[i] == list2[j] == list3[k]:\n                    count += 1\n                    break\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    samepair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            samepair += 1\n    return samepair\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # list() creates a list \n    # set() removes duplicates \n    # set(list) converts list into set \n    return(len(set(list(Input))))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists_count = 0\n    for i in Input:\n        if type(i) == list:\n            lists_count += 1\n    return lists_count\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(Input)\n    \ndef find_maximum(Input): \n    '''\n    Write a function to find the maximum value from the list.\n    '''\n    return max(Input)\n    \ndef find_minimum(Input): \n    '''\n    Write a function to find the minimum value from the list.\n    '''\n    return min(Input)\n    \ndef list_sort(Input): \n    '''\n    Write a function to sort the list in ascending order.\n    '''\n    return sorted(Input)\n    \ndef list_uniq(Input): \n    '''\n    Write a function to find the unique values from the list.\n    '''\n    return list(set(Input))\n    \ndef list_dup(Input): \n    '''\n    Write a function to find the duplicate values from the list.\n    '''\n    return [x for n, x in enumerate(Input) if x in Input[:n]]\n    \ndef list_contains(Input, x): \n    '''\n    Write a function to find the value x is in the list or not.\n    '''\n    return x in Input\n    \ndef list_first(Input, x): \n    '''\n    Write a function to find the first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_last(Input, x): \n    '''\n    Write a function to find the last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_remove_all(Input, x): \n    '''\n    Write a function to remove all occurrence of value x in the list.\n    '''\n    return [i for i in Input if i!= x]\n    \ndef list_remove_first(Input, x): \n    '''\n    Write a function to remove first occurrence of value x in the list.\n    '''\n    return [i for i in Input if i!= x][0]\n    \ndef list_remove_last(Input, x): \n    '''\n    Write a function to remove last occurrence of value x in the list.\n    '''\n    return [i for i in Input if i!= x][-1]\n    \ndef list_insert(Input, x, n): \n    '''\n    Write a function to insert value x at index n in the list.\n    '''\n    return Input[:n] + [x] + Input[n:]\n    \ndef list_remove(Input, x): \n    '''\n    Write a function to remove value x in the list.\n    '''\n    return [i for i in Input if i!= x]\n    \ndef list_pop(Input, n): \n    '''\n    Write a function to remove value x in the list at index n and return it.\n    '''\n    return Input[:n] + Input[n+1:]\n    \ndef list_reverse(Input): \n    '''\n    Write a function to reverse the list.\n    '''\n    return Input[::-1]\n    \ndef list_sort(Input): \n    '''\n    Write a function to sort the list in descending order.\n    '''\n    return sorted(Input, reverse = True)\n    \ndef list_count(Input, x): \n    '''\n    Write a function to count the number of occurrences of value x in the list.\n    '''\n    return Input.count(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to find the index of the first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_count(Input, x): \n    '''\n    Write a function to find the index of the last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to find the index of the first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to find the index of the last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_clear(Input): \n    '''\n    Write a function to clear the list.\n    '''\n    return []\n    \ndef list_copy(Input): \n    '''\n    Write a function to copy the list.\n    '''\n    return Input[:]\n    \ndef list_len(Input): \n    '''\n    Write a function to return the length of the list.\n    '''\n    return len(Input)\n    \ndef list_join(Input, x): \n    '''\n    Write a function to join the list into a string with x in between each element.\n    '''\n    return ''.join(Input)\n    \ndef list_join(Input, x): \n    '''\n    Write a function to join the list into a string with x in between each element.\n    '''\n    return ''.join(Input)\n    \ndef list_sum(Input): \n    '''\n    Write a function to return the sum of all elements in the list.\n    '''\n    return sum(Input)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of last occurrence of value x in the list.\n    '''\n    return len(Input) - Input[::-1].index(x) - 1\n    \ndef list_index(Input, x): \n    '''\n    Write a function to return the index of first occurrence of value x in the list.\n    '''\n    return Input.index(x)\n    \ndef list_index(Input, x): \n    '"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = [tuple(x) for x in permutations(Input)]\n    return len(list(set(lists)))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    print(Input)\n    length = len(Input)\n    count = 0\n    for i in range(0, length):\n        if isinstance(Input[i], list):\n            count += 1\n    print(count)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    newList = []\n    for list1 in Input:\n        newList.append(list(list1))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len([i for i in Input if type(i) == list]) \n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if Input == ():\n        return 0\n    else:\n        tuple = []\n        for i in range(len(Input)):\n            try:\n                tuple.append(Input[i][0])\n            except:\n                break\n        return len(tuple)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    if isinstance(Input, tuple):\n        return len([list_ for list_ in Input if isinstance(list_, list)])\n    else:\n        return print(\"It is not a tuple.\")\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            absDiff = abs(arr[i] - arr[j])\n            if absDiff > maxDiff:\n                maxDiff = absDiff\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    return arr[-1]-arr[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    return(max(abs(arr[i] - arr[j]) for i in range(len(arr)) for j in range(len(arr)) if i!= j))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)>1:\n        #arr.sort()\n        max_diff = arr[-1]-arr[0]\n        for i in range(len(arr)-1):\n            max_diff = max(max_diff,arr[i+1]-arr[i])\n        return max_diff\n    else:\n        return max(arr) - min(arr)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -2147483648\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if(i!= j and max_diff < (arr[j] - arr[i])):\n                max_diff = arr[j] - arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # sort the array \n    arr.sort() \n    # initialize the first index and the last index \n    first_index = 0 \n    last_index = len(arr) - 1\n    # find the maximum absolute difference \n    # for each index, we need to compute the difference \n    # between the current index and the next index \n    # and between the current index and the previous index \n    max_diff = arr[last_index] - arr[first_index] \n    # start iterating the array from the first element \n    for i in range(len(arr) - 1): \n        current_diff = arr[i + 1] - arr[i] \n        # compare the current_diff and the max_diff \n        if (current_diff > max_diff): \n            max_diff = current_diff \n        # if the current_diff is less than 0, \n        # it means we have found a smaller value \n        # than the previous one, we need to update \n        # the last_index \n        if (current_diff < 0): \n            last_index = i \n    return max_diff \n    \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_val = arr[0]\n    min_val = arr[0]\n    \n    for i in range(len(arr)): \n        if arr[i] < min_val: \n            min_val = arr[i] \n        elif arr[i] > max_val: \n            max_val = arr[i] \n    \n    return (max_val - min_val) \n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=arr[1]-arr[0]\n    for i in range(len(arr)-1):\n        if(arr[i+1]-arr[i]>max_diff):\n            max_diff=arr[i+1]-arr[i]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr = sorted(arr)\n    return(arr[-1] - arr[0])\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n):\n        for y in range(0, n):\n            if (a * x) + (b * y) == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(0, n):\n        for j in range(0, n):\n            if a * i + b * j == n:\n                return (i, j)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if (n - i * a) % b == 0:\n            return i, (n - i * a) // b\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # if a!= 1:\n    #     return None\n    #     # for y in range(0,n+1):\n    #     #     if a*x + y == n:\n    #     #         return x,y\n    #     #     if y == n:\n    #     #         return None\n    # if a == 1:\n    for y in range(0,n+1):\n        for x in range(0,n+1):\n            if x*a + y == n:\n                return x,y\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # consider cases when a is 0 or b is 0\n    if a == 0:\n        return (0, n/b)\n    elif b == 0:\n        return (n/a, 0)\n    # try all possible numbers for x and y\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (0,0)\n    if n == 1:\n        return (1,1)\n    for i in range(1,n):\n        if (a*i)%n == 0:\n            return (i,int((n/a)*i))\n    for i in range(1,n):\n        if (a*i)%n == 1:\n            return (i,int((n/a)*i))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 1:\n        return a, 0\n    if a == 0:\n        return b, 0\n    \n    # a is divisor, b is the remainder\n    # so ax + by = n\n    # b can be either positive or negative\n    # so ax + by = n + b\n    # ax + (n + b)y = n\n    # so y = n/(ax + b)\n    # we can reduce the problem to finding y\n    # now, x = n/(a + b)\n    # so x = n/a - b\n    # so x = (n - b)/a\n    \n    x = (n - b)//a\n    \n    if x < 0:\n        return None\n    \n    return x, n//a\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here\n    for i in range(n):\n        x = i\n        y = n - x\n        if(x*a + y*b == n):\n            return (x,y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Implement this function.\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n % a == 0:\n        y = n // a\n        x = a\n    else:\n        for i in range(1, n):\n            if (n - i * a) % b == 0:\n                x = n - i * a\n                y = (n - x) // b\n                break\n        if x < 0:\n            return None\n    return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = [i for i in list1 if i not in list2]\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        list1.remove(i)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = [1,2,3,4]\n    list2 = [2,4]\n    print(\"List 1:\", list1)\n    print(\"List 2:\", list2)\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    print(list1)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    list3 = list(set(list1)-set(list2))\n    print(list3)\n    \nremove_elements([2,3,4,5,6], [3,6,7])\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list2) > len(list1):\n        return print(\"Please enter a smaller list.\")\n    \n    else:\n        for i in range(len(list1)):\n            if list1[i] in list2:\n                list1.remove(list1[i])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        list1.remove(elem)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # time complexity: O(n + m)\n    # space complexity: O(1)\n    for item in list2:\n        while item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 6\n    else:\n        return (n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    print(f'n: {n}')\n    if n < 0:\n        raise ValueError('Error: n must be greater than or equal to 0')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return 0\n    sum = 0\n    for i in range(0, n // 2 + 1):\n        sum += n - 2*i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 2:\n        return n\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2+1):\n        if n-2*i >=0:\n            sum += n-2*i\n    return sum\n    # test examples\nprint(sum_series(2))\nprint(sum_series(5))\nprint(sum_series(6))\nprint(sum_series(7))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return sum([(n - 2*i) for i in range(0, n // 2)])\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 0:\n        return None\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(0, n//2+1):\n        sum += (n - 2 * i)\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        x = n - (n // 2)\n        if x == 1:\n            return x\n        else:\n            return x + sum_series(n-x)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return round((s * l**2)/(4*tan(pi/l)))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    \n    #if s<3 or s>9:\n    if s<3:\n        return None\n    else:\n        print(\"The area of the polygon is {}.\".format(s*l**2/(4*tan(pi/s)))+\"\\n\")\n        return s*l**2/(4*tan(pi/s))"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (s == 0 or l == 0):\n        return -1\n    else:\n        return s * l * (1 / 2) * tan(pi / l)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n    print(\"*\"*100)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 3 or l % 2 == 1:\n        return -1\n    else:\n        theta = 2 * pi / l\n        a = (l/2) * (s**2 * tan(theta)**2 + s * tan(theta) + (s * tan(theta) - s)**2)**0.5\n        return a\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return 0.5 * l * s ** 2 / tan(pi / s)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s**2/4) * l\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s * l**2 / (4 * tan(pi/s))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s ** 2 * (3 ** 0.5) * 0.25) / (4 * tan((pi / l) * 0.5))\n    return round(a, 2)\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    a = s * l\n    return round(a, 2)\ndef area_parallelogram(a, b):\n    '''\n    Write a function to calculate the area of a parallelogram given the length of its two sides.\n    '''\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_parallelogram(a, b):\n    '''\n    Write a function to calculate the perimeter of a parallelogram given the length of its two sides.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_triangle(a, b):\n    '''\n    Write a function to calculate the area of a triangle given the length of its base and its height.\n    '''\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_triangle(a, b):\n    '''\n    Write a function to calculate the perimeter of a triangle given the length of its base and its height.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_trapezium(a, b, c):\n    '''\n    Write a function to calculate the area of a trapezium given the lengths of its base, top, and sides.\n    '''\n    a = (a + b) / 2\n    b = (a + c) / 2\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_trapezium(a, b, c):\n    '''\n    Write a function to calculate the perimeter of a trapezium given the lengths of its base, top, and sides.\n    '''\n    a = a + b + c\n    return round(a, 2)\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the length of its radius.\n    '''\n    a = pi * (r ** 2)\n    return round(a, 2)\ndef circumference_circle(r):\n    '''\n    Write a function to calculate the circumference of a circle given the length of its radius.\n    '''\n    a = 2 * pi * r\n    return round(a, 2)\ndef area_circle_sector(r, a):\n    '''\n    Write a function to calculate the area of a circle sector given the length of its radius and the angle of its sector.\n    '''\n    a = r ** 2 * a / 360\n    return round(a, 2)\ndef area_circle_segment(r, a):\n    '''\n    Write a function to calculate the area of a circle segment given the length of its radius and the angle of its segment.\n    '''\n    a = (r ** 2) * a / 360\n    return round(a, 2)\ndef circumference_circle_sector(r, a):\n    '''\n    Write a function to calculate the circumference of a circle sector given the length of its radius and the angle of its sector.\n    '''\n    a = 2 * pi * r * a / 360\n    return round(a, 2)\ndef circumference_circle_segment(r, a):\n    '''\n    Write a function to calculate the circumference of a circle segment given the length of its radius and the angle of its segment.\n    '''\n    a = 2 * pi * r * a / 360\n    return round(a, 2)\ndef area_ellipse(a, b):\n    '''\n    Write a function to calculate the area of an ellipse given the length of its semi-major axis and the length of its semi-minor axis.\n    '''\n    a = a * b / 4\n    return round(a, 2)\ndef circumference_ellipse(a, b):\n    '''\n    Write a function to calculate the circumference of an ellipse given the length of its semi-major axis and the length of its semi-minor axis.\n    '''\n    a = a * 2\n    b = b * 2\n    return round(a + b, 2)\ndef area_rhombus(a, b):\n    '''\n    Write a function to calculate the area of a rhombus given the length of its diagonal.\n    '''\n    a = (a * b) / 2\n    return round(a, 2)\ndef perimeter_rhombus(a, b):\n    '''\n    Write a function to calculate the perimeter of a rhombus given the length of its diagonal.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_square(a):\n    '''\n    Write a function to calculate the area of a square given the length of its side.\n    '''\n    a = a ** 2\n    return round(a, 2)\ndef perimeter_square(a):\n    '''\n    Write a function to calculate the perimeter of a square given the length of its side.\n    '''\n    a = a * 4\n    return round(a, 2)\ndef area_rectangle(a, b):\n    '''\n    Write a function to calculate the area of a rectangle given the length of its two sides.\n    '''\n    a = a * b\n    return round(a, 2)\ndef perimeter_rectangle(a, b):\n    '''\n    Write a function to calculate the perimeter of a rectangle given the length of its two sides.\n    '''\n    a = a + b\n    return round(a, 2)\ndef area_square_sector(a, b):\n    '''\n    Write a function to calculate the area of a square sector given the length of its side and the angle of its sector.\n    '''\n    a = a * b / 360\n    return round(a, 2)\ndef area_square_segment(a, b):\n    '''\n    Write a function to calculate the area of a square segment given the length of its side and the angle of its segment.\n    '''\n    a = a ** 2 * b / 360\n    return round(a, 2)\ndef circumference_square_sector(a, b):\n    '''\n    Write a function to calculate the circumference of a square sector given the length of its side and the angle of its sector.\n    '''\n    a = 2 * pi * a * b / 360\n    return round(a, 2)\ndef circumference_square_segment(a, b):\n    '''\n    Write a function to calculate the circumference of a square segment given the length of its side and the angle of its segment.\n    '''\n    a = 2 * pi * a * b / 360\n    return round(a, 2)\ndef area_kite(a, b):\n    '''\n    Write a function to calculate the area of a kite given the lengths of its two sides.\n    '''\n    a = a * b / 2\n    return round(a, 2)\ndef circumference_kite(a, b):\n    '''\n    Write a function to calculate the circumference of a kite given the lengths of its two sides.\n    '''\n    a = a * 4\n    b = b * 2\n    return round(a + b, 2)\ndef area_kite_sector(a, b, c):\n    '''\n    Write a function to calculate the area of a kite sector given the lengths of its three sides and the angle of its sector.\n    '''\n    a = a * b * c / 360\n    return round(a, 2)\ndef circumference_kite_sector(a, b, c):\n    '''\n    Write a function to calculate the circumference of a kite sector given the lengths of its three sides and the angle of its sector.\n    '''\n    a = 2 * pi * a * (b + c) / 360\n    return round(a, 2)\ndef area_kite_segment(a, b, c):\n    '''\n    Write a function to calculate the area of a kite segment given the lengths of its three sides and the angle of its segment.\n    '''\n    a = a ** 2 * b * c / 360\n    return round(a, 2)\ndef circumference_kite_segment(a, b, c):\n    '''\n    Write a function to calculate the circumferenc"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = (s**2 * ((3*(l) - (l**2))/(3))) / 4\n    return a\n    \ndef volume_polyhedron(s, h, r):\n    '''\n    Write a function to calculate the volume of a regular polyhedron given the side length and its height.\n    '''\n    volume = s**2 * (h/3) * (3/4 * tan(pi/3) - (4 * (r**3) / 3))\n    return volume\n"
    }
]